
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	20004a98 	.word	0x20004a98
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&mutex, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00005e61 	.word	0x00005e61
   8:	0001ec5b 	.word	0x0001ec5b
   c:	00005e91 	.word	0x00005e91
		if (fdtable[fd].obj == NULL) {
  10:	00005e91 	.word	0x00005e91
  14:	00005e91 	.word	0x00005e91
  18:	00005e91 	.word	0x00005e91
	...
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_unlock(mutex);
  2c:	00005c05 	.word	0x00005c05
  30:	00005e91 	.word	0x00005e91
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  34:	00000000 	.word	0x00000000
		fdtable[fd].obj = FD_OBJ_RESERVED;
  38:	00005bbd 	.word	0x00005bbd
  3c:	0001daab 	.word	0x0001daab

00000040 <_irq_vector_table>:
  40:	00005e21 000177b1 00005e21 00005e21     !^...w..!^..!^..
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  60:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  70:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  80:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  90:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  a0:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  b0:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  c0:	00005e21 00005e21 00005e21 00005e21     !^..!^..!^..!^..
  d0:	00005e21 00005e21 00005e21              !^..!^..!^..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f4:	f000 b96e 	b.w	3d4 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f806 	bl	110 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__udivmoddi4>:
     110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     114:	9d08      	ldr	r5, [sp, #32]
     116:	460e      	mov	r6, r1
     118:	4604      	mov	r4, r0
     11a:	468c      	mov	ip, r1
     11c:	2b00      	cmp	r3, #0
     11e:	f040 8081 	bne.w	224 <CONFIG_FLASH_SIZE+0x24>
     122:	428a      	cmp	r2, r1
     124:	4617      	mov	r7, r2
     126:	d945      	bls.n	1b4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6a>
     128:	fab2 f282 	clz	r2, r2
     12c:	b14a      	cbz	r2, 142 <CONFIG_IDLE_STACK_SIZE+0x2>
     12e:	f1c2 0120 	rsb	r1, r2, #32
     132:	fa06 f302 	lsl.w	r3, r6, r2
     136:	fa20 f101 	lsr.w	r1, r0, r1
     13a:	4097      	lsls	r7, r2
     13c:	ea41 0c03 	orr.w	ip, r1, r3
     140:	4094      	lsls	r4, r2
     142:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     146:	0c23      	lsrs	r3, r4, #16
     148:	fbbc f6fe 	udiv	r6, ip, lr
     14c:	b2b9      	uxth	r1, r7
     14e:	fb0e cc16 	mls	ip, lr, r6, ip
     152:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     156:	fb06 f001 	mul.w	r0, r6, r1
     15a:	4298      	cmp	r0, r3
     15c:	d909      	bls.n	172 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x28>
     15e:	18fb      	adds	r3, r7, r3
     160:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
     164:	f080 8115 	bcs.w	392 <CONFIG_BT_RPA_TIMEOUT+0xe>
     168:	4298      	cmp	r0, r3
     16a:	f240 8112 	bls.w	392 <CONFIG_BT_RPA_TIMEOUT+0xe>
     16e:	3e02      	subs	r6, #2
     170:	443b      	add	r3, r7
     172:	1a1b      	subs	r3, r3, r0
     174:	b2a4      	uxth	r4, r4
     176:	fbb3 f0fe 	udiv	r0, r3, lr
     17a:	fb0e 3310 	mls	r3, lr, r0, r3
     17e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     182:	fb00 f101 	mul.w	r1, r0, r1
     186:	42a1      	cmp	r1, r4
     188:	d909      	bls.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     18a:	193c      	adds	r4, r7, r4
     18c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     190:	f080 8101 	bcs.w	396 <CONFIG_BT_RPA_TIMEOUT+0x12>
     194:	42a1      	cmp	r1, r4
     196:	f240 80fe 	bls.w	396 <CONFIG_BT_RPA_TIMEOUT+0x12>
     19a:	3802      	subs	r0, #2
     19c:	443c      	add	r4, r7
     19e:	1a64      	subs	r4, r4, r1
     1a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
     1a4:	2100      	movs	r1, #0
     1a6:	b11d      	cbz	r5, 1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     1a8:	40d4      	lsrs	r4, r2
     1aa:	2300      	movs	r3, #0
     1ac:	e9c5 4300 	strd	r4, r3, [r5]
     1b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b4:	b902      	cbnz	r2, 1b8 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6e>
     1b6:	deff      	udf	#255	; 0xff
     1b8:	fab2 f282 	clz	r2, r2
     1bc:	2a00      	cmp	r2, #0
     1be:	d14f      	bne.n	260 <CONFIG_FLASH_SIZE+0x60>
     1c0:	1bcb      	subs	r3, r1, r7
     1c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c6:	fa1f f887 	uxth.w	r8, r7
     1ca:	2101      	movs	r1, #1
     1cc:	fbb3 fcfe 	udiv	ip, r3, lr
     1d0:	0c26      	lsrs	r6, r4, #16
     1d2:	fb0e 331c 	mls	r3, lr, ip, r3
     1d6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     1da:	fb08 f30c 	mul.w	r3, r8, ip
     1de:	42b3      	cmp	r3, r6
     1e0:	d907      	bls.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	19be      	adds	r6, r7, r6
     1e4:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     1e8:	d202      	bcs.n	1f0 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x30>
     1ea:	42b3      	cmp	r3, r6
     1ec:	f200 80eb 	bhi.w	3c6 <CONFIG_BT_RPA_TIMEOUT+0x42>
     1f0:	4684      	mov	ip, r0
     1f2:	1af6      	subs	r6, r6, r3
     1f4:	b2a3      	uxth	r3, r4
     1f6:	fbb6 f0fe 	udiv	r0, r6, lr
     1fa:	fb0e 6610 	mls	r6, lr, r0, r6
     1fe:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
     202:	fb08 f800 	mul.w	r8, r8, r0
     206:	45a0      	cmp	r8, r4
     208:	d907      	bls.n	21a <CONFIG_FLASH_SIZE+0x1a>
     20a:	193c      	adds	r4, r7, r4
     20c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     210:	d202      	bcs.n	218 <CONFIG_FLASH_SIZE+0x18>
     212:	45a0      	cmp	r8, r4
     214:	f200 80d2 	bhi.w	3bc <CONFIG_BT_RPA_TIMEOUT+0x38>
     218:	4618      	mov	r0, r3
     21a:	eba4 0408 	sub.w	r4, r4, r8
     21e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     222:	e7c0      	b.n	1a6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5c>
     224:	428b      	cmp	r3, r1
     226:	d908      	bls.n	23a <CONFIG_FLASH_SIZE+0x3a>
     228:	2d00      	cmp	r5, #0
     22a:	f000 80af 	beq.w	38c <CONFIG_BT_RPA_TIMEOUT+0x8>
     22e:	2100      	movs	r1, #0
     230:	e9c5 0600 	strd	r0, r6, [r5]
     234:	4608      	mov	r0, r1
     236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     23a:	fab3 f183 	clz	r1, r3
     23e:	2900      	cmp	r1, #0
     240:	d149      	bne.n	2d6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x56>
     242:	42b3      	cmp	r3, r6
     244:	d302      	bcc.n	24c <CONFIG_FLASH_SIZE+0x4c>
     246:	4282      	cmp	r2, r0
     248:	f200 80bb 	bhi.w	3c2 <CONFIG_BT_RPA_TIMEOUT+0x3e>
     24c:	1a84      	subs	r4, r0, r2
     24e:	eb66 0303 	sbc.w	r3, r6, r3
     252:	2001      	movs	r0, #1
     254:	469c      	mov	ip, r3
     256:	2d00      	cmp	r5, #0
     258:	d0aa      	beq.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     25a:	e9c5 4c00 	strd	r4, ip, [r5]
     25e:	e7a7      	b.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     260:	f1c2 0320 	rsb	r3, r2, #32
     264:	4097      	lsls	r7, r2
     266:	40d8      	lsrs	r0, r3
     268:	4091      	lsls	r1, r2
     26a:	40de      	lsrs	r6, r3
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	4308      	orrs	r0, r1
     272:	ea4f 4c10 	mov.w	ip, r0, lsr #16
     276:	fbb6 f1fe 	udiv	r1, r6, lr
     27a:	fa1f f887 	uxth.w	r8, r7
     27e:	fb0e 6611 	mls	r6, lr, r1, r6
     282:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
     286:	fb01 f308 	mul.w	r3, r1, r8
     28a:	42b3      	cmp	r3, r6
     28c:	fa04 f402 	lsl.w	r4, r4, r2
     290:	d909      	bls.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     292:	19be      	adds	r6, r7, r6
     294:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     298:	f080 808e 	bcs.w	3b8 <CONFIG_BT_RPA_TIMEOUT+0x34>
     29c:	42b3      	cmp	r3, r6
     29e:	f240 808b 	bls.w	3b8 <CONFIG_BT_RPA_TIMEOUT+0x34>
     2a2:	3902      	subs	r1, #2
     2a4:	443e      	add	r6, r7
     2a6:	1af3      	subs	r3, r6, r3
     2a8:	b286      	uxth	r6, r0
     2aa:	fbb3 f0fe 	udiv	r0, r3, lr
     2ae:	fb0e 3310 	mls	r3, lr, r0, r3
     2b2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
     2b6:	fb00 f308 	mul.w	r3, r0, r8
     2ba:	42b3      	cmp	r3, r6
     2bc:	d907      	bls.n	2ce <CONFIG_BT_HCI_TX_STACK_SIZE+0x4e>
     2be:	19be      	adds	r6, r7, r6
     2c0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     2c4:	d274      	bcs.n	3b0 <CONFIG_BT_RPA_TIMEOUT+0x2c>
     2c6:	42b3      	cmp	r3, r6
     2c8:	d972      	bls.n	3b0 <CONFIG_BT_RPA_TIMEOUT+0x2c>
     2ca:	3802      	subs	r0, #2
     2cc:	443e      	add	r6, r7
     2ce:	1af3      	subs	r3, r6, r3
     2d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d4:	e77a      	b.n	1cc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xc>
     2d6:	f1c1 0720 	rsb	r7, r1, #32
     2da:	fa03 f401 	lsl.w	r4, r3, r1
     2de:	fa22 f307 	lsr.w	r3, r2, r7
     2e2:	431c      	orrs	r4, r3
     2e4:	fa20 f907 	lsr.w	r9, r0, r7
     2e8:	fa06 f301 	lsl.w	r3, r6, r1
     2ec:	ea4f 4c14 	mov.w	ip, r4, lsr #16
     2f0:	40fe      	lsrs	r6, r7
     2f2:	ea49 0903 	orr.w	r9, r9, r3
     2f6:	ea4f 4319 	mov.w	r3, r9, lsr #16
     2fa:	fbb6 fefc 	udiv	lr, r6, ip
     2fe:	fa1f f884 	uxth.w	r8, r4
     302:	fb0c 661e 	mls	r6, ip, lr, r6
     306:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
     30a:	fb0e fa08 	mul.w	sl, lr, r8
     30e:	45b2      	cmp	sl, r6
     310:	fa02 f201 	lsl.w	r2, r2, r1
     314:	fa00 f301 	lsl.w	r3, r0, r1
     318:	d908      	bls.n	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     31a:	19a6      	adds	r6, r4, r6
     31c:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     320:	d248      	bcs.n	3b4 <CONFIG_BT_RPA_TIMEOUT+0x30>
     322:	45b2      	cmp	sl, r6
     324:	d946      	bls.n	3b4 <CONFIG_BT_RPA_TIMEOUT+0x30>
     326:	f1ae 0e02 	sub.w	lr, lr, #2
     32a:	4426      	add	r6, r4
     32c:	eba6 060a 	sub.w	r6, r6, sl
     330:	fa1f f989 	uxth.w	r9, r9
     334:	fbb6 f0fc 	udiv	r0, r6, ip
     338:	fb0c 6610 	mls	r6, ip, r0, r6
     33c:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
     340:	fb00 f808 	mul.w	r8, r0, r8
     344:	45b0      	cmp	r8, r6
     346:	d907      	bls.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     348:	19a6      	adds	r6, r4, r6
     34a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     34e:	d22d      	bcs.n	3ac <CONFIG_BT_RPA_TIMEOUT+0x28>
     350:	45b0      	cmp	r8, r6
     352:	d92b      	bls.n	3ac <CONFIG_BT_RPA_TIMEOUT+0x28>
     354:	3802      	subs	r0, #2
     356:	4426      	add	r6, r4
     358:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     35c:	eba6 0608 	sub.w	r6, r6, r8
     360:	fba0 8902 	umull	r8, r9, r0, r2
     364:	454e      	cmp	r6, r9
     366:	46c4      	mov	ip, r8
     368:	46ce      	mov	lr, r9
     36a:	d318      	bcc.n	39e <CONFIG_BT_RPA_TIMEOUT+0x1a>
     36c:	d015      	beq.n	39a <CONFIG_BT_RPA_TIMEOUT+0x16>
     36e:	b375      	cbz	r5, 3ce <CONFIG_BT_RPA_TIMEOUT+0x4a>
     370:	ebb3 020c 	subs.w	r2, r3, ip
     374:	eb66 060e 	sbc.w	r6, r6, lr
     378:	fa06 f707 	lsl.w	r7, r6, r7
     37c:	fa22 f301 	lsr.w	r3, r2, r1
     380:	40ce      	lsrs	r6, r1
     382:	431f      	orrs	r7, r3
     384:	e9c5 7600 	strd	r7, r6, [r5]
     388:	2100      	movs	r1, #0
     38a:	e711      	b.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     38c:	4629      	mov	r1, r5
     38e:	4628      	mov	r0, r5
     390:	e70e      	b.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     392:	4666      	mov	r6, ip
     394:	e6ed      	b.n	172 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x28>
     396:	4618      	mov	r0, r3
     398:	e701      	b.n	19e <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x54>
     39a:	4543      	cmp	r3, r8
     39c:	d2e7      	bcs.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     39e:	ebb8 0c02 	subs.w	ip, r8, r2
     3a2:	eb69 0404 	sbc.w	r4, r9, r4
     3a6:	3801      	subs	r0, #1
     3a8:	46a6      	mov	lr, r4
     3aa:	e7e0      	b.n	36e <CONFIG_BT_DEVICE_APPEARANCE+0x2d>
     3ac:	4660      	mov	r0, ip
     3ae:	e7d3      	b.n	358 <CONFIG_BT_DEVICE_APPEARANCE+0x17>
     3b0:	4660      	mov	r0, ip
     3b2:	e78c      	b.n	2ce <CONFIG_BT_HCI_TX_STACK_SIZE+0x4e>
     3b4:	4686      	mov	lr, r0
     3b6:	e7b9      	b.n	32c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2c>
     3b8:	4661      	mov	r1, ip
     3ba:	e774      	b.n	2a6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x26>
     3bc:	3802      	subs	r0, #2
     3be:	443c      	add	r4, r7
     3c0:	e72b      	b.n	21a <CONFIG_FLASH_SIZE+0x1a>
     3c2:	4608      	mov	r0, r1
     3c4:	e747      	b.n	256 <CONFIG_FLASH_SIZE+0x56>
     3c6:	f1ac 0c02 	sub.w	ip, ip, #2
     3ca:	443e      	add	r6, r7
     3cc:	e711      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     3ce:	4629      	mov	r1, r5
     3d0:	e6ee      	b.n	1b0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x66>
     3d2:	bf00      	nop

000003d4 <__aeabi_idiv0>:
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop

000003d8 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     3d8:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3da:	4d44      	ldr	r5, [pc, #272]	; (4ec <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa0>)
     3dc:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
     3e0:	6899      	ldr	r1, [r3, #8]
     3e2:	f011 0101 	ands.w	r1, r1, #1
{
     3e6:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     3e8:	d11f      	bne.n	42a <CONFIG_LOG_BUFFER_SIZE+0x2a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     3ea:	aa03      	add	r2, sp, #12
     3ec:	f640 4003 	movw	r0, #3075	; 0xc03
     3f0:	f007 fb06 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     3f4:	4604      	mov	r4, r0
     3f6:	2800      	cmp	r0, #0
     3f8:	d174      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		hci_reset_complete(rsp);
     3fa:	9b03      	ldr	r3, [sp, #12]
	uint8_t status = buf->data[0];
     3fc:	689b      	ldr	r3, [r3, #8]
	if (status) {
     3fe:	781b      	ldrb	r3, [r3, #0]
     400:	b983      	cbnz	r3, 424 <CONFIG_LOG_BUFFER_SIZE+0x24>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     402:	f105 0398 	add.w	r3, r5, #152	; 0x98
     406:	4618      	mov	r0, r3
     408:	f01e fe59 	bl	1f0be <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     40c:	f3bf 8f5b 	dmb	ish
     410:	f000 0005 	and.w	r0, r0, #5
     414:	e853 2f00 	ldrex	r2, [r3]
     418:	e843 0100 	strex	r1, r0, [r3]
     41c:	2900      	cmp	r1, #0
     41e:	d1f9      	bne.n	414 <CONFIG_LOG_BUFFER_SIZE+0x14>
     420:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     424:	9803      	ldr	r0, [sp, #12]
     426:	f019 fe63 	bl	1a0f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     42a:	aa03      	add	r2, sp, #12
     42c:	2100      	movs	r1, #0
     42e:	f241 0003 	movw	r0, #4099	; 0x1003
     432:	f007 fae5 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     436:	4604      	mov	r4, r0
     438:	2800      	cmp	r0, #0
     43a:	d153      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	read_local_features_complete(rsp);
     43c:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     43e:	482c      	ldr	r0, [pc, #176]	; (4f0 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     440:	6899      	ldr	r1, [r3, #8]
     442:	2208      	movs	r2, #8
     444:	3101      	adds	r1, #1
     446:	f01e fcd4 	bl	1edf2 <memcpy>
	net_buf_unref(rsp);
     44a:	9803      	ldr	r0, [sp, #12]
     44c:	f019 fe50 	bl	1a0f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     450:	4621      	mov	r1, r4
     452:	aa03      	add	r2, sp, #12
     454:	f241 0001 	movw	r0, #4097	; 0x1001
     458:	f007 fad2 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     45c:	4604      	mov	r4, r0
     45e:	2800      	cmp	r0, #0
     460:	d140      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	read_local_ver_complete(rsp);
     462:	9803      	ldr	r0, [sp, #12]
     464:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     466:	785a      	ldrb	r2, [r3, #1]
     468:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     46c:	78d9      	ldrb	r1, [r3, #3]
     46e:	789a      	ldrb	r2, [r3, #2]
     470:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     474:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     476:	791a      	ldrb	r2, [r3, #4]
     478:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     47c:	7a19      	ldrb	r1, [r3, #8]
     47e:	79da      	ldrb	r2, [r3, #7]
     480:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     484:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     486:	795a      	ldrb	r2, [r3, #5]
     488:	799b      	ldrb	r3, [r3, #6]
     48a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     48e:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     490:	f019 fe2e 	bl	1a0f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     494:	4621      	mov	r1, r4
     496:	aa03      	add	r2, sp, #12
     498:	f241 0002 	movw	r0, #4098	; 0x1002
     49c:	f007 fab0 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     4a0:	4604      	mov	r4, r0
     4a2:	b9f8      	cbnz	r0, 4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	read_supported_commands_complete(rsp);
     4a4:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.supported_commands, rp->commands,
     4a6:	4813      	ldr	r0, [pc, #76]	; (4f4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     4a8:	6899      	ldr	r1, [r3, #8]
     4aa:	2240      	movs	r2, #64	; 0x40
     4ac:	3101      	adds	r1, #1
     4ae:	f01e fca0 	bl	1edf2 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     4b2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     4b6:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
     4b8:	f043 0306 	orr.w	r3, r3, #6
     4bc:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     4c0:	f019 fe16 	bl	1a0f0 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4c4:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     4c8:	065a      	lsls	r2, r3, #25
     4ca:	d41b      	bmi.n	504 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     4cc:	4b0a      	ldr	r3, [pc, #40]	; (4f8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     4ce:	490b      	ldr	r1, [pc, #44]	; (4fc <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>)
		BT_ERR("Non-LE capable controller detected!");
     4d0:	480b      	ldr	r0, [pc, #44]	; (500 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>)
     4d2:	1ac9      	subs	r1, r1, r3
     4d4:	08c9      	lsrs	r1, r1, #3
     4d6:	0189      	lsls	r1, r1, #6
     4d8:	f041 0101 	orr.w	r1, r1, #1
     4dc:	f01c fcc7 	bl	1ce6e <log_0>
		return -ENODEV;
     4e0:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     4e4:	4620      	mov	r0, r4
     4e6:	b008      	add	sp, #32
     4e8:	bd70      	pop	{r4, r5, r6, pc}
     4ea:	bf00      	nop
     4ec:	20000000 	.word	0x20000000
     4f0:	20000040 	.word	0x20000040
     4f4:	20000048 	.word	0x20000048
     4f8:	00021aac 	.word	0x00021aac
     4fc:	00021b6c 	.word	0x00021b6c
     500:	0002478d 	.word	0x0002478d
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     504:	4621      	mov	r1, r4
     506:	aa03      	add	r2, sp, #12
     508:	f242 0003 	movw	r0, #8195	; 0x2003
     50c:	f007 fa78 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     510:	4604      	mov	r4, r0
     512:	2800      	cmp	r0, #0
     514:	d1e6      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	read_le_features_complete(rsp);
     516:	9b03      	ldr	r3, [sp, #12]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     518:	48b3      	ldr	r0, [pc, #716]	; (7e8 <CONFIG_BT_COMPANY_ID+0x1f7>)
     51a:	6899      	ldr	r1, [r3, #8]
     51c:	2208      	movs	r2, #8
     51e:	3101      	adds	r1, #1
     520:	f01e fc67 	bl	1edf2 <memcpy>
	net_buf_unref(rsp);
     524:	9803      	ldr	r0, [sp, #12]
     526:	f019 fde3 	bl	1a0f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     52a:	4621      	mov	r1, r4
     52c:	aa03      	add	r2, sp, #12
     52e:	f242 0002 	movw	r0, #8194	; 0x2002
     532:	f007 fa65 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     536:	4604      	mov	r4, r0
     538:	2800      	cmp	r0, #0
     53a:	d1d3      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	le_read_buffer_size_complete(rsp);
     53c:	9b03      	ldr	r3, [sp, #12]
     53e:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
     540:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     544:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
     548:	b291      	uxth	r1, r2
	if (!bt_dev.le.mtu) {
     54a:	b121      	cbz	r1, 556 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10a>
	k_sem_init(&bt_dev.le.pkts, rp->le_max_num, rp->le_max_num);
     54c:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     54e:	48a7      	ldr	r0, [pc, #668]	; (7ec <CONFIG_BT_COMPANY_ID+0x1fb>)
     550:	4611      	mov	r1, r2
     552:	f020 feee 	bl	21332 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     556:	9803      	ldr	r0, [sp, #12]
     558:	f019 fdca 	bl	1a0f0 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     55c:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     560:	f016 0620 	ands.w	r6, r6, #32
     564:	f000 8119 	beq.w	79a <CONFIG_BT_COMPANY_ID+0x1a9>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     568:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     56c:	071b      	lsls	r3, r3, #28
     56e:	d511      	bpl.n	594 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x148>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     570:	aa03      	add	r2, sp, #12
     572:	2100      	movs	r1, #0
     574:	f242 001c 	movw	r0, #8220	; 0x201c
     578:	f007 fa42 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     57c:	4604      	mov	r4, r0
     57e:	2800      	cmp	r0, #0
     580:	d1b0      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		le_read_supp_states_complete(rsp);
     582:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     584:	6883      	ldr	r3, [r0, #8]
     586:	f853 2f01 	ldr.w	r2, [r3, #1]!
     58a:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     58c:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     590:	f019 fdae 	bl	1a0f0 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     594:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     598:	069e      	lsls	r6, r3, #26
     59a:	d524      	bpl.n	5e6 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xa>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     59c:	a902      	add	r1, sp, #8
     59e:	f10d 0006 	add.w	r0, sp, #6
     5a2:	f007 fbdd 	bl	7d60 <hci_le_read_max_data_len>
		if (err) {
     5a6:	4604      	mov	r4, r0
     5a8:	2800      	cmp	r0, #0
     5aa:	d19b      	bne.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5ac:	2104      	movs	r1, #4
     5ae:	f242 0024 	movw	r0, #8228	; 0x2024
     5b2:	f007 f8c9 	bl	7748 <bt_hci_cmd_create>
		if (!buf) {
     5b6:	4606      	mov	r6, r0
     5b8:	2800      	cmp	r0, #0
     5ba:	f000 80f5 	beq.w	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
		cp = net_buf_add(buf, sizeof(*cp));
     5be:	2104      	movs	r1, #4
     5c0:	3008      	adds	r0, #8
     5c2:	f020 fad1 	bl	20b68 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     5c6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
     5ca:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     5cc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
     5d0:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     5d2:	4622      	mov	r2, r4
     5d4:	4631      	mov	r1, r6
     5d6:	f242 0024 	movw	r0, #8228	; 0x2024
     5da:	f007 fa11 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     5de:	4604      	mov	r4, r0
     5e0:	2800      	cmp	r0, #0
     5e2:	f47f af7f 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     5e6:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     5ea:	065c      	lsls	r4, r3, #25
     5ec:	d52c      	bpl.n	648 <CONFIG_BT_COMPANY_ID+0x57>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
     5ee:	2102      	movs	r1, #2
     5f0:	f242 002e 	movw	r0, #8238	; 0x202e
     5f4:	f007 f8a8 	bl	7748 <bt_hci_cmd_create>
		if (!buf) {
     5f8:	4604      	mov	r4, r0
     5fa:	2800      	cmp	r0, #0
     5fc:	f000 80d4 	beq.w	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
		cp = net_buf_add(buf, sizeof(*cp));
     600:	2102      	movs	r1, #2
     602:	3008      	adds	r0, #8
     604:	f020 fab0 	bl	20b68 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     608:	f06f 037b 	mvn.w	r3, #123	; 0x7b
     60c:	7003      	strb	r3, [r0, #0]
     60e:	2303      	movs	r3, #3
     610:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     612:	4621      	mov	r1, r4
     614:	2200      	movs	r2, #0
     616:	f242 002e 	movw	r0, #8238	; 0x202e
     61a:	f007 f9f1 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     61e:	4604      	mov	r4, r0
     620:	2800      	cmp	r0, #0
     622:	f47f af5f 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     626:	4601      	mov	r1, r0
     628:	aa03      	add	r2, sp, #12
     62a:	f242 002a 	movw	r0, #8234	; 0x202a
     62e:	f007 f9e7 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     632:	4604      	mov	r4, r0
     634:	2800      	cmp	r0, #0
     636:	f47f af55 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		le_read_resolving_list_size_complete(rsp);
     63a:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
     63c:	6883      	ldr	r3, [r0, #8]
     63e:	785b      	ldrb	r3, [r3, #1]
     640:	f885 30cc 	strb.w	r3, [r5, #204]	; 0xcc
		net_buf_unref(rsp);
     644:	f019 fd54 	bl	1a0f0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     648:	2108      	movs	r1, #8
     64a:	f242 0001 	movw	r0, #8193	; 0x2001
     64e:	f007 f87b 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
     652:	4604      	mov	r4, r0
     654:	2800      	cmp	r0, #0
     656:	f000 80a7 	beq.w	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     65a:	2108      	movs	r1, #8
     65c:	4408      	add	r0, r1
     65e:	f020 fa83 	bl	20b68 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     662:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     666:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     66a:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     66c:	f240 2302 	movw	r3, #514	; 0x202
     670:	bf08      	it	eq
     672:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     674:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     676:	bf4c      	ite	mi
     678:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     67c:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     680:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     682:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     686:	bf48      	it	mi
     688:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     68c:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     690:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     694:	bf18      	it	ne
     696:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     69a:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     69e:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     6a0:	bf48      	it	mi
     6a2:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     6a6:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     6a8:	bf08      	it	eq
     6aa:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     6ae:	2100      	movs	r1, #0
     6b0:	f01e fd44 	bl	1f13c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     6b4:	4621      	mov	r1, r4
     6b6:	2200      	movs	r2, #0
     6b8:	f242 0001 	movw	r0, #8193	; 0x2001
     6bc:	f007 f9a0 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     6c0:	4604      	mov	r4, r0
     6c2:	2800      	cmp	r0, #0
     6c4:	f47f af0e 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     6c8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     6cc:	0698      	lsls	r0, r3, #26
     6ce:	d41e      	bmi.n	70e <CONFIG_BT_COMPANY_ID+0x11d>
	if (bt_dev.le.mtu) {
     6d0:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
     6d4:	b9d9      	cbnz	r1, 70e <CONFIG_BT_COMPANY_ID+0x11d>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     6d6:	aa03      	add	r2, sp, #12
     6d8:	f241 0005 	movw	r0, #4101	; 0x1005
     6dc:	f007 f990 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     6e0:	4604      	mov	r4, r0
     6e2:	2800      	cmp	r0, #0
     6e4:	f47f aefe 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	if (bt_dev.le.mtu) {
     6e8:	f8b5 30b0 	ldrh.w	r3, [r5, #176]	; 0xb0
     6ec:	b963      	cbnz	r3, 708 <CONFIG_BT_COMPANY_ID+0x117>
	read_buffer_size_complete(rsp);
     6ee:	9b03      	ldr	r3, [sp, #12]
     6f0:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
     6f2:	785a      	ldrb	r2, [r3, #1]
     6f4:	7899      	ldrb	r1, [r3, #2]
     6f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     6fa:	f8a5 20b0 	strh.w	r2, [r5, #176]	; 0xb0
	k_sem_init(&bt_dev.le.pkts, pkts, pkts);
     6fe:	889a      	ldrh	r2, [r3, #4]
     700:	483a      	ldr	r0, [pc, #232]	; (7ec <CONFIG_BT_COMPANY_ID+0x1fb>)
     702:	4611      	mov	r1, r2
     704:	f020 fe15 	bl	21332 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     708:	9803      	ldr	r0, [sp, #12]
     70a:	f019 fcf1 	bl	1a0f0 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     70e:	2108      	movs	r1, #8
     710:	f640 4001 	movw	r0, #3073	; 0xc01
     714:	f007 f818 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
     718:	4604      	mov	r4, r0
     71a:	2800      	cmp	r0, #0
     71c:	d044      	beq.n	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
	ev = net_buf_add(buf, sizeof(*ev));
     71e:	2108      	movs	r1, #8
     720:	4408      	add	r0, r1
     722:	f020 fa21 	bl	20b68 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     726:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     72a:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     72c:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     72e:	d550      	bpl.n	7d2 <CONFIG_BT_COMPANY_ID+0x1e1>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     730:	a12b      	add	r1, pc, #172	; (adr r1, 7e0 <CONFIG_BT_COMPANY_ID+0x1ef>)
     732:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     736:	f01e fd01 	bl	1f13c <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     73a:	4621      	mov	r1, r4
     73c:	2200      	movs	r2, #0
     73e:	f640 4001 	movw	r0, #3073	; 0xc01
     742:	f007 f95d 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     746:	4604      	mov	r4, r0
     748:	2800      	cmp	r0, #0
     74a:	f47f aecb 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     74e:	4601      	mov	r1, r0
     750:	aa02      	add	r2, sp, #8
     752:	f64f 4001 	movw	r0, #64513	; 0xfc01
     756:	f007 f953 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     75a:	4e25      	ldr	r6, [pc, #148]	; (7f0 <CONFIG_BT_COMPANY_ID+0x1ff>)
     75c:	4b25      	ldr	r3, [pc, #148]	; (7f4 <CONFIG_BT_COMPANY_ID+0x203>)
     75e:	1af6      	subs	r6, r6, r3
     760:	08f6      	lsrs	r6, r6, #3
     762:	01b6      	lsls	r6, r6, #6
     764:	2800      	cmp	r0, #0
     766:	d051      	beq.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
		BT_WARN("Vendor HCI extensions not available");
     768:	4823      	ldr	r0, [pc, #140]	; (7f8 <CONFIG_BT_COMPANY_ID+0x207>)
     76a:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
     76e:	f01c fb7e 	bl	1ce6e <log_0>
		err = bt_conn_init();
     772:	f009 fcb5 	bl	a0e0 <bt_conn_init>
		if (err) {
     776:	4604      	mov	r4, r0
     778:	2800      	cmp	r0, #0
     77a:	f47f aeb3 	bne.w	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
     77e:	491f      	ldr	r1, [pc, #124]	; (7fc <CONFIG_BT_COMPANY_ID+0x20b>)
     780:	481f      	ldr	r0, [pc, #124]	; (800 <CONFIG_ISR_STACK_SIZE>)
     782:	f020 fe59 	bl	21438 <k_delayed_work_init>
		if (!bt_dev.id_count) {
     786:	79eb      	ldrb	r3, [r5, #7]
     788:	2b00      	cmp	r3, #0
     78a:	f040 80ac 	bne.w	8e6 <CONFIG_BT_RX_STACK_SIZE+0x4e>
			BT_INFO("No ID address. App must call settings_load()");
     78e:	481d      	ldr	r0, [pc, #116]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     790:	f046 0103 	orr.w	r1, r6, #3
     794:	f01c fb6b 	bl	1ce6e <log_0>
			return 0;
     798:	e6a4      	b.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     79a:	2102      	movs	r1, #2
     79c:	f640 406d 	movw	r0, #3181	; 0xc6d
     7a0:	f006 ffd2 	bl	7748 <bt_hci_cmd_create>
		if (!buf) {
     7a4:	4604      	mov	r4, r0
     7a6:	b910      	cbnz	r0, 7ae <CONFIG_BT_COMPANY_ID+0x1bd>
		return -ENOBUFS;
     7a8:	f06f 0436 	mvn.w	r4, #54	; 0x36
     7ac:	e69a      	b.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
     7ae:	2102      	movs	r1, #2
     7b0:	3008      	adds	r0, #8
     7b2:	f020 f9d9 	bl	20b68 <net_buf_simple_add>
		cp_le->le = 0x01;
     7b6:	2301      	movs	r3, #1
     7b8:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     7ba:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     7bc:	4621      	mov	r1, r4
     7be:	4632      	mov	r2, r6
     7c0:	f640 406d 	movw	r0, #3181	; 0xc6d
     7c4:	f007 f91c 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     7c8:	4604      	mov	r4, r0
     7ca:	2800      	cmp	r0, #0
     7cc:	f43f aecc 	beq.w	568 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x11c>
     7d0:	e688      	b.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     7d2:	480d      	ldr	r0, [pc, #52]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7d4:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     7d8:	e7ad      	b.n	736 <CONFIG_BT_COMPANY_ID+0x145>
     7da:	bf00      	nop
     7dc:	f3af 8000 	nop.w
     7e0:	02008890 	.word	0x02008890
     7e4:	20008000 	.word	0x20008000
     7e8:	200000a0 	.word	0x200000a0
     7ec:	200000b4 	.word	0x200000b4
     7f0:	00021b6c 	.word	0x00021b6c
     7f4:	00021aac 	.word	0x00021aac
     7f8:	000247b1 	.word	0x000247b1
     7fc:	00007d15 	.word	0x00007d15
     800:	20000118 	.word	0x20000118
     804:	00024885 	.word	0x00024885
     808:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
     80c:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     80e:	4839      	ldr	r0, [pc, #228]	; (8f4 <CONFIG_BT_RX_STACK_SIZE+0x5c>)
	rp.info = (void *)rsp->data;
     810:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     812:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     816:	2a03      	cmp	r2, #3
		return plat_str[platform];
     818:	bf96      	itet	ls
     81a:	4937      	ldrls	r1, [pc, #220]	; (8f8 <CONFIG_BT_RX_STACK_SIZE+0x60>)
	return "unknown";
     81c:	4937      	ldrhi	r1, [pc, #220]	; (8fc <CONFIG_BT_RX_STACK_SIZE+0x64>)
		return plat_str[platform];
     81e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     822:	f046 0303 	orr.w	r3, r6, #3
     826:	f01c fb43 	bl	1ceb0 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     82a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     82e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     832:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     834:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     838:	d12e      	bne.n	898 <CONFIG_BT_RX_STACK_SIZE>
	if (variant < ARRAY_SIZE(nordic_str)) {
     83a:	2a03      	cmp	r2, #3
     83c:	d82c      	bhi.n	898 <CONFIG_BT_RX_STACK_SIZE>
		return nordic_str[variant];
     83e:	4930      	ldr	r1, [pc, #192]	; (900 <CONFIG_BT_RX_STACK_SIZE+0x68>)
     840:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     844:	482f      	ldr	r0, [pc, #188]	; (904 <CONFIG_BT_RX_STACK_SIZE+0x6c>)
     846:	f01c fb33 	bl	1ceb0 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     84a:	7962      	ldrb	r2, [r4, #5]
     84c:	482e      	ldr	r0, [pc, #184]	; (908 <CONFIG_BT_RX_STACK_SIZE+0x70>)
	if (variant < ARRAY_SIZE(var_str)) {
     84e:	2a03      	cmp	r2, #3
		return var_str[variant];
     850:	bf96      	itet	ls
     852:	492e      	ldrls	r1, [pc, #184]	; (90c <CONFIG_BT_RX_STACK_SIZE+0x74>)
	return "unknown";
     854:	4929      	ldrhi	r1, [pc, #164]	; (8fc <CONFIG_BT_RX_STACK_SIZE+0x64>)
		return var_str[variant];
     856:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     85a:	e9cd 1203 	strd	r1, r2, [sp, #12]
     85e:	79a2      	ldrb	r2, [r4, #6]
     860:	9205      	str	r2, [sp, #20]
     862:	f8b4 2007 	ldrh.w	r2, [r4, #7]
     866:	9206      	str	r2, [sp, #24]
     868:	f8d4 2009 	ldr.w	r2, [r4, #9]
     86c:	9207      	str	r2, [sp, #28]
     86e:	f046 0303 	orr.w	r3, r6, #3
     872:	2205      	movs	r2, #5
     874:	a903      	add	r1, sp, #12
     876:	f01c fb50 	bl	1cf1a <log_n>
	net_buf_unref(rsp);
     87a:	9802      	ldr	r0, [sp, #8]
     87c:	f019 fc38 	bl	1a0f0 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     880:	aa02      	add	r2, sp, #8
     882:	2100      	movs	r1, #0
     884:	f64f 4002 	movw	r0, #64514	; 0xfc02
     888:	f007 f8ba 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
     88c:	4604      	mov	r4, r0
     88e:	b128      	cbz	r0, 89c <CONFIG_BT_RX_STACK_SIZE+0x4>
		BT_WARN("Failed to read supported vendor commands");
     890:	481f      	ldr	r0, [pc, #124]	; (910 <CONFIG_BT_RX_STACK_SIZE+0x78>)
     892:	f046 0102 	orr.w	r1, r6, #2
     896:	e76a      	b.n	76e <CONFIG_BT_COMPANY_ID+0x17d>
		return "unknown";
     898:	4918      	ldr	r1, [pc, #96]	; (8fc <CONFIG_BT_RX_STACK_SIZE+0x64>)
     89a:	e7d3      	b.n	844 <CONFIG_ISR_STACK_SIZE+0x44>
	rp.cmds = (void *)rsp->data;
     89c:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     89e:	481d      	ldr	r0, [pc, #116]	; (914 <CONFIG_BT_RX_STACK_SIZE+0x7c>)
     8a0:	6899      	ldr	r1, [r3, #8]
     8a2:	2202      	movs	r2, #2
     8a4:	3101      	adds	r1, #1
     8a6:	f01e faa4 	bl	1edf2 <memcpy>
	net_buf_unref(rsp);
     8aa:	9802      	ldr	r0, [sp, #8]
     8ac:	f019 fc20 	bl	1a0f0 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     8b0:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     8b4:	075b      	lsls	r3, r3, #29
     8b6:	f57f af5c 	bpl.w	772 <CONFIG_BT_COMPANY_ID+0x181>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     8ba:	aa02      	add	r2, sp, #8
     8bc:	4621      	mov	r1, r4
     8be:	f64f 4003 	movw	r0, #64515	; 0xfc03
     8c2:	f007 f89d 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
     8c6:	b118      	cbz	r0, 8d0 <CONFIG_BT_RX_STACK_SIZE+0x38>
			BT_WARN("Failed to read supported vendor features");
     8c8:	4813      	ldr	r0, [pc, #76]	; (918 <CONFIG_BT_RX_STACK_SIZE+0x80>)
     8ca:	f046 0102 	orr.w	r1, r6, #2
     8ce:	e74e      	b.n	76e <CONFIG_BT_COMPANY_ID+0x17d>
		rp.feat = (void *)rsp->data;
     8d0:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
     8d2:	4812      	ldr	r0, [pc, #72]	; (91c <CONFIG_BT_RX_STACK_SIZE+0x84>)
     8d4:	6899      	ldr	r1, [r3, #8]
     8d6:	2201      	movs	r2, #1
     8d8:	4411      	add	r1, r2
     8da:	f01e fa8a 	bl	1edf2 <memcpy>
		net_buf_unref(rsp);
     8de:	9802      	ldr	r0, [sp, #8]
     8e0:	f019 fc06 	bl	1a0f0 <net_buf_unref>
     8e4:	e745      	b.n	772 <CONFIG_BT_COMPANY_ID+0x181>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
     8e6:	2104      	movs	r1, #4
     8e8:	480d      	ldr	r0, [pc, #52]	; (920 <CONFIG_BT_RX_STACK_SIZE+0x88>)
     8ea:	f01e fbf7 	bl	1f0dc <atomic_or>
	bt_finalize_init();
     8ee:	f007 ff6d 	bl	87cc <bt_finalize_init>
	return 0;
     8f2:	e5f7      	b.n	4e4 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x98>
     8f4:	000247d5 	.word	0x000247d5
     8f8:	0002233c 	.word	0x0002233c
     8fc:	000241a1 	.word	0x000241a1
     900:	00022304 	.word	0x00022304
     904:	000247ee 	.word	0x000247ee
     908:	00024806 	.word	0x00024806
     90c:	00022374 	.word	0x00022374
     910:	00024833 	.word	0x00024833
     914:	20000089 	.word	0x20000089
     918:	0002485c 	.word	0x0002485c
     91c:	20000088 	.word	0x20000088
     920:	20000098 	.word	0x20000098
     924:	00000000 	.word	0x00000000

00000928 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     92c:	4cb1      	ldr	r4, [pc, #708]	; (bf4 <ll_adv_enable+0x2cc>)
     92e:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
     932:	b08f      	sub	sp, #60	; 0x3c
     934:	f006 0601 	and.w	r6, r6, #1
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     938:	2800      	cmp	r0, #0
     93a:	f000 81ca 	beq.w	cd2 <ll_adv_enable+0x3aa>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     93e:	bbce      	cbnz	r6, 9b4 <ll_adv_enable+0x8c>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     940:	f894 707c 	ldrb.w	r7, [r4, #124]	; 0x7c
		ull_filter_adv_update(lll->filter_policy);
     944:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     948:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
     94c:	f04f 0927 	mov.w	r9, #39	; 0x27
     950:	232d      	movs	r3, #45	; 0x2d
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     952:	fb09 4707 	mla	r7, r9, r7, r4
     956:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     95a:	fb19 3902 	smlabb	r9, r9, r2, r3
		lll->rl_idx = FILTER_IDX_NONE;
     95e:	23ff      	movs	r3, #255	; 0xff
     960:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
     964:	f016 f978 	bl	16c58 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     968:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
     96c:	0741      	lsls	r1, r0, #29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     96e:	f107 077d 	add.w	r7, r7, #125	; 0x7d
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     972:	eb04 0809 	add.w	r8, r4, r9
     976:	f100 8126 	bmi.w	bc6 <ll_adv_enable+0x29e>
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     97a:	f814 0009 	ldrb.w	r0, [r4, r9]
     97e:	4631      	mov	r1, r6
     980:	f3c0 1080 	ubfx	r0, r0, #6, #1
     984:	f00f fc64 	bl	10250 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     988:	2206      	movs	r2, #6
     98a:	4601      	mov	r1, r0
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
     98c:	4605      	mov	r5, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
     98e:	f108 0002 	add.w	r0, r8, #2
     992:	f01e fa2e 	bl	1edf2 <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
     996:	4629      	mov	r1, r5
     998:	2206      	movs	r2, #6
     99a:	1cb8      	adds	r0, r7, #2
     99c:	f01e fa29 	bl	1edf2 <memcpy>
		if (pdu_adv->tx_addr &&
     9a0:	f814 3009 	ldrb.w	r3, [r4, r9]
     9a4:	065a      	lsls	r2, r3, #25
     9a6:	d40a      	bmi.n	9be <ll_adv_enable+0x96>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     9a8:	f013 0f0e 	tst.w	r3, #14
     9ac:	f040 80e3 	bne.w	b76 <ll_adv_enable+0x24e>
		if (lll->conn) {
     9b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     9b2:	b193      	cbz	r3, 9da <ll_adv_enable+0xb2>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_mark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
     9b4:	260c      	movs	r6, #12
}
     9b6:	4630      	mov	r0, r6
     9b8:	b00f      	add	sp, #60	; 0x3c
     9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
     9be:	2106      	movs	r1, #6
     9c0:	f108 0002 	add.w	r0, r8, #2
     9c4:	f00e f8c6 	bl	eb54 <mem_nz>
		if (pdu_adv->tx_addr &&
     9c8:	2800      	cmp	r0, #0
     9ca:	f000 822f 	beq.w	e2c <ll_adv_enable+0x504>
     9ce:	f814 3009 	ldrb.w	r3, [r4, r9]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     9d2:	f013 0f0e 	tst.w	r3, #14
     9d6:	d0eb      	beq.n	9b0 <ll_adv_enable+0x88>
     9d8:	e0cd      	b.n	b76 <ll_adv_enable+0x24e>
		link = ll_rx_link_alloc();
     9da:	f011 ff17 	bl	1280c <ll_rx_link_alloc>
		if (!link) {
     9de:	4682      	mov	sl, r0
     9e0:	2800      	cmp	r0, #0
     9e2:	f000 824a 	beq.w	e7a <ll_adv_enable+0x552>
		node_rx = ll_rx_alloc();
     9e6:	f011 ff1d 	bl	12824 <ll_rx_alloc>
		if (!node_rx) {
     9ea:	4683      	mov	fp, r0
     9ec:	2800      	cmp	r0, #0
     9ee:	f000 825d 	beq.w	eac <ll_adv_enable+0x584>
		conn = ll_conn_acquire();
     9f2:	f013 f8ff 	bl	13bf4 <ll_conn_acquire>
		if (!conn) {
     9f6:	4605      	mov	r5, r0
     9f8:	2800      	cmp	r0, #0
     9fa:	f000 8254 	beq.w	ea6 <ll_adv_enable+0x57e>
		conn_lll->handle = 0xFFFF;
     9fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
     a02:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
     a04:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
     a06:	f105 031c 	add.w	r3, r5, #28
     a0a:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
     a0c:	2800      	cmp	r0, #0
     a0e:	f000 8230 	beq.w	e72 <ll_adv_enable+0x54a>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     a12:	f105 026c 	add.w	r2, r5, #108	; 0x6c
     a16:	f105 0168 	add.w	r1, r5, #104	; 0x68
     a1a:	f00e f8a7 	bl	eb6c <memq_init>
		conn_lll->phy_tx = BIT(0);
     a1e:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
     a22:	4975      	ldr	r1, [pc, #468]	; (bf8 <ll_adv_enable+0x2d0>)
		conn_lll->data_chan_sel = 0;
     a24:	f895 e03d 	ldrb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     a28:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
		conn_lll->slave.latency_enabled = 0;
     a2c:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
     a30:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
     a34:	400a      	ands	r2, r1
     a36:	f442 7288 	orr.w	r2, r2, #272	; 0x110
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a3a:	f895 1126 	ldrb.w	r1, [r5, #294]	; 0x126
		conn_lll->phy_tx = BIT(0);
     a3e:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
     a42:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
     a46:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
		conn->common.fex_valid = 0;
     a4a:	f020 0003 	bic.w	r0, r0, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a4e:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->phy_tx = BIT(0);
     a52:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_use = 0;
     a56:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
     a58:	f362 0c00 	bfi	ip, r2, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     a5c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
     a60:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
     a64:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a68:	f885 1126 	strb.w	r1, [r5, #294]	; 0x126
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     a6c:	4863      	ldr	r0, [pc, #396]	; (bfc <ll_adv_enable+0x2d4>)
		conn->llcp_feature.features_conn = LL_FEAT;
     a6e:	4964      	ldr	r1, [pc, #400]	; (c00 <ll_adv_enable+0x2d8>)
		conn_lll->data_chan_use = 0;
     a70:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
		conn->connect_expire = 6;
     a74:	f04f 0e06 	mov.w	lr, #6
		conn_lll->slave.window_widening_event_us = 0;
     a78:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
		conn_lll->latency_prepare = 0;
     a7c:	866a      	strh	r2, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
     a7e:	636a      	str	r2, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
     a80:	656a      	str	r2, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
     a82:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
     a86:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     a8a:	f8a5 20e8 	strh.w	r2, [r5, #232]	; 0xe8
     a8e:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
     a92:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     a96:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     a9a:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
     a9e:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     aa2:	f8a5 2124 	strh.w	r2, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
     aa6:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
		conn_lll->link_tx_free = NULL;
     aaa:	67aa      	str	r2, [r5, #120]	; 0x78
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     aac:	65eb      	str	r3, [r5, #92]	; 0x5c
		conn_lll->slave.latency_enabled = 0;
     aae:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
     ab2:	6628      	str	r0, [r5, #96]	; 0x60
		conn->connect_expire = 6;
     ab4:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
     ab8:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
		conn_lll->packet_tx_head_len = 0;
     abc:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		conn->llcp_conn_param.disabled = 0;
     ac0:	f895 e172 	ldrb.w	lr, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
     ac4:	f895 c19a 	ldrb.w	ip, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
     ac8:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     acc:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     ad0:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
		conn->llcp_length.disabled = 0U;
     ad4:	f362 0cc3 	bfi	ip, r2, #3, #1
		conn->llcp_conn_param.disabled = 0;
     ad8:	f362 1e04 	bfi	lr, r2, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     adc:	f021 0107 	bic.w	r1, r1, #7
		conn_lll->sn = 0;
     ae0:	f020 001f 	bic.w	r0, r0, #31
		conn->llcp_conn_param.req = 0;
     ae4:	f8a5 2170 	strh.w	r2, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     ae8:	f8a5 2198 	strh.w	r2, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
     aec:	f8a5 21a4 	strh.w	r2, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
     af0:	f885 c19a 	strb.w	ip, [r5, #410]	; 0x19a
		conn->llcp_conn_param.disabled = 0;
     af4:	f885 e172 	strb.w	lr, [r5, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     af8:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		conn_lll->sn = 0;
     afc:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     b00:	f013 fbaa 	bl	14258 <ull_conn_default_tx_octets_get>
     b04:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b08:	f013 fbac 	bl	14264 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b0c:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
     b10:	493c      	ldr	r1, [pc, #240]	; (c04 <ll_adv_enable+0x2dc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b12:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b16:	4019      	ands	r1, r3
     b18:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     b1c:	f013 fba8 	bl	14270 <ull_conn_default_phy_tx_get>
     b20:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
     b24:	f360 0102 	bfi	r1, r0, #0, #3
     b28:	f885 11ac 	strb.w	r1, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b2c:	f013 fba6 	bl	1427c <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
     b30:	e9c4 ab33 	strd	sl, fp, [r4, #204]	; 0xcc
		lll->conn = conn_lll;
     b34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b36:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
     b38:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
     b3c:	f895 c020 	ldrb.w	ip, [r5, #32]
	hdr->parent = parent;
     b40:	61ed      	str	r5, [r5, #28]
     b42:	0103      	lsls	r3, r0, #4
		conn->tx_data = conn->tx_data_last = 0;
     b44:	2200      	movs	r2, #0
		conn->phy_pref_flags = 0;
     b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
     b4a:	f021 0178 	bic.w	r1, r1, #120	; 0x78
     b4e:	430b      	orrs	r3, r1
	hdr->is_stop = 0U;
     b50:	f362 0c00 	bfi	ip, r2, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     b54:	e9c5 226e 	strd	r2, r2, [r5, #440]	; 0x1b8
     b58:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
     b5c:	e9c5 2205 	strd	r2, r2, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
     b60:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
     b64:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
     b68:	f885 c020 	strb.w	ip, [r5, #32]
		err = lll_clock_wait();
     b6c:	f017 fa3e 	bl	17fec <lll_clock_wait>
		if (err) {
     b70:	2800      	cmp	r0, #0
     b72:	f040 8167 	bne.w	e44 <ll_adv_enable+0x51c>
	uint8_t ch_map = lll->chan_map;
     b76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     b7a:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     b7c:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     b80:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
     b82:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     b86:	f00e f969 	bl	ee5c <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     b8a:	2800      	cmp	r0, #0
     b8c:	f000 8096 	beq.w	cbc <ll_adv_enable+0x394>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
     b90:	f814 3009 	ldrb.w	r3, [r4, r9]
     b94:	f003 030f 	and.w	r3, r3, #15
     b98:	2b02      	cmp	r3, #2
     b9a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     b9e:	d033      	beq.n	c08 <ll_adv_enable+0x2e0>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
     ba0:	2b01      	cmp	r3, #1
     ba2:	f000 8153 	beq.w	e4c <ll_adv_enable+0x524>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
     ba6:	7878      	ldrb	r0, [r7, #1]
     ba8:	3010      	adds	r0, #16
		const uint16_t scan_rsp_us =
     baa:	00c1      	lsls	r1, r0, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
     bac:	2b00      	cmp	r3, #0
     bae:	f000 813f 	beq.w	e30 <ll_adv_enable+0x508>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
     bb2:	2b06      	cmp	r3, #6
     bb4:	f000 817f 	beq.w	eb6 <ll_adv_enable+0x58e>
     bb8:	f44f 70da 	mov.w	r0, #436	; 0x1b4
     bbc:	f44f 711b 	mov.w	r1, #620	; 0x26c
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
     bc0:	fb00 1002 	mla	r0, r0, r2, r1
     bc4:	e02b      	b.n	c1e <ll_adv_enable+0x2f6>
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     bc6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     bca:	4632      	mov	r2, r6
     bcc:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
     bd0:	f016 fa1a 	bl	17008 <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
     bd4:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
     bd6:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
     bda:	d002      	beq.n	be2 <ll_adv_enable+0x2ba>
				ull_filter_rpa_update(false);
     bdc:	4630      	mov	r0, r6
     bde:	f016 f8db 	bl	16d98 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, pdu_adv);
     be2:	4641      	mov	r1, r8
     be4:	4803      	ldr	r0, [pc, #12]	; (bf4 <ll_adv_enable+0x2cc>)
     be6:	f016 f851 	bl	16c8c <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
     bea:	4802      	ldr	r0, [pc, #8]	; (bf4 <ll_adv_enable+0x2cc>)
     bec:	4639      	mov	r1, r7
     bee:	f016 f84d 	bl	16c8c <ull_filter_adv_pdu_update>
		if (!priv) {
     bf2:	e6d5      	b.n	9a0 <ll_adv_enable+0x78>
     bf4:	20001f8c 	.word	0x20001f8c
     bf8:	fffff880 	.word	0xfffff880
     bfc:	01480148 	.word	0x01480148
     c00:	0001417f 	.word	0x0001417f
     c04:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
     c08:	f898 3001 	ldrb.w	r3, [r8, #1]
     c0c:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     c0e:	00db      	lsls	r3, r3, #3
     c10:	fb00 f003 	mul.w	r0, r0, r3
     c14:	f500 70aa 	add.w	r0, r0, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
     c18:	2364      	movs	r3, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
     c1a:	fb03 0002 	mla	r0, r3, r2, r0
     c1e:	f894 7020 	ldrb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     c22:	4ab1      	ldr	r2, [pc, #708]	; (ee8 <ll_adv_enable+0x5c0>)
	hdr->parent = parent;
     c24:	61e4      	str	r4, [r4, #28]
     c26:	2500      	movs	r5, #0
	adv->evt.ticks_xtal_to_start =
     c28:	2331      	movs	r3, #49	; 0x31
	hdr->is_stop = 0U;
     c2a:	f365 0700 	bfi	r7, r5, #0, #1
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     c2e:	fba0 0102 	umull	r0, r1, r0, r2
	adv->evt.ticks_xtal_to_start =
     c32:	6023      	str	r3, [r4, #0]
     c34:	f884 7020 	strb.w	r7, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     c38:	a3a9      	add	r3, pc, #676	; (adr r3, ee0 <ll_adv_enable+0x5b8>)
     c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
     c3e:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
     c42:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     c46:	f7ff fa4b 	bl	e0 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
     c4a:	f8b4 80d4 	ldrh.w	r8, [r4, #212]	; 0xd4
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
     c4e:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
     c50:	f00f faf8 	bl	10244 <ticker_ticks_now_get>
     c54:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     c56:	f1b8 0f00 	cmp.w	r8, #0
     c5a:	d108      	bne.n	c6e <ll_adv_enable+0x346>
     c5c:	f814 5009 	ldrb.w	r5, [r4, r9]
     c60:	f005 050f 	and.w	r5, r5, #15
     c64:	f1a5 0501 	sub.w	r5, r5, #1
     c68:	fab5 f585 	clz	r5, r5
     c6c:	096d      	lsrs	r5, r5, #5
     c6e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
     c72:	68e3      	ldr	r3, [r4, #12]
     c74:	f365 0200 	bfi	r2, r5, #0, #1
	if (lll->is_hdcd) {
     c78:	f012 0501 	ands.w	r5, r2, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     c7c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
     c80:	f000 8085 	beq.w	d8e <ll_adv_enable+0x466>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     c84:	f8df 9274 	ldr.w	r9, [pc, #628]	; efc <ll_adv_enable+0x5d4>
     c88:	4998      	ldr	r1, [pc, #608]	; (eec <ll_adv_enable+0x5c4>)
     c8a:	9304      	str	r3, [sp, #16]
     c8c:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     c8e:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     c90:	f10d 0830 	add.w	r8, sp, #48	; 0x30
     c94:	9301      	str	r3, [sp, #4]
     c96:	9105      	str	r1, [sp, #20]
     c98:	e9cd 9807 	strd	r9, r8, [sp, #28]
     c9c:	2103      	movs	r1, #3
     c9e:	e9cd 0002 	strd	r0, r0, [sp, #8]
     ca2:	9406      	str	r4, [sp, #24]
     ca4:	462a      	mov	r2, r5
     ca6:	9000      	str	r0, [sp, #0]
     ca8:	463b      	mov	r3, r7
		ret_cb = TICKER_STATUS_BUSY;
     caa:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     cac:	f00f fa18 	bl	100e0 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     cb0:	4641      	mov	r1, r8
     cb2:	f011 fe65 	bl	12980 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     cb6:	2800      	cmp	r0, #0
     cb8:	f000 80a5 	beq.w	e06 <ll_adv_enable+0x4de>
	if (adv->lll.conn) {
     cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
     cbe:	2b00      	cmp	r3, #0
     cc0:	f43f ae78 	beq.w	9b4 <ll_adv_enable+0x8c>
		conn_release(adv);
     cc4:	f012 f96e 	bl	12fa4 <conn_release.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
     cc8:	260c      	movs	r6, #12
}
     cca:	4630      	mov	r0, r6
     ccc:	b00f      	add	sp, #60	; 0x3c
     cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!adv || !adv->is_enabled) {
     cd2:	2e00      	cmp	r6, #0
     cd4:	f43f ae6e 	beq.w	9b4 <ll_adv_enable+0x8c>
	mark = ull_disable_mark(adv);
     cd8:	4620      	mov	r0, r4
     cda:	f011 fe5f 	bl	1299c <ull_disable_mark>
	LL_ASSERT(mark == adv);
     cde:	4284      	cmp	r4, r0
     ce0:	d00c      	beq.n	cfc <ll_adv_enable+0x3d4>
     ce2:	4a83      	ldr	r2, [pc, #524]	; (ef0 <ll_adv_enable+0x5c8>)
     ce4:	4983      	ldr	r1, [pc, #524]	; (ef4 <ll_adv_enable+0x5cc>)
     ce6:	4884      	ldr	r0, [pc, #528]	; (ef8 <ll_adv_enable+0x5d0>)
     ce8:	f240 63cc 	movw	r3, #1740	; 0x6cc
     cec:	f01b fd69 	bl	1c7c2 <printk>
     cf0:	4040      	eors	r0, r0
     cf2:	f380 8811 	msr	BASEPRI, r0
     cf6:	f04f 0003 	mov.w	r0, #3
     cfa:	df02      	svc	2
	if (adv->lll.is_hdcd) {
     cfc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
     d00:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     d02:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
     d04:	d50e      	bpl.n	d24 <ll_adv_enable+0x3fc>
		ret_cb = TICKER_STATUS_BUSY;
     d06:	2202      	movs	r2, #2
     d08:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
     d0a:	2103      	movs	r1, #3
     d0c:	4b7b      	ldr	r3, [pc, #492]	; (efc <ll_adv_enable+0x5d4>)
     d0e:	9500      	str	r5, [sp, #0]
     d10:	2201      	movs	r2, #1
     d12:	2000      	movs	r0, #0
     d14:	f00f fa50 	bl	101b8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
     d18:	4629      	mov	r1, r5
     d1a:	f011 fe31 	bl	12980 <ull_ticker_status_take>
		if (ret) {
     d1e:	2800      	cmp	r0, #0
     d20:	f040 80d3 	bne.w	eca <ll_adv_enable+0x5a2>
	ret_cb = TICKER_STATUS_BUSY;
     d24:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     d26:	2103      	movs	r1, #3
     d28:	4b74      	ldr	r3, [pc, #464]	; (efc <ll_adv_enable+0x5d4>)
     d2a:	9500      	str	r5, [sp, #0]
     d2c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
     d2e:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
     d30:	f00f fa42 	bl	101b8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
     d34:	4629      	mov	r1, r5
     d36:	f011 fe23 	bl	12980 <ull_ticker_status_take>
	if (ret) {
     d3a:	2800      	cmp	r0, #0
     d3c:	f040 809f 	bne.w	e7e <ll_adv_enable+0x556>
	}

	ret = ull_disable(&adv->lll);
     d40:	486f      	ldr	r0, [pc, #444]	; (f00 <ll_adv_enable+0x5d8>)
     d42:	f011 fe67 	bl	12a14 <ull_disable>
	LL_ASSERT(!ret);
     d46:	2800      	cmp	r0, #0
     d48:	f040 8085 	bne.w	e56 <ll_adv_enable+0x52e>

	mark = ull_disable_unmark(adv);
     d4c:	486d      	ldr	r0, [pc, #436]	; (f04 <ll_adv_enable+0x5dc>)
     d4e:	f011 fe31 	bl	129b4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
     d52:	4284      	cmp	r4, r0
     d54:	d00c      	beq.n	d70 <ll_adv_enable+0x448>
     d56:	4a66      	ldr	r2, [pc, #408]	; (ef0 <ll_adv_enable+0x5c8>)
     d58:	4966      	ldr	r1, [pc, #408]	; (ef4 <ll_adv_enable+0x5cc>)
     d5a:	4867      	ldr	r0, [pc, #412]	; (ef8 <ll_adv_enable+0x5d0>)
     d5c:	f240 63ee 	movw	r3, #1774	; 0x6ee
     d60:	f01b fd2f 	bl	1c7c2 <printk>
     d64:	4040      	eors	r0, r0
     d66:	f380 8811 	msr	BASEPRI, r0
     d6a:	f04f 0003 	mov.w	r0, #3
     d6e:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d72:	b10b      	cbz	r3, d78 <ll_adv_enable+0x450>
		conn_release(adv);
     d74:	f012 f916 	bl	12fa4 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
     d78:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
     d7c:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
     d7e:	f36f 0300 	bfc	r3, #0, #1
}
     d82:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
     d84:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
}
     d88:	b00f      	add	sp, #60	; 0x3c
     d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     d8e:	485e      	ldr	r0, [pc, #376]	; (f08 <ll_adv_enable+0x5e0>)
		ll_adv_ticker_ext[handle].ticks_slot_window =
     d90:	4a5e      	ldr	r2, [pc, #376]	; (f0c <ll_adv_enable+0x5e4>)
		ret = ticker_start_ext(
     d92:	f8df e168 	ldr.w	lr, [pc, #360]	; efc <ll_adv_enable+0x5d4>
     d96:	f8df c154 	ldr.w	ip, [pc, #340]	; eec <ll_adv_enable+0x5c4>
     d9a:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     d9c:	fba8 0100 	umull	r0, r1, r8, r0
     da0:	f04f 0991 	mov.w	r9, #145	; 0x91
     da4:	fb09 1108 	mla	r1, r9, r8, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     da8:	f203 1847 	addw	r8, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     dac:	f8c2 8000 	str.w	r8, [r2]
		ret_cb = TICKER_STATUS_BUSY;
     db0:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     db4:	9304      	str	r3, [sp, #16]
     db6:	9209      	str	r2, [sp, #36]	; 0x24
     db8:	f10d 0830 	add.w	r8, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     dbc:	a348      	add	r3, pc, #288	; (adr r3, ee0 <ll_adv_enable+0x5b8>)
     dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
     dc2:	f64f 7aff 	movw	sl, #65535	; 0xffff
     dc6:	e9cd e807 	strd	lr, r8, [sp, #28]
     dca:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
     dcc:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
     dd0:	f8cd c014 	str.w	ip, [sp, #20]
     dd4:	f8cd a00c 	str.w	sl, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     dd8:	f7ff f982 	bl	e0 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     ddc:	464a      	mov	r2, r9
     dde:	e9cd 5000 	strd	r5, r0, [sp]
     de2:	463b      	mov	r3, r7
     de4:	4628      	mov	r0, r5
     de6:	2103      	movs	r1, #3
     de8:	f00f f924 	bl	10034 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     dec:	4641      	mov	r1, r8
     dee:	f011 fdc7 	bl	12980 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     df2:	2800      	cmp	r0, #0
     df4:	f47f af62 	bne.w	cbc <ll_adv_enable+0x394>
	adv->is_enabled = 1;
     df8:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
     dfc:	f043 0301 	orr.w	r3, r3, #1
     e00:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	return 0;
     e04:	e5d7      	b.n	9b6 <ll_adv_enable+0x8e>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e06:	4942      	ldr	r1, [pc, #264]	; (f10 <ll_adv_enable+0x5e8>)
     e08:	9105      	str	r1, [sp, #20]
     e0a:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     e0e:	9200      	str	r2, [sp, #0]
     e10:	e9cd 9807 	strd	r9, r8, [sp, #28]
     e14:	e9cd 0003 	strd	r0, r0, [sp, #12]
     e18:	e9cd 0001 	strd	r0, r0, [sp, #4]
     e1c:	9406      	str	r4, [sp, #24]
     e1e:	463b      	mov	r3, r7
     e20:	2201      	movs	r2, #1
     e22:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     e24:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     e26:	f00f f95b 	bl	100e0 <ticker_start>
     e2a:	e7df      	b.n	dec <ll_adv_enable+0x4c4>
			return BT_HCI_ERR_INVALID_PARAM;
     e2c:	2612      	movs	r6, #18
     e2e:	e5c2      	b.n	9b6 <ll_adv_enable+0x8e>
				adv_size += pdu_adv->len;
     e30:	f898 0001 	ldrb.w	r0, [r8, #1]
     e34:	3010      	adds	r0, #16
     e36:	00c0      	lsls	r0, r0, #3
     e38:	f500 734d 	add.w	r3, r0, #820	; 0x334
     e3c:	4419      	add	r1, r3
     e3e:	f500 709a 	add.w	r0, r0, #308	; 0x134
     e42:	e6bd      	b.n	bc0 <ll_adv_enable+0x298>
			conn_release(adv);
     e44:	f012 f8ae 	bl	12fa4 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     e48:	2603      	movs	r6, #3
     e4a:	e5b4      	b.n	9b6 <ll_adv_enable+0x8e>
     e4c:	f44f 70f2 	mov.w	r0, #484	; 0x1e4
     e50:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
     e54:	e6b4      	b.n	bc0 <ll_adv_enable+0x298>
	LL_ASSERT(!ret);
     e56:	4a26      	ldr	r2, [pc, #152]	; (ef0 <ll_adv_enable+0x5c8>)
     e58:	492e      	ldr	r1, [pc, #184]	; (f14 <ll_adv_enable+0x5ec>)
     e5a:	4827      	ldr	r0, [pc, #156]	; (ef8 <ll_adv_enable+0x5d0>)
     e5c:	f240 63eb 	movw	r3, #1771	; 0x6eb
     e60:	f01b fcaf 	bl	1c7c2 <printk>
     e64:	4040      	eors	r0, r0
     e66:	f380 8811 	msr	BASEPRI, r0
     e6a:	f04f 0003 	mov.w	r0, #3
     e6e:	df02      	svc	2
     e70:	e76c      	b.n	d4c <ll_adv_enable+0x424>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     e72:	f105 0070 	add.w	r0, r5, #112	; 0x70
     e76:	67a8      	str	r0, [r5, #120]	; 0x78
     e78:	e5cb      	b.n	a12 <ll_adv_enable+0xea>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     e7a:	2607      	movs	r6, #7
     e7c:	e59b      	b.n	9b6 <ll_adv_enable+0x8e>
		mark = ull_disable_mark(adv);
     e7e:	4821      	ldr	r0, [pc, #132]	; (f04 <ll_adv_enable+0x5dc>)
     e80:	f011 fd8c 	bl	1299c <ull_disable_mark>
		LL_ASSERT(mark == adv);
     e84:	4284      	cmp	r4, r0
     e86:	f43f ad95 	beq.w	9b4 <ll_adv_enable+0x8c>
     e8a:	f240 63e5 	movw	r3, #1765	; 0x6e5
     e8e:	4a18      	ldr	r2, [pc, #96]	; (ef0 <ll_adv_enable+0x5c8>)
     e90:	4918      	ldr	r1, [pc, #96]	; (ef4 <ll_adv_enable+0x5cc>)
     e92:	4819      	ldr	r0, [pc, #100]	; (ef8 <ll_adv_enable+0x5d0>)
     e94:	f01b fc95 	bl	1c7c2 <printk>
     e98:	4040      	eors	r0, r0
     e9a:	f380 8811 	msr	BASEPRI, r0
     e9e:	f04f 0003 	mov.w	r0, #3
     ea2:	df02      	svc	2
     ea4:	e586      	b.n	9b4 <ll_adv_enable+0x8c>
			ll_rx_release(node_rx);
     ea6:	4658      	mov	r0, fp
     ea8:	f011 fcc2 	bl	12830 <ll_rx_release>
			ll_rx_link_release(link);
     eac:	4650      	mov	r0, sl
     eae:	f011 fcb3 	bl	12818 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     eb2:	2607      	movs	r6, #7
     eb4:	e57f      	b.n	9b6 <ll_adv_enable+0x8e>
				adv_size += pdu_adv->len;
     eb6:	f898 3001 	ldrb.w	r3, [r8, #1]
     eba:	3310      	adds	r3, #16
     ebc:	00db      	lsls	r3, r3, #3
     ebe:	f503 704d 	add.w	r0, r3, #820	; 0x334
     ec2:	4401      	add	r1, r0
     ec4:	f503 709a 	add.w	r0, r3, #308	; 0x134
     ec8:	e67a      	b.n	bc0 <ll_adv_enable+0x298>
			mark = ull_disable_mark(adv);
     eca:	480e      	ldr	r0, [pc, #56]	; (f04 <ll_adv_enable+0x5dc>)
     ecc:	f011 fd66 	bl	1299c <ull_disable_mark>
			LL_ASSERT(mark == adv);
     ed0:	4284      	cmp	r4, r0
     ed2:	f43f ad6f 	beq.w	9b4 <ll_adv_enable+0x8c>
     ed6:	f240 63d7 	movw	r3, #1751	; 0x6d7
     eda:	e7d8      	b.n	e8e <ll_adv_enable+0x566>
     edc:	f3af 8000 	nop.w
     ee0:	1afd498d 	.word	0x1afd498d
     ee4:	00000007 	.word	0x00000007
     ee8:	3b9aca00 	.word	0x3b9aca00
     eec:	00012d19 	.word	0x00012d19
     ef0:	000229fc 	.word	0x000229fc
     ef4:	00022aec 	.word	0x00022aec
     ef8:	00022678 	.word	0x00022678
     efc:	00012975 	.word	0x00012975
     f00:	20001fa8 	.word	0x20001fa8
     f04:	20001f8c 	.word	0x20001f8c
     f08:	84e72a00 	.word	0x84e72a00
     f0c:	2000206c 	.word	0x2000206c
     f10:	00012f21 	.word	0x00012f21
     f14:	00022900 	.word	0x00022900

00000f18 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
     f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f1c:	4604      	mov	r4, r0
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     f1e:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
     f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
     f24:	4298      	cmp	r0, r3
{
     f26:	b08b      	sub	sp, #44	; 0x2c
     f28:	460e      	mov	r6, r1
     f2a:	4615      	mov	r5, r2
	LL_ASSERT(conn->lll.handle != 0xFFFF);
     f2c:	f000 8089 	beq.w	1042 <ull_conn_llcp+0x12a>

	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
     f30:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
     f34:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
     f38:	4282      	cmp	r2, r0
     f3a:	d00e      	beq.n	f5a <ull_conn_llcp+0x42>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
     f3c:	1a80      	subs	r0, r0, r2
     f3e:	f000 0003 	and.w	r0, r0, #3
     f42:	2802      	cmp	r0, #2
     f44:	d01b      	beq.n	f7e <ull_conn_llcp+0x66>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
     f46:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
     f4a:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
     f4e:	429a      	cmp	r2, r3
     f50:	d130      	bne.n	fb4 <ull_conn_llcp+0x9c>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
     f52:	2000      	movs	r0, #0
}
     f54:	b00b      	add	sp, #44	; 0x2c
     f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
     f5a:	f894 c152 	ldrb.w	ip, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
     f5e:	f01c 0801 	ands.w	r8, ip, #1
     f62:	d1f0      	bne.n	f46 <ull_conn_llcp+0x2e>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
     f64:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
     f68:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
     f6c:	428b      	cmp	r3, r1
     f6e:	f000 8390 	beq.w	1692 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30a>
			conn->llcp_ack -= 2U;
     f72:	1e90      	subs	r0, r2, #2
			conn->llcp_type = LLCP_CONN_UPD;
     f74:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
     f76:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
     f7a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
     f7e:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
     f82:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
     f86:	429a      	cmp	r2, r3
     f88:	d006      	beq.n	f98 <ull_conn_llcp+0x80>
			if ((conn->llcp_length.state ==
     f8a:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
     f8e:	f002 0106 	and.w	r1, r2, #6
     f92:	2904      	cmp	r1, #4
     f94:	f000 83c1 	beq.w	171a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x392>
		switch (conn->llcp_type) {
     f98:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
     f9c:	1e7b      	subs	r3, r7, #1
     f9e:	2b05      	cmp	r3, #5
     fa0:	f200 8369 	bhi.w	1676 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ee>
     fa4:	e8df f013 	tbh	[pc, r3, lsl #1]
     fa8:	03000070 	.word	0x03000070
     fac:	0367027c 	.word	0x0367027c
     fb0:	01de032a 	.word	0x01de032a
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
     fb4:	4830      	ldr	r0, [pc, #192]	; (1078 <ull_conn_llcp+0x160>)
     fb6:	f00d fd83 	bl	eac0 <mem_acquire>
		if (tx) {
     fba:	b358      	cbz	r0, 1014 <ull_conn_llcp+0xfc>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
     fbc:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
     fc0:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     fc4:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     fc6:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     fc8:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
     fcc:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
     fce:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
     fd0:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
     fd2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
     fd6:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
     fda:	7202      	strb	r2, [r0, #8]
	if (
     fdc:	b32b      	cbz	r3, 102a <ull_conn_llcp+0x112>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
     fde:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
     fe2:	0791      	lsls	r1, r2, #30
     fe4:	d421      	bmi.n	102a <ull_conn_llcp+0x112>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
     fe6:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
     fea:	07d2      	lsls	r2, r2, #31
     fec:	d41d      	bmi.n	102a <ull_conn_llcp+0x112>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
     fee:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
     ff2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
     ff4:	bf04      	itt	eq
     ff6:	681a      	ldreq	r2, [r3, #0]
     ff8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
     ffc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1000:	b9b2      	cbnz	r2, 1030 <ull_conn_llcp+0x118>
			tx->next = conn->tx_head->next;
    1002:	681a      	ldr	r2, [r3, #0]
    1004:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    1006:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    1008:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    100a:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    100e:	b90b      	cbnz	r3, 1014 <ull_conn_llcp+0xfc>
		conn->tx_data_last = tx;
    1010:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    1014:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    1018:	2800      	cmp	r0, #0
    101a:	d19a      	bne.n	f52 <ull_conn_llcp+0x3a>
			conn->procedure_expire = conn->supervision_reload;
    101c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    1020:	2b01      	cmp	r3, #1
    1022:	d91c      	bls.n	105e <ull_conn_llcp+0x146>
			conn->procedure_expire = conn->supervision_reload;
    1024:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1028:	e793      	b.n	f52 <ull_conn_llcp+0x3a>
		if (!conn->tx_ctrl) {
    102a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    102e:	b1e2      	cbz	r2, 106a <ull_conn_llcp+0x152>
	tx->next = conn->tx_ctrl_last->next;
    1030:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1034:	681a      	ldr	r2, [r3, #0]
    1036:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1038:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    103a:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    103e:	6803      	ldr	r3, [r0, #0]
}
    1040:	e7e5      	b.n	100e <ull_conn_llcp+0xf6>
	LL_ASSERT(conn->lll.handle != 0xFFFF);
    1042:	4a0e      	ldr	r2, [pc, #56]	; (107c <ull_conn_llcp+0x164>)
    1044:	490e      	ldr	r1, [pc, #56]	; (1080 <ull_conn_llcp+0x168>)
    1046:	480f      	ldr	r0, [pc, #60]	; (1084 <ull_conn_llcp+0x16c>)
    1048:	f240 23f3 	movw	r3, #755	; 0x2f3
    104c:	f01b fbb9 	bl	1c7c2 <printk>
    1050:	4040      	eors	r0, r0
    1052:	f380 8811 	msr	BASEPRI, r0
    1056:	f04f 0003 	mov.w	r0, #3
    105a:	df02      	svc	2
    105c:	e768      	b.n	f30 <ull_conn_llcp+0x18>
				conn->procedure_expire++;
    105e:	3301      	adds	r3, #1
    1060:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    1064:	b00b      	add	sp, #44	; 0x2c
    1066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    106a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    106c:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1070:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1074:	e7cb      	b.n	100e <ull_conn_llcp+0xf6>
    1076:	bf00      	nop
    1078:	200022d0 	.word	0x200022d0
    107c:	00022b08 	.word	0x00022b08
    1080:	00022c70 	.word	0x00022c70
    1084:	00022678 	.word	0x00022678
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1088:	4fa9      	ldr	r7, [pc, #676]	; (1330 <ull_conn_llcp+0x418>)

	/* set mutex */
	if (!conn_upd) {
    108a:	683b      	ldr	r3, [r7, #0]
    108c:	2b00      	cmp	r3, #0
    108e:	f000 84f3 	beq.w	1a78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6f0>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1092:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
    1096:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1098:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    109c:	4490      	add	r8, r2
    109e:	44a8      	add	r8, r5
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    10a0:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    10a4:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    10a8:	f040 8390 	bne.w	17cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x444>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    10ac:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    10b0:	eba8 0209 	sub.w	r2, r8, r9
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    10b4:	0410      	lsls	r0, r2, #16
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    10b6:	fa1f fb82 	uxth.w	fp, r2
	} else if (instant_latency <= 0x7FFF) {
    10ba:	f53f af44 	bmi.w	f46 <ull_conn_llcp+0x2e>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10be:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    10c2:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    10c6:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    10ca:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10ce:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    10d0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    10d4:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10d8:	d009      	beq.n	10ee <ull_conn_llcp+0x1d6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    10da:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    10de:	f002 0207 	and.w	r2, r2, #7
    10e2:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    10e4:	bf04      	itt	eq
    10e6:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    10ea:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    10ee:	683b      	ldr	r3, [r7, #0]
    10f0:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    10f2:	bf04      	itt	eq
    10f4:	2300      	moveq	r3, #0
    10f6:	603b      	streq	r3, [r7, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    10f8:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    10fc:	2f00      	cmp	r7, #0
    10fe:	f000 8577 	beq.w	1bf0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x868>
    1102:	6838      	ldr	r0, [r7, #0]
    1104:	2800      	cmp	r0, #0
    1106:	f000 8573 	beq.w	1bf0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x868>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    110a:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    110e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    1110:	6841      	ldr	r1, [r0, #4]
    1112:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    1116:	4293      	cmp	r3, r2
    1118:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
    111c:	f8b4 c10c 	ldrh.w	ip, [r4, #268]	; 0x10c
    1120:	f000 86b6 	beq.w	1e90 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb08>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1124:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1126:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1128:	f04f 0e0c 	mov.w	lr, #12

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    112c:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    112e:	83fb      	strh	r3, [r7, #30]
			cu->latency = conn->llcp_cu.latency;
    1130:	8439      	strh	r1, [r7, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1132:	f8a7 c022 	strh.w	ip, [r7, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1136:	f887 e004 	strb.w	lr, [r7, #4]
			cu->status = 0x00;
    113a:	773a      	strb	r2, [r7, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    113c:	4639      	mov	r1, r7
    113e:	f011 fb7d 	bl	1283c <ll_rx_put>
		ll_rx_sched();
    1142:	f011 fb85 	bl	12850 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1146:	6823      	ldr	r3, [r4, #0]
    1148:	2b00      	cmp	r3, #0
    114a:	da09      	bge.n	1160 <ull_conn_llcp+0x248>
			uint32_t ticks_prepare_to_start =
    114c:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1154:	428a      	cmp	r2, r1
    1156:	bf2c      	ite	cs
    1158:	18b6      	addcs	r6, r6, r2
    115a:	1876      	addcc	r6, r6, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    115c:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    115e:	1af6      	subs	r6, r6, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1160:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    1162:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    1166:	fb13 f30b 	smulbb	r3, r3, fp
    116a:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    116c:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
    1170:	fb17 f201 	smulbb	r2, r7, r1
    1174:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1176:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    1178:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    117c:	f080 8526 	bcs.w	1bcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x844>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1180:	1ad3      	subs	r3, r2, r3
    1182:	486c      	ldr	r0, [pc, #432]	; (1334 <ull_conn_llcp+0x41c>)
    1184:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1188:	fb02 f303 	mul.w	r3, r2, r3
    118c:	fba3 0100 	umull	r0, r1, r3, r0
    1190:	a365      	add	r3, pc, #404	; (adr r3, 1328 <ull_conn_llcp+0x410>)
    1192:	e9d3 2300 	ldrd	r2, r3, [r3]
    1196:	f7fe ffa3 	bl	e0 <__aeabi_uldivmod>
    119a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    119e:	4406      	add	r6, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    11a0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
		lll->latency_prepare -= (instant_latency - latency);
    11a2:	eba9 0808 	sub.w	r8, r9, r8
		lll->latency_prepare += lazy;
    11a6:	441d      	add	r5, r3
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    11a8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    11ac:	44d0      	add	r8, sl
    11ae:	44a8      	add	r8, r5
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    11b0:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
    11b4:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    11b6:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    11ba:	fb09 f707 	mul.w	r7, r9, r7
		} else if (lll->role) {
    11be:	f2c0 8527 	blt.w	1c10 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x888>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    11c2:	4a5d      	ldr	r2, [pc, #372]	; (1338 <ull_conn_llcp+0x420>)
    11c4:	495d      	ldr	r1, [pc, #372]	; (133c <ull_conn_llcp+0x424>)
    11c6:	485e      	ldr	r0, [pc, #376]	; (1340 <ull_conn_llcp+0x428>)
    11c8:	f640 1324 	movw	r3, #2340	; 0x924
    11cc:	f01b faf9 	bl	1c7c2 <printk>
    11d0:	4040      	eors	r0, r0
    11d2:	f380 8811 	msr	BASEPRI, r0
    11d6:	f04f 0003 	mov.w	r0, #3
    11da:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    11dc:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    11e0:	46ba      	mov	sl, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11e2:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    11e6:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    11ea:	4b56      	ldr	r3, [pc, #344]	; (1344 <ull_conn_llcp+0x42c>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    11ec:	4856      	ldr	r0, [pc, #344]	; (1348 <ull_conn_llcp+0x430>)
		lll->latency = conn->llcp_cu.latency;
    11ee:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    11f0:	f242 7c10 	movw	ip, #10000	; 0x2710
    11f4:	fb0c 7202 	mla	r2, ip, r2, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    11f8:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    11fa:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    11fc:	fbb3 f3f7 	udiv	r3, r3, r7
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1200:	f101 0c06 	add.w	ip, r1, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1204:	3a01      	subs	r2, #1
    1206:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    120a:	fbb0 f7f7 	udiv	r7, r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    120e:	b298      	uxth	r0, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1210:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1214:	4560      	cmp	r0, ip
		lll->interval = conn->llcp_cu.interval;
    1216:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    121a:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    121e:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
    1222:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1224:	dd02      	ble.n	122c <ull_conn_llcp+0x314>
				     (conn->apto_reload - (lll->latency + 6)) :
    1226:	1a40      	subs	r0, r0, r1
    1228:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    122a:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    122c:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1230:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    1234:	0759      	lsls	r1, r3, #29
			conn->supervision_expire = 0U;
    1236:	bf44      	itt	mi
    1238:	2300      	movmi	r3, #0
    123a:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    123e:	2102      	movs	r1, #2
    1240:	2001      	movs	r0, #1
    1242:	f018 fcd3 	bl	19bec <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    1246:	2200      	movs	r2, #0
    1248:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    124a:	4607      	mov	r7, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    124c:	2001      	movs	r0, #1
    124e:	f00d fcdb 	bl	ec08 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1252:	493e      	ldr	r1, [pc, #248]	; (134c <ull_conn_llcp+0x434>)
    1254:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    1258:	4620      	mov	r0, r4
    125a:	f00d fc67 	bl	eb2c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    125e:	1cc2      	adds	r2, r0, #3
    1260:	fa5f f982 	uxtb.w	r9, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1264:	4b3a      	ldr	r3, [pc, #232]	; (1350 <ull_conn_llcp+0x438>)
    1266:	9400      	str	r4, [sp, #0]
    1268:	464a      	mov	r2, r9
    126a:	2101      	movs	r1, #1
    126c:	2000      	movs	r0, #0
    126e:	f00e ffa3 	bl	101b8 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1272:	f030 0302 	bics.w	r3, r0, #2
    1276:	d00c      	beq.n	1292 <ull_conn_llcp+0x37a>
    1278:	4a2f      	ldr	r2, [pc, #188]	; (1338 <ull_conn_llcp+0x420>)
    127a:	4936      	ldr	r1, [pc, #216]	; (1354 <ull_conn_llcp+0x43c>)
    127c:	4830      	ldr	r0, [pc, #192]	; (1340 <ull_conn_llcp+0x428>)
    127e:	f640 1353 	movw	r3, #2387	; 0x953
    1282:	f01b fa9e 	bl	1c7c2 <printk>
    1286:	4040      	eors	r0, r0
    1288:	f380 8811 	msr	BASEPRI, r0
    128c:	f04f 0003 	mov.w	r0, #3
    1290:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1292:	4b28      	ldr	r3, [pc, #160]	; (1334 <ull_conn_llcp+0x41c>)
    1294:	fbaa ab03 	umull	sl, fp, sl, r3
    1298:	4650      	mov	r0, sl
    129a:	a323      	add	r3, pc, #140	; (adr r3, 1328 <ull_conn_llcp+0x410>)
    129c:	e9d3 2300 	ldrd	r2, r3, [r3]
    12a0:	4659      	mov	r1, fp
    12a2:	f7fe ff1d 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    12a6:	4a2c      	ldr	r2, [pc, #176]	; (1358 <ull_conn_llcp+0x440>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12a8:	68e3      	ldr	r3, [r4, #12]
    12aa:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    12ac:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
    12b0:	fba5 2302 	umull	r2, r3, r5, r2
    12b4:	2007      	movs	r0, #7
    12b6:	fb00 3305 	mla	r3, r0, r5, r3
    12ba:	ebba 0002 	subs.w	r0, sl, r2
    12be:	eb6b 0103 	sbc.w	r1, fp, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12c2:	f8df e098 	ldr.w	lr, [pc, #152]	; 135c <ull_conn_llcp+0x444>
    12c6:	f8df c098 	ldr.w	ip, [pc, #152]	; 1360 <ull_conn_llcp+0x448>
    12ca:	9408      	str	r4, [sp, #32]
    12cc:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    12ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12d2:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(periodic_us),
    12d4:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12d6:	f8cd e01c 	str.w	lr, [sp, #28]
    12da:	f8cd c014 	str.w	ip, [sp, #20]
    12de:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    12e0:	f7fe fefe 	bl	e0 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    12e4:	4633      	mov	r3, r6
    12e6:	e9cd 5001 	strd	r5, r0, [sp, #4]
    12ea:	f8cd 8000 	str.w	r8, [sp]
    12ee:	4620      	mov	r0, r4
    12f0:	464a      	mov	r2, r9
    12f2:	2101      	movs	r1, #1
    12f4:	f00e fef4 	bl	100e0 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    12f8:	f030 0302 	bics.w	r3, r0, #2
    12fc:	d00c      	beq.n	1318 <ull_conn_llcp+0x400>
    12fe:	4a0e      	ldr	r2, [pc, #56]	; (1338 <ull_conn_llcp+0x420>)
    1300:	4914      	ldr	r1, [pc, #80]	; (1354 <ull_conn_llcp+0x43c>)
    1302:	480f      	ldr	r0, [pc, #60]	; (1340 <ull_conn_llcp+0x428>)
    1304:	f640 136d 	movw	r3, #2413	; 0x96d
    1308:	f01b fa5b 	bl	1c7c2 <printk>
    130c:	4040      	eors	r0, r0
    130e:	f380 8811 	msr	BASEPRI, r0
    1312:	f04f 0003 	mov.w	r0, #3
    1316:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1318:	2f00      	cmp	r7, #0
    131a:	f040 85d2 	bne.w	1ec2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb3a>
				return -ECANCELED;
    131e:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1322:	e617      	b.n	f54 <ull_conn_llcp+0x3c>
    1324:	f3af 8000 	nop.w
    1328:	1afd498d 	.word	0x1afd498d
    132c:	00000007 	.word	0x00000007
    1330:	20002254 	.word	0x20002254
    1334:	3b9aca00 	.word	0x3b9aca00
    1338:	00022b08 	.word	0x00022b08
    133c:	000226e8 	.word	0x000226e8
    1340:	00022678 	.word	0x00022678
    1344:	01c9c37f 	.word	0x01c9c37f
    1348:	026259ff 	.word	0x026259ff
    134c:	2000208c 	.word	0x2000208c
    1350:	000137c5 	.word	0x000137c5
    1354:	00022be8 	.word	0x00022be8
    1358:	1afd498d 	.word	0x1afd498d
    135c:	0001376d 	.word	0x0001376d
    1360:	000165f1 	.word	0x000165f1
			event_counter = lll->event_counter +
    1364:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    1366:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1368:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    136c:	4413      	add	r3, r2
					lll->latency_prepare + lazy;
    136e:	441d      	add	r5, r3
	if (conn->llcp.phy_upd_ind.initiate) {
    1370:	07ca      	lsls	r2, r1, #31
			event_counter = lll->event_counter +
    1372:	b2ad      	uxth	r5, r5
	if (conn->llcp.phy_upd_ind.initiate) {
    1374:	468c      	mov	ip, r1
    1376:	f100 8297 	bmi.w	18a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x520>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    137a:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
    137e:	1aed      	subs	r5, r5, r3
    1380:	0428      	lsls	r0, r5, #16
    1382:	f53f ade0 	bmi.w	f46 <ull_conn_llcp+0x2e>

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    1386:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    138a:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    138e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    1392:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
    1396:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    139a:	f011 0f1c 	tst.w	r1, #28
		old_tx = lll->phy_tx;
    139e:	f003 0907 	and.w	r9, r3, #7
		old_rx = lll->phy_rx;
    13a2:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
    13a6:	f040 8595 	bne.w	1ed4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4c>
		uint16_t eff_tx_time = lll->max_tx_time;
    13aa:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    13ae:	f011 0fe0 	tst.w	r1, #224	; 0xe0
    13b2:	d008      	beq.n	13c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    13b4:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    13b8:	094b      	lsrs	r3, r1, #5
    13ba:	f363 0202 	bfi	r2, r3, #0, #3
    13be:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    13c2:	f44f 77a4 	mov.w	r7, #328	; 0x148
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    13c6:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
    13ca:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    13ce:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    13d2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    13d6:	f363 02c3 	bfi	r2, r3, #3, #1
    13da:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    13de:	2d00      	cmp	r5, #0
    13e0:	f000 858d 	beq.w	1efe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb76>
    13e4:	6828      	ldr	r0, [r5, #0]
    13e6:	2800      	cmp	r0, #0
    13e8:	f000 8589 	beq.w	1efe <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb76>
		conn->llcp_rx = rx->hdr.link->mem;
    13ec:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    13f0:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    13f4:	6841      	ldr	r1, [r0, #4]
    13f6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    13fa:	f01c 0f02 	tst.w	ip, #2
    13fe:	f3c3 0102 	ubfx	r1, r3, #0, #3
    1402:	f3c2 0e02 	ubfx	lr, r2, #0, #3
    1406:	f003 0307 	and.w	r3, r3, #7
    140a:	f002 0207 	and.w	r2, r2, #7
    140e:	d102      	bne.n	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
    1410:	4599      	cmp	r9, r3
    1412:	f000 874b 	beq.w	22ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf24>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1416:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
    1418:	80eb      	strh	r3, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    141a:	2210      	movs	r2, #16

		upd = (void *)rx->pdu;
		upd->status = 0U;
    141c:	2300      	movs	r3, #0
		upd->tx = lll->phy_tx;
    141e:	7769      	strb	r1, [r5, #29]
		upd->rx = lll->phy_rx;
    1420:	f885 e01e 	strb.w	lr, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1424:	712a      	strb	r2, [r5, #4]
		upd->status = 0U;
    1426:	772b      	strb	r3, [r5, #28]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1428:	4629      	mov	r1, r5
    142a:	f011 fa07 	bl	1283c <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    142e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1432:	2d00      	cmp	r5, #0
    1434:	f000 85d4 	beq.w	1fe0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc58>
    1438:	6828      	ldr	r0, [r5, #0]
    143a:	2800      	cmp	r0, #0
    143c:	f000 85d0 	beq.w	1fe0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc58>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1440:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    1444:	6842      	ldr	r2, [r0, #4]
    1446:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    144a:	42b3      	cmp	r3, r6
    144c:	d30a      	bcc.n	1464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc>
    144e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1452:	d807      	bhi.n	1464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    1454:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    1458:	42bb      	cmp	r3, r7
    145a:	d303      	bcc.n	1464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdc>
		    (eff_rx_time <= lll->max_rx_time) &&
    145c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    1460:	f240 8738 	bls.w	22d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf4c>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    1464:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1468:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    146c:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    146e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1470:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1472:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1476:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1478:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    147a:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    147c:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    147e:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1480:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1484:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1488:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    148a:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    148c:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    148e:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1490:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1492:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1494:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1496:	f011 f9d1 	bl	1283c <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    149a:	f011 f9d9 	bl	12850 <ll_rx_sched>
    149e:	e552      	b.n	f46 <ull_conn_llcp+0x2e>
	if (conn->llcp.encryption.state) {
    14a0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    14a4:	f013 0503 	ands.w	r5, r3, #3
    14a8:	f000 828b 	beq.w	19c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x63a>
		if (lll->role &&
    14ac:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    14b0:	2b00      	cmp	r3, #0
    14b2:	f6bf ad48 	bge.w	f46 <ull_conn_llcp+0x2e>
    14b6:	2d01      	cmp	r5, #1
    14b8:	f47f ad45 	bne.w	f46 <ull_conn_llcp+0x2e>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    14bc:	48bf      	ldr	r0, [pc, #764]	; (17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>)
    14be:	f00d faff 	bl	eac0 <mem_acquire>
	if (!tx) {
    14c2:	4605      	mov	r5, r0
    14c4:	2800      	cmp	r0, #0
    14c6:	f43f ad3e 	beq.w	f46 <ull_conn_llcp+0x2e>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14ca:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    14cc:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14ce:	f043 0303 	orr.w	r3, r3, #3
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    14d2:	2704      	movs	r7, #4
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    14d4:	f100 0608 	add.w	r6, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    14d8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    14da:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    14dc:	71c7      	strb	r7, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    14de:	210c      	movs	r1, #12
    14e0:	4630      	mov	r0, r6
    14e2:	f016 fb83 	bl	17bec <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    14e6:	4631      	mov	r1, r6
    14e8:	2208      	movs	r2, #8
    14ea:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    14ee:	f01d fc80 	bl	1edf2 <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    14f2:	463a      	mov	r2, r7
    14f4:	f105 0110 	add.w	r1, r5, #16
    14f8:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    14fc:	f01d fc79 	bl	1edf2 <memcpy>
	    conn->tx_head &&
    1500:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1504:	2b00      	cmp	r3, #0
    1506:	f000 86ad 	beq.w	2264 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xedc>
	    !conn->llcp_enc.pause_tx &&
    150a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    150e:	0797      	lsls	r7, r2, #30
    1510:	f100 86a8 	bmi.w	2264 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xedc>
	    !conn->llcp_phy.pause_tx &&
    1514:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1518:	07d6      	lsls	r6, r2, #31
    151a:	f100 86a3 	bmi.w	2264 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xedc>
		if (conn->tx_head == conn->tx_data) {
    151e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1522:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1524:	bf04      	itt	eq
    1526:	681a      	ldreq	r2, [r3, #0]
    1528:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    152c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1530:	2a00      	cmp	r2, #0
    1532:	f001 80f9 	beq.w	2728 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13a0>
	tx->next = conn->tx_ctrl_last->next;
    1536:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    153a:	681a      	ldr	r2, [r3, #0]
    153c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    153e:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1540:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1544:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    1546:	2b00      	cmp	r3, #0
    1548:	f001 8084 	beq.w	2654 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12cc>
			rx = ll_pdu_rx_alloc();
    154c:	f011 f9a4 	bl	12898 <ll_pdu_rx_alloc>
			if (!rx) {
    1550:	4605      	mov	r5, r0
    1552:	2800      	cmp	r0, #0
    1554:	f43f acf7 	beq.w	f46 <ull_conn_llcp+0x2e>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1558:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    155a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    155c:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    155e:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1562:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1564:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1566:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1568:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    156a:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    156c:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    156e:	f204 1155 	addw	r1, r4, #341	; 0x155
    1572:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1574:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1576:	f105 0020 	add.w	r0, r5, #32
    157a:	f01d fc3a 	bl	1edf2 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    157e:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1582:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1586:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    158a:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    158e:	6828      	ldr	r0, [r5, #0]
    1590:	4629      	mov	r1, r5
    1592:	f011 f953 	bl	1283c <ll_rx_put>
			ll_rx_sched();
    1596:	f011 f95b 	bl	12850 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    159a:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    159e:	f366 0301 	bfi	r3, r6, #0, #2
    15a2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    15a6:	e4ce      	b.n	f46 <ull_conn_llcp+0x2e>
			event_counter = lll->event_counter +
    15a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
    15aa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    15ac:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    15b0:	440b      	add	r3, r1
					lll->latency_prepare + lazy;
    15b2:	441d      	add	r5, r3
	if (conn->llcp.chan_map.initiate) {
    15b4:	07d2      	lsls	r2, r2, #31
			event_counter = lll->event_counter +
    15b6:	b2ad      	uxth	r5, r5
	if (conn->llcp.chan_map.initiate) {
    15b8:	f100 81d1 	bmi.w	195e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5d6>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    15bc:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
    15c0:	1aed      	subs	r5, r5, r3
    15c2:	042b      	lsls	r3, r5, #16
    15c4:	f53f acbf 	bmi.w	f46 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    15c8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    15cc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    15d0:	f104 0538 	add.w	r5, r4, #56	; 0x38
    15d4:	2205      	movs	r2, #5
    15d6:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    15da:	4628      	mov	r0, r5
    15dc:	f01d fc09 	bl	1edf2 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    15e0:	4628      	mov	r0, r5
    15e2:	2105      	movs	r1, #5
    15e4:	f00d fc3a 	bl	ee5c <util_ones_count_get>
		lll->data_chan_count =
    15e8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    15ec:	2201      	movs	r2, #1
		lll->data_chan_count =
    15ee:	f360 0305 	bfi	r3, r0, #0, #6
    15f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    15f6:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    15fa:	e4a4      	b.n	f46 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    15fc:	486f      	ldr	r0, [pc, #444]	; (17bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x434>)
    15fe:	f00d fa5f 	bl	eac0 <mem_acquire>
	if (tx) {
    1602:	2800      	cmp	r0, #0
    1604:	f43f ac9f 	beq.w	f46 <ull_conn_llcp+0x2e>
		conn->llcp_ack = conn->llcp_req;
    1608:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    160c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1610:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1612:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1614:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1616:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    161a:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    161e:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1620:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1622:	71c1      	strb	r1, [r0, #7]
	if (
    1624:	2b00      	cmp	r3, #0
    1626:	f000 82c6 	beq.w	1bb6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82e>
	    !conn->llcp_enc.pause_tx &&
    162a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    162e:	0795      	lsls	r5, r2, #30
    1630:	f100 82c1 	bmi.w	1bb6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82e>
	    !conn->llcp_phy.pause_tx &&
    1634:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1638:	07d1      	lsls	r1, r2, #31
    163a:	f100 82bc 	bmi.w	1bb6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x82e>
		if (conn->tx_head == conn->tx_data) {
    163e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1642:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1644:	bf04      	itt	eq
    1646:	681a      	ldreq	r2, [r3, #0]
    1648:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    164c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1650:	2a00      	cmp	r2, #0
    1652:	f001 8017 	beq.w	2684 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12fc>
	tx->next = conn->tx_ctrl_last->next;
    1656:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    165a:	681a      	ldr	r2, [r3, #0]
    165c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    165e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1660:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1664:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    1666:	2b00      	cmp	r3, #0
    1668:	f000 84ca 	beq.w	2000 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc78>
		conn->procedure_expire = conn->procedure_reload;
    166c:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1670:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1674:	e467      	b.n	f46 <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
    1676:	4a52      	ldr	r2, [pc, #328]	; (17c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x438>)
    1678:	4952      	ldr	r1, [pc, #328]	; (17c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x43c>)
    167a:	4853      	ldr	r0, [pc, #332]	; (17c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x440>)
    167c:	f240 3379 	movw	r3, #889	; 0x379
    1680:	f01b f89f 	bl	1c7c2 <printk>
    1684:	4040      	eors	r0, r0
    1686:	f380 8811 	msr	BASEPRI, r0
    168a:	f04f 0003 	mov.w	r0, #3
    168e:	df02      	svc	2
			break;
    1690:	e459      	b.n	f46 <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1692:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
    1696:	f894 7118 	ldrb.w	r7, [r4, #280]	; 0x118
    169a:	42bb      	cmp	r3, r7
    169c:	d154      	bne.n	1748 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3c0>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    169e:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
    16a2:	f894 7124 	ldrb.w	r7, [r4, #292]	; 0x124
    16a6:	42bb      	cmp	r3, r7
    16a8:	f000 8304 	beq.w	1cb4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x92c>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    16ac:	1bdb      	subs	r3, r3, r7
    16ae:	07d8      	lsls	r0, r3, #31
    16b0:	f57f ac49 	bpl.w	f46 <ull_conn_llcp+0x2e>
	if (conn->llcp_version.tx == 0U) {
    16b4:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    16b8:	07d9      	lsls	r1, r3, #31
    16ba:	f140 8704 	bpl.w	24c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x113e>
	} else if (conn->llcp_version.rx) {
    16be:	0798      	lsls	r0, r3, #30
    16c0:	f140 86f2 	bpl.w	24a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1120>
		rx = ll_pdu_rx_alloc();
    16c4:	f011 f8e8 	bl	12898 <ll_pdu_rx_alloc>
		if (!rx) {
    16c8:	4601      	mov	r1, r0
    16ca:	2800      	cmp	r0, #0
    16cc:	d070      	beq.n	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		conn->llcp_version.ack = conn->llcp_version.req;
    16ce:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    16d2:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    16d6:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    16d8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    16da:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    16dc:	f043 0303 	orr.w	r3, r3, #3
    16e0:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16e2:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    16e4:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    16e6:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    16e8:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    16ea:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    16ec:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.company_id =
    16ee:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.version_number =
    16f2:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
		pdu->llctrl.version_ind.sub_version_number =
    16f6:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
    16fa:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    16fe:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    1702:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    1706:	6808      	ldr	r0, [r1, #0]
    1708:	f011 f898 	bl	1283c <ll_rx_put>
		ll_rx_sched();
    170c:	f011 f8a0 	bl	12850 <ll_rx_sched>
    1710:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1714:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1718:	e410      	b.n	f3c <ull_conn_llcp+0x24>
	switch (conn->llcp_length.state) {
    171a:	f002 0107 	and.w	r1, r2, #7
    171e:	2906      	cmp	r1, #6
    1720:	f201 813b 	bhi.w	299a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1612>
    1724:	a001      	add	r0, pc, #4	; (adr r0, 172c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a4>)
    1726:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    172a:	bf00      	nop
    172c:	00001b0d 	.word	0x00001b0d
    1730:	00000f99 	.word	0x00000f99
    1734:	00000f99 	.word	0x00000f99
    1738:	00000f99 	.word	0x00000f99
    173c:	00001a7f 	.word	0x00001a7f
    1740:	00001a7f 	.word	0x00001a7f
    1744:	00000f99 	.word	0x00000f99
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1748:	1bdb      	subs	r3, r3, r7
    174a:	07d9      	lsls	r1, r3, #31
    174c:	f57f abfb 	bpl.w	f46 <ull_conn_llcp+0x2e>
	if (conn->common.fex_valid) {
    1750:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    1754:	f011 0701 	ands.w	r7, r1, #1
    1758:	f000 83e3 	beq.w	1f22 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb9a>
		rx = ll_pdu_rx_alloc();
    175c:	f011 f89c 	bl	12898 <ll_pdu_rx_alloc>
		if (!rx) {
    1760:	4607      	mov	r7, r0
    1762:	b328      	cbz	r0, 17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1764:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1768:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    176c:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    176e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1770:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1772:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1776:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1778:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    177a:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    177c:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    177e:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1780:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1782:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1784:	f107 0020 	add.w	r0, r7, #32
    1788:	2208      	movs	r2, #8
    178a:	f01d fb5d 	bl	1ee48 <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
    178e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    1792:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
    1796:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    179a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    179c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
    17a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    17a4:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
    17a6:	6808      	ldr	r0, [r1, #0]
    17a8:	f011 f848 	bl	1283c <ll_rx_put>
	ll_rx_sched();
    17ac:	f011 f850 	bl	12850 <ll_rx_sched>
		return;
    17b0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    17b4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    17b8:	f7ff bbc0 	b.w	f3c <ull_conn_llcp+0x24>
    17bc:	200022d0 	.word	0x200022d0
    17c0:	00022b08 	.word	0x00022b08
    17c4:	000226e8 	.word	0x000226e8
    17c8:	00022678 	.word	0x00022678
		rx = ll_pdu_rx_alloc_peek(1);
    17cc:	2001      	movs	r0, #1
    17ce:	f011 f845 	bl	1285c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    17d2:	4606      	mov	r6, r0
    17d4:	2800      	cmp	r0, #0
    17d6:	f43f abb6 	beq.w	f46 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    17da:	48ca      	ldr	r0, [pc, #808]	; (1b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77c>)
    17dc:	f00d f970 	bl	eac0 <mem_acquire>
		if (!tx) {
    17e0:	4605      	mov	r5, r0
    17e2:	2800      	cmp	r0, #0
    17e4:	f43f abaf 	beq.w	f46 <ull_conn_llcp+0x2e>
		(void)ll_pdu_rx_alloc();
    17e8:	f011 f856 	bl	12898 <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    17ec:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    17ee:	6832      	ldr	r2, [r6, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    17f0:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    17f4:	4443      	add	r3, r8
    17f6:	3306      	adds	r3, #6
    17f8:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    17fa:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    17fe:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1800:	792a      	ldrb	r2, [r5, #4]
		conn->llcp_rx = rx;
    1802:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1806:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    180a:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    180c:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    1810:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1814:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    1818:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    181a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	    conn->tx_head &&
    181e:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    1822:	4eb9      	ldr	r6, [pc, #740]	; (1b08 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x780>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1824:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    1826:	2200      	movs	r2, #0
    1828:	71ea      	strb	r2, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    182a:	fba6 2303 	umull	r2, r3, r6, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    182e:	f894 6114 	ldrb.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1832:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    1836:	722e      	strb	r6, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1838:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    183c:	f8b4 610a 	ldrh.w	r6, [r4, #266]	; 0x10a
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    1840:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    1844:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    1848:	f8a5 200f 	strh.w	r2, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    184c:	f8a5 600d 	strh.w	r6, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1850:	f8a5 1011 	strh.w	r1, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    1854:	f8a5 3009 	strh.w	r3, [r5, #9]
	if (
    1858:	2800      	cmp	r0, #0
    185a:	f000 8345 	beq.w	1ee8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb60>
	    !conn->llcp_enc.pause_tx &&
    185e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    1862:	079f      	lsls	r7, r3, #30
    1864:	f100 8340 	bmi.w	1ee8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb60>
	    !conn->llcp_phy.pause_tx &&
    1868:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    186c:	07de      	lsls	r6, r3, #31
    186e:	f100 833b 	bmi.w	1ee8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb60>
		if (conn->tx_head == conn->tx_data) {
    1872:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    1876:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    1878:	bf04      	itt	eq
    187a:	6803      	ldreq	r3, [r0, #0]
    187c:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1880:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1884:	2b00      	cmp	r3, #0
    1886:	f000 871b 	beq.w	26c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1338>
	tx->next = conn->tx_ctrl_last->next;
    188a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    188e:	681a      	ldr	r2, [r3, #0]
    1890:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1892:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1894:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1898:	6828      	ldr	r0, [r5, #0]
	if (!tx->next) {
    189a:	2800      	cmp	r0, #0
    189c:	f47f ab53 	bne.w	f46 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    18a0:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    18a4:	f7ff bb4f 	b.w	f46 <ull_conn_llcp+0x2e>
		rx = ll_pdu_rx_alloc_peek(2);
    18a8:	2002      	movs	r0, #2
    18aa:	f010 ffd7 	bl	1285c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    18ae:	4607      	mov	r7, r0
    18b0:	2800      	cmp	r0, #0
    18b2:	f43f ab48 	beq.w	f46 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    18b6:	4893      	ldr	r0, [pc, #588]	; (1b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77c>)
    18b8:	f00d f902 	bl	eac0 <mem_acquire>
		if (!tx) {
    18bc:	4606      	mov	r6, r0
    18be:	2800      	cmp	r0, #0
    18c0:	f43f ab41 	beq.w	f46 <ull_conn_llcp+0x2e>
		conn->llcp.phy_upd_ind.initiate = 0U;
    18c4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    18c8:	f36f 0300 	bfc	r3, #0, #1
		if (!((conn->llcp.phy_upd_ind.tx |
    18cc:	f3c3 0082 	ubfx	r0, r3, #2, #3
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    18d0:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    18d4:	ea50 0802 	orrs.w	r8, r0, r2
		conn->llcp.phy_upd_ind.initiate = 0U;
    18d8:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    18dc:	b2db      	uxtb	r3, r3
    18de:	f040 85c5 	bne.w	246c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10e4>
			conn->llcp_ack = conn->llcp_req;
    18e2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    18e6:	f8a4 80ee 	strh.w	r8, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    18ea:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
    18ec:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    18f0:	f100 8678 	bmi.w	25e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x125c>
    18f4:	4643      	mov	r3, r8
    18f6:	4641      	mov	r1, r8
		pdu_ctrl_tx->len =
    18f8:	2205      	movs	r2, #5
    18fa:	7172      	strb	r2, [r6, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    18fc:	f886 8008 	strb.w	r8, [r6, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1900:	7932      	ldrb	r2, [r6, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    1902:	7273      	strb	r3, [r6, #9]
	    conn->tx_head &&
    1904:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    1908:	8171      	strh	r1, [r6, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    190a:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    190e:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1910:	7132      	strb	r2, [r6, #4]
		pdu_ctrl_tx->llctrl.opcode =
    1912:	71f1      	strb	r1, [r6, #7]
	if (
    1914:	2b00      	cmp	r3, #0
    1916:	d04a      	beq.n	19ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x626>
	    !conn->llcp_enc.pause_tx &&
    1918:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    191c:	0797      	lsls	r7, r2, #30
    191e:	d446      	bmi.n	19ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x626>
	    !conn->llcp_phy.pause_tx &&
    1920:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1924:	07d5      	lsls	r5, r2, #31
    1926:	d442      	bmi.n	19ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x626>
		if (conn->tx_head == conn->tx_data) {
    1928:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    192c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    192e:	bf04      	itt	eq
    1930:	681a      	ldreq	r2, [r3, #0]
    1932:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1936:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    193a:	2a00      	cmp	r2, #0
    193c:	f000 86b5 	beq.w	26aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1322>
	tx->next = conn->tx_ctrl_last->next;
    1940:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1944:	681a      	ldr	r2, [r3, #0]
    1946:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1948:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    194a:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    194e:	6833      	ldr	r3, [r6, #0]
	if (!tx->next) {
    1950:	2b00      	cmp	r3, #0
    1952:	f47f aaf8 	bne.w	f46 <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
    1956:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    195a:	f7ff baf4 	b.w	f46 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    195e:	4869      	ldr	r0, [pc, #420]	; (1b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77c>)
    1960:	f00d f8ae 	bl	eac0 <mem_acquire>
		if (tx) {
    1964:	4606      	mov	r6, r0
    1966:	2800      	cmp	r0, #0
    1968:	f43f aaed 	beq.w	f46 <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
    196c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    196e:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    1970:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    1974:	441d      	add	r5, r3
						      conn->lll.latency + 6;
    1976:	1dab      	adds	r3, r5, #6
			conn->llcp.chan_map.instant = event_counter +
    1978:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    197c:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    1980:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1982:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1986:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1988:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    198c:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    198e:	7170      	strb	r0, [r6, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1990:	71f3      	strb	r3, [r6, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1992:	2205      	movs	r2, #5
    1994:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1998:	1830      	adds	r0, r6, r0
    199a:	f01d fa2a 	bl	1edf2 <memcpy>
	    conn->tx_head &&
    199e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    19a2:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    19a6:	f8a6 200d 	strh.w	r2, [r6, #13]
	if (
    19aa:	2b00      	cmp	r3, #0
    19ac:	d1b4      	bne.n	1918 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x590>
		if (!conn->tx_ctrl) {
    19ae:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    19b2:	2a00      	cmp	r2, #0
    19b4:	d1c4      	bne.n	1940 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5b8>
			tx->next = conn->tx_head;
    19b6:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    19b8:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    19bc:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    19c0:	e7c6      	b.n	1950 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c8>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    19c2:	4850      	ldr	r0, [pc, #320]	; (1b04 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x77c>)
    19c4:	f00d f87c 	bl	eac0 <mem_acquire>
	if (!tx) {
    19c8:	4606      	mov	r6, r0
    19ca:	2800      	cmp	r0, #0
    19cc:	f43f aabb 	beq.w	f46 <ull_conn_llcp+0x2e>
	if (!lll->role) {
    19d0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    19d4:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    19d6:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    19da:	f280 83d8 	bge.w	218e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xe06>
	else if (!lll->enc_rx) {
    19de:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    19e2:	0719      	lsls	r1, r3, #28
    19e4:	f100 85bc 	bmi.w	2560 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11d8>
		if (conn->llcp.encryption.error_code) {
    19e8:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    19ec:	2d00      	cmp	r5, #0
    19ee:	f000 847a 	beq.w	22e6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf5e>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    19f2:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    19f4:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    19f8:	f043 0303 	orr.w	r3, r3, #3
	if (conn->common.fex_valid &&
    19fc:	07d2      	lsls	r2, r2, #31
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    19fe:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    1a00:	f140 85dc 	bpl.w	25bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1234>
	    (conn->llcp_feature.features_conn &
    1a04:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    1a08:	075b      	lsls	r3, r3, #29
    1a0a:	f140 85d7 	bpl.w	25bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1234>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1a0e:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1a10:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    1a12:	7245      	strb	r5, [r0, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    1a14:	71c2      	strb	r2, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1a16:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    1a18:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    1a1a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    1a1e:	2200      	movs	r2, #0
    1a20:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    1a24:	2b00      	cmp	r3, #0
    1a26:	f000 84a8 	beq.w	237a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xff2>
	    !conn->llcp_enc.pause_tx &&
    1a2a:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1a2e:	0790      	lsls	r0, r2, #30
    1a30:	f100 84a3 	bmi.w	237a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xff2>
	    !conn->llcp_phy.pause_tx &&
    1a34:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1a38:	07d1      	lsls	r1, r2, #31
    1a3a:	f100 849e 	bmi.w	237a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xff2>
		if (conn->tx_head == conn->tx_data) {
    1a3e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1a42:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1a44:	bf04      	itt	eq
    1a46:	681a      	ldreq	r2, [r3, #0]
    1a48:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1a4c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1a50:	2a00      	cmp	r2, #0
    1a52:	f000 86a5 	beq.w	27a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1418>
	tx->next = conn->tx_ctrl_last->next;
    1a56:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1a5a:	681a      	ldr	r2, [r3, #0]
    1a5c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    1a5e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    1a60:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1a64:	6833      	ldr	r3, [r6, #0]
    1a66:	2b00      	cmp	r3, #0
    1a68:	f000 84fc 	beq.w	2464 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x10dc>
	conn->llcp_ack = conn->llcp_req;
    1a6c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1a70:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    1a74:	f7ff ba67 	b.w	f46 <ull_conn_llcp+0x2e>
		conn_upd_curr = conn;
    1a78:	603c      	str	r4, [r7, #0]
    1a7a:	f7ff bb0a 	b.w	1092 <ull_conn_llcp+0x17a>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1a7e:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1a82:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    1a86:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    1a8a:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    1a8e:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    1a92:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1a96:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    1a98:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    1a9c:	f000 848d 	beq.w	23ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1032>
			conn->llcp_length.state =
    1aa0:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    1aa4:	2206      	movs	r2, #6
    1aa6:	f362 0302 	bfi	r3, r2, #0, #3
    1aaa:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    1aae:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1ab2:	2f00      	cmp	r7, #0
    1ab4:	f000 846d 	beq.w	2392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100a>
    1ab8:	6838      	ldr	r0, [r7, #0]
    1aba:	2800      	cmp	r0, #0
    1abc:	f000 8469 	beq.w	2392 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x100a>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1ac0:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    1ac2:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    1ac4:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    1ac8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1acc:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ad0:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    1ad2:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    1ad4:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1ad8:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    1ada:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1ade:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1ae2:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ae4:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1ae6:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    1ae8:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1aea:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1aee:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    1af2:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    1af6:	f010 fea1 	bl	1283c <ll_rx_put>
		ll_rx_sched();
    1afa:	f010 fea9 	bl	12850 <ll_rx_sched>
	break;
    1afe:	f7ff ba4b 	b.w	f98 <ull_conn_llcp+0x80>
    1b02:	bf00      	nop
    1b04:	200022d0 	.word	0x200022d0
    1b08:	d1b71759 	.word	0xd1b71759
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1b0c:	48d8      	ldr	r0, [pc, #864]	; (1e70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae8>)
    1b0e:	f00c ffd7 	bl	eac0 <mem_acquire>
		if (!tx) {
    1b12:	2800      	cmp	r0, #0
    1b14:	f43f aa40 	beq.w	f98 <ull_conn_llcp+0x80>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b18:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1b1c:	f8b4 719e 	ldrh.w	r7, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    1b20:	f8b4 21a2 	ldrh.w	r2, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    1b24:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b28:	2101      	movs	r1, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    1b2a:	f8a4 20d8 	strh.w	r2, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b2e:	f361 0302 	bfi	r3, r1, #0, #3
		pdu_ctrl_tx->len =
    1b32:	2209      	movs	r2, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    1b34:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    1b38:	7142      	strb	r2, [r0, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b3a:	7902      	ldrb	r2, [r0, #4]
	    conn->tx_head &&
    1b3c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    1b40:	8187      	strh	r7, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b42:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1b46:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1b4a:	72c1      	strb	r1, [r0, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1b4c:	73c1      	strb	r1, [r0, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1b4e:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1b50:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1b52:	211b      	movs	r1, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1b54:	2248      	movs	r2, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    1b56:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    1b5a:	7247      	strb	r7, [r0, #9]
    1b5c:	7201      	strb	r1, [r0, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    1b5e:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    1b60:	7382      	strb	r2, [r0, #14]
	if (
    1b62:	2b00      	cmp	r3, #0
    1b64:	f000 8308 	beq.w	2178 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdf0>
	    !conn->llcp_enc.pause_tx &&
    1b68:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1b6c:	0791      	lsls	r1, r2, #30
    1b6e:	f100 8303 	bmi.w	2178 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdf0>
	    !conn->llcp_phy.pause_tx &&
    1b72:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1b76:	07d2      	lsls	r2, r2, #31
    1b78:	f100 82fe 	bmi.w	2178 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdf0>
		if (conn->tx_head == conn->tx_data) {
    1b7c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1b80:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1b82:	bf04      	itt	eq
    1b84:	681a      	ldreq	r2, [r3, #0]
    1b86:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1b8a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1b8e:	2a00      	cmp	r2, #0
    1b90:	f000 85c2 	beq.w	2718 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1390>
	tx->next = conn->tx_ctrl_last->next;
    1b94:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1b98:	681a      	ldr	r2, [r3, #0]
    1b9a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1b9c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1b9e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1ba2:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
    1ba4:	2b00      	cmp	r3, #0
    1ba6:	f000 850f 	beq.w	25c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1240>
		conn->procedure_expire = conn->procedure_reload;
    1baa:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1bae:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1bb2:	f7ff b9f1 	b.w	f98 <ull_conn_llcp+0x80>
		if (!conn->tx_ctrl) {
    1bb6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1bba:	2a00      	cmp	r2, #0
    1bbc:	f47f ad4b 	bne.w	1656 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ce>
			tx->next = conn->tx_head;
    1bc0:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1bc2:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1bc6:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    1bca:	e54c      	b.n	1666 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2de>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1bcc:	fb07 3311 	mls	r3, r7, r1, r3
    1bd0:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1bd4:	48a7      	ldr	r0, [pc, #668]	; (1e74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaec>)
    1bd6:	b29b      	uxth	r3, r3
    1bd8:	fb02 f303 	mul.w	r3, r2, r3
    1bdc:	fba3 0100 	umull	r0, r1, r3, r0
    1be0:	a3a1      	add	r3, pc, #644	; (adr r3, 1e68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae0>)
    1be2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1be6:	f7fe fa7b 	bl	e0 <__aeabi_uldivmod>
    1bea:	1a36      	subs	r6, r6, r0
    1bec:	f7ff bad8 	b.w	11a0 <ull_conn_llcp+0x288>
		LL_ASSERT(rx && rx->hdr.link);
    1bf0:	4aa1      	ldr	r2, [pc, #644]	; (1e78 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf0>)
    1bf2:	49a2      	ldr	r1, [pc, #648]	; (1e7c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf4>)
    1bf4:	48a2      	ldr	r0, [pc, #648]	; (1e80 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaf8>)
    1bf6:	f640 03af 	movw	r3, #2223	; 0x8af
    1bfa:	f01a fde2 	bl	1c7c2 <printk>
    1bfe:	4040      	eors	r0, r0
    1c00:	f380 8811 	msr	BASEPRI, r0
    1c04:	f04f 0003 	mov.w	r0, #3
    1c08:	df02      	svc	2
    1c0a:	6838      	ldr	r0, [r7, #0]
    1c0c:	f7ff ba7d 	b.w	110a <ull_conn_llcp+0x1f2>
			lll->slave.window_widening_prepare_us -=
    1c10:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    1c12:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c14:	4d97      	ldr	r5, [pc, #604]	; (1e74 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xaec>)
			lll->slave.window_widening_prepare_us -=
    1c16:	fb03 231b 	mls	r3, r3, fp, r2
    1c1a:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_conn_ppm_local_get() +
    1c1c:	f016 feb2 	bl	18984 <lll_conn_ppm_local_get>
    1c20:	4680      	mov	r8, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1c22:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    1c26:	f3c0 0082 	ubfx	r0, r0, #2, #3
    1c2a:	f016 fead 	bl	18988 <lll_conn_ppm_get>
				(((lll_conn_ppm_local_get() +
    1c2e:	eb08 0300 	add.w	r3, r8, r0
				   lll_conn_ppm_get(conn->slave.sca)) *
    1c32:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1c36:	4893      	ldr	r0, [pc, #588]	; (1e84 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xafc>)
			lll->slave.window_widening_prepare_us +=
    1c38:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    1c3a:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    1c3e:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    1c42:	f203 233f 	addw	r3, r3, #575	; 0x23f
    1c46:	fba0 0303 	umull	r0, r3, r0, r3
    1c4a:	ea4f 4b93 	mov.w	fp, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    1c4e:	fb0b f00a 	mul.w	r0, fp, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1c52:	087b      	lsrs	r3, r7, #1
			lll->slave.window_widening_prepare_us +=
    1c54:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    1c56:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    1c58:	429a      	cmp	r2, r3
    1c5a:	bf28      	it	cs
    1c5c:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * 1250U;
    1c5e:	fb09 fc01 	mul.w	ip, r9, r1
			conn->slave.ticks_to_offset = 0U;
    1c62:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    1c66:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			lll->slave.window_size_prepare_us =
    1c6a:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c6e:	a37e      	add	r3, pc, #504	; (adr r3, 1e68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae0>)
    1c70:	e9d3 2300 	ldrd	r2, r3, [r3]
			conn->slave.ticks_to_offset = 0U;
    1c74:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
    1c78:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c7c:	fba0 0105 	umull	r0, r1, r0, r5
    1c80:	f7fe fa2e 	bl	e0 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1c84:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1c88:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1c8a:	487f      	ldr	r0, [pc, #508]	; (1e88 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb00>)
    1c8c:	fba0 3003 	umull	r3, r0, r0, r3
    1c90:	0a80      	lsrs	r0, r0, #10
    1c92:	fb09 f000 	mul.w	r0, r9, r0
    1c96:	a374      	add	r3, pc, #464	; (adr r3, 1e68 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae0>)
    1c98:	e9d3 2300 	ldrd	r2, r3, [r3]
    1c9c:	fba0 0105 	umull	r0, r1, r0, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1ca0:	eba6 060c 	sub.w	r6, r6, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1ca4:	f7fe fa1c 	bl	e0 <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    1ca8:	eba7 0a0b 	sub.w	sl, r7, fp
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1cac:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1cb0:	f7ff ba97 	b.w	11e2 <ull_conn_llcp+0x2ca>
		} else if (conn->llcp_conn_param.ack !=
    1cb4:	f894 7171 	ldrb.w	r7, [r4, #369]	; 0x171
    1cb8:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    1cbc:	429f      	cmp	r7, r3
    1cbe:	f000 81a3 	beq.w	2008 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc80>
	conn_upd = conn_upd_curr;
    1cc2:	4f72      	ldr	r7, [pc, #456]	; (1e8c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb04>)
    1cc4:	683b      	ldr	r3, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
    1cc6:	2b00      	cmp	r3, #0
    1cc8:	f000 84ad 	beq.w	2626 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x129e>
    1ccc:	429c      	cmp	r4, r3
    1cce:	f47f a93a 	bne.w	f46 <ull_conn_llcp+0x2e>
	switch (conn->llcp_conn_param.state) {
    1cd2:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    1cd6:	f003 0307 	and.w	r3, r3, #7
    1cda:	2b05      	cmp	r3, #5
    1cdc:	f200 8657 	bhi.w	298e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1606>
    1ce0:	f20f 0e04 	addw	lr, pc, #4
    1ce4:	f85e f023 	ldr.w	pc, [lr, r3, lsl #2]
    1ce8:	00001dd5 	.word	0x00001dd5
    1cec:	00001d53 	.word	0x00001d53
    1cf0:	00001d01 	.word	0x00001d01
    1cf4:	00000f3d 	.word	0x00000f3d
    1cf8:	00000f3d 	.word	0x00000f3d
    1cfc:	00000f3d 	.word	0x00000f3d
	if (conn->llcp_enc.pause_tx) {
    1d00:	f01c 0f02 	tst.w	ip, #2
    1d04:	f47f a91f 	bne.w	f46 <ull_conn_llcp+0x2e>
	rx = ll_pdu_rx_alloc();
    1d08:	f010 fdc6 	bl	12898 <ll_pdu_rx_alloc>
	if (!rx) {
    1d0c:	4601      	mov	r1, r0
    1d0e:	2800      	cmp	r0, #0
    1d10:	f43f ad4e 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d14:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1d16:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    1d1a:	2003      	movs	r0, #3
    1d1c:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d20:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    1d22:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    1d26:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d28:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d2a:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1d2c:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d2e:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1d30:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1d32:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1d36:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    1d3a:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1d3c:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1d40:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1d42:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1d46:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1d48:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1d4a:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1d4c:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1d4e:	77cb      	strb	r3, [r1, #31]
    1d50:	e529      	b.n	17a6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x41e>
	if (conn->llcp_conn_param.status) {
    1d52:	f894 8173 	ldrb.w	r8, [r4, #371]	; 0x173
    1d56:	f1b8 0f00 	cmp.w	r8, #0
    1d5a:	f040 84f7 	bne.w	274c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13c4>
	if (!conn->lll.role) {
    1d5e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1d62:	2b00      	cmp	r3, #0
    1d64:	f2c0 857c 	blt.w	2860 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14d8>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1d68:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    1d6c:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    1d70:	f8c4 8110 	str.w	r8, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1d74:	2205      	movs	r2, #5
    1d76:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    1d7a:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    1d7c:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    1d80:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    1d84:	2800      	cmp	r0, #0
    1d86:	f000 85f0 	beq.w	296a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15e2>
				((conn->llcp_conn_param.interval_min /
    1d8a:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    1d8e:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    1d92:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    1d94:	fb13 f300 	smulbb	r3, r3, r0
    1d98:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1d9a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1d9e:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    1da2:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    1da6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1daa:	009b      	lsls	r3, r3, #2
    1dac:	f020 0207 	bic.w	r2, r0, #7
    1db0:	f043 0302 	orr.w	r3, r3, #2
    1db4:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1db6:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1dba:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    1dbe:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    1dc2:	3901      	subs	r1, #1
    1dc4:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    1dc8:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    1dcc:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    1dd0:	f7ff b8b9 	b.w	f46 <ull_conn_llcp+0x2e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1dd4:	4826      	ldr	r0, [pc, #152]	; (1e70 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xae8>)
			event_counter = lll->event_counter +
    1dd6:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    1dda:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1dde:	f00c fe6f 	bl	eac0 <mem_acquire>
	if (!tx) {
    1de2:	4601      	mov	r1, r0
    1de4:	2800      	cmp	r0, #0
    1de6:	f43f ace3 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1dea:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dee:	790a      	ldrb	r2, [r1, #4]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1df0:	f04f 0c04 	mov.w	ip, #4
    1df4:	f36c 0002 	bfi	r0, ip, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1df8:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1dfc:	f04f 0c18 	mov.w	ip, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    1e00:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
			event_counter = lll->event_counter +
    1e04:	eb08 0309 	add.w	r3, r8, r9
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1e08:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    1e0a:	f881 c005 	strb.w	ip, [r1, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1e0e:	f8b4 c174 	ldrh.w	ip, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1e12:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1e16:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    1e1a:	f8a1 c008 	strh.w	ip, [r1, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1e1e:	442b      	add	r3, r5
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1e20:	f8b4 c17a 	ldrh.w	ip, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    1e24:	8148      	strh	r0, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    1e26:	818a      	strh	r2, [r1, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1e28:	200f      	movs	r0, #15
	p->preferred_periodicity = 0U;
    1e2a:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    1e2c:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    1e34:	71c8      	strb	r0, [r1, #7]
	p->offset1 = sys_cpu_to_le16(0xffff);
    1e36:	754b      	strb	r3, [r1, #21]
    1e38:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    1e3a:	75cb      	strb	r3, [r1, #23]
    1e3c:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    1e3e:	764b      	strb	r3, [r1, #25]
    1e40:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    1e42:	76cb      	strb	r3, [r1, #27]
    1e44:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    1e46:	774b      	strb	r3, [r1, #29]
    1e48:	778b      	strb	r3, [r1, #30]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    1e4a:	f8a1 c00e 	strh.w	ip, [r1, #14]
	p->preferred_periodicity = 0U;
    1e4e:	740a      	strb	r2, [r1, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    1e50:	74ca      	strb	r2, [r1, #19]
    1e52:	750a      	strb	r2, [r1, #20]
	ctrl_tx_pause_enqueue(conn, tx, false);
    1e54:	4620      	mov	r0, r4
    1e56:	f011 fb7b 	bl	13550 <ctrl_tx_pause_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    1e5a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	conn_upd_curr = conn;
    1e5e:	603c      	str	r4, [r7, #0]
	conn->procedure_expire = conn->procedure_reload;
    1e60:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1e64:	e4a4      	b.n	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
    1e66:	bf00      	nop
    1e68:	1afd498d 	.word	0x1afd498d
    1e6c:	00000007 	.word	0x00000007
    1e70:	200022d0 	.word	0x200022d0
    1e74:	3b9aca00 	.word	0x3b9aca00
    1e78:	00022b08 	.word	0x00022b08
    1e7c:	00022c8c 	.word	0x00022c8c
    1e80:	00022678 	.word	0x00022678
    1e84:	431bde83 	.word	0x431bde83
    1e88:	d1b71759 	.word	0xd1b71759
    1e8c:	20002254 	.word	0x20002254
		if ((conn->llcp_cu.interval != lll->interval) ||
    1e90:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    1e92:	428a      	cmp	r2, r1
    1e94:	f47f a946 	bne.w	1124 <ull_conn_llcp+0x20c>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1e98:	f240 42e2 	movw	r2, #1250	; 0x4e2
    1e9c:	fb02 fa03 	mul.w	sl, r2, r3
    1ea0:	f242 7210 	movw	r2, #10000	; 0x2710
		    (conn->llcp_cu.latency != lll->latency) ||
    1ea4:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1ea8:	fb02 a20c 	mla	r2, r2, ip, sl
    1eac:	3a01      	subs	r2, #1
    1eae:	fbb2 f2fa 	udiv	r2, r2, sl
		    (conn->llcp_cu.latency != lll->latency) ||
    1eb2:	b292      	uxth	r2, r2
    1eb4:	4596      	cmp	lr, r2
    1eb6:	f47f a935 	bne.w	1124 <ull_conn_llcp+0x20c>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    1eba:	2303      	movs	r3, #3
    1ebc:	713b      	strb	r3, [r7, #4]
    1ebe:	f7ff b93d 	b.w	113c <ull_conn_llcp+0x224>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1ec2:	2201      	movs	r2, #1
    1ec4:	4610      	mov	r0, r2
    1ec6:	2102      	movs	r1, #2
    1ec8:	f00c fe9e 	bl	ec08 <mayfly_enable>
				return -ECANCELED;
    1ecc:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1ed0:	f7ff b840 	b.w	f54 <ull_conn_llcp+0x3c>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    1ed4:	f3c1 0282 	ubfx	r2, r1, #2, #3
    1ed8:	f362 0302 	bfi	r3, r2, #0, #3
    1edc:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    1ee0:	f44f 76a4 	mov.w	r6, #328	; 0x148
    1ee4:	f7ff ba63 	b.w	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
		if (!conn->tx_ctrl) {
    1ee8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    1eec:	2b00      	cmp	r3, #0
    1eee:	f47f accc 	bne.w	188a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x502>
			tx->next = conn->tx_head;
    1ef2:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
    1ef4:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1ef8:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    1efc:	e4cd      	b.n	189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
		LL_ASSERT(rx && rx->hdr.link);
    1efe:	4ad4      	ldr	r2, [pc, #848]	; (2250 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec8>)
    1f00:	49d4      	ldr	r1, [pc, #848]	; (2254 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xecc>)
    1f02:	48d5      	ldr	r0, [pc, #852]	; (2258 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed0>)
    1f04:	f640 6328 	movw	r3, #3624	; 0xe28
    1f08:	f01a fc5b 	bl	1c7c2 <printk>
    1f0c:	4040      	eors	r0, r0
    1f0e:	f380 8811 	msr	BASEPRI, r0
    1f12:	f04f 0003 	mov.w	r0, #3
    1f16:	df02      	svc	2
    1f18:	6828      	ldr	r0, [r5, #0]
    1f1a:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
    1f1e:	f7ff ba65 	b.w	13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f22:	48ce      	ldr	r0, [pc, #824]	; (225c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed4>)
    1f24:	f00c fdcc 	bl	eac0 <mem_acquire>
	if (tx) {
    1f28:	4680      	mov	r8, r0
    1f2a:	2800      	cmp	r0, #0
    1f2c:	f43f ac40 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		conn->llcp_feature.ack--;
    1f30:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    1f34:	4aca      	ldr	r2, [pc, #808]	; (2260 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed8>)
    1f36:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    1f3a:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1f3c:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    1f3e:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    1f42:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    1f44:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f48:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    1f4a:	2a00      	cmp	r2, #0
    1f4c:	bfac      	ite	ge
    1f4e:	2208      	movge	r2, #8
    1f50:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f52:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    1f56:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1f58:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f5a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    1f5c:	4639      	mov	r1, r7
    1f5e:	4410      	add	r0, r2
    1f60:	f01c ff72 	bl	1ee48 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    1f64:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    1f68:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    1f6c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1f70:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1f72:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    1f76:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    1f7a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1f7e:	2b00      	cmp	r3, #0
    1f80:	f000 817c 	beq.w	227c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xef4>
	    !conn->llcp_enc.pause_tx &&
    1f84:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1f88:	0792      	lsls	r2, r2, #30
    1f8a:	f100 8177 	bmi.w	227c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xef4>
	    !conn->llcp_phy.pause_tx &&
    1f8e:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1f92:	07d7      	lsls	r7, r2, #31
    1f94:	f100 8172 	bmi.w	227c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xef4>
		if (conn->tx_head == conn->tx_data) {
    1f98:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1f9c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1f9e:	bf04      	itt	eq
    1fa0:	681a      	ldreq	r2, [r3, #0]
    1fa2:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1fa6:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1faa:	2a00      	cmp	r2, #0
    1fac:	f000 83ee 	beq.w	278c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1404>
	tx->next = conn->tx_ctrl_last->next;
    1fb0:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1fb4:	681a      	ldr	r2, [r3, #0]
    1fb6:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    1fba:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    1fbe:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    1fc2:	f8d8 3000 	ldr.w	r3, [r8]
	if (!tx->next) {
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	f000 8348 	beq.w	265c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12d4>
		conn->procedure_expire = conn->procedure_reload;
    1fcc:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1fd0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1fd4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    1fd8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    1fdc:	f7fe bfae 	b.w	f3c <ull_conn_llcp+0x24>
		LL_ASSERT(rx && rx->hdr.link);
    1fe0:	4a9b      	ldr	r2, [pc, #620]	; (2250 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xec8>)
    1fe2:	499c      	ldr	r1, [pc, #624]	; (2254 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xecc>)
    1fe4:	489c      	ldr	r0, [pc, #624]	; (2258 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed0>)
    1fe6:	f640 6354 	movw	r3, #3668	; 0xe54
    1fea:	f01a fbea 	bl	1c7c2 <printk>
    1fee:	4040      	eors	r0, r0
    1ff0:	f380 8811 	msr	BASEPRI, r0
    1ff4:	f04f 0003 	mov.w	r0, #3
    1ff8:	df02      	svc	2
    1ffa:	6828      	ldr	r0, [r5, #0]
    1ffc:	f7ff ba20 	b.w	1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>
		conn->tx_data_last = tx;
    2000:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2004:	f7ff bb32 	b.w	166c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2e4>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2008:	f894 7198 	ldrb.w	r7, [r4, #408]	; 0x198
    200c:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    2010:	42bb      	cmp	r3, r7
    2012:	f000 81dd 	beq.w	23d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1048>
	switch (conn->llcp_length.state) {
    2016:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    201a:	f003 0107 	and.w	r1, r3, #7
    201e:	2906      	cmp	r1, #6
    2020:	f200 84b8 	bhi.w	2994 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160c>
    2024:	f20f 0c04 	addw	ip, pc, #4
    2028:	f85c f021 	ldr.w	pc, [ip, r1, lsl #2]
    202c:	000020d3 	.word	0x000020d3
    2030:	00000f3d 	.word	0x00000f3d
    2034:	00000f3d 	.word	0x00000f3d
    2038:	00000f3d 	.word	0x00000f3d
    203c:	00002049 	.word	0x00002049
    2040:	00002049 	.word	0x00002049
    2044:	00000f3d 	.word	0x00000f3d
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    2048:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    204c:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2050:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    2054:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    2058:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    205c:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    2060:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2064:	2a04      	cmp	r2, #4
    2066:	f000 8367 	beq.w	2738 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x13b0>
			conn->llcp_length.state =
    206a:	2206      	movs	r2, #6
    206c:	f362 0302 	bfi	r3, r2, #0, #3
    2070:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    2074:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2078:	2f00      	cmp	r7, #0
    207a:	f000 833e 	beq.w	26fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1372>
    207e:	6838      	ldr	r0, [r7, #0]
    2080:	2800      	cmp	r0, #0
    2082:	f000 833a 	beq.w	26fa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1372>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2086:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    2088:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    208a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    208e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2092:	f043 0303 	orr.w	r3, r3, #3
    2096:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2098:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    209a:	2309      	movs	r3, #9
    209c:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    209e:	713a      	strb	r2, [r7, #4]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    20a0:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    20a4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
    20a8:	8439      	strh	r1, [r7, #32]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    20aa:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    20ac:	847a      	strh	r2, [r7, #34]	; 0x22
		rx->hdr.handle = conn->lll.handle;
    20ae:	f8a7 c006 	strh.w	ip, [r7, #6]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    20b2:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    20b4:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    20b6:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    20ba:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    20be:	f010 fbbd 	bl	1283c <ll_rx_put>
		ll_rx_sched();
    20c2:	f010 fbc5 	bl	12850 <ll_rx_sched>
	break;
    20c6:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    20ca:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    20ce:	f7fe bf35 	b.w	f3c <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20d2:	4862      	ldr	r0, [pc, #392]	; (225c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xed4>)
    20d4:	f00c fcf4 	bl	eac0 <mem_acquire>
		if (!tx) {
    20d8:	4603      	mov	r3, r0
    20da:	2800      	cmp	r0, #0
    20dc:	f43f ab68 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    20e0:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    20e4:	f8b4 719e 	ldrh.w	r7, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    20e8:	f8b4 11a2 	ldrh.w	r1, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    20ec:	f8a4 70d6 	strh.w	r7, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    20f0:	2001      	movs	r0, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    20f2:	f8a4 10d8 	strh.w	r1, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    20f6:	f360 0202 	bfi	r2, r0, #0, #3
		pdu_ctrl_tx->len =
    20fa:	2109      	movs	r1, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    20fc:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    2100:	7159      	strb	r1, [r3, #5]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2102:	7919      	ldrb	r1, [r3, #4]
	    conn->tx_head &&
    2104:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    2108:	819f      	strh	r7, [r3, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    210a:	f041 0103 	orr.w	r1, r1, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    210e:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    2112:	72d8      	strb	r0, [r3, #11]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2114:	73d8      	strb	r0, [r3, #15]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2116:	2700      	movs	r7, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2118:	7119      	strb	r1, [r3, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    211a:	201b      	movs	r0, #27
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    211c:	2148      	movs	r1, #72	; 0x48
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    211e:	f883 c007 	strb.w	ip, [r3, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2122:	725f      	strb	r7, [r3, #9]
    2124:	7218      	strb	r0, [r3, #8]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    2126:	7299      	strb	r1, [r3, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2128:	7399      	strb	r1, [r3, #14]
	if (
    212a:	2a00      	cmp	r2, #0
    212c:	f000 82da 	beq.w	26e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x135c>
	    !conn->llcp_enc.pause_tx &&
    2130:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
    2134:	0789      	lsls	r1, r1, #30
    2136:	f100 82d5 	bmi.w	26e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x135c>
	    !conn->llcp_phy.pause_tx &&
    213a:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    213e:	07cf      	lsls	r7, r1, #31
    2140:	f100 82d0 	bmi.w	26e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x135c>
		if (conn->tx_head == conn->tx_data) {
    2144:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    2148:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
    214a:	bf04      	itt	eq
    214c:	6811      	ldreq	r1, [r2, #0]
    214e:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2152:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    2156:	2900      	cmp	r1, #0
    2158:	f000 840b 	beq.w	2972 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ea>
	tx->next = conn->tx_ctrl_last->next;
    215c:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
    2160:	6811      	ldr	r1, [r2, #0]
    2162:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
    2164:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
    2166:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
    216a:	681a      	ldr	r2, [r3, #0]
    216c:	2a00      	cmp	r2, #0
    216e:	f47f af2d 	bne.w	1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>
		conn->tx_data_last = tx;
    2172:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
    2176:	e729      	b.n	1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>
		if (!conn->tx_ctrl) {
    2178:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    217c:	2a00      	cmp	r2, #0
    217e:	f47f ad09 	bne.w	1b94 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x80c>
			tx->next = conn->tx_head;
    2182:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2184:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2188:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    218c:	e50a      	b.n	1ba4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81c>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    218e:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    2192:	463b      	mov	r3, r7
    2194:	462a      	mov	r2, r5
    2196:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    219a:	f204 105d 	addw	r0, r4, #349	; 0x15d
    219e:	f017 f8d3 	bl	19348 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    21a2:	4639      	mov	r1, r7
    21a4:	2210      	movs	r2, #16
    21a6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    21aa:	f01c fe22 	bl	1edf2 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    21ae:	2208      	movs	r2, #8
    21b0:	f104 0198 	add.w	r1, r4, #152	; 0x98
    21b4:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    21b8:	f01c fe1b 	bl	1edf2 <memcpy>
		lll->ccm_rx.direction = 0;
    21bc:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    21c0:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    21c4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    21c8:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    21cc:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    21d0:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    21d4:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    21d8:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    21dc:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    21e0:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    21e4:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    21e8:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    21ec:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    21f0:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    21f4:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    21f8:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    21fc:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2200:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    2202:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    2206:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    220a:	4620      	mov	r0, r4
    220c:	f011 fbaa 	bl	13964 <start_enc_rsp_send>
	    conn->tx_head &&
    2210:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2214:	2b00      	cmp	r3, #0
    2216:	d03d      	beq.n	2294 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf0c>
	    !conn->llcp_enc.pause_tx &&
    2218:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    221c:	0795      	lsls	r5, r2, #30
    221e:	d439      	bmi.n	2294 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf0c>
	    !conn->llcp_phy.pause_tx &&
    2220:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2224:	07d0      	lsls	r0, r2, #31
    2226:	d435      	bmi.n	2294 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf0c>
		if (conn->tx_head == conn->tx_data) {
    2228:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    222c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    222e:	bf04      	itt	eq
    2230:	681a      	ldreq	r2, [r3, #0]
    2232:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2236:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    223a:	2a00      	cmp	r2, #0
    223c:	f47f ac0b 	bne.w	1a56 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ce>
			tx->next = conn->tx_head->next;
    2240:	681a      	ldr	r2, [r3, #0]
    2242:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2244:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2246:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2248:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    224c:	e40b      	b.n	1a66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6de>
    224e:	bf00      	nop
    2250:	00022b08 	.word	0x00022b08
    2254:	00022c8c 	.word	0x00022c8c
    2258:	00022678 	.word	0x00022678
    225c:	200022d0 	.word	0x200022d0
    2260:	0001417f 	.word	0x0001417f
		if (!conn->tx_ctrl) {
    2264:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2268:	2a00      	cmp	r2, #0
    226a:	f47f a964 	bne.w	1536 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1ae>
			tx->next = conn->tx_head;
    226e:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2270:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2274:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    2278:	f7ff b965 	b.w	1546 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1be>
		if (!conn->tx_ctrl) {
    227c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2280:	2a00      	cmp	r2, #0
    2282:	f47f ae95 	bne.w	1fb0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc28>
			tx->next = conn->tx_head;
    2286:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    228a:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    228e:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2292:	e698      	b.n	1fc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc3e>
		if (!conn->tx_ctrl) {
    2294:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2298:	2a00      	cmp	r2, #0
    229a:	f47f abdc 	bne.w	1a56 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ce>
			tx->next = conn->tx_head;
    229e:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    22a0:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    22a4:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    22a8:	f7ff bbdd 	b.w	1a66 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6de>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    22ac:	4590      	cmp	r8, r2
    22ae:	f47f a8b2 	bne.w	1416 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8e>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    22b2:	2303      	movs	r3, #3
    22b4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    22b6:	4629      	mov	r1, r5
    22b8:	f010 fac0 	bl	1283c <ll_rx_put>
				rx = conn->llcp_rx;
    22bc:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    22c0:	2d00      	cmp	r5, #0
    22c2:	f000 8274 	beq.w	27ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1426>
    22c6:	6828      	ldr	r0, [r5, #0]
    22c8:	2800      	cmp	r0, #0
    22ca:	f000 8270 	beq.w	27ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1426>
				conn->llcp_rx = rx->hdr.link->mem;
    22ce:	6843      	ldr	r3, [r0, #4]
    22d0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    22d4:	2303      	movs	r3, #3
    22d6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    22d8:	4629      	mov	r1, r5
    22da:	f010 faaf 	bl	1283c <ll_rx_put>
			ll_rx_sched();
    22de:	f010 fab7 	bl	12850 <ll_rx_sched>
			return;
    22e2:	f7fe be30 	b.w	f46 <ull_conn_llcp+0x2e>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    22e6:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    22ea:	463b      	mov	r3, r7
    22ec:	462a      	mov	r2, r5
    22ee:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    22f2:	f204 105d 	addw	r0, r4, #349	; 0x15d
    22f6:	f017 f827 	bl	19348 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    22fa:	4639      	mov	r1, r7
    22fc:	2210      	movs	r2, #16
    22fe:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    2302:	f01c fd76 	bl	1edf2 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2306:	2208      	movs	r2, #8
    2308:	f104 0198 	add.w	r1, r4, #152	; 0x98
    230c:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2310:	f01c fd6f 	bl	1edf2 <memcpy>
			lll->ccm_rx.direction = 1U;
    2314:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2318:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    231c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2320:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    2324:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    2328:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    232c:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2330:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    2332:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2336:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    233a:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    233e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2342:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2346:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    234a:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    234e:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2352:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2356:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    235a:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    235e:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2362:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2364:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    2366:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    236a:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    236e:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2370:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    2372:	71f1      	strb	r1, [r6, #7]
	if (
    2374:	2b00      	cmp	r3, #0
    2376:	f47f ab58 	bne.w	1a2a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6a2>
		if (!conn->tx_ctrl) {
    237a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    237e:	2a00      	cmp	r2, #0
    2380:	f47f ab69 	bne.w	1a56 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6ce>
			tx->next = conn->tx_head;
    2384:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2386:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    238a:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    238e:	f7ff bb69 	b.w	1a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6dc>
		LL_ASSERT(rx && rx->hdr.link);
    2392:	4acf      	ldr	r2, [pc, #828]	; (26d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1348>)
    2394:	49cf      	ldr	r1, [pc, #828]	; (26d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x134c>)
    2396:	48d0      	ldr	r0, [pc, #832]	; (26d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1350>)
    2398:	f640 43f8 	movw	r3, #3320	; 0xcf8
    239c:	f01a fa11 	bl	1c7c2 <printk>
    23a0:	4040      	eors	r0, r0
    23a2:	f380 8811 	msr	BASEPRI, r0
    23a6:	f04f 0003 	mov.w	r0, #3
    23aa:	df02      	svc	2
    23ac:	6838      	ldr	r0, [r7, #0]
    23ae:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    23b2:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    23b6:	f7ff bb83 	b.w	1ac0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x738>
			if (!conn->llcp_length.cache.tx_octets) {
    23ba:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    23be:	2a00      	cmp	r2, #0
    23c0:	f040 814f 	bne.w	2662 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12da>
				conn->llcp_length.ack = conn->llcp_length.req;
    23c4:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    23c8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    23cc:	f7ff bb6f 	b.w	1aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x726>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    23d0:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    23d4:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
    23d8:	4299      	cmp	r1, r3
    23da:	f43e adb4 	beq.w	f46 <ull_conn_llcp+0x2e>
	switch (conn->llcp_phy.state) {
    23de:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    23e2:	f001 0003 	and.w	r0, r1, #3
    23e6:	2803      	cmp	r0, #3
    23e8:	f000 81f0 	beq.w	27cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1444>
    23ec:	2800      	cmp	r0, #0
    23ee:	f47e adaa 	bne.w	f46 <ull_conn_llcp+0x2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    23f2:	48ba      	ldr	r0, [pc, #744]	; (26dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1354>)
    23f4:	f00c fb64 	bl	eac0 <mem_acquire>
		if (!tx) {
    23f8:	4601      	mov	r1, r0
    23fa:	2800      	cmp	r0, #0
    23fc:	f43f a9d8 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2400:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2404:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2408:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    240c:	2001      	movs	r0, #1
    240e:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2412:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2416:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    241a:	f3c3 1042 	ubfx	r0, r3, #5, #3
    241e:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2422:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2426:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2428:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    242c:	f367 02c3 	bfi	r2, r7, #3, #1
    2430:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2434:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2438:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    243c:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2440:	2216      	movs	r2, #22
		pdu_ctrl_tx->len =
    2442:	2703      	movs	r7, #3
		pr->rx_phys = conn->llcp_phy.rx;
    2444:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2446:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2448:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    244a:	f881 c008 	strb.w	ip, [r1, #8]
		pdu_ctrl_tx->len =
    244e:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2450:	2200      	movs	r2, #0
    2452:	4620      	mov	r0, r4
    2454:	f011 f87c 	bl	13550 <ctrl_tx_pause_enqueue>
		conn->procedure_expire = conn->procedure_reload;
    2458:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    245c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    2460:	f7ff b9a6 	b.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		conn->tx_data_last = tx;
    2464:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2468:	f7ff bb00 	b.w	1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>
			conn->llcp.phy_upd_ind.instant = event_counter +
    246c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    246e:	441d      	add	r5, r3
							 lll->latency +
    2470:	1dab      	adds	r3, r5, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2472:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    2476:	f010 fa0f 	bl	12898 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    247a:	683b      	ldr	r3, [r7, #0]
    247c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2480:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2482:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    2486:	f010 fa07 	bl	12898 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    248a:	6803      	ldr	r3, [r0, #0]
    248c:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2490:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2492:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2496:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    249a:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    249e:	f3c3 0882 	ubfx	r8, r3, #2, #3
    24a2:	095b      	lsrs	r3, r3, #5
    24a4:	f7ff ba28 	b.w	18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
		LL_ASSERT(0);
    24a8:	f640 3317 	movw	r3, #2839	; 0xb17
		LL_ASSERT(0);
    24ac:	4a88      	ldr	r2, [pc, #544]	; (26d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1348>)
    24ae:	498c      	ldr	r1, [pc, #560]	; (26e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1358>)
    24b0:	4889      	ldr	r0, [pc, #548]	; (26d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1350>)
    24b2:	f01a f986 	bl	1c7c2 <printk>
    24b6:	4040      	eors	r0, r0
    24b8:	f380 8811 	msr	BASEPRI, r0
    24bc:	f04f 0003 	mov.w	r0, #3
    24c0:	df02      	svc	2
		break;
    24c2:	f7ff b975 	b.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    24c6:	4885      	ldr	r0, [pc, #532]	; (26dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1354>)
    24c8:	f00c fafa 	bl	eac0 <mem_acquire>
		if (tx) {
    24cc:	2800      	cmp	r0, #0
    24ce:	f43f a96f 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
			conn->llcp_version.ack--;
    24d2:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    24d6:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    24da:	3a01      	subs	r2, #1
    24dc:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    24e0:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    24e2:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    24e6:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    24e8:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    24ec:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    24f0:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    24f2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    24f6:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    24f8:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    24fa:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    24fe:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    2500:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2502:	7242      	strb	r2, [r0, #9]
    2504:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    2506:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    250a:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    250c:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    250e:	72c2      	strb	r2, [r0, #11]
    2510:	7302      	strb	r2, [r0, #12]
	if (
    2512:	2b00      	cmp	r3, #0
    2514:	f000 80be 	beq.w	2694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130c>
	    !conn->llcp_enc.pause_tx &&
    2518:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    251c:	0792      	lsls	r2, r2, #30
    251e:	f100 80b9 	bmi.w	2694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130c>
	    !conn->llcp_phy.pause_tx &&
    2522:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2526:	07d7      	lsls	r7, r2, #31
    2528:	f100 80b4 	bmi.w	2694 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130c>
		if (conn->tx_head == conn->tx_data) {
    252c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2530:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2532:	bf04      	itt	eq
    2534:	681a      	ldreq	r2, [r3, #0]
    2536:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    253a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    253e:	2a00      	cmp	r2, #0
    2540:	f000 820d 	beq.w	295e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15d6>
	tx->next = conn->tx_ctrl_last->next;
    2544:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2548:	681a      	ldr	r2, [r3, #0]
    254a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    254c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    254e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2552:	6803      	ldr	r3, [r0, #0]
    2554:	2b00      	cmp	r3, #0
    2556:	f47f ad39 	bne.w	1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>
		conn->tx_data_last = tx;
    255a:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    255e:	e535      	b.n	1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2560:	4641      	mov	r1, r8
    2562:	4620      	mov	r0, r4
    2564:	f011 f9fe 	bl	13964 <start_enc_rsp_send>
	    conn->tx_head &&
    2568:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    256c:	b383      	cbz	r3, 25d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1248>
	    !conn->llcp_enc.pause_tx &&
    256e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2572:	0792      	lsls	r2, r2, #30
    2574:	d42c      	bmi.n	25d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1248>
	    !conn->llcp_phy.pause_tx &&
    2576:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    257a:	07d7      	lsls	r7, r2, #31
    257c:	d428      	bmi.n	25d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1248>
		if (conn->tx_head == conn->tx_data) {
    257e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2582:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2584:	bf04      	itt	eq
    2586:	681a      	ldreq	r2, [r3, #0]
    2588:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    258c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2590:	2a00      	cmp	r2, #0
    2592:	f000 815f 	beq.w	2854 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14cc>
	tx->next = conn->tx_ctrl_last->next;
    2596:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    259a:	681a      	ldr	r2, [r3, #0]
    259c:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    259e:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    25a0:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    25a4:	6833      	ldr	r3, [r6, #0]
    25a6:	2b00      	cmp	r3, #0
    25a8:	f000 8087 	beq.w	26ba <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1332>
		conn->llcp_enc.pause_rx = 0U;
    25ac:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    25b0:	f023 0303 	bic.w	r3, r3, #3
    25b4:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    25b8:	f7ff ba58 	b.w	1a6c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6e4>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    25bc:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    25be:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    25c0:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    25c2:	2702      	movs	r7, #2
    25c4:	f7ff ba28 	b.w	1a18 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x690>
		conn->tx_data_last = tx;
    25c8:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    25cc:	f7ff baed 	b.w	1baa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x822>
		if (!conn->tx_ctrl) {
    25d0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    25d4:	2a00      	cmp	r2, #0
    25d6:	d1de      	bne.n	2596 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x120e>
			tx->next = conn->tx_head;
    25d8:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    25da:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    25de:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    25e2:	e7df      	b.n	25a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x121c>
				(void)ll_pdu_rx_alloc();
    25e4:	f010 f958 	bl	12898 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    25e8:	2310      	movs	r3, #16
				rx->hdr.handle = lll->handle;
    25ea:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    25ec:	f887 801c 	strb.w	r8, [r7, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    25f0:	713b      	strb	r3, [r7, #4]
				upd->tx = lll->phy_tx;
    25f2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    25f6:	6838      	ldr	r0, [r7, #0]
				rx->hdr.handle = lll->handle;
    25f8:	80fa      	strh	r2, [r7, #6]
				upd->tx = lll->phy_tx;
    25fa:	f3c3 0302 	ubfx	r3, r3, #0, #3
    25fe:	777b      	strb	r3, [r7, #29]
				upd->rx = lll->phy_rx;
    2600:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2604:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2608:	77bb      	strb	r3, [r7, #30]
				ll_rx_put(rx->hdr.link, rx);
    260a:	4639      	mov	r1, r7
    260c:	f010 f916 	bl	1283c <ll_rx_put>
				ll_rx_sched();
    2610:	f010 f91e 	bl	12850 <ll_rx_sched>
    2614:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2618:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    261c:	f3c3 0882 	ubfx	r8, r3, #2, #3
    2620:	095b      	lsrs	r3, r3, #5
    2622:	f7ff b969 	b.w	18f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x570>
	switch (conn->llcp_conn_param.state) {
    2626:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
    262a:	f003 0307 	and.w	r3, r3, #7
    262e:	2b05      	cmp	r3, #5
    2630:	f200 81ad 	bhi.w	298e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1606>
    2634:	a201      	add	r2, pc, #4	; (adr r2, 263c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x12b4>)
    2636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    263a:	bf00      	nop
    263c:	00001dd5 	.word	0x00001dd5
    2640:	00001d53 	.word	0x00001d53
    2644:	00001d01 	.word	0x00001d01
    2648:	00000f47 	.word	0x00000f47
    264c:	00000f47 	.word	0x00000f47
    2650:	00000f47 	.word	0x00000f47
		conn->tx_data_last = tx;
    2654:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    2658:	f7fe bf78 	b.w	154c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c4>
    265c:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2660:	e4b4      	b.n	1fcc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc44>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2662:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    2666:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    266a:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    266e:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2670:	f363 0002 	bfi	r0, r3, #0, #3
    2674:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2678:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    267c:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2680:	f7ff ba15 	b.w	1aae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x726>
			tx->next = conn->tx_head->next;
    2684:	681a      	ldr	r2, [r3, #0]
    2686:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2688:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    268a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    268c:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2690:	f7fe bfe9 	b.w	1666 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2de>
		if (!conn->tx_ctrl) {
    2694:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2698:	2a00      	cmp	r2, #0
    269a:	f47f af53 	bne.w	2544 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11bc>
			tx->next = conn->tx_head;
    269e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    26a0:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26a4:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    26a8:	e753      	b.n	2552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11ca>
			tx->next = conn->tx_head->next;
    26aa:	681a      	ldr	r2, [r3, #0]
    26ac:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    26ae:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    26b0:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    26b2:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    26b6:	f7ff b94b 	b.w	1950 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c8>
		conn->tx_data_last = tx;
    26ba:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    26be:	e775      	b.n	25ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1224>
			tx->next = conn->tx_head->next;
    26c0:	6803      	ldr	r3, [r0, #0]
    26c2:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    26c4:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
    26c6:	6828      	ldr	r0, [r5, #0]
				conn->tx_ctrl_last = tx;
    26c8:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    26cc:	f7ff b8e5 	b.w	189a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x512>
    26d0:	00022b08 	.word	0x00022b08
    26d4:	00022c8c 	.word	0x00022c8c
    26d8:	00022678 	.word	0x00022678
    26dc:	200022d0 	.word	0x200022d0
    26e0:	000226e8 	.word	0x000226e8
		if (!conn->tx_ctrl) {
    26e4:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    26e8:	2900      	cmp	r1, #0
    26ea:	f47f ad37 	bne.w	215c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xdd4>
			tx->next = conn->tx_head;
    26ee:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
    26f0:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26f4:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
    26f8:	e537      	b.n	216a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde2>
		LL_ASSERT(rx && rx->hdr.link);
    26fa:	4aaf      	ldr	r2, [pc, #700]	; (29b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1630>)
    26fc:	49af      	ldr	r1, [pc, #700]	; (29bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1634>)
    26fe:	48b0      	ldr	r0, [pc, #704]	; (29c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1638>)
    2700:	f640 43f8 	movw	r3, #3320	; 0xcf8
    2704:	f01a f85d 	bl	1c7c2 <printk>
    2708:	4040      	eors	r0, r0
    270a:	f380 8811 	msr	BASEPRI, r0
    270e:	f04f 0003 	mov.w	r0, #3
    2712:	df02      	svc	2
    2714:	6838      	ldr	r0, [r7, #0]
    2716:	e4b6      	b.n	2086 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcfe>
			tx->next = conn->tx_head->next;
    2718:	681a      	ldr	r2, [r3, #0]
    271a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    271c:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    271e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2720:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2724:	f7ff ba3e 	b.w	1ba4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x81c>
			tx->next = conn->tx_head->next;
    2728:	681a      	ldr	r2, [r3, #0]
    272a:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    272c:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    272e:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2730:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2734:	f7fe bf07 	b.w	1546 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1be>
			if (!conn->llcp_length.cache.tx_octets) {
    2738:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    273c:	2a00      	cmp	r2, #0
    273e:	f040 80d9 	bne.w	28f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156c>
				conn->llcp_length.ack = conn->llcp_length.req;
    2742:	f884 7199 	strb.w	r7, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2746:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    274a:	e493      	b.n	2074 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcec>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    274c:	489d      	ldr	r0, [pc, #628]	; (29c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x163c>)
    274e:	f00c f9b7 	bl	eac0 <mem_acquire>
		if (!tx) {
    2752:	4601      	mov	r1, r0
    2754:	2800      	cmp	r0, #0
    2756:	f43f a82b 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    275a:	7903      	ldrb	r3, [r0, #4]
    275c:	f043 0303 	orr.w	r3, r3, #3
    2760:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2762:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2764:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2766:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2768:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    276a:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    276c:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    276e:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2772:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2774:	2200      	movs	r2, #0
    2776:	4620      	mov	r0, r4
    2778:	f010 feea 	bl	13550 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    277c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2780:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2784:	2300      	movs	r3, #0
    2786:	603b      	str	r3, [r7, #0]
    2788:	f7ff b812 	b.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
			tx->next = conn->tx_head->next;
    278c:	681a      	ldr	r2, [r3, #0]
    278e:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2792:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    2796:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    279a:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    279e:	e412      	b.n	1fc6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc3e>
			tx->next = conn->tx_head->next;
    27a0:	681a      	ldr	r2, [r3, #0]
    27a2:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    27a4:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    27a6:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    27aa:	f7ff b95b 	b.w	1a64 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6dc>
				LL_ASSERT(rx && rx->hdr.link);
    27ae:	4a82      	ldr	r2, [pc, #520]	; (29b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1630>)
    27b0:	4982      	ldr	r1, [pc, #520]	; (29bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1634>)
    27b2:	4883      	ldr	r0, [pc, #524]	; (29c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1638>)
    27b4:	f640 6337 	movw	r3, #3639	; 0xe37
    27b8:	f01a f803 	bl	1c7c2 <printk>
    27bc:	4040      	eors	r0, r0
    27be:	f380 8811 	msr	BASEPRI, r0
    27c2:	f04f 0003 	mov.w	r0, #3
    27c6:	df02      	svc	2
    27c8:	6828      	ldr	r0, [r5, #0]
    27ca:	e580      	b.n	22ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xf46>
		if (conn->llcp_phy.tx & BIT(1)) {
    27cc:	0708      	lsls	r0, r1, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    27ce:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    27d2:	f3c1 0382 	ubfx	r3, r1, #2, #3
    27d6:	f140 80a4 	bpl.w	2922 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x159a>
			conn->llcp_phy.tx = BIT(1);
    27da:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    27de:	2102      	movs	r1, #2
    27e0:	f361 0384 	bfi	r3, r1, #2, #3
    27e4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    27e8:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    27ec:	065f      	lsls	r7, r3, #25
    27ee:	ea4f 1153 	mov.w	r1, r3, lsr #5
    27f2:	f140 808e 	bpl.w	2912 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x158a>
			conn->llcp_phy.rx = BIT(1);
    27f6:	2102      	movs	r1, #2
    27f8:	f361 1347 	bfi	r3, r1, #5, #3
    27fc:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2800:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    2804:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2808:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    280c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    2810:	f3c1 0782 	ubfx	r7, r1, #2, #3
    2814:	f00c 0c07 	and.w	ip, ip, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2818:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    281c:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    2820:	45bc      	cmp	ip, r7
    2822:	bf08      	it	eq
    2824:	2700      	moveq	r7, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2826:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    2828:	ebb0 1f51 	cmp.w	r0, r1, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    282c:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    2830:	ea4f 1151 	mov.w	r1, r1, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    2834:	bf08      	it	eq
    2836:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    2838:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
		conn->llcp_ack -= 2U;
    283c:	3a02      	subs	r2, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    283e:	ea43 0387 	orr.w	r3, r3, r7, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    2842:	2106      	movs	r1, #6
		conn->llcp_ack -= 2U;
    2844:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    2848:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    284c:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    2850:	f7fe bba2 	b.w	f98 <ull_conn_llcp+0x80>
			tx->next = conn->tx_head->next;
    2854:	681a      	ldr	r2, [r3, #0]
    2856:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2858:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    285a:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    285e:	e6a1      	b.n	25a4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x121c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2860:	4858      	ldr	r0, [pc, #352]	; (29c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x163c>)
    2862:	f00c f92d 	bl	eac0 <mem_acquire>
	if (!tx) {
    2866:	4601      	mov	r1, r0
    2868:	2800      	cmp	r0, #0
    286a:	f43e afa1 	beq.w	17b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x428>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    286e:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2870:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2872:	f043 0303 	orr.w	r3, r3, #3
    2876:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    2878:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    287a:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    287e:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    2882:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    2886:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    2888:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    288c:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    288e:	2310      	movs	r3, #16
	rsp->latency =
    2890:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    2892:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    2894:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    2896:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    289a:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    289c:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    28a0:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    28a4:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    28a8:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    28ac:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    28b0:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    28b4:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    28b8:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    28bc:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    28c0:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    28c4:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    28c8:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    28cc:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    28d0:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    28d4:	4620      	mov	r0, r4
    28d6:	4642      	mov	r2, r8
    28d8:	f010 fe3a 	bl	13550 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    28dc:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    28e0:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    28e4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	conn_upd_curr = NULL;
    28e8:	f8c7 8000 	str.w	r8, [r7]
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    28ec:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
}
    28f0:	f7fe bb24 	b.w	f3c <ull_conn_llcp+0x24>
				conn->llcp_length.cache.tx_octets = 0;
    28f4:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    28f6:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    28fa:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    28fe:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2902:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2906:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    290a:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    290e:	f7ff bbb1 	b.w	2074 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcec>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    2912:	07c8      	lsls	r0, r1, #31
    2914:	d50f      	bpl.n	2936 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15ae>
			conn->llcp_phy.rx = BIT(0);
    2916:	2101      	movs	r1, #1
    2918:	f361 1347 	bfi	r3, r1, #5, #3
    291c:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2920:	e76e      	b.n	2800 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1478>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    2922:	07d9      	lsls	r1, r3, #31
    2924:	d510      	bpl.n	2948 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15c0>
			conn->llcp_phy.tx = BIT(0);
    2926:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    292a:	2101      	movs	r1, #1
    292c:	f361 0384 	bfi	r3, r1, #2, #3
    2930:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2934:	e758      	b.n	27e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1460>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    2936:	f011 0104 	ands.w	r1, r1, #4
			conn->llcp_phy.rx = BIT(2);
    293a:	bf18      	it	ne
    293c:	2104      	movne	r1, #4
			conn->llcp_phy.rx = 0U;
    293e:	f361 1347 	bfi	r3, r1, #5, #3
    2942:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    2946:	e75b      	b.n	2800 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1478>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    2948:	f013 0304 	ands.w	r3, r3, #4
    294c:	d018      	beq.n	2980 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x15f8>
			conn->llcp_phy.tx = BIT(2);
    294e:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    2952:	2104      	movs	r1, #4
    2954:	f361 0384 	bfi	r3, r1, #2, #3
    2958:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    295c:	e744      	b.n	27e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1460>
			tx->next = conn->tx_head->next;
    295e:	681a      	ldr	r2, [r3, #0]
    2960:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2962:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    2964:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2968:	e5f3      	b.n	2552 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x11ca>
				conn->llcp_conn_param.interval_max;
    296a:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    296e:	f7ff ba14 	b.w	1d9a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa12>
			tx->next = conn->tx_head->next;
    2972:	6811      	ldr	r1, [r2, #0]
    2974:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
    2976:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
    2978:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
    297c:	f7ff bbf5 	b.w	216a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xde2>
			conn->llcp_phy.tx = 0U;
    2980:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
    2984:	f363 0184 	bfi	r1, r3, #2, #3
    2988:	f884 11aa 	strb.w	r1, [r4, #426]	; 0x1aa
    298c:	e72c      	b.n	27e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1460>
		LL_ASSERT(0);
    298e:	f640 4324 	movw	r3, #3108	; 0xc24
    2992:	e58b      	b.n	24ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1124>
		LL_ASSERT(0);
    2994:	f44f 6352 	mov.w	r3, #3360	; 0xd20
    2998:	e588      	b.n	24ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1124>
    299a:	4a07      	ldr	r2, [pc, #28]	; (29b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1630>)
    299c:	490a      	ldr	r1, [pc, #40]	; (29c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1640>)
    299e:	4808      	ldr	r0, [pc, #32]	; (29c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1638>)
    29a0:	f44f 6352 	mov.w	r3, #3360	; 0xd20
    29a4:	f019 ff0d 	bl	1c7c2 <printk>
    29a8:	4040      	eors	r0, r0
    29aa:	f380 8811 	msr	BASEPRI, r0
    29ae:	f04f 0003 	mov.w	r0, #3
    29b2:	df02      	svc	2
		break;
    29b4:	f7fe baf0 	b.w	f98 <ull_conn_llcp+0x80>
    29b8:	00022b08 	.word	0x00022b08
    29bc:	00022c8c 	.word	0x00022c8c
    29c0:	00022678 	.word	0x00022678
    29c4:	200022d0 	.word	0x200022d0
    29c8:	000226e8 	.word	0x000226e8
    29cc:	00000000 	.word	0x00000000

000029d0 <ull_slave_setup>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param);
static void ticker_op_cb(uint32_t status, void *param);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    29d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	((struct lll_adv *)ftr->param)->conn = NULL;
    29d4:	f8d2 c000 	ldr.w	ip, [r2]
{
    29d8:	461d      	mov	r5, r3

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    29da:	f853 6b0c 	ldr.w	r6, [r3], #12
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    29de:	f8dc 9000 	ldr.w	r9, [ip]
{
    29e2:	b095      	sub	sp, #84	; 0x54
    29e4:	4617      	mov	r7, r2
	((struct lll_adv *)ftr->param)->conn = NULL;
    29e6:	2200      	movs	r2, #0
{
    29e8:	4686      	mov	lr, r0
	((struct lll_adv *)ftr->param)->conn = NULL;
    29ea:	f8cc 2008 	str.w	r2, [ip, #8]

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    29ee:	4618      	mov	r0, r3
{
    29f0:	460c      	mov	r4, r1
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    29f2:	2203      	movs	r2, #3
    29f4:	312e      	adds	r1, #46	; 0x2e
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    29f6:	f105 0a08 	add.w	sl, r5, #8
{
    29fa:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    29fe:	f105 081c 	add.w	r8, r5, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2a02:	f01c f9f6 	bl	1edf2 <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2a06:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    2a0a:	2204      	movs	r2, #4
    2a0c:	4650      	mov	r0, sl
    2a0e:	f01c f9f0 	bl	1edf2 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    2a12:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    2a16:	2205      	movs	r2, #5
    2a18:	4640      	mov	r0, r8
    2a1a:	f01c f9ea 	bl	1edf2 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2a1e:	4640      	mov	r0, r8
    2a20:	2105      	movs	r1, #5
    2a22:	f00c fa1b 	bl	ee5c <util_ones_count_get>
    2a26:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2a2a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2a2e:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2a32:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2a34:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2a38:	d90a      	bls.n	2a50 <ull_slave_setup+0x80>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2a3a:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
    2a3e:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2a42:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2a44:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2a48:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2a4a:	f885 1022 	strb.w	r1, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2a4e:	d902      	bls.n	2a56 <ull_slave_setup+0x86>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    2a50:	b015      	add	sp, #84	; 0x54
    2a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2a56:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
	lll->interval = interval;
    2a5a:	f8a5 8012 	strh.w	r8, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2a5e:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    2a62:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2a66:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2a6a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2a6e:	095b      	lsrs	r3, r3, #5
    2a70:	f363 0184 	bfi	r1, r3, #2, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2a74:	82aa      	strh	r2, [r5, #20]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2a76:	8e63      	ldrh	r3, [r4, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2a78:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2a7c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_conn_ppm_local_get() +
    2a80:	f015 ff80 	bl	18984 <lll_conn_ppm_local_get>
    2a84:	4603      	mov	r3, r0
		   lll_conn_ppm_get(conn->slave.sca)) *
    2a86:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
		(((lll_conn_ppm_local_get() +
    2a8a:	930b      	str	r3, [sp, #44]	; 0x2c
		   lll_conn_ppm_get(conn->slave.sca)) *
    2a8c:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2a90:	f015 ff7a 	bl	18988 <lll_conn_ppm_get>
		(((lll_conn_ppm_local_get() +
    2a94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2a96:	f8df c328 	ldr.w	ip, [pc, #808]	; 2dc0 <ull_slave_setup+0x3f0>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2a9a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2a9e:	8aaa      	ldrh	r2, [r5, #20]
	conn_interval_us = interval * 1250U;
    2aa0:	f240 4be2 	movw	fp, #1250	; 0x4e2
    2aa4:	fb0b f808 	mul.w	r8, fp, r8
		(((lll_conn_ppm_local_get() +
    2aa8:	4418      	add	r0, r3
		   lll_conn_ppm_get(conn->slave.sca)) *
    2aaa:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2aae:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2ab2:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2ab6:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2aba:	ea4f 0c58 	mov.w	ip, r8, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2abe:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2ac0:	fb0b f101 	mul.w	r1, fp, r1
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2ac4:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2ac8:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2aca:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    2ace:	63e9      	str	r1, [r5, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2ad0:	8f21      	ldrh	r1, [r4, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2ad2:	4bb1      	ldr	r3, [pc, #708]	; (2d98 <ull_slave_setup+0x3c8>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2ad4:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2ad8:	f242 7c10 	movw	ip, #10000	; 0x2710
    2adc:	fb0c 8101 	mla	r1, ip, r1, r8
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2ae0:	48ae      	ldr	r0, [pc, #696]	; (2d9c <ull_slave_setup+0x3cc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2ae2:	4443      	add	r3, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2ae4:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2ae8:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2aea:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2aee:	fbb1 f1f8 	udiv	r1, r1, r8
    2af2:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2af6:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2af8:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2afa:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2afc:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2b00:	fbb0 f0f8 	udiv	r0, r0, r8
    2b04:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2b08:	dd02      	ble.n	2b10 <ull_slave_setup+0x140>
			     (conn->apto_reload - (lll->latency + 6)) :
    2b0a:	1a89      	subs	r1, r1, r2
    2b0c:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2b0e:	b289      	uxth	r1, r1
    2b10:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    2b14:	2204      	movs	r2, #4
    2b16:	4651      	mov	r1, sl
    2b18:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    2b1c:	f01c f969 	bl	1edf2 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    2b20:	7f23      	ldrb	r3, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2b22:	f104 0a1e 	add.w	sl, r4, #30
    2b26:	4651      	mov	r1, sl
	peer_addr_type = pdu_adv->tx_addr;
    2b28:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2b2c:	2206      	movs	r2, #6
    2b2e:	a812      	add	r0, sp, #72	; 0x48
	peer_addr_type = pdu_adv->tx_addr;
    2b30:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2b34:	f01c f95d 	bl	1edf2 <memcpy>
	chan_sel = pdu_adv->chan_sel;
    2b38:	7f23      	ldrb	r3, [r4, #28]
	cc->status = 0U;
    2b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
    2b3e:	83a2      	strh	r2, [r4, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2b40:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    2b44:	f897 b012 	ldrb.w	fp, [r7, #18]
	chan_sel = pdu_adv->chan_sel;
    2b48:	f3c3 1240 	ubfx	r2, r3, #5, #1
    2b4c:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
    2b50:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2b52:	f014 fd41 	bl	175d8 <ull_filter_lll_lrpa_used>
    2b56:	4601      	mov	r1, r0
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2b58:	2206      	movs	r2, #6
    2b5a:	f104 002b 	add.w	r0, r4, #43	; 0x2b
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2b5e:	2900      	cmp	r1, #0
    2b60:	f040 80ed 	bne.w	2d3e <ull_slave_setup+0x36e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    2b64:	f01c f970 	bl	1ee48 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2b68:	f104 0325 	add.w	r3, r4, #37	; 0x25
    2b6c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2b70:	930e      	str	r3, [sp, #56]	; 0x38
    2b72:	f104 031f 	add.w	r3, r4, #31
    2b76:	f000 80eb 	beq.w	2d50 <ull_slave_setup+0x380>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    2b7a:	461a      	mov	r2, r3
    2b7c:	4651      	mov	r1, sl
    2b7e:	4658      	mov	r0, fp
    2b80:	f013 ffa2 	bl	16ac8 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2b84:	7fa2      	ldrb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2b86:	980e      	ldr	r0, [sp, #56]	; 0x38
		cc->peer_addr_type += 2;
    2b88:	3202      	adds	r2, #2
    2b8a:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    2b8c:	a912      	add	r1, sp, #72	; 0x48
    2b8e:	2206      	movs	r2, #6
    2b90:	f01c f92f 	bl	1edf2 <memcpy>
	cc->sca = conn->slave.sca;
    2b94:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    2b98:	8a69      	ldrh	r1, [r5, #18]
	cc->latency = lll->latency;
    2b9a:	8aaa      	ldrh	r2, [r5, #20]
    2b9c:	86a2      	strh	r2, [r4, #52]	; 0x34
	cc->sca = conn->slave.sca;
    2b9e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    2ba2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	cc->timeout = timeout;
    2ba6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
    2baa:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->interval = lll->interval;
    2bac:	8661      	strh	r1, [r4, #50]	; 0x32
	lll->handle = ll_conn_handle_get(conn);
    2bae:	4630      	mov	r0, r6
    2bb0:	f011 f82c 	bl	13c0c <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2bb4:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    2bb6:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    2bb8:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    2bba:	687c      	ldr	r4, [r7, #4]
		ll_rx_put(link, rx);
    2bbc:	980a      	ldr	r0, [sp, #40]	; 0x28
    2bbe:	f00f fe3d 	bl	1283c <ll_rx_put>
		rx->handle = lll->handle;
    2bc2:	8a2b      	ldrh	r3, [r5, #16]
    2bc4:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2bc6:	230f      	movs	r3, #15
    2bc8:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    2bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    2bcc:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    2bce:	2b00      	cmp	r3, #0
    2bd0:	f000 80ba 	beq.w	2d48 <ull_slave_setup+0x378>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2bd4:	f895 e009 	ldrb.w	lr, [r5, #9]
				      lll->access_addr[0];
    2bd8:	7a2b      	ldrb	r3, [r5, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2bda:	f895 c00b 	ldrb.w	ip, [r5, #11]
				      lll->access_addr[2];
    2bde:	7aa9      	ldrb	r1, [r5, #10]
			lll->data_chan_sel = 1;
    2be0:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    2be4:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    2be8:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    2bec:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    2bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    2bf2:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    2bf4:	846b      	strh	r3, [r5, #34]	; 0x22
			lll->data_chan_sel = 1;
    2bf6:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
			cs->csa = 0x01;
    2bfa:	7721      	strb	r1, [r4, #28]
	ll_rx_put(link, rx);
    2bfc:	4621      	mov	r1, r4
    2bfe:	f00f fe1d 	bl	1283c <ll_rx_put>
	ll_rx_sched();
    2c02:	f00f fe25 	bl	12850 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2c06:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    2c0a:	2101      	movs	r1, #1
    2c0c:	f000 0007 	and.w	r0, r0, #7
    2c10:	f015 f94c 	bl	17eac <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2c14:	4a62      	ldr	r2, [pc, #392]	; (2da0 <ull_slave_setup+0x3d0>)
	conn->evt.ticks_active_to_start = 0U;
    2c16:	f04f 0a00 	mov.w	sl, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2c1a:	4683      	mov	fp, r0
	conn->evt.ticks_xtal_to_start =
    2c1c:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2c1e:	f200 4052 	addw	r0, r0, #1106	; 0x452
    2c22:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    2c26:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    2c28:	e9c6 aa01 	strd	sl, sl, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2c2c:	a358      	add	r3, pc, #352	; (adr r3, 2d90 <ull_slave_setup+0x3c0>)
    2c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2c32:	f7fd fa55 	bl	e0 <__aeabi_uldivmod>
    2c36:	68fc      	ldr	r4, [r7, #12]
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2c38:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2c3c:	6aad      	ldr	r5, [r5, #40]	; 0x28
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    2c42:	f240 43e2 	movw	r3, #1250	; 0x4e2
    2c46:	fb03 3302 	mla	r3, r3, r2, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2c4a:	2102      	movs	r1, #2
    2c4c:	4652      	mov	r2, sl
	conn->evt.ticks_slot =
    2c4e:	60f0      	str	r0, [r6, #12]
    2c50:	f5a4 74ae 	sub.w	r4, r4, #348	; 0x15c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2c54:	2001      	movs	r0, #1
	conn_offset_us -= EVENT_JITTER_US;
    2c56:	441c      	add	r4, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2c58:	f00b ffd6 	bl	ec08 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2c5c:	4648      	mov	r0, r9
    2c5e:	f010 fb2b 	bl	132b8 <ull_adv_handle_get>
    2c62:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2c64:	4b4f      	ldr	r3, [pc, #316]	; (2da4 <ull_slave_setup+0x3d4>)
    2c66:	f8cd 9000 	str.w	r9, [sp]
    2c6a:	b2d2      	uxtb	r2, r2
    2c6c:	4650      	mov	r0, sl
    2c6e:	2101      	movs	r1, #1
    2c70:	f00d faa2 	bl	101b8 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2c74:	2801      	cmp	r0, #1
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2c76:	eba8 0805 	sub.w	r8, r8, r5
	conn_offset_us -= ready_delay_us;
    2c7a:	eba4 040b 	sub.w	r4, r4, fp
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2c7e:	d07f      	beq.n	2d80 <ull_slave_setup+0x3b0>
	if (adv->lll.is_hdcd) {
    2c80:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    2c84:	07db      	lsls	r3, r3, #31
    2c86:	d473      	bmi.n	2d70 <ull_slave_setup+0x3a0>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2c88:	4630      	mov	r0, r6
    2c8a:	f010 ffbf 	bl	13c0c <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2c8e:	f8df b110 	ldr.w	fp, [pc, #272]	; 2da0 <ull_slave_setup+0x3d0>
    2c92:	fba8 890b 	umull	r8, r9, r8, fp
    2c96:	a33e      	add	r3, pc, #248	; (adr r3, 2d90 <ull_slave_setup+0x3c0>)
    2c98:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2c9c:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2c9e:	4649      	mov	r1, r9
    2ca0:	4640      	mov	r0, r8
    2ca2:	f7fd fa1d 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2ca6:	4a40      	ldr	r2, [pc, #256]	; (2da8 <ull_slave_setup+0x3d8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2ca8:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2caa:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    2cae:	fbaa 2302 	umull	r2, r3, sl, r2
    2cb2:	2107      	movs	r1, #7
    2cb4:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cb8:	f240 113b 	movw	r1, #315	; 0x13b
    2cbc:	68bf      	ldr	r7, [r7, #8]
    2cbe:	9108      	str	r1, [sp, #32]
    2cc0:	493a      	ldr	r1, [pc, #232]	; (2dac <ull_slave_setup+0x3dc>)
    2cc2:	9107      	str	r1, [sp, #28]
    2cc4:	493a      	ldr	r1, [pc, #232]	; (2db0 <ull_slave_setup+0x3e0>)
    2cc6:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2cc8:	ebb8 0002 	subs.w	r0, r8, r2
    2ccc:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cd0:	68f3      	ldr	r3, [r6, #12]
    2cd2:	9304      	str	r3, [sp, #16]
    2cd4:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2cda:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cdc:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2cde:	f7fd f9ff 	bl	e0 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2ce2:	a32b      	add	r3, pc, #172	; (adr r3, 2d90 <ull_slave_setup+0x3c0>)
    2ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2ce8:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2cea:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cee:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2cf2:	f7fd f9f5 	bl	e0 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2cf6:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2cf8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2cfc:	b2ed      	uxtb	r5, r5
    2cfe:	3f31      	subs	r7, #49	; 0x31
    2d00:	463b      	mov	r3, r7
    2d02:	9000      	str	r0, [sp, #0]
    2d04:	462a      	mov	r2, r5
    2d06:	4630      	mov	r0, r6
    2d08:	2101      	movs	r1, #1
    2d0a:	f00d f9e9 	bl	100e0 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2d0e:	f030 0302 	bics.w	r3, r0, #2
    2d12:	d00c      	beq.n	2d2e <ull_slave_setup+0x35e>
    2d14:	4a27      	ldr	r2, [pc, #156]	; (2db4 <ull_slave_setup+0x3e4>)
    2d16:	4928      	ldr	r1, [pc, #160]	; (2db8 <ull_slave_setup+0x3e8>)
    2d18:	4828      	ldr	r0, [pc, #160]	; (2dbc <ull_slave_setup+0x3ec>)
    2d1a:	f44f 739e 	mov.w	r3, #316	; 0x13c
    2d1e:	f019 fd50 	bl	1c7c2 <printk>
    2d22:	4040      	eors	r0, r0
    2d24:	f380 8811 	msr	BASEPRI, r0
    2d28:	f04f 0003 	mov.w	r0, #3
    2d2c:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2d2e:	2201      	movs	r2, #1
    2d30:	4610      	mov	r0, r2
    2d32:	2102      	movs	r1, #2
    2d34:	f00b ff68 	bl	ec08 <mayfly_enable>
}
    2d38:	b015      	add	sp, #84	; 0x54
    2d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2d3e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2d42:	f01c f856 	bl	1edf2 <memcpy>
    2d46:	e70f      	b.n	2b68 <ull_slave_setup+0x198>
			cs->csa = 0x00;
    2d48:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2d4c:	7723      	strb	r3, [r4, #28]
    2d4e:	e755      	b.n	2bfc <ull_slave_setup+0x22c>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2d50:	980e      	ldr	r0, [sp, #56]	; 0x38
    2d52:	9311      	str	r3, [sp, #68]	; 0x44
    2d54:	2206      	movs	r2, #6
    2d56:	2100      	movs	r1, #0
    2d58:	f01c f876 	bl	1ee48 <memset>
		cc->peer_addr_type = peer_addr_type;
    2d5c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2d60:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    2d62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2d64:	a912      	add	r1, sp, #72	; 0x48
    2d66:	4618      	mov	r0, r3
    2d68:	2206      	movs	r2, #6
    2d6a:	f01c f842 	bl	1edf2 <memcpy>
    2d6e:	e711      	b.n	2b94 <ull_slave_setup+0x1c4>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    2d70:	2300      	movs	r3, #0
    2d72:	2201      	movs	r2, #1
    2d74:	9300      	str	r3, [sp, #0]
    2d76:	4618      	mov	r0, r3
    2d78:	4611      	mov	r1, r2
    2d7a:	f00d fa1d 	bl	101b8 <ticker_stop>
    2d7e:	e783      	b.n	2c88 <ull_slave_setup+0x2b8>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2d80:	f00f fe24 	bl	129cc <ull_disable_mark_get>
    2d84:	4581      	cmp	r9, r0
    2d86:	f43f af7b 	beq.w	2c80 <ull_slave_setup+0x2b0>
    2d8a:	f013 fc0d 	bl	165a8 <ticker_op_stop_adv_cb.part.0>
    2d8e:	e777      	b.n	2c80 <ull_slave_setup+0x2b0>
    2d90:	1afd498d 	.word	0x1afd498d
    2d94:	00000007 	.word	0x00000007
    2d98:	01c9c37f 	.word	0x01c9c37f
    2d9c:	026259ff 	.word	0x026259ff
    2da0:	3b9aca00 	.word	0x3b9aca00
    2da4:	000165d5 	.word	0x000165d5
    2da8:	1afd498d 	.word	0x1afd498d
    2dac:	00016579 	.word	0x00016579
    2db0:	000165f1 	.word	0x000165f1
    2db4:	00022d40 	.word	0x00022d40
    2db8:	00022be8 	.word	0x00022be8
    2dbc:	00022678 	.word	0x00022678
    2dc0:	431bde83 	.word	0x431bde83
    2dc4:	00000000 	.word	0x00000000

00002dc8 <ull_slave_done>:
{
    2dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	preamble_to_addr_us =
    2dcc:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    2dd0:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
				       window_widening_event_us +
    2dd4:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    2dd8:	3430      	adds	r4, #48	; 0x30
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    2dda:	45a0      	cmp	r8, r4
{
    2ddc:	460e      	mov	r6, r1
    2dde:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    2de0:	d818      	bhi.n	2e14 <ull_slave_done+0x4c>
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    2de2:	4f1b      	ldr	r7, [pc, #108]	; (2e50 <ull_slave_done+0x88>)
    2de4:	a318      	add	r3, pc, #96	; (adr r3, 2e48 <ull_slave_done+0x80>)
    2de6:	e9d3 2300 	ldrd	r2, r3, [r3]
    2dea:	fbac 0107 	umull	r0, r1, ip, r7
    2dee:	f7fd f977 	bl	e0 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    2df2:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    2df6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    2dfa:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    2dfc:	a312      	add	r3, pc, #72	; (adr r3, 2e48 <ull_slave_done+0x80>)
    2dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e02:	fba4 0107 	umull	r0, r1, r4, r7
    2e06:	f7fd f96b 	bl	e0 <__aeabi_uldivmod>
    2e0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    2e0e:	6028      	str	r0, [r5, #0]
}
    2e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    2e14:	4c0e      	ldr	r4, [pc, #56]	; (2e50 <ull_slave_done+0x88>)
    2e16:	a30c      	add	r3, pc, #48	; (adr r3, 2e48 <ull_slave_done+0x80>)
    2e18:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e1c:	fba8 0104 	umull	r0, r1, r8, r4
    2e20:	f7fd f95e 	bl	e0 <__aeabi_uldivmod>
    2e24:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2e28:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    2e2c:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    2e2e:	fba0 0104 	umull	r0, r1, r0, r4
    2e32:	a305      	add	r3, pc, #20	; (adr r3, 2e48 <ull_slave_done+0x80>)
    2e34:	e9d3 2300 	ldrd	r2, r3, [r3]
    2e38:	f7fd f952 	bl	e0 <__aeabi_uldivmod>
    2e3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    2e40:	6028      	str	r0, [r5, #0]
}
    2e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e46:	bf00      	nop
    2e48:	1afd498d 	.word	0x1afd498d
    2e4c:	00000007 	.word	0x00000007
    2e50:	3b9aca00 	.word	0x3b9aca00
    2e54:	00000000 	.word	0x00000000

00002e58 <erase_op>:
}

#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

static int erase_op(void *context)
{
    2e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e5c:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2e5e:	f01d ffc3 	bl	20de8 <nrfx_nvmc_flash_page_size_get>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	uint32_t ticks_begin = 0U;
	uint32_t ticks_diff;
	uint32_t i = 0U;

	if (e_ctx->enable_time_limit) {
    2e62:	7b25      	ldrb	r5, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    2e64:	4606      	mov	r6, r0
	if (e_ctx->enable_time_limit) {
    2e66:	b115      	cbz	r5, 2e6e <erase_op+0x16>
		ticks_begin = ticker_ticks_now_get();
    2e68:	f00d f9ec 	bl	10244 <ticker_ticks_now_get>
    2e6c:	4605      	mov	r5, r0
		if (e_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    2e6e:	f20f 0968 	addw	r9, pc, #104	; 0x68
    2e72:	e9d9 8900 	ldrd	r8, r9, [r9]
    2e76:	f8df b068 	ldr.w	fp, [pc, #104]	; 2ee0 <erase_op+0x88>
	uint32_t ticks_begin = 0U;
    2e7a:	f04f 0a00 	mov.w	sl, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
    2e7e:	6860      	ldr	r0, [r4, #4]
    2e80:	f018 f8bc 	bl	1affc <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
    2e84:	68a3      	ldr	r3, [r4, #8]
    2e86:	1b9b      	subs	r3, r3, r6
    2e88:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
    2e8a:	6863      	ldr	r3, [r4, #4]
    2e8c:	4433      	add	r3, r6
    2e8e:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
    2e90:	7b23      	ldrb	r3, [r4, #12]
		i++;
    2e92:	f10a 0a01 	add.w	sl, sl, #1
		if (e_ctx->enable_time_limit) {
    2e96:	b94b      	cbnz	r3, 2eac <erase_op+0x54>
				break;
			}
		}
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */

	} while (e_ctx->len > 0);
    2e98:	68a3      	ldr	r3, [r4, #8]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d1ef      	bne.n	2e7e <erase_op+0x26>

	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
    2e9e:	68a0      	ldr	r0, [r4, #8]
    2ea0:	3800      	subs	r0, #0
    2ea2:	bf18      	it	ne
    2ea4:	2001      	movne	r0, #1
}
    2ea6:	4240      	negs	r0, r0
    2ea8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    2eac:	f00d f9ca 	bl	10244 <ticker_ticks_now_get>
    2eb0:	4629      	mov	r1, r5
    2eb2:	f00d f9c9 	bl	10248 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    2eb6:	fbb0 f7fa 	udiv	r7, r0, sl
    2eba:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(e_ctx->slot)) {
    2ebc:	6960      	ldr	r0, [r4, #20]
    2ebe:	4642      	mov	r2, r8
    2ec0:	464b      	mov	r3, r9
    2ec2:	fba0 010b 	umull	r0, r1, r0, fp
    2ec6:	f7fd f90b 	bl	e0 <__aeabi_uldivmod>
    2eca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    2ece:	4287      	cmp	r7, r0
    2ed0:	d9e2      	bls.n	2e98 <erase_op+0x40>
    2ed2:	e7e4      	b.n	2e9e <erase_op+0x46>
    2ed4:	f3af 8000 	nop.w
    2ed8:	1afd498d 	.word	0x1afd498d
    2edc:	00000007 	.word	0x00000007
    2ee0:	3b9aca00 	.word	0x3b9aca00
    2ee4:	00000000 	.word	0x00000000

00002ee8 <work_in_time_slice>:
{
    2ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2eec:	b08f      	sub	sp, #60	; 0x3c
	struct flash_context *context = p_flash_op_desc->context;
    2eee:	f8d0 9004 	ldr.w	r9, [r0, #4]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2ef2:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 2fd8 <work_in_time_slice+0xf0>
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2ef6:	f10d 0137 	add.w	r1, sp, #55	; 0x37
{
    2efa:	4606      	mov	r6, r0
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    2efc:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2f00:	f00f fd12 	bl	12928 <ll_timeslice_ticker_id_get>
	err = ticker_start(instance_index,
    2f04:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
    2f08:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    2f0c:	930a      	str	r3, [sp, #40]	; 0x28
    2f0e:	f00d f999 	bl	10244 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2f12:	f8d9 4010 	ldr.w	r4, [r9, #16]
    2f16:	fba4 450b 	umull	r4, r5, r4, fp
    2f1a:	a329      	add	r3, pc, #164	; (adr r3, 2fc0 <work_in_time_slice+0xd8>)
    2f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2f20:	2700      	movs	r7, #0
    2f22:	4680      	mov	r8, r0
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2f24:	4629      	mov	r1, r5
    2f26:	4620      	mov	r0, r4
    2f28:	f7fd f8da 	bl	e0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2f2c:	e9cd 7707 	strd	r7, r7, [sp, #28]
    2f30:	4b25      	ldr	r3, [pc, #148]	; (2fc8 <work_in_time_slice+0xe0>)
    2f32:	9305      	str	r3, [sp, #20]
    2f34:	9606      	str	r6, [sp, #24]
			   HAL_TICKER_US_TO_TICKS(context->interval),
    2f36:	900b      	str	r0, [sp, #44]	; 0x2c
			   HAL_TICKER_US_TO_TICKS(context->slot),
    2f38:	f8d9 0014 	ldr.w	r0, [r9, #20]
    2f3c:	a320      	add	r3, pc, #128	; (adr r3, 2fc0 <work_in_time_slice+0xd8>)
    2f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2f42:	fba0 010b 	umull	r0, r1, r0, fp
    2f46:	f7fd f8cb 	bl	e0 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(context->interval),
    2f4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    2f4c:	f023 497f 	bic.w	r9, r3, #4278190080	; 0xff000000
    2f50:	4b1e      	ldr	r3, [pc, #120]	; (2fcc <work_in_time_slice+0xe4>)
	err = ticker_start(instance_index,
    2f52:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			   HAL_TICKER_REMAINDER(context->interval),
    2f56:	fba9 bc03 	umull	fp, ip, r9, r3
    2f5a:	2307      	movs	r3, #7
    2f5c:	fb03 cc09 	mla	ip, r3, r9, ip
	err = ticker_start(instance_index,
    2f60:	e9cd 7003 	strd	r7, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(context->interval),
    2f64:	ebb4 000b 	subs.w	r0, r4, fp
    2f68:	eb65 010c 	sbc.w	r1, r5, ip
    2f6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2f70:	2300      	movs	r3, #0
    2f72:	f7fd f8b5 	bl	e0 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2f76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f78:	9700      	str	r7, [sp, #0]
    2f7a:	e9cd 9001 	strd	r9, r0, [sp, #4]
    2f7e:	4643      	mov	r3, r8
    2f80:	2103      	movs	r1, #3
    2f82:	4650      	mov	r0, sl
    2f84:	f00d f8ac 	bl	100e0 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2f88:	f030 0402 	bics.w	r4, r0, #2
    2f8c:	d115      	bne.n	2fba <work_in_time_slice+0xd2>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    2f8e:	4a10      	ldr	r2, [pc, #64]	; (2fd0 <work_in_time_slice+0xe8>)
    2f90:	4810      	ldr	r0, [pc, #64]	; (2fd4 <work_in_time_slice+0xec>)
    2f92:	2300      	movs	r3, #0
    2f94:	f018 fefc 	bl	1bd90 <z_impl_k_sem_take>
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2f98:	b168      	cbz	r0, 2fb6 <work_in_time_slice+0xce>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    2f9a:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    2f9e:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    2fa2:	9400      	str	r4, [sp, #0]
    2fa4:	4623      	mov	r3, r4
    2fa6:	2103      	movs	r1, #3
    2fa8:	f00d f906 	bl	101b8 <ticker_stop>
		result = -ETIMEDOUT;
    2fac:	f06f 003b 	mvn.w	r0, #59	; 0x3b
}
    2fb0:	b00f      	add	sp, #60	; 0x3c
    2fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = p_flash_op_desc->result;
    2fb6:	68b0      	ldr	r0, [r6, #8]
    2fb8:	e7fa      	b.n	2fb0 <work_in_time_slice+0xc8>
		result = -ECANCELED;
    2fba:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    2fbe:	e7f7      	b.n	2fb0 <work_in_time_slice+0xc8>
    2fc0:	1afd498d 	.word	0x1afd498d
    2fc4:	00000007 	.word	0x00000007
    2fc8:	0001a71d 	.word	0x0001a71d
    2fcc:	1afd498d 	.word	0x1afd498d
    2fd0:	000b7b44 	.word	0x000b7b44
    2fd4:	20002a10 	.word	0x20002a10
    2fd8:	3b9aca00 	.word	0x3b9aca00
    2fdc:	00000000 	.word	0x00000000

00002fe0 <write_op>:
	w_ctx->data_addr += shift;
	w_ctx->len -= shift;
}

static int write_op(void *context)
{
    2fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
	uint32_t ticks_begin = 0U;
	uint32_t ticks_diff;
	uint32_t i = 1U;

	if (w_ctx->enable_time_limit) {
    2fe4:	7b05      	ldrb	r5, [r0, #12]
{
    2fe6:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
    2fe8:	b115      	cbz	r5, 2ff0 <write_op+0x10>
		ticks_begin = ticker_ticks_now_get();
    2fea:	f00d f92b 	bl	10244 <ticker_ticks_now_get>
    2fee:	4605      	mov	r5, r0
		if (w_ctx->enable_time_limit) {
			ticks_diff =
				ticker_ticks_diff_get(ticker_ticks_now_get(),
						      ticks_begin);
			if (ticks_diff + ticks_diff/i >
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    2ff0:	f20f 0980 	addw	r9, pc, #128	; 0x80
    2ff4:	e9d9 8900 	ldrd	r8, r9, [r9]
    2ff8:	f8df a080 	ldr.w	sl, [pc, #128]	; 307c <write_op+0x9c>
	uint32_t ticks_begin = 0U;
    2ffc:	2601      	movs	r6, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
    2ffe:	68a3      	ldr	r3, [r4, #8]
    3000:	2b03      	cmp	r3, #3
    3002:	d807      	bhi.n	3014 <write_op+0x34>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    3004:	4a1a      	ldr	r2, [pc, #104]	; (3070 <write_op+0x90>)
    3006:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    300a:	07db      	lsls	r3, r3, #31
    300c:	d5fb      	bpl.n	3006 <write_op+0x26>
		shift_write_context(w_ctx->len, w_ctx);
	}
#endif /* CONFIG_SOC_FLASH_NRF_EMULATE_ONE_BYTE_WRITE_ACCESS */
	nvmc_wait_ready();

	return FLASH_OP_DONE;
    300e:	2000      	movs	r0, #0
}
    3010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
    3014:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
    3016:	6860      	ldr	r0, [r4, #4]
    3018:	6819      	ldr	r1, [r3, #0]
    301a:	f018 f80f 	bl	1b03c <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
    301e:	6863      	ldr	r3, [r4, #4]
    3020:	3304      	adds	r3, #4
    3022:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
    3024:	6823      	ldr	r3, [r4, #0]
    3026:	3304      	adds	r3, #4
    3028:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
    302a:	68a3      	ldr	r3, [r4, #8]
    302c:	3b04      	subs	r3, #4
    302e:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
    3030:	7b23      	ldrb	r3, [r4, #12]
		i++;
    3032:	3601      	adds	r6, #1
		if (w_ctx->enable_time_limit) {
    3034:	2b00      	cmp	r3, #0
    3036:	d0e2      	beq.n	2ffe <write_op+0x1e>
				ticker_ticks_diff_get(ticker_ticks_now_get(),
    3038:	f00d f904 	bl	10244 <ticker_ticks_now_get>
    303c:	4629      	mov	r1, r5
    303e:	f00d f903 	bl	10248 <ticker_ticks_diff_get>
			if (ticks_diff + ticks_diff/i >
    3042:	fbb0 f7f6 	udiv	r7, r0, r6
    3046:	4407      	add	r7, r0
			    HAL_TICKER_US_TO_TICKS(w_ctx->slot)) {
    3048:	6960      	ldr	r0, [r4, #20]
    304a:	4642      	mov	r2, r8
    304c:	464b      	mov	r3, r9
    304e:	fba0 010a 	umull	r0, r1, r0, sl
    3052:	f7fd f845 	bl	e0 <__aeabi_uldivmod>
    3056:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			if (ticks_diff + ticks_diff/i >
    305a:	4287      	cmp	r7, r0
    305c:	d9cf      	bls.n	2ffe <write_op+0x1e>
    305e:	4a04      	ldr	r2, [pc, #16]	; (3070 <write_op+0x90>)
    3060:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
    3064:	07d9      	lsls	r1, r3, #31
    3066:	d5fb      	bpl.n	3060 <write_op+0x80>
				return FLASH_OP_ONGOING;
    3068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    306c:	e7d0      	b.n	3010 <write_op+0x30>
    306e:	bf00      	nop
    3070:	4001e000 	.word	0x4001e000
    3074:	1afd498d 	.word	0x1afd498d
    3078:	00000007 	.word	0x00000007
    307c:	3b9aca00 	.word	0x3b9aca00

00003080 <vnd_ccc_cfg_changed>:
static uint8_t indicating;
static struct bt_gatt_indicate_params ind_params;

static void vnd_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
	simulate_vnd = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    3080:	1e8b      	subs	r3, r1, #2
    3082:	4259      	negs	r1, r3
    3084:	4159      	adcs	r1, r3
    3086:	4b01      	ldr	r3, [pc, #4]	; (308c <vnd_ccc_cfg_changed+0xc>)
    3088:	7019      	strb	r1, [r3, #0]
}
    308a:	4770      	bx	lr
    308c:	20002ae3 	.word	0x20002ae3

00003090 <indicate_cb>:

static void indicate_cb(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			uint8_t err)
{
    3090:	b508      	push	{r3, lr}
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    3092:	4906      	ldr	r1, [pc, #24]	; (30ac <indicate_cb+0x1c>)
    3094:	4b06      	ldr	r3, [pc, #24]	; (30b0 <indicate_cb+0x20>)
    3096:	4807      	ldr	r0, [pc, #28]	; (30b4 <indicate_cb+0x24>)
    3098:	2a00      	cmp	r2, #0
    309a:	bf08      	it	eq
    309c:	4619      	moveq	r1, r3
    309e:	f019 fb90 	bl	1c7c2 <printk>
	indicating = 0U;
    30a2:	4b05      	ldr	r3, [pc, #20]	; (30b8 <indicate_cb+0x28>)
    30a4:	2200      	movs	r2, #0
    30a6:	701a      	strb	r2, [r3, #0]
}
    30a8:	bd08      	pop	{r3, pc}
    30aa:	bf00      	nop
    30ac:	000234b8 	.word	0x000234b8
    30b0:	000234bd 	.word	0x000234bd
    30b4:	000234c5 	.word	0x000234c5
    30b8:	20002ae2 	.word	0x20002ae2

000030bc <disconnected>:
	}
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
	printk("Disconnected (reason 0x%02x)\n", reason);
    30bc:	4801      	ldr	r0, [pc, #4]	; (30c4 <disconnected+0x8>)
    30be:	f019 bb80 	b.w	1c7c2 <printk>
    30c2:	bf00      	nop
    30c4:	000234d4 	.word	0x000234d4

000030c8 <connected>:
	if (err) {
    30c8:	b111      	cbz	r1, 30d0 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    30ca:	4803      	ldr	r0, [pc, #12]	; (30d8 <connected+0x10>)
    30cc:	f019 bb79 	b.w	1c7c2 <printk>
		printk("Connected\n");
    30d0:	4802      	ldr	r0, [pc, #8]	; (30dc <connected+0x14>)
    30d2:	f019 bb76 	b.w	1c7c2 <printk>
    30d6:	bf00      	nop
    30d8:	000234f2 	.word	0x000234f2
    30dc:	00023512 	.word	0x00023512

000030e0 <bt_addr_le_to_str.constprop.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    30e0:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    30e2:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    30e4:	b08a      	sub	sp, #40	; 0x28
    30e6:	4604      	mov	r4, r0
    30e8:	460e      	mov	r6, r1
    30ea:	ad07      	add	r5, sp, #28
    30ec:	2b03      	cmp	r3, #3
    30ee:	d820      	bhi.n	3132 <bt_addr_le_to_str.constprop.0+0x52>
    30f0:	e8df f003 	tbb	[pc, r3]
    30f4:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    30f8:	4911      	ldr	r1, [pc, #68]	; (3140 <bt_addr_le_to_str.constprop.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    30fa:	4628      	mov	r0, r5
    30fc:	f01b fe2a 	bl	1ed54 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    3100:	7863      	ldrb	r3, [r4, #1]
    3102:	9304      	str	r3, [sp, #16]
    3104:	78a3      	ldrb	r3, [r4, #2]
    3106:	9303      	str	r3, [sp, #12]
    3108:	78e3      	ldrb	r3, [r4, #3]
    310a:	9302      	str	r3, [sp, #8]
    310c:	7923      	ldrb	r3, [r4, #4]
    310e:	9301      	str	r3, [sp, #4]
    3110:	7963      	ldrb	r3, [r4, #5]
    3112:	9300      	str	r3, [sp, #0]
    3114:	4a0b      	ldr	r2, [pc, #44]	; (3144 <bt_addr_le_to_str.constprop.0+0x64>)
    3116:	79a3      	ldrb	r3, [r4, #6]
    3118:	9505      	str	r5, [sp, #20]
    311a:	211e      	movs	r1, #30
    311c:	4630      	mov	r0, r6
    311e:	f019 fb5d 	bl	1c7dc <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    3122:	b00a      	add	sp, #40	; 0x28
    3124:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    3126:	4908      	ldr	r1, [pc, #32]	; (3148 <bt_addr_le_to_str.constprop.0+0x68>)
    3128:	e7e7      	b.n	30fa <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "public-id");
    312a:	4908      	ldr	r1, [pc, #32]	; (314c <bt_addr_le_to_str.constprop.0+0x6c>)
    312c:	e7e5      	b.n	30fa <bt_addr_le_to_str.constprop.0+0x1a>
		strcpy(type, "random-id");
    312e:	4908      	ldr	r1, [pc, #32]	; (3150 <bt_addr_le_to_str.constprop.0+0x70>)
    3130:	e7e3      	b.n	30fa <bt_addr_le_to_str.constprop.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    3132:	4a08      	ldr	r2, [pc, #32]	; (3154 <bt_addr_le_to_str.constprop.0+0x74>)
    3134:	210a      	movs	r1, #10
    3136:	4628      	mov	r0, r5
    3138:	f019 fb50 	bl	1c7dc <snprintk>
		break;
    313c:	e7e0      	b.n	3100 <bt_addr_le_to_str.constprop.0+0x20>
    313e:	bf00      	nop
    3140:	0002351d 	.word	0x0002351d
    3144:	0002353f 	.word	0x0002353f
    3148:	00023524 	.word	0x00023524
    314c:	0002352b 	.word	0x0002352b
    3150:	00023535 	.word	0x00023535
    3154:	0002540d 	.word	0x0002540d

00003158 <auth_passkey_display>:

	printk("Advertising successfully started\n");
}

static void auth_passkey_display(struct bt_conn *conn, unsigned int passkey)
{
    3158:	b510      	push	{r4, lr}
    315a:	b088      	sub	sp, #32
    315c:	460c      	mov	r4, r1
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    315e:	f01c f9dd 	bl	1f51c <bt_conn_get_dst>
    3162:	4669      	mov	r1, sp
    3164:	f7ff ffbc 	bl	30e0 <bt_addr_le_to_str.constprop.0>

	printk("Passkey for %s: %06u\n", addr, passkey);
    3168:	4803      	ldr	r0, [pc, #12]	; (3178 <auth_passkey_display+0x20>)
    316a:	4622      	mov	r2, r4
    316c:	4669      	mov	r1, sp
    316e:	f019 fb28 	bl	1c7c2 <printk>
}
    3172:	b008      	add	sp, #32
    3174:	bd10      	pop	{r4, pc}
    3176:	bf00      	nop
    3178:	00023562 	.word	0x00023562

0000317c <auth_cancel>:

static void auth_cancel(struct bt_conn *conn)
{
    317c:	b500      	push	{lr}
    317e:	b089      	sub	sp, #36	; 0x24
	char addr[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    3180:	f01c f9cc 	bl	1f51c <bt_conn_get_dst>
    3184:	4669      	mov	r1, sp
    3186:	f7ff ffab 	bl	30e0 <bt_addr_le_to_str.constprop.0>

	printk("Pairing cancelled: %s\n", addr);
    318a:	4803      	ldr	r0, [pc, #12]	; (3198 <auth_cancel+0x1c>)
    318c:	4669      	mov	r1, sp
    318e:	f019 fb18 	bl	1c7c2 <printk>
}
    3192:	b009      	add	sp, #36	; 0x24
    3194:	f85d fb04 	ldr.w	pc, [sp], #4
    3198:	00023578 	.word	0x00023578

0000319c <main>:

	bt_gatt_hrs_notify(heartrate);
}

void main(void)
{
    319c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int err;

	err = bt_enable(NULL);
    31a0:	2000      	movs	r0, #0
{
    31a2:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    31a4:	f005 fb8a 	bl	88bc <bt_enable>
	if (err) {
    31a8:	4606      	mov	r6, r0
    31aa:	b130      	cbz	r0, 31ba <main+0x1e>
		printk("Bluetooth init failed (err %d)\n", err);
    31ac:	4601      	mov	r1, r0
    31ae:	482f      	ldr	r0, [pc, #188]	; (326c <main+0xd0>)
    31b0:	f019 fb07 	bl	1c7c2 <printk>
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
				indicating = 1U;
			}
		}
	}
}
    31b4:	b008      	add	sp, #32
    31b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    31ba:	4d2d      	ldr	r5, [pc, #180]	; (3270 <main+0xd4>)
	printk("Bluetooth initialized\n");
    31bc:	482d      	ldr	r0, [pc, #180]	; (3274 <main+0xd8>)
    31be:	f019 fb00 	bl	1c7c2 <printk>
	cts_init();
    31c2:	f000 f887 	bl	32d4 <cts_init>
		settings_load();
    31c6:	f01a fae8 	bl	1d79a <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    31ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    31cc:	ac03      	add	r4, sp, #12
    31ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    31d0:	682b      	ldr	r3, [r5, #0]
    31d2:	6023      	str	r3, [r4, #0]
    31d4:	4928      	ldr	r1, [pc, #160]	; (3278 <main+0xdc>)
    31d6:	9600      	str	r6, [sp, #0]
    31d8:	4633      	mov	r3, r6
    31da:	2203      	movs	r2, #3
    31dc:	a803      	add	r0, sp, #12
    31de:	f01c f8b3 	bl	1f348 <bt_le_adv_start>
	if (err) {
    31e2:	4601      	mov	r1, r0
    31e4:	2800      	cmp	r0, #0
    31e6:	d03d      	beq.n	3264 <main+0xc8>
		printk("Advertising failed to start (err %d)\n", err);
    31e8:	4824      	ldr	r0, [pc, #144]	; (327c <main+0xe0>)
    31ea:	f019 faea 	bl	1c7c2 <printk>
	bt_conn_cb_register(&conn_callbacks);
    31ee:	4824      	ldr	r0, [pc, #144]	; (3280 <main+0xe4>)
	heartrate++;
    31f0:	4c24      	ldr	r4, [pc, #144]	; (3284 <main+0xe8>)
		if (simulate_vnd) {
    31f2:	4d25      	ldr	r5, [pc, #148]	; (3288 <main+0xec>)
	bt_conn_cb_register(&conn_callbacks);
    31f4:	f006 fadc 	bl	97b0 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    31f8:	4824      	ldr	r0, [pc, #144]	; (328c <main+0xf0>)
    31fa:	f006 ff49 	bl	a090 <bt_conn_auth_cb_register>
    31fe:	4626      	mov	r6, r4
	return z_impl_k_sleep(timeout);
    3200:	2100      	movs	r1, #0
    3202:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3206:	f018 fd77 	bl	1bcf8 <z_impl_k_sleep>
		cts_notify();
    320a:	f000 f881 	bl	3310 <cts_notify>
	heartrate++;
    320e:	7823      	ldrb	r3, [r4, #0]
    3210:	3301      	adds	r3, #1
    3212:	b2db      	uxtb	r3, r3
	if (heartrate == 160U) {
    3214:	2ba0      	cmp	r3, #160	; 0xa0
		heartrate = 90U;
    3216:	bf08      	it	eq
    3218:	235a      	moveq	r3, #90	; 0x5a
    321a:	7023      	strb	r3, [r4, #0]
	bt_gatt_hrs_notify(heartrate);
    321c:	7830      	ldrb	r0, [r6, #0]
    321e:	f001 f979 	bl	4514 <bt_gatt_hrs_notify>
	uint8_t battery_level = bt_gatt_bas_get_battery_level();
    3222:	f001 f919 	bl	4458 <bt_gatt_bas_get_battery_level>
	battery_level--;
    3226:	3801      	subs	r0, #1
		battery_level = 100U;
    3228:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	bt_gatt_bas_set_battery_level(battery_level);
    322c:	bf08      	it	eq
    322e:	2064      	moveq	r0, #100	; 0x64
    3230:	f001 f918 	bl	4464 <bt_gatt_bas_set_battery_level>
		if (simulate_vnd) {
    3234:	782b      	ldrb	r3, [r5, #0]
    3236:	2b00      	cmp	r3, #0
    3238:	d0e2      	beq.n	3200 <main+0x64>
			if (indicating) {
    323a:	4f15      	ldr	r7, [pc, #84]	; (3290 <main+0xf4>)
    323c:	7838      	ldrb	r0, [r7, #0]
    323e:	2800      	cmp	r0, #0
    3240:	d1de      	bne.n	3200 <main+0x64>
			ind_params.attr = &vnd_svc.attrs[2];
    3242:	4914      	ldr	r1, [pc, #80]	; (3294 <main+0xf8>)
    3244:	4b14      	ldr	r3, [pc, #80]	; (3298 <main+0xfc>)
    3246:	604b      	str	r3, [r1, #4]
			ind_params.func = indicate_cb;
    3248:	4b14      	ldr	r3, [pc, #80]	; (329c <main+0x100>)
			ind_params.len = sizeof(indicating);
    324a:	f04f 0801 	mov.w	r8, #1
			ind_params.data = &indicating;
    324e:	e9c1 3702 	strd	r3, r7, [r1, #8]
			ind_params.len = sizeof(indicating);
    3252:	f8a1 8010 	strh.w	r8, [r1, #16]
			if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    3256:	f009 fa5d 	bl	c714 <bt_gatt_indicate>
    325a:	2800      	cmp	r0, #0
    325c:	d1d0      	bne.n	3200 <main+0x64>
				indicating = 1U;
    325e:	f887 8000 	strb.w	r8, [r7]
    3262:	e7cd      	b.n	3200 <main+0x64>
	printk("Advertising successfully started\n");
    3264:	480e      	ldr	r0, [pc, #56]	; (32a0 <main+0x104>)
    3266:	f019 faac 	bl	1c7c2 <printk>
    326a:	e7c0      	b.n	31ee <main+0x52>
    326c:	0002358f 	.word	0x0002358f
    3270:	00021c20 	.word	0x00021c20
    3274:	000235af 	.word	0x000235af
    3278:	00021ce8 	.word	0x00021ce8
    327c:	000235c6 	.word	0x000235c6
    3280:	20000204 	.word	0x20000204
    3284:	200007c1 	.word	0x200007c1
    3288:	20002ae3 	.word	0x20002ae3
    328c:	200001e0 	.word	0x200001e0
    3290:	20002ae2 	.word	0x20002ae2
    3294:	20001348 	.word	0x20001348
    3298:	00021d28 	.word	0x00021d28
    329c:	00003091 	.word	0x00003091
    32a0:	000235ec 	.word	0x000235ec

000032a4 <write_ct>:
}

static ssize_t write_ct(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset,
			uint8_t flags)
{
    32a4:	b538      	push	{r3, r4, r5, lr}
    32a6:	460c      	mov	r4, r1
    32a8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
    32ac:	68e5      	ldr	r5, [r4, #12]

	if (offset + len > sizeof(ct)) {
    32ae:	461c      	mov	r4, r3
    32b0:	18c3      	adds	r3, r0, r3
    32b2:	2b0a      	cmp	r3, #10
{
    32b4:	4611      	mov	r1, r2
	if (offset + len > sizeof(ct)) {
    32b6:	dc08      	bgt.n	32ca <write_ct+0x26>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	memcpy(value + offset, buf, len);
    32b8:	4622      	mov	r2, r4
    32ba:	4428      	add	r0, r5
    32bc:	f01b fd99 	bl	1edf2 <memcpy>
	ct_update = 1U;
    32c0:	4b03      	ldr	r3, [pc, #12]	; (32d0 <write_ct+0x2c>)
    32c2:	2201      	movs	r2, #1
    32c4:	701a      	strb	r2, [r3, #0]

	return len;
}
    32c6:	4620      	mov	r0, r4
    32c8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    32ca:	f06f 0406 	mvn.w	r4, #6
    32ce:	e7fa      	b.n	32c6 <write_ct+0x22>
    32d0:	20002aee 	.word	0x20002aee

000032d4 <cts_init>:
	/* Adjust reason */
	buf[9] = 0U; /* No update, change, etc */
}

void cts_init(void)
{
    32d4:	b513      	push	{r0, r1, r4, lr}
	memcpy(buf,  &year, 2); /* year */
    32d6:	4c0d      	ldr	r4, [pc, #52]	; (330c <cts_init+0x38>)
	year = sys_cpu_to_le16(2015);
    32d8:	f240 73df 	movw	r3, #2015	; 0x7df
	memcpy(buf,  &year, 2); /* year */
    32dc:	2202      	movs	r2, #2
    32de:	f10d 0106 	add.w	r1, sp, #6
    32e2:	4620      	mov	r0, r4
	year = sys_cpu_to_le16(2015);
    32e4:	f8ad 3006 	strh.w	r3, [sp, #6]
	memcpy(buf,  &year, 2); /* year */
    32e8:	f01b fd83 	bl	1edf2 <memcpy>
	buf[2] = 5U; /* months starting from 1 */
    32ec:	2305      	movs	r3, #5
    32ee:	70a3      	strb	r3, [r4, #2]
	buf[3] = 30U; /* day */
    32f0:	231e      	movs	r3, #30
    32f2:	70e3      	strb	r3, [r4, #3]
	buf[4] = 12U; /* hours */
    32f4:	220c      	movs	r2, #12
	buf[6] = 30U; /* seconds */
    32f6:	71a3      	strb	r3, [r4, #6]
	buf[7] = 1U; /* day of week starting from 1 */
    32f8:	2301      	movs	r3, #1
	buf[4] = 12U; /* hours */
    32fa:	7122      	strb	r2, [r4, #4]
	buf[7] = 1U; /* day of week starting from 1 */
    32fc:	71e3      	strb	r3, [r4, #7]
	buf[5] = 45U; /* minutes */
    32fe:	222d      	movs	r2, #45	; 0x2d
	buf[8] = 0U;
    3300:	2300      	movs	r3, #0
	buf[5] = 45U; /* minutes */
    3302:	7162      	strb	r2, [r4, #5]
	buf[8] = 0U;
    3304:	7223      	strb	r3, [r4, #8]
	buf[9] = 0U; /* No update, change, etc */
    3306:	7263      	strb	r3, [r4, #9]
	/* Simulate current time for Current Time Service */
	generate_current_time(ct);
}
    3308:	b002      	add	sp, #8
    330a:	bd10      	pop	{r4, pc}
    330c:	20002ae4 	.word	0x20002ae4

00003310 <cts_notify>:

void cts_notify(void)
{	/* Current Time Service updates only when time is changed */
    3310:	b510      	push	{r4, lr}
	if (!ct_update) {
    3312:	4b0c      	ldr	r3, [pc, #48]	; (3344 <cts_notify+0x34>)
    3314:	781a      	ldrb	r2, [r3, #0]
{	/* Current Time Service updates only when time is changed */
    3316:	b086      	sub	sp, #24
	if (!ct_update) {
    3318:	b18a      	cbz	r2, 333e <cts_notify+0x2e>
		return;
	}

	ct_update = 0U;
    331a:	2400      	movs	r4, #0
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    331c:	4621      	mov	r1, r4
    331e:	2218      	movs	r2, #24
    3320:	4668      	mov	r0, sp
    3322:	701c      	strb	r4, [r3, #0]
    3324:	f01b fd90 	bl	1ee48 <memset>

	params.attr = attr;
    3328:	4b07      	ldr	r3, [pc, #28]	; (3348 <cts_notify+0x38>)
    332a:	9301      	str	r3, [sp, #4]
	params.data = data;
    332c:	4b07      	ldr	r3, [pc, #28]	; (334c <cts_notify+0x3c>)
    332e:	9302      	str	r3, [sp, #8]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    3330:	4669      	mov	r1, sp
	params.len = len;
    3332:	230a      	movs	r3, #10
	return bt_gatt_notify_cb(conn, &params);
    3334:	4620      	mov	r0, r4
	params.len = len;
    3336:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    333a:	f009 f96f 	bl	c61c <bt_gatt_notify_cb>
	bt_gatt_notify(NULL, &cts_cvs.attrs[1], &ct, sizeof(ct));
}
    333e:	b006      	add	sp, #24
    3340:	bd10      	pop	{r4, pc}
    3342:	bf00      	nop
    3344:	20002aee 	.word	0x20002aee
    3348:	00021e18 	.word	0x00021e18
    334c:	20002ae4 	.word	0x20002ae4

00003350 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    3350:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3352:	4c0a      	ldr	r4, [pc, #40]	; (337c <crc8_ccitt+0x2c>)
    3354:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    3356:	4291      	cmp	r1, r2
    3358:	d100      	bne.n	335c <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    335a:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    335c:	f811 3b01 	ldrb.w	r3, [r1], #1
    3360:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    3362:	0903      	lsrs	r3, r0, #4
    3364:	5ce3      	ldrb	r3, [r4, r3]
    3366:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    336a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    336c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3370:	5ce0      	ldrb	r0, [r4, r3]
    3372:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    3376:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    3378:	e7ed      	b.n	3356 <crc8_ccitt+0x6>
    337a:	bf00      	nop
    337c:	00023641 	.word	0x00023641

00003380 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
    3380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3384:	b087      	sub	sp, #28
    3386:	460f      	mov	r7, r1
    3388:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    338a:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
    338c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
    3390:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
    3394:	4c1f      	ldr	r4, [pc, #124]	; (3414 <print_digits+0x94>)
{
    3396:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    3398:	2514      	movs	r5, #20
{
    339a:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
    339c:	4698      	mov	r8, r3
    339e:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    33a2:	ea50 0301 	orrs.w	r3, r0, r1
    33a6:	d119      	bne.n	33dc <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
    33a8:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    33aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
    33ac:	bf14      	ite	ne
    33ae:	3501      	addne	r5, #1
		buf[i] = '0';
    33b0:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    33b2:	442c      	add	r4, r5
		buf[i] = '0';
    33b4:	bf08      	it	eq
    33b6:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    33ba:	2c15      	cmp	r4, #21
    33bc:	d01b      	beq.n	33f6 <print_digits+0x76>
    33be:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
    33c0:	2c00      	cmp	r4, #0
    33c2:	dc1a      	bgt.n	33fa <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
    33c4:	f81d 0005 	ldrb.w	r0, [sp, r5]
    33c8:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
    33ca:	3501      	adds	r5, #1
		out(buf[i], ctx);
    33cc:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    33ce:	2d15      	cmp	r5, #21
    33d0:	d1f8      	bne.n	33c4 <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
    33d2:	2c00      	cmp	r4, #0
    33d4:	dc19      	bgt.n	340a <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
    33d6:	b007      	add	sp, #28
    33d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
    33dc:	4642      	mov	r2, r8
    33de:	464b      	mov	r3, r9
    33e0:	f7fc fe7e 	bl	e0 <__aeabi_uldivmod>
    33e4:	5ca2      	ldrb	r2, [r4, r2]
    33e6:	f80d 2005 	strb.w	r2, [sp, r5]
    33ea:	4684      	mov	ip, r0
    33ec:	460b      	mov	r3, r1
		num /= base;
    33ee:	4660      	mov	r0, ip
    33f0:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
    33f2:	3d01      	subs	r5, #1
    33f4:	e7d5      	b.n	33a2 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
    33f6:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
    33f8:	e7e4      	b.n	33c4 <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
    33fa:	f1bb 0f00 	cmp.w	fp, #0
    33fe:	d0e1      	beq.n	33c4 <print_digits+0x44>
		out(pad_char, ctx);
    3400:	4639      	mov	r1, r7
    3402:	4650      	mov	r0, sl
    3404:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    3406:	3c01      	subs	r4, #1
    3408:	e7da      	b.n	33c0 <print_digits+0x40>
		out(pad_char, ctx);
    340a:	4639      	mov	r1, r7
    340c:	4650      	mov	r0, sl
    340e:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    3410:	3c01      	subs	r4, #1
    3412:	e7de      	b.n	33d2 <print_digits+0x52>
    3414:	00023651 	.word	0x00023651

00003418 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3418:	680b      	ldr	r3, [r1, #0]
    341a:	3301      	adds	r3, #1
    341c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    341e:	4b01      	ldr	r3, [pc, #4]	; (3424 <char_out+0xc>)
    3420:	681b      	ldr	r3, [r3, #0]
    3422:	4718      	bx	r3
    3424:	20000240 	.word	0x20000240

00003428 <__printk_hook_install>:
	_char_out = fn;
    3428:	4b01      	ldr	r3, [pc, #4]	; (3430 <__printk_hook_install+0x8>)
    342a:	6018      	str	r0, [r3, #0]
}
    342c:	4770      	bx	lr
    342e:	bf00      	nop
    3430:	20000240 	.word	0x20000240

00003434 <z_vprintk>:
{
    3434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    3438:	2600      	movs	r6, #0
{
    343a:	b087      	sub	sp, #28
    343c:	4605      	mov	r5, r0
    343e:	468b      	mov	fp, r1
    3440:	461c      	mov	r4, r3
	while (*fmt) {
    3442:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
    3446:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    344a:	4637      	mov	r7, r6
			might_format = 0;
    344c:	2300      	movs	r3, #0
					break;
    344e:	e007      	b.n	3460 <z_vprintk+0x2c>
		if (!might_format) {
    3450:	b96b      	cbnz	r3, 346e <z_vprintk+0x3a>
			if (*fmt != '%') {
    3452:	2825      	cmp	r0, #37	; 0x25
    3454:	f000 80fc 	beq.w	3650 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
    3458:	4659      	mov	r1, fp
    345a:	9304      	str	r3, [sp, #16]
    345c:	47a8      	blx	r5
    345e:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
    3460:	f819 0f01 	ldrb.w	r0, [r9, #1]!
    3464:	2800      	cmp	r0, #0
    3466:	d1f3      	bne.n	3450 <z_vprintk+0x1c>
}
    3468:	b007      	add	sp, #28
    346a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    346e:	287a      	cmp	r0, #122	; 0x7a
    3470:	d80a      	bhi.n	3488 <z_vprintk+0x54>
    3472:	2862      	cmp	r0, #98	; 0x62
    3474:	d810      	bhi.n	3498 <z_vprintk+0x64>
    3476:	2830      	cmp	r0, #48	; 0x30
    3478:	d052      	beq.n	3520 <z_vprintk+0xec>
    347a:	d845      	bhi.n	3508 <z_vprintk+0xd4>
    347c:	2825      	cmp	r0, #37	; 0x25
    347e:	f000 80e5 	beq.w	364c <z_vprintk+0x218>
    3482:	282d      	cmp	r0, #45	; 0x2d
    3484:	f000 80ea 	beq.w	365c <z_vprintk+0x228>
					out((int)'%', ctx);
    3488:	4659      	mov	r1, fp
    348a:	2025      	movs	r0, #37	; 0x25
    348c:	47a8      	blx	r5
					out((int)*fmt, ctx);
    348e:	f899 0000 	ldrb.w	r0, [r9]
    3492:	4659      	mov	r1, fp
    3494:	47a8      	blx	r5
    3496:	e7d9      	b.n	344c <z_vprintk+0x18>
    3498:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
    349c:	2a17      	cmp	r2, #23
    349e:	d8f3      	bhi.n	3488 <z_vprintk+0x54>
    34a0:	a101      	add	r1, pc, #4	; (adr r1, 34a8 <z_vprintk+0x74>)
    34a2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    34a6:	bf00      	nop
    34a8:	00003645 	.word	0x00003645
    34ac:	00003569 	.word	0x00003569
    34b0:	00003489 	.word	0x00003489
    34b4:	00003489 	.word	0x00003489
    34b8:	00003489 	.word	0x00003489
    34bc:	0000354b 	.word	0x0000354b
    34c0:	00003569 	.word	0x00003569
    34c4:	00003489 	.word	0x00003489
    34c8:	00003489 	.word	0x00003489
    34cc:	0000354b 	.word	0x0000354b
    34d0:	00003489 	.word	0x00003489
    34d4:	00003489 	.word	0x00003489
    34d8:	00003489 	.word	0x00003489
    34dc:	000035cd 	.word	0x000035cd
    34e0:	00003489 	.word	0x00003489
    34e4:	00003489 	.word	0x00003489
    34e8:	0000360f 	.word	0x0000360f
    34ec:	00003489 	.word	0x00003489
    34f0:	00003569 	.word	0x00003569
    34f4:	00003489 	.word	0x00003489
    34f8:	00003489 	.word	0x00003489
    34fc:	00003511 	.word	0x00003511
    3500:	00003489 	.word	0x00003489
    3504:	0000354b 	.word	0x0000354b
			switch (*fmt) {
    3508:	2839      	cmp	r0, #57	; 0x39
    350a:	d915      	bls.n	3538 <z_vprintk+0x104>
    350c:	2858      	cmp	r0, #88	; 0x58
    350e:	d1bb      	bne.n	3488 <z_vprintk+0x54>
				if (*fmt == 'p') {
    3510:	f899 3000 	ldrb.w	r3, [r9]
    3514:	2b70      	cmp	r3, #112	; 0x70
    3516:	d163      	bne.n	35e0 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
    3518:	f854 2b04 	ldr.w	r2, [r4], #4
    351c:	2300      	movs	r3, #0
    351e:	e06a      	b.n	35f6 <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
    3520:	f1b8 0f00 	cmp.w	r8, #0
    3524:	da0b      	bge.n	353e <z_vprintk+0x10a>
    3526:	2f00      	cmp	r7, #0
    3528:	f000 809a 	beq.w	3660 <z_vprintk+0x22c>
					min_width = *fmt - '0';
    352c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3530:	2f00      	cmp	r7, #0
    3532:	bf08      	it	eq
    3534:	2702      	moveq	r7, #2
    3536:	e793      	b.n	3460 <z_vprintk+0x2c>
				if (min_width < 0) {
    3538:	f1b8 0f00 	cmp.w	r8, #0
    353c:	dbf6      	blt.n	352c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    353e:	220a      	movs	r2, #10
    3540:	fb02 0808 	mla	r8, r2, r8, r0
    3544:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    3548:	e7f2      	b.n	3530 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    354a:	2868      	cmp	r0, #104	; 0x68
    354c:	d103      	bne.n	3556 <z_vprintk+0x122>
    354e:	2e68      	cmp	r6, #104	; 0x68
    3550:	d106      	bne.n	3560 <z_vprintk+0x12c>
					length_mod = 'H';
    3552:	2648      	movs	r6, #72	; 0x48
    3554:	e784      	b.n	3460 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3556:	286c      	cmp	r0, #108	; 0x6c
    3558:	d102      	bne.n	3560 <z_vprintk+0x12c>
    355a:	2e6c      	cmp	r6, #108	; 0x6c
    355c:	f000 8082 	beq.w	3664 <z_vprintk+0x230>
				} else if (length_mod == 0) {
    3560:	2e00      	cmp	r6, #0
    3562:	d191      	bne.n	3488 <z_vprintk+0x54>
    3564:	4606      	mov	r6, r0
    3566:	e77b      	b.n	3460 <z_vprintk+0x2c>
				if (length_mod == 'z') {
    3568:	2e7a      	cmp	r6, #122	; 0x7a
    356a:	d103      	bne.n	3574 <z_vprintk+0x140>
					d = va_arg(ap, int);
    356c:	f854 2b04 	ldr.w	r2, [r4], #4
    3570:	17d3      	asrs	r3, r2, #31
    3572:	e008      	b.n	3586 <z_vprintk+0x152>
				} else if (length_mod == 'l') {
    3574:	2e6c      	cmp	r6, #108	; 0x6c
    3576:	d0f9      	beq.n	356c <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    3578:	2e4c      	cmp	r6, #76	; 0x4c
    357a:	d1f7      	bne.n	356c <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
    357c:	3407      	adds	r4, #7
    357e:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
    3582:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
    3586:	2875      	cmp	r0, #117	; 0x75
    3588:	d00f      	beq.n	35aa <z_vprintk+0x176>
    358a:	2a00      	cmp	r2, #0
    358c:	f173 0100 	sbcs.w	r1, r3, #0
    3590:	da0b      	bge.n	35aa <z_vprintk+0x176>
					out((int)'-', ctx);
    3592:	4659      	mov	r1, fp
    3594:	202d      	movs	r0, #45	; 0x2d
    3596:	e9cd 2304 	strd	r2, r3, [sp, #16]
    359a:	47a8      	blx	r5
					d = -d;
    359c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    35a0:	4252      	negs	r2, r2
    35a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    35a6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
    35aa:	1ef9      	subs	r1, r7, #3
    35ac:	bf18      	it	ne
    35ae:	2101      	movne	r1, #1
    35b0:	2f01      	cmp	r7, #1
    35b2:	bf0c      	ite	eq
    35b4:	2030      	moveq	r0, #48	; 0x30
    35b6:	2020      	movne	r0, #32
    35b8:	e9cd 0802 	strd	r0, r8, [sp, #8]
    35bc:	9101      	str	r1, [sp, #4]
    35be:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    35c0:	9100      	str	r1, [sp, #0]
    35c2:	4628      	mov	r0, r5
    35c4:	4659      	mov	r1, fp
    35c6:	f7ff fedb 	bl	3380 <print_digits>
    35ca:	e73f      	b.n	344c <z_vprintk+0x18>
				out('0', ctx);
    35cc:	4659      	mov	r1, fp
    35ce:	2030      	movs	r0, #48	; 0x30
    35d0:	47a8      	blx	r5
				out('x', ctx);
    35d2:	4659      	mov	r1, fp
    35d4:	2078      	movs	r0, #120	; 0x78
    35d6:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
    35d8:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    35dc:	2701      	movs	r7, #1
    35de:	e797      	b.n	3510 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    35e0:	2e6c      	cmp	r6, #108	; 0x6c
    35e2:	d099      	beq.n	3518 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    35e4:	2e4c      	cmp	r6, #76	; 0x4c
    35e6:	d197      	bne.n	3518 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    35e8:	1de3      	adds	r3, r4, #7
    35ea:	f023 0307 	bic.w	r3, r3, #7
    35ee:	461c      	mov	r4, r3
    35f0:	685b      	ldr	r3, [r3, #4]
    35f2:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
    35f6:	1ef9      	subs	r1, r7, #3
    35f8:	bf18      	it	ne
    35fa:	2101      	movne	r1, #1
    35fc:	2f01      	cmp	r7, #1
    35fe:	bf0c      	ite	eq
    3600:	2030      	moveq	r0, #48	; 0x30
    3602:	2020      	movne	r0, #32
    3604:	9101      	str	r1, [sp, #4]
    3606:	e9cd 0802 	strd	r0, r8, [sp, #8]
    360a:	2110      	movs	r1, #16
    360c:	e7d8      	b.n	35c0 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
    360e:	46a2      	mov	sl, r4
    3610:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
    3614:	461c      	mov	r4, r3
    3616:	4621      	mov	r1, r4
    3618:	f814 0b01 	ldrb.w	r0, [r4], #1
    361c:	b940      	cbnz	r0, 3630 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
    361e:	2f03      	cmp	r7, #3
    3620:	d122      	bne.n	3668 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
    3622:	1acc      	subs	r4, r1, r3
    3624:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
    3628:	2c00      	cmp	r4, #0
    362a:	dc06      	bgt.n	363a <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
    362c:	4654      	mov	r4, sl
    362e:	e70d      	b.n	344c <z_vprintk+0x18>
					out((int)(*s++), ctx);
    3630:	4659      	mov	r1, fp
    3632:	9304      	str	r3, [sp, #16]
    3634:	47a8      	blx	r5
    3636:	9b04      	ldr	r3, [sp, #16]
    3638:	e7ed      	b.n	3616 <z_vprintk+0x1e2>
						out(' ', ctx);
    363a:	4659      	mov	r1, fp
    363c:	2020      	movs	r0, #32
    363e:	47a8      	blx	r5
    3640:	3c01      	subs	r4, #1
    3642:	e7f1      	b.n	3628 <z_vprintk+0x1f4>
				out(c, ctx);
    3644:	f854 0b04 	ldr.w	r0, [r4], #4
    3648:	4659      	mov	r1, fp
    364a:	e723      	b.n	3494 <z_vprintk+0x60>
				out((int)'%', ctx);
    364c:	4659      	mov	r1, fp
    364e:	e721      	b.n	3494 <z_vprintk+0x60>
				length_mod = 0;
    3650:	461e      	mov	r6, r3
				padding = PAD_NONE;
    3652:	461f      	mov	r7, r3
				min_width = -1;
    3654:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
    3658:	2301      	movs	r3, #1
    365a:	e701      	b.n	3460 <z_vprintk+0x2c>
			switch (*fmt) {
    365c:	2703      	movs	r7, #3
    365e:	e6ff      	b.n	3460 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
    3660:	2701      	movs	r7, #1
    3662:	e6fd      	b.n	3460 <z_vprintk+0x2c>
					length_mod = 'L';
    3664:	264c      	movs	r6, #76	; 0x4c
    3666:	e6fb      	b.n	3460 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
    3668:	4654      	mov	r4, sl
			might_format = 0;
    366a:	4603      	mov	r3, r0
    366c:	e6f8      	b.n	3460 <z_vprintk+0x2c>
    366e:	bf00      	nop

00003670 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3670:	b507      	push	{r0, r1, r2, lr}
    3672:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3674:	2100      	movs	r1, #0
{
    3676:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    3678:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    367a:	4803      	ldr	r0, [pc, #12]	; (3688 <vprintk+0x18>)
    367c:	a901      	add	r1, sp, #4
    367e:	f7ff fed9 	bl	3434 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    3682:	b003      	add	sp, #12
    3684:	f85d fb04 	ldr.w	pc, [sp], #4
    3688:	00003419 	.word	0x00003419

0000368c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    368c:	b530      	push	{r4, r5, lr}
    368e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3690:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3694:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3696:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3698:	4805      	ldr	r0, [pc, #20]	; (36b0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    369a:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    369c:	a901      	add	r1, sp, #4
    369e:	f7ff fec9 	bl	3434 <z_vprintk>

	if (ctx.count < ctx.max) {
    36a2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    36a6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    36a8:	bfb8      	it	lt
    36aa:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    36ac:	b005      	add	sp, #20
    36ae:	bd30      	pop	{r4, r5, pc}
    36b0:	0001c79d 	.word	0x0001c79d

000036b4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    36b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    36b8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    36bc:	f019 0808 	ands.w	r8, r9, #8
{
    36c0:	4604      	mov	r4, r0
	if (processing) {
    36c2:	d00d      	beq.n	36e0 <process_event+0x2c>
		if (evt == EVT_COMPLETE) {
    36c4:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    36c6:	bf0c      	ite	eq
    36c8:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    36cc:	f049 0920 	orrne.w	r9, r9, #32
    36d0:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    36d4:	f382 8811 	msr	BASEPRI, r2
    36d8:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    36dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    36e0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    36e4:	2902      	cmp	r1, #2
    36e6:	d107      	bne.n	36f8 <process_event+0x44>
			evt = process_recheck(mgr);
    36e8:	4620      	mov	r0, r4
    36ea:	f019 f884 	bl	1c7f6 <process_recheck>
		if (evt == EVT_NOP) {
    36ee:	2800      	cmp	r0, #0
    36f0:	d0f0      	beq.n	36d4 <process_event+0x20>
		if (evt == EVT_COMPLETE) {
    36f2:	2801      	cmp	r0, #1
    36f4:	8b23      	ldrh	r3, [r4, #24]
    36f6:	d150      	bne.n	379a <process_event+0xe6>
			res = mgr->last_res;
    36f8:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    36fa:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    36fc:	2f00      	cmp	r7, #0
    36fe:	da15      	bge.n	372c <process_event+0x78>
		*clients = mgr->clients;
    3700:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3702:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3706:	e9c4 8800 	strd	r8, r8, [r4]
    370a:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    370e:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    3710:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3712:	8b21      	ldrh	r1, [r4, #24]
    3714:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3718:	45ca      	cmp	sl, r9
    371a:	d002      	beq.n	3722 <process_event+0x6e>
		if (do_monitors
    371c:	68a3      	ldr	r3, [r4, #8]
    371e:	2b00      	cmp	r3, #0
    3720:	d15c      	bne.n	37dc <process_event+0x128>
		    || !sys_slist_is_empty(&clients)
    3722:	b90d      	cbnz	r5, 3728 <process_event+0x74>
		    || (transit != NULL)) {
    3724:	2e00      	cmp	r6, #0
    3726:	d074      	beq.n	3812 <process_event+0x15e>
    3728:	2300      	movs	r3, #0
    372a:	e058      	b.n	37de <process_event+0x12a>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    372c:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3730:	1f58      	subs	r0, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3732:	2801      	cmp	r0, #1
    3734:	d820      	bhi.n	3778 <process_event+0xc4>
		*clients = mgr->clients;
    3736:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    373a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    373c:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    373e:	b289      	uxth	r1, r1
	list->tail = NULL;
    3740:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3744:	d10c      	bne.n	3760 <process_event+0xac>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    3746:	2d00      	cmp	r5, #0
    3748:	462b      	mov	r3, r5
    374a:	bf38      	it	cc
    374c:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    374e:	b12b      	cbz	r3, 375c <process_event+0xa8>
				mgr->refs += 1U;
    3750:	8b60      	ldrh	r0, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3752:	681b      	ldr	r3, [r3, #0]
    3754:	3001      	adds	r0, #1
    3756:	8360      	strh	r0, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3758:	2b00      	cmp	r3, #0
    375a:	d1f8      	bne.n	374e <process_event+0x9a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    375c:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3760:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3762:	4620      	mov	r0, r4
    3764:	f019 f847 	bl	1c7f6 <process_recheck>
    3768:	4606      	mov	r6, r0
    376a:	2800      	cmp	r0, #0
    376c:	d0d1      	beq.n	3712 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    376e:	8b23      	ldrh	r3, [r4, #24]
    3770:	f043 0320 	orr.w	r3, r3, #32
    3774:	8323      	strh	r3, [r4, #24]
    3776:	e7cb      	b.n	3710 <process_event+0x5c>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3778:	2b04      	cmp	r3, #4
    377a:	d10c      	bne.n	3796 <process_event+0xe2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    377c:	f021 0107 	bic.w	r1, r1, #7
    3780:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3782:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3784:	4620      	mov	r0, r4
    3786:	f019 f836 	bl	1c7f6 <process_recheck>
    378a:	4605      	mov	r5, r0
    378c:	2800      	cmp	r0, #0
    378e:	d0bf      	beq.n	3710 <process_event+0x5c>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3790:	f041 0120 	orr.w	r1, r1, #32
    3794:	8321      	strh	r1, [r4, #24]
    3796:	2500      	movs	r5, #0
    3798:	e7ba      	b.n	3710 <process_event+0x5c>
		} else if (evt == EVT_START) {
    379a:	2803      	cmp	r0, #3
    379c:	d109      	bne.n	37b2 <process_event+0xfe>
			transit = mgr->transitions->start;
    379e:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    37a0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    37a4:	680e      	ldr	r6, [r1, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    37a6:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    37aa:	8323      	strh	r3, [r4, #24]
}
    37ac:	2500      	movs	r5, #0
		res = 0;
    37ae:	462f      	mov	r7, r5
    37b0:	e7af      	b.n	3712 <process_event+0x5e>
		} else if (evt == EVT_STOP) {
    37b2:	2804      	cmp	r0, #4
    37b4:	d106      	bne.n	37c4 <process_event+0x110>
			transit = mgr->transitions->stop;
    37b6:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    37b8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    37bc:	684e      	ldr	r6, [r1, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    37be:	f043 0304 	orr.w	r3, r3, #4
    37c2:	e7f2      	b.n	37aa <process_event+0xf6>
		} else if (evt == EVT_RESET) {
    37c4:	2805      	cmp	r0, #5
    37c6:	d106      	bne.n	37d6 <process_event+0x122>
			transit = mgr->transitions->reset;
    37c8:	6921      	ldr	r1, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    37ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    37ce:	688e      	ldr	r6, [r1, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    37d0:	f043 0305 	orr.w	r3, r3, #5
    37d4:	e7e9      	b.n	37aa <process_event+0xf6>
    37d6:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    37d8:	462e      	mov	r6, r5
    37da:	e7e8      	b.n	37ae <process_event+0xfa>
				   && !sys_slist_is_empty(&mgr->monitors);
    37dc:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    37de:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    37e2:	8321      	strh	r1, [r4, #24]
    37e4:	f382 8811 	msr	BASEPRI, r2
    37e8:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    37ec:	bb03      	cbnz	r3, 3830 <process_event+0x17c>
			if (!sys_slist_is_empty(&clients)) {
    37ee:	2d00      	cmp	r5, #0
    37f0:	d140      	bne.n	3874 <process_event+0x1c0>
			if (transit != NULL) {
    37f2:	b116      	cbz	r6, 37fa <process_event+0x146>
				transit(mgr, transition_complete);
    37f4:	4925      	ldr	r1, [pc, #148]	; (388c <process_event+0x1d8>)
    37f6:	4620      	mov	r0, r4
    37f8:	47b0      	blx	r6
	__asm__ volatile(
    37fa:	f04f 0320 	mov.w	r3, #32
    37fe:	f3ef 8211 	mrs	r2, BASEPRI
    3802:	f383 8811 	msr	BASEPRI, r3
    3806:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    380a:	8b23      	ldrh	r3, [r4, #24]
    380c:	f023 0308 	bic.w	r3, r3, #8
    3810:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3812:	8b23      	ldrh	r3, [r4, #24]
    3814:	06d9      	lsls	r1, r3, #27
    3816:	d531      	bpl.n	387c <process_event+0x1c8>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3818:	f023 0310 	bic.w	r3, r3, #16
    381c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    381e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3820:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3824:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    3828:	2900      	cmp	r1, #0
    382a:	f47f af5b 	bne.w	36e4 <process_event+0x30>
out:
    382e:	e751      	b.n	36d4 <process_event+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3830:	68a1      	ldr	r1, [r4, #8]
    3832:	2900      	cmp	r1, #0
    3834:	d0db      	beq.n	37ee <process_event+0x13a>
	return node->next;
    3836:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    3838:	f8d1 b004 	ldr.w	fp, [r1, #4]
    383c:	2b00      	cmp	r3, #0
    383e:	bf38      	it	cc
    3840:	2300      	movcc	r3, #0
    3842:	4699      	mov	r9, r3
    3844:	4652      	mov	r2, sl
    3846:	463b      	mov	r3, r7
    3848:	4620      	mov	r0, r4
    384a:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    384c:	f1b9 0f00 	cmp.w	r9, #0
    3850:	d0cd      	beq.n	37ee <process_event+0x13a>
    3852:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3856:	4649      	mov	r1, r9
    3858:	e7ee      	b.n	3838 <process_event+0x184>
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    385a:	4639      	mov	r1, r7
    385c:	f10b 0004 	add.w	r0, fp, #4
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3860:	682d      	ldr	r5, [r5, #0]
    3862:	f018 ff80 	bl	1c766 <sys_notify_finalize>
	if (cb) {
    3866:	4681      	mov	r9, r0
    3868:	b120      	cbz	r0, 3874 <process_event+0x1c0>
		cb(mgr, cli, state, res);
    386a:	463b      	mov	r3, r7
    386c:	4652      	mov	r2, sl
    386e:	4659      	mov	r1, fp
    3870:	4620      	mov	r0, r4
    3872:	47c8      	blx	r9
    3874:	46ab      	mov	fp, r5
	while (!sys_slist_is_empty(list)) {
    3876:	2d00      	cmp	r5, #0
    3878:	d1ef      	bne.n	385a <process_event+0x1a6>
    387a:	e7ba      	b.n	37f2 <process_event+0x13e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    387c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3880:	bf1e      	ittt	ne
    3882:	f023 0320 	bicne.w	r3, r3, #32
    3886:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3888:	2102      	movne	r1, #2
    388a:	e7c9      	b.n	3820 <process_event+0x16c>
    388c:	0001c84d 	.word	0x0001c84d

00003890 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
    3890:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    3892:	4910      	ldr	r1, [pc, #64]	; (38d4 <enable_logger+0x44>)
    3894:	4810      	ldr	r0, [pc, #64]	; (38d8 <enable_logger+0x48>)
{
    3896:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    3898:	2200      	movs	r2, #0
    389a:	f01d fe59 	bl	21550 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    389e:	4d0f      	ldr	r5, [pc, #60]	; (38dc <enable_logger+0x4c>)
    38a0:	490f      	ldr	r1, [pc, #60]	; (38e0 <enable_logger+0x50>)
    38a2:	2200      	movs	r2, #0
    38a4:	2300      	movs	r3, #0
    38a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    38aa:	2400      	movs	r4, #0
    38ac:	230e      	movs	r3, #14
    38ae:	e9cd 3403 	strd	r3, r4, [sp, #12]
    38b2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    38b6:	4b0b      	ldr	r3, [pc, #44]	; (38e4 <enable_logger+0x54>)
    38b8:	9400      	str	r4, [sp, #0]
    38ba:	f44f 7240 	mov.w	r2, #768	; 0x300
    38be:	4628      	mov	r0, r5
    38c0:	f018 fad8 	bl	1be74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    38c4:	4908      	ldr	r1, [pc, #32]	; (38e8 <enable_logger+0x58>)
    38c6:	4628      	mov	r0, r5
    38c8:	f01d fd4b 	bl	21362 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    38cc:	4620      	mov	r0, r4
    38ce:	b009      	add	sp, #36	; 0x24
    38d0:	bd30      	pop	{r4, r5, pc}
    38d2:	bf00      	nop
    38d4:	000038ed 	.word	0x000038ed
    38d8:	20000ae8 	.word	0x20000ae8
    38dc:	20000b20 	.word	0x20000b20
    38e0:	20003270 	.word	0x20003270
    38e4:	00003d05 	.word	0x00003d05
    38e8:	00023662 	.word	0x00023662

000038ec <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    38ec:	4801      	ldr	r0, [pc, #4]	; (38f4 <log_process_thread_timer_expiry_fn+0x8>)
    38ee:	f018 ba29 	b.w	1bd44 <z_impl_k_sem_give>
    38f2:	bf00      	nop
    38f4:	20000958 	.word	0x20000958

000038f8 <log_core_init>:
{
    38f8:	b508      	push	{r3, lr}
		log_msg_pool_init();
    38fa:	f000 fa65 	bl	3dc8 <log_msg_pool_init>
		log_list_init(&list);
    38fe:	4809      	ldr	r0, [pc, #36]	; (3924 <log_core_init+0x2c>)
    3900:	f019 fa72 	bl	1cde8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    3904:	2304      	movs	r3, #4
    3906:	2228      	movs	r2, #40	; 0x28
    3908:	4907      	ldr	r1, [pc, #28]	; (3928 <log_core_init+0x30>)
    390a:	4808      	ldr	r0, [pc, #32]	; (392c <log_core_init+0x34>)
    390c:	f01d fb04 	bl	20f18 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    3910:	4b07      	ldr	r3, [pc, #28]	; (3930 <log_core_init+0x38>)
    3912:	4a08      	ldr	r2, [pc, #32]	; (3934 <log_core_init+0x3c>)
    3914:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    3916:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    391a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    391e:	f000 bc97 	b.w	4250 <log_output_timestamp_freq_set>
    3922:	bf00      	nop
    3924:	2000136c 	.word	0x2000136c
    3928:	20005bd8 	.word	0x20005bd8
    392c:	20001374 	.word	0x20001374
    3930:	20000244 	.word	0x20000244
    3934:	0001ce27 	.word	0x0001ce27

00003938 <dropped_notify>:
{
    3938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    393a:	4b0f      	ldr	r3, [pc, #60]	; (3978 <dropped_notify+0x40>)
    393c:	f3bf 8f5b 	dmb	ish
    3940:	2500      	movs	r5, #0
    3942:	e853 7f00 	ldrex	r7, [r3]
    3946:	e843 5200 	strex	r2, r5, [r3]
    394a:	2a00      	cmp	r2, #0
    394c:	d1f9      	bne.n	3942 <dropped_notify+0xa>
    394e:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    3952:	4c0a      	ldr	r4, [pc, #40]	; (397c <dropped_notify+0x44>)
    3954:	4e0a      	ldr	r6, [pc, #40]	; (3980 <dropped_notify+0x48>)
    3956:	1b36      	subs	r6, r6, r4
    3958:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    395a:	42b5      	cmp	r5, r6
    395c:	db00      	blt.n	3960 <dropped_notify+0x28>
}
    395e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    3960:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3962:	795b      	ldrb	r3, [r3, #5]
    3964:	b12b      	cbz	r3, 3972 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    3966:	6823      	ldr	r3, [r4, #0]
    3968:	68db      	ldr	r3, [r3, #12]
    396a:	b113      	cbz	r3, 3972 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    396c:	4639      	mov	r1, r7
    396e:	4620      	mov	r0, r4
    3970:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3972:	3501      	adds	r5, #1
    3974:	3410      	adds	r4, #16
    3976:	e7f0      	b.n	395a <dropped_notify+0x22>
    3978:	20001364 	.word	0x20001364
    397c:	00021bf4 	.word	0x00021bf4
    3980:	00021c14 	.word	0x00021c14

00003984 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3984:	4b06      	ldr	r3, [pc, #24]	; (39a0 <log_dropped+0x1c>)
    3986:	f3bf 8f5b 	dmb	ish
    398a:	e853 2f00 	ldrex	r2, [r3]
    398e:	3201      	adds	r2, #1
    3990:	e843 2100 	strex	r1, r2, [r3]
    3994:	2900      	cmp	r1, #0
    3996:	d1f8      	bne.n	398a <log_dropped+0x6>
    3998:	f3bf 8f5b 	dmb	ish
}
    399c:	4770      	bx	lr
    399e:	bf00      	nop
    39a0:	20001364 	.word	0x20001364

000039a4 <log_source_name_get>:
    39a4:	4a04      	ldr	r2, [pc, #16]	; (39b8 <log_source_name_get+0x14>)
    39a6:	4b05      	ldr	r3, [pc, #20]	; (39bc <log_source_name_get+0x18>)
    39a8:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    39aa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    39ae:	bf34      	ite	cc
    39b0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    39b4:	2000      	movcs	r0, #0
}
    39b6:	4770      	bx	lr
    39b8:	00021aac 	.word	0x00021aac
    39bc:	00021bf4 	.word	0x00021bf4

000039c0 <log_backend_enable>:
	id += backend - log_backend_get(0);
    39c0:	4b09      	ldr	r3, [pc, #36]	; (39e8 <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
    39c2:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
    39c4:	1ac3      	subs	r3, r0, r3
    39c6:	111b      	asrs	r3, r3, #4
    39c8:	3301      	adds	r3, #1
{
    39ca:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
    39cc:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
    39ce:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
    39d0:	4c06      	ldr	r4, [pc, #24]	; (39ec <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    39d2:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    39d4:	2201      	movs	r2, #1
    39d6:	715a      	strb	r2, [r3, #5]
    39d8:	7822      	ldrb	r2, [r4, #0]
    39da:	b912      	cbnz	r2, 39e2 <log_backend_enable+0x22>
    39dc:	4804      	ldr	r0, [pc, #16]	; (39f0 <log_backend_enable+0x30>)
    39de:	f018 f9b1 	bl	1bd44 <z_impl_k_sem_give>
	backend_attached = true;
    39e2:	2301      	movs	r3, #1
    39e4:	7023      	strb	r3, [r4, #0]
}
    39e6:	bd10      	pop	{r4, pc}
    39e8:	00021bf4 	.word	0x00021bf4
    39ec:	20002aef 	.word	0x20002aef
    39f0:	20000958 	.word	0x20000958

000039f4 <log_init>:
{
    39f4:	b570      	push	{r4, r5, r6, lr}
    39f6:	4b11      	ldr	r3, [pc, #68]	; (3a3c <log_init+0x48>)
    39f8:	f3bf 8f5b 	dmb	ish
    39fc:	e853 5f00 	ldrex	r5, [r3]
    3a00:	1c6a      	adds	r2, r5, #1
    3a02:	e843 2100 	strex	r1, r2, [r3]
    3a06:	2900      	cmp	r1, #0
    3a08:	d1f8      	bne.n	39fc <log_init+0x8>
    3a0a:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    3a0e:	b92d      	cbnz	r5, 3a1c <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    3a10:	4c0b      	ldr	r4, [pc, #44]	; (3a40 <log_init+0x4c>)
    3a12:	4e0c      	ldr	r6, [pc, #48]	; (3a44 <log_init+0x50>)
    3a14:	1b36      	subs	r6, r6, r4
    3a16:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    3a18:	42b5      	cmp	r5, r6
    3a1a:	db00      	blt.n	3a1e <log_init+0x2a>
}
    3a1c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    3a1e:	7b23      	ldrb	r3, [r4, #12]
    3a20:	b143      	cbz	r3, 3a34 <log_init+0x40>
			if (backend->api->init != NULL) {
    3a22:	6823      	ldr	r3, [r4, #0]
    3a24:	695b      	ldr	r3, [r3, #20]
    3a26:	b103      	cbz	r3, 3a2a <log_init+0x36>
				backend->api->init();
    3a28:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    3a2a:	2204      	movs	r2, #4
    3a2c:	2100      	movs	r1, #0
    3a2e:	4620      	mov	r0, r4
    3a30:	f7ff ffc6 	bl	39c0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    3a34:	3501      	adds	r5, #1
    3a36:	3410      	adds	r4, #16
    3a38:	e7ee      	b.n	3a18 <log_init+0x24>
    3a3a:	bf00      	nop
    3a3c:	20001368 	.word	0x20001368
    3a40:	00021bf4 	.word	0x00021bf4
    3a44:	00021c14 	.word	0x00021c14

00003a48 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    3a48:	4b16      	ldr	r3, [pc, #88]	; (3aa4 <log_strdup+0x5c>)
    3a4a:	4298      	cmp	r0, r3
{
    3a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    3a4e:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3a50:	d302      	bcc.n	3a58 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    3a52:	4b15      	ldr	r3, [pc, #84]	; (3aa8 <log_strdup+0x60>)
    3a54:	4298      	cmp	r0, r3
    3a56:	d320      	bcc.n	3a9a <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    3a58:	4814      	ldr	r0, [pc, #80]	; (3aac <log_strdup+0x64>)
    3a5a:	2200      	movs	r2, #0
    3a5c:	2300      	movs	r3, #0
    3a5e:	a901      	add	r1, sp, #4
    3a60:	f017 fcd2 	bl	1b408 <k_mem_slab_alloc>
	if (err != 0) {
    3a64:	4605      	mov	r5, r0
    3a66:	b9d8      	cbnz	r0, 3aa0 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3a68:	2201      	movs	r2, #1
    3a6a:	9b01      	ldr	r3, [sp, #4]
    3a6c:	f3bf 8f5b 	dmb	ish
    3a70:	e853 1f00 	ldrex	r1, [r3]
    3a74:	e843 2000 	strex	r0, r2, [r3]
    3a78:	2800      	cmp	r0, #0
    3a7a:	d1f9      	bne.n	3a70 <log_strdup+0x28>
    3a7c:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    3a80:	9801      	ldr	r0, [sp, #4]
    3a82:	4621      	mov	r1, r4
    3a84:	221f      	movs	r2, #31
    3a86:	3004      	adds	r0, #4
    3a88:	f01b f96e 	bl	1ed68 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    3a8c:	9c01      	ldr	r4, [sp, #4]
    3a8e:	237e      	movs	r3, #126	; 0x7e
    3a90:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3a94:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    3a98:	3404      	adds	r4, #4
}
    3a9a:	4620      	mov	r0, r4
    3a9c:	b003      	add	sp, #12
    3a9e:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    3aa0:	4c03      	ldr	r4, [pc, #12]	; (3ab0 <log_strdup+0x68>)
    3aa2:	e7fa      	b.n	3a9a <log_strdup+0x52>
    3aa4:	0002182c 	.word	0x0002182c
    3aa8:	000258a4 	.word	0x000258a4
    3aac:	20001374 	.word	0x20001374
    3ab0:	0002366a 	.word	0x0002366a

00003ab4 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    3ab4:	b148      	cbz	r0, 3aca <log_is_strdup+0x16>
    3ab6:	4b05      	ldr	r3, [pc, #20]	; (3acc <log_is_strdup+0x18>)
    3ab8:	4298      	cmp	r0, r3
    3aba:	d305      	bcc.n	3ac8 <log_is_strdup+0x14>
    3abc:	33a0      	adds	r3, #160	; 0xa0
    3abe:	4298      	cmp	r0, r3
    3ac0:	bf2c      	ite	cs
    3ac2:	2000      	movcs	r0, #0
    3ac4:	2001      	movcc	r0, #1
    3ac6:	4770      	bx	lr
    3ac8:	2000      	movs	r0, #0
}
    3aca:	4770      	bx	lr
    3acc:	20005bd8 	.word	0x20005bd8

00003ad0 <z_impl_log_process>:
{
    3ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    3ad4:	4b4c      	ldr	r3, [pc, #304]	; (3c08 <z_impl_log_process+0x138>)
    3ad6:	781b      	ldrb	r3, [r3, #0]
{
    3ad8:	b085      	sub	sp, #20
    3ada:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3adc:	b903      	cbnz	r3, 3ae0 <z_impl_log_process+0x10>
    3ade:	b360      	cbz	r0, 3b3a <z_impl_log_process+0x6a>
    3ae0:	f04f 0320 	mov.w	r3, #32
    3ae4:	f3ef 8611 	mrs	r6, BASEPRI
    3ae8:	f383 8811 	msr	BASEPRI, r3
    3aec:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    3af0:	4846      	ldr	r0, [pc, #280]	; (3c0c <z_impl_log_process+0x13c>)
    3af2:	f019 f989 	bl	1ce08 <log_list_head_get>
    3af6:	4605      	mov	r5, r0
	__asm__ volatile(
    3af8:	f386 8811 	msr	BASEPRI, r6
    3afc:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    3b00:	b178      	cbz	r0, 3b22 <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3b02:	f3bf 8f5b 	dmb	ish
    3b06:	4b42      	ldr	r3, [pc, #264]	; (3c10 <z_impl_log_process+0x140>)
    3b08:	e853 2f00 	ldrex	r2, [r3]
    3b0c:	3a01      	subs	r2, #1
    3b0e:	e843 2100 	strex	r1, r2, [r3]
    3b12:	2900      	cmp	r1, #0
    3b14:	d1f8      	bne.n	3b08 <z_impl_log_process+0x38>
    3b16:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    3b1a:	b194      	cbz	r4, 3b42 <z_impl_log_process+0x72>
	log_msg_put(msg);
    3b1c:	4628      	mov	r0, r5
    3b1e:	f019 fa8a 	bl	1d036 <log_msg_put>
	if (!bypass && dropped_cnt) {
    3b22:	b924      	cbnz	r4, 3b2e <z_impl_log_process+0x5e>
    3b24:	4b3b      	ldr	r3, [pc, #236]	; (3c14 <z_impl_log_process+0x144>)
    3b26:	681b      	ldr	r3, [r3, #0]
    3b28:	b10b      	cbz	r3, 3b2e <z_impl_log_process+0x5e>
		dropped_notify();
    3b2a:	f7ff ff05 	bl	3938 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    3b2e:	4837      	ldr	r0, [pc, #220]	; (3c0c <z_impl_log_process+0x13c>)
    3b30:	f019 f968 	bl	1ce04 <log_list_head_peek>
    3b34:	1e04      	subs	r4, r0, #0
    3b36:	bf18      	it	ne
    3b38:	2401      	movne	r4, #1
}
    3b3a:	4620      	mov	r0, r4
    3b3c:	b005      	add	sp, #20
    3b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    3b42:	4b35      	ldr	r3, [pc, #212]	; (3c18 <z_impl_log_process+0x148>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    3b44:	781b      	ldrb	r3, [r3, #0]
    3b46:	b9cb      	cbnz	r3, 3b7c <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3b48:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    3b4a:	07db      	lsls	r3, r3, #31
    3b4c:	d416      	bmi.n	3b7c <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
    3b4e:	f019 fa85 	bl	1d05c <log_msg_str_get>
    3b52:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3b54:	4628      	mov	r0, r5
    3b56:	f019 fa4c 	bl	1cff2 <log_msg_nargs_get>
    3b5a:	4601      	mov	r1, r0
    3b5c:	4640      	mov	r0, r8
    3b5e:	f019 f966 	bl	1ce2e <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3b62:	4f2e      	ldr	r7, [pc, #184]	; (3c1c <z_impl_log_process+0x14c>)
    3b64:	4b2e      	ldr	r3, [pc, #184]	; (3c20 <z_impl_log_process+0x150>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3b66:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 3c3c <z_impl_log_process+0x16c>
    3b6a:	1bdb      	subs	r3, r3, r7
    3b6c:	08db      	lsrs	r3, r3, #3
    3b6e:	9303      	str	r3, [sp, #12]
    3b70:	4b2c      	ldr	r3, [pc, #176]	; (3c24 <z_impl_log_process+0x154>)
    3b72:	1bdb      	subs	r3, r3, r7
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3b74:	4606      	mov	r6, r0
    3b76:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    3b7a:	b936      	cbnz	r6, 3b8a <z_impl_log_process+0xba>
    3b7c:	4e2a      	ldr	r6, [pc, #168]	; (3c28 <z_impl_log_process+0x158>)
    3b7e:	4f2b      	ldr	r7, [pc, #172]	; (3c2c <z_impl_log_process+0x15c>)
    3b80:	1bbf      	subs	r7, r7, r6
    3b82:	113f      	asrs	r7, r7, #4
    3b84:	f04f 0800 	mov.w	r8, #0
    3b88:	e03a      	b.n	3c00 <z_impl_log_process+0x130>
		idx = 31 - __builtin_clz(mask);
    3b8a:	fab6 f186 	clz	r1, r6
    3b8e:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    3b92:	4649      	mov	r1, r9
    3b94:	4628      	mov	r0, r5
    3b96:	f019 fa2f 	bl	1cff8 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    3b9a:	4b25      	ldr	r3, [pc, #148]	; (3c30 <z_impl_log_process+0x160>)
    3b9c:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    3b9e:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    3ba0:	d302      	bcc.n	3ba8 <z_impl_log_process+0xd8>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3ba2:	4b24      	ldr	r3, [pc, #144]	; (3c34 <z_impl_log_process+0x164>)
    3ba4:	4298      	cmp	r0, r3
    3ba6:	d31a      	bcc.n	3bde <z_impl_log_process+0x10e>
    3ba8:	4608      	mov	r0, r1
    3baa:	f7ff ff83 	bl	3ab4 <log_is_strdup>
    3bae:	4602      	mov	r2, r0
    3bb0:	b9a8      	cbnz	r0, 3bde <z_impl_log_process+0x10e>
    3bb2:	4b21      	ldr	r3, [pc, #132]	; (3c38 <z_impl_log_process+0x168>)
    3bb4:	4299      	cmp	r1, r3
    3bb6:	d012      	beq.n	3bde <z_impl_log_process+0x10e>
	return msg->hdr.ids.source_id;
    3bb8:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    3bba:	9803      	ldr	r0, [sp, #12]
    3bbc:	0999      	lsrs	r1, r3, #6
    3bbe:	ebb0 1f93 	cmp.w	r0, r3, lsr #6
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    3bc2:	ea4f 138a 	mov.w	r3, sl, lsl #6
    3bc6:	f043 0301 	orr.w	r3, r3, #1
	return __log_const_start[source_id].name;
    3bca:	bf88      	it	hi
    3bcc:	f857 2031 	ldrhi.w	r2, [r7, r1, lsl #3]
    3bd0:	f8ad 3000 	strh.w	r3, [sp]
    3bd4:	4649      	mov	r1, r9
    3bd6:	4643      	mov	r3, r8
    3bd8:	4658      	mov	r0, fp
    3bda:	f019 f982 	bl	1cee2 <log_3>
		mask &= ~BIT(idx);
    3bde:	2101      	movs	r1, #1
    3be0:	fa01 f109 	lsl.w	r1, r1, r9
    3be4:	ea26 0601 	bic.w	r6, r6, r1
    3be8:	e7c7      	b.n	3b7a <z_impl_log_process+0xaa>
	return backend->cb->active;
    3bea:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    3bec:	795b      	ldrb	r3, [r3, #5]
    3bee:	b123      	cbz	r3, 3bfa <z_impl_log_process+0x12a>
	backend->api->put(backend, msg);
    3bf0:	6833      	ldr	r3, [r6, #0]
    3bf2:	4629      	mov	r1, r5
    3bf4:	681b      	ldr	r3, [r3, #0]
    3bf6:	4630      	mov	r0, r6
    3bf8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    3bfa:	f108 0801 	add.w	r8, r8, #1
    3bfe:	3610      	adds	r6, #16
    3c00:	45b8      	cmp	r8, r7
    3c02:	dbf2      	blt.n	3bea <z_impl_log_process+0x11a>
    3c04:	e78a      	b.n	3b1c <z_impl_log_process+0x4c>
    3c06:	bf00      	nop
    3c08:	20002aef 	.word	0x20002aef
    3c0c:	2000136c 	.word	0x2000136c
    3c10:	20001360 	.word	0x20001360
    3c14:	20001364 	.word	0x20001364
    3c18:	20002af0 	.word	0x20002af0
    3c1c:	00021aac 	.word	0x00021aac
    3c20:	00021bf4 	.word	0x00021bf4
    3c24:	00021bbc 	.word	0x00021bbc
    3c28:	00021bf4 	.word	0x00021bf4
    3c2c:	00021c14 	.word	0x00021c14
    3c30:	0002182c 	.word	0x0002182c
    3c34:	000258a4 	.word	0x000258a4
    3c38:	0002366a 	.word	0x0002366a
    3c3c:	00023684 	.word	0x00023684

00003c40 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    3c40:	4b29      	ldr	r3, [pc, #164]	; (3ce8 <msg_finalize+0xa8>)
{
    3c42:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    3c44:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    3c46:	8141      	strh	r1, [r0, #10]
{
    3c48:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3c4a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    3c4c:	4d27      	ldr	r5, [pc, #156]	; (3cec <msg_finalize+0xac>)
    3c4e:	60e0      	str	r0, [r4, #12]
    3c50:	f3bf 8f5b 	dmb	ish
    3c54:	e855 3f00 	ldrex	r3, [r5]
    3c58:	3301      	adds	r3, #1
    3c5a:	e845 3200 	strex	r2, r3, [r5]
    3c5e:	2a00      	cmp	r2, #0
    3c60:	d1f8      	bne.n	3c54 <msg_finalize+0x14>
    3c62:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    3c66:	f04f 0320 	mov.w	r3, #32
    3c6a:	f3ef 8611 	mrs	r6, BASEPRI
    3c6e:	f383 8811 	msr	BASEPRI, r3
    3c72:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3c76:	481e      	ldr	r0, [pc, #120]	; (3cf0 <msg_finalize+0xb0>)
    3c78:	4621      	mov	r1, r4
    3c7a:	f019 f8b9 	bl	1cdf0 <log_list_add_tail>
	__asm__ volatile(
    3c7e:	f386 8811 	msr	BASEPRI, r6
    3c82:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    3c86:	4b1b      	ldr	r3, [pc, #108]	; (3cf4 <msg_finalize+0xb4>)
    3c88:	781b      	ldrb	r3, [r3, #0]
    3c8a:	b183      	cbz	r3, 3cae <msg_finalize+0x6e>
	__asm__ volatile(
    3c8c:	f04f 0320 	mov.w	r3, #32
    3c90:	f3ef 8411 	mrs	r4, BASEPRI
    3c94:	f383 8811 	msr	BASEPRI, r3
    3c98:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    3c9c:	2000      	movs	r0, #0
    3c9e:	f7ff ff17 	bl	3ad0 <z_impl_log_process>
	__asm__ volatile(
    3ca2:	f384 8811 	msr	BASEPRI, r4
    3ca6:	f3bf 8f6f 	isb	sy
}
    3caa:	b002      	add	sp, #8
    3cac:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    3cae:	4a12      	ldr	r2, [pc, #72]	; (3cf8 <msg_finalize+0xb8>)
    3cb0:	682b      	ldr	r3, [r5, #0]
    3cb2:	6812      	ldr	r2, [r2, #0]
    3cb4:	2a00      	cmp	r2, #0
    3cb6:	d0f8      	beq.n	3caa <msg_finalize+0x6a>
    3cb8:	2b01      	cmp	r3, #1
    3cba:	d10a      	bne.n	3cd2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    3cbc:	2200      	movs	r2, #0
    3cbe:	2300      	movs	r3, #0
    3cc0:	e9cd 2300 	strd	r2, r3, [sp]
    3cc4:	480d      	ldr	r0, [pc, #52]	; (3cfc <msg_finalize+0xbc>)
    3cc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3cca:	2300      	movs	r3, #0
    3ccc:	f018 fb36 	bl	1c33c <z_impl_k_timer_start>
    3cd0:	e7eb      	b.n	3caa <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    3cd2:	2b0a      	cmp	r3, #10
    3cd4:	d1e9      	bne.n	3caa <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    3cd6:	4809      	ldr	r0, [pc, #36]	; (3cfc <msg_finalize+0xbc>)
    3cd8:	f01d fc46 	bl	21568 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3cdc:	4808      	ldr	r0, [pc, #32]	; (3d00 <msg_finalize+0xc0>)
}
    3cde:	b002      	add	sp, #8
    3ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ce4:	f018 b82e 	b.w	1bd44 <z_impl_k_sem_give>
    3ce8:	20000244 	.word	0x20000244
    3cec:	20001360 	.word	0x20001360
    3cf0:	2000136c 	.word	0x2000136c
    3cf4:	20002af0 	.word	0x20002af0
    3cf8:	20001390 	.word	0x20001390
    3cfc:	20000ae8 	.word	0x20000ae8
    3d00:	20000958 	.word	0x20000958

00003d04 <log_process_thread_func>:
{
    3d04:	b510      	push	{r4, lr}
	log_init();
    3d06:	f7ff fe75 	bl	39f4 <log_init>
	return z_impl_k_current_get();
    3d0a:	f018 f815 	bl	1bd38 <z_impl_k_current_get>
	proc_tid = process_tid;
    3d0e:	4b0c      	ldr	r3, [pc, #48]	; (3d40 <log_process_thread_func+0x3c>)
    3d10:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    3d12:	b130      	cbz	r0, 3d22 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    3d14:	4b0b      	ldr	r3, [pc, #44]	; (3d44 <log_process_thread_func+0x40>)
	    process_tid &&
    3d16:	681b      	ldr	r3, [r3, #0]
    3d18:	2b09      	cmp	r3, #9
    3d1a:	dd02      	ble.n	3d22 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    3d1c:	480a      	ldr	r0, [pc, #40]	; (3d48 <log_process_thread_func+0x44>)
    3d1e:	f018 f811 	bl	1bd44 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    3d22:	4c09      	ldr	r4, [pc, #36]	; (3d48 <log_process_thread_func+0x44>)
    3d24:	2000      	movs	r0, #0
    3d26:	f7ff fed3 	bl	3ad0 <z_impl_log_process>
		if (log_process(false) == false) {
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d1fa      	bne.n	3d24 <log_process_thread_func+0x20>
    3d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3d36:	4620      	mov	r0, r4
    3d38:	f018 f82a 	bl	1bd90 <z_impl_k_sem_take>
    3d3c:	e7f2      	b.n	3d24 <log_process_thread_func+0x20>
    3d3e:	bf00      	nop
    3d40:	20001390 	.word	0x20001390
    3d44:	20001360 	.word	0x20001360
    3d48:	20000958 	.word	0x20000958

00003d4c <z_impl_log_panic>:
{
    3d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    3d4e:	4f0e      	ldr	r7, [pc, #56]	; (3d88 <z_impl_log_panic+0x3c>)
    3d50:	783d      	ldrb	r5, [r7, #0]
    3d52:	b975      	cbnz	r5, 3d72 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    3d54:	4c0d      	ldr	r4, [pc, #52]	; (3d8c <z_impl_log_panic+0x40>)
    3d56:	4e0e      	ldr	r6, [pc, #56]	; (3d90 <z_impl_log_panic+0x44>)
	log_init();
    3d58:	f7ff fe4c 	bl	39f4 <log_init>
    3d5c:	1b36      	subs	r6, r6, r4
    3d5e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    3d60:	42b5      	cmp	r5, r6
    3d62:	db07      	blt.n	3d74 <z_impl_log_panic+0x28>
    3d64:	2000      	movs	r0, #0
    3d66:	f7ff feb3 	bl	3ad0 <z_impl_log_process>
		while (log_process(false) == true) {
    3d6a:	2800      	cmp	r0, #0
    3d6c:	d1fa      	bne.n	3d64 <z_impl_log_panic+0x18>
	panic_mode = true;
    3d6e:	2301      	movs	r3, #1
    3d70:	703b      	strb	r3, [r7, #0]
}
    3d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    3d74:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    3d76:	795b      	ldrb	r3, [r3, #5]
    3d78:	b11b      	cbz	r3, 3d82 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    3d7a:	6823      	ldr	r3, [r4, #0]
    3d7c:	4620      	mov	r0, r4
    3d7e:	691b      	ldr	r3, [r3, #16]
    3d80:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    3d82:	3501      	adds	r5, #1
    3d84:	3410      	adds	r4, #16
    3d86:	e7eb      	b.n	3d60 <z_impl_log_panic+0x14>
    3d88:	20002af0 	.word	0x20002af0
    3d8c:	00021bf4 	.word	0x00021bf4
    3d90:	00021c14 	.word	0x00021c14

00003d94 <log_free>:
{
    3d94:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    3d96:	3804      	subs	r0, #4
    3d98:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3d9a:	f3bf 8f5b 	dmb	ish
    3d9e:	e850 3f00 	ldrex	r3, [r0]
    3da2:	1e5a      	subs	r2, r3, #1
    3da4:	e840 2100 	strex	r1, r2, [r0]
    3da8:	2900      	cmp	r1, #0
    3daa:	d1f8      	bne.n	3d9e <log_free+0xa>
    3dac:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    3db0:	2b01      	cmp	r3, #1
    3db2:	d103      	bne.n	3dbc <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    3db4:	4803      	ldr	r0, [pc, #12]	; (3dc4 <log_free+0x30>)
    3db6:	a901      	add	r1, sp, #4
    3db8:	f017 fb58 	bl	1b46c <k_mem_slab_free>
}
    3dbc:	b003      	add	sp, #12
    3dbe:	f85d fb04 	ldr.w	pc, [sp], #4
    3dc2:	bf00      	nop
    3dc4:	20001374 	.word	0x20001374

00003dc8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    3dc8:	2320      	movs	r3, #32
    3dca:	4902      	ldr	r1, [pc, #8]	; (3dd4 <log_msg_pool_init+0xc>)
    3dcc:	4802      	ldr	r0, [pc, #8]	; (3dd8 <log_msg_pool_init+0x10>)
    3dce:	461a      	mov	r2, r3
    3dd0:	f01d b8a2 	b.w	20f18 <k_mem_slab_init>
    3dd4:	20005c78 	.word	0x20005c78
    3dd8:	20001394 	.word	0x20001394

00003ddc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3ddc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    3dde:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    3de0:	4d09      	ldr	r5, [pc, #36]	; (3e08 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    3de2:	9301      	str	r3, [sp, #4]
    3de4:	2001      	movs	r0, #1
    3de6:	f7ff fe73 	bl	3ad0 <z_impl_log_process>
    3dea:	4604      	mov	r4, r0
			log_dropped();
    3dec:	f7ff fdca 	bl	3984 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3df0:	2200      	movs	r2, #0
    3df2:	2300      	movs	r3, #0
    3df4:	a901      	add	r1, sp, #4
    3df6:	4628      	mov	r0, r5
    3df8:	f017 fb06 	bl	1b408 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3dfc:	b108      	cbz	r0, 3e02 <log_msg_no_space_handle+0x26>
    3dfe:	2c00      	cmp	r4, #0
    3e00:	d1f0      	bne.n	3de4 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    3e02:	9801      	ldr	r0, [sp, #4]
    3e04:	b003      	add	sp, #12
    3e06:	bd30      	pop	{r4, r5, pc}
    3e08:	20001394 	.word	0x20001394

00003e0c <log_msg_chunk_alloc>:
{
    3e0c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    3e0e:	2300      	movs	r3, #0
    3e10:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    3e12:	4807      	ldr	r0, [pc, #28]	; (3e30 <log_msg_chunk_alloc+0x24>)
    3e14:	2200      	movs	r2, #0
    3e16:	2300      	movs	r3, #0
    3e18:	a901      	add	r1, sp, #4
    3e1a:	f017 faf5 	bl	1b408 <k_mem_slab_alloc>
	if (err != 0) {
    3e1e:	b110      	cbz	r0, 3e26 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    3e20:	f7ff ffdc 	bl	3ddc <log_msg_no_space_handle>
    3e24:	9001      	str	r0, [sp, #4]
}
    3e26:	9801      	ldr	r0, [sp, #4]
    3e28:	b003      	add	sp, #12
    3e2a:	f85d fb04 	ldr.w	pc, [sp], #4
    3e2e:	bf00      	nop
    3e30:	20001394 	.word	0x20001394

00003e34 <msg_free>:
{
    3e34:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3e36:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    3e38:	7a45      	ldrb	r5, [r0, #9]
{
    3e3a:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
    3e3c:	092d      	lsrs	r5, r5, #4
{
    3e3e:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    3e40:	07d8      	lsls	r0, r3, #31
    3e42:	d41c      	bmi.n	3e7e <msg_free+0x4a>
    3e44:	b1dd      	cbz	r5, 3e7e <msg_free+0x4a>
		uint32_t smask = 0;
    3e46:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    3e48:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    3e4a:	9801      	ldr	r0, [sp, #4]
    3e4c:	4631      	mov	r1, r6
    3e4e:	f019 f8d3 	bl	1cff8 <log_msg_arg_get>
    3e52:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    3e54:	f7ff fe2e 	bl	3ab4 <log_is_strdup>
    3e58:	b170      	cbz	r0, 3e78 <msg_free+0x44>
				if (smask == 0) {
    3e5a:	b934      	cbnz	r4, 3e6a <msg_free+0x36>
					smask = z_log_get_s_mask(
    3e5c:	9b01      	ldr	r3, [sp, #4]
    3e5e:	4629      	mov	r1, r5
    3e60:	6918      	ldr	r0, [r3, #16]
    3e62:	f018 ffe4 	bl	1ce2e <z_log_get_s_mask>
					if (smask == 0) {
    3e66:	4604      	mov	r4, r0
    3e68:	b148      	cbz	r0, 3e7e <msg_free+0x4a>
				if (smask & BIT(i)) {
    3e6a:	fa24 f306 	lsr.w	r3, r4, r6
    3e6e:	07d9      	lsls	r1, r3, #31
    3e70:	d502      	bpl.n	3e78 <msg_free+0x44>
					log_free(buf);
    3e72:	4638      	mov	r0, r7
    3e74:	f7ff ff8e 	bl	3d94 <log_free>
		for (i = 0; i < nargs; i++) {
    3e78:	3601      	adds	r6, #1
    3e7a:	42ae      	cmp	r6, r5
    3e7c:	d3e5      	bcc.n	3e4a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    3e7e:	9b01      	ldr	r3, [sp, #4]
    3e80:	7a1a      	ldrb	r2, [r3, #8]
    3e82:	0792      	lsls	r2, r2, #30
    3e84:	d504      	bpl.n	3e90 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    3e86:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3e88:	4c08      	ldr	r4, [pc, #32]	; (3eac <msg_free+0x78>)
    3e8a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    3e8c:	9b03      	ldr	r3, [sp, #12]
    3e8e:	b92b      	cbnz	r3, 3e9c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    3e90:	4806      	ldr	r0, [pc, #24]	; (3eac <msg_free+0x78>)
    3e92:	a901      	add	r1, sp, #4
    3e94:	f017 faea 	bl	1b46c <k_mem_slab_free>
}
    3e98:	b005      	add	sp, #20
    3e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    3e9c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3e9e:	a903      	add	r1, sp, #12
    3ea0:	4620      	mov	r0, r4
    3ea2:	f017 fae3 	bl	1b46c <k_mem_slab_free>
		cont = next;
    3ea6:	9503      	str	r5, [sp, #12]
    3ea8:	e7f0      	b.n	3e8c <msg_free+0x58>
    3eaa:	bf00      	nop
    3eac:	20001394 	.word	0x20001394

00003eb0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    3eb0:	b40e      	push	{r1, r2, r3}
    3eb2:	b503      	push	{r0, r1, lr}
    3eb4:	ab03      	add	r3, sp, #12
    3eb6:	4601      	mov	r1, r0
    3eb8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
    3ebc:	4804      	ldr	r0, [pc, #16]	; (3ed0 <print_formatted+0x20>)
	va_start(args, fmt);
    3ebe:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
    3ec0:	f7ff fab8 	bl	3434 <z_vprintk>
#endif
	va_end(args);

	return length;
}
    3ec4:	2000      	movs	r0, #0
    3ec6:	b002      	add	sp, #8
    3ec8:	f85d eb04 	ldr.w	lr, [sp], #4
    3ecc:	b003      	add	sp, #12
    3ece:	4770      	bx	lr
    3ed0:	0001d405 	.word	0x0001d405

00003ed4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    3ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ed8:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    3eda:	f011 0402 	ands.w	r4, r1, #2
{
    3ede:	4690      	mov	r8, r2
    3ee0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    3ee4:	4606      	mov	r6, r0
    3ee6:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    3ee8:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    3eec:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    3ef0:	d007      	beq.n	3f02 <prefix_print+0x2e>
	if (!format) {
    3ef2:	f011 0f44 	tst.w	r1, #68	; 0x44
    3ef6:	d137      	bne.n	3f68 <prefix_print+0x94>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    3ef8:	4932      	ldr	r1, [pc, #200]	; (3fc4 <prefix_print+0xf0>)
    3efa:	f7ff ffd9 	bl	3eb0 <print_formatted>
			length = print_formatted(log_output,
    3efe:	4601      	mov	r1, r0
		length += timestamp_print(log_output, flags, timestamp);
    3f00:	460c      	mov	r4, r1
	if (color) {
    3f02:	f1b9 0f00 	cmp.w	r9, #0
    3f06:	d00a      	beq.n	3f1e <prefix_print+0x4a>
		const char *log_color = start && (colors[level] != NULL) ?
    3f08:	4b2f      	ldr	r3, [pc, #188]	; (3fc8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    3f0a:	4930      	ldr	r1, [pc, #192]	; (3fcc <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    3f0c:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    3f10:	4b2f      	ldr	r3, [pc, #188]	; (3fd0 <prefix_print+0xfc>)
    3f12:	4630      	mov	r0, r6
    3f14:	2a00      	cmp	r2, #0
    3f16:	bf08      	it	eq
    3f18:	461a      	moveq	r2, r3
    3f1a:	f7ff ffc9 	bl	3eb0 <print_formatted>
	if (level_on) {
    3f1e:	b13d      	cbz	r5, 3f30 <prefix_print+0x5c>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    3f20:	4b2c      	ldr	r3, [pc, #176]	; (3fd4 <prefix_print+0x100>)
    3f22:	492d      	ldr	r1, [pc, #180]	; (3fd8 <prefix_print+0x104>)
    3f24:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    3f28:	4630      	mov	r0, r6
    3f2a:	f7ff ffc1 	bl	3eb0 <print_formatted>
    3f2e:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    3f30:	f1b8 0f00 	cmp.w	r8, #0
    3f34:	d043      	beq.n	3fbe <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3f36:	2301      	movs	r3, #1
    3f38:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    3f3c:	4b27      	ldr	r3, [pc, #156]	; (3fdc <prefix_print+0x108>)
    3f3e:	f017 0f10 	tst.w	r7, #16
    3f42:	4f27      	ldr	r7, [pc, #156]	; (3fe0 <prefix_print+0x10c>)
    3f44:	bf18      	it	ne
    3f46:	461f      	movne	r7, r3
    3f48:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    3f4c:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    3f50:	f7ff fd28 	bl	39a4 <log_source_name_get>
    3f54:	4639      	mov	r1, r7
    3f56:	4602      	mov	r2, r0
    3f58:	4630      	mov	r0, r6
    3f5a:	f7ff ffa9 	bl	3eb0 <print_formatted>
    3f5e:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    3f60:	4420      	add	r0, r4
    3f62:	b005      	add	sp, #20
    3f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    3f68:	4b1e      	ldr	r3, [pc, #120]	; (3fe4 <prefix_print+0x110>)
    3f6a:	6819      	ldr	r1, [r3, #0]
    3f6c:	2900      	cmp	r1, #0
    3f6e:	d0c7      	beq.n	3f00 <prefix_print+0x2c>
		timestamp /= timestamp_div;
    3f70:	4b1d      	ldr	r3, [pc, #116]	; (3fe8 <prefix_print+0x114>)
    3f72:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
    3f76:	681b      	ldr	r3, [r3, #0]
    3f78:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    3f7c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    3f80:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    3f84:	fbb4 f2fe 	udiv	r2, r4, lr
    3f88:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
    3f8c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    3f90:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    3f94:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3f98:	fbb4 fbf1 	udiv	fp, r4, r1
    3f9c:	fb01 441b 	mls	r4, r1, fp, r4
    3fa0:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
    3fa4:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3fa8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    3fac:	e9cd b101 	strd	fp, r1, [sp, #4]
    3fb0:	fb0a e113 	mls	r1, sl, r3, lr
    3fb4:	9100      	str	r1, [sp, #0]
    3fb6:	490d      	ldr	r1, [pc, #52]	; (3fec <prefix_print+0x118>)
    3fb8:	f7ff ff7a 	bl	3eb0 <print_formatted>
    3fbc:	e79f      	b.n	3efe <prefix_print+0x2a>
	total += print_formatted(log_output,
    3fbe:	4f08      	ldr	r7, [pc, #32]	; (3fe0 <prefix_print+0x10c>)
    3fc0:	e7c2      	b.n	3f48 <prefix_print+0x74>
    3fc2:	bf00      	nop
    3fc4:	000236d5 	.word	0x000236d5
    3fc8:	00021e54 	.word	0x00021e54
    3fcc:	00024725 	.word	0x00024725
    3fd0:	000236c7 	.word	0x000236c7
    3fd4:	00021e68 	.word	0x00021e68
    3fd8:	000236fa 	.word	0x000236fa
    3fdc:	000236d1 	.word	0x000236d1
    3fe0:	000236cc 	.word	0x000236cc
    3fe4:	200013b0 	.word	0x200013b0
    3fe8:	200013b4 	.word	0x200013b4
    3fec:	000236de 	.word	0x000236de

00003ff0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    3ff0:	b538      	push	{r3, r4, r5, lr}
    3ff2:	460c      	mov	r4, r1
	if (color) {
    3ff4:	07e1      	lsls	r1, r4, #31
{
    3ff6:	4605      	mov	r5, r0
	if (color) {
    3ff8:	d503      	bpl.n	4002 <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    3ffa:	4a08      	ldr	r2, [pc, #32]	; (401c <postfix_print+0x2c>)
    3ffc:	4908      	ldr	r1, [pc, #32]	; (4020 <postfix_print+0x30>)
    3ffe:	f7ff ff57 	bl	3eb0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4002:	06e2      	lsls	r2, r4, #27
    4004:	d408      	bmi.n	4018 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    4006:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    4008:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    400a:	bf4c      	ite	mi
    400c:	4905      	ldrmi	r1, [pc, #20]	; (4024 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    400e:	4906      	ldrpl	r1, [pc, #24]	; (4028 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    4010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    4014:	f7ff bf4c 	b.w	3eb0 <print_formatted>
}
    4018:	bd38      	pop	{r3, r4, r5, pc}
    401a:	bf00      	nop
    401c:	000236c7 	.word	0x000236c7
    4020:	00024725 	.word	0x00024725
    4024:	00023701 	.word	0x00023701
    4028:	00023700 	.word	0x00023700

0000402c <hexdump_line_print>:
{
    402c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4030:	461d      	mov	r5, r3
    4032:	9b08      	ldr	r3, [sp, #32]
    4034:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    4036:	06da      	lsls	r2, r3, #27
{
    4038:	4604      	mov	r4, r0
    403a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    403c:	d405      	bmi.n	404a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    403e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    4040:	bf4c      	ite	mi
    4042:	492a      	ldrmi	r1, [pc, #168]	; (40ec <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    4044:	492a      	ldrpl	r1, [pc, #168]	; (40f0 <hexdump_line_print+0xc4>)
    4046:	f7ff ff33 	bl	3eb0 <print_formatted>
		print_formatted(log_output, " ");
    404a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 40f8 <hexdump_line_print+0xcc>
{
    404e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    4052:	45a8      	cmp	r8, r5
    4054:	db2a      	blt.n	40ac <hexdump_line_print+0x80>
			print_formatted(log_output, "   ");
    4056:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 40fc <hexdump_line_print+0xd0>
			print_formatted(log_output, "%02x ", data[i]);
    405a:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 4100 <hexdump_line_print+0xd4>
			print_formatted(log_output, " ");
    405e:	f8df a098 	ldr.w	sl, [pc, #152]	; 40f8 <hexdump_line_print+0xcc>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4062:	2500      	movs	r5, #0
		if (i < length) {
    4064:	42bd      	cmp	r5, r7
    4066:	d22f      	bcs.n	40c8 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    4068:	5d72      	ldrb	r2, [r6, r5]
    406a:	4649      	mov	r1, r9
    406c:	4620      	mov	r0, r4
    406e:	f7ff ff1f 	bl	3eb0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4072:	3501      	adds	r5, #1
    4074:	2d10      	cmp	r5, #16
    4076:	d120      	bne.n	40ba <hexdump_line_print+0x8e>
	print_formatted(log_output, "|");
    4078:	491e      	ldr	r1, [pc, #120]	; (40f4 <hexdump_line_print+0xc8>)
			print_formatted(log_output, " ");
    407a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 40f8 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%c",
    407e:	f8df 9084 	ldr.w	r9, [pc, #132]	; 4104 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    4082:	4620      	mov	r0, r4
    4084:	f7ff ff14 	bl	3eb0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    4088:	2500      	movs	r5, #0
		if (i < length) {
    408a:	42af      	cmp	r7, r5
    408c:	d928      	bls.n	40e0 <hexdump_line_print+0xb4>
			      isprint((int)c) ? c : '.');
    408e:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    4090:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
    4094:	2b5f      	cmp	r3, #95	; 0x5f
    4096:	bf28      	it	cs
    4098:	222e      	movcs	r2, #46	; 0x2e
    409a:	4649      	mov	r1, r9
    409c:	4620      	mov	r0, r4
    409e:	f7ff ff07 	bl	3eb0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    40a2:	3501      	adds	r5, #1
    40a4:	2d10      	cmp	r5, #16
    40a6:	d114      	bne.n	40d2 <hexdump_line_print+0xa6>
}
    40a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    40ac:	4649      	mov	r1, r9
    40ae:	4620      	mov	r0, r4
    40b0:	f7ff fefe 	bl	3eb0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    40b4:	f108 0801 	add.w	r8, r8, #1
    40b8:	e7cb      	b.n	4052 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    40ba:	076a      	lsls	r2, r5, #29
    40bc:	d1d2      	bne.n	4064 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    40be:	4651      	mov	r1, sl
    40c0:	4620      	mov	r0, r4
    40c2:	f7ff fef5 	bl	3eb0 <print_formatted>
    40c6:	e7cd      	b.n	4064 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    40c8:	4641      	mov	r1, r8
    40ca:	4620      	mov	r0, r4
    40cc:	f7ff fef0 	bl	3eb0 <print_formatted>
    40d0:	e7cf      	b.n	4072 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    40d2:	076b      	lsls	r3, r5, #29
    40d4:	d1d9      	bne.n	408a <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    40d6:	4641      	mov	r1, r8
    40d8:	4620      	mov	r0, r4
    40da:	f7ff fee9 	bl	3eb0 <print_formatted>
    40de:	e7d4      	b.n	408a <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    40e0:	4641      	mov	r1, r8
    40e2:	4620      	mov	r0, r4
    40e4:	f7ff fee4 	bl	3eb0 <print_formatted>
    40e8:	e7db      	b.n	40a2 <hexdump_line_print+0x76>
    40ea:	bf00      	nop
    40ec:	00023701 	.word	0x00023701
    40f0:	00023700 	.word	0x00023700
    40f4:	0002370d 	.word	0x0002370d
    40f8:	0002370b 	.word	0x0002370b
    40fc:	00023709 	.word	0x00023709
    4100:	00023703 	.word	0x00023703
    4104:	0002370f 	.word	0x0002370f

00004108 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    4108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    410c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    410e:	f013 0807 	ands.w	r8, r3, #7
{
    4112:	4617      	mov	r7, r2
    4114:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4116:	7a0a      	ldrb	r2, [r1, #8]
    4118:	4605      	mov	r5, r0
    411a:	460e      	mov	r6, r1
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    411c:	d020      	beq.n	4160 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
    411e:	8949      	ldrh	r1, [r1, #10]
    4120:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    4124:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    4126:	43d2      	mvns	r2, r2
    4128:	e9cd 8300 	strd	r8, r3, [sp]
    412c:	9102      	str	r1, [sp, #8]
    412e:	68f3      	ldr	r3, [r6, #12]
    4130:	f002 0201 	and.w	r2, r2, #1
    4134:	4639      	mov	r1, r7
    4136:	f7ff fecd 	bl	3ed4 <prefix_print>
    413a:	4681      	mov	r9, r0
    413c:	7a34      	ldrb	r4, [r6, #8]
    413e:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    4140:	f014 0401 	ands.w	r4, r4, #1
    4144:	d00e      	beq.n	4164 <log_output_msg_process+0x5c>
		std_print(msg, log_output);
    4146:	4629      	mov	r1, r5
    4148:	4630      	mov	r0, r6
    414a:	f018 fff1 	bl	1d130 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    414e:	f1b8 0f00 	cmp.w	r8, #0
    4152:	d02b      	beq.n	41ac <log_output_msg_process+0xa4>
		postfix_print(log_output, flags, level);
    4154:	4642      	mov	r2, r8
    4156:	4639      	mov	r1, r7
    4158:	4628      	mov	r0, r5
    415a:	f7ff ff49 	bl	3ff0 <postfix_print>
    415e:	e025      	b.n	41ac <log_output_msg_process+0xa4>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    4160:	46c1      	mov	r9, r8
    4162:	e7eb      	b.n	413c <log_output_msg_process+0x34>
	} else if (raw_string) {
    4164:	f1b8 0f00 	cmp.w	r8, #0
    4168:	d126      	bne.n	41b8 <log_output_msg_process+0xb0>
	size_t offset = 0;
    416a:	4627      	mov	r7, r4
		length = log_output->size;
    416c:	68eb      	ldr	r3, [r5, #12]
    416e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    4170:	aa06      	add	r2, sp, #24
    4172:	463b      	mov	r3, r7
    4174:	68a9      	ldr	r1, [r5, #8]
    4176:	4630      	mov	r0, r6
    4178:	f018 ffc6 	bl	1d108 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    417c:	9a06      	ldr	r2, [sp, #24]
    417e:	686b      	ldr	r3, [r5, #4]
    4180:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    4182:	b13a      	cbz	r2, 4194 <log_output_msg_process+0x8c>
			eol = (log_output->buf[length - 1] == '\n');
    4184:	68ab      	ldr	r3, [r5, #8]
    4186:	4413      	add	r3, r2
    4188:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    418c:	f1a4 030a 	sub.w	r3, r4, #10
    4190:	425c      	negs	r4, r3
    4192:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    4194:	4628      	mov	r0, r5
    4196:	f019 f928 	bl	1d3ea <log_output_flush>
		offset += length;
    419a:	9b06      	ldr	r3, [sp, #24]
    419c:	441f      	add	r7, r3
	} while (length > 0);
    419e:	2b00      	cmp	r3, #0
    41a0:	d1e4      	bne.n	416c <log_output_msg_process+0x64>
	if (eol) {
    41a2:	b11c      	cbz	r4, 41ac <log_output_msg_process+0xa4>
		print_formatted(log_output, "\r");
    41a4:	4913      	ldr	r1, [pc, #76]	; (41f4 <log_output_msg_process+0xec>)
    41a6:	4628      	mov	r0, r5
    41a8:	f7ff fe82 	bl	3eb0 <print_formatted>
	}

	log_output_flush(log_output);
    41ac:	4628      	mov	r0, r5
    41ae:	f019 f91c 	bl	1d3ea <log_output_flush>
}
    41b2:	b00a      	add	sp, #40	; 0x28
    41b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    41b8:	4630      	mov	r0, r6
    41ba:	f018 ff4f 	bl	1d05c <log_msg_str_get>
    41be:	490e      	ldr	r1, [pc, #56]	; (41f8 <log_output_msg_process+0xf0>)
    41c0:	4602      	mov	r2, r0
    41c2:	4628      	mov	r0, r5
    41c4:	f7ff fe74 	bl	3eb0 <print_formatted>
		length = sizeof(buf);
    41c8:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    41cc:	aa05      	add	r2, sp, #20
    41ce:	4623      	mov	r3, r4
    41d0:	a906      	add	r1, sp, #24
    41d2:	4630      	mov	r0, r6
		length = sizeof(buf);
    41d4:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    41d8:	f018 ff96 	bl	1d108 <log_msg_hexdump_data_get>
		if (length) {
    41dc:	9a05      	ldr	r2, [sp, #20]
    41de:	2a00      	cmp	r2, #0
    41e0:	d0b8      	beq.n	4154 <log_output_msg_process+0x4c>
			hexdump_line_print(log_output, buf, length,
    41e2:	464b      	mov	r3, r9
    41e4:	9700      	str	r7, [sp, #0]
    41e6:	a906      	add	r1, sp, #24
    41e8:	4628      	mov	r0, r5
    41ea:	f7ff ff1f 	bl	402c <hexdump_line_print>
			offset += length;
    41ee:	9b05      	ldr	r3, [sp, #20]
    41f0:	441c      	add	r4, r3
		length = sizeof(buf);
    41f2:	e7eb      	b.n	41cc <log_output_msg_process+0xc4>
    41f4:	00023712 	.word	0x00023712
    41f8:	00024725 	.word	0x00024725

000041fc <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    41fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    41fe:	e9d0 4300 	ldrd	r4, r3, [r0]
    4202:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    4204:	4a0f      	ldr	r2, [pc, #60]	; (4244 <log_output_dropped_process+0x48>)
    4206:	f242 730f 	movw	r3, #9999	; 0x270f
    420a:	428b      	cmp	r3, r1
    420c:	bf28      	it	cs
    420e:	460b      	movcs	r3, r1
    4210:	4668      	mov	r0, sp
    4212:	2105      	movs	r1, #5
    4214:	f018 fae2 	bl	1c7dc <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    4218:	462b      	mov	r3, r5
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    421a:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1, dev);
    421c:	490a      	ldr	r1, [pc, #40]	; (4248 <log_output_dropped_process+0x4c>)
    421e:	4620      	mov	r0, r4
    4220:	220b      	movs	r2, #11
    4222:	f018 ff78 	bl	1d116 <buffer_write>
	buffer_write(outf, buf, len, dev);
    4226:	462b      	mov	r3, r5
    4228:	4632      	mov	r2, r6
    422a:	4669      	mov	r1, sp
    422c:	4620      	mov	r0, r4
    422e:	f018 ff72 	bl	1d116 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1, dev);
    4232:	4906      	ldr	r1, [pc, #24]	; (424c <log_output_dropped_process+0x50>)
    4234:	462b      	mov	r3, r5
    4236:	221b      	movs	r2, #27
    4238:	4620      	mov	r0, r4
    423a:	f018 ff6c 	bl	1d116 <buffer_write>
}
    423e:	b002      	add	sp, #8
    4240:	bd70      	pop	{r4, r5, r6, pc}
    4242:	bf00      	nop
    4244:	00025104 	.word	0x00025104
    4248:	00023750 	.word	0x00023750
    424c:	00023734 	.word	0x00023734

00004250 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    4250:	4a08      	ldr	r2, [pc, #32]	; (4274 <log_output_timestamp_freq_set+0x24>)
{
    4252:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    4254:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    4256:	4c08      	ldr	r4, [pc, #32]	; (4278 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    4258:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    425a:	2100      	movs	r1, #0
    425c:	42a0      	cmp	r0, r4
    425e:	d804      	bhi.n	426a <log_output_timestamp_freq_set+0x1a>
    4260:	b101      	cbz	r1, 4264 <log_output_timestamp_freq_set+0x14>
    4262:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    4264:	4b05      	ldr	r3, [pc, #20]	; (427c <log_output_timestamp_freq_set+0x2c>)
    4266:	6018      	str	r0, [r3, #0]
}
    4268:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    426a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    426c:	005b      	lsls	r3, r3, #1
    426e:	2101      	movs	r1, #1
    4270:	e7f4      	b.n	425c <log_output_timestamp_freq_set+0xc>
    4272:	bf00      	nop
    4274:	200013b4 	.word	0x200013b4
    4278:	000f4240 	.word	0x000f4240
    427c:	200013b0 	.word	0x200013b0

00004280 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    4280:	4801      	ldr	r0, [pc, #4]	; (4288 <panic+0x8>)
    4282:	f019 b8b2 	b.w	1d3ea <log_output_flush>
    4286:	bf00      	nop
    4288:	00021e94 	.word	0x00021e94

0000428c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    428c:	4801      	ldr	r0, [pc, #4]	; (4294 <dropped+0x8>)
    428e:	f7ff bfb5 	b.w	41fc <log_output_dropped_process>
    4292:	bf00      	nop
    4294:	00021e94 	.word	0x00021e94

00004298 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    4298:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    429a:	4803      	ldr	r0, [pc, #12]	; (42a8 <log_backend_uart_init+0x10>)
    429c:	f016 fef6 	bl	1b08c <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    42a0:	4b02      	ldr	r3, [pc, #8]	; (42ac <log_backend_uart_init+0x14>)
    42a2:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output_uart, dev);
}
    42a4:	bd08      	pop	{r3, pc}
    42a6:	bf00      	nop
    42a8:	0002375c 	.word	0x0002375c
    42ac:	200013c0 	.word	0x200013c0

000042b0 <put>:
{
    42b0:	b510      	push	{r4, lr}
	log_msg_get(msg);
    42b2:	4608      	mov	r0, r1
    42b4:	460c      	mov	r4, r1
    42b6:	f018 fe8f 	bl	1cfd8 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    42ba:	4805      	ldr	r0, [pc, #20]	; (42d0 <put+0x20>)
    42bc:	4621      	mov	r1, r4
    42be:	220f      	movs	r2, #15
    42c0:	f7ff ff22 	bl	4108 <log_output_msg_process>
	log_msg_put(msg);
    42c4:	4620      	mov	r0, r4
}
    42c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    42ca:	f018 beb4 	b.w	1d036 <log_msg_put>
    42ce:	bf00      	nop
    42d0:	00021e94 	.word	0x00021e94

000042d4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    42d4:	4b01      	ldr	r3, [pc, #4]	; (42dc <log_backend_rtt_init+0x8>)
    42d6:	2201      	movs	r2, #1
    42d8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    42da:	4770      	bx	lr
    42dc:	20002b02 	.word	0x20002b02

000042e0 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    42e0:	4b02      	ldr	r3, [pc, #8]	; (42ec <panic+0xc>)
	log_output_flush(log_output);
    42e2:	4803      	ldr	r0, [pc, #12]	; (42f0 <panic+0x10>)
    42e4:	2201      	movs	r2, #1
    42e6:	701a      	strb	r2, [r3, #0]
    42e8:	f019 b87f 	b.w	1d3ea <log_output_flush>
    42ec:	20002b03 	.word	0x20002b03
    42f0:	00021ebc 	.word	0x00021ebc

000042f4 <dropped>:
	log_output_dropped_process(log_output, cnt);
    42f4:	4801      	ldr	r0, [pc, #4]	; (42fc <dropped+0x8>)
    42f6:	f7ff bf81 	b.w	41fc <log_output_dropped_process>
    42fa:	bf00      	nop
    42fc:	00021ebc 	.word	0x00021ebc

00004300 <put>:
{
    4300:	b510      	push	{r4, lr}
	log_msg_get(msg);
    4302:	4608      	mov	r0, r1
    4304:	460c      	mov	r4, r1
    4306:	f018 fe67 	bl	1cfd8 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    430a:	4805      	ldr	r0, [pc, #20]	; (4320 <put+0x20>)
    430c:	4621      	mov	r1, r4
    430e:	220f      	movs	r2, #15
    4310:	f7ff fefa 	bl	4108 <log_output_msg_process>
	log_msg_put(msg);
    4314:	4620      	mov	r0, r4
}
    4316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    431a:	f018 be8c 	b.w	1d036 <log_msg_put>
    431e:	bf00      	nop
    4320:	00021ebc 	.word	0x00021ebc

00004324 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4324:	4b05      	ldr	r3, [pc, #20]	; (433c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    4326:	781b      	ldrb	r3, [r3, #0]
    4328:	b11b      	cbz	r3, 4332 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    432a:	f241 3088 	movw	r0, #5000	; 0x1388
    432e:	f01d b816 	b.w	2135e <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    4332:	20a4      	movs	r0, #164	; 0xa4
    4334:	2100      	movs	r1, #0
    4336:	f017 bcdf 	b.w	1bcf8 <z_impl_k_sleep>
    433a:	bf00      	nop
    433c:	20002b03 	.word	0x20002b03

00004340 <data_out_block_mode>:
{
    4340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    4344:	f8df 9090 	ldr.w	r9, [pc, #144]	; 43d8 <data_out_block_mode+0x98>
	return z_impl_k_mutex_lock(mutex, timeout);
    4348:	f8df b090 	ldr.w	fp, [pc, #144]	; 43dc <data_out_block_mode+0x9c>
{
    434c:	4607      	mov	r7, r0
    434e:	460e      	mov	r6, r1
	int retry_cnt = CONFIG_LOG_BACKEND_RTT_RETRY_CNT;
    4350:	2404      	movs	r4, #4
    4352:	46ca      	mov	sl, r9
		if (!is_sync_mode()) {
    4354:	f899 3000 	ldrb.w	r3, [r9]
    4358:	b933      	cbnz	r3, 4368 <data_out_block_mode+0x28>
    435a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    435e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4362:	4658      	mov	r0, fp
    4364:	f017 f8ac 	bl	1b4c0 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4368:	4632      	mov	r2, r6
    436a:	4639      	mov	r1, r7
    436c:	2000      	movs	r0, #0
    436e:	f001 fa23 	bl	57b8 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    4372:	f89a 3000 	ldrb.w	r3, [sl]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    4376:	4680      	mov	r8, r0
		if (!is_sync_mode()) {
    4378:	b913      	cbnz	r3, 4380 <data_out_block_mode+0x40>
	return z_impl_k_mutex_unlock(mutex);
    437a:	4658      	mov	r0, fp
    437c:	f017 f918 	bl	1b5b0 <z_impl_k_mutex_unlock>
		if (ret) {
    4380:	4d14      	ldr	r5, [pc, #80]	; (43d4 <data_out_block_mode+0x94>)
    4382:	f1b8 0f00 	cmp.w	r8, #0
    4386:	d018      	beq.n	43ba <data_out_block_mode+0x7a>
	host_present = true;
    4388:	2301      	movs	r3, #1
    438a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    438c:	f89a 3000 	ldrb.w	r3, [sl]
    4390:	b933      	cbnz	r3, 43a0 <data_out_block_mode+0x60>
}
    4392:	4630      	mov	r0, r6
    4394:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (retry_cnt == 0) {
    4398:	b95c      	cbnz	r4, 43b2 <data_out_block_mode+0x72>
		host_present = false;
    439a:	702c      	strb	r4, [r5, #0]
    439c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    43a0:	2000      	movs	r0, #0
    43a2:	f001 fa55 	bl	5850 <SEGGER_RTT_HasDataUp>
    43a6:	2800      	cmp	r0, #0
    43a8:	d0f3      	beq.n	4392 <data_out_block_mode+0x52>
    43aa:	782b      	ldrb	r3, [r5, #0]
    43ac:	2b00      	cmp	r3, #0
    43ae:	d1f3      	bne.n	4398 <data_out_block_mode+0x58>
    43b0:	e7ef      	b.n	4392 <data_out_block_mode+0x52>
			on_failed_write(retry_cnt--);
    43b2:	3c01      	subs	r4, #1
    43b4:	f7ff ffb6 	bl	4324 <on_failed_write.part.0>
    43b8:	e7f2      	b.n	43a0 <data_out_block_mode+0x60>
		} else if (host_present) {
    43ba:	782b      	ldrb	r3, [r5, #0]
    43bc:	b113      	cbz	r3, 43c4 <data_out_block_mode+0x84>
	if (retry_cnt == 0) {
    43be:	3c01      	subs	r4, #1
    43c0:	d104      	bne.n	43cc <data_out_block_mode+0x8c>
		host_present = false;
    43c2:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    43c4:	782b      	ldrb	r3, [r5, #0]
    43c6:	2b00      	cmp	r3, #0
    43c8:	d1c4      	bne.n	4354 <data_out_block_mode+0x14>
    43ca:	e7e2      	b.n	4392 <data_out_block_mode+0x52>
    43cc:	f7ff ffaa 	bl	4324 <on_failed_write.part.0>
    43d0:	e7f8      	b.n	43c4 <data_out_block_mode+0x84>
    43d2:	bf00      	nop
    43d4:	20002b02 	.word	0x20002b02
    43d8:	20002b03 	.word	0x20002b03
    43dc:	20000918 	.word	0x20000918

000043e0 <read_pnp_id>:

#if CONFIG_BT_GATT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    43e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    43e2:	2407      	movs	r4, #7
    43e4:	9402      	str	r4, [sp, #8]
    43e6:	4c04      	ldr	r4, [pc, #16]	; (43f8 <read_pnp_id+0x18>)
    43e8:	9401      	str	r4, [sp, #4]
    43ea:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    43ee:	9400      	str	r4, [sp, #0]
    43f0:	f01b fef9 	bl	201e6 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    43f4:	b004      	add	sp, #16
    43f6:	bd10      	pop	{r4, pc}
    43f8:	20000845 	.word	0x20000845

000043fc <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    43fc:	4b07      	ldr	r3, [pc, #28]	; (441c <blvl_ccc_cfg_changed+0x20>)
    43fe:	4a08      	ldr	r2, [pc, #32]	; (4420 <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
    4400:	4808      	ldr	r0, [pc, #32]	; (4424 <blvl_ccc_cfg_changed+0x28>)
    4402:	1ad2      	subs	r2, r2, r3
    4404:	08d2      	lsrs	r2, r2, #3
    4406:	4b08      	ldr	r3, [pc, #32]	; (4428 <blvl_ccc_cfg_changed+0x2c>)
    4408:	0192      	lsls	r2, r2, #6
    440a:	2901      	cmp	r1, #1
    440c:	bf14      	ite	ne
    440e:	4601      	movne	r1, r0
    4410:	4619      	moveq	r1, r3
    4412:	f042 0203 	orr.w	r2, r2, #3
    4416:	4805      	ldr	r0, [pc, #20]	; (442c <blvl_ccc_cfg_changed+0x30>)
    4418:	f018 bd36 	b.w	1ce88 <log_1>
    441c:	00021aac 	.word	0x00021aac
    4420:	00021aac 	.word	0x00021aac
    4424:	000237ae 	.word	0x000237ae
    4428:	000237a6 	.word	0x000237a6
    442c:	000237b7 	.word	0x000237b7

00004430 <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
    4430:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
    4432:	4c08      	ldr	r4, [pc, #32]	; (4454 <read_blvl+0x24>)
{
    4434:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
    4436:	7824      	ldrb	r4, [r4, #0]
    4438:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
    443c:	2401      	movs	r4, #1
    443e:	9402      	str	r4, [sp, #8]
    4440:	f10d 0417 	add.w	r4, sp, #23
    4444:	9401      	str	r4, [sp, #4]
    4446:	f8bd 4020 	ldrh.w	r4, [sp, #32]
    444a:	9400      	str	r4, [sp, #0]
    444c:	f01b fecb 	bl	201e6 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
    4450:	b006      	add	sp, #24
    4452:	bd10      	pop	{r4, pc}
    4454:	2000084c 	.word	0x2000084c

00004458 <bt_gatt_bas_get_battery_level>:
}

uint8_t bt_gatt_bas_get_battery_level(void)
{
	return battery_level;
}
    4458:	4b01      	ldr	r3, [pc, #4]	; (4460 <bt_gatt_bas_get_battery_level+0x8>)
    445a:	7818      	ldrb	r0, [r3, #0]
    445c:	4770      	bx	lr
    445e:	bf00      	nop
    4460:	2000084c 	.word	0x2000084c

00004464 <bt_gatt_bas_set_battery_level>:

int bt_gatt_bas_set_battery_level(uint8_t level)
{
    4464:	b500      	push	{lr}
    4466:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
    4468:	2864      	cmp	r0, #100	; 0x64
{
    446a:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
    446e:	d819      	bhi.n	44a4 <bt_gatt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
    4470:	4b0e      	ldr	r3, [pc, #56]	; (44ac <bt_gatt_bas_set_battery_level+0x48>)
	memset(&params, 0, sizeof(params));
    4472:	2218      	movs	r2, #24
    4474:	7018      	strb	r0, [r3, #0]
    4476:	2100      	movs	r1, #0
    4478:	a802      	add	r0, sp, #8
    447a:	f01a fce5 	bl	1ee48 <memset>
	params.attr = attr;
    447e:	4b0c      	ldr	r3, [pc, #48]	; (44b0 <bt_gatt_bas_set_battery_level+0x4c>)
    4480:	9303      	str	r3, [sp, #12]
	params.data = data;
    4482:	f10d 0307 	add.w	r3, sp, #7
    4486:	9304      	str	r3, [sp, #16]
	return bt_gatt_notify_cb(conn, &params);
    4488:	a902      	add	r1, sp, #8
	params.len = len;
    448a:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    448c:	2000      	movs	r0, #0
	params.len = len;
    448e:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
    4492:	f008 f8c3 	bl	c61c <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
    4496:	f110 0f39 	cmn.w	r0, #57	; 0x39
    449a:	bf08      	it	eq
    449c:	2000      	moveq	r0, #0
}
    449e:	b009      	add	sp, #36	; 0x24
    44a0:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
    44a4:	f06f 0015 	mvn.w	r0, #21
    44a8:	e7f9      	b.n	449e <bt_gatt_bas_set_battery_level+0x3a>
    44aa:	bf00      	nop
    44ac:	2000084c 	.word	0x2000084c
    44b0:	00021f6c 	.word	0x00021f6c

000044b4 <hrs_init>:

static int hrs_init(struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    44b4:	4b02      	ldr	r3, [pc, #8]	; (44c0 <hrs_init+0xc>)
    44b6:	2201      	movs	r2, #1
    44b8:	701a      	strb	r2, [r3, #0]

	return 0;
}
    44ba:	2000      	movs	r0, #0
    44bc:	4770      	bx	lr
    44be:	bf00      	nop
    44c0:	20002b06 	.word	0x20002b06

000044c4 <read_blsc>:
{
    44c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    44c6:	2401      	movs	r4, #1
    44c8:	9402      	str	r4, [sp, #8]
    44ca:	4c04      	ldr	r4, [pc, #16]	; (44dc <read_blsc+0x18>)
    44cc:	9401      	str	r4, [sp, #4]
    44ce:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    44d2:	9400      	str	r4, [sp, #0]
    44d4:	f01b fe87 	bl	201e6 <bt_gatt_attr_read>
}
    44d8:	b004      	add	sp, #16
    44da:	bd10      	pop	{r4, pc}
    44dc:	20002b06 	.word	0x20002b06

000044e0 <hrmc_ccc_cfg_changed>:
    44e0:	4b07      	ldr	r3, [pc, #28]	; (4500 <hrmc_ccc_cfg_changed+0x20>)
    44e2:	4a08      	ldr	r2, [pc, #32]	; (4504 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    44e4:	4808      	ldr	r0, [pc, #32]	; (4508 <hrmc_ccc_cfg_changed+0x28>)
    44e6:	1ad2      	subs	r2, r2, r3
    44e8:	08d2      	lsrs	r2, r2, #3
    44ea:	4b08      	ldr	r3, [pc, #32]	; (450c <hrmc_ccc_cfg_changed+0x2c>)
    44ec:	0192      	lsls	r2, r2, #6
    44ee:	2901      	cmp	r1, #1
    44f0:	bf14      	ite	ne
    44f2:	4601      	movne	r1, r0
    44f4:	4619      	moveq	r1, r3
    44f6:	f042 0203 	orr.w	r2, r2, #3
    44fa:	4805      	ldr	r0, [pc, #20]	; (4510 <hrmc_ccc_cfg_changed+0x30>)
    44fc:	f018 bcc4 	b.w	1ce88 <log_1>
    4500:	00021aac 	.word	0x00021aac
    4504:	00021bb4 	.word	0x00021bb4
    4508:	000237ae 	.word	0x000237ae
    450c:	000237a6 	.word	0x000237a6
    4510:	000237d0 	.word	0x000237d0

00004514 <bt_gatt_hrs_notify>:

int bt_gatt_hrs_notify(uint16_t heartrate)
{
    4514:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    4516:	4c0d      	ldr	r4, [pc, #52]	; (454c <bt_gatt_hrs_notify+0x38>)
{
    4518:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    451a:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    451c:	7060      	strb	r0, [r4, #1]
	memset(&params, 0, sizeof(params));
    451e:	2218      	movs	r2, #24
    4520:	2100      	movs	r1, #0
    4522:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    4524:	7023      	strb	r3, [r4, #0]
    4526:	f01a fc8f 	bl	1ee48 <memset>
	params.attr = attr;
    452a:	4b09      	ldr	r3, [pc, #36]	; (4550 <bt_gatt_hrs_notify+0x3c>)
	return bt_gatt_notify_cb(conn, &params);
    452c:	4669      	mov	r1, sp
	params.data = data;
    452e:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    4532:	2000      	movs	r0, #0
	params.len = len;
    4534:	2302      	movs	r3, #2
    4536:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    453a:	f008 f86f 	bl	c61c <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
}
    453e:	f110 0f39 	cmn.w	r0, #57	; 0x39
    4542:	bf08      	it	eq
    4544:	2000      	moveq	r0, #0
    4546:	b006      	add	sp, #24
    4548:	bd10      	pop	{r4, pc}
    454a:	bf00      	nop
    454c:	20002b04 	.word	0x20002b04
    4550:	00021fbc 	.word	0x00021fbc

00004554 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    4554:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    4558:	460e      	mov	r6, r1
    455a:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    455c:	2108      	movs	r1, #8
    455e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4560:	f019 f80c 	bl	1d57c <nvs_al_size.isra.0>

	*addr -= ate_size;
    4564:	6834      	ldr	r4, [r6, #0]
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    4566:	4b12      	ldr	r3, [pc, #72]	; (45b0 <nvs_recover_last_ate+0x5c>)
	*addr -= ate_size;
    4568:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    456a:	4607      	mov	r7, r0
	*addr -= ate_size;
    456c:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    456e:	ea04 0503 	and.w	r5, r4, r3
		if (rc) {
			return rc;
		}
		if (!nvs_ate_crc8_check(&end_ate)) {
			/* found a valid ate, update data_end_addr and *addr */
			data_end_addr &= ADDR_SECT_MASK;
    4572:	4699      	mov	r9, r3
	while (ate_end_addr > data_end_addr) {
    4574:	42ac      	cmp	r4, r5
    4576:	d803      	bhi.n	4580 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    4578:	2000      	movs	r0, #0
}
    457a:	b003      	add	sp, #12
    457c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4580:	2308      	movs	r3, #8
    4582:	466a      	mov	r2, sp
    4584:	4621      	mov	r1, r4
    4586:	4640      	mov	r0, r8
    4588:	f018 ff86 	bl	1d498 <nvs_flash_rd>
		if (rc) {
    458c:	2800      	cmp	r0, #0
    458e:	d1f4      	bne.n	457a <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    4590:	4668      	mov	r0, sp
    4592:	f018 ffde 	bl	1d552 <nvs_ate_crc8_check>
    4596:	b940      	cbnz	r0, 45aa <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    4598:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    459c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    45a0:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
    45a2:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    45a6:	4413      	add	r3, r2
    45a8:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    45aa:	1be4      	subs	r4, r4, r7
    45ac:	e7e2      	b.n	4574 <nvs_recover_last_ate+0x20>
    45ae:	bf00      	nop
    45b0:	ffff0000 	.word	0xffff0000

000045b4 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    45b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    45b8:	4605      	mov	r5, r0
    45ba:	b095      	sub	sp, #84	; 0x54
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    45bc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    45be:	2108      	movs	r1, #8
    45c0:	f018 ffdc 	bl	1d57c <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    45c4:	686b      	ldr	r3, [r5, #4]
    45c6:	0c1b      	lsrs	r3, r3, #16
    45c8:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    45ca:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
    45cc:	a903      	add	r1, sp, #12
    45ce:	89e8      	ldrh	r0, [r5, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    45d0:	9303      	str	r3, [sp, #12]
	nvs_sector_advance(fs, &sec_addr);
    45d2:	f018 ffdd 	bl	1d590 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    45d6:	9b03      	ldr	r3, [sp, #12]
    45d8:	89a9      	ldrh	r1, [r5, #12]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    45da:	ae06      	add	r6, sp, #24
	gc_addr = sec_addr + fs->sector_size - ate_size;
    45dc:	4419      	add	r1, r3
    45de:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    45e2:	2308      	movs	r3, #8
    45e4:	4632      	mov	r2, r6
    45e6:	4628      	mov	r0, r5
	gc_addr = sec_addr + fs->sector_size - ate_size;
    45e8:	9104      	str	r1, [sp, #16]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    45ea:	f018 ff55 	bl	1d498 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    45ee:	1e04      	subs	r4, r0, #0
    45f0:	f2c0 8099 	blt.w	4726 <nvs_gc+0x172>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    45f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    45f6:	791a      	ldrb	r2, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    45f8:	2300      	movs	r3, #0
		if (data8[i] != value) {
    45fa:	5cf1      	ldrb	r1, [r6, r3]
    45fc:	4291      	cmp	r1, r2
    45fe:	f040 8081 	bne.w	4704 <nvs_gc+0x150>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4602:	3301      	adds	r3, #1
    4604:	2b08      	cmp	r3, #8
    4606:	d1f8      	bne.n	45fa <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    4608:	9903      	ldr	r1, [sp, #12]
    460a:	4628      	mov	r0, r5
    460c:	f018 ffcb 	bl	1d5a6 <nvs_flash_erase_sector>
    4610:	4604      	mov	r4, r0
		if (rc) {
    4612:	e088      	b.n	4726 <nvs_gc+0x172>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    4614:	9b04      	ldr	r3, [sp, #16]
		gc_addr += close_ate.offset;
    4616:	f8bd 201a 	ldrh.w	r2, [sp, #26]
		gc_addr &= ADDR_SECT_MASK;
    461a:	0c1b      	lsrs	r3, r3, #16
    461c:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    461e:	4413      	add	r3, r2
    4620:	9304      	str	r3, [sp, #16]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    4622:	f8df b10c 	ldr.w	fp, [pc, #268]	; 4730 <nvs_gc+0x17c>
		gc_prev_addr = gc_addr;
    4626:	f8dd a010 	ldr.w	sl, [sp, #16]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    462a:	aa08      	add	r2, sp, #32
    462c:	a904      	add	r1, sp, #16
    462e:	4628      	mov	r0, r5
    4630:	f018 ffe1 	bl	1d5f6 <nvs_prev_ate>
		if (rc) {
    4634:	4604      	mov	r4, r0
    4636:	2800      	cmp	r0, #0
    4638:	d175      	bne.n	4726 <nvs_gc+0x172>
		if (nvs_ate_crc8_check(&gc_ate)) {
    463a:	a808      	add	r0, sp, #32
    463c:	f018 ff89 	bl	1d552 <nvs_ate_crc8_check>
    4640:	2800      	cmp	r0, #0
    4642:	d136      	bne.n	46b2 <nvs_gc+0xfe>
		wlk_addr = fs->ate_wra;
    4644:	686b      	ldr	r3, [r5, #4]
    4646:	9305      	str	r3, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4648:	aa0a      	add	r2, sp, #40	; 0x28
    464a:	a905      	add	r1, sp, #20
    464c:	4628      	mov	r0, r5
			wlk_prev_addr = wlk_addr;
    464e:	9e05      	ldr	r6, [sp, #20]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4650:	f018 ffd1 	bl	1d5f6 <nvs_prev_ate>
			if (rc) {
    4654:	4604      	mov	r4, r0
    4656:	2800      	cmp	r0, #0
    4658:	d165      	bne.n	4726 <nvs_gc+0x172>
			if ((wlk_ate.id == gc_ate.id) &&
    465a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    465e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    4662:	429a      	cmp	r2, r3
    4664:	d028      	beq.n	46b8 <nvs_gc+0x104>
		} while (wlk_addr != fs->ate_wra);
    4666:	686a      	ldr	r2, [r5, #4]
    4668:	9b05      	ldr	r3, [sp, #20]
    466a:	429a      	cmp	r2, r3
    466c:	d1ec      	bne.n	4648 <nvs_gc+0x94>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    466e:	4556      	cmp	r6, sl
    4670:	d11f      	bne.n	46b2 <nvs_gc+0xfe>
    4672:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
    4676:	b1e3      	cbz	r3, 46b2 <nvs_gc+0xfe>
			data_addr += gc_ate.offset;
    4678:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    467c:	ea0a 070b 	and.w	r7, sl, fp
			data_addr += gc_ate.offset;
    4680:	441f      	add	r7, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    4682:	a808      	add	r0, sp, #32
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    4684:	68ab      	ldr	r3, [r5, #8]
    4686:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			nvs_ate_crc8_update(&gc_ate);
    468a:	f018 ff6e 	bl	1d56a <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    468e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    4690:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    4694:	681e      	ldr	r6, [r3, #0]
    4696:	4276      	negs	r6, r6
	block_size =
    4698:	f006 0320 	and.w	r3, r6, #32
    469c:	9301      	str	r3, [sp, #4]
	while (len) {
    469e:	f1b9 0f00 	cmp.w	r9, #0
    46a2:	d10f      	bne.n	46c4 <nvs_gc+0x110>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    46a4:	a908      	add	r1, sp, #32
    46a6:	4628      	mov	r0, r5
    46a8:	f019 f83d 	bl	1d726 <nvs_flash_ate_wrt>
			if (rc) {
    46ac:	4604      	mov	r4, r0
    46ae:	2800      	cmp	r0, #0
    46b0:	d139      	bne.n	4726 <nvs_gc+0x172>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    46b2:	45c2      	cmp	sl, r8
    46b4:	d1b7      	bne.n	4626 <nvs_gc+0x72>
    46b6:	e7a7      	b.n	4608 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    46b8:	a80a      	add	r0, sp, #40	; 0x28
    46ba:	f018 ff4a 	bl	1d552 <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    46be:	2800      	cmp	r0, #0
    46c0:	d1d1      	bne.n	4666 <nvs_gc+0xb2>
    46c2:	e7d4      	b.n	466e <nvs_gc+0xba>
		bytes_to_copy = MIN(block_size, len);
    46c4:	9b01      	ldr	r3, [sp, #4]
    46c6:	454b      	cmp	r3, r9
    46c8:	bf28      	it	cs
    46ca:	464b      	movcs	r3, r9
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    46cc:	aa0c      	add	r2, sp, #48	; 0x30
    46ce:	4639      	mov	r1, r7
    46d0:	4628      	mov	r0, r5
		bytes_to_copy = MIN(block_size, len);
    46d2:	461e      	mov	r6, r3
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    46d4:	f018 fee0 	bl	1d498 <nvs_flash_rd>
		if (rc) {
    46d8:	4604      	mov	r4, r0
    46da:	bb20      	cbnz	r0, 4726 <nvs_gc+0x172>
	if (!len) {
    46dc:	b136      	cbz	r6, 46ec <nvs_gc+0x138>
    46de:	68a9      	ldr	r1, [r5, #8]
    46e0:	4633      	mov	r3, r6
    46e2:	aa0c      	add	r2, sp, #48	; 0x30
    46e4:	4628      	mov	r0, r5
    46e6:	f018 ffd6 	bl	1d696 <nvs_flash_al_wrt.part.0>
    46ea:	4604      	mov	r4, r0
	fs->data_wra += nvs_al_size(fs, len);
    46ec:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    46ee:	4631      	mov	r1, r6
    46f0:	f018 ff44 	bl	1d57c <nvs_al_size.isra.0>
    46f4:	68aa      	ldr	r2, [r5, #8]
    46f6:	4402      	add	r2, r0
    46f8:	60aa      	str	r2, [r5, #8]
		if (rc) {
    46fa:	b9a4      	cbnz	r4, 4726 <nvs_gc+0x172>
		len -= bytes_to_copy;
    46fc:	eba9 0906 	sub.w	r9, r9, r6
		addr += bytes_to_copy;
    4700:	4437      	add	r7, r6
    4702:	e7cc      	b.n	469e <nvs_gc+0xea>
	stop_addr = gc_addr - ate_size;
    4704:	9804      	ldr	r0, [sp, #16]
    4706:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    470a:	4630      	mov	r0, r6
    470c:	f018 ff21 	bl	1d552 <nvs_ate_crc8_check>
    4710:	2800      	cmp	r0, #0
    4712:	f43f af7f 	beq.w	4614 <nvs_gc+0x60>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    4716:	a904      	add	r1, sp, #16
    4718:	4628      	mov	r0, r5
    471a:	f7ff ff1b 	bl	4554 <nvs_recover_last_ate>
		if (rc) {
    471e:	4604      	mov	r4, r0
    4720:	2800      	cmp	r0, #0
    4722:	f43f af7e 	beq.w	4622 <nvs_gc+0x6e>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    4726:	4620      	mov	r0, r4
    4728:	b015      	add	sp, #84	; 0x54
    472a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    472e:	bf00      	nop
    4730:	ffff0000 	.word	0xffff0000

00004734 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    4734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4738:	4604      	mov	r4, r0
    473a:	b086      	sub	sp, #24
    473c:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    473e:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    4742:	4630      	mov	r0, r6
    4744:	f01c fc03 	bl	20f4e <z_impl_k_mutex_init>
    4748:	4628      	mov	r0, r5
    474a:	f016 fc9f 	bl	1b08c <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    474e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    4750:	b978      	cbnz	r0, 4772 <nvs_init+0x3e>
    4752:	4b9f      	ldr	r3, [pc, #636]	; (49d0 <nvs_init+0x29c>)
    4754:	499f      	ldr	r1, [pc, #636]	; (49d4 <nvs_init+0x2a0>)
		LOG_ERR("No valid flash device found");
    4756:	48a0      	ldr	r0, [pc, #640]	; (49d8 <nvs_init+0x2a4>)
    4758:	1ac9      	subs	r1, r1, r3
    475a:	08c9      	lsrs	r1, r1, #3
    475c:	0189      	lsls	r1, r1, #6
    475e:	f041 0101 	orr.w	r1, r1, #1
    4762:	f018 fb84 	bl	1ce6e <log_0>
		return -ENXIO;
    4766:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    476a:	4628      	mov	r0, r5
    476c:	b006      	add	sp, #24
    476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->driver_api;

	return api->get_parameters(dev);
    4772:	6883      	ldr	r3, [r0, #8]
    4774:	691b      	ldr	r3, [r3, #16]
    4776:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    4778:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    477a:	b960      	cbnz	r0, 4796 <nvs_init+0x62>
    477c:	4995      	ldr	r1, [pc, #596]	; (49d4 <nvs_init+0x2a0>)
    477e:	4b94      	ldr	r3, [pc, #592]	; (49d0 <nvs_init+0x29c>)
		LOG_ERR("Could not obtain flash parameters");
    4780:	4896      	ldr	r0, [pc, #600]	; (49dc <nvs_init+0x2a8>)
    4782:	1ac9      	subs	r1, r1, r3
    4784:	08c9      	lsrs	r1, r1, #3
    4786:	0189      	lsls	r1, r1, #6
    4788:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    478c:	f018 fb6f 	bl	1ce6e <log_0>
		return -EINVAL;
    4790:	f06f 0515 	mvn.w	r5, #21
    4794:	e7e9      	b.n	476a <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    4796:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    4798:	6883      	ldr	r3, [r0, #8]
    479a:	691b      	ldr	r3, [r3, #16]
    479c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    479e:	6803      	ldr	r3, [r0, #0]
    47a0:	3b01      	subs	r3, #1
    47a2:	2b1f      	cmp	r3, #31
    47a4:	d908      	bls.n	47b8 <nvs_init+0x84>
    47a6:	498b      	ldr	r1, [pc, #556]	; (49d4 <nvs_init+0x2a0>)
    47a8:	4b89      	ldr	r3, [pc, #548]	; (49d0 <nvs_init+0x29c>)
		LOG_ERR("Unsupported write block size");
    47aa:	488d      	ldr	r0, [pc, #564]	; (49e0 <nvs_init+0x2ac>)
    47ac:	1ac9      	subs	r1, r1, r3
    47ae:	08c9      	lsrs	r1, r1, #3
    47b0:	0189      	lsls	r1, r1, #6
    47b2:	f041 0101 	orr.w	r1, r1, #1
    47b6:	e7e9      	b.n	478c <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    47b8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    47ba:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    47bc:	aa03      	add	r2, sp, #12
    47be:	f01c fad3 	bl	20d68 <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    47c2:	b140      	cbz	r0, 47d6 <nvs_init+0xa2>
    47c4:	4983      	ldr	r1, [pc, #524]	; (49d4 <nvs_init+0x2a0>)
    47c6:	4b82      	ldr	r3, [pc, #520]	; (49d0 <nvs_init+0x29c>)
		LOG_ERR("Unable to get page info");
    47c8:	4886      	ldr	r0, [pc, #536]	; (49e4 <nvs_init+0x2b0>)
    47ca:	1ac9      	subs	r1, r1, r3
    47cc:	08c9      	lsrs	r1, r1, #3
    47ce:	0189      	lsls	r1, r1, #6
    47d0:	f041 0101 	orr.w	r1, r1, #1
    47d4:	e7da      	b.n	478c <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    47d6:	89a3      	ldrh	r3, [r4, #12]
    47d8:	b12b      	cbz	r3, 47e6 <nvs_init+0xb2>
    47da:	9a04      	ldr	r2, [sp, #16]
    47dc:	fbb3 f5f2 	udiv	r5, r3, r2
    47e0:	fb02 3515 	mls	r5, r2, r5, r3
    47e4:	b145      	cbz	r5, 47f8 <nvs_init+0xc4>
    47e6:	497b      	ldr	r1, [pc, #492]	; (49d4 <nvs_init+0x2a0>)
    47e8:	4b79      	ldr	r3, [pc, #484]	; (49d0 <nvs_init+0x29c>)
		LOG_ERR("Invalid sector size");
    47ea:	487f      	ldr	r0, [pc, #508]	; (49e8 <nvs_init+0x2b4>)
    47ec:	1ac9      	subs	r1, r1, r3
    47ee:	08c9      	lsrs	r1, r1, #3
    47f0:	0189      	lsls	r1, r1, #6
    47f2:	f041 0101 	orr.w	r1, r1, #1
    47f6:	e7c9      	b.n	478c <nvs_init+0x58>
	if (fs->sector_count < 2) {
    47f8:	89e3      	ldrh	r3, [r4, #14]
    47fa:	2b01      	cmp	r3, #1
    47fc:	d808      	bhi.n	4810 <nvs_init+0xdc>
    47fe:	4975      	ldr	r1, [pc, #468]	; (49d4 <nvs_init+0x2a0>)
    4800:	4b73      	ldr	r3, [pc, #460]	; (49d0 <nvs_init+0x29c>)
		LOG_ERR("Configuration error - sector count");
    4802:	487a      	ldr	r0, [pc, #488]	; (49ec <nvs_init+0x2b8>)
    4804:	1ac9      	subs	r1, r1, r3
    4806:	08c9      	lsrs	r1, r1, #3
    4808:	0189      	lsls	r1, r1, #6
    480a:	f041 0101 	orr.w	r1, r1, #1
    480e:	e7bd      	b.n	478c <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    4810:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    4812:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    4814:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    4818:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    481c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4820:	4630      	mov	r0, r6
    4822:	f016 fe4d 	bl	1b4c0 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4826:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4828:	2108      	movs	r1, #8
    482a:	f018 fea7 	bl	1d57c <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    482e:	462f      	mov	r7, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4830:	4680      	mov	r8, r0
	for (i = 0; i < fs->sector_count; i++) {
    4832:	89e3      	ldrh	r3, [r4, #14]
    4834:	fa1f fa85 	uxth.w	sl, r5
    4838:	4553      	cmp	r3, sl
    483a:	d86d      	bhi.n	4918 <nvs_init+0x1e4>
	if (closed_sectors == fs->sector_count) {
    483c:	89e3      	ldrh	r3, [r4, #14]
    483e:	42bb      	cmp	r3, r7
    4840:	f000 80a9 	beq.w	4996 <nvs_init+0x262>
	if (i == fs->sector_count) {
    4844:	459a      	cmp	sl, r3
    4846:	d10c      	bne.n	4862 <nvs_init+0x12e>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    4848:	9900      	ldr	r1, [sp, #0]
    484a:	2308      	movs	r3, #8
    484c:	464a      	mov	r2, r9
    484e:	eba1 0108 	sub.w	r1, r1, r8
    4852:	4620      	mov	r0, r4
    4854:	f018 fe58 	bl	1d508 <nvs_flash_cmp_const>
		if (!rc) {
    4858:	b918      	cbnz	r0, 4862 <nvs_init+0x12e>
			nvs_sector_advance(fs, &addr);
    485a:	89e0      	ldrh	r0, [r4, #14]
    485c:	4669      	mov	r1, sp
    485e:	f018 fe97 	bl	1d590 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    4862:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    4864:	4f62      	ldr	r7, [pc, #392]	; (49f0 <nvs_init+0x2bc>)
	fs->ate_wra = addr - ate_size;
    4866:	eba3 0208 	sub.w	r2, r3, r8
	fs->data_wra = addr & ADDR_SECT_MASK;
    486a:	403b      	ands	r3, r7
	fs->ate_wra = addr - ate_size;
    486c:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    486e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    4870:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    4874:	4299      	cmp	r1, r3
    4876:	d30f      	bcc.n	4898 <nvs_init+0x164>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    4878:	2308      	movs	r3, #8
    487a:	aa01      	add	r2, sp, #4
    487c:	4620      	mov	r0, r4
    487e:	f018 fe0b 	bl	1d498 <nvs_flash_rd>
		if (rc) {
    4882:	4605      	mov	r5, r0
    4884:	bb20      	cbnz	r0, 48d0 <nvs_init+0x19c>
    4886:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    4888:	f813 2b01 	ldrb.w	r2, [r3], #1
    488c:	4591      	cmp	r9, r2
    488e:	f040 8085 	bne.w	499c <nvs_init+0x268>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    4892:	3501      	adds	r5, #1
    4894:	2d08      	cmp	r5, #8
    4896:	d1f7      	bne.n	4888 <nvs_init+0x154>
	while (fs->ate_wra > fs->data_wra) {
    4898:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    489c:	428b      	cmp	r3, r1
    489e:	d907      	bls.n	48b0 <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    48a0:	1a5b      	subs	r3, r3, r1
    48a2:	464a      	mov	r2, r9
    48a4:	4620      	mov	r0, r4
    48a6:	f018 fe2f 	bl	1d508 <nvs_flash_cmp_const>
		if (rc < 0) {
    48aa:	1e05      	subs	r5, r0, #0
    48ac:	db10      	blt.n	48d0 <nvs_init+0x19c>
		if (!rc) {
    48ae:	d156      	bne.n	495e <nvs_init+0x22a>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    48b0:	6863      	ldr	r3, [r4, #4]
    48b2:	4f4f      	ldr	r7, [pc, #316]	; (49f0 <nvs_init+0x2bc>)
	nvs_sector_advance(fs, &addr);
    48b4:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    48b6:	403b      	ands	r3, r7
	nvs_sector_advance(fs, &addr);
    48b8:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    48ba:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    48bc:	f018 fe68 	bl	1d590 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    48c0:	89a3      	ldrh	r3, [r4, #12]
    48c2:	9900      	ldr	r1, [sp, #0]
    48c4:	464a      	mov	r2, r9
    48c6:	4620      	mov	r0, r4
    48c8:	f018 fe1e 	bl	1d508 <nvs_flash_cmp_const>
	if (rc < 0) {
    48cc:	1e05      	subs	r5, r0, #0
    48ce:	da4c      	bge.n	496a <nvs_init+0x236>
	return z_impl_k_mutex_unlock(mutex);
    48d0:	4630      	mov	r0, r6
    48d2:	f016 fe6d 	bl	1b5b0 <z_impl_k_mutex_unlock>
	if (rc) {
    48d6:	2d00      	cmp	r5, #0
    48d8:	f47f af47 	bne.w	476a <nvs_init+0x36>
	fs->ready = true;
    48dc:	2301      	movs	r3, #1
    48de:	7423      	strb	r3, [r4, #16]
    48e0:	4e3c      	ldr	r6, [pc, #240]	; (49d4 <nvs_init+0x2a0>)
    48e2:	4b3b      	ldr	r3, [pc, #236]	; (49d0 <nvs_init+0x29c>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    48e4:	89a2      	ldrh	r2, [r4, #12]
    48e6:	89e1      	ldrh	r1, [r4, #14]
    48e8:	4842      	ldr	r0, [pc, #264]	; (49f4 <nvs_init+0x2c0>)
    48ea:	1af6      	subs	r6, r6, r3
    48ec:	08f6      	lsrs	r6, r6, #3
    48ee:	01b6      	lsls	r6, r6, #6
    48f0:	f046 0603 	orr.w	r6, r6, #3
    48f4:	4633      	mov	r3, r6
    48f6:	f018 fadb 	bl	1ceb0 <log_2>
	LOG_INF("alloc wra: %d, %x",
    48fa:	6861      	ldr	r1, [r4, #4]
    48fc:	483e      	ldr	r0, [pc, #248]	; (49f8 <nvs_init+0x2c4>)
    48fe:	4633      	mov	r3, r6
    4900:	b28a      	uxth	r2, r1
    4902:	0c09      	lsrs	r1, r1, #16
    4904:	f018 fad4 	bl	1ceb0 <log_2>
	LOG_INF("data wra: %d, %x",
    4908:	68a1      	ldr	r1, [r4, #8]
    490a:	483c      	ldr	r0, [pc, #240]	; (49fc <nvs_init+0x2c8>)
    490c:	b28a      	uxth	r2, r1
    490e:	4633      	mov	r3, r6
    4910:	0c09      	lsrs	r1, r1, #16
    4912:	f018 facd 	bl	1ceb0 <log_2>
	return 0;
    4916:	e728      	b.n	476a <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
    4918:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    491a:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    491c:	eba1 0108 	sub.w	r1, r1, r8
		addr = (i << ADDR_SECT_SHIFT) +
    4920:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    4924:	464a      	mov	r2, r9
    4926:	2308      	movs	r3, #8
    4928:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    492a:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    492c:	f018 fdec 	bl	1d508 <nvs_flash_cmp_const>
		if (rc) {
    4930:	b170      	cbz	r0, 4950 <nvs_init+0x21c>
			nvs_sector_advance(fs, &addr);
    4932:	89e0      	ldrh	r0, [r4, #14]
    4934:	4669      	mov	r1, sp
    4936:	f018 fe2b 	bl	1d590 <nvs_sector_advance.isra.0>
			closed_sectors++;
    493a:	3701      	adds	r7, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    493c:	9900      	ldr	r1, [sp, #0]
    493e:	2308      	movs	r3, #8
    4940:	464a      	mov	r2, r9
    4942:	4620      	mov	r0, r4
			closed_sectors++;
    4944:	b2bf      	uxth	r7, r7
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    4946:	f018 fddf 	bl	1d508 <nvs_flash_cmp_const>
			if (!rc) {
    494a:	2800      	cmp	r0, #0
    494c:	f43f af76 	beq.w	483c <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    4950:	3501      	adds	r5, #1
    4952:	e76e      	b.n	4832 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    4954:	2d00      	cmp	r5, #0
    4956:	d036      	beq.n	49c6 <nvs_init+0x292>
				rc = -ESPIPE;
    4958:	f06f 051c 	mvn.w	r5, #28
    495c:	e7b8      	b.n	48d0 <nvs_init+0x19c>
		fs->data_wra += fs->flash_parameters->write_block_size;
    495e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    4960:	68a3      	ldr	r3, [r4, #8]
    4962:	6812      	ldr	r2, [r2, #0]
    4964:	4413      	add	r3, r2
    4966:	60a3      	str	r3, [r4, #8]
    4968:	e796      	b.n	4898 <nvs_init+0x164>
	if (rc) {
    496a:	d0b1      	beq.n	48d0 <nvs_init+0x19c>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    496c:	6861      	ldr	r1, [r4, #4]
    496e:	4620      	mov	r0, r4
    4970:	f018 fe19 	bl	1d5a6 <nvs_flash_erase_sector>
		if (rc) {
    4974:	4605      	mov	r5, r0
    4976:	2800      	cmp	r0, #0
    4978:	d1aa      	bne.n	48d0 <nvs_init+0x19c>
		fs->ate_wra &= ADDR_SECT_MASK;
    497a:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    497c:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    497e:	403b      	ands	r3, r7
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    4980:	4403      	add	r3, r0
    4982:	eba3 0048 	sub.w	r0, r3, r8, lsl #1
    4986:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    4988:	4038      	ands	r0, r7
    498a:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    498c:	4620      	mov	r0, r4
    498e:	f7ff fe11 	bl	45b4 <nvs_gc>
    4992:	4605      	mov	r5, r0
end:
    4994:	e79c      	b.n	48d0 <nvs_init+0x19c>
		rc = -EDEADLK;
    4996:	f06f 0520 	mvn.w	r5, #32
    499a:	e799      	b.n	48d0 <nvs_init+0x19c>
		if (!nvs_ate_crc8_check(&last_ate)) {
    499c:	a801      	add	r0, sp, #4
    499e:	f018 fdd8 	bl	1d552 <nvs_ate_crc8_check>
    49a2:	6862      	ldr	r2, [r4, #4]
    49a4:	b978      	cbnz	r0, 49c6 <nvs_init+0x292>
			fs->data_wra = addr & ADDR_SECT_MASK;
    49a6:	9b00      	ldr	r3, [sp, #0]
			fs->data_wra += last_ate.offset;
    49a8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    49ac:	f8bd 5008 	ldrh.w	r5, [sp, #8]
			fs->data_wra = addr & ADDR_SECT_MASK;
    49b0:	403b      	ands	r3, r7
			fs->data_wra += last_ate.offset;
    49b2:	4403      	add	r3, r0
    49b4:	60a3      	str	r3, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    49b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    49b8:	4629      	mov	r1, r5
    49ba:	f018 fddf 	bl	1d57c <nvs_al_size.isra.0>
    49be:	4403      	add	r3, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    49c0:	4293      	cmp	r3, r2
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    49c2:	60a3      	str	r3, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    49c4:	d0c6      	beq.n	4954 <nvs_init+0x220>
		fs->ate_wra -= ate_size;
    49c6:	eba2 0208 	sub.w	r2, r2, r8
    49ca:	6062      	str	r2, [r4, #4]
    49cc:	e750      	b.n	4870 <nvs_init+0x13c>
    49ce:	bf00      	nop
    49d0:	00021aac 	.word	0x00021aac
    49d4:	00021bac 	.word	0x00021bac
    49d8:	000237fd 	.word	0x000237fd
    49dc:	00023819 	.word	0x00023819
    49e0:	0002383b 	.word	0x0002383b
    49e4:	00023858 	.word	0x00023858
    49e8:	00023870 	.word	0x00023870
    49ec:	00023884 	.word	0x00023884
    49f0:	ffff0000 	.word	0xffff0000
    49f4:	000238a7 	.word	0x000238a7
    49f8:	000238be 	.word	0x000238be
    49fc:	000238d0 	.word	0x000238d0

00004a00 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    4a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a04:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    4a06:	7c03      	ldrb	r3, [r0, #16]
{
    4a08:	b089      	sub	sp, #36	; 0x24
    4a0a:	4604      	mov	r4, r0
    4a0c:	4689      	mov	r9, r1
    4a0e:	4690      	mov	r8, r2
	if (!fs->ready) {
    4a10:	b97b      	cbnz	r3, 4a32 <nvs_write+0x32>
    4a12:	4b69      	ldr	r3, [pc, #420]	; (4bb8 <nvs_write+0x1b8>)
    4a14:	4969      	ldr	r1, [pc, #420]	; (4bbc <nvs_write+0x1bc>)
		LOG_ERR("NVS not initialized");
    4a16:	486a      	ldr	r0, [pc, #424]	; (4bc0 <nvs_write+0x1c0>)
    4a18:	1ac9      	subs	r1, r1, r3
    4a1a:	08c9      	lsrs	r1, r1, #3
    4a1c:	0189      	lsls	r1, r1, #6
    4a1e:	f041 0101 	orr.w	r1, r1, #1
    4a22:	f018 fa24 	bl	1ce6e <log_0>
		return -EACCES;
    4a26:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    4a2a:	4628      	mov	r0, r5
    4a2c:	b009      	add	sp, #36	; 0x24
    4a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4a32:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    4a34:	2108      	movs	r1, #8
    4a36:	4618      	mov	r0, r3
    4a38:	f018 fda0 	bl	1d57c <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    4a3c:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4a3e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    4a40:	4618      	mov	r0, r3
    4a42:	f018 fd9b 	bl	1d57c <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    4a46:	89a3      	ldrh	r3, [r4, #12]
    4a48:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    4a4c:	1a9b      	subs	r3, r3, r2
    4a4e:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    4a50:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    4a52:	f0c0 80ab 	bcc.w	4bac <nvs_write+0x1ac>
    4a56:	b11e      	cbz	r6, 4a60 <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    4a58:	f1b8 0f00 	cmp.w	r8, #0
    4a5c:	f000 80a6 	beq.w	4bac <nvs_write+0x1ac>
	wlk_addr = fs->ate_wra;
    4a60:	6863      	ldr	r3, [r4, #4]
    4a62:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4a64:	aa04      	add	r2, sp, #16
    4a66:	a903      	add	r1, sp, #12
    4a68:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    4a6a:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4a6e:	f018 fdc2 	bl	1d5f6 <nvs_prev_ate>
		if (rc) {
    4a72:	4605      	mov	r5, r0
    4a74:	2800      	cmp	r0, #0
    4a76:	d1d8      	bne.n	4a2a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    4a78:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    4a7c:	454b      	cmp	r3, r9
    4a7e:	d005      	beq.n	4a8c <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    4a80:	6862      	ldr	r2, [r4, #4]
    4a82:	9b03      	ldr	r3, [sp, #12]
    4a84:	429a      	cmp	r2, r3
    4a86:	d1ed      	bne.n	4a64 <nvs_write+0x64>
		if (len == 0) {
    4a88:	b9de      	cbnz	r6, 4ac2 <nvs_write+0xc2>
    4a8a:	e7ce      	b.n	4a2a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    4a8c:	a804      	add	r0, sp, #16
    4a8e:	f018 fd60 	bl	1d552 <nvs_ate_crc8_check>
    4a92:	2800      	cmp	r0, #0
    4a94:	d1f4      	bne.n	4a80 <nvs_write+0x80>
		if (len == 0) {
    4a96:	f8bd 3014 	ldrh.w	r3, [sp, #20]
    4a9a:	b186      	cbz	r6, 4abe <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    4a9c:	42b3      	cmp	r3, r6
    4a9e:	d110      	bne.n	4ac2 <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    4aa0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    4aa4:	ea4f 411b 	mov.w	r1, fp, lsr #16
    4aa8:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    4aaa:	4401      	add	r1, r0
    4aac:	4633      	mov	r3, r6
    4aae:	4642      	mov	r2, r8
    4ab0:	4620      	mov	r0, r4
    4ab2:	f018 fcff 	bl	1d4b4 <nvs_flash_block_cmp>
			if (rc <= 0) {
    4ab6:	2800      	cmp	r0, #0
    4ab8:	dc03      	bgt.n	4ac2 <nvs_write+0xc2>
    4aba:	4605      	mov	r5, r0
    4abc:	e7b5      	b.n	4a2a <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    4abe:	2b00      	cmp	r3, #0
    4ac0:	d0b3      	beq.n	4a2a <nvs_write+0x2a>
	if (data_size) {
    4ac2:	2f00      	cmp	r7, #0
    4ac4:	d13f      	bne.n	4b46 <nvs_write+0x146>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    4ac6:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    4aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4ad2:	4650      	mov	r0, sl
	fs->ate_wra &= ADDR_SECT_MASK;
    4ad4:	f8df b0ec 	ldr.w	fp, [pc, #236]	; 4bc4 <nvs_write+0x1c4>
    4ad8:	f016 fcf2 	bl	1b4c0 <z_impl_k_mutex_lock>
	gc_count = 0;
    4adc:	2200      	movs	r2, #0
		if (gc_count == fs->sector_count) {
    4ade:	89e3      	ldrh	r3, [r4, #14]
    4ae0:	429a      	cmp	r2, r3
    4ae2:	d060      	beq.n	4ba6 <nvs_write+0x1a6>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    4ae4:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    4ae8:	1878      	adds	r0, r7, r1
    4aea:	4283      	cmp	r3, r0
    4aec:	d32e      	bcc.n	4b4c <nvs_write+0x14c>
	entry.part = 0xff;
    4aee:	23ff      	movs	r3, #255	; 0xff
	nvs_ate_crc8_update(&entry);
    4af0:	a806      	add	r0, sp, #24
	entry.id = id;
    4af2:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    4af6:	f8ad 101a 	strh.w	r1, [sp, #26]
	entry.len = (uint16_t)len;
    4afa:	f8ad 601c 	strh.w	r6, [sp, #28]
	entry.part = 0xff;
    4afe:	f88d 301e 	strb.w	r3, [sp, #30]
	nvs_ate_crc8_update(&entry);
    4b02:	f018 fd32 	bl	1d56a <nvs_ate_crc8_update>
	if (!len) {
    4b06:	b136      	cbz	r6, 4b16 <nvs_write+0x116>
    4b08:	68a1      	ldr	r1, [r4, #8]
    4b0a:	4633      	mov	r3, r6
    4b0c:	4642      	mov	r2, r8
    4b0e:	4620      	mov	r0, r4
    4b10:	f018 fdc1 	bl	1d696 <nvs_flash_al_wrt.part.0>
    4b14:	4605      	mov	r5, r0
	fs->data_wra += nvs_al_size(fs, len);
    4b16:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4b18:	4631      	mov	r1, r6
    4b1a:	f018 fd2f 	bl	1d57c <nvs_al_size.isra.0>
    4b1e:	68a3      	ldr	r3, [r4, #8]
    4b20:	4403      	add	r3, r0
    4b22:	60a3      	str	r3, [r4, #8]
	if (rc) {
    4b24:	2d00      	cmp	r5, #0
    4b26:	d144      	bne.n	4bb2 <nvs_write+0x1b2>
	rc = nvs_flash_ate_wrt(fs, &entry);
    4b28:	a906      	add	r1, sp, #24
    4b2a:	4620      	mov	r0, r4
    4b2c:	f018 fdfb 	bl	1d726 <nvs_flash_ate_wrt>
	if (rc) {
    4b30:	4605      	mov	r5, r0
    4b32:	2800      	cmp	r0, #0
    4b34:	d13d      	bne.n	4bb2 <nvs_write+0x1b2>
	rc = len;
    4b36:	4633      	mov	r3, r6
    4b38:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    4b3a:	4650      	mov	r0, sl
    4b3c:	f016 fd38 	bl	1b5b0 <z_impl_k_mutex_unlock>
	return rc;
    4b40:	9b01      	ldr	r3, [sp, #4]
    4b42:	461d      	mov	r5, r3
    4b44:	e771      	b.n	4a2a <nvs_write+0x2a>
		required_space = data_size + ate_size;
    4b46:	4457      	add	r7, sl
    4b48:	b2bf      	uxth	r7, r7
    4b4a:	e7bc      	b.n	4ac6 <nvs_write+0xc6>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4b4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    4b4e:	9201      	str	r2, [sp, #4]
    4b50:	2108      	movs	r1, #8
    4b52:	f018 fd13 	bl	1d57c <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    4b56:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4b5a:	f8ad 1018 	strh.w	r1, [sp, #24]
	close_ate.len = 0U;
    4b5e:	2100      	movs	r1, #0
    4b60:	f8ad 101c 	strh.w	r1, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    4b64:	1819      	adds	r1, r3, r0
    4b66:	f8ad 101a 	strh.w	r1, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    4b6a:	89a1      	ldrh	r1, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    4b6c:	ea03 030b 	and.w	r3, r3, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    4b70:	440b      	add	r3, r1
    4b72:	1a18      	subs	r0, r3, r0
    4b74:	6060      	str	r0, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    4b76:	a806      	add	r0, sp, #24
    4b78:	f018 fcf7 	bl	1d56a <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    4b7c:	a906      	add	r1, sp, #24
    4b7e:	4620      	mov	r0, r4
    4b80:	f018 fdd1 	bl	1d726 <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    4b84:	89e0      	ldrh	r0, [r4, #14]
    4b86:	1d21      	adds	r1, r4, #4
    4b88:	f018 fd02 	bl	1d590 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    4b8c:	6863      	ldr	r3, [r4, #4]
    4b8e:	ea03 030b 	and.w	r3, r3, fp
    4b92:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    4b94:	4620      	mov	r0, r4
    4b96:	f7ff fd0d 	bl	45b4 <nvs_gc>
		if (rc) {
    4b9a:	4603      	mov	r3, r0
    4b9c:	2800      	cmp	r0, #0
    4b9e:	d1cb      	bne.n	4b38 <nvs_write+0x138>
		gc_count++;
    4ba0:	9a01      	ldr	r2, [sp, #4]
    4ba2:	3201      	adds	r2, #1
		if (gc_count == fs->sector_count) {
    4ba4:	e79b      	b.n	4ade <nvs_write+0xde>
			rc = -ENOSPC;
    4ba6:	f06f 031b 	mvn.w	r3, #27
    4baa:	e7c5      	b.n	4b38 <nvs_write+0x138>
		return -EINVAL;
    4bac:	f06f 0515 	mvn.w	r5, #21
    4bb0:	e73b      	b.n	4a2a <nvs_write+0x2a>
			if (rc) {
    4bb2:	462b      	mov	r3, r5
    4bb4:	e7c0      	b.n	4b38 <nvs_write+0x138>
    4bb6:	bf00      	nop
    4bb8:	00021aac 	.word	0x00021aac
    4bbc:	00021bac 	.word	0x00021bac
    4bc0:	000237e9 	.word	0x000237e9
    4bc4:	ffff0000 	.word	0xffff0000

00004bc8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    4bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    4bcc:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    4bce:	7c03      	ldrb	r3, [r0, #16]
{
    4bd0:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    4bd4:	4604      	mov	r4, r0
    4bd6:	460f      	mov	r7, r1
    4bd8:	4690      	mov	r8, r2
	if (!fs->ready) {
    4bda:	b973      	cbnz	r3, 4bfa <nvs_read_hist+0x32>
    4bdc:	4b2b      	ldr	r3, [pc, #172]	; (4c8c <nvs_read_hist+0xc4>)
    4bde:	492c      	ldr	r1, [pc, #176]	; (4c90 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    4be0:	482c      	ldr	r0, [pc, #176]	; (4c94 <nvs_read_hist+0xcc>)
    4be2:	1ac9      	subs	r1, r1, r3
    4be4:	08c9      	lsrs	r1, r1, #3
    4be6:	0189      	lsls	r1, r1, #6
    4be8:	f041 0101 	orr.w	r1, r1, #1
    4bec:	f018 f93f 	bl	1ce6e <log_0>
		return -EACCES;
    4bf0:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    4bf4:	b004      	add	sp, #16
    4bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    4bfa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    4bfc:	2108      	movs	r1, #8
    4bfe:	f018 fcbd 	bl	1d57c <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    4c02:	89a3      	ldrh	r3, [r4, #12]
    4c04:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    4c08:	42b3      	cmp	r3, r6
    4c0a:	d33b      	bcc.n	4c84 <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    4c0c:	6863      	ldr	r3, [r4, #4]
    4c0e:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    4c10:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4c14:	aa02      	add	r2, sp, #8
    4c16:	a901      	add	r1, sp, #4
    4c18:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    4c1a:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    4c1c:	f018 fceb 	bl	1d5f6 <nvs_prev_ate>
		if (rc) {
    4c20:	2800      	cmp	r0, #0
    4c22:	d1e7      	bne.n	4bf4 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    4c24:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4c28:	42bb      	cmp	r3, r7
    4c2a:	d107      	bne.n	4c3c <nvs_read_hist+0x74>
    4c2c:	a802      	add	r0, sp, #8
    4c2e:	f018 fc90 	bl	1d552 <nvs_ate_crc8_check>
    4c32:	b918      	cbnz	r0, 4c3c <nvs_read_hist+0x74>
			cnt_his++;
    4c34:	f10a 0a01 	add.w	sl, sl, #1
    4c38:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    4c3c:	6862      	ldr	r2, [r4, #4]
    4c3e:	9b01      	ldr	r3, [sp, #4]
    4c40:	429a      	cmp	r2, r3
    4c42:	d018      	beq.n	4c76 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    4c44:	45ca      	cmp	sl, r9
    4c46:	d9e5      	bls.n	4c14 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    4c48:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    4c4c:	b1bb      	cbz	r3, 4c7e <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    4c4e:	45ca      	cmp	sl, r9
    4c50:	d315      	bcc.n	4c7e <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    4c52:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    4c56:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    4c58:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    4c5a:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    4c5e:	bf28      	it	cs
    4c60:	4633      	movcs	r3, r6
    4c62:	4642      	mov	r2, r8
    4c64:	4429      	add	r1, r5
    4c66:	4620      	mov	r0, r4
    4c68:	f018 fc16 	bl	1d498 <nvs_flash_rd>
	if (rc) {
    4c6c:	2800      	cmp	r0, #0
    4c6e:	d1c1      	bne.n	4bf4 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    4c70:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    4c74:	e7be      	b.n	4bf4 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    4c76:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4c7a:	42bb      	cmp	r3, r7
    4c7c:	d0e4      	beq.n	4c48 <nvs_read_hist+0x80>
		return -ENOENT;
    4c7e:	f06f 0001 	mvn.w	r0, #1
    4c82:	e7b7      	b.n	4bf4 <nvs_read_hist+0x2c>
		return -EINVAL;
    4c84:	f06f 0015 	mvn.w	r0, #21
    4c88:	e7b4      	b.n	4bf4 <nvs_read_hist+0x2c>
    4c8a:	bf00      	nop
    4c8c:	00021aac 	.word	0x00021aac
    4c90:	00021bac 	.word	0x00021bac
    4c94:	000237e9 	.word	0x000237e9

00004c98 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    4c98:	4b09      	ldr	r3, [pc, #36]	; (4cc0 <get_flash_area_from_id+0x28>)
{
    4c9a:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    4c9c:	681d      	ldr	r5, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    4c9e:	4b09      	ldr	r3, [pc, #36]	; (4cc4 <get_flash_area_from_id+0x2c>)
{
    4ca0:	4602      	mov	r2, r0
		if (flash_map[i].fa_id == idx) {
    4ca2:	681c      	ldr	r4, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    4ca4:	2300      	movs	r3, #0
    4ca6:	429d      	cmp	r5, r3
    4ca8:	dc01      	bgt.n	4cae <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    4caa:	2000      	movs	r0, #0
}
    4cac:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    4cae:	0119      	lsls	r1, r3, #4
    4cb0:	eb04 1003 	add.w	r0, r4, r3, lsl #4
    4cb4:	5c61      	ldrb	r1, [r4, r1]
    4cb6:	4291      	cmp	r1, r2
    4cb8:	d0f8      	beq.n	4cac <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    4cba:	3301      	adds	r3, #1
    4cbc:	e7f3      	b.n	4ca6 <get_flash_area_from_id+0xe>
    4cbe:	bf00      	nop
    4cc0:	00022098 	.word	0x00022098
    4cc4:	200002b0 	.word	0x200002b0

00004cc8 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    4cc8:	4b08      	ldr	r3, [pc, #32]	; (4cec <flash_area_open+0x24>)
    4cca:	681b      	ldr	r3, [r3, #0]
{
    4ccc:	b510      	push	{r4, lr}
    4cce:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    4cd0:	b12b      	cbz	r3, 4cde <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    4cd2:	f7ff ffe1 	bl	4c98 <get_flash_area_from_id>
	if (area == NULL) {
    4cd6:	b128      	cbz	r0, 4ce4 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    4cd8:	6020      	str	r0, [r4, #0]
	return 0;
    4cda:	2000      	movs	r0, #0
}
    4cdc:	bd10      	pop	{r4, pc}
		return -EACCES;
    4cde:	f06f 000c 	mvn.w	r0, #12
    4ce2:	e7fb      	b.n	4cdc <flash_area_open+0x14>
		return -ENOENT;
    4ce4:	f06f 0001 	mvn.w	r0, #1
    4ce8:	e7f8      	b.n	4cdc <flash_area_open+0x14>
    4cea:	bf00      	nop
    4cec:	200002b0 	.word	0x200002b0

00004cf0 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    4cf0:	b530      	push	{r4, r5, lr}
    4cf2:	b089      	sub	sp, #36	; 0x24
    4cf4:	460c      	mov	r4, r1
    4cf6:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    4cf8:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    4cfa:	f7ff ffcd 	bl	4c98 <get_flash_area_from_id>
	if (fa == NULL) {
    4cfe:	b1b8      	cbz	r0, 4d30 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    4d00:	6843      	ldr	r3, [r0, #4]
    4d02:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    4d04:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    4d06:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    4d08:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    4d0a:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    4d0e:	2300      	movs	r3, #0
	cb_data->status = 0;
    4d10:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    4d14:	9305      	str	r3, [sp, #20]
    4d16:	f016 f9b9 	bl	1b08c <z_impl_device_get_binding>
	if (flash_dev == NULL) {
    4d1a:	b160      	cbz	r0, 4d36 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    4d1c:	4907      	ldr	r1, [pc, #28]	; (4d3c <flash_area_get_sectors+0x4c>)
    4d1e:	aa01      	add	r2, sp, #4
    4d20:	f01c f826 	bl	20d70 <flash_page_foreach>
	if (cb_data->status == 0) {
    4d24:	9807      	ldr	r0, [sp, #28]
    4d26:	b908      	cbnz	r0, 4d2c <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    4d28:	9b05      	ldr	r3, [sp, #20]
    4d2a:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    4d2c:	b009      	add	sp, #36	; 0x24
    4d2e:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    4d30:	f06f 0015 	mvn.w	r0, #21
    4d34:	e7fa      	b.n	4d2c <flash_area_get_sectors+0x3c>
		return -ENODEV;
    4d36:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    4d3a:	e7f7      	b.n	4d2c <flash_area_get_sectors+0x3c>
    4d3c:	0001d75f 	.word	0x0001d75f

00004d40 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    4d40:	4b10      	ldr	r3, [pc, #64]	; (4d84 <settings_save_one+0x44>)
{
    4d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    4d46:	681c      	ldr	r4, [r3, #0]
{
    4d48:	4605      	mov	r5, r0
    4d4a:	460e      	mov	r6, r1
    4d4c:	4617      	mov	r7, r2
	if (!cs) {
    4d4e:	b1ac      	cbz	r4, 4d7c <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    4d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4d58:	480b      	ldr	r0, [pc, #44]	; (4d88 <settings_save_one+0x48>)
    4d5a:	f016 fbb1 	bl	1b4c0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    4d5e:	6863      	ldr	r3, [r4, #4]
    4d60:	4632      	mov	r2, r6
    4d62:	f8d3 8008 	ldr.w	r8, [r3, #8]
    4d66:	4629      	mov	r1, r5
    4d68:	463b      	mov	r3, r7
    4d6a:	4620      	mov	r0, r4
    4d6c:	47c0      	blx	r8
    4d6e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    4d70:	4805      	ldr	r0, [pc, #20]	; (4d88 <settings_save_one+0x48>)
    4d72:	f016 fc1d 	bl	1b5b0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    4d76:	4620      	mov	r0, r4
    4d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    4d7c:	f06f 0401 	mvn.w	r4, #1
    4d80:	e7f9      	b.n	4d76 <settings_save_one+0x36>
    4d82:	bf00      	nop
    4d84:	200013e8 	.word	0x200013e8
    4d88:	2000092c 	.word	0x2000092c

00004d8c <settings_src_register>:
	parent->next = child;
    4d8c:	2300      	movs	r3, #0
    4d8e:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(slist, snode)
    4d90:	4b04      	ldr	r3, [pc, #16]	; (4da4 <settings_src_register+0x18>)
    4d92:	685a      	ldr	r2, [r3, #4]
    4d94:	b912      	cbnz	r2, 4d9c <settings_src_register+0x10>
	list->head = node;
    4d96:	e9c3 0000 	strd	r0, r0, [r3]
}
    4d9a:	4770      	bx	lr
	parent->next = child;
    4d9c:	6010      	str	r0, [r2, #0]
	list->tail = node;
    4d9e:	6058      	str	r0, [r3, #4]
}
    4da0:	4770      	bx	lr
    4da2:	bf00      	nop
    4da4:	200013e0 	.word	0x200013e0

00004da8 <settings_dst_register>:
	settings_save_dst = cs;
    4da8:	4b01      	ldr	r3, [pc, #4]	; (4db0 <settings_dst_register+0x8>)
    4daa:	6018      	str	r0, [r3, #0]
}
    4dac:	4770      	bx	lr
    4dae:	bf00      	nop
    4db0:	200013e8 	.word	0x200013e8

00004db4 <settings_load_subtree>:
{
    4db4:	b530      	push	{r4, r5, lr}
    4db6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    4db8:	2300      	movs	r3, #0
{
    4dba:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    4dbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
    4dc0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    4dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4dc6:	480e      	ldr	r0, [pc, #56]	; (4e00 <settings_load_subtree+0x4c>)
    4dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4dcc:	f016 fb78 	bl	1b4c0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4dd0:	4b0c      	ldr	r3, [pc, #48]	; (4e04 <settings_load_subtree+0x50>)
    4dd2:	681c      	ldr	r4, [r3, #0]
    4dd4:	2c00      	cmp	r4, #0
    4dd6:	bf38      	it	cc
    4dd8:	2400      	movcc	r4, #0
    4dda:	b13c      	cbz	r4, 4dec <settings_load_subtree+0x38>
		cs->cs_itf->csi_load(cs, &arg);
    4ddc:	6863      	ldr	r3, [r4, #4]
    4dde:	4620      	mov	r0, r4
    4de0:	681b      	ldr	r3, [r3, #0]
    4de2:	a901      	add	r1, sp, #4
    4de4:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4de6:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4de8:	2c00      	cmp	r4, #0
    4dea:	d1f6      	bne.n	4dda <settings_load_subtree+0x26>
	rc = settings_commit_subtree(subtree);
    4dec:	4628      	mov	r0, r5
    4dee:	f000 f8d7 	bl	4fa0 <settings_commit_subtree>
    4df2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    4df4:	4802      	ldr	r0, [pc, #8]	; (4e00 <settings_load_subtree+0x4c>)
    4df6:	f016 fbdb 	bl	1b5b0 <z_impl_k_mutex_unlock>
}
    4dfa:	4620      	mov	r0, r4
    4dfc:	b005      	add	sp, #20
    4dfe:	bd30      	pop	{r4, r5, pc}
    4e00:	2000092c 	.word	0x2000092c
    4e04:	200013e0 	.word	0x200013e0

00004e08 <settings_load_subtree_direct>:
{
    4e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    4e0a:	e9cd 0101 	strd	r0, r1, [sp, #4]
    4e0e:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    4e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e14:	480c      	ldr	r0, [pc, #48]	; (4e48 <settings_load_subtree_direct+0x40>)
    4e16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e1a:	f016 fb51 	bl	1b4c0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4e1e:	4b0b      	ldr	r3, [pc, #44]	; (4e4c <settings_load_subtree_direct+0x44>)
    4e20:	681c      	ldr	r4, [r3, #0]
    4e22:	2c00      	cmp	r4, #0
    4e24:	bf38      	it	cc
    4e26:	2400      	movcc	r4, #0
    4e28:	b13c      	cbz	r4, 4e3a <settings_load_subtree_direct+0x32>
		cs->cs_itf->csi_load(cs, &arg);
    4e2a:	6863      	ldr	r3, [r4, #4]
    4e2c:	4620      	mov	r0, r4
    4e2e:	681b      	ldr	r3, [r3, #0]
    4e30:	a901      	add	r1, sp, #4
    4e32:	4798      	blx	r3
    4e34:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4e36:	2c00      	cmp	r4, #0
    4e38:	d1f6      	bne.n	4e28 <settings_load_subtree_direct+0x20>
	return z_impl_k_mutex_unlock(mutex);
    4e3a:	4803      	ldr	r0, [pc, #12]	; (4e48 <settings_load_subtree_direct+0x40>)
    4e3c:	f016 fbb8 	bl	1b5b0 <z_impl_k_mutex_unlock>
}
    4e40:	2000      	movs	r0, #0
    4e42:	b004      	add	sp, #16
    4e44:	bd10      	pop	{r4, pc}
    4e46:	bf00      	nop
    4e48:	2000092c 	.word	0x2000092c
    4e4c:	200013e0 	.word	0x200013e0

00004e50 <settings_store_init>:
	list->head = NULL;
    4e50:	4b02      	ldr	r3, [pc, #8]	; (4e5c <settings_store_init+0xc>)
    4e52:	2200      	movs	r2, #0
	list->tail = NULL;
    4e54:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    4e58:	4770      	bx	lr
    4e5a:	bf00      	nop
    4e5c:	200013e0 	.word	0x200013e0

00004e60 <settings_init>:
	list->head = NULL;
    4e60:	4b02      	ldr	r3, [pc, #8]	; (4e6c <settings_init+0xc>)
    4e62:	2200      	movs	r2, #0
	list->tail = NULL;
    4e64:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    4e68:	f7ff bff2 	b.w	4e50 <settings_store_init>
    4e6c:	200013ec 	.word	0x200013ec

00004e70 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    4e70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4e74:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    4e76:	460e      	mov	r6, r1
    4e78:	b109      	cbz	r1, 4e7e <settings_parse_and_lookup+0xe>
		*next = NULL;
    4e7a:	2300      	movs	r3, #0
    4e7c:	600b      	str	r3, [r1, #0]
    4e7e:	4c1e      	ldr	r4, [pc, #120]	; (4ef8 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4e80:	f8df 807c 	ldr.w	r8, [pc, #124]	; 4f00 <settings_parse_and_lookup+0x90>
    4e84:	2500      	movs	r5, #0
    4e86:	4544      	cmp	r4, r8
    4e88:	d308      	bcc.n	4e9c <settings_parse_and_lookup+0x2c>
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4e8a:	4b1c      	ldr	r3, [pc, #112]	; (4efc <settings_parse_and_lookup+0x8c>)
    4e8c:	681c      	ldr	r4, [r3, #0]
    4e8e:	b10c      	cbz	r4, 4e94 <settings_parse_and_lookup+0x24>
    4e90:	3c14      	subs	r4, #20
    4e92:	b9c4      	cbnz	r4, 4ec6 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    4e94:	4628      	mov	r0, r5
    4e96:	b002      	add	sp, #8
    4e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    4e9c:	6821      	ldr	r1, [r4, #0]
    4e9e:	aa01      	add	r2, sp, #4
    4ea0:	4638      	mov	r0, r7
    4ea2:	f018 fc81 	bl	1d7a8 <settings_name_steq>
    4ea6:	b160      	cbz	r0, 4ec2 <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    4ea8:	b925      	cbnz	r5, 4eb4 <settings_parse_and_lookup+0x44>
			if (next) {
    4eaa:	b10e      	cbz	r6, 4eb0 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    4eac:	9b01      	ldr	r3, [sp, #4]
    4eae:	6033      	str	r3, [r6, #0]
    4eb0:	4625      	mov	r5, r4
    4eb2:	e006      	b.n	4ec2 <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    4eb4:	6829      	ldr	r1, [r5, #0]
    4eb6:	6820      	ldr	r0, [r4, #0]
    4eb8:	2200      	movs	r2, #0
    4eba:	f018 fc75 	bl	1d7a8 <settings_name_steq>
    4ebe:	2800      	cmp	r0, #0
    4ec0:	d1f3      	bne.n	4eaa <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4ec2:	3414      	adds	r4, #20
    4ec4:	e7df      	b.n	4e86 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    4ec6:	6821      	ldr	r1, [r4, #0]
    4ec8:	aa01      	add	r2, sp, #4
    4eca:	4638      	mov	r0, r7
    4ecc:	f018 fc6c 	bl	1d7a8 <settings_name_steq>
    4ed0:	b160      	cbz	r0, 4eec <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    4ed2:	b925      	cbnz	r5, 4ede <settings_parse_and_lookup+0x6e>
			if (next) {
    4ed4:	b10e      	cbz	r6, 4eda <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    4ed6:	9b01      	ldr	r3, [sp, #4]
    4ed8:	6033      	str	r3, [r6, #0]
    4eda:	4625      	mov	r5, r4
    4edc:	e006      	b.n	4eec <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    4ede:	6829      	ldr	r1, [r5, #0]
    4ee0:	6820      	ldr	r0, [r4, #0]
    4ee2:	2200      	movs	r2, #0
    4ee4:	f018 fc60 	bl	1d7a8 <settings_name_steq>
    4ee8:	2800      	cmp	r0, #0
    4eea:	d1f3      	bne.n	4ed4 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4eec:	f114 0f14 	cmn.w	r4, #20
    4ef0:	d0d0      	beq.n	4e94 <settings_parse_and_lookup+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4ef2:	6964      	ldr	r4, [r4, #20]
    4ef4:	e7cb      	b.n	4e8e <settings_parse_and_lookup+0x1e>
    4ef6:	bf00      	nop
    4ef8:	00021a48 	.word	0x00021a48
    4efc:	200013ec 	.word	0x200013ec
    4f00:	00021aac 	.word	0x00021aac

00004f04 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    4f04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4f08:	b085      	sub	sp, #20
    4f0a:	4605      	mov	r5, r0
    4f0c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    4f10:	9003      	str	r0, [sp, #12]
{
    4f12:	460c      	mov	r4, r1
    4f14:	4616      	mov	r6, r2
    4f16:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    4f18:	f1b8 0f00 	cmp.w	r8, #0
    4f1c:	d018      	beq.n	4f50 <settings_call_set_handler+0x4c>
    4f1e:	f8d8 1000 	ldr.w	r1, [r8]
    4f22:	b181      	cbz	r1, 4f46 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    4f24:	aa03      	add	r2, sp, #12
    4f26:	f018 fc3f 	bl	1d7a8 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    4f2a:	b960      	cbnz	r0, 4f46 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    4f2c:	2000      	movs	r0, #0
    4f2e:	e007      	b.n	4f40 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    4f30:	f8d8 3008 	ldr.w	r3, [r8, #8]
    4f34:	9300      	str	r3, [sp, #0]
    4f36:	9803      	ldr	r0, [sp, #12]
    4f38:	463b      	mov	r3, r7
    4f3a:	4632      	mov	r2, r6
    4f3c:	4621      	mov	r1, r4
    4f3e:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    4f40:	b005      	add	sp, #20
    4f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    4f46:	f8d8 9004 	ldr.w	r9, [r8, #4]
    4f4a:	f1b9 0f00 	cmp.w	r9, #0
    4f4e:	d1ef      	bne.n	4f30 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    4f50:	a903      	add	r1, sp, #12
    4f52:	4628      	mov	r0, r5
    4f54:	f7ff ff8c 	bl	4e70 <settings_parse_and_lookup>
		if (!ch) {
    4f58:	2800      	cmp	r0, #0
    4f5a:	d0e7      	beq.n	4f2c <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    4f5c:	f8d0 8008 	ldr.w	r8, [r0, #8]
    4f60:	9803      	ldr	r0, [sp, #12]
    4f62:	4632      	mov	r2, r6
    4f64:	463b      	mov	r3, r7
    4f66:	4621      	mov	r1, r4
    4f68:	47c0      	blx	r8
		if (rc != 0) {
    4f6a:	4606      	mov	r6, r0
    4f6c:	2800      	cmp	r0, #0
    4f6e:	d0dd      	beq.n	4f2c <settings_call_set_handler+0x28>
    4f70:	4b08      	ldr	r3, [pc, #32]	; (4f94 <settings_call_set_handler+0x90>)
    4f72:	4c09      	ldr	r4, [pc, #36]	; (4f98 <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    4f74:	4628      	mov	r0, r5
    4f76:	1ae4      	subs	r4, r4, r3
    4f78:	08e4      	lsrs	r4, r4, #3
    4f7a:	f7fe fd65 	bl	3a48 <log_strdup>
    4f7e:	01a4      	lsls	r4, r4, #6
    4f80:	f044 0401 	orr.w	r4, r4, #1
    4f84:	4601      	mov	r1, r0
    4f86:	4623      	mov	r3, r4
    4f88:	4804      	ldr	r0, [pc, #16]	; (4f9c <settings_call_set_handler+0x98>)
    4f8a:	4632      	mov	r2, r6
    4f8c:	f017 ff90 	bl	1ceb0 <log_2>
    4f90:	e7cc      	b.n	4f2c <settings_call_set_handler+0x28>
    4f92:	bf00      	nop
    4f94:	00021aac 	.word	0x00021aac
    4f98:	00021be4 	.word	0x00021be4
    4f9c:	000238fb 	.word	0x000238fb

00004fa0 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    4fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4fa2:	4c1a      	ldr	r4, [pc, #104]	; (500c <settings_commit_subtree+0x6c>)
    4fa4:	4f1a      	ldr	r7, [pc, #104]	; (5010 <settings_commit_subtree+0x70>)
{
    4fa6:	4606      	mov	r6, r0
	rc = 0;
    4fa8:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4faa:	42bc      	cmp	r4, r7
    4fac:	d306      	bcc.n	4fbc <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4fae:	4b19      	ldr	r3, [pc, #100]	; (5014 <settings_commit_subtree+0x74>)
    4fb0:	681c      	ldr	r4, [r3, #0]
    4fb2:	b10c      	cbz	r4, 4fb8 <settings_commit_subtree+0x18>
    4fb4:	3c14      	subs	r4, #20
    4fb6:	b99c      	cbnz	r4, 4fe0 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    4fb8:	4628      	mov	r0, r5
    4fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4fbc:	b91e      	cbnz	r6, 4fc6 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    4fbe:	68e3      	ldr	r3, [r4, #12]
    4fc0:	b94b      	cbnz	r3, 4fd6 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4fc2:	3414      	adds	r4, #20
    4fc4:	e7f1      	b.n	4faa <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4fc6:	6820      	ldr	r0, [r4, #0]
    4fc8:	2200      	movs	r2, #0
    4fca:	4631      	mov	r1, r6
    4fcc:	f018 fbec 	bl	1d7a8 <settings_name_steq>
    4fd0:	2800      	cmp	r0, #0
    4fd2:	d1f4      	bne.n	4fbe <settings_commit_subtree+0x1e>
    4fd4:	e7f5      	b.n	4fc2 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    4fd6:	4798      	blx	r3
				rc = rc2;
    4fd8:	2d00      	cmp	r5, #0
    4fda:	bf08      	it	eq
    4fdc:	4605      	moveq	r5, r0
    4fde:	e7f0      	b.n	4fc2 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4fe0:	b936      	cbnz	r6, 4ff0 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    4fe2:	68e3      	ldr	r3, [r4, #12]
    4fe4:	b963      	cbnz	r3, 5000 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4fe6:	f114 0f14 	cmn.w	r4, #20
    4fea:	d0e5      	beq.n	4fb8 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4fec:	6964      	ldr	r4, [r4, #20]
    4fee:	e7e0      	b.n	4fb2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4ff0:	6820      	ldr	r0, [r4, #0]
    4ff2:	2200      	movs	r2, #0
    4ff4:	4631      	mov	r1, r6
    4ff6:	f018 fbd7 	bl	1d7a8 <settings_name_steq>
    4ffa:	2800      	cmp	r0, #0
    4ffc:	d1f1      	bne.n	4fe2 <settings_commit_subtree+0x42>
    4ffe:	e7f2      	b.n	4fe6 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    5000:	4798      	blx	r3
				rc = rc2;
    5002:	2d00      	cmp	r5, #0
    5004:	bf08      	it	eq
    5006:	4605      	moveq	r5, r0
    5008:	e7ed      	b.n	4fe6 <settings_commit_subtree+0x46>
    500a:	bf00      	nop
    500c:	00021a48 	.word	0x00021a48
    5010:	00021aac 	.word	0x00021aac
    5014:	200013ec 	.word	0x200013ec

00005018 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    5018:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    501a:	4c06      	ldr	r4, [pc, #24]	; (5034 <settings_subsys_init+0x1c>)
    501c:	7823      	ldrb	r3, [r4, #0]
    501e:	b93b      	cbnz	r3, 5030 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    5020:	f7ff ff1e 	bl	4e60 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    5024:	f000 f864 	bl	50f0 <settings_backend_init>

	if (!err) {
    5028:	b908      	cbnz	r0, 502e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    502a:	2301      	movs	r3, #1
    502c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    502e:	bd10      	pop	{r4, pc}
		return 0;
    5030:	2000      	movs	r0, #0
    5032:	e7fc      	b.n	502e <settings_subsys_init+0x16>
    5034:	20002b07 	.word	0x20002b07

00005038 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    5038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    503c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    503e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 50ec <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    5042:	3401      	adds	r4, #1
{
    5044:	b098      	sub	sp, #96	; 0x60
    5046:	4680      	mov	r8, r0
    5048:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    504a:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    504c:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    5050:	1e65      	subs	r5, r4, #1
    5052:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    5054:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    5058:	d045      	beq.n	50e6 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    505a:	234a      	movs	r3, #74	; 0x4a
    505c:	aa05      	add	r2, sp, #20
    505e:	4629      	mov	r1, r5
    5060:	4630      	mov	r0, r6
    5062:	f018 fb75 	bl	1d750 <nvs_read>
    5066:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    506a:	343f      	adds	r4, #63	; 0x3f
    506c:	b2a4      	uxth	r4, r4
    506e:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    5070:	4621      	mov	r1, r4
    5072:	2301      	movs	r3, #1
    5074:	f10d 020b 	add.w	r2, sp, #11
    5078:	4630      	mov	r0, r6
    507a:	f018 fb69 	bl	1d750 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    507e:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    5080:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    5082:	dc03      	bgt.n	508c <settings_nvs_load+0x54>
    5084:	2800      	cmp	r0, #0
    5086:	dc03      	bgt.n	5090 <settings_nvs_load+0x58>
{
    5088:	462c      	mov	r4, r5
    508a:	e7e1      	b.n	5050 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    508c:	2800      	cmp	r0, #0
    508e:	dc16      	bgt.n	50be <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    5090:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    5094:	42ab      	cmp	r3, r5
    5096:	d109      	bne.n	50ac <settings_nvs_load+0x74>
				cf->last_name_id--;
    5098:	4642      	mov	r2, r8
    509a:	1e6b      	subs	r3, r5, #1
    509c:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    50a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    50a4:	2302      	movs	r3, #2
    50a6:	4630      	mov	r0, r6
    50a8:	f7ff fcaa 	bl	4a00 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    50ac:	4629      	mov	r1, r5
    50ae:	4630      	mov	r0, r6
    50b0:	f018 fb4a 	bl	1d748 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    50b4:	4621      	mov	r1, r4
    50b6:	4630      	mov	r0, r6
    50b8:	f018 fb46 	bl	1d748 <nvs_delete>
			continue;
    50bc:	e7e4      	b.n	5088 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    50be:	ab18      	add	r3, sp, #96	; 0x60
    50c0:	441f      	add	r7, r3
    50c2:	2300      	movs	r3, #0
    50c4:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    50c8:	4652      	mov	r2, sl
    50ca:	f8cd 9000 	str.w	r9, [sp]
    50ce:	ab03      	add	r3, sp, #12
    50d0:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    50d2:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    50d4:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    50d8:	f7ff ff14 	bl	4f04 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    50dc:	2800      	cmp	r0, #0
    50de:	d0d3      	beq.n	5088 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    50e0:	b018      	add	sp, #96	; 0x60
    50e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    50e6:	2000      	movs	r0, #0
	return ret;
    50e8:	e7fa      	b.n	50e0 <settings_nvs_load+0xa8>
    50ea:	bf00      	nop
    50ec:	0001d81b 	.word	0x0001d81b

000050f0 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    50f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    50f2:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    50f4:	4669      	mov	r1, sp
    50f6:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    50f8:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    50fa:	f7ff fde5 	bl	4cc8 <flash_area_open>
	if (rc) {
    50fe:	4604      	mov	r4, r0
    5100:	2800      	cmp	r0, #0
    5102:	d136      	bne.n	5172 <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5104:	aa02      	add	r2, sp, #8
    5106:	a901      	add	r1, sp, #4
    5108:	2004      	movs	r0, #4
    510a:	f7ff fdf1 	bl	4cf0 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    510e:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    5112:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    5114:	d02d      	beq.n	5172 <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    5116:	b138      	cbz	r0, 5128 <settings_backend_init+0x38>
    5118:	340c      	adds	r4, #12
    511a:	d005      	beq.n	5128 <settings_backend_init+0x38>
		k_panic();
    511c:	4040      	eors	r0, r0
    511e:	f380 8811 	msr	BASEPRI, r0
    5122:	f04f 0004 	mov.w	r0, #4
    5126:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    5128:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    512a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    512e:	d223      	bcs.n	5178 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    5130:	9a00      	ldr	r2, [sp, #0]
    5132:	2300      	movs	r3, #0
    5134:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    5136:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    5138:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    513a:	4285      	cmp	r5, r0
    513c:	b29c      	uxth	r4, r3
    513e:	d303      	bcc.n	5148 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    5140:	3301      	adds	r3, #1
    5142:	2b08      	cmp	r3, #8
    5144:	d1f8      	bne.n	5138 <settings_backend_init+0x48>
    5146:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    5148:	4d0d      	ldr	r5, [pc, #52]	; (5180 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    514a:	6853      	ldr	r3, [r2, #4]
    514c:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    514e:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    5150:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    5152:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    5154:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    5156:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    5158:	f018 fbf4 	bl	1d944 <settings_nvs_backend_init>
	if (rc) {
    515c:	4604      	mov	r4, r0
    515e:	b940      	cbnz	r0, 5172 <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    5160:	4e08      	ldr	r6, [pc, #32]	; (5184 <settings_backend_init+0x94>)
    5162:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    5164:	4628      	mov	r0, r5
    5166:	f7ff fe11 	bl	4d8c <settings_src_register>
	settings_dst_register(&cf->cf_store);
    516a:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    516c:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    516e:	f7ff fe1b 	bl	4da8 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    5172:	4620      	mov	r0, r4
    5174:	b004      	add	sp, #16
    5176:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    5178:	f06f 0424 	mvn.w	r4, #36	; 0x24
    517c:	e7f9      	b.n	5172 <settings_backend_init+0x82>
    517e:	bf00      	nop
    5180:	200013f4 	.word	0x200013f4
    5184:	200002b4 	.word	0x200002b4

00005188 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    5188:	b510      	push	{r4, lr}
    518a:	4807      	ldr	r0, [pc, #28]	; (51a8 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    518c:	4c07      	ldr	r4, [pc, #28]	; (51ac <uart_console_init+0x24>)
    518e:	f015 ff7d 	bl	1b08c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5192:	4b07      	ldr	r3, [pc, #28]	; (51b0 <uart_console_init+0x28>)
    5194:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    5196:	4620      	mov	r0, r4
    5198:	f001 f990 	bl	64bc <__stdout_hook_install>
	__printk_hook_install(console_out);
    519c:	4620      	mov	r0, r4
    519e:	f7fe f943 	bl	3428 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
    51a2:	2000      	movs	r0, #0
    51a4:	bd10      	pop	{r4, pc}
    51a6:	bf00      	nop
    51a8:	0002375c 	.word	0x0002375c
    51ac:	000051b5 	.word	0x000051b5
    51b0:	20001434 	.word	0x20001434

000051b4 <console_out>:
	if ('\n' == c) {
    51b4:	280a      	cmp	r0, #10
{
    51b6:	b538      	push	{r3, r4, r5, lr}
    51b8:	4d07      	ldr	r5, [pc, #28]	; (51d8 <console_out+0x24>)
    51ba:	4604      	mov	r4, r0
	if ('\n' == c) {
    51bc:	d104      	bne.n	51c8 <console_out+0x14>
    51be:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    51c0:	6883      	ldr	r3, [r0, #8]
    51c2:	210d      	movs	r1, #13
    51c4:	685b      	ldr	r3, [r3, #4]
    51c6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    51c8:	6828      	ldr	r0, [r5, #0]
    51ca:	6883      	ldr	r3, [r0, #8]
    51cc:	b2e1      	uxtb	r1, r4
    51ce:	685b      	ldr	r3, [r3, #4]
    51d0:	4798      	blx	r3
}
    51d2:	4620      	mov	r0, r4
    51d4:	bd38      	pop	{r3, r4, r5, pc}
    51d6:	bf00      	nop
    51d8:	20001434 	.word	0x20001434

000051dc <onoff_stop>:
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    51dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_data *data =
    51e0:	4f0e      	ldr	r7, [pc, #56]	; (521c <onoff_stop+0x40>)
{
    51e2:	4604      	mov	r4, r0
	struct nrf_clock_control_data *data =
    51e4:	68f8      	ldr	r0, [r7, #12]
	size_t offset = (size_t)(mgr - data->mgr);
    51e6:	1a23      	subs	r3, r4, r0
    51e8:	109a      	asrs	r2, r3, #2
    51ea:	4b0d      	ldr	r3, [pc, #52]	; (5220 <onoff_stop+0x44>)
    51ec:	4353      	muls	r3, r2
    51ee:	b2db      	uxtb	r3, r3
	err = set_off_state(&subdata->flags, ctx);
    51f0:	250c      	movs	r5, #12
    51f2:	435d      	muls	r5, r3
    51f4:	f105 0340 	add.w	r3, r5, #64	; 0x40
{
    51f8:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    51fa:	4418      	add	r0, r3
    51fc:	2140      	movs	r1, #64	; 0x40
    51fe:	f018 fbc6 	bl	1d98e <set_off_state>
	if (err < 0) {
    5202:	1e01      	subs	r1, r0, #0
    5204:	db04      	blt.n	5210 <onoff_stop+0x34>
	get_sub_config(dev, type)->stop();
    5206:	687b      	ldr	r3, [r7, #4]
    5208:	442b      	add	r3, r5
    520a:	685b      	ldr	r3, [r3, #4]
    520c:	4798      	blx	r3
	return 0;
    520e:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    5210:	4620      	mov	r0, r4
    5212:	4633      	mov	r3, r6
}
    5214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	notify(mgr, res);
    5218:	4718      	bx	r3
    521a:	bf00      	nop
    521c:	20000850 	.word	0x20000850
    5220:	b6db6db7 	.word	0xb6db6db7

00005224 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_data *data =
    5228:	f8df 804c 	ldr.w	r8, [pc, #76]	; 5278 <onoff_start+0x54>
	size_t offset = (size_t)(mgr - data->mgr);
    522c:	4d10      	ldr	r5, [pc, #64]	; (5270 <onoff_start+0x4c>)
	struct nrf_clock_control_data *data =
    522e:	f8d8 400c 	ldr.w	r4, [r8, #12]
	size_t offset = (size_t)(mgr - data->mgr);
    5232:	1b03      	subs	r3, r0, r4
    5234:	109b      	asrs	r3, r3, #2
    5236:	435d      	muls	r5, r3
    5238:	b2eb      	uxtb	r3, r5
	err = set_starting_state(&subdata->flags, ctx);
    523a:	250c      	movs	r5, #12
    523c:	435d      	muls	r5, r3
{
    523e:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
    5240:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    5244:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
    5246:	4420      	add	r0, r4
    5248:	2140      	movs	r1, #64	; 0x40
    524a:	f018 fbb9 	bl	1d9c0 <set_starting_state>
	if (err < 0) {
    524e:	1e01      	subs	r1, r0, #0
    5250:	db09      	blt.n	5266 <onoff_start+0x42>
	subdata->cb = data->cb;
    5252:	4b08      	ldr	r3, [pc, #32]	; (5274 <onoff_start+0x50>)
    5254:	442c      	add	r4, r5
	subdata->user_data = data->user_data;
    5256:	e9c4 360e 	strd	r3, r6, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    525a:	f8d8 3004 	ldr.w	r3, [r8, #4]
    525e:	595b      	ldr	r3, [r3, r5]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    5260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    5264:	4718      	bx	r3
		notify(mgr, err);
    5266:	4638      	mov	r0, r7
    5268:	4633      	mov	r3, r6
}
    526a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    526e:	4718      	bx	r3
    5270:	b6db6db7 	.word	0xb6db6db7
    5274:	0001da23 	.word	0x0001da23
    5278:	20000850 	.word	0x20000850

0000527c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    527c:	2200      	movs	r2, #0
{
    527e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5280:	2101      	movs	r1, #1
{
    5282:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5284:	4610      	mov	r0, r2
    5286:	f000 fcff 	bl	5c88 <z_arm_irq_priority_set>
		    nrf_power_clock_isr, 0, 0);

	irq_enable(DT_INST_IRQN(0));
    528a:	2000      	movs	r0, #0
    528c:	f000 fcca 	bl	5c24 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    5290:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	clock_irqs_enable();

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    5294:	68e7      	ldr	r7, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5296:	490c      	ldr	r1, [pc, #48]	; (52c8 <clk_init+0x4c>)
    p_reg->INTENSET = mask;
    5298:	2203      	movs	r2, #3
    p_reg->LFCLKSRC = (uint32_t)(source);
    529a:	2500      	movs	r5, #0
    529c:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
    52a0:	4638      	mov	r0, r7
    p_reg->INTENSET = mask;
    52a2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    52a6:	f017 fadf 	bl	1c868 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    52aa:	2800      	cmp	r0, #0
    52ac:	db0b      	blt.n	52c6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    52ae:	2601      	movs	r6, #1
    52b0:	643e      	str	r6, [r7, #64]	; 0x40
						get_sub_data(dev, i);
    52b2:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    52b4:	4904      	ldr	r1, [pc, #16]	; (52c8 <clk_init+0x4c>)
    52b6:	f104 001c 	add.w	r0, r4, #28
    52ba:	f017 fad5 	bl	1c868 <onoff_manager_init>
		if (err < 0) {
    52be:	2800      	cmp	r0, #0
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    52c0:	bfa4      	itt	ge
    52c2:	64e6      	strge	r6, [r4, #76]	; 0x4c
	}

	return 0;
    52c4:	4628      	movge	r0, r5
}
    52c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    52c8:	000220c8 	.word	0x000220c8

000052cc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(struct device *dev,
    52cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    52d0:	4e0b      	ldr	r6, [pc, #44]	; (5300 <clkstarted_handle.constprop.0+0x34>)
static void clkstarted_handle(struct device *dev,
    52d2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    52d4:	230c      	movs	r3, #12
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    52d6:	68f0      	ldr	r0, [r6, #12]
	clock_control_cb_t callback = sub_data->cb;
    52d8:	434b      	muls	r3, r1
    52da:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    52dc:	e9d4 570e 	ldrd	r5, r7, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    52e0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    52e2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    52e4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    52e6:	4418      	add	r0, r3
    52e8:	f018 fb88 	bl	1d9fc <set_on_state>
	if (callback) {
    52ec:	b12d      	cbz	r5, 52fa <clkstarted_handle.constprop.0+0x2e>
		callback(dev, (clock_control_subsys_t)type, user_data);
    52ee:	463a      	mov	r2, r7
    52f0:	4630      	mov	r0, r6
    52f2:	462b      	mov	r3, r5
}
    52f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    52f8:	4718      	bx	r3
}
    52fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    52fe:	bf00      	nop
    5300:	20000850 	.word	0x20000850

00005304 <generic_hfclk_start>:
{
    5304:	b508      	push	{r3, lr}
	__asm__ volatile(
    5306:	f04f 0320 	mov.w	r3, #32
    530a:	f3ef 8111 	mrs	r1, BASEPRI
    530e:	f383 8811 	msr	BASEPRI, r3
    5312:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5316:	4a13      	ldr	r2, [pc, #76]	; (5364 <generic_hfclk_start+0x60>)
    5318:	6813      	ldr	r3, [r2, #0]
    531a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    531e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    5322:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5324:	d00e      	beq.n	5344 <generic_hfclk_start+0x40>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    532a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    532e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5332:	f013 0301 	ands.w	r3, r3, #1
    5336:	d005      	beq.n	5344 <generic_hfclk_start+0x40>
	struct nrf_clock_control_data *data =
    5338:	4b0b      	ldr	r3, [pc, #44]	; (5368 <generic_hfclk_start+0x64>)
	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
    533a:	68d8      	ldr	r0, [r3, #12]
			set_on_state(get_hf_flags());
    533c:	3040      	adds	r0, #64	; 0x40
    533e:	f018 fb5d 	bl	1d9fc <set_on_state>
			already_started = true;
    5342:	2301      	movs	r3, #1
	__asm__ volatile(
    5344:	f381 8811 	msr	BASEPRI, r1
    5348:	f3bf 8f6f 	isb	sy
	if (already_started) {
    534c:	b123      	cbz	r3, 5358 <generic_hfclk_start+0x54>
}
    534e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    5352:	2000      	movs	r0, #0
    5354:	f7ff bfba 	b.w	52cc <clkstarted_handle.constprop.0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    535c:	2201      	movs	r2, #1
    535e:	601a      	str	r2, [r3, #0]
}
    5360:	bd08      	pop	{r3, pc}
    5362:	bf00      	nop
    5364:	20001498 	.word	0x20001498
    5368:	20000850 	.word	0x20000850

0000536c <lfclk_start>:
{
    536c:	b510      	push	{r4, lr}
	if (!once) {
    536e:	4c06      	ldr	r4, [pc, #24]	; (5388 <lfclk_start+0x1c>)
    5370:	7823      	ldrb	r3, [r4, #0]
    5372:	b92b      	cbnz	r3, 5380 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    5374:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    5378:	f01b fff1 	bl	2135e <z_impl_k_busy_wait>
		once = true;
    537c:	2301      	movs	r3, #1
    537e:	7023      	strb	r3, [r4, #0]
    5380:	4b02      	ldr	r3, [pc, #8]	; (538c <lfclk_start+0x20>)
    5382:	2201      	movs	r2, #1
    5384:	601a      	str	r2, [r3, #0]
}
    5386:	bd10      	pop	{r4, pc}
    5388:	20002b08 	.word	0x20002b08
    538c:	40000008 	.word	0x40000008

00005390 <lfclk_stop>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5390:	4b05      	ldr	r3, [pc, #20]	; (53a8 <lfclk_stop+0x18>)
    5392:	2200      	movs	r2, #0
    5394:	601a      	str	r2, [r3, #0]
{
    5396:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    5398:	681b      	ldr	r3, [r3, #0]
    539a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    539c:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    539e:	4b03      	ldr	r3, [pc, #12]	; (53ac <lfclk_stop+0x1c>)
    53a0:	2201      	movs	r2, #1
    53a2:	601a      	str	r2, [r3, #0]
}
    53a4:	b002      	add	sp, #8
    53a6:	4770      	bx	lr
    53a8:	40000104 	.word	0x40000104
    53ac:	4000000c 	.word	0x4000000c

000053b0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53b0:	4a0d      	ldr	r2, [pc, #52]	; (53e8 <generic_hfclk_stop+0x38>)
    53b2:	f3bf 8f5b 	dmb	ish
{
    53b6:	b082      	sub	sp, #8
    53b8:	e852 3f00 	ldrex	r3, [r2]
    53bc:	f023 0102 	bic.w	r1, r3, #2
    53c0:	e842 1000 	strex	r0, r1, [r2]
    53c4:	2800      	cmp	r0, #0
    53c6:	d1f7      	bne.n	53b8 <generic_hfclk_stop+0x8>
    53c8:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    53cc:	f013 0301 	ands.w	r3, r3, #1
    53d0:	d107      	bne.n	53e2 <generic_hfclk_stop+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    53d2:	4a06      	ldr	r2, [pc, #24]	; (53ec <generic_hfclk_stop+0x3c>)
    53d4:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    53d6:	6813      	ldr	r3, [r2, #0]
    53d8:	9301      	str	r3, [sp, #4]
    (void)dummy;
    53da:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53dc:	4b04      	ldr	r3, [pc, #16]	; (53f0 <generic_hfclk_stop+0x40>)
    53de:	2201      	movs	r2, #1
    53e0:	601a      	str	r2, [r3, #0]
}
    53e2:	b002      	add	sp, #8
    53e4:	4770      	bx	lr
    53e6:	bf00      	nop
    53e8:	20001498 	.word	0x20001498
    53ec:	40000100 	.word	0x40000100
    53f0:	40000004 	.word	0x40000004

000053f4 <api_blocking_start>:
{
    53f4:	b510      	push	{r4, lr}
    53f6:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    53f8:	2300      	movs	r3, #0
    53fa:	2201      	movs	r2, #1
    53fc:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    5400:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5402:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
    5404:	4b0a      	ldr	r3, [pc, #40]	; (5430 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5406:	e9cd 2208 	strd	r2, r2, [sp, #32]
    540a:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    540c:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    540e:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    5412:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    5416:	f018 fb2f 	bl	1da78 <api_start>
	if (err < 0) {
    541a:	2800      	cmp	r0, #0
    541c:	db05      	blt.n	542a <api_blocking_start+0x36>
	return z_impl_k_sem_take(sem, timeout);
    541e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5422:	2300      	movs	r3, #0
    5424:	4620      	mov	r0, r4
    5426:	f016 fcb3 	bl	1bd90 <z_impl_k_sem_take>
}
    542a:	b00a      	add	sp, #40	; 0x28
    542c:	bd10      	pop	{r4, pc}
    542e:	bf00      	nop
    5430:	0001da35 	.word	0x0001da35

00005434 <nrf_power_clock_isr>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5434:	4b18      	ldr	r3, [pc, #96]	; (5498 <nrf_power_clock_isr+0x64>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    5436:	b507      	push	{r0, r1, r2, lr}
    5438:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    543a:	b1b2      	cbz	r2, 546a <nrf_power_clock_isr+0x36>
    return p_reg->INTENSET & mask;
    543c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5440:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    5444:	07d0      	lsls	r0, r2, #31
    5446:	d510      	bpl.n	546a <nrf_power_clock_isr+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5448:	2200      	movs	r2, #0
    544a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    544c:	681b      	ldr	r3, [r3, #0]
    544e:	9300      	str	r3, [sp, #0]
    (void)dummy;
    5450:	9b00      	ldr	r3, [sp, #0]
	struct device *dev = DEVICE_GET(clock_nrf);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct nrf_clock_control_sub_data *data =
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5452:	4b12      	ldr	r3, [pc, #72]	; (549c <nrf_power_clock_isr+0x68>)
		 * HFCLKSTARTED may be generated twice.
		 *
		 * Also software should be notified about clock being on only
		 * if generic request occured.
		 */
		if ((GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING)
    5454:	68db      	ldr	r3, [r3, #12]
    5456:	6c18      	ldr	r0, [r3, #64]	; 0x40
    5458:	f010 0007 	ands.w	r0, r0, #7
    545c:	d105      	bne.n	546a <nrf_power_clock_isr+0x36>
			&& (hfclk_users & HF_USER_GENERIC)) {
    545e:	4b10      	ldr	r3, [pc, #64]	; (54a0 <nrf_power_clock_isr+0x6c>)
    5460:	681b      	ldr	r3, [r3, #0]
    5462:	0799      	lsls	r1, r3, #30
    5464:	d501      	bpl.n	546a <nrf_power_clock_isr+0x36>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    5466:	f7ff ff31 	bl	52cc <clkstarted_handle.constprop.0>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    546a:	4b0e      	ldr	r3, [pc, #56]	; (54a4 <nrf_power_clock_isr+0x70>)
    546c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    546e:	b182      	cbz	r2, 5492 <nrf_power_clock_isr+0x5e>
    return p_reg->INTENSET & mask;
    5470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    5474:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    5478:	0792      	lsls	r2, r2, #30
    547a:	d50a      	bpl.n	5492 <nrf_power_clock_isr+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    547c:	2200      	movs	r2, #0
    547e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    5480:	681b      	ldr	r3, [r3, #0]
    5482:	9301      	str	r3, [sp, #4]
    (void)dummy;
    5484:	9b01      	ldr	r3, [sp, #4]
					NRF_CLOCK_INT_LF_STARTED_MASK)) {
		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started();
		}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5486:	2001      	movs	r0, #1
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    5488:	b003      	add	sp, #12
    548a:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    548e:	f7ff bf1d 	b.w	52cc <clkstarted_handle.constprop.0>
}
    5492:	b003      	add	sp, #12
    5494:	f85d fb04 	ldr.w	pc, [sp], #4
    5498:	40000100 	.word	0x40000100
    549c:	20000850 	.word	0x20000850
    54a0:	20001498 	.word	0x20001498
    54a4:	40000104 	.word	0x40000104

000054a8 <z_nrf_clock_control_get_onoff>:
	return &data->mgr[type];
    54a8:	4a03      	ldr	r2, [pc, #12]	; (54b8 <z_nrf_clock_control_get_onoff+0x10>)
    54aa:	68d2      	ldr	r2, [r2, #12]
    54ac:	b2c3      	uxtb	r3, r0
}
    54ae:	201c      	movs	r0, #28
    54b0:	fb03 2000 	mla	r0, r3, r0, r2
    54b4:	4770      	bx	lr
    54b6:	bf00      	nop
    54b8:	20000850 	.word	0x20000850

000054bc <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54bc:	4b09      	ldr	r3, [pc, #36]	; (54e4 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    54be:	f3bf 8f5b 	dmb	ish
    54c2:	e853 2f00 	ldrex	r2, [r3]
    54c6:	f042 0101 	orr.w	r1, r2, #1
    54ca:	e843 1000 	strex	r0, r1, [r3]
    54ce:	2800      	cmp	r0, #0
    54d0:	d1f7      	bne.n	54c2 <z_nrf_clock_bt_ctlr_hf_request+0x6>
    54d2:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    54d6:	0793      	lsls	r3, r2, #30
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    54d8:	bf5e      	ittt	pl
    54da:	f04f 4380 	movpl.w	r3, #1073741824	; 0x40000000
    54de:	2201      	movpl	r2, #1
    54e0:	601a      	strpl	r2, [r3, #0]
}
    54e2:	4770      	bx	lr
    54e4:	20001498 	.word	0x20001498

000054e8 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    54e8:	4a0d      	ldr	r2, [pc, #52]	; (5520 <z_nrf_clock_bt_ctlr_hf_release+0x38>)
    54ea:	f3bf 8f5b 	dmb	ish
{
    54ee:	b082      	sub	sp, #8
    54f0:	e852 3f00 	ldrex	r3, [r2]
    54f4:	f023 0101 	bic.w	r1, r3, #1
    54f8:	e842 1000 	strex	r0, r1, [r2]
    54fc:	2800      	cmp	r0, #0
    54fe:	d1f7      	bne.n	54f0 <z_nrf_clock_bt_ctlr_hf_release+0x8>
    5500:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    5504:	f013 0302 	ands.w	r3, r3, #2
    5508:	d107      	bne.n	551a <z_nrf_clock_bt_ctlr_hf_release+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    550a:	4a06      	ldr	r2, [pc, #24]	; (5524 <z_nrf_clock_bt_ctlr_hf_release+0x3c>)
    550c:	6013      	str	r3, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    550e:	6813      	ldr	r3, [r2, #0]
    5510:	9301      	str	r3, [sp, #4]
    (void)dummy;
    5512:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5514:	4b04      	ldr	r3, [pc, #16]	; (5528 <z_nrf_clock_bt_ctlr_hf_release+0x40>)
    5516:	2201      	movs	r2, #1
    5518:	601a      	str	r2, [r3, #0]
}
    551a:	b002      	add	sp, #8
    551c:	4770      	bx	lr
    551e:	bf00      	nop
    5520:	20001498 	.word	0x20001498
    5524:	40000100 	.word	0x40000100
    5528:	40000004 	.word	0x40000004

0000552c <z_nrf_clock_control_lf_on>:
{
    552c:	b510      	push	{r4, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    552e:	490f      	ldr	r1, [pc, #60]	; (556c <z_nrf_clock_control_lf_on+0x40>)
    5530:	f3bf 8f5b 	dmb	ish
    5534:	4604      	mov	r4, r0
    5536:	2201      	movs	r2, #1
    5538:	e851 3f00 	ldrex	r3, [r1]
    553c:	e841 2000 	strex	r0, r2, [r1]
    5540:	2800      	cmp	r0, #0
    5542:	d1f9      	bne.n	5538 <z_nrf_clock_control_lf_on+0xc>
    5544:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5548:	b943      	cbnz	r3, 555c <z_nrf_clock_control_lf_on+0x30>
				get_onoff_manager(DEVICE_GET(clock_nrf),
    554a:	4909      	ldr	r1, [pc, #36]	; (5570 <z_nrf_clock_control_lf_on+0x44>)
	return &data->mgr[type];
    554c:	68c8      	ldr	r0, [r1, #12]
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    554e:	4909      	ldr	r1, [pc, #36]	; (5574 <z_nrf_clock_control_lf_on+0x48>)
		err = onoff_request(mgr, &cli);
    5550:	301c      	adds	r0, #28
    5552:	604b      	str	r3, [r1, #4]
    5554:	60cb      	str	r3, [r1, #12]
    5556:	608a      	str	r2, [r1, #8]
    5558:	f017 f999 	bl	1c88e <onoff_request>
	switch (start_mode) {
    555c:	3c01      	subs	r4, #1
    555e:	2c01      	cmp	r4, #1
    5560:	d803      	bhi.n	556a <z_nrf_clock_control_lf_on+0x3e>
}
    5562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		lfclk_spinwait(CLOCK_CONTROL_NRF_K32SRC);
    5566:	f018 ba68 	b.w	1da3a <lfclk_spinwait.constprop.0>
}
    556a:	bd10      	pop	{r4, pc}
    556c:	2000149c 	.word	0x2000149c
    5570:	20000850 	.word	0x20000850
    5574:	20001438 	.word	0x20001438

00005578 <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    5578:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    557a:	4b08      	ldr	r3, [pc, #32]	; (559c <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    557c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5580:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    5584:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    5588:	4290      	cmp	r0, r2
    558a:	d100      	bne.n	558e <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    558c:	4770      	bx	lr
    558e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    5592:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    5594:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    5598:	e7f2      	b.n	5580 <handle_next_cycle_case+0x8>
    559a:	bf00      	nop
    559c:	40011000 	.word	0x40011000

000055a0 <event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    55a0:	4b04      	ldr	r3, [pc, #16]	; (55b4 <event_clear+0x14>)
    55a2:	2200      	movs	r2, #0
{
    55a4:	b082      	sub	sp, #8
    55a6:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	9301      	str	r3, [sp, #4]
    (void)dummy;
    55ac:	9b01      	ldr	r3, [sp, #4]
}
    55ae:	b002      	add	sp, #8
    55b0:	4770      	bx	lr
    55b2:	bf00      	nop
    55b4:	40011140 	.word	0x40011140

000055b8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(void *arg)
{
    55b8:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	event_clear();
    55ba:	f7ff fff1 	bl	55a0 <event_clear>
    return p_reg->CC[ch];
    55be:	4b07      	ldr	r3, [pc, #28]	; (55dc <rtc_nrf_isr+0x24>)

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    55c0:	4a07      	ldr	r2, [pc, #28]	; (55e0 <rtc_nrf_isr+0x28>)
    55c2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    55c6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    55c8:	1ac0      	subs	r0, r0, r3
    55ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    55ce:	4403      	add	r3, r0
    55d0:	6013      	str	r3, [r2, #0]
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
}
    55d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    55d6:	f016 be03 	b.w	1c1e0 <z_clock_announce>
    55da:	bf00      	nop
    55dc:	40011000 	.word	0x40011000
    55e0:	200014a0 	.word	0x200014a0

000055e4 <z_clock_driver_init>:

int z_clock_driver_init(struct device *device)
{
    55e4:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    55e6:	4d10      	ldr	r5, [pc, #64]	; (5628 <z_clock_driver_init+0x44>)
    55e8:	2400      	movs	r4, #0
    55ea:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	ARG_UNUSED(device);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
    55ee:	f7ff ffd7 	bl	55a0 <event_clear>
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    55f2:	4b0e      	ldr	r3, [pc, #56]	; (562c <z_clock_driver_init+0x48>)
    55f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    55f8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    55fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5600:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, 1, rtc_nrf_isr, 0, 0);
    5604:	4622      	mov	r2, r4
    5606:	2101      	movs	r1, #1
    5608:	2011      	movs	r0, #17
    560a:	f000 fb3d 	bl	5c88 <z_arm_irq_priority_set>
	irq_enable(RTC_IRQn);
    560e:	2011      	movs	r0, #17
    5610:	f000 fb08 	bl	5c24 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5614:	4a06      	ldr	r2, [pc, #24]	; (5630 <z_clock_driver_init+0x4c>)
    5616:	2301      	movs	r3, #1
    5618:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(NRF_LFCLK_START_MODE_NOWAIT);
    561a:	4620      	mov	r0, r4
    561c:	602b      	str	r3, [r5, #0]
    561e:	f7ff ff85 	bl	552c <z_nrf_clock_control_lf_on>

	return 0;
}
    5622:	4620      	mov	r0, r4
    5624:	bd38      	pop	{r3, r4, r5, pc}
    5626:	bf00      	nop
    5628:	40011000 	.word	0x40011000
    562c:	e000e100 	.word	0xe000e100
    5630:	40011008 	.word	0x40011008

00005634 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    5634:	b570      	push	{r4, r5, r6, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    5636:	4b2a      	ldr	r3, [pc, #168]	; (56e0 <z_clock_set_timeout+0xac>)
     return p_reg->COUNTER;
    5638:	4c2a      	ldr	r4, [pc, #168]	; (56e4 <z_clock_set_timeout+0xb0>)
    563a:	6819      	ldr	r1, [r3, #0]
    563c:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5640:	4d29      	ldr	r5, [pc, #164]	; (56e8 <z_clock_set_timeout+0xb4>)
	return (a - b) & COUNTER_MAX;
    5642:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5644:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    5648:	bf08      	it	eq
    564a:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    564c:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    5650:	0212      	lsls	r2, r2, #8
    5652:	d434      	bmi.n	56be <z_clock_set_timeout+0x8a>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    5654:	3801      	subs	r0, #1
    5656:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    565a:	42a8      	cmp	r0, r5
    565c:	bfa8      	it	ge
    565e:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5660:	3301      	adds	r3, #1
    p_reg->INTENCLR = mask;
    5662:	f44f 3680 	mov.w	r6, #65536	; 0x10000
    5666:	4418      	add	r0, r3
    5668:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    566c:	42a8      	cmp	r0, r5
    566e:	bf94      	ite	ls
    5670:	180d      	addls	r5, r1, r0
    5672:	194d      	addhi	r5, r1, r5
     return p_reg->COUNTER;
    5674:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    5678:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	event_clear();
    567c:	f7ff ff90 	bl	55a0 <event_clear>
	return (a - b) & COUNTER_MAX;
    5680:	1a09      	subs	r1, r1, r0
    5682:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    5686:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	if (counter_sub(prev_val, now) == 1) {
    568a:	2901      	cmp	r1, #1
    p_reg->CC[ch] = cc_val;
    568c:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    5690:	f8c4 6344 	str.w	r6, [r4, #836]	; 0x344
    5694:	d104      	bne.n	56a0 <z_clock_set_timeout+0x6c>
	z_impl_k_busy_wait(usec_to_wait);
    5696:	200f      	movs	r0, #15
    5698:	f01b fe61 	bl	2135e <z_impl_k_busy_wait>
		event_clear();
    569c:	f7ff ff80 	bl	55a0 <event_clear>
    56a0:	4b12      	ldr	r3, [pc, #72]	; (56ec <z_clock_set_timeout+0xb8>)
    56a2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    56a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    56aa:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    56ae:	1a2b      	subs	r3, r5, r0
    56b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    56b4:	2b01      	cmp	r3, #1
    56b6:	d104      	bne.n	56c2 <z_clock_set_timeout+0x8e>
		handle_next_cycle_case(t);
    56b8:	f7ff ff5e 	bl	5578 <handle_next_cycle_case>
    56bc:	e00b      	b.n	56d6 <z_clock_set_timeout+0xa2>
		ticks = 0;
    56be:	2000      	movs	r0, #0
    56c0:	e7ce      	b.n	5660 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    56c2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    56c6:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    56ca:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    56ce:	1a2d      	subs	r5, r5, r0
    56d0:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    56d2:	022b      	lsls	r3, r5, #8
    56d4:	d4f0      	bmi.n	56b8 <z_clock_set_timeout+0x84>
    p_reg->INTENSET = mask;
    56d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    56da:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    56de:	bd70      	pop	{r4, r5, r6, pc}
    56e0:	200014a0 	.word	0x200014a0
    56e4:	40011000 	.word	0x40011000
    56e8:	007fffff 	.word	0x007fffff
    56ec:	e000e100 	.word	0xe000e100

000056f0 <z_clock_elapsed>:
	__asm__ volatile(
    56f0:	f04f 0220 	mov.w	r2, #32
    56f4:	f3ef 8311 	mrs	r3, BASEPRI
    56f8:	f382 8811 	msr	BASEPRI, r2
    56fc:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    5700:	4a06      	ldr	r2, [pc, #24]	; (571c <z_clock_elapsed+0x2c>)
    5702:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    5706:	4a06      	ldr	r2, [pc, #24]	; (5720 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    5708:	6812      	ldr	r2, [r2, #0]
    570a:	1a80      	subs	r0, r0, r2
    570c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    5710:	f383 8811 	msr	BASEPRI, r3
    5714:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    5718:	4770      	bx	lr
    571a:	bf00      	nop
    571c:	40011000 	.word	0x40011000
    5720:	200014a0 	.word	0x200014a0

00005724 <z_timer_cycle_get_32>:
	__asm__ volatile(
    5724:	f04f 0320 	mov.w	r3, #32
    5728:	f3ef 8211 	mrs	r2, BASEPRI
    572c:	f383 8811 	msr	BASEPRI, r3
    5730:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    5734:	4906      	ldr	r1, [pc, #24]	; (5750 <z_timer_cycle_get_32+0x2c>)
    5736:	4b07      	ldr	r3, [pc, #28]	; (5754 <z_timer_cycle_get_32+0x30>)
    5738:	6808      	ldr	r0, [r1, #0]
    573a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    573e:	f382 8811 	msr	BASEPRI, r2
    5742:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    5746:	1a1b      	subs	r3, r3, r0
    5748:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    574c:	4418      	add	r0, r3
    574e:	4770      	bx	lr
    5750:	200014a0 	.word	0x200014a0
    5754:	40011000 	.word	0x40011000

00005758 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    5758:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    575a:	4c11      	ldr	r4, [pc, #68]	; (57a0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    575c:	4a11      	ldr	r2, [pc, #68]	; (57a4 <_DoInit+0x4c>)
    575e:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5760:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5762:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5766:	4b10      	ldr	r3, [pc, #64]	; (57a8 <_DoInit+0x50>)
    5768:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    576a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    576c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    5770:	4a0e      	ldr	r2, [pc, #56]	; (57ac <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    5772:	490f      	ldr	r1, [pc, #60]	; (57b0 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    5774:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    5776:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    5778:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    577a:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    577c:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    577e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5780:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5782:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    5784:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5786:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5788:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    578a:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    578c:	f019 fae2 	bl	1ed54 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    5790:	4908      	ldr	r1, [pc, #32]	; (57b4 <_DoInit+0x5c>)
    5792:	4620      	mov	r0, r4
    5794:	f019 fade 	bl	1ed54 <strcpy>
  p->acID[6] = ' ';
    5798:	2320      	movs	r3, #32
    579a:	71a3      	strb	r3, [r4, #6]
}
    579c:	bd10      	pop	{r4, pc}
    579e:	bf00      	nop
    57a0:	200014a4 	.word	0x200014a4
    57a4:	00023950 	.word	0x00023950
    57a8:	20002b19 	.word	0x20002b19
    57ac:	20002b09 	.word	0x20002b09
    57b0:	00023959 	.word	0x00023959
    57b4:	0002395d 	.word	0x0002395d

000057b8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    57b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    57bc:	4f23      	ldr	r7, [pc, #140]	; (584c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    57be:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    57c2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    57c4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    57c8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    57ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    57cc:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    57ce:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    57d0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    57d2:	d834      	bhi.n	583e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    57d4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    57d8:	ebaa 0905 	sub.w	r9, sl, r5
    57dc:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    57e0:	4294      	cmp	r4, r2
    57e2:	d811      	bhi.n	5808 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    57e4:	f04f 0918 	mov.w	r9, #24
    57e8:	fb06 9309 	mla	r3, r6, r9, r9
    57ec:	443b      	add	r3, r7
    57ee:	4622      	mov	r2, r4
    57f0:	6858      	ldr	r0, [r3, #4]
    57f2:	4641      	mov	r1, r8
    57f4:	4428      	add	r0, r5
    57f6:	f019 fafc 	bl	1edf2 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    57fa:	fb09 7606 	mla	r6, r9, r6, r7
    57fe:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    5800:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    5802:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5808:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    580a:	429c      	cmp	r4, r3
    580c:	d81b      	bhi.n	5846 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    580e:	fb00 bb0b 	mla	fp, r0, fp, fp
    5812:	44bb      	add	fp, r7
    5814:	464a      	mov	r2, r9
    5816:	f8db 0004 	ldr.w	r0, [fp, #4]
    581a:	442c      	add	r4, r5
    581c:	4428      	add	r0, r5
    581e:	f019 fae8 	bl	1edf2 <memcpy>
      if (NumBytes) {
    5822:	ebb4 040a 	subs.w	r4, r4, sl
    5826:	d006      	beq.n	5836 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    5828:	f8db 0004 	ldr.w	r0, [fp, #4]
    582c:	4622      	mov	r2, r4
    582e:	eb08 0109 	add.w	r1, r8, r9
    5832:	f019 fade 	bl	1edf2 <memcpy>
      pRing->WrOff = NumBytes;
    5836:	2018      	movs	r0, #24
    5838:	fb00 7606 	mla	r6, r0, r6, r7
    583c:	e7e0      	b.n	5800 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    583e:	3b01      	subs	r3, #1
    5840:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5842:	42a3      	cmp	r3, r4
    5844:	d2ce      	bcs.n	57e4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5846:	2000      	movs	r0, #0
    5848:	e7dc      	b.n	5804 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    584a:	bf00      	nop
    584c:	200014a4 	.word	0x200014a4

00005850 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    5850:	4b03      	ldr	r3, [pc, #12]	; (5860 <SEGGER_RTT_HasDataUp+0x10>)
    5852:	2218      	movs	r2, #24
    5854:	fb02 3300 	mla	r3, r2, r0, r3
    5858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    585a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    585c:	1a80      	subs	r0, r0, r2
    585e:	4770      	bx	lr
    5860:	200014a4 	.word	0x200014a4

00005864 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    5864:	4b01      	ldr	r3, [pc, #4]	; (586c <uECC_get_rng+0x8>)
    5866:	6818      	ldr	r0, [r3, #0]
    5868:	4770      	bx	lr
    586a:	bf00      	nop
    586c:	200002c4 	.word	0x200002c4

00005870 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    5870:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    5872:	2208      	movs	r2, #8
{
    5874:	b089      	sub	sp, #36	; 0x24
    5876:	460c      	mov	r4, r1
    5878:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    587a:	f018 fae1 	bl	1de40 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    587e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    5880:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    5882:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    5884:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    5886:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5888:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    588a:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    588c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    588e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    5890:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    5892:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    5894:	2308      	movs	r3, #8
    5896:	466a      	mov	r2, sp
    5898:	4669      	mov	r1, sp
    589a:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    589c:	e9cd 7701 	strd	r7, r7, [sp, #4]
    58a0:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    58a2:	f018 f9cf 	bl	1dc44 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58a6:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    58a8:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58aa:	466a      	mov	r2, sp
    58ac:	4631      	mov	r1, r6
    58ae:	4630      	mov	r0, r6
    58b0:	f018 f9c8 	bl	1dc44 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    58b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    58b6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    58b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    58ba:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    58bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    58be:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    58c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58c2:	4405      	add	r5, r0
	tmp[7] = 0;
    58c4:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    58c8:	466a      	mov	r2, sp
    58ca:	2308      	movs	r3, #8
    58cc:	4669      	mov	r1, sp
    58ce:	4668      	mov	r0, sp
    58d0:	f018 f9b8 	bl	1dc44 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58d4:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    58d6:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58d8:	2308      	movs	r3, #8
    58da:	466a      	mov	r2, sp
    58dc:	4630      	mov	r0, r6
    58de:	f018 f9b1 	bl	1dc44 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    58e2:	6a23      	ldr	r3, [r4, #32]
    58e4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    58e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    58e8:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    58ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    58ec:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    58ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    58f0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    58f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    58f4:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58f6:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    58f8:	2308      	movs	r3, #8
    58fa:	466a      	mov	r2, sp
    58fc:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    58fe:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5902:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5904:	f018 f99e 	bl	1dc44 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    5908:	6a63      	ldr	r3, [r4, #36]	; 0x24
    590a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    590c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    590e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    5910:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    5912:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5914:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    5916:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    5918:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    591a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    591c:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    591e:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    5922:	6a23      	ldr	r3, [r4, #32]
    5924:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5926:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5928:	2308      	movs	r3, #8
    592a:	466a      	mov	r2, sp
    592c:	4630      	mov	r0, r6
    592e:	f018 f989 	bl	1dc44 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    5932:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5934:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    5936:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5938:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    593a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    593c:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    593e:	6a23      	ldr	r3, [r4, #32]
    5940:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    5942:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5944:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5946:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5948:	2308      	movs	r3, #8
    594a:	466a      	mov	r2, sp
    594c:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    594e:	e9cd 7704 	strd	r7, r7, [sp, #16]
    5952:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5954:	f018 faaa 	bl	1deac <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    5958:	6b23      	ldr	r3, [r4, #48]	; 0x30
    595a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    595c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    595e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    5960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5962:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    5964:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5966:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    5968:	6a63      	ldr	r3, [r4, #36]	; 0x24
    596a:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    596c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    596e:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5970:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5972:	2308      	movs	r3, #8
    5974:	466a      	mov	r2, sp
    5976:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    5978:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    597c:	f018 fa96 	bl	1deac <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    5980:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5982:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    5984:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5986:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    5988:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    598a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    598c:	6a23      	ldr	r3, [r4, #32]
    598e:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    5990:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5992:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    5994:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    5996:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    599a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    599c:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    599e:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    59a0:	2308      	movs	r3, #8
    59a2:	466a      	mov	r2, sp
    59a4:	4630      	mov	r0, r6
    59a6:	f018 fa81 	bl	1deac <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    59aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    59ac:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    59ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    59b0:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    59b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    59b6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    59b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    59ba:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    59bc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    59be:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    59c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    59c4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    59c6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    59c8:	2308      	movs	r3, #8
    59ca:	466a      	mov	r2, sp
    59cc:	4630      	mov	r0, r6
    59ce:	f018 fa6d 	bl	1deac <uECC_vli_sub>

	if (carry < 0) {
    59d2:	1a2d      	subs	r5, r5, r0
    59d4:	d410      	bmi.n	59f8 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    59d6:	4c0d      	ldr	r4, [pc, #52]	; (5a0c <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    59d8:	b935      	cbnz	r5, 59e8 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    59da:	2208      	movs	r2, #8
    59dc:	4631      	mov	r1, r6
    59de:	4620      	mov	r0, r4
    59e0:	f018 fa3a 	bl	1de58 <uECC_vli_cmp_unsafe>
		while (carry || 
    59e4:	2801      	cmp	r0, #1
    59e6:	d00f      	beq.n	5a08 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    59e8:	2308      	movs	r3, #8
    59ea:	4622      	mov	r2, r4
    59ec:	4631      	mov	r1, r6
    59ee:	4630      	mov	r0, r6
    59f0:	f018 fa5c 	bl	1deac <uECC_vli_sub>
    59f4:	1a2d      	subs	r5, r5, r0
    59f6:	e7ef      	b.n	59d8 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    59f8:	4a04      	ldr	r2, [pc, #16]	; (5a0c <vli_mmod_fast_secp256r1+0x19c>)
    59fa:	2308      	movs	r3, #8
    59fc:	4631      	mov	r1, r6
    59fe:	4630      	mov	r0, r6
    5a00:	f018 f920 	bl	1dc44 <uECC_vli_add>
		while (carry < 0);
    5a04:	182d      	adds	r5, r5, r0
    5a06:	d4f8      	bmi.n	59fa <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    5a08:	b009      	add	sp, #36	; 0x24
    5a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5a0c:	000220d8 	.word	0x000220d8

00005a10 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    5a10:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    5a12:	4e26      	ldr	r6, [pc, #152]	; (5aac <tc_aes128_set_encrypt_key+0x9c>)
{
    5a14:	4607      	mov	r7, r0
    5a16:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5a18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    5a1a:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    5a1c:	ad01      	add	r5, sp, #4
    5a1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5a20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    5a22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5a24:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5a28:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    5a2c:	4638      	mov	r0, r7
    5a2e:	2f00      	cmp	r7, #0
    5a30:	d038      	beq.n	5aa4 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    5a32:	2c00      	cmp	r4, #0
    5a34:	d038      	beq.n	5aa8 <tc_aes128_set_encrypt_key+0x98>
    5a36:	1f38      	subs	r0, r7, #4
    5a38:	4621      	mov	r1, r4
    5a3a:	4602      	mov	r2, r0
    5a3c:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5a3e:	784b      	ldrb	r3, [r1, #1]
    5a40:	780d      	ldrb	r5, [r1, #0]
    5a42:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    5a44:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    5a48:	78cd      	ldrb	r5, [r1, #3]
    5a4a:	432b      	orrs	r3, r5
    5a4c:	788d      	ldrb	r5, [r1, #2]
    5a4e:	3104      	adds	r1, #4
    5a50:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    5a54:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5a56:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    5a5a:	d1f0      	bne.n	5a3e <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5a5c:	4c14      	ldr	r4, [pc, #80]	; (5ab0 <tc_aes128_set_encrypt_key+0xa0>)
    5a5e:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    5a60:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    5a62:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    5a64:	d116      	bne.n	5a94 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5a66:	f3c3 4207 	ubfx	r2, r3, #16, #8
    5a6a:	5ca5      	ldrb	r5, [r4, r2]
    5a6c:	0e1a      	lsrs	r2, r3, #24
    5a6e:	5ca2      	ldrb	r2, [r4, r2]
    5a70:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    5a74:	f3c3 2507 	ubfx	r5, r3, #8, #8
    5a78:	b2db      	uxtb	r3, r3
    5a7a:	5d65      	ldrb	r5, [r4, r5]
    5a7c:	5ce3      	ldrb	r3, [r4, r3]
    5a7e:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    5a82:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    5a86:	ad0c      	add	r5, sp, #48	; 0x30
    5a88:	f021 0303 	bic.w	r3, r1, #3
    5a8c:	442b      	add	r3, r5
    5a8e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    5a92:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    5a94:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    5a98:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    5a9a:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    5a9c:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    5a9e:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    5aa0:	d1de      	bne.n	5a60 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    5aa2:	2001      	movs	r0, #1
}
    5aa4:	b00d      	add	sp, #52	; 0x34
    5aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    5aa8:	4620      	mov	r0, r4
    5aaa:	e7fb      	b.n	5aa4 <tc_aes128_set_encrypt_key+0x94>
    5aac:	00021c34 	.word	0x00021c34
    5ab0:	00023964 	.word	0x00023964

00005ab4 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    5ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ab8:	4615      	mov	r5, r2
    5aba:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    5abc:	4606      	mov	r6, r0
    5abe:	2800      	cmp	r0, #0
    5ac0:	d058      	beq.n	5b74 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    5ac2:	2900      	cmp	r1, #0
    5ac4:	d059      	beq.n	5b7a <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    5ac6:	2a00      	cmp	r2, #0
    5ac8:	d059      	beq.n	5b7e <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    5aca:	2310      	movs	r3, #16
    5acc:	460a      	mov	r2, r1
    5ace:	4668      	mov	r0, sp
    5ad0:	4619      	mov	r1, r3
    5ad2:	f017 fff3 	bl	1dabc <_copy>
	add_round_key(state, s->words);
    5ad6:	4629      	mov	r1, r5
    5ad8:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    5ada:	4c2a      	ldr	r4, [pc, #168]	; (5b84 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    5adc:	f018 fef8 	bl	1e8d0 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    5ae0:	f105 0710 	add.w	r7, r5, #16
    5ae4:	46a1      	mov	r9, r4
    5ae6:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    5ae8:	46e8      	mov	r8, sp
{
    5aea:	466a      	mov	r2, sp
    5aec:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    5aee:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    5af0:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    5af2:	5c61      	ldrb	r1, [r4, r1]
    5af4:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5af8:	d1f9      	bne.n	5aee <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    5afa:	4668      	mov	r0, sp
    5afc:	f018 ff2d 	bl	1e95a <shift_rows>
	mult_row_column(t, s);
    5b00:	4669      	mov	r1, sp
    5b02:	a804      	add	r0, sp, #16
    5b04:	f018 ff62 	bl	1e9cc <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    5b08:	a901      	add	r1, sp, #4
    5b0a:	a805      	add	r0, sp, #20
    5b0c:	f018 ff5e 	bl	1e9cc <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    5b10:	a902      	add	r1, sp, #8
    5b12:	a806      	add	r0, sp, #24
    5b14:	f018 ff5a 	bl	1e9cc <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    5b18:	a903      	add	r1, sp, #12
    5b1a:	a807      	add	r0, sp, #28
    5b1c:	f018 ff56 	bl	1e9cc <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    5b20:	2310      	movs	r3, #16
    5b22:	4619      	mov	r1, r3
    5b24:	eb0d 0203 	add.w	r2, sp, r3
    5b28:	4668      	mov	r0, sp
    5b2a:	f017 ffc7 	bl	1dabc <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    5b2e:	4639      	mov	r1, r7
    5b30:	4668      	mov	r0, sp
    5b32:	3710      	adds	r7, #16
    5b34:	f018 fecc 	bl	1e8d0 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    5b38:	42af      	cmp	r7, r5
    5b3a:	d1d5      	bne.n	5ae8 <tc_aes_encrypt+0x34>
    5b3c:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    5b3e:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    5b42:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    5b44:	f819 3003 	ldrb.w	r3, [r9, r3]
    5b48:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5b4c:	d1f7      	bne.n	5b3e <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    5b4e:	4668      	mov	r0, sp
    5b50:	f018 ff03 	bl	1e95a <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    5b54:	4629      	mov	r1, r5
    5b56:	4668      	mov	r0, sp
    5b58:	f018 feba 	bl	1e8d0 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    5b5c:	2310      	movs	r3, #16
    5b5e:	4619      	mov	r1, r3
    5b60:	466a      	mov	r2, sp
    5b62:	4630      	mov	r0, r6
    5b64:	f017 ffaa 	bl	1dabc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    5b68:	4668      	mov	r0, sp
    5b6a:	2210      	movs	r2, #16
    5b6c:	4621      	mov	r1, r4
    5b6e:	f017 ffb2 	bl	1dad6 <_set>

	return TC_CRYPTO_SUCCESS;
    5b72:	2001      	movs	r0, #1
}
    5b74:	b009      	add	sp, #36	; 0x24
    5b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    5b7a:	4608      	mov	r0, r1
    5b7c:	e7fa      	b.n	5b74 <tc_aes_encrypt+0xc0>
    5b7e:	4610      	mov	r0, r2
    5b80:	e7f8      	b.n	5b74 <tc_aes_encrypt+0xc0>
    5b82:	bf00      	nop
    5b84:	00023964 	.word	0x00023964

00005b88 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    5b88:	4a09      	ldr	r2, [pc, #36]	; (5bb0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    5b8a:	490a      	ldr	r1, [pc, #40]	; (5bb4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    5b8c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    5b8e:	6809      	ldr	r1, [r1, #0]
    5b90:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5b92:	4909      	ldr	r1, [pc, #36]	; (5bb8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    5b94:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5b96:	684b      	ldr	r3, [r1, #4]
    5b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5b9c:	604b      	str	r3, [r1, #4]
    5b9e:	2300      	movs	r3, #0
    5ba0:	f383 8811 	msr	BASEPRI, r3
    5ba4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    5ba8:	6893      	ldr	r3, [r2, #8]
}
    5baa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    5bac:	4770      	bx	lr
    5bae:	bf00      	nop
    5bb0:	20002a80 	.word	0x20002a80
    5bb4:	000234a0 	.word	0x000234a0
    5bb8:	e000ed00 	.word	0xe000ed00

00005bbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5bbc:	490f      	ldr	r1, [pc, #60]	; (5bfc <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5bbe:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5bc0:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    5bc4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5bc6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5bca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5bce:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5bd0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5bd4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5bd8:	4f09      	ldr	r7, [pc, #36]	; (5c00 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5bda:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5bde:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    5be0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5be2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5be4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    5be6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5be8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5bea:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5bee:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    5bf2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5bf6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    5bfa:	4770      	bx	lr
    ldr r1, =_kernel
    5bfc:	20002a80 	.word	0x20002a80
    ldr v4, =_SCS_ICSR
    5c00:	e000ed04 	.word	0xe000ed04

00005c04 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    5c04:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5c08:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5c0a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5c0e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5c12:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5c14:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5c18:	2902      	cmp	r1, #2
    beq _oops
    5c1a:	d0ff      	beq.n	5c1c <_oops>

00005c1c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5c1c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5c1e:	f019 f818 	bl	1ec52 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5c22:	bd01      	pop	{r0, pc}

00005c24 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    5c24:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5c26:	2b00      	cmp	r3, #0
    5c28:	db08      	blt.n	5c3c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c2a:	2201      	movs	r2, #1
    5c2c:	f000 001f 	and.w	r0, r0, #31
    5c30:	fa02 f000 	lsl.w	r0, r2, r0
    5c34:	095b      	lsrs	r3, r3, #5
    5c36:	4a02      	ldr	r2, [pc, #8]	; (5c40 <arch_irq_enable+0x1c>)
    5c38:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop
    5c40:	e000e100 	.word	0xe000e100

00005c44 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5c44:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    5c46:	2b00      	cmp	r3, #0
    5c48:	db0d      	blt.n	5c66 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5c4a:	2201      	movs	r2, #1
    5c4c:	095b      	lsrs	r3, r3, #5
    5c4e:	f000 001f 	and.w	r0, r0, #31
    5c52:	fa02 f000 	lsl.w	r0, r2, r0
    5c56:	3320      	adds	r3, #32
    5c58:	4a03      	ldr	r2, [pc, #12]	; (5c68 <arch_irq_disable+0x24>)
    5c5a:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5c5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c62:	f3bf 8f6f 	isb	sy
}
    5c66:	4770      	bx	lr
    5c68:	e000e100 	.word	0xe000e100

00005c6c <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5c6c:	4b05      	ldr	r3, [pc, #20]	; (5c84 <arch_irq_is_enabled+0x18>)
    5c6e:	0942      	lsrs	r2, r0, #5
    5c70:	f000 001f 	and.w	r0, r0, #31
    5c74:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5c78:	2301      	movs	r3, #1
    5c7a:	fa03 f000 	lsl.w	r0, r3, r0
}
    5c7e:	4010      	ands	r0, r2
    5c80:	4770      	bx	lr
    5c82:	bf00      	nop
    5c84:	e000e100 	.word	0xe000e100

00005c88 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5c88:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5c8a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5c8c:	bfa8      	it	ge
    5c8e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    5c92:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5c96:	bfb8      	it	lt
    5c98:	4b06      	ldrlt	r3, [pc, #24]	; (5cb4 <z_arm_irq_priority_set+0x2c>)
    5c9a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5c9e:	bfac      	ite	ge
    5ca0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ca4:	f000 000f 	andlt.w	r0, r0, #15
    5ca8:	b2c9      	uxtb	r1, r1
    5caa:	bfb4      	ite	lt
    5cac:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5cae:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    5cb2:	4770      	bx	lr
    5cb4:	e000ed14 	.word	0xe000ed14

00005cb8 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    5cb8:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    5cba:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    5cbc:	4b04      	ldr	r3, [pc, #16]	; (5cd0 <_arch_isr_direct_pm+0x18>)
    5cbe:	6a18      	ldr	r0, [r3, #32]
    5cc0:	b118      	cbz	r0, 5cca <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    5cc2:	2200      	movs	r2, #0
    5cc4:	621a      	str	r2, [r3, #32]
		z_sys_power_save_idle_exit(idle_val);
    5cc6:	f01b f8a0 	bl	20e0a <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    5cca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    5ccc:	bd08      	pop	{r3, pc}
    5cce:	bf00      	nop
    5cd0:	20002a80 	.word	0x20002a80

00005cd4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    5cd4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5cd8:	9b00      	ldr	r3, [sp, #0]
    5cda:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5cde:	490a      	ldr	r1, [pc, #40]	; (5d08 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5ce0:	9b01      	ldr	r3, [sp, #4]
    5ce2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5ce6:	9b02      	ldr	r3, [sp, #8]
    5ce8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5cec:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5cf0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    5cf4:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5cf8:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5cfc:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5cfe:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5d00:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    5d02:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    5d04:	4770      	bx	lr
    5d06:	bf00      	nop
    5d08:	0001c92f 	.word	0x0001c92f

00005d0c <arch_switch_to_main_thread>:
}
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5d0c:	b508      	push	{r3, lr}
    5d0e:	4606      	mov	r6, r0
    5d10:	460d      	mov	r5, r1
    5d12:	4614      	mov	r4, r2
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5d14:	f000 fb0a 	bl	632c <z_arm_configure_static_mpu_regions>
#endif
	_current = main_thread;
    5d18:	4b07      	ldr	r3, [pc, #28]	; (5d38 <arch_switch_to_main_thread+0x2c>)
    5d1a:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5d1c:	4620      	mov	r0, r4
    5d1e:	f385 8809 	msr	PSP, r5
    5d22:	2100      	movs	r1, #0
    5d24:	b663      	cpsie	if
    5d26:	f381 8811 	msr	BASEPRI, r1
    5d2a:	f3bf 8f6f 	isb	sy
    5d2e:	2200      	movs	r2, #0
    5d30:	2300      	movs	r3, #0
    5d32:	f016 fdfc 	bl	1c92e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5d36:	bf00      	nop
    5d38:	20002a80 	.word	0x20002a80

00005d3c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5d3c:	4901      	ldr	r1, [pc, #4]	; (5d44 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5d3e:	2210      	movs	r2, #16
	str	r2, [r1]
    5d40:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5d42:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5d44:	e000ed10 	.word	0xe000ed10

00005d48 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5d48:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5d4a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5d4c:	f380 8811 	msr	BASEPRI, r0
	isb
    5d50:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5d54:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5d58:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5d5a:	b662      	cpsie	i
	isb
    5d5c:	f3bf 8f6f 	isb	sy

	bx	lr
    5d60:	4770      	bx	lr
    5d62:	bf00      	nop

00005d64 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
    5d66:	4606      	mov	r6, r0

	if (esf != NULL) {
    5d68:	460c      	mov	r4, r1
    5d6a:	b301      	cbz	r1, 5dae <z_arm_fatal_error+0x4a>
    5d6c:	4b13      	ldr	r3, [pc, #76]	; (5dbc <z_arm_fatal_error+0x58>)
    5d6e:	4d14      	ldr	r5, [pc, #80]	; (5dc0 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5d70:	4814      	ldr	r0, [pc, #80]	; (5dc4 <z_arm_fatal_error+0x60>)
    5d72:	1aed      	subs	r5, r5, r3
    5d74:	08ed      	lsrs	r5, r5, #3
    5d76:	01ad      	lsls	r5, r5, #6
    5d78:	f045 0501 	orr.w	r5, r5, #1
    5d7c:	f8ad 5000 	strh.w	r5, [sp]
    5d80:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    5d84:	6809      	ldr	r1, [r1, #0]
    5d86:	f017 f8ac 	bl	1cee2 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5d8a:	f8ad 5000 	strh.w	r5, [sp]
    5d8e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5d92:	68e1      	ldr	r1, [r4, #12]
    5d94:	480c      	ldr	r0, [pc, #48]	; (5dc8 <z_arm_fatal_error+0x64>)
    5d96:	f017 f8a4 	bl	1cee2 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    5d9a:	69e1      	ldr	r1, [r4, #28]
    5d9c:	480b      	ldr	r0, [pc, #44]	; (5dcc <z_arm_fatal_error+0x68>)
    5d9e:	462a      	mov	r2, r5
    5da0:	f017 f872 	bl	1ce88 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    5da4:	69a1      	ldr	r1, [r4, #24]
    5da6:	480a      	ldr	r0, [pc, #40]	; (5dd0 <z_arm_fatal_error+0x6c>)
    5da8:	462a      	mov	r2, r5
    5daa:	f017 f86d 	bl	1ce88 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    5dae:	4621      	mov	r1, r4
    5db0:	4630      	mov	r0, r6
}
    5db2:	b002      	add	sp, #8
    5db4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    5db8:	f015 b9aa 	b.w	1b110 <z_fatal_error>
    5dbc:	00021aac 	.word	0x00021aac
    5dc0:	00021bd4 	.word	0x00021bd4
    5dc4:	00023a64 	.word	0x00023a64
    5dc8:	00023a93 	.word	0x00023a93
    5dcc:	00023ac2 	.word	0x00023ac2
    5dd0:	00023ad1 	.word	0x00023ad1

00005dd4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5dd4:	bf30      	wfi
    b z_SysNmiOnReset
    5dd6:	f7ff bffd 	b.w	5dd4 <z_SysNmiOnReset>
    5dda:	bf00      	nop

00005ddc <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5ddc:	4a0e      	ldr	r2, [pc, #56]	; (5e18 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    5dde:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5de0:	4b0e      	ldr	r3, [pc, #56]	; (5e1c <z_arm_prep_c+0x40>)
    5de2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5de6:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5de8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dec:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    5df0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    5df4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    5df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    5dfc:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    5e00:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    5e04:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    5e08:	f015 f9fe 	bl	1b208 <z_bss_zero>
	z_data_copy();
    5e0c:	f015 fa06 	bl	1b21c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    5e10:	f000 fa5a 	bl	62c8 <z_arm_interrupt_init>
	z_cstart();
    5e14:	f015 fa40 	bl	1b298 <z_cstart>
    5e18:	00000000 	.word	0x00000000
    5e1c:	e000ed00 	.word	0xe000ed00

00005e20 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5e20:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5e22:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5e24:	4a0b      	ldr	r2, [pc, #44]	; (5e54 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5e26:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    5e28:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5e2a:	bf1e      	ittt	ne
	movne	r1, #0
    5e2c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5e2e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    5e30:	f01a ffeb 	blne	20e0a <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5e34:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5e36:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5e3a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5e3e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5e42:	4905      	ldr	r1, [pc, #20]	; (5e58 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5e44:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5e46:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    5e48:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5e4a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5e4e:	4903      	ldr	r1, [pc, #12]	; (5e5c <_isr_wrapper+0x3c>)
	bx r1
    5e50:	4708      	bx	r1
    5e52:	0000      	.short	0x0000
	ldr r2, =_kernel
    5e54:	20002a80 	.word	0x20002a80
	ldr r1, =_sw_isr_table
    5e58:	000218b4 	.word	0x000218b4
	ldr r1, =z_arm_int_exit
    5e5c:	000062ad 	.word	0x000062ad

00005e60 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    5e60:	f019 f818 	bl	1ee94 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5e64:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5e66:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5e6a:	4808      	ldr	r0, [pc, #32]	; (5e8c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    5e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    5e70:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5e72:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5e76:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5e7a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5e7c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5e7e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5e82:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5e86:	f7ff ffa9 	bl	5ddc <z_arm_prep_c>
    5e8a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    5e8c:	20004bd8 	.word	0x20004bd8

00005e90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5e90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5e94:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    5e98:	4672      	mov	r2, lr

	push {r0, lr}
    5e9a:	b501      	push	{r0, lr}

	bl z_arm_fault
    5e9c:	f000 f932 	bl	6104 <z_arm_fault>

	pop {r0, pc}
    5ea0:	bd01      	pop	{r0, pc}
    5ea2:	bf00      	nop

00005ea4 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    5ea4:	b570      	push	{r4, r5, r6, lr}
    5ea6:	4b23      	ldr	r3, [pc, #140]	; (5f34 <usage_fault.isra.0+0x90>)
    5ea8:	4c23      	ldr	r4, [pc, #140]	; (5f38 <usage_fault.isra.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5eaa:	4d24      	ldr	r5, [pc, #144]	; (5f3c <usage_fault.isra.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    5eac:	4824      	ldr	r0, [pc, #144]	; (5f40 <usage_fault.isra.0+0x9c>)
    5eae:	1ae4      	subs	r4, r4, r3
    5eb0:	08e4      	lsrs	r4, r4, #3
    5eb2:	01a4      	lsls	r4, r4, #6
    5eb4:	f044 0601 	orr.w	r6, r4, #1
    5eb8:	4631      	mov	r1, r6
    5eba:	f016 ffd8 	bl	1ce6e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5ebe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5ec0:	0193      	lsls	r3, r2, #6
    5ec2:	d503      	bpl.n	5ecc <usage_fault.isra.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    5ec4:	481f      	ldr	r0, [pc, #124]	; (5f44 <usage_fault.isra.0+0xa0>)
    5ec6:	4631      	mov	r1, r6
    5ec8:	f016 ffd1 	bl	1ce6e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5ecc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ece:	01dd      	lsls	r5, r3, #7
    5ed0:	d504      	bpl.n	5edc <usage_fault.isra.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    5ed2:	481d      	ldr	r0, [pc, #116]	; (5f48 <usage_fault.isra.0+0xa4>)
    5ed4:	f044 0101 	orr.w	r1, r4, #1
    5ed8:	f016 ffc9 	bl	1ce6e <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5edc:	4d17      	ldr	r5, [pc, #92]	; (5f3c <usage_fault.isra.0+0x98>)
    5ede:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5ee0:	0310      	lsls	r0, r2, #12
    5ee2:	d504      	bpl.n	5eee <usage_fault.isra.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    5ee4:	4819      	ldr	r0, [pc, #100]	; (5f4c <usage_fault.isra.0+0xa8>)
    5ee6:	f044 0101 	orr.w	r1, r4, #1
    5eea:	f016 ffc0 	bl	1ce6e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5eee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5ef0:	0359      	lsls	r1, r3, #13
    5ef2:	d504      	bpl.n	5efe <usage_fault.isra.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5ef4:	4816      	ldr	r0, [pc, #88]	; (5f50 <usage_fault.isra.0+0xac>)
    5ef6:	f044 0101 	orr.w	r1, r4, #1
    5efa:	f016 ffb8 	bl	1ce6e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5efe:	4d0f      	ldr	r5, [pc, #60]	; (5f3c <usage_fault.isra.0+0x98>)
    5f00:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5f02:	0392      	lsls	r2, r2, #14
    5f04:	d504      	bpl.n	5f10 <usage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5f06:	4813      	ldr	r0, [pc, #76]	; (5f54 <usage_fault.isra.0+0xb0>)
    5f08:	f044 0101 	orr.w	r1, r4, #1
    5f0c:	f016 ffaf 	bl	1ce6e <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5f10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f12:	03db      	lsls	r3, r3, #15
    5f14:	d504      	bpl.n	5f20 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5f16:	4810      	ldr	r0, [pc, #64]	; (5f58 <usage_fault.isra.0+0xb4>)
    5f18:	f044 0101 	orr.w	r1, r4, #1
    5f1c:	f016 ffa7 	bl	1ce6e <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5f20:	4a06      	ldr	r2, [pc, #24]	; (5f3c <usage_fault.isra.0+0x98>)
    5f22:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5f24:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5f28:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5f2c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5f2e:	2000      	movs	r0, #0
    5f30:	bd70      	pop	{r4, r5, r6, pc}
    5f32:	bf00      	nop
    5f34:	00021aac 	.word	0x00021aac
    5f38:	00021bd4 	.word	0x00021bd4
    5f3c:	e000ed00 	.word	0xe000ed00
    5f40:	00023aff 	.word	0x00023aff
    5f44:	00023b17 	.word	0x00023b17
    5f48:	00023b2a 	.word	0x00023b2a
    5f4c:	00023b44 	.word	0x00023b44
    5f50:	00023b62 	.word	0x00023b62
    5f54:	00023b87 	.word	0x00023b87
    5f58:	00023ba1 	.word	0x00023ba1

00005f5c <mem_manage_fault.isra.0>:
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f60:	4b27      	ldr	r3, [pc, #156]	; (6000 <mem_manage_fault.isra.0+0xa4>)
    5f62:	4c28      	ldr	r4, [pc, #160]	; (6004 <mem_manage_fault.isra.0+0xa8>)
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5f64:	4d28      	ldr	r5, [pc, #160]	; (6008 <mem_manage_fault.isra.0+0xac>)
    5f66:	1ae4      	subs	r4, r4, r3
    5f68:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    5f6a:	01a4      	lsls	r4, r4, #6
    5f6c:	f044 0801 	orr.w	r8, r4, #1
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    5f70:	4607      	mov	r7, r0
    5f72:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    5f74:	4825      	ldr	r0, [pc, #148]	; (600c <mem_manage_fault.isra.0+0xb0>)
    5f76:	4641      	mov	r1, r8
    5f78:	f016 ff79 	bl	1ce6e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5f7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5f7e:	06d1      	lsls	r1, r2, #27
    5f80:	d503      	bpl.n	5f8a <mem_manage_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    5f82:	4823      	ldr	r0, [pc, #140]	; (6010 <mem_manage_fault.isra.0+0xb4>)
    5f84:	4641      	mov	r1, r8
    5f86:	f016 ff72 	bl	1ce6e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5f8a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f8c:	071a      	lsls	r2, r3, #28
    5f8e:	d504      	bpl.n	5f9a <mem_manage_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    5f90:	4820      	ldr	r0, [pc, #128]	; (6014 <mem_manage_fault.isra.0+0xb8>)
    5f92:	f044 0101 	orr.w	r1, r4, #1
    5f96:	f016 ff6a 	bl	1ce6e <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5f9a:	4d1b      	ldr	r5, [pc, #108]	; (6008 <mem_manage_fault.isra.0+0xac>)
    5f9c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5f9e:	079b      	lsls	r3, r3, #30
    5fa0:	d512      	bpl.n	5fc8 <mem_manage_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Data Access Violation");
    5fa2:	f044 0801 	orr.w	r8, r4, #1
    5fa6:	481c      	ldr	r0, [pc, #112]	; (6018 <mem_manage_fault.isra.0+0xbc>)
    5fa8:	4641      	mov	r1, r8
    5faa:	f016 ff60 	bl	1ce6e <log_0>
		mmfar = SCB->MMFAR;
    5fae:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5fb0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5fb2:	0618      	lsls	r0, r3, #24
    5fb4:	d508      	bpl.n	5fc8 <mem_manage_fault.isra.0+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5fb6:	4819      	ldr	r0, [pc, #100]	; (601c <mem_manage_fault.isra.0+0xc0>)
    5fb8:	4642      	mov	r2, r8
    5fba:	f016 ff65 	bl	1ce88 <log_1>
			if (from_hard_fault) {
    5fbe:	b11f      	cbz	r7, 5fc8 <mem_manage_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5fc0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5fc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5fc6:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5fc8:	4d0f      	ldr	r5, [pc, #60]	; (6008 <mem_manage_fault.isra.0+0xac>)
    5fca:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    5fcc:	07d2      	lsls	r2, r2, #31
    5fce:	d504      	bpl.n	5fda <mem_manage_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Instruction Access Violation");
    5fd0:	4813      	ldr	r0, [pc, #76]	; (6020 <mem_manage_fault.isra.0+0xc4>)
    5fd2:	f044 0101 	orr.w	r1, r4, #1
    5fd6:	f016 ff4a 	bl	1ce6e <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5fda:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5fdc:	069b      	lsls	r3, r3, #26
    5fde:	d504      	bpl.n	5fea <mem_manage_fault.isra.0+0x8e>
		PR_FAULT_INFO(
    5fe0:	4810      	ldr	r0, [pc, #64]	; (6024 <mem_manage_fault.isra.0+0xc8>)
    5fe2:	f044 0101 	orr.w	r1, r4, #1
    5fe6:	f016 ff42 	bl	1ce6e <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    5fea:	4b07      	ldr	r3, [pc, #28]	; (6008 <mem_manage_fault.isra.0+0xac>)
    5fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5ff0:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5ff2:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    5ff6:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    5ff8:	7030      	strb	r0, [r6, #0]
}
    5ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5ffe:	bf00      	nop
    6000:	00021aac 	.word	0x00021aac
    6004:	00021bd4 	.word	0x00021bd4
    6008:	e000ed00 	.word	0xe000ed00
    600c:	00023bcc 	.word	0x00023bcc
    6010:	00023be2 	.word	0x00023be2
    6014:	00023c15 	.word	0x00023c15
    6018:	00023c28 	.word	0x00023c28
    601c:	00023c40 	.word	0x00023c40
    6020:	00023c56 	.word	0x00023c56
    6024:	00023c75 	.word	0x00023c75

00006028 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    6028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    602c:	4b2a      	ldr	r3, [pc, #168]	; (60d8 <bus_fault.isra.0+0xb0>)
    602e:	4c2b      	ldr	r4, [pc, #172]	; (60dc <bus_fault.isra.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6030:	4d2b      	ldr	r5, [pc, #172]	; (60e0 <bus_fault.isra.0+0xb8>)
    6032:	1ae4      	subs	r4, r4, r3
    6034:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    6036:	01a4      	lsls	r4, r4, #6
    6038:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    603c:	4607      	mov	r7, r0
    603e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    6040:	4828      	ldr	r0, [pc, #160]	; (60e4 <bus_fault.isra.0+0xbc>)
    6042:	4641      	mov	r1, r8
    6044:	f016 ff13 	bl	1ce6e <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    6048:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    604a:	04d1      	lsls	r1, r2, #19
    604c:	d503      	bpl.n	6056 <bus_fault.isra.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    604e:	4826      	ldr	r0, [pc, #152]	; (60e8 <bus_fault.isra.0+0xc0>)
    6050:	4641      	mov	r1, r8
    6052:	f016 ff0c 	bl	1ce6e <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    6056:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6058:	051a      	lsls	r2, r3, #20
    605a:	d504      	bpl.n	6066 <bus_fault.isra.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    605c:	4823      	ldr	r0, [pc, #140]	; (60ec <bus_fault.isra.0+0xc4>)
    605e:	f044 0101 	orr.w	r1, r4, #1
    6062:	f016 ff04 	bl	1ce6e <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    6066:	4d1e      	ldr	r5, [pc, #120]	; (60e0 <bus_fault.isra.0+0xb8>)
    6068:	6aab      	ldr	r3, [r5, #40]	; 0x28
    606a:	059b      	lsls	r3, r3, #22
    606c:	d512      	bpl.n	6094 <bus_fault.isra.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    606e:	f044 0801 	orr.w	r8, r4, #1
    6072:	481f      	ldr	r0, [pc, #124]	; (60f0 <bus_fault.isra.0+0xc8>)
    6074:	4641      	mov	r1, r8
    6076:	f016 fefa 	bl	1ce6e <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    607a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    607c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    607e:	0418      	lsls	r0, r3, #16
    6080:	d508      	bpl.n	6094 <bus_fault.isra.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    6082:	481c      	ldr	r0, [pc, #112]	; (60f4 <bus_fault.isra.0+0xcc>)
    6084:	4642      	mov	r2, r8
    6086:	f016 feff 	bl	1ce88 <log_1>
			if (from_hard_fault) {
    608a:	b11f      	cbz	r7, 6094 <bus_fault.isra.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    608c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    608e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    6092:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    6094:	4d12      	ldr	r5, [pc, #72]	; (60e0 <bus_fault.isra.0+0xb8>)
    6096:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6098:	0559      	lsls	r1, r3, #21
    609a:	d504      	bpl.n	60a6 <bus_fault.isra.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    609c:	4816      	ldr	r0, [pc, #88]	; (60f8 <bus_fault.isra.0+0xd0>)
    609e:	f044 0101 	orr.w	r1, r4, #1
    60a2:	f016 fee4 	bl	1ce6e <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    60a6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    60a8:	05da      	lsls	r2, r3, #23
    60aa:	d50d      	bpl.n	60c8 <bus_fault.isra.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    60ac:	4813      	ldr	r0, [pc, #76]	; (60fc <bus_fault.isra.0+0xd4>)
    60ae:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    60b2:	f016 fedc 	bl	1ce6e <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    60b6:	4a0a      	ldr	r2, [pc, #40]	; (60e0 <bus_fault.isra.0+0xb8>)
    60b8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    60ba:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    60bc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    60c0:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    60c2:	7030      	strb	r0, [r6, #0]
}
    60c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    60c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    60ca:	049b      	lsls	r3, r3, #18
    60cc:	d5f3      	bpl.n	60b6 <bus_fault.isra.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    60ce:	480c      	ldr	r0, [pc, #48]	; (6100 <bus_fault.isra.0+0xd8>)
    60d0:	f044 0101 	orr.w	r1, r4, #1
    60d4:	e7ed      	b.n	60b2 <bus_fault.isra.0+0x8a>
    60d6:	bf00      	nop
    60d8:	00021aac 	.word	0x00021aac
    60dc:	00021bd4 	.word	0x00021bd4
    60e0:	e000ed00 	.word	0xe000ed00
    60e4:	00023ca4 	.word	0x00023ca4
    60e8:	00023cba 	.word	0x00023cba
    60ec:	00023c15 	.word	0x00023c15
    60f0:	00023ccb 	.word	0x00023ccb
    60f4:	00023ce4 	.word	0x00023ce4
    60f8:	00023cf9 	.word	0x00023cf9
    60fc:	00023d14 	.word	0x00023d14
    6100:	00023c75 	.word	0x00023c75

00006104 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return)
{
    6104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6108:	4b56      	ldr	r3, [pc, #344]	; (6264 <z_arm_fault+0x160>)
    610a:	685e      	ldr	r6, [r3, #4]
{
    610c:	b08a      	sub	sp, #40	; 0x28
    610e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    6110:	f3c6 0408 	ubfx	r4, r6, #0, #9
    6114:	2500      	movs	r5, #0
    6116:	f385 8811 	msr	BASEPRI, r5
    611a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    611e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6122:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6126:	d10d      	bne.n	6144 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6128:	f002 030c 	and.w	r3, r2, #12
    612c:	2b08      	cmp	r3, #8
    612e:	d10b      	bne.n	6148 <z_arm_fault+0x44>
    6130:	494d      	ldr	r1, [pc, #308]	; (6268 <z_arm_fault+0x164>)
    6132:	4b4e      	ldr	r3, [pc, #312]	; (626c <z_arm_fault+0x168>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    6134:	484e      	ldr	r0, [pc, #312]	; (6270 <z_arm_fault+0x16c>)
    6136:	1ac9      	subs	r1, r1, r3
    6138:	08c9      	lsrs	r1, r1, #3
    613a:	0189      	lsls	r1, r1, #6
    613c:	f041 0101 	orr.w	r1, r1, #1
    6140:	f016 fe95 	bl	1ce6e <log_0>
		return NULL;
    6144:	462f      	mov	r7, r5
    6146:	e003      	b.n	6150 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6148:	0712      	lsls	r2, r2, #28
    614a:	d401      	bmi.n	6150 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    614c:	4607      	mov	r7, r0
			*nested_exc = true;
    614e:	2501      	movs	r5, #1
	*recoverable = false;
    6150:	2300      	movs	r3, #0
    6152:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    6156:	1ee3      	subs	r3, r4, #3
    6158:	2b09      	cmp	r3, #9
    615a:	d86a      	bhi.n	6232 <z_arm_fault+0x12e>
    615c:	e8df f003 	tbb	[pc, r3]
    6160:	3c5c5805 	.word	0x3c5c5805
    6164:	69696969 	.word	0x69696969
    6168:	6069      	.short	0x6069
    616a:	4b40      	ldr	r3, [pc, #256]	; (626c <z_arm_fault+0x168>)
    616c:	4e3e      	ldr	r6, [pc, #248]	; (6268 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    616e:	4841      	ldr	r0, [pc, #260]	; (6274 <z_arm_fault+0x170>)
    6170:	1af6      	subs	r6, r6, r3
    6172:	08f6      	lsrs	r6, r6, #3
    6174:	01b6      	lsls	r6, r6, #6
    6176:	f046 0601 	orr.w	r6, r6, #1
    617a:	4631      	mov	r1, r6
    617c:	f016 fe77 	bl	1ce6e <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6180:	4b38      	ldr	r3, [pc, #224]	; (6264 <z_arm_fault+0x160>)
    6182:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    6184:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6188:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    618c:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    6190:	d005      	beq.n	619e <z_arm_fault+0x9a>
		PR_EXC("  Bus fault on vector table read");
    6192:	4839      	ldr	r0, [pc, #228]	; (6278 <z_arm_fault+0x174>)
    6194:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    6196:	f016 fe6a 	bl	1ce6e <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    619a:	2400      	movs	r4, #0
}
    619c:	e01f      	b.n	61de <z_arm_fault+0xda>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    61a0:	005b      	lsls	r3, r3, #1
    61a2:	d51c      	bpl.n	61de <z_arm_fault+0xda>
		PR_EXC("  Fault escalation (see below)");
    61a4:	4835      	ldr	r0, [pc, #212]	; (627c <z_arm_fault+0x178>)
    61a6:	4631      	mov	r1, r6
    61a8:	f016 fe61 	bl	1ce6e <log_0>
		if (SCB_MMFSR != 0) {
    61ac:	4b34      	ldr	r3, [pc, #208]	; (6280 <z_arm_fault+0x17c>)
    61ae:	781b      	ldrb	r3, [r3, #0]
    61b0:	b12b      	cbz	r3, 61be <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    61b2:	f10d 0107 	add.w	r1, sp, #7
    61b6:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    61b8:	f7ff fed0 	bl	5f5c <mem_manage_fault.isra.0>
    61bc:	e00e      	b.n	61dc <z_arm_fault+0xd8>
		} else if (SCB_BFSR != 0) {
    61be:	4b31      	ldr	r3, [pc, #196]	; (6284 <z_arm_fault+0x180>)
    61c0:	781b      	ldrb	r3, [r3, #0]
    61c2:	b12b      	cbz	r3, 61d0 <z_arm_fault+0xcc>
			reason = bus_fault(esf, 1, recoverable);
    61c4:	f10d 0107 	add.w	r1, sp, #7
    61c8:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    61ca:	f7ff ff2d 	bl	6028 <bus_fault.isra.0>
    61ce:	e005      	b.n	61dc <z_arm_fault+0xd8>
		} else if (SCB_UFSR != 0) {
    61d0:	4b2d      	ldr	r3, [pc, #180]	; (6288 <z_arm_fault+0x184>)
    61d2:	881b      	ldrh	r3, [r3, #0]
    61d4:	b29b      	uxth	r3, r3
    61d6:	b113      	cbz	r3, 61de <z_arm_fault+0xda>
			reason = usage_fault(esf);
    61d8:	f7ff fe64 	bl	5ea4 <usage_fault.isra.0>
    61dc:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    61de:	f89d 3007 	ldrb.w	r3, [sp, #7]
    61e2:	b993      	cbnz	r3, 620a <z_arm_fault+0x106>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    61e4:	2220      	movs	r2, #32
    61e6:	4639      	mov	r1, r7
    61e8:	a802      	add	r0, sp, #8
    61ea:	f018 fe02 	bl	1edf2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    61ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    61f0:	b39d      	cbz	r5, 625a <z_arm_fault+0x156>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    61f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    61f6:	b922      	cbnz	r2, 6202 <z_arm_fault+0xfe>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    61f8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    61fc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    6200:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    6202:	a902      	add	r1, sp, #8
    6204:	4620      	mov	r0, r4
    6206:	f7ff fdad 	bl	5d64 <z_arm_fatal_error>
}
    620a:	b00a      	add	sp, #40	; 0x28
    620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    6210:	f10d 0107 	add.w	r1, sp, #7
    6214:	2000      	movs	r0, #0
    6216:	e7cf      	b.n	61b8 <z_arm_fault+0xb4>
		reason = bus_fault(esf, 0, recoverable);
    6218:	f10d 0107 	add.w	r1, sp, #7
    621c:	2000      	movs	r0, #0
    621e:	e7d4      	b.n	61ca <z_arm_fault+0xc6>
    6220:	4911      	ldr	r1, [pc, #68]	; (6268 <z_arm_fault+0x164>)
    6222:	4b12      	ldr	r3, [pc, #72]	; (626c <z_arm_fault+0x168>)
	PR_FAULT_INFO(
    6224:	4819      	ldr	r0, [pc, #100]	; (628c <z_arm_fault+0x188>)
    6226:	1ac9      	subs	r1, r1, r3
    6228:	08c9      	lsrs	r1, r1, #3
    622a:	0189      	lsls	r1, r1, #6
    622c:	f041 0101 	orr.w	r1, r1, #1
    6230:	e7b1      	b.n	6196 <z_arm_fault+0x92>
    6232:	4a0e      	ldr	r2, [pc, #56]	; (626c <z_arm_fault+0x168>)
    6234:	4b0c      	ldr	r3, [pc, #48]	; (6268 <z_arm_fault+0x164>)
	PR_FAULT_INFO("***** %s %d) *****",
    6236:	4816      	ldr	r0, [pc, #88]	; (6290 <z_arm_fault+0x18c>)
    6238:	4916      	ldr	r1, [pc, #88]	; (6294 <z_arm_fault+0x190>)
    623a:	1a9b      	subs	r3, r3, r2
    623c:	08db      	lsrs	r3, r3, #3
    623e:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    6242:	ea4f 1383 	mov.w	r3, r3, lsl #6
    6246:	bf18      	it	ne
    6248:	4601      	movne	r1, r0
    624a:	f043 0301 	orr.w	r3, r3, #1
    624e:	4812      	ldr	r0, [pc, #72]	; (6298 <z_arm_fault+0x194>)
    6250:	f1a4 0210 	sub.w	r2, r4, #16
    6254:	f016 fe2c 	bl	1ceb0 <log_2>
    6258:	e79f      	b.n	619a <z_arm_fault+0x96>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    625a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    625e:	f023 0301 	bic.w	r3, r3, #1
    6262:	e7cd      	b.n	6200 <z_arm_fault+0xfc>
    6264:	e000ed00 	.word	0xe000ed00
    6268:	00021bd4 	.word	0x00021bd4
    626c:	00021aac 	.word	0x00021aac
    6270:	00023d2c 	.word	0x00023d2c
    6274:	00023d57 	.word	0x00023d57
    6278:	00023d6e 	.word	0x00023d6e
    627c:	00023d8f 	.word	0x00023d8f
    6280:	e000ed28 	.word	0xe000ed28
    6284:	e000ed29 	.word	0xe000ed29
    6288:	e000ed2a 	.word	0xe000ed2a
    628c:	00023dae 	.word	0x00023dae
    6290:	00023df9 	.word	0x00023df9
    6294:	00023de4 	.word	0x00023de4
    6298:	00023e12 	.word	0x00023e12

0000629c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    629c:	4a02      	ldr	r2, [pc, #8]	; (62a8 <z_arm_fault_init+0xc>)
    629e:	6953      	ldr	r3, [r2, #20]
    62a0:	f043 0310 	orr.w	r3, r3, #16
    62a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    62a6:	4770      	bx	lr
    62a8:	e000ed00 	.word	0xe000ed00

000062ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    62ac:	4b04      	ldr	r3, [pc, #16]	; (62c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    62ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    62b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    62b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    62b4:	d003      	beq.n	62be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    62b6:	4903      	ldr	r1, [pc, #12]	; (62c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    62b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    62bc:	600a      	str	r2, [r1, #0]

000062be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    62be:	4770      	bx	lr
	ldr r3, =_kernel
    62c0:	20002a80 	.word	0x20002a80
	ldr r1, =_SCS_ICSR
    62c4:	e000ed04 	.word	0xe000ed04

000062c8 <z_arm_interrupt_init>:
    62c8:	4804      	ldr	r0, [pc, #16]	; (62dc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    62ca:	2300      	movs	r3, #0
    62cc:	2120      	movs	r1, #32
    62ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    62d0:	3301      	adds	r3, #1
    62d2:	2b27      	cmp	r3, #39	; 0x27
    62d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    62d8:	d1f9      	bne.n	62ce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    62da:	4770      	bx	lr
    62dc:	e000e100 	.word	0xe000e100

000062e0 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    62e0:	b538      	push	{r3, r4, r5, lr}
    62e2:	4604      	mov	r4, r0
	__asm__ volatile(
    62e4:	f04f 0320 	mov.w	r3, #32
    62e8:	f3ef 8511 	mrs	r5, BASEPRI
    62ec:	f383 8811 	msr	BASEPRI, r3
    62f0:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    62f4:	f015 fb84 	bl	1ba00 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    62f8:	4b0a      	ldr	r3, [pc, #40]	; (6324 <z_impl_k_thread_abort+0x44>)
    62fa:	689b      	ldr	r3, [r3, #8]
    62fc:	42a3      	cmp	r3, r4
    62fe:	d10b      	bne.n	6318 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    6300:	4b09      	ldr	r3, [pc, #36]	; (6328 <z_impl_k_thread_abort+0x48>)
    6302:	685a      	ldr	r2, [r3, #4]
    6304:	f3c2 0208 	ubfx	r2, r2, #0, #9
    6308:	b912      	cbnz	r2, 6310 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    630a:	4628      	mov	r0, r5
    630c:	f7ff fc3c 	bl	5b88 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6310:	685a      	ldr	r2, [r3, #4]
    6312:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    6316:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    6318:	4628      	mov	r0, r5
}
    631a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    631e:	f01a bf18 	b.w	21152 <z_reschedule_irqlock>
    6322:	bf00      	nop
    6324:	20002a80 	.word	0x20002a80
    6328:	e000ed00 	.word	0xe000ed00

0000632c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    632c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    632e:	4b08      	ldr	r3, [pc, #32]	; (6350 <z_arm_configure_static_mpu_regions+0x24>)
    6330:	9301      	str	r3, [sp, #4]
    6332:	4b08      	ldr	r3, [pc, #32]	; (6354 <z_arm_configure_static_mpu_regions+0x28>)
    6334:	9302      	str	r3, [sp, #8]
    6336:	4b08      	ldr	r3, [pc, #32]	; (6358 <z_arm_configure_static_mpu_regions+0x2c>)
    6338:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    633a:	ab01      	add	r3, sp, #4
    633c:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    633e:	4a07      	ldr	r2, [pc, #28]	; (635c <z_arm_configure_static_mpu_regions+0x30>)
    6340:	4b07      	ldr	r3, [pc, #28]	; (6360 <z_arm_configure_static_mpu_regions+0x34>)
    6342:	2101      	movs	r1, #1
    6344:	4668      	mov	r0, sp
    6346:	f000 f8af 	bl	64a8 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    634a:	b005      	add	sp, #20
    634c:	f85d fb04 	ldr.w	pc, [sp], #4
    6350:	20000000 	.word	0x20000000
    6354:	00000000 	.word	0x00000000
    6358:	060b0000 	.word	0x060b0000
    635c:	20000000 	.word	0x20000000
    6360:	20010000 	.word	0x20010000

00006364 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    6364:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 6424 <mpu_configure_regions+0xc0>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    6368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    636a:	4606      	mov	r6, r0
    636c:	460f      	mov	r7, r1
	int i;
	int reg_index = start_reg_index;
    636e:	4610      	mov	r0, r2

	for (i = 0; i < regions_num; i++) {
    6370:	2100      	movs	r1, #0
    6372:	42b9      	cmp	r1, r7
    6374:	da1b      	bge.n	63ae <mpu_configure_regions+0x4a>
		if (regions[i]->size == 0U) {
    6376:	f856 e021 	ldr.w	lr, [r6, r1, lsl #2]
    637a:	f8de 4004 	ldr.w	r4, [lr, #4]
    637e:	2c00      	cmp	r4, #0
    6380:	d046      	beq.n	6410 <mpu_configure_regions+0xac>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    6382:	b1ab      	cbz	r3, 63b0 <mpu_configure_regions+0x4c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    6384:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    6386:	422c      	tst	r4, r5
    6388:	d105      	bne.n	6396 <mpu_configure_regions+0x32>
		&&
    638a:	2c1f      	cmp	r4, #31
    638c:	d903      	bls.n	6396 <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    638e:	f8de 2000 	ldr.w	r2, [lr]
		&&
    6392:	4215      	tst	r5, r2
    6394:	d00c      	beq.n	63b0 <mpu_configure_regions+0x4c>
    6396:	4a1f      	ldr	r2, [pc, #124]	; (6414 <mpu_configure_regions+0xb0>)
    6398:	4b1f      	ldr	r3, [pc, #124]	; (6418 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    639a:	4820      	ldr	r0, [pc, #128]	; (641c <mpu_configure_regions+0xb8>)
    639c:	1ad2      	subs	r2, r2, r3
    639e:	08d2      	lsrs	r2, r2, #3
    63a0:	0192      	lsls	r2, r2, #6
    63a2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    63a6:	f016 fd6f 	bl	1ce88 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    63aa:	f06f 0015 	mvn.w	r0, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    63ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    63b0:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    63b2:	b2c5      	uxtb	r5, r0
	region_conf.base = new_region->start;
    63b4:	f8de 2000 	ldr.w	r2, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    63b8:	f8de 0008 	ldr.w	r0, [lr, #8]
    63bc:	d916      	bls.n	63ec <mpu_configure_regions+0x88>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    63be:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    63c2:	d815      	bhi.n	63f0 <mpu_configure_regions+0x8c>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    63c4:	3c01      	subs	r4, #1
    63c6:	fab4 f484 	clz	r4, r4
    63ca:	f1c4 041f 	rsb	r4, r4, #31
    63ce:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    63d0:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    63d2:	ea44 0400 	orr.w	r4, r4, r0
    63d6:	d90d      	bls.n	63f4 <mpu_configure_regions+0x90>
    63d8:	4a0e      	ldr	r2, [pc, #56]	; (6414 <mpu_configure_regions+0xb0>)
    63da:	4b0f      	ldr	r3, [pc, #60]	; (6418 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    63dc:	4810      	ldr	r0, [pc, #64]	; (6420 <mpu_configure_regions+0xbc>)
    63de:	1ad2      	subs	r2, r2, r3
    63e0:	08d2      	lsrs	r2, r2, #3
    63e2:	0192      	lsls	r2, r2, #6
    63e4:	f042 0201 	orr.w	r2, r2, #1
    63e8:	4629      	mov	r1, r5
    63ea:	e7dc      	b.n	63a6 <mpu_configure_regions+0x42>
		return REGION_32B;
    63ec:	2408      	movs	r4, #8
    63ee:	e7ef      	b.n	63d0 <mpu_configure_regions+0x6c>
		return REGION_4G;
    63f0:	243e      	movs	r4, #62	; 0x3e
    63f2:	e7ed      	b.n	63d0 <mpu_configure_regions+0x6c>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    63f4:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    63f8:	432a      	orrs	r2, r5
    63fa:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    63fe:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    6402:	f8cc 5008 	str.w	r5, [ip, #8]
		reg_index++;
    6406:	1c68      	adds	r0, r5, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6408:	f8cc 200c 	str.w	r2, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    640c:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    6410:	3101      	adds	r1, #1
    6412:	e7ae      	b.n	6372 <mpu_configure_regions+0xe>
    6414:	00021bc4 	.word	0x00021bc4
    6418:	00021aac 	.word	0x00021aac
    641c:	00023e29 	.word	0x00023e29
    6420:	00023e4c 	.word	0x00023e4c
    6424:	e000ed90 	.word	0xe000ed90

00006428 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    6428:	4b03      	ldr	r3, [pc, #12]	; (6438 <arm_core_mpu_enable+0x10>)
    642a:	2205      	movs	r2, #5
    642c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    642e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6432:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    6436:	4770      	bx	lr
    6438:	e000ed90 	.word	0xe000ed90

0000643c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    643c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    6440:	4b01      	ldr	r3, [pc, #4]	; (6448 <arm_core_mpu_disable+0xc>)
    6442:	2200      	movs	r2, #0
    6444:	605a      	str	r2, [r3, #4]
}
    6446:	4770      	bx	lr
    6448:	e000ed90 	.word	0xe000ed90

0000644c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    644c:	4913      	ldr	r1, [pc, #76]	; (649c <arm_mpu_init+0x50>)
    644e:	6808      	ldr	r0, [r1, #0]
    6450:	2808      	cmp	r0, #8
{
    6452:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    6454:	d81e      	bhi.n	6494 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    6456:	f7ff fff1 	bl	643c <arm_core_mpu_disable>
	MPU->RNR = index;
    645a:	4c11      	ldr	r4, [pc, #68]	; (64a0 <arm_mpu_init+0x54>)
    645c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    645e:	2200      	movs	r2, #0
    6460:	4290      	cmp	r0, r2
    6462:	f101 010c 	add.w	r1, r1, #12
    6466:	d105      	bne.n	6474 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    6468:	4b0e      	ldr	r3, [pc, #56]	; (64a4 <arm_mpu_init+0x58>)
    646a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    646c:	f7ff ffdc 	bl	6428 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    6470:	2000      	movs	r0, #0
}
    6472:	bd10      	pop	{r4, pc}
    6474:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6476:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    647a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    647e:	4313      	orrs	r3, r2
    6480:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6484:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    6486:	f851 3c04 	ldr.w	r3, [r1, #-4]
    648a:	f043 0301 	orr.w	r3, r3, #1
    648e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    6490:	3201      	adds	r2, #1
    6492:	e7e5      	b.n	6460 <arm_mpu_init+0x14>
		return -1;
    6494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6498:	e7eb      	b.n	6472 <arm_mpu_init+0x26>
    649a:	bf00      	nop
    649c:	00022184 	.word	0x00022184
    64a0:	e000ed90 	.word	0xe000ed90
    64a4:	20002f19 	.word	0x20002f19

000064a8 <arm_core_mpu_configure_static_mpu_regions>:
{
    64a8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    64aa:	4c03      	ldr	r4, [pc, #12]	; (64b8 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    64ac:	2301      	movs	r3, #1
    64ae:	7822      	ldrb	r2, [r4, #0]
    64b0:	f7ff ff58 	bl	6364 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    64b4:	7020      	strb	r0, [r4, #0]
}
    64b6:	bd10      	pop	{r4, pc}
    64b8:	20002f19 	.word	0x20002f19

000064bc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    64bc:	4b01      	ldr	r3, [pc, #4]	; (64c4 <__stdout_hook_install+0x8>)
    64be:	6018      	str	r0, [r3, #0]
}
    64c0:	4770      	bx	lr
    64c2:	bf00      	nop
    64c4:	200002c8 	.word	0x200002c8

000064c8 <nordicsemi_nrf52_init>:
    64c8:	f04f 0320 	mov.w	r3, #32
    64cc:	f3ef 8211 	mrs	r2, BASEPRI
    64d0:	f383 8811 	msr	BASEPRI, r3
    64d4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    64d8:	4906      	ldr	r1, [pc, #24]	; (64f4 <nordicsemi_nrf52_init+0x2c>)
    64da:	2301      	movs	r3, #1
    64dc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    64e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    64e4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    64e8:	f382 8811 	msr	BASEPRI, r2
    64ec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    64f0:	2000      	movs	r0, #0
    64f2:	4770      	bx	lr
    64f4:	4001e000 	.word	0x4001e000

000064f8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    64f8:	b120      	cbz	r0, 6504 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    64fa:	4b03      	ldr	r3, [pc, #12]	; (6508 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    64fc:	0180      	lsls	r0, r0, #6
    64fe:	f043 0301 	orr.w	r3, r3, #1
    6502:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    6504:	4770      	bx	lr
    6506:	bf00      	nop
    6508:	00021ce0 	.word	0x00021ce0

0000650c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    650c:	4b0e      	ldr	r3, [pc, #56]	; (6548 <bt_hex_real+0x3c>)
    650e:	2940      	cmp	r1, #64	; 0x40
{
    6510:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    6512:	bf28      	it	cs
    6514:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    6516:	4c0d      	ldr	r4, [pc, #52]	; (654c <bt_hex_real+0x40>)
    6518:	1846      	adds	r6, r0, r1
    651a:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    651c:	42b0      	cmp	r0, r6
    651e:	f103 0302 	add.w	r3, r3, #2
    6522:	d104      	bne.n	652e <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    6524:	2300      	movs	r3, #0
    6526:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    652a:	4807      	ldr	r0, [pc, #28]	; (6548 <bt_hex_real+0x3c>)
    652c:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    652e:	7802      	ldrb	r2, [r0, #0]
    6530:	0912      	lsrs	r2, r2, #4
    6532:	5ca2      	ldrb	r2, [r4, r2]
    6534:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    6538:	f810 2b01 	ldrb.w	r2, [r0], #1
    653c:	f002 020f 	and.w	r2, r2, #15
    6540:	5ca2      	ldrb	r2, [r4, r2]
    6542:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    6546:	e7e9      	b.n	651c <bt_hex_real+0x10>
    6548:	20002f1a 	.word	0x20002f1a
    654c:	00023e85 	.word	0x00023e85

00006550 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    6550:	b530      	push	{r4, r5, lr}
	switch (addr->type) {
    6552:	7803      	ldrb	r3, [r0, #0]
    6554:	b08b      	sub	sp, #44	; 0x2c
    6556:	4604      	mov	r4, r0
    6558:	ad07      	add	r5, sp, #28
    655a:	2b03      	cmp	r3, #3
    655c:	d821      	bhi.n	65a2 <bt_addr_le_str_real+0x52>
    655e:	e8df f003 	tbb	[pc, r3]
    6562:	1a02      	.short	0x1a02
    6564:	1e1c      	.short	0x1e1c
		strcpy(type, "public");
    6566:	4912      	ldr	r1, [pc, #72]	; (65b0 <bt_addr_le_str_real+0x60>)
		strcpy(type, "random");
    6568:	4628      	mov	r0, r5
    656a:	f018 fbf3 	bl	1ed54 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    656e:	7863      	ldrb	r3, [r4, #1]
    6570:	9304      	str	r3, [sp, #16]
    6572:	78a3      	ldrb	r3, [r4, #2]
    6574:	9303      	str	r3, [sp, #12]
    6576:	78e3      	ldrb	r3, [r4, #3]
    6578:	9302      	str	r3, [sp, #8]
    657a:	7923      	ldrb	r3, [r4, #4]
    657c:	9301      	str	r3, [sp, #4]
    657e:	7963      	ldrb	r3, [r4, #5]
    6580:	9300      	str	r3, [sp, #0]
    6582:	4a0c      	ldr	r2, [pc, #48]	; (65b4 <bt_addr_le_str_real+0x64>)
    6584:	79a3      	ldrb	r3, [r4, #6]
    6586:	9505      	str	r5, [sp, #20]
    6588:	211e      	movs	r1, #30
    658a:	480b      	ldr	r0, [pc, #44]	; (65b8 <bt_addr_le_str_real+0x68>)
    658c:	f016 f926 	bl	1c7dc <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    6590:	4809      	ldr	r0, [pc, #36]	; (65b8 <bt_addr_le_str_real+0x68>)
    6592:	b00b      	add	sp, #44	; 0x2c
    6594:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    6596:	4909      	ldr	r1, [pc, #36]	; (65bc <bt_addr_le_str_real+0x6c>)
    6598:	e7e6      	b.n	6568 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    659a:	4909      	ldr	r1, [pc, #36]	; (65c0 <bt_addr_le_str_real+0x70>)
    659c:	e7e4      	b.n	6568 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    659e:	4909      	ldr	r1, [pc, #36]	; (65c4 <bt_addr_le_str_real+0x74>)
    65a0:	e7e2      	b.n	6568 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    65a2:	4a09      	ldr	r2, [pc, #36]	; (65c8 <bt_addr_le_str_real+0x78>)
    65a4:	210a      	movs	r1, #10
    65a6:	4628      	mov	r0, r5
    65a8:	f016 f918 	bl	1c7dc <snprintk>
		break;
    65ac:	e7df      	b.n	656e <bt_addr_le_str_real+0x1e>
    65ae:	bf00      	nop
    65b0:	0002351d 	.word	0x0002351d
    65b4:	0002353f 	.word	0x0002353f
    65b8:	20002f9b 	.word	0x20002f9b
    65bc:	00023524 	.word	0x00023524
    65c0:	0002352b 	.word	0x0002352b
    65c4:	00023535 	.word	0x00023535
    65c8:	0002540d 	.word	0x0002540d

000065cc <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    65cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    65d0:	4b64      	ldr	r3, [pc, #400]	; (6764 <ecc_thread+0x198>)
    65d2:	4d65      	ldr	r5, [pc, #404]	; (6768 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    65d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 6788 <ecc_thread+0x1bc>
	return z_impl_k_sem_take(sem, timeout);
    65d8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 678c <ecc_thread+0x1c0>
    65dc:	1aed      	subs	r5, r5, r3
    65de:	08ed      	lsrs	r5, r5, #3
    65e0:	4647      	mov	r7, r8
    65e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    65e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    65ea:	4648      	mov	r0, r9
    65ec:	f015 fbd0 	bl	1bd90 <z_impl_k_sem_take>
    65f0:	f3bf 8f5b 	dmb	ish
    65f4:	f8d8 4000 	ldr.w	r4, [r8]
    65f8:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    65fc:	f014 0401 	ands.w	r4, r4, #1
    6600:	d05a      	beq.n	66b8 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    6602:	f8df a17c 	ldr.w	sl, [pc, #380]	; 6780 <ecc_thread+0x1b4>
    6606:	4c59      	ldr	r4, [pc, #356]	; (676c <ecc_thread+0x1a0>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6608:	4e59      	ldr	r6, [pc, #356]	; (6770 <ecc_thread+0x1a4>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    660a:	485a      	ldr	r0, [pc, #360]	; (6774 <ecc_thread+0x1a8>)
    660c:	4652      	mov	r2, sl
    660e:	4621      	mov	r1, r4
    6610:	f017 fa6c 	bl	1daec <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    6614:	bbe8      	cbnz	r0, 6692 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    6616:	01a9      	lsls	r1, r5, #6
    6618:	4857      	ldr	r0, [pc, #348]	; (6778 <ecc_thread+0x1ac>)
    661a:	f041 0101 	orr.w	r1, r1, #1
    661e:	f016 fc26 	bl	1ce6e <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    6622:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    6626:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    662a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    662e:	2001      	movs	r0, #1
    6630:	f002 fe5a 	bl	92e8 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    6634:	f100 0608 	add.w	r6, r0, #8
    6638:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    663a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    663c:	4630      	mov	r0, r6
    663e:	f01a fa93 	bl	20b68 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    6642:	233e      	movs	r3, #62	; 0x3e
    6644:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6646:	2342      	movs	r3, #66	; 0x42
    6648:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    664a:	2101      	movs	r1, #1
    664c:	4630      	mov	r0, r6
    664e:	f01a fa8b 	bl	20b68 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    6652:	2308      	movs	r3, #8
    6654:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6656:	2141      	movs	r1, #65	; 0x41
    6658:	4630      	mov	r0, r6
    665a:	f01a fa85 	bl	20b68 <net_buf_simple_add>
    665e:	4606      	mov	r6, r0
	evt->status = status;
    6660:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    6664:	f1ba 0f00 	cmp.w	sl, #0
    6668:	d01d      	beq.n	66a6 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    666a:	2240      	movs	r2, #64	; 0x40
    666c:	2100      	movs	r1, #0
    666e:	f018 fbeb 	bl	1ee48 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6672:	f3bf 8f5b 	dmb	ish
    6676:	e857 3f00 	ldrex	r3, [r7]
    667a:	f023 0301 	bic.w	r3, r3, #1
    667e:	e847 3200 	strex	r2, r3, [r7]
    6682:	2a00      	cmp	r2, #0
    6684:	d1f7      	bne.n	6676 <ecc_thread+0xaa>
    6686:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    668a:	4620      	mov	r0, r4
	bt_recv(buf);
    668c:	f001 ffc8 	bl	8620 <bt_recv>
	while (true) {
    6690:	e7a7      	b.n	65e2 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    6692:	2220      	movs	r2, #32
    6694:	4631      	mov	r1, r6
    6696:	4620      	mov	r0, r4
    6698:	f018 fb9b 	bl	1edd2 <memcmp>
    669c:	2800      	cmp	r0, #0
    669e:	d0b4      	beq.n	660a <ecc_thread+0x3e>
	return 0;
    66a0:	f04f 0a00 	mov.w	sl, #0
    66a4:	e7bf      	b.n	6626 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    66a6:	4933      	ldr	r1, [pc, #204]	; (6774 <ecc_thread+0x1a8>)
    66a8:	f018 fc61 	bl	1ef6e <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    66ac:	4933      	ldr	r1, [pc, #204]	; (677c <ecc_thread+0x1b0>)
    66ae:	f106 0021 	add.w	r0, r6, #33	; 0x21
    66b2:	f018 fc5c 	bl	1ef6e <sys_memcpy_swap.constprop.0>
    66b6:	e7dc      	b.n	6672 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    66b8:	f3bf 8f5b 	dmb	ish
    66bc:	f8d8 3000 	ldr.w	r3, [r8]
    66c0:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    66c4:	079b      	lsls	r3, r3, #30
    66c6:	d58c      	bpl.n	65e2 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    66c8:	492d      	ldr	r1, [pc, #180]	; (6780 <ecc_thread+0x1b4>)
    66ca:	482a      	ldr	r0, [pc, #168]	; (6774 <ecc_thread+0x1a8>)
    66cc:	f018 f8dd 	bl	1e88a <uECC_valid_public_key>
	if (ret < 0) {
    66d0:	1e01      	subs	r1, r0, #0
    66d2:	da38      	bge.n	6746 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    66d4:	01aa      	lsls	r2, r5, #6
    66d6:	482b      	ldr	r0, [pc, #172]	; (6784 <ecc_thread+0x1b8>)
    66d8:	f042 0201 	orr.w	r2, r2, #1
    66dc:	f016 fbd4 	bl	1ce88 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    66e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    66e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    66e8:	2001      	movs	r0, #1
    66ea:	f002 fdfd 	bl	92e8 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    66ee:	f100 0a08 	add.w	sl, r0, #8
    66f2:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    66f4:	4606      	mov	r6, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    66f6:	4650      	mov	r0, sl
    66f8:	f01a fa36 	bl	20b68 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    66fc:	233e      	movs	r3, #62	; 0x3e
    66fe:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    6700:	2322      	movs	r3, #34	; 0x22
    6702:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    6704:	2101      	movs	r1, #1
    6706:	4650      	mov	r0, sl
    6708:	f01a fa2e 	bl	20b68 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    670c:	2309      	movs	r3, #9
    670e:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    6710:	2121      	movs	r1, #33	; 0x21
    6712:	4650      	mov	r0, sl
    6714:	f01a fa28 	bl	20b68 <net_buf_simple_add>
    6718:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    671a:	3001      	adds	r0, #1
    671c:	b9e4      	cbnz	r4, 6758 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    671e:	221f      	movs	r2, #31
    6720:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    6722:	21ff      	movs	r1, #255	; 0xff
    6724:	2220      	movs	r2, #32
    6726:	f018 fb8f 	bl	1ee48 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    672a:	f3bf 8f5b 	dmb	ish
    672e:	e857 3f00 	ldrex	r3, [r7]
    6732:	f023 0302 	bic.w	r3, r3, #2
    6736:	e847 3200 	strex	r2, r3, [r7]
    673a:	2a00      	cmp	r2, #0
    673c:	d1f7      	bne.n	672e <ecc_thread+0x162>
    673e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    6742:	4630      	mov	r0, r6
    6744:	e7a2      	b.n	668c <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    6746:	4a0b      	ldr	r2, [pc, #44]	; (6774 <ecc_thread+0x1a8>)
    6748:	4b0d      	ldr	r3, [pc, #52]	; (6780 <ecc_thread+0x1b4>)
    674a:	f1a2 0120 	sub.w	r1, r2, #32
    674e:	4610      	mov	r0, r2
    6750:	f017 fa1b 	bl	1db8a <uECC_shared_secret>
    6754:	4604      	mov	r4, r0
    6756:	e7c3      	b.n	66e0 <ecc_thread+0x114>
		evt->status = 0U;
    6758:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    675a:	4906      	ldr	r1, [pc, #24]	; (6774 <ecc_thread+0x1a8>)
		evt->status = 0U;
    675c:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    675e:	f018 fc06 	bl	1ef6e <sys_memcpy_swap.constprop.0>
    6762:	e7e2      	b.n	672a <ecc_thread+0x15e>
    6764:	00021aac 	.word	0x00021aac
    6768:	00021b74 	.word	0x00021b74
    676c:	20002fb9 	.word	0x20002fb9
    6770:	00022254 	.word	0x00022254
    6774:	20002fd9 	.word	0x20002fd9
    6778:	00023e9d 	.word	0x00023e9d
    677c:	20002ff9 	.word	0x20002ff9
    6780:	000221a4 	.word	0x000221a4
    6784:	00023ec6 	.word	0x00023ec6
    6788:	2000154c 	.word	0x2000154c
    678c:	20000940 	.word	0x20000940

00006790 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    6790:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    6792:	7d05      	ldrb	r5, [r0, #20]
    6794:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    6796:	b9ad      	cbnz	r5, 67c4 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    6798:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    679a:	881a      	ldrh	r2, [r3, #0]
    679c:	f242 0125 	movw	r1, #8229	; 0x2025
    67a0:	428a      	cmp	r2, r1
    67a2:	d017      	beq.n	67d4 <bt_hci_ecc_send+0x44>
    67a4:	f242 0126 	movw	r1, #8230	; 0x2026
    67a8:	428a      	cmp	r2, r1
    67aa:	d03c      	beq.n	6826 <bt_hci_ecc_send+0x96>
    67ac:	f242 0101 	movw	r1, #8193	; 0x2001
    67b0:	428a      	cmp	r2, r1
    67b2:	d107      	bne.n	67c4 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    67b4:	78da      	ldrb	r2, [r3, #3]
    67b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    67ba:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    67bc:	791a      	ldrb	r2, [r3, #4]
    67be:	f022 0201 	bic.w	r2, r2, #1
    67c2:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    67c4:	4b31      	ldr	r3, [pc, #196]	; (688c <bt_hci_ecc_send+0xfc>)
    67c6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    67ca:	4620      	mov	r0, r4
    67cc:	691b      	ldr	r3, [r3, #16]
}
    67ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    67d2:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    67d4:	2103      	movs	r1, #3
    67d6:	3008      	adds	r0, #8
    67d8:	f01a f9e5 	bl	20ba6 <net_buf_simple_pull>
	net_buf_unref(buf);
    67dc:	4620      	mov	r0, r4
    67de:	f013 fc87 	bl	1a0f0 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    67e2:	f3bf 8f5b 	dmb	ish
    67e6:	4b2a      	ldr	r3, [pc, #168]	; (6890 <bt_hci_ecc_send+0x100>)
    67e8:	681a      	ldr	r2, [r3, #0]
    67ea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    67ee:	0790      	lsls	r0, r2, #30
    67f0:	d507      	bpl.n	6802 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    67f2:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    67f4:	4629      	mov	r1, r5
    67f6:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    67fa:	f018 fb94 	bl	1ef26 <send_cmd_status>
}
    67fe:	2000      	movs	r0, #0
    6800:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6802:	f3bf 8f5b 	dmb	ish
    6806:	e853 2f00 	ldrex	r2, [r3]
    680a:	f042 0101 	orr.w	r1, r2, #1
    680e:	e843 1000 	strex	r0, r1, [r3]
    6812:	2800      	cmp	r0, #0
    6814:	d1f7      	bne.n	6806 <bt_hci_ecc_send+0x76>
    6816:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    681a:	07d1      	lsls	r1, r2, #31
    681c:	d4e9      	bmi.n	67f2 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    681e:	481d      	ldr	r0, [pc, #116]	; (6894 <bt_hci_ecc_send+0x104>)
    6820:	f015 fa90 	bl	1bd44 <z_impl_k_sem_give>
}
    6824:	e7e6      	b.n	67f4 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    6826:	2103      	movs	r1, #3
    6828:	3008      	adds	r0, #8
    682a:	f01a f9bc 	bl	20ba6 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    682e:	f3bf 8f5b 	dmb	ish
    6832:	4b17      	ldr	r3, [pc, #92]	; (6890 <bt_hci_ecc_send+0x100>)
    6834:	681a      	ldr	r2, [r3, #0]
    6836:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    683a:	07d2      	lsls	r2, r2, #31
    683c:	d507      	bpl.n	684e <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    683e:	250c      	movs	r5, #12
	net_buf_unref(buf);
    6840:	4620      	mov	r0, r4
    6842:	f013 fc55 	bl	1a0f0 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    6846:	4629      	mov	r1, r5
    6848:	f242 0026 	movw	r0, #8230	; 0x2026
    684c:	e7d5      	b.n	67fa <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    684e:	89a2      	ldrh	r2, [r4, #12]
    6850:	2a3f      	cmp	r2, #63	; 0x3f
    6852:	d919      	bls.n	6888 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6854:	f3bf 8f5b 	dmb	ish
    6858:	e853 2f00 	ldrex	r2, [r3]
    685c:	f042 0102 	orr.w	r1, r2, #2
    6860:	e843 1000 	strex	r0, r1, [r3]
    6864:	2800      	cmp	r0, #0
    6866:	d1f7      	bne.n	6858 <bt_hci_ecc_send+0xc8>
    6868:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    686c:	0793      	lsls	r3, r2, #30
    686e:	d4e6      	bmi.n	683e <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    6870:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    6872:	4809      	ldr	r0, [pc, #36]	; (6898 <bt_hci_ecc_send+0x108>)
    6874:	f018 fb7b 	bl	1ef6e <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    6878:	4808      	ldr	r0, [pc, #32]	; (689c <bt_hci_ecc_send+0x10c>)
    687a:	3120      	adds	r1, #32
    687c:	f018 fb77 	bl	1ef6e <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    6880:	4804      	ldr	r0, [pc, #16]	; (6894 <bt_hci_ecc_send+0x104>)
    6882:	f015 fa5f 	bl	1bd44 <z_impl_k_sem_give>
}
    6886:	e7db      	b.n	6840 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    6888:	2512      	movs	r5, #18
    688a:	e7d9      	b.n	6840 <bt_hci_ecc_send+0xb0>
    688c:	20000000 	.word	0x20000000
    6890:	2000154c 	.word	0x2000154c
    6894:	20000940 	.word	0x20000940
    6898:	20002fd9 	.word	0x20002fd9
    689c:	20002ff9 	.word	0x20002ff9

000068a0 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    68a0:	b510      	push	{r4, lr}
    68a2:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    68a4:	4c0c      	ldr	r4, [pc, #48]	; (68d8 <bt_hci_ecc_init+0x38>)
    68a6:	490d      	ldr	r1, [pc, #52]	; (68dc <bt_hci_ecc_init+0x3c>)
    68a8:	2200      	movs	r2, #0
    68aa:	2300      	movs	r3, #0
    68ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
    68b0:	2300      	movs	r3, #0
    68b2:	220a      	movs	r2, #10
    68b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    68b8:	e9cd 3301 	strd	r3, r3, [sp, #4]
    68bc:	9300      	str	r3, [sp, #0]
    68be:	f44f 628a 	mov.w	r2, #1104	; 0x450
    68c2:	4b07      	ldr	r3, [pc, #28]	; (68e0 <bt_hci_ecc_init+0x40>)
    68c4:	4620      	mov	r0, r4
    68c6:	f015 fad5 	bl	1be74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    68ca:	4906      	ldr	r1, [pc, #24]	; (68e4 <bt_hci_ecc_init+0x44>)
    68cc:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_THREAD_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    68ce:	b008      	add	sp, #32
    68d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    68d4:	f01a bd45 	b.w	21362 <z_impl_k_thread_name_set>
    68d8:	20000ba0 	.word	0x20000ba0
    68dc:	20003570 	.word	0x20003570
    68e0:	000065cd 	.word	0x000065cd
    68e4:	00023ee7 	.word	0x00023ee7

000068e8 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    68e8:	b538      	push	{r3, r4, r5, lr}
    68ea:	4b14      	ldr	r3, [pc, #80]	; (693c <save_id+0x54>)
    68ec:	4c14      	ldr	r4, [pc, #80]	; (6940 <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    68ee:	4d15      	ldr	r5, [pc, #84]	; (6944 <save_id+0x5c>)
	BT_INFO("Saving ID");
    68f0:	4815      	ldr	r0, [pc, #84]	; (6948 <save_id+0x60>)
    68f2:	1ae4      	subs	r4, r4, r3
    68f4:	08e4      	lsrs	r4, r4, #3
    68f6:	01a4      	lsls	r4, r4, #6
    68f8:	f044 0103 	orr.w	r1, r4, #3
    68fc:	f016 fab7 	bl	1ce6e <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    6900:	79ea      	ldrb	r2, [r5, #7]
    6902:	4812      	ldr	r0, [pc, #72]	; (694c <save_id+0x64>)
    6904:	4629      	mov	r1, r5
    6906:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    690a:	f7fe fa19 	bl	4d40 <settings_save_one>
	if (err) {
    690e:	4601      	mov	r1, r0
    6910:	b120      	cbz	r0, 691c <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    6912:	480f      	ldr	r0, [pc, #60]	; (6950 <save_id+0x68>)
    6914:	f044 0201 	orr.w	r2, r4, #1
    6918:	f016 fab6 	bl	1ce88 <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    691c:	79ea      	ldrb	r2, [r5, #7]
    691e:	490d      	ldr	r1, [pc, #52]	; (6954 <save_id+0x6c>)
    6920:	480d      	ldr	r0, [pc, #52]	; (6958 <save_id+0x70>)
    6922:	0112      	lsls	r2, r2, #4
    6924:	f7fe fa0c 	bl	4d40 <settings_save_one>
	if (err) {
    6928:	4601      	mov	r1, r0
    692a:	b130      	cbz	r0, 693a <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    692c:	f044 0201 	orr.w	r2, r4, #1
    6930:	480a      	ldr	r0, [pc, #40]	; (695c <save_id+0x74>)
	}
#endif
}
    6932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    6936:	f016 baa7 	b.w	1ce88 <log_1>
}
    693a:	bd38      	pop	{r3, r4, r5, pc}
    693c:	00021aac 	.word	0x00021aac
    6940:	00021b94 	.word	0x00021b94
    6944:	20000000 	.word	0x20000000
    6948:	00023ef9 	.word	0x00023ef9
    694c:	00023f03 	.word	0x00023f03
    6950:	00023f09 	.word	0x00023f09
    6954:	20000108 	.word	0x20000108
    6958:	00023f24 	.word	0x00023f24
    695c:	00023f2b 	.word	0x00023f2b

00006960 <set>:
{
    6960:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6964:	4605      	mov	r5, r0
    6966:	4616      	mov	r6, r2
    6968:	461f      	mov	r7, r3
	if (!name) {
    696a:	b960      	cbnz	r0, 6986 <set+0x26>
    696c:	4942      	ldr	r1, [pc, #264]	; (6a78 <set+0x118>)
    696e:	4b43      	ldr	r3, [pc, #268]	; (6a7c <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
    6970:	4843      	ldr	r0, [pc, #268]	; (6a80 <set+0x120>)
    6972:	1ac9      	subs	r1, r1, r3
    6974:	08c9      	lsrs	r1, r1, #3
    6976:	0189      	lsls	r1, r1, #6
    6978:	f041 0101 	orr.w	r1, r1, #1
    697c:	f016 fa77 	bl	1ce6e <log_0>
	return -ENOENT;
    6980:	f06f 0401 	mvn.w	r4, #1
    6984:	e01c      	b.n	69c0 <set+0x60>
	len = settings_name_next(name, &next);
    6986:	a901      	add	r1, sp, #4
    6988:	f016 ff31 	bl	1d7ee <settings_name_next>
	if (!strncmp(name, "id", len)) {
    698c:	493d      	ldr	r1, [pc, #244]	; (6a84 <set+0x124>)
    698e:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    6990:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    6992:	4628      	mov	r0, r5
    6994:	f018 fa0e 	bl	1edb4 <strncmp>
    6998:	4604      	mov	r4, r0
    699a:	bb90      	cbnz	r0, 6a02 <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    699c:	f3bf 8f5b 	dmb	ish
    69a0:	4d39      	ldr	r5, [pc, #228]	; (6a88 <set+0x128>)
    69a2:	682b      	ldr	r3, [r5, #0]
    69a4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    69a8:	075b      	lsls	r3, r3, #29
    69aa:	d50d      	bpl.n	69c8 <set+0x68>
    69ac:	4932      	ldr	r1, [pc, #200]	; (6a78 <set+0x118>)
    69ae:	4b33      	ldr	r3, [pc, #204]	; (6a7c <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
    69b0:	4836      	ldr	r0, [pc, #216]	; (6a8c <set+0x12c>)
    69b2:	1ac9      	subs	r1, r1, r3
    69b4:	08c9      	lsrs	r1, r1, #3
    69b6:	0189      	lsls	r1, r1, #6
    69b8:	f041 0102 	orr.w	r1, r1, #2
    69bc:	f016 fa57 	bl	1ce6e <log_0>
}
    69c0:	4620      	mov	r0, r4
    69c2:	b002      	add	sp, #8
    69c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    69c8:	3d98      	subs	r5, #152	; 0x98
    69ca:	2207      	movs	r2, #7
    69cc:	4629      	mov	r1, r5
    69ce:	4638      	mov	r0, r7
    69d0:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    69d2:	2806      	cmp	r0, #6
    69d4:	d810      	bhi.n	69f8 <set+0x98>
    69d6:	4b29      	ldr	r3, [pc, #164]	; (6a7c <set+0x11c>)
    69d8:	4927      	ldr	r1, [pc, #156]	; (6a78 <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
    69da:	482d      	ldr	r0, [pc, #180]	; (6a90 <set+0x130>)
    69dc:	1ac9      	subs	r1, r1, r3
    69de:	08c9      	lsrs	r1, r1, #3
    69e0:	0189      	lsls	r1, r1, #6
    69e2:	f041 0101 	orr.w	r1, r1, #1
    69e6:	f016 fa42 	bl	1ce6e <log_0>
			(void)memset(bt_dev.id_addr, 0,
    69ea:	2207      	movs	r2, #7
    69ec:	4621      	mov	r1, r4
    69ee:	4628      	mov	r0, r5
    69f0:	f018 fa2a 	bl	1ee48 <memset>
			bt_dev.id_count = 0U;
    69f4:	71ec      	strb	r4, [r5, #7]
    69f6:	e7e3      	b.n	69c0 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    69f8:	2307      	movs	r3, #7
    69fa:	fbb0 f0f3 	udiv	r0, r0, r3
    69fe:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    6a00:	e7de      	b.n	69c0 <set+0x60>
	if (!strncmp(name, "name", len)) {
    6a02:	4924      	ldr	r1, [pc, #144]	; (6a94 <set+0x134>)
    6a04:	4642      	mov	r2, r8
    6a06:	4628      	mov	r0, r5
    6a08:	f018 f9d4 	bl	1edb4 <strncmp>
    6a0c:	4604      	mov	r4, r0
    6a0e:	b9a8      	cbnz	r0, 6a3c <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    6a10:	4921      	ldr	r1, [pc, #132]	; (6a98 <set+0x138>)
    6a12:	2241      	movs	r2, #65	; 0x41
    6a14:	4638      	mov	r0, r7
    6a16:	47b0      	blx	r6
		if (len < 0) {
    6a18:	1e01      	subs	r1, r0, #0
    6a1a:	da0a      	bge.n	6a32 <set+0xd2>
    6a1c:	4b17      	ldr	r3, [pc, #92]	; (6a7c <set+0x11c>)
    6a1e:	4a16      	ldr	r2, [pc, #88]	; (6a78 <set+0x118>)
			BT_ERR("Failed to read device name from storage"
    6a20:	481e      	ldr	r0, [pc, #120]	; (6a9c <set+0x13c>)
    6a22:	1ad2      	subs	r2, r2, r3
    6a24:	08d2      	lsrs	r2, r2, #3
    6a26:	0192      	lsls	r2, r2, #6
    6a28:	f042 0201 	orr.w	r2, r2, #1
    6a2c:	f016 fa2c 	bl	1ce88 <log_1>
    6a30:	e7c6      	b.n	69c0 <set+0x60>
			bt_dev.name[len] = '\0';
    6a32:	481b      	ldr	r0, [pc, #108]	; (6aa0 <set+0x140>)
    6a34:	4401      	add	r1, r0
    6a36:	f881 4148 	strb.w	r4, [r1, #328]	; 0x148
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    6a3a:	e7c1      	b.n	69c0 <set+0x60>
	if (!strncmp(name, "irk", len)) {
    6a3c:	4919      	ldr	r1, [pc, #100]	; (6aa4 <set+0x144>)
    6a3e:	4642      	mov	r2, r8
    6a40:	4628      	mov	r0, r5
    6a42:	f018 f9b7 	bl	1edb4 <strncmp>
    6a46:	4604      	mov	r4, r0
    6a48:	2800      	cmp	r0, #0
    6a4a:	d199      	bne.n	6980 <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    6a4c:	4916      	ldr	r1, [pc, #88]	; (6aa8 <set+0x148>)
    6a4e:	2210      	movs	r2, #16
    6a50:	4638      	mov	r0, r7
    6a52:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    6a54:	280f      	cmp	r0, #15
    6a56:	d8b3      	bhi.n	69c0 <set+0x60>
    6a58:	4b08      	ldr	r3, [pc, #32]	; (6a7c <set+0x11c>)
    6a5a:	4907      	ldr	r1, [pc, #28]	; (6a78 <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
    6a5c:	4813      	ldr	r0, [pc, #76]	; (6aac <set+0x14c>)
    6a5e:	1ac9      	subs	r1, r1, r3
    6a60:	08c9      	lsrs	r1, r1, #3
    6a62:	0189      	lsls	r1, r1, #6
    6a64:	f041 0101 	orr.w	r1, r1, #1
    6a68:	f016 fa01 	bl	1ce6e <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    6a6c:	2210      	movs	r2, #16
    6a6e:	4621      	mov	r1, r4
    6a70:	480d      	ldr	r0, [pc, #52]	; (6aa8 <set+0x148>)
    6a72:	f018 f9e9 	bl	1ee48 <memset>
    6a76:	e7a3      	b.n	69c0 <set+0x60>
    6a78:	00021b94 	.word	0x00021b94
    6a7c:	00021aac 	.word	0x00021aac
    6a80:	00023f47 	.word	0x00023f47
    6a84:	00023532 	.word	0x00023532
    6a88:	20000098 	.word	0x20000098
    6a8c:	00023f68 	.word	0x00023f68
    6a90:	00023f8c 	.word	0x00023f8c
    6a94:	00024905 	.word	0x00024905
    6a98:	20000148 	.word	0x20000148
    6a9c:	00023fb1 	.word	0x00023fb1
    6aa0:	20000000 	.word	0x20000000
    6aa4:	00023f27 	.word	0x00023f27
    6aa8:	20000108 	.word	0x20000108
    6aac:	00023fe3 	.word	0x00023fe3

00006ab0 <bt_settings_encode_key>:
{
    6ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ab4:	b088      	sub	sp, #32
    6ab6:	799c      	ldrb	r4, [r3, #6]
    6ab8:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    6abc:	795d      	ldrb	r5, [r3, #5]
    6abe:	791e      	ldrb	r6, [r3, #4]
    6ac0:	78df      	ldrb	r7, [r3, #3]
    6ac2:	f893 c002 	ldrb.w	ip, [r3, #2]
    6ac6:	f893 e001 	ldrb.w	lr, [r3, #1]
    6aca:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    6acc:	f1b8 0f00 	cmp.w	r8, #0
    6ad0:	d00e      	beq.n	6af0 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    6ad2:	e9cd 3806 	strd	r3, r8, [sp, #24]
    6ad6:	e9cd ce04 	strd	ip, lr, [sp, #16]
    6ada:	4613      	mov	r3, r2
    6adc:	e9cd 6702 	strd	r6, r7, [sp, #8]
    6ae0:	e9cd 4500 	strd	r4, r5, [sp]
    6ae4:	4a08      	ldr	r2, [pc, #32]	; (6b08 <bt_settings_encode_key+0x58>)
    6ae6:	f015 fe79 	bl	1c7dc <snprintk>
}
    6aea:	b008      	add	sp, #32
    6aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    6af0:	e9cd e305 	strd	lr, r3, [sp, #20]
    6af4:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    6af8:	4613      	mov	r3, r2
    6afa:	e9cd 5601 	strd	r5, r6, [sp, #4]
    6afe:	4a03      	ldr	r2, [pc, #12]	; (6b0c <bt_settings_encode_key+0x5c>)
    6b00:	9400      	str	r4, [sp, #0]
    6b02:	f015 fe6b 	bl	1c7dc <snprintk>
}
    6b06:	e7f0      	b.n	6aea <bt_settings_encode_key+0x3a>
    6b08:	00024001 	.word	0x00024001
    6b0c:	00024025 	.word	0x00024025

00006b10 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b10:	4909      	ldr	r1, [pc, #36]	; (6b38 <bt_settings_save_id+0x28>)
    6b12:	f3bf 8f5b 	dmb	ish
    6b16:	e851 3f00 	ldrex	r3, [r1]
    6b1a:	f043 0201 	orr.w	r2, r3, #1
    6b1e:	e841 2000 	strex	r0, r2, [r1]
    6b22:	2800      	cmp	r0, #0
    6b24:	d1f7      	bne.n	6b16 <bt_settings_save_id+0x6>
    6b26:	f3bf 8f5b 	dmb	ish
 * @return N/A
 */
static inline void k_work_submit_to_queue(struct k_work_q *work_q,
					  struct k_work *work)
{
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6b2a:	07db      	lsls	r3, r3, #31
    6b2c:	d403      	bmi.n	6b36 <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    6b2e:	4803      	ldr	r0, [pc, #12]	; (6b3c <bt_settings_save_id+0x2c>)
    6b30:	3908      	subs	r1, #8
    6b32:	f01a ba8b 	b.w	2104c <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    6b36:	4770      	bx	lr
    6b38:	200002d4 	.word	0x200002d4
    6b3c:	200012a8 	.word	0x200012a8

00006b40 <commit>:

static int commit(void)
{
    6b40:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    6b42:	4c1d      	ldr	r4, [pc, #116]	; (6bb8 <commit+0x78>)
    6b44:	f894 3148 	ldrb.w	r3, [r4, #328]	; 0x148
    6b48:	b913      	cbnz	r3, 6b50 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    6b4a:	481c      	ldr	r0, [pc, #112]	; (6bbc <commit+0x7c>)
    6b4c:	f001 ff30 	bl	89b0 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    6b50:	79e3      	ldrb	r3, [r4, #7]
    6b52:	b99b      	cbnz	r3, 6b7c <commit+0x3c>
		bt_setup_public_id_addr();
    6b54:	f001 ffc2 	bl	8adc <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    6b58:	79e3      	ldrb	r3, [r4, #7]
    6b5a:	b97b      	cbnz	r3, 6b7c <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    6b5c:	f002 f89c 	bl	8c98 <bt_setup_random_id_addr>
		if (err) {
    6b60:	4604      	mov	r4, r0
    6b62:	b158      	cbz	r0, 6b7c <commit+0x3c>
    6b64:	4916      	ldr	r1, [pc, #88]	; (6bc0 <commit+0x80>)
    6b66:	4b17      	ldr	r3, [pc, #92]	; (6bc4 <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    6b68:	4817      	ldr	r0, [pc, #92]	; (6bc8 <commit+0x88>)
    6b6a:	1ac9      	subs	r1, r1, r3
    6b6c:	08c9      	lsrs	r1, r1, #3
    6b6e:	0189      	lsls	r1, r1, #6
    6b70:	f041 0101 	orr.w	r1, r1, #1
    6b74:	f016 f97b 	bl	1ce6e <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    6b78:	4620      	mov	r0, r4
    6b7a:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6b7c:	4d13      	ldr	r5, [pc, #76]	; (6bcc <commit+0x8c>)
    6b7e:	f3bf 8f5b 	dmb	ish
    6b82:	682b      	ldr	r3, [r5, #0]
    6b84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6b88:	079b      	lsls	r3, r3, #30
    6b8a:	d401      	bmi.n	6b90 <commit+0x50>
		bt_finalize_init();
    6b8c:	f001 fe1e 	bl	87cc <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6b90:	f3bf 8f5b 	dmb	ish
    6b94:	e855 4f00 	ldrex	r4, [r5]
    6b98:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    6b9c:	e845 3200 	strex	r2, r3, [r5]
    6ba0:	2a00      	cmp	r2, #0
    6ba2:	d1f7      	bne.n	6b94 <commit+0x54>
    6ba4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    6ba8:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    6bac:	d0e4      	beq.n	6b78 <commit+0x38>
		bt_settings_save_id();
    6bae:	f7ff ffaf 	bl	6b10 <bt_settings_save_id>
	return 0;
    6bb2:	2400      	movs	r4, #0
    6bb4:	e7e0      	b.n	6b78 <commit+0x38>
    6bb6:	bf00      	nop
    6bb8:	20000000 	.word	0x20000000
    6bbc:	00024046 	.word	0x00024046
    6bc0:	00021b94 	.word	0x00021b94
    6bc4:	00021aac 	.word	0x00021aac
    6bc8:	0002404d 	.word	0x0002404d
    6bcc:	20000098 	.word	0x20000098

00006bd0 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    6bd0:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    6bd2:	f7fe fa21 	bl	5018 <settings_subsys_init>
	if (err) {
    6bd6:	4604      	mov	r4, r0
    6bd8:	b150      	cbz	r0, 6bf0 <bt_settings_init+0x20>
    6bda:	4a06      	ldr	r2, [pc, #24]	; (6bf4 <bt_settings_init+0x24>)
    6bdc:	4b06      	ldr	r3, [pc, #24]	; (6bf8 <bt_settings_init+0x28>)
    6bde:	1ad2      	subs	r2, r2, r3
    6be0:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    6be2:	0192      	lsls	r2, r2, #6
    6be4:	4601      	mov	r1, r0
    6be6:	f042 0201 	orr.w	r2, r2, #1
    6bea:	4804      	ldr	r0, [pc, #16]	; (6bfc <bt_settings_init+0x2c>)
    6bec:	f016 f94c 	bl	1ce88 <log_1>
		return err;
	}

	return 0;
}
    6bf0:	4620      	mov	r0, r4
    6bf2:	bd10      	pop	{r4, pc}
    6bf4:	00021b94 	.word	0x00021b94
    6bf8:	00021aac 	.word	0x00021aac
    6bfc:	00024071 	.word	0x00024071

00006c00 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    6c00:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    6c02:	7802      	ldrb	r2, [r0, #0]
    6c04:	2a01      	cmp	r2, #1
{
    6c06:	4604      	mov	r4, r0
    6c08:	460b      	mov	r3, r1
	switch (src->type) {
    6c0a:	d016      	beq.n	6c3a <uuid_to_uuid128+0x3a>
    6c0c:	2a02      	cmp	r2, #2
    6c0e:	d02c      	beq.n	6c6a <uuid_to_uuid128+0x6a>
    6c10:	b98a      	cbnz	r2, 6c36 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    6c12:	4a19      	ldr	r2, [pc, #100]	; (6c78 <uuid_to_uuid128+0x78>)
    6c14:	460d      	mov	r5, r1
    6c16:	f102 0710 	add.w	r7, r2, #16
    6c1a:	6810      	ldr	r0, [r2, #0]
    6c1c:	6851      	ldr	r1, [r2, #4]
    6c1e:	462e      	mov	r6, r5
    6c20:	c603      	stmia	r6!, {r0, r1}
    6c22:	3208      	adds	r2, #8
    6c24:	42ba      	cmp	r2, r7
    6c26:	4635      	mov	r5, r6
    6c28:	d1f7      	bne.n	6c1a <uuid_to_uuid128+0x1a>
    6c2a:	7812      	ldrb	r2, [r2, #0]
    6c2c:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    6c2e:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    6c30:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    6c32:	0a12      	lsrs	r2, r2, #8
    6c34:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    6c36:	bcf0      	pop	{r4, r5, r6, r7}
    6c38:	4770      	bx	lr
		*dst = uuid128_base;
    6c3a:	4a0f      	ldr	r2, [pc, #60]	; (6c78 <uuid_to_uuid128+0x78>)
    6c3c:	460d      	mov	r5, r1
    6c3e:	f102 0710 	add.w	r7, r2, #16
    6c42:	6810      	ldr	r0, [r2, #0]
    6c44:	6851      	ldr	r1, [r2, #4]
    6c46:	462e      	mov	r6, r5
    6c48:	c603      	stmia	r6!, {r0, r1}
    6c4a:	3208      	adds	r2, #8
    6c4c:	42ba      	cmp	r2, r7
    6c4e:	4635      	mov	r5, r6
    6c50:	d1f7      	bne.n	6c42 <uuid_to_uuid128+0x42>
    6c52:	7812      	ldrb	r2, [r2, #0]
    6c54:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    6c56:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    6c58:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    6c5a:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    6c5e:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    6c60:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    6c62:	0a12      	lsrs	r2, r2, #8
    6c64:	7399      	strb	r1, [r3, #14]
    6c66:	741a      	strb	r2, [r3, #16]
}
    6c68:	e7e5      	b.n	6c36 <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    6c6a:	4601      	mov	r1, r0
}
    6c6c:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    6c6e:	2211      	movs	r2, #17
    6c70:	4618      	mov	r0, r3
    6c72:	f018 b8be 	b.w	1edf2 <memcpy>
    6c76:	bf00      	nop
    6c78:	000240a5 	.word	0x000240a5

00006c7c <le_dhkey_complete>:
{
    6c7c:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    6c7e:	4c06      	ldr	r4, [pc, #24]	; (6c98 <le_dhkey_complete+0x1c>)
    6c80:	6822      	ldr	r2, [r4, #0]
    6c82:	b132      	cbz	r2, 6c92 <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    6c84:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    6c86:	7803      	ldrb	r3, [r0, #0]
    6c88:	b923      	cbnz	r3, 6c94 <le_dhkey_complete+0x18>
    6c8a:	3001      	adds	r0, #1
    6c8c:	4790      	blx	r2
		dh_key_cb = NULL;
    6c8e:	2300      	movs	r3, #0
    6c90:	6023      	str	r3, [r4, #0]
}
    6c92:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    6c94:	2000      	movs	r0, #0
    6c96:	e7f9      	b.n	6c8c <le_dhkey_complete+0x10>
    6c98:	20001568 	.word	0x20001568

00006c9c <ver_str>:
{
    6c9c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    6c9e:	4d0b      	ldr	r5, [pc, #44]	; (6ccc <ver_str+0x30>)
{
    6ca0:	4606      	mov	r6, r0
	const char * const str[] = {
    6ca2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    6ca4:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    6ca6:	466c      	mov	r4, sp
    6ca8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6caa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6cae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    6cb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    6cb6:	2e0b      	cmp	r6, #11
		return str[ver];
    6cb8:	bf9b      	ittet	ls
    6cba:	ab0c      	addls	r3, sp, #48	; 0x30
    6cbc:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    6cc0:	4803      	ldrhi	r0, [pc, #12]	; (6cd0 <ver_str+0x34>)
		return str[ver];
    6cc2:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    6cc6:	b00c      	add	sp, #48	; 0x30
    6cc8:	bd70      	pop	{r4, r5, r6, pc}
    6cca:	bf00      	nop
    6ccc:	00021c60 	.word	0x00021c60
    6cd0:	000241a1 	.word	0x000241a1

00006cd4 <hci_data_buf_overflow>:
    6cd4:	4905      	ldr	r1, [pc, #20]	; (6cec <hci_data_buf_overflow+0x18>)
    6cd6:	4a06      	ldr	r2, [pc, #24]	; (6cf0 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    6cd8:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    6cda:	4806      	ldr	r0, [pc, #24]	; (6cf4 <hci_data_buf_overflow+0x20>)
    6cdc:	1a52      	subs	r2, r2, r1
    6cde:	08d2      	lsrs	r2, r2, #3
    6ce0:	0192      	lsls	r2, r2, #6
    6ce2:	7819      	ldrb	r1, [r3, #0]
    6ce4:	f042 0202 	orr.w	r2, r2, #2
    6ce8:	f016 b8ce 	b.w	1ce88 <log_1>
    6cec:	00021aac 	.word	0x00021aac
    6cf0:	00021b6c 	.word	0x00021b6c
    6cf4:	000241a9 	.word	0x000241a9

00006cf8 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    6cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    6cfa:	4f0a      	ldr	r7, [pc, #40]	; (6d24 <id_find+0x2c>)
{
    6cfc:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    6cfe:	2500      	movs	r5, #0
    6d00:	79fb      	ldrb	r3, [r7, #7]
    6d02:	b2ec      	uxtb	r4, r5
    6d04:	42a3      	cmp	r3, r4
    6d06:	d802      	bhi.n	6d0e <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    6d08:	f06f 0401 	mvn.w	r4, #1
    6d0c:	e008      	b.n	6d20 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6d0e:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    6d12:	4439      	add	r1, r7
    6d14:	4630      	mov	r0, r6
    6d16:	f018 f9d8 	bl	1f0ca <bt_addr_le_cmp>
    6d1a:	3501      	adds	r5, #1
    6d1c:	2800      	cmp	r0, #0
    6d1e:	d1ef      	bne.n	6d00 <id_find+0x8>
}
    6d20:	4620      	mov	r0, r4
    6d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6d24:	20000000 	.word	0x20000000

00006d28 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    6d28:	6843      	ldr	r3, [r0, #4]
{
    6d2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6d2c:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    6d2e:	0558      	lsls	r0, r3, #21
    6d30:	d408      	bmi.n	6d44 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6d32:	6922      	ldr	r2, [r4, #16]
    6d34:	b10a      	cbz	r2, 6d3a <valid_adv_param+0x12>
    6d36:	07d9      	lsls	r1, r3, #31
    6d38:	d504      	bpl.n	6d44 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
    6d3a:	4d16      	ldr	r5, [pc, #88]	; (6d94 <valid_adv_param+0x6c>)
    6d3c:	7820      	ldrb	r0, [r4, #0]
    6d3e:	79eb      	ldrb	r3, [r5, #7]
    6d40:	4283      	cmp	r3, r0
    6d42:	d802      	bhi.n	6d4a <valid_adv_param+0x22>
			return false;
    6d44:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
    6d46:	b003      	add	sp, #12
    6d48:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    6d4a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6d4e:	2300      	movs	r3, #0
    6d50:	4669      	mov	r1, sp
    6d52:	4428      	add	r0, r5
    6d54:	9300      	str	r3, [sp, #0]
    6d56:	f8cd 3003 	str.w	r3, [sp, #3]
    6d5a:	f018 f9b6 	bl	1f0ca <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    6d5e:	2800      	cmp	r0, #0
    6d60:	d0f0      	beq.n	6d44 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6d62:	6863      	ldr	r3, [r4, #4]
    6d64:	07da      	lsls	r2, r3, #31
    6d66:	d406      	bmi.n	6d76 <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    6d68:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    6d6c:	2a08      	cmp	r2, #8
    6d6e:	d802      	bhi.n	6d76 <valid_adv_param+0x4e>
    6d70:	68a2      	ldr	r2, [r4, #8]
    6d72:	2a9f      	cmp	r2, #159	; 0x9f
    6d74:	d9e6      	bls.n	6d44 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    6d76:	06db      	lsls	r3, r3, #27
    6d78:	d401      	bmi.n	6d7e <valid_adv_param+0x56>
    6d7a:	6923      	ldr	r3, [r4, #16]
    6d7c:	b943      	cbnz	r3, 6d90 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    6d7e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    6d82:	429a      	cmp	r2, r3
    6d84:	d8de      	bhi.n	6d44 <valid_adv_param+0x1c>
    6d86:	2a1f      	cmp	r2, #31
    6d88:	d9dc      	bls.n	6d44 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
    6d8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6d8e:	d8d9      	bhi.n	6d44 <valid_adv_param+0x1c>
	return true;
    6d90:	2001      	movs	r0, #1
    6d92:	e7d8      	b.n	6d46 <valid_adv_param+0x1e>
    6d94:	20000000 	.word	0x20000000

00006d98 <le_pkey_complete>:
{
    6d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    6d9a:	6886      	ldr	r6, [r0, #8]
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6d9c:	480f      	ldr	r0, [pc, #60]	; (6ddc <le_pkey_complete+0x44>)
    6d9e:	f06f 0110 	mvn.w	r1, #16
    6da2:	f018 f97d 	bl	1f0a0 <atomic_and>
	if (!evt->status) {
    6da6:	7833      	ldrb	r3, [r6, #0]
    6da8:	b943      	cbnz	r3, 6dbc <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    6daa:	1c71      	adds	r1, r6, #1
    6dac:	480c      	ldr	r0, [pc, #48]	; (6de0 <le_pkey_complete+0x48>)
    6dae:	2240      	movs	r2, #64	; 0x40
    6db0:	f018 f81f 	bl	1edf2 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6db4:	4809      	ldr	r0, [pc, #36]	; (6ddc <le_pkey_complete+0x44>)
    6db6:	2108      	movs	r1, #8
    6db8:	f018 f990 	bl	1f0dc <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6dbc:	4d09      	ldr	r5, [pc, #36]	; (6de4 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    6dbe:	4f08      	ldr	r7, [pc, #32]	; (6de0 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6dc0:	682c      	ldr	r4, [r5, #0]
    6dc2:	b90c      	cbnz	r4, 6dc8 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    6dc4:	602c      	str	r4, [r5, #0]
}
    6dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    6dc8:	7832      	ldrb	r2, [r6, #0]
    6dca:	6823      	ldr	r3, [r4, #0]
    6dcc:	2a00      	cmp	r2, #0
    6dce:	bf0c      	ite	eq
    6dd0:	4638      	moveq	r0, r7
    6dd2:	2000      	movne	r0, #0
    6dd4:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6dd6:	6864      	ldr	r4, [r4, #4]
    6dd8:	e7f3      	b.n	6dc2 <le_pkey_complete+0x2a>
    6dda:	bf00      	nop
    6ddc:	20000098 	.word	0x20000098
    6de0:	20003019 	.word	0x20003019
    6de4:	2000156c 	.word	0x2000156c

00006de8 <unpair>:
{
    6de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6dec:	4606      	mov	r6, r0
    6dee:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
    6df0:	f002 fe86 	bl	9b00 <bt_conn_lookup_addr_le>
	if (conn) {
    6df4:	4604      	mov	r4, r0
    6df6:	b9b0      	cbnz	r0, 6e26 <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
    6df8:	4639      	mov	r1, r7
    6dfa:	4630      	mov	r0, r6
    6dfc:	f007 fcf6 	bl	e7ec <bt_keys_find_addr>
		if (keys) {
    6e00:	4605      	mov	r5, r0
    6e02:	b110      	cbz	r0, 6e0a <unpair+0x22>
			bt_keys_clear(keys);
    6e04:	4628      	mov	r0, r5
    6e06:	f007 fd01 	bl	e80c <bt_keys_clear>
	bt_gatt_clear(id, addr);
    6e0a:	4639      	mov	r1, r7
    6e0c:	4630      	mov	r0, r6
    6e0e:	f005 fee5 	bl	cbdc <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
    6e12:	4b10      	ldr	r3, [pc, #64]	; (6e54 <unpair+0x6c>)
    6e14:	681b      	ldr	r3, [r3, #0]
    6e16:	b1db      	cbz	r3, 6e50 <unpair+0x68>
    6e18:	6a1b      	ldr	r3, [r3, #32]
    6e1a:	b1cb      	cbz	r3, 6e50 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
    6e1c:	4639      	mov	r1, r7
    6e1e:	4630      	mov	r0, r6
}
    6e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
    6e24:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
    6e26:	7883      	ldrb	r3, [r0, #2]
    6e28:	2b01      	cmp	r3, #1
    6e2a:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
    6e2e:	bf04      	itt	eq
    6e30:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
    6e34:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6e38:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
    6e3c:	bf18      	it	ne
    6e3e:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6e40:	f002 ffa6 	bl	9d90 <bt_conn_disconnect>
		bt_conn_unref(conn);
    6e44:	4620      	mov	r0, r4
    6e46:	f018 fb54 	bl	1f4f2 <bt_conn_unref>
		if (!keys) {
    6e4a:	2d00      	cmp	r5, #0
    6e4c:	d1da      	bne.n	6e04 <unpair+0x1c>
    6e4e:	e7d3      	b.n	6df8 <unpair+0x10>
}
    6e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6e54:	20001574 	.word	0x20001574

00006e58 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6e58:	6883      	ldr	r3, [r0, #8]
{
    6e5a:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6e5c:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    6e5e:	4620      	mov	r0, r4
    6e60:	f002 fe30 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    6e64:	b960      	cbnz	r0, 6e80 <le_data_len_change+0x28>
    6e66:	4a08      	ldr	r2, [pc, #32]	; (6e88 <le_data_len_change+0x30>)
    6e68:	4b08      	ldr	r3, [pc, #32]	; (6e8c <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6e6a:	4809      	ldr	r0, [pc, #36]	; (6e90 <le_data_len_change+0x38>)
    6e6c:	1ad2      	subs	r2, r2, r3
    6e6e:	08d2      	lsrs	r2, r2, #3
    6e70:	0192      	lsls	r2, r2, #6
    6e72:	4621      	mov	r1, r4
    6e74:	f042 0201 	orr.w	r2, r2, #1
}
    6e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6e7c:	f016 b804 	b.w	1ce88 <log_1>
}
    6e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    6e84:	f018 bb35 	b.w	1f4f2 <bt_conn_unref>
    6e88:	00021b6c 	.word	0x00021b6c
    6e8c:	00021aac 	.word	0x00021aac
    6e90:	000241d1 	.word	0x000241d1

00006e94 <hci_disconn_complete_prio>:
{
    6e94:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    6e96:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    6e98:	781a      	ldrb	r2, [r3, #0]
    6e9a:	b9da      	cbnz	r2, 6ed4 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6e9c:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    6ea0:	4628      	mov	r0, r5
    6ea2:	f002 fe0f 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    6ea6:	4604      	mov	r4, r0
    6ea8:	b960      	cbnz	r0, 6ec4 <hci_disconn_complete_prio+0x30>
    6eaa:	4b0b      	ldr	r3, [pc, #44]	; (6ed8 <hci_disconn_complete_prio+0x44>)
    6eac:	4a0b      	ldr	r2, [pc, #44]	; (6edc <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    6eae:	480c      	ldr	r0, [pc, #48]	; (6ee0 <hci_disconn_complete_prio+0x4c>)
    6eb0:	1ad2      	subs	r2, r2, r3
    6eb2:	08d2      	lsrs	r2, r2, #3
    6eb4:	0192      	lsls	r2, r2, #6
    6eb6:	4629      	mov	r1, r5
    6eb8:	f042 0201 	orr.w	r2, r2, #1
}
    6ebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6ec0:	f015 bfe2 	b.w	1ce88 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    6ec4:	2101      	movs	r1, #1
    6ec6:	f002 fe83 	bl	9bd0 <bt_conn_set_state>
	bt_conn_unref(conn);
    6eca:	4620      	mov	r0, r4
}
    6ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6ed0:	f018 bb0f 	b.w	1f4f2 <bt_conn_unref>
}
    6ed4:	bd38      	pop	{r3, r4, r5, pc}
    6ed6:	bf00      	nop
    6ed8:	00021aac 	.word	0x00021aac
    6edc:	00021b6c 	.word	0x00021b6c
    6ee0:	000241f5 	.word	0x000241f5

00006ee4 <hci_disconn_complete>:
{
    6ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    6ee6:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    6ee8:	7835      	ldrb	r5, [r6, #0]
    6eea:	b9f5      	cbnz	r5, 6f2a <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    6eec:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    6ef0:	4638      	mov	r0, r7
    6ef2:	f002 fde7 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    6ef6:	4604      	mov	r4, r0
    6ef8:	b960      	cbnz	r0, 6f14 <hci_disconn_complete+0x30>
    6efa:	4b0c      	ldr	r3, [pc, #48]	; (6f2c <hci_disconn_complete+0x48>)
    6efc:	4a0c      	ldr	r2, [pc, #48]	; (6f30 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    6efe:	480d      	ldr	r0, [pc, #52]	; (6f34 <hci_disconn_complete+0x50>)
    6f00:	1ad2      	subs	r2, r2, r3
    6f02:	08d2      	lsrs	r2, r2, #3
    6f04:	0192      	lsls	r2, r2, #6
    6f06:	4639      	mov	r1, r7
    6f08:	f042 0201 	orr.w	r2, r2, #1
}
    6f0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    6f10:	f015 bfba 	b.w	1ce88 <log_1>
	conn->err = evt->reason;
    6f14:	78f3      	ldrb	r3, [r6, #3]
    6f16:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6f18:	4629      	mov	r1, r5
    6f1a:	f002 fe59 	bl	9bd0 <bt_conn_set_state>
	conn->handle = 0U;
    6f1e:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    6f20:	4620      	mov	r0, r4
}
    6f22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    6f26:	f018 bae4 	b.w	1f4f2 <bt_conn_unref>
}
    6f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6f2c:	00021aac 	.word	0x00021aac
    6f30:	00021b6c 	.word	0x00021b6c
    6f34:	000241f5 	.word	0x000241f5

00006f38 <hci_vendor_event>:
{
    6f38:	b510      	push	{r4, lr}
    6f3a:	4a0a      	ldr	r2, [pc, #40]	; (6f64 <hci_vendor_event+0x2c>)
    6f3c:	4c0a      	ldr	r4, [pc, #40]	; (6f68 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    6f3e:	8981      	ldrh	r1, [r0, #12]
    6f40:	6880      	ldr	r0, [r0, #8]
    6f42:	1aa4      	subs	r4, r4, r2
    6f44:	f7ff fae2 	bl	650c <bt_hex_real>
    6f48:	f7fc fd7e 	bl	3a48 <log_strdup>
    6f4c:	08e4      	lsrs	r4, r4, #3
    6f4e:	01a4      	lsls	r4, r4, #6
    6f50:	f044 0402 	orr.w	r4, r4, #2
    6f54:	4601      	mov	r1, r0
    6f56:	4622      	mov	r2, r4
    6f58:	4804      	ldr	r0, [pc, #16]	; (6f6c <hci_vendor_event+0x34>)
}
    6f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    6f5e:	f015 bf93 	b.w	1ce88 <log_1>
    6f62:	bf00      	nop
    6f64:	00021aac 	.word	0x00021aac
    6f68:	00021b6c 	.word	0x00021b6c
    6f6c:	0002421b 	.word	0x0002421b

00006f70 <le_conn_update_complete>:
{
    6f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    6f72:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6f74:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    6f78:	4630      	mov	r0, r6
    6f7a:	f002 fda3 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    6f7e:	4604      	mov	r4, r0
    6f80:	b960      	cbnz	r0, 6f9c <le_conn_update_complete+0x2c>
    6f82:	4a1e      	ldr	r2, [pc, #120]	; (6ffc <le_conn_update_complete+0x8c>)
    6f84:	4b1e      	ldr	r3, [pc, #120]	; (7000 <le_conn_update_complete+0x90>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    6f86:	481f      	ldr	r0, [pc, #124]	; (7004 <le_conn_update_complete+0x94>)
    6f88:	1ad2      	subs	r2, r2, r3
    6f8a:	08d2      	lsrs	r2, r2, #3
    6f8c:	0192      	lsls	r2, r2, #6
    6f8e:	f042 0201 	orr.w	r2, r2, #1
    6f92:	4631      	mov	r1, r6
    6f94:	f015 ff78 	bl	1ce88 <log_1>
}
    6f98:	b002      	add	sp, #8
    6f9a:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
    6f9c:	782b      	ldrb	r3, [r5, #0]
    6f9e:	b9bb      	cbnz	r3, 6fd0 <le_conn_update_complete+0x60>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    6fa0:	792a      	ldrb	r2, [r5, #4]
    6fa2:	78eb      	ldrb	r3, [r5, #3]
    6fa4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6fa8:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    6fac:	79aa      	ldrb	r2, [r5, #6]
    6fae:	796b      	ldrb	r3, [r5, #5]
    6fb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6fb4:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    6fb8:	79eb      	ldrb	r3, [r5, #7]
    6fba:	7a2a      	ldrb	r2, [r5, #8]
    6fbc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    6fc0:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    6fc4:	f002 fb66 	bl	9694 <notify_le_param_updated>
	bt_conn_unref(conn);
    6fc8:	4620      	mov	r0, r4
    6fca:	f018 fa92 	bl	1f4f2 <bt_conn_unref>
    6fce:	e7e3      	b.n	6f98 <le_conn_update_complete+0x28>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    6fd0:	2b1a      	cmp	r3, #26
    6fd2:	d1f9      	bne.n	6fc8 <le_conn_update_complete+0x58>
    6fd4:	78c3      	ldrb	r3, [r0, #3]
    6fd6:	2b01      	cmp	r3, #1
    6fd8:	d1f6      	bne.n	6fc8 <le_conn_update_complete+0x58>
		   !atomic_test_and_set_bit(conn->flags,
    6fda:	210a      	movs	r1, #10
    6fdc:	3004      	adds	r0, #4
    6fde:	f018 f88c 	bl	1f0fa <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    6fe2:	2800      	cmp	r0, #0
    6fe4:	d1f0      	bne.n	6fc8 <le_conn_update_complete+0x58>
		param.interval_min = conn->le.interval_min;
    6fe6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    6fea:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
    6fec:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
    6fee:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    6ff2:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    6ff4:	4620      	mov	r0, r4
    6ff6:	f003 fa01 	bl	a3fc <bt_l2cap_update_conn_param>
    6ffa:	e7e5      	b.n	6fc8 <le_conn_update_complete+0x58>
    6ffc:	00021b6c 	.word	0x00021b6c
    7000:	00021aac 	.word	0x00021aac
    7004:	000241d1 	.word	0x000241d1

00007008 <update_sec_level>:
{
    7008:	b510      	push	{r4, lr}
	if (!conn->encrypt) {
    700a:	7ac3      	ldrb	r3, [r0, #11]
{
    700c:	4604      	mov	r4, r0
	if (!conn->encrypt) {
    700e:	b913      	cbnz	r3, 7016 <update_sec_level+0xe>
		conn->sec_level = BT_SECURITY_L1;
    7010:	2301      	movs	r3, #1
    7012:	7243      	strb	r3, [r0, #9]
}
    7014:	bd10      	pop	{r4, pc}
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
    7016:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    701a:	b1fb      	cbz	r3, 705c <update_sec_level+0x54>
    701c:	7b5a      	ldrb	r2, [r3, #13]
    701e:	07d1      	lsls	r1, r2, #31
    7020:	d51c      	bpl.n	705c <update_sec_level+0x54>
		if (conn->le.keys->flags & BT_KEYS_SC &&
    7022:	06d2      	lsls	r2, r2, #27
    7024:	d518      	bpl.n	7058 <update_sec_level+0x50>
    7026:	7b1b      	ldrb	r3, [r3, #12]
    7028:	2b10      	cmp	r3, #16
    702a:	d115      	bne.n	7058 <update_sec_level+0x50>
			conn->sec_level = BT_SECURITY_L4;
    702c:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
    702e:	7263      	strb	r3, [r4, #9]
	if (conn->required_sec_level > conn->sec_level) {
    7030:	7aa2      	ldrb	r2, [r4, #10]
    7032:	7a63      	ldrb	r3, [r4, #9]
    7034:	429a      	cmp	r2, r3
    7036:	d9ed      	bls.n	7014 <update_sec_level+0xc>
    7038:	4b09      	ldr	r3, [pc, #36]	; (7060 <update_sec_level+0x58>)
    703a:	490a      	ldr	r1, [pc, #40]	; (7064 <update_sec_level+0x5c>)
		BT_ERR("Failed to set required security level");
    703c:	480a      	ldr	r0, [pc, #40]	; (7068 <update_sec_level+0x60>)
    703e:	1ac9      	subs	r1, r1, r3
    7040:	08c9      	lsrs	r1, r1, #3
    7042:	0189      	lsls	r1, r1, #6
    7044:	f041 0101 	orr.w	r1, r1, #1
    7048:	f015 ff11 	bl	1ce6e <log_0>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    704c:	4620      	mov	r0, r4
    704e:	2105      	movs	r1, #5
}
    7050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
    7054:	f002 be9c 	b.w	9d90 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
    7058:	2303      	movs	r3, #3
    705a:	e7e8      	b.n	702e <update_sec_level+0x26>
		conn->sec_level = BT_SECURITY_L2;
    705c:	2302      	movs	r3, #2
    705e:	e7e6      	b.n	702e <update_sec_level+0x26>
    7060:	00021aac 	.word	0x00021aac
    7064:	00021b6c 	.word	0x00021b6c
    7068:	0002423f 	.word	0x0002423f

0000706c <hci_encrypt_key_refresh_complete>:
{
    706c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    706e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7070:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    7074:	4630      	mov	r0, r6
    7076:	f002 fd25 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    707a:	4604      	mov	r4, r0
    707c:	b960      	cbnz	r0, 7098 <hci_encrypt_key_refresh_complete+0x2c>
    707e:	4a18      	ldr	r2, [pc, #96]	; (70e0 <hci_encrypt_key_refresh_complete+0x74>)
    7080:	4b18      	ldr	r3, [pc, #96]	; (70e4 <hci_encrypt_key_refresh_complete+0x78>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7082:	4819      	ldr	r0, [pc, #100]	; (70e8 <hci_encrypt_key_refresh_complete+0x7c>)
    7084:	1ad2      	subs	r2, r2, r3
    7086:	08d2      	lsrs	r2, r2, #3
    7088:	0192      	lsls	r2, r2, #6
    708a:	4631      	mov	r1, r6
    708c:	f042 0201 	orr.w	r2, r2, #1
}
    7090:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7094:	f015 bef8 	b.w	1ce88 <log_1>
	if (evt->status) {
    7098:	7829      	ldrb	r1, [r5, #0]
    709a:	b189      	cbz	r1, 70c0 <hci_encrypt_key_refresh_complete+0x54>
	conn->required_sec_level = conn->sec_level;
    709c:	7a43      	ldrb	r3, [r0, #9]
    709e:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    70a0:	f018 fab5 	bl	1f60e <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    70a4:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    70a6:	2b29      	cmp	r3, #41	; 0x29
    70a8:	bf9a      	itte	ls
    70aa:	4a10      	ldrls	r2, [pc, #64]	; (70ec <hci_encrypt_key_refresh_complete+0x80>)
    70ac:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    70ae:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    70b0:	4620      	mov	r0, r4
    70b2:	f002 fb5d 	bl	9770 <bt_conn_security_changed>
	bt_conn_unref(conn);
    70b6:	4620      	mov	r0, r4
}
    70b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    70bc:	f018 ba19 	b.w	1f4f2 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    70c0:	7883      	ldrb	r3, [r0, #2]
    70c2:	2b01      	cmp	r3, #1
    70c4:	d104      	bne.n	70d0 <hci_encrypt_key_refresh_complete+0x64>
		bt_smp_update_keys(conn);
    70c6:	f007 fa27 	bl	e518 <bt_smp_update_keys>
		update_sec_level(conn);
    70ca:	4620      	mov	r0, r4
    70cc:	f7ff ff9c 	bl	7008 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    70d0:	7a63      	ldrb	r3, [r4, #9]
    70d2:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    70d4:	7829      	ldrb	r1, [r5, #0]
    70d6:	4620      	mov	r0, r4
    70d8:	f018 fa99 	bl	1f60e <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    70dc:	2100      	movs	r1, #0
    70de:	e7e7      	b.n	70b0 <hci_encrypt_key_refresh_complete+0x44>
    70e0:	00021b6c 	.word	0x00021b6c
    70e4:	00021aac 	.word	0x00021aac
    70e8:	000241f5 	.word	0x000241f5
    70ec:	00024a9d 	.word	0x00024a9d

000070f0 <hci_encrypt_change>:
{
    70f0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    70f2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    70f4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    70f8:	4630      	mov	r0, r6
    70fa:	f002 fce3 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    70fe:	4604      	mov	r4, r0
    7100:	b960      	cbnz	r0, 711c <hci_encrypt_change+0x2c>
    7102:	4a1a      	ldr	r2, [pc, #104]	; (716c <hci_encrypt_change+0x7c>)
    7104:	4b1a      	ldr	r3, [pc, #104]	; (7170 <hci_encrypt_change+0x80>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    7106:	481b      	ldr	r0, [pc, #108]	; (7174 <hci_encrypt_change+0x84>)
    7108:	1ad2      	subs	r2, r2, r3
    710a:	08d2      	lsrs	r2, r2, #3
    710c:	0192      	lsls	r2, r2, #6
    710e:	4631      	mov	r1, r6
    7110:	f042 0201 	orr.w	r2, r2, #1
}
    7114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    7118:	f015 beb6 	b.w	1ce88 <log_1>
	if (evt->status) {
    711c:	7829      	ldrb	r1, [r5, #0]
    711e:	b189      	cbz	r1, 7144 <hci_encrypt_change+0x54>
	conn->required_sec_level = conn->sec_level;
    7120:	7a43      	ldrb	r3, [r0, #9]
    7122:	7283      	strb	r3, [r0, #10]
		bt_l2cap_encrypt_change(conn, evt->status);
    7124:	f018 fa73 	bl	1f60e <bt_l2cap_encrypt_change>
		bt_conn_security_changed(conn, security_err_get(evt->status));
    7128:	782b      	ldrb	r3, [r5, #0]
	switch (hci_err) {
    712a:	2b29      	cmp	r3, #41	; 0x29
    712c:	bf9a      	itte	ls
    712e:	4a12      	ldrls	r2, [pc, #72]	; (7178 <hci_encrypt_change+0x88>)
    7130:	5cd1      	ldrbls	r1, [r2, r3]
		bt_conn_security_changed(conn, security_err_get(evt->status));
    7132:	2108      	movhi	r1, #8
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    7134:	4620      	mov	r0, r4
    7136:	f002 fb1b 	bl	9770 <bt_conn_security_changed>
	bt_conn_unref(conn);
    713a:	4620      	mov	r0, r4
}
    713c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    7140:	f018 b9d7 	b.w	1f4f2 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    7144:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    7146:	78eb      	ldrb	r3, [r5, #3]
    7148:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    714a:	2a01      	cmp	r2, #1
    714c:	d105      	bne.n	715a <hci_encrypt_change+0x6a>
		if (conn->encrypt) {
    714e:	b10b      	cbz	r3, 7154 <hci_encrypt_change+0x64>
			bt_smp_update_keys(conn);
    7150:	f007 f9e2 	bl	e518 <bt_smp_update_keys>
		update_sec_level(conn);
    7154:	4620      	mov	r0, r4
    7156:	f7ff ff57 	bl	7008 <update_sec_level>
	conn->required_sec_level = conn->sec_level;
    715a:	7a63      	ldrb	r3, [r4, #9]
    715c:	72a3      	strb	r3, [r4, #10]
	bt_l2cap_encrypt_change(conn, evt->status);
    715e:	7829      	ldrb	r1, [r5, #0]
    7160:	4620      	mov	r0, r4
    7162:	f018 fa54 	bl	1f60e <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn, BT_SECURITY_ERR_SUCCESS);
    7166:	2100      	movs	r1, #0
    7168:	e7e4      	b.n	7134 <hci_encrypt_change+0x44>
    716a:	bf00      	nop
    716c:	00021b6c 	.word	0x00021b6c
    7170:	00021aac 	.word	0x00021aac
    7174:	000241f5 	.word	0x000241f5
    7178:	00024a9d 	.word	0x00024a9d

0000717c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    717c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    717e:	4c0c      	ldr	r4, [pc, #48]	; (71b0 <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    7180:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    7182:	2205      	movs	r2, #5
    7184:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    7188:	f002 fcd6 	bl	9b38 <bt_conn_lookup_state_le>
		if (!conn) {
    718c:	b970      	cbnz	r0, 71ac <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    718e:	4b09      	ldr	r3, [pc, #36]	; (71b4 <find_pending_connect.part.0+0x38>)
    7190:	6818      	ldr	r0, [r3, #0]
    7192:	889a      	ldrh	r2, [r3, #4]
    7194:	9000      	str	r0, [sp, #0]
    7196:	799b      	ldrb	r3, [r3, #6]
    7198:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    719c:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
    71a0:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    71a4:	2204      	movs	r2, #4
    71a6:	4669      	mov	r1, sp
    71a8:	f002 fcc6 	bl	9b38 <bt_conn_lookup_state_le>
}
    71ac:	b002      	add	sp, #8
    71ae:	bd10      	pop	{r4, pc}
    71b0:	20000000 	.word	0x20000000
    71b4:	00021c90 	.word	0x00021c90

000071b8 <hci_cmd_done>:
{
    71b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    71bc:	4607      	mov	r7, r0
    71be:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    71c0:	7990      	ldrb	r0, [r2, #6]
    71c2:	4e34      	ldr	r6, [pc, #208]	; (7294 <hci_cmd_done+0xdc>)
{
    71c4:	4688      	mov	r8, r1
    71c6:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    71c8:	f012 fed6 	bl	19f78 <net_buf_pool_get>
    71cc:	4286      	cmp	r6, r0
    71ce:	d016      	beq.n	71fe <hci_cmd_done+0x46>
    71d0:	4b31      	ldr	r3, [pc, #196]	; (7298 <hci_cmd_done+0xe0>)
    71d2:	4d32      	ldr	r5, [pc, #200]	; (729c <hci_cmd_done+0xe4>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    71d4:	79a0      	ldrb	r0, [r4, #6]
    71d6:	9700      	str	r7, [sp, #0]
    71d8:	1aed      	subs	r5, r5, r3
    71da:	08ed      	lsrs	r5, r5, #3
    71dc:	9001      	str	r0, [sp, #4]
    71de:	f012 fecb 	bl	19f78 <net_buf_pool_get>
    71e2:	01ad      	lsls	r5, r5, #6
    71e4:	f045 0502 	orr.w	r5, r5, #2
    71e8:	e9cd 0602 	strd	r0, r6, [sp, #8]
    71ec:	462b      	mov	r3, r5
    71ee:	482c      	ldr	r0, [pc, #176]	; (72a0 <hci_cmd_done+0xe8>)
    71f0:	2204      	movs	r2, #4
    71f2:	4669      	mov	r1, sp
    71f4:	f015 fe91 	bl	1cf1a <log_n>
}
    71f8:	b005      	add	sp, #20
    71fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    71fe:	4620      	mov	r0, r4
    7200:	f012 fec2 	bl	19f88 <net_buf_id>
    7204:	4d27      	ldr	r5, [pc, #156]	; (72a4 <hci_cmd_done+0xec>)
    7206:	f04f 090c 	mov.w	r9, #12
    720a:	fb09 5300 	mla	r3, r9, r0, r5
    720e:	885b      	ldrh	r3, [r3, #2]
    7210:	42bb      	cmp	r3, r7
    7212:	d011      	beq.n	7238 <hci_cmd_done+0x80>
    7214:	4b20      	ldr	r3, [pc, #128]	; (7298 <hci_cmd_done+0xe0>)
    7216:	4e21      	ldr	r6, [pc, #132]	; (729c <hci_cmd_done+0xe4>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    7218:	4620      	mov	r0, r4
    721a:	1af6      	subs	r6, r6, r3
    721c:	f012 feb4 	bl	19f88 <net_buf_id>
    7220:	08f6      	lsrs	r6, r6, #3
    7222:	fb09 5000 	mla	r0, r9, r0, r5
    7226:	01b6      	lsls	r6, r6, #6
    7228:	f046 0602 	orr.w	r6, r6, #2
    722c:	8842      	ldrh	r2, [r0, #2]
    722e:	481e      	ldr	r0, [pc, #120]	; (72a8 <hci_cmd_done+0xf0>)
    7230:	4633      	mov	r3, r6
    7232:	4639      	mov	r1, r7
    7234:	f015 fe3c 	bl	1ceb0 <log_2>
	if (cmd(buf)->state && !status) {
    7238:	4620      	mov	r0, r4
    723a:	f012 fea5 	bl	19f88 <net_buf_id>
    723e:	260c      	movs	r6, #12
    7240:	fb06 5000 	mla	r0, r6, r0, r5
    7244:	6843      	ldr	r3, [r0, #4]
    7246:	b16b      	cbz	r3, 7264 <hci_cmd_done+0xac>
    7248:	f1b8 0f00 	cmp.w	r8, #0
    724c:	d10a      	bne.n	7264 <hci_cmd_done+0xac>
		struct cmd_state_set *update = cmd(buf)->state;
    724e:	4620      	mov	r0, r4
    7250:	f012 fe9a 	bl	19f88 <net_buf_id>
    7254:	fb06 5000 	mla	r0, r6, r0, r5
    7258:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    725a:	e9d3 0100 	ldrd	r0, r1, [r3]
    725e:	7a1a      	ldrb	r2, [r3, #8]
    7260:	f017 ff56 	bl	1f110 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    7264:	4620      	mov	r0, r4
    7266:	f012 fe8f 	bl	19f88 <net_buf_id>
    726a:	260c      	movs	r6, #12
    726c:	fb06 5000 	mla	r0, r6, r0, r5
    7270:	6883      	ldr	r3, [r0, #8]
    7272:	2b00      	cmp	r3, #0
    7274:	d0c0      	beq.n	71f8 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    7276:	4620      	mov	r0, r4
    7278:	f012 fe86 	bl	19f88 <net_buf_id>
    727c:	4370      	muls	r0, r6
    727e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    7282:	4620      	mov	r0, r4
    7284:	f012 fe80 	bl	19f88 <net_buf_id>
    7288:	fb06 5500 	mla	r5, r6, r0, r5
    728c:	68a8      	ldr	r0, [r5, #8]
	z_impl_k_sem_give(sem);
    728e:	f014 fd59 	bl	1bd44 <z_impl_k_sem_give>
}
    7292:	e7b1      	b.n	71f8 <hci_cmd_done+0x40>
    7294:	20000a48 	.word	0x20000a48
    7298:	00021aac 	.word	0x00021aac
    729c:	00021b6c 	.word	0x00021b6c
    72a0:	00024265 	.word	0x00024265
    72a4:	20001550 	.word	0x20001550
    72a8:	0002429a 	.word	0x0002429a

000072ac <handle_event>:
{
    72ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    72ae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    72b2:	4605      	mov	r5, r0
    72b4:	4608      	mov	r0, r1
		if (handler->event != event) {
    72b6:	7811      	ldrb	r1, [r2, #0]
    72b8:	42a9      	cmp	r1, r5
    72ba:	d01a      	beq.n	72f2 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    72bc:	3208      	adds	r2, #8
    72be:	429a      	cmp	r2, r3
    72c0:	d1f9      	bne.n	72b6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    72c2:	8986      	ldrh	r6, [r0, #12]
    72c4:	4b16      	ldr	r3, [pc, #88]	; (7320 <handle_event+0x74>)
    72c6:	4c17      	ldr	r4, [pc, #92]	; (7324 <handle_event+0x78>)
    72c8:	6880      	ldr	r0, [r0, #8]
    72ca:	4631      	mov	r1, r6
    72cc:	1ae4      	subs	r4, r4, r3
    72ce:	f7ff f91d 	bl	650c <bt_hex_real>
    72d2:	f7fc fbb9 	bl	3a48 <log_strdup>
    72d6:	08e4      	lsrs	r4, r4, #3
    72d8:	01a4      	lsls	r4, r4, #6
    72da:	f044 0402 	orr.w	r4, r4, #2
    72de:	4603      	mov	r3, r0
    72e0:	f8ad 4000 	strh.w	r4, [sp]
    72e4:	4810      	ldr	r0, [pc, #64]	; (7328 <handle_event+0x7c>)
    72e6:	4632      	mov	r2, r6
    72e8:	4629      	mov	r1, r5
    72ea:	f015 fdfa 	bl	1cee2 <log_3>
}
    72ee:	b002      	add	sp, #8
    72f0:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    72f2:	8981      	ldrh	r1, [r0, #12]
    72f4:	7853      	ldrb	r3, [r2, #1]
    72f6:	428b      	cmp	r3, r1
    72f8:	d90d      	bls.n	7316 <handle_event+0x6a>
    72fa:	4a09      	ldr	r2, [pc, #36]	; (7320 <handle_event+0x74>)
    72fc:	4b09      	ldr	r3, [pc, #36]	; (7324 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    72fe:	480b      	ldr	r0, [pc, #44]	; (732c <handle_event+0x80>)
    7300:	1a9b      	subs	r3, r3, r2
    7302:	08db      	lsrs	r3, r3, #3
    7304:	019b      	lsls	r3, r3, #6
    7306:	f043 0301 	orr.w	r3, r3, #1
    730a:	462a      	mov	r2, r5
}
    730c:	b002      	add	sp, #8
    730e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    7312:	f015 bdcd 	b.w	1ceb0 <log_2>
		handler->handler(buf);
    7316:	6853      	ldr	r3, [r2, #4]
}
    7318:	b002      	add	sp, #8
    731a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    731e:	4718      	bx	r3
    7320:	00021aac 	.word	0x00021aac
    7324:	00021b6c 	.word	0x00021b6c
    7328:	000242ef 	.word	0x000242ef
    732c:	000242cd 	.word	0x000242cd

00007330 <hci_le_meta_event>:
{
    7330:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7332:	2101      	movs	r1, #1
{
    7334:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    7336:	3008      	adds	r0, #8
    7338:	f019 fc3d 	bl	20bb6 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    733c:	4621      	mov	r1, r4
    733e:	4a03      	ldr	r2, [pc, #12]	; (734c <hci_le_meta_event+0x1c>)
    7340:	7800      	ldrb	r0, [r0, #0]
}
    7342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    7346:	230a      	movs	r3, #10
    7348:	f7ff bfb0 	b.w	72ac <handle_event>
    734c:	00022274 	.word	0x00022274

00007350 <hci_tx_thread>:
{
    7350:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7354:	4d51      	ldr	r5, [pc, #324]	; (749c <hci_tx_thread+0x14c>)
    7356:	4b52      	ldr	r3, [pc, #328]	; (74a0 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    7358:	f8df 914c 	ldr.w	r9, [pc, #332]	; 74a8 <hci_tx_thread+0x158>
		BT_ASSERT(err == 0);
    735c:	f8df a174 	ldr.w	sl, [pc, #372]	; 74d4 <hci_tx_thread+0x184>
    7360:	1aed      	subs	r5, r5, r3
    7362:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    7364:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7368:	484e      	ldr	r0, [pc, #312]	; (74a4 <hci_tx_thread+0x154>)
		events[0].state = K_POLL_STATE_NOT_READY;
    736a:	f36f 3310 	bfc	r3, #12, #5
    736e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    7372:	f002 fb2b 	bl	99cc <bt_conn_prepare_events>
    7376:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    7378:	484b      	ldr	r0, [pc, #300]	; (74a8 <hci_tx_thread+0x158>)
    737a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    737e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7382:	4639      	mov	r1, r7
    7384:	f015 f836 	bl	1c3f4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    7388:	b160      	cbz	r0, 73a4 <hci_tx_thread+0x54>
    738a:	4948      	ldr	r1, [pc, #288]	; (74ac <hci_tx_thread+0x15c>)
    738c:	4848      	ldr	r0, [pc, #288]	; (74b0 <hci_tx_thread+0x160>)
    738e:	f241 530c 	movw	r3, #5388	; 0x150c
    7392:	4652      	mov	r2, sl
    7394:	f015 fa15 	bl	1c7c2 <printk>
    7398:	4040      	eors	r0, r0
    739a:	f380 8811 	msr	BASEPRI, r0
    739e:	f04f 0003 	mov.w	r0, #3
    73a2:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    73a4:	4e43      	ldr	r6, [pc, #268]	; (74b4 <hci_tx_thread+0x164>)
{
    73a6:	f8df 8100 	ldr.w	r8, [pc, #256]	; 74a8 <hci_tx_thread+0x158>
    73aa:	f106 0bd0 	add.w	fp, r6, #208	; 0xd0
	for (; count; ev++, count--) {
    73ae:	b917      	cbnz	r7, 73b6 <hci_tx_thread+0x66>
	z_impl_k_yield();
    73b0:	f014 fc54 	bl	1bc5c <z_impl_k_yield>
	while (1) {
    73b4:	e7d6      	b.n	7364 <hci_tx_thread+0x14>
		switch (ev->state) {
    73b6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    73ba:	f3c1 3104 	ubfx	r1, r1, #12, #5
    73be:	2901      	cmp	r1, #1
    73c0:	d959      	bls.n	7476 <hci_tx_thread+0x126>
    73c2:	2904      	cmp	r1, #4
    73c4:	d163      	bne.n	748e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    73c6:	f898 300c 	ldrb.w	r3, [r8, #12]
    73ca:	2b00      	cmp	r3, #0
    73cc:	d157      	bne.n	747e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    73ce:	483a      	ldr	r0, [pc, #232]	; (74b8 <hci_tx_thread+0x168>)
    73d0:	2200      	movs	r2, #0
    73d2:	2300      	movs	r3, #0
    73d4:	f019 fb77 	bl	20ac6 <net_buf_get>
	BT_ASSERT(buf);
    73d8:	4604      	mov	r4, r0
    73da:	b960      	cbnz	r0, 73f6 <hci_tx_thread+0xa6>
    73dc:	4937      	ldr	r1, [pc, #220]	; (74bc <hci_tx_thread+0x16c>)
    73de:	4834      	ldr	r0, [pc, #208]	; (74b0 <hci_tx_thread+0x160>)
    73e0:	f241 43ae 	movw	r3, #5294	; 0x14ae
    73e4:	4652      	mov	r2, sl
    73e6:	f015 f9ec 	bl	1c7c2 <printk>
    73ea:	4040      	eors	r0, r0
    73ec:	f380 8811 	msr	BASEPRI, r0
    73f0:	f04f 0003 	mov.w	r0, #3
    73f4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    73f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    73fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    73fe:	4658      	mov	r0, fp
    7400:	f014 fcc6 	bl	1bd90 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    7404:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
    7408:	b163      	cbz	r3, 7424 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    740a:	01a9      	lsls	r1, r5, #6
    740c:	482c      	ldr	r0, [pc, #176]	; (74c0 <hci_tx_thread+0x170>)
    740e:	f041 0101 	orr.w	r1, r1, #1
    7412:	f015 fd2c 	bl	1ce6e <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    7416:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    741a:	f012 fe69 	bl	1a0f0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    741e:	2300      	movs	r3, #0
    7420:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
	bt_dev.sent_cmd = net_buf_ref(buf);
    7424:	4620      	mov	r0, r4
    7426:	f019 fb79 	bl	20b1c <net_buf_ref>
    742a:	f8c6 00e8 	str.w	r0, [r6, #232]	; 0xe8
		return bt_hci_ecc_send(buf);
    742e:	4620      	mov	r0, r4
    7430:	f7ff f9ae 	bl	6790 <bt_hci_ecc_send>
	if (err) {
    7434:	4601      	mov	r1, r0
    7436:	b1f0      	cbz	r0, 7476 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    7438:	01aa      	lsls	r2, r5, #6
    743a:	4822      	ldr	r0, [pc, #136]	; (74c4 <hci_tx_thread+0x174>)
    743c:	f042 0201 	orr.w	r2, r2, #1
    7440:	f015 fd22 	bl	1ce88 <log_1>
	z_impl_k_sem_give(sem);
    7444:	4820      	ldr	r0, [pc, #128]	; (74c8 <hci_tx_thread+0x178>)
    7446:	f014 fc7d 	bl	1bd44 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    744a:	4620      	mov	r0, r4
    744c:	f012 fd9c 	bl	19f88 <net_buf_id>
    7450:	4b1e      	ldr	r3, [pc, #120]	; (74cc <hci_tx_thread+0x17c>)
    7452:	220c      	movs	r2, #12
    7454:	fb02 3000 	mla	r0, r2, r0, r3
    7458:	211f      	movs	r1, #31
    745a:	8840      	ldrh	r0, [r0, #2]
    745c:	4622      	mov	r2, r4
    745e:	f7ff feab 	bl	71b8 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    7462:	f8d6 00e8 	ldr.w	r0, [r6, #232]	; 0xe8
    7466:	f012 fe43 	bl	1a0f0 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    746a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    746c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    746e:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
		net_buf_unref(buf);
    7472:	f012 fe3d 	bl	1a0f0 <net_buf_unref>
	for (; count; ev++, count--) {
    7476:	f108 0814 	add.w	r8, r8, #20
    747a:	3f01      	subs	r7, #1
    747c:	e797      	b.n	73ae <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    747e:	2b01      	cmp	r3, #1
    7480:	d1f9      	bne.n	7476 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    7482:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    7486:	3834      	subs	r0, #52	; 0x34
    7488:	f002 fd9a 	bl	9fc0 <bt_conn_process_tx>
    748c:	e7f3      	b.n	7476 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    748e:	01aa      	lsls	r2, r5, #6
    7490:	480f      	ldr	r0, [pc, #60]	; (74d0 <hci_tx_thread+0x180>)
    7492:	f042 0202 	orr.w	r2, r2, #2
    7496:	f015 fcf7 	bl	1ce88 <log_1>
    749a:	e7ec      	b.n	7476 <hci_tx_thread+0x126>
    749c:	00021b6c 	.word	0x00021b6c
    74a0:	00021aac 	.word	0x00021aac
    74a4:	200002ec 	.word	0x200002ec
    74a8:	200002d8 	.word	0x200002d8
    74ac:	00024345 	.word	0x00024345
    74b0:	0002434e 	.word	0x0002434e
    74b4:	20000000 	.word	0x20000000
    74b8:	200000ec 	.word	0x200000ec
    74bc:	0002575e 	.word	0x0002575e
    74c0:	0002436b 	.word	0x0002436b
    74c4:	00024386 	.word	0x00024386
    74c8:	200000d0 	.word	0x200000d0
    74cc:	20001550 	.word	0x20001550
    74d0:	000243a8 	.word	0x000243a8
    74d4:	00024311 	.word	0x00024311

000074d8 <le_rpa_invalidate>:
{
    74d8:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    74da:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    74de:	480a      	ldr	r0, [pc, #40]	; (7508 <le_rpa_invalidate+0x30>)
    74e0:	f017 fdde 	bl	1f0a0 <atomic_and>
    74e4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    74e8:	4807      	ldr	r0, [pc, #28]	; (7508 <le_rpa_invalidate+0x30>)
    74ea:	f017 fdd9 	bl	1f0a0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    74ee:	4807      	ldr	r0, [pc, #28]	; (750c <le_rpa_invalidate+0x34>)
    74f0:	f017 fde5 	bl	1f0be <atomic_get>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
    74f4:	0683      	lsls	r3, r0, #26
    74f6:	d406      	bmi.n	7506 <le_rpa_invalidate+0x2e>
}
    74f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    74fc:	4803      	ldr	r0, [pc, #12]	; (750c <le_rpa_invalidate+0x34>)
    74fe:	f06f 0110 	mvn.w	r1, #16
    7502:	f017 bdcd 	b.w	1f0a0 <atomic_and>
    7506:	bd08      	pop	{r3, pc}
    7508:	20000098 	.word	0x20000098
    750c:	2000002c 	.word	0x2000002c

00007510 <hci_num_completed_packets>:
{
    7510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7514:	4b46      	ldr	r3, [pc, #280]	; (7630 <hci_num_completed_packets+0x120>)
    7516:	4d47      	ldr	r5, [pc, #284]	; (7634 <hci_num_completed_packets+0x124>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    7518:	f8d0 8008 	ldr.w	r8, [r0, #8]
    751c:	f8df a120 	ldr.w	sl, [pc, #288]	; 7640 <hci_num_completed_packets+0x130>
    7520:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    7522:	2600      	movs	r6, #0
    7524:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    7526:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    7528:	f898 3000 	ldrb.w	r3, [r8]
    752c:	429e      	cmp	r6, r3
    752e:	db02      	blt.n	7536 <hci_num_completed_packets+0x26>
}
    7530:	b003      	add	sp, #12
    7532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    7536:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    753a:	f8b3 1001 	ldrh.w	r1, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    753e:	f8b3 7003 	ldrh.w	r7, [r3, #3]
	__asm__ volatile(
    7542:	f04f 0320 	mov.w	r3, #32
    7546:	f3ef 8b11 	mrs	fp, BASEPRI
    754a:	f383 8811 	msr	BASEPRI, r3
    754e:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    7552:	4608      	mov	r0, r1
    7554:	9101      	str	r1, [sp, #4]
    7556:	f002 fab5 	bl	9ac4 <bt_conn_lookup_handle>
		if (!conn) {
    755a:	9901      	ldr	r1, [sp, #4]
    755c:	4604      	mov	r4, r0
    755e:	b958      	cbnz	r0, 7578 <hci_num_completed_packets+0x68>
	__asm__ volatile(
    7560:	f38b 8811 	msr	BASEPRI, fp
    7564:	f3bf 8f6f 	isb	sy
			BT_ERR("No connection for handle %u", handle);
    7568:	01aa      	lsls	r2, r5, #6
    756a:	4833      	ldr	r0, [pc, #204]	; (7638 <hci_num_completed_packets+0x128>)
    756c:	f042 0201 	orr.w	r2, r2, #1
    7570:	f015 fc8a 	bl	1ce88 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    7574:	3601      	adds	r6, #1
    7576:	e7d7      	b.n	7528 <hci_num_completed_packets+0x18>
    7578:	f38b 8811 	msr	BASEPRI, fp
    757c:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    7580:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    7584:	b357      	cbz	r7, 75dc <hci_num_completed_packets+0xcc>
	__asm__ volatile(
    7586:	f04f 0320 	mov.w	r3, #32
    758a:	f3ef 8211 	mrs	r2, BASEPRI
    758e:	f383 8811 	msr	BASEPRI, r3
    7592:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    7596:	69e3      	ldr	r3, [r4, #28]
    7598:	b16b      	cbz	r3, 75b6 <hci_num_completed_packets+0xa6>
				conn->pending_no_cb--;
    759a:	3b01      	subs	r3, #1
    759c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    759e:	f382 8811 	msr	BASEPRI, r2
    75a2:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    75a6:	4620      	mov	r0, r4
    75a8:	f002 f870 	bl	968c <bt_conn_get_pkts>
    75ac:	3f01      	subs	r7, #1
    75ae:	f014 fbc9 	bl	1bd44 <z_impl_k_sem_give>
    75b2:	b2bf      	uxth	r7, r7
    75b4:	e7e6      	b.n	7584 <hci_num_completed_packets+0x74>
Z_GENLIST_IS_EMPTY(slist)
    75b6:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    75b8:	b12b      	cbz	r3, 75c6 <hci_num_completed_packets+0xb6>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    75ba:	69a1      	ldr	r1, [r4, #24]
    75bc:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    75be:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    75c0:	428b      	cmp	r3, r1
	list->tail = node;
    75c2:	bf08      	it	eq
    75c4:	61a0      	streq	r0, [r4, #24]
    75c6:	f382 8811 	msr	BASEPRI, r2
    75ca:	f3bf 8f6f 	isb	sy
			if (!node) {
    75ce:	b94b      	cbnz	r3, 75e4 <hci_num_completed_packets+0xd4>
				BT_ERR("packets count mismatch");
    75d0:	01a9      	lsls	r1, r5, #6
    75d2:	481a      	ldr	r0, [pc, #104]	; (763c <hci_num_completed_packets+0x12c>)
    75d4:	f041 0101 	orr.w	r1, r1, #1
    75d8:	f015 fc49 	bl	1ce6e <log_0>
		bt_conn_unref(conn);
    75dc:	4620      	mov	r0, r4
    75de:	f017 ff88 	bl	1f4f2 <bt_conn_unref>
    75e2:	e7c7      	b.n	7574 <hci_num_completed_packets+0x64>
	__asm__ volatile(
    75e4:	f04f 0220 	mov.w	r2, #32
    75e8:	f3ef 8111 	mrs	r1, BASEPRI
    75ec:	f382 8811 	msr	BASEPRI, r2
    75f0:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    75f4:	68da      	ldr	r2, [r3, #12]
    75f6:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    75f8:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    75fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    75fe:	f8c3 900c 	str.w	r9, [r3, #12]
    7602:	b98a      	cbnz	r2, 7628 <hci_num_completed_packets+0x118>
	list->head = node;
    7604:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    7608:	f381 8811 	msr	BASEPRI, r1
    760c:	f3bf 8f6f 	isb	sy
    7610:	2100      	movs	r1, #0
    7612:	f104 0030 	add.w	r0, r4, #48	; 0x30
    7616:	f017 fd70 	bl	1f0fa <atomic_test_and_set_bit>
    761a:	2800      	cmp	r0, #0
    761c:	d1c3      	bne.n	75a6 <hci_num_completed_packets+0x96>
		k_queue_append(&work_q->queue, work);
    761e:	4659      	mov	r1, fp
    7620:	4650      	mov	r0, sl
    7622:	f019 fd13 	bl	2104c <k_queue_append>
    7626:	e7be      	b.n	75a6 <hci_num_completed_packets+0x96>
	parent->next = child;
    7628:	6013      	str	r3, [r2, #0]
	list->tail = node;
    762a:	6263      	str	r3, [r4, #36]	; 0x24
}
    762c:	e7ec      	b.n	7608 <hci_num_completed_packets+0xf8>
    762e:	bf00      	nop
    7630:	00021aac 	.word	0x00021aac
    7634:	00021b6c 	.word	0x00021b6c
    7638:	000243c9 	.word	0x000243c9
    763c:	000243e5 	.word	0x000243e5
    7640:	200012a8 	.word	0x200012a8

00007644 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    7644:	b5f0      	push	{r4, r5, r6, r7, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7646:	4b28      	ldr	r3, [pc, #160]	; (76e8 <le_adv_start_add_conn+0xa4>)
    7648:	b085      	sub	sp, #20
    764a:	4605      	mov	r5, r0
    764c:	460f      	mov	r7, r1
	struct adv_id_check_data check_data = {
		.id = adv->id,
    764e:	7801      	ldrb	r1, [r0, #0]
    7650:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7654:	f017 fd33 	bl	1f0be <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7658:	f010 0f40 	tst.w	r0, #64	; 0x40
    765c:	461a      	mov	r2, r3
    765e:	d008      	beq.n	7672 <le_adv_start_add_conn+0x2e>
    7660:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7664:	f017 fd2b 	bl	1f0be <atomic_get>
    7668:	05c0      	lsls	r0, r0, #23
    766a:	d502      	bpl.n	7672 <le_adv_start_add_conn+0x2e>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    766c:	7e1b      	ldrb	r3, [r3, #24]
    766e:	428b      	cmp	r3, r1
    7670:	d131      	bne.n	76d6 <le_adv_start_add_conn+0x92>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    7672:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    7674:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    7676:	f816 3b0b 	ldrb.w	r3, [r6], #11
    767a:	f882 3037 	strb.w	r3, [r2, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    767e:	4630      	mov	r0, r6
    7680:	2300      	movs	r3, #0
    7682:	9300      	str	r3, [sp, #0]
    7684:	f8cd 3003 	str.w	r3, [sp, #3]
    7688:	f017 fd1f 	bl	1f0ca <bt_addr_le_cmp>
    768c:	4604      	mov	r4, r0
    768e:	7828      	ldrb	r0, [r5, #0]
    7690:	b164      	cbz	r4, 76ac <le_adv_start_add_conn+0x68>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    7692:	4631      	mov	r1, r6
    7694:	f002 fa76 	bl	9b84 <bt_conn_exists_le>
    7698:	4604      	mov	r4, r0
    769a:	b9f8      	cbnz	r0, 76dc <le_adv_start_add_conn+0x98>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    769c:	7828      	ldrb	r0, [r5, #0]
    769e:	4631      	mov	r1, r6
    76a0:	f002 f9d0 	bl	9a44 <bt_conn_add_le>
	if (!conn) {
    76a4:	4605      	mov	r5, r0
    76a6:	b1e0      	cbz	r0, 76e2 <le_adv_start_add_conn+0x9e>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    76a8:	2105      	movs	r1, #5
    76aa:	e00e      	b.n	76ca <le_adv_start_add_conn+0x86>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    76ac:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    76b0:	9302      	str	r3, [sp, #8]
    76b2:	a902      	add	r1, sp, #8
    76b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    76b8:	f8ad 300c 	strh.w	r3, [sp, #12]
    76bc:	f88d 300e 	strb.w	r3, [sp, #14]
    76c0:	f002 f9c0 	bl	9a44 <bt_conn_add_le>
		if (!conn) {
    76c4:	4605      	mov	r5, r0
    76c6:	b160      	cbz	r0, 76e2 <le_adv_start_add_conn+0x9e>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    76c8:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    76ca:	f002 fa81 	bl	9bd0 <bt_conn_set_state>
	*out_conn = conn;
    76ce:	603d      	str	r5, [r7, #0]
	return 0;
}
    76d0:	4620      	mov	r0, r4
    76d2:	b005      	add	sp, #20
    76d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    76d6:	f06f 0422 	mvn.w	r4, #34	; 0x22
    76da:	e7f9      	b.n	76d0 <le_adv_start_add_conn+0x8c>
		return -EINVAL;
    76dc:	f06f 0415 	mvn.w	r4, #21
    76e0:	e7f6      	b.n	76d0 <le_adv_start_add_conn+0x8c>
		return -ENOMEM;
    76e2:	f06f 040b 	mvn.w	r4, #11
    76e6:	e7f3      	b.n	76d0 <le_adv_start_add_conn+0x8c>
    76e8:	20000000 	.word	0x20000000

000076ec <hci_cmd_status>:
{
    76ec:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    76ee:	2104      	movs	r1, #4
{
    76f0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    76f2:	3008      	adds	r0, #8
    76f4:	f019 fa5f 	bl	20bb6 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    76f8:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    76fa:	7801      	ldrb	r1, [r0, #0]
    76fc:	8840      	ldrh	r0, [r0, #2]
    76fe:	4622      	mov	r2, r4
    7700:	f7ff fd5a 	bl	71b8 <hci_cmd_done>
	if (ncmd) {
    7704:	b125      	cbz	r5, 7710 <hci_cmd_status+0x24>
    7706:	4803      	ldr	r0, [pc, #12]	; (7714 <hci_cmd_status+0x28>)
}
    7708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    770c:	f014 bb1a 	b.w	1bd44 <z_impl_k_sem_give>
    7710:	bd38      	pop	{r3, r4, r5, pc}
    7712:	bf00      	nop
    7714:	200000d0 	.word	0x200000d0

00007718 <hci_cmd_complete>:
{
    7718:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    771a:	2103      	movs	r1, #3
{
    771c:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    771e:	3008      	adds	r0, #8
    7720:	f019 fa49 	bl	20bb6 <net_buf_simple_pull_mem>
	status = buf->data[0];
    7724:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    7726:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    7728:	7819      	ldrb	r1, [r3, #0]
    772a:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    772e:	4622      	mov	r2, r4
    7730:	f7ff fd42 	bl	71b8 <hci_cmd_done>
	if (ncmd) {
    7734:	b125      	cbz	r5, 7740 <hci_cmd_complete+0x28>
    7736:	4803      	ldr	r0, [pc, #12]	; (7744 <hci_cmd_complete+0x2c>)
}
    7738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    773c:	f014 bb02 	b.w	1bd44 <z_impl_k_sem_give>
    7740:	bd38      	pop	{r3, r4, r5, pc}
    7742:	bf00      	nop
    7744:	200000d0 	.word	0x200000d0

00007748 <bt_hci_cmd_create>:
{
    7748:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    774c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    7754:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    7756:	4816      	ldr	r0, [pc, #88]	; (77b0 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    7758:	f8df 8058 	ldr.w	r8, [pc, #88]	; 77b4 <bt_hci_cmd_create+0x6c>
{
    775c:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    775e:	f019 f9ad 	bl	20abc <net_buf_alloc_fixed>
    7762:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    7764:	f100 0b08 	add.w	fp, r0, #8
    7768:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    776a:	2700      	movs	r7, #0
    776c:	4658      	mov	r0, fp
    776e:	f019 f9c4 	bl	20afa <net_buf_simple_reserve>
    7772:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    7774:	4620      	mov	r0, r4
    7776:	f012 fc07 	bl	19f88 <net_buf_id>
    777a:	f04f 0a0c 	mov.w	sl, #12
    777e:	fb0a 8000 	mla	r0, sl, r0, r8
    7782:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    7784:	4620      	mov	r0, r4
    7786:	f012 fbff 	bl	19f88 <net_buf_id>
    778a:	fb0a 8000 	mla	r0, sl, r0, r8
    778e:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    7790:	4620      	mov	r0, r4
    7792:	f012 fbf9 	bl	19f88 <net_buf_id>
    7796:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    779a:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    779c:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    779e:	4658      	mov	r0, fp
    77a0:	f019 f9e2 	bl	20b68 <net_buf_simple_add>
	hdr->param_len = param_len;
    77a4:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    77a6:	8005      	strh	r5, [r0, #0]
}
    77a8:	4620      	mov	r0, r4
    77aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    77ae:	bf00      	nop
    77b0:	20000a48 	.word	0x20000a48
    77b4:	20001550 	.word	0x20001550

000077b8 <bt_hci_cmd_send>:
{
    77b8:	b538      	push	{r3, r4, r5, lr}
    77ba:	4605      	mov	r5, r0
	if (!buf) {
    77bc:	460c      	mov	r4, r1
    77be:	b919      	cbnz	r1, 77c8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    77c0:	f7ff ffc2 	bl	7748 <bt_hci_cmd_create>
		if (!buf) {
    77c4:	4604      	mov	r4, r0
    77c6:	b1f0      	cbz	r0, 7806 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    77c8:	f640 4335 	movw	r3, #3125	; 0xc35
    77cc:	429d      	cmp	r5, r3
    77ce:	d114      	bne.n	77fa <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    77d0:	4620      	mov	r0, r4
    77d2:	f7fe ffdd 	bl	6790 <bt_hci_ecc_send>
		if (err) {
    77d6:	4605      	mov	r5, r0
    77d8:	b168      	cbz	r0, 77f6 <bt_hci_cmd_send+0x3e>
    77da:	4b0c      	ldr	r3, [pc, #48]	; (780c <bt_hci_cmd_send+0x54>)
    77dc:	4a0c      	ldr	r2, [pc, #48]	; (7810 <bt_hci_cmd_send+0x58>)
    77de:	1ad2      	subs	r2, r2, r3
    77e0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    77e2:	0192      	lsls	r2, r2, #6
    77e4:	4601      	mov	r1, r0
    77e6:	f042 0201 	orr.w	r2, r2, #1
    77ea:	480a      	ldr	r0, [pc, #40]	; (7814 <bt_hci_cmd_send+0x5c>)
    77ec:	f015 fb4c 	bl	1ce88 <log_1>
			net_buf_unref(buf);
    77f0:	4620      	mov	r0, r4
    77f2:	f012 fc7d 	bl	1a0f0 <net_buf_unref>
}
    77f6:	4628      	mov	r0, r5
    77f8:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    77fa:	4807      	ldr	r0, [pc, #28]	; (7818 <bt_hci_cmd_send+0x60>)
    77fc:	4621      	mov	r1, r4
    77fe:	f019 f980 	bl	20b02 <net_buf_put>
	return 0;
    7802:	2500      	movs	r5, #0
    7804:	e7f7      	b.n	77f6 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    7806:	f06f 0536 	mvn.w	r5, #54	; 0x36
    780a:	e7f4      	b.n	77f6 <bt_hci_cmd_send+0x3e>
    780c:	00021aac 	.word	0x00021aac
    7810:	00021b6c 	.word	0x00021b6c
    7814:	00024386 	.word	0x00024386
    7818:	200000ec 	.word	0x200000ec

0000781c <le_ltk_request>:
{
    781c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    781e:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    7820:	882e      	ldrh	r6, [r5, #0]
    7822:	b2b7      	uxth	r7, r6
{
    7824:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    7826:	4638      	mov	r0, r7
    7828:	f002 f94c 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    782c:	4604      	mov	r4, r0
    782e:	b960      	cbnz	r0, 784a <le_ltk_request+0x2e>
    7830:	4a26      	ldr	r2, [pc, #152]	; (78cc <le_ltk_request+0xb0>)
    7832:	4b27      	ldr	r3, [pc, #156]	; (78d0 <le_ltk_request+0xb4>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7834:	4827      	ldr	r0, [pc, #156]	; (78d4 <le_ltk_request+0xb8>)
    7836:	1ad2      	subs	r2, r2, r3
    7838:	08d2      	lsrs	r2, r2, #3
    783a:	0192      	lsls	r2, r2, #6
    783c:	f042 0201 	orr.w	r2, r2, #1
    7840:	4639      	mov	r1, r7
    7842:	f015 fb21 	bl	1ce88 <log_1>
}
    7846:	b007      	add	sp, #28
    7848:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    784a:	af02      	add	r7, sp, #8
    784c:	f8d5 2002 	ldr.w	r2, [r5, #2]
    7850:	f8d5 3006 	ldr.w	r3, [r5, #6]
    7854:	9701      	str	r7, [sp, #4]
    7856:	8969      	ldrh	r1, [r5, #10]
    7858:	9100      	str	r1, [sp, #0]
    785a:	f019 f84d 	bl	208f8 <bt_smp_request_ltk>
    785e:	b320      	cbz	r0, 78aa <le_ltk_request+0x8e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    7860:	2112      	movs	r1, #18
    7862:	f242 001a 	movw	r0, #8218	; 0x201a
    7866:	f7ff ff6f 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    786a:	4605      	mov	r5, r0
    786c:	b968      	cbnz	r0, 788a <le_ltk_request+0x6e>
    786e:	4917      	ldr	r1, [pc, #92]	; (78cc <le_ltk_request+0xb0>)
    7870:	4b17      	ldr	r3, [pc, #92]	; (78d0 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    7872:	4819      	ldr	r0, [pc, #100]	; (78d8 <le_ltk_request+0xbc>)
    7874:	1ac9      	subs	r1, r1, r3
    7876:	08c9      	lsrs	r1, r1, #3
    7878:	0189      	lsls	r1, r1, #6
    787a:	f041 0101 	orr.w	r1, r1, #1
    787e:	f015 faf6 	bl	1ce6e <log_0>
	bt_conn_unref(conn);
    7882:	4620      	mov	r0, r4
    7884:	f017 fe35 	bl	1f4f2 <bt_conn_unref>
    7888:	e7dd      	b.n	7846 <le_ltk_request+0x2a>
	cp = net_buf_add(buf, sizeof(*cp));
    788a:	2112      	movs	r1, #18
    788c:	3008      	adds	r0, #8
    788e:	f019 f96b 	bl	20b68 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    7892:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    7894:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    7898:	2210      	movs	r2, #16
    789a:	f017 faaa 	bl	1edf2 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    789e:	4629      	mov	r1, r5
    78a0:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    78a4:	f7ff ff88 	bl	77b8 <bt_hci_cmd_send>
    78a8:	e7eb      	b.n	7882 <le_ltk_request+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    78aa:	2102      	movs	r1, #2
    78ac:	f242 001b 	movw	r0, #8219	; 0x201b
    78b0:	f7ff ff4a 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    78b4:	4605      	mov	r5, r0
    78b6:	2800      	cmp	r0, #0
    78b8:	d0d9      	beq.n	786e <le_ltk_request+0x52>
	cp = net_buf_add(buf, sizeof(*cp));
    78ba:	2102      	movs	r1, #2
    78bc:	3008      	adds	r0, #8
    78be:	f019 f953 	bl	20b68 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    78c2:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    78c4:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    78c6:	f242 001b 	movw	r0, #8219	; 0x201b
    78ca:	e7eb      	b.n	78a4 <le_ltk_request+0x88>
    78cc:	00021b6c 	.word	0x00021b6c
    78d0:	00021aac 	.word	0x00021aac
    78d4:	000241d1 	.word	0x000241d1
    78d8:	000243fc 	.word	0x000243fc

000078dc <le_conn_param_neg_reply>:
{
    78dc:	b570      	push	{r4, r5, r6, lr}
    78de:	4606      	mov	r6, r0
    78e0:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    78e2:	f242 0021 	movw	r0, #8225	; 0x2021
    78e6:	2103      	movs	r1, #3
    78e8:	f7ff ff2e 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    78ec:	4604      	mov	r4, r0
    78ee:	b958      	cbnz	r0, 7908 <le_conn_param_neg_reply+0x2c>
    78f0:	490c      	ldr	r1, [pc, #48]	; (7924 <le_conn_param_neg_reply+0x48>)
    78f2:	4b0d      	ldr	r3, [pc, #52]	; (7928 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    78f4:	480d      	ldr	r0, [pc, #52]	; (792c <le_conn_param_neg_reply+0x50>)
    78f6:	1ac9      	subs	r1, r1, r3
    78f8:	08c9      	lsrs	r1, r1, #3
    78fa:	0189      	lsls	r1, r1, #6
}
    78fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    7900:	f041 0101 	orr.w	r1, r1, #1
    7904:	f015 bab3 	b.w	1ce6e <log_0>
	cp = net_buf_add(buf, sizeof(*cp));
    7908:	2103      	movs	r1, #3
    790a:	3008      	adds	r0, #8
    790c:	f019 f92c 	bl	20b68 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    7910:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    7912:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    7914:	4621      	mov	r1, r4
    7916:	f242 0021 	movw	r0, #8225	; 0x2021
}
    791a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    791e:	f7ff bf4b 	b.w	77b8 <bt_hci_cmd_send>
    7922:	bf00      	nop
    7924:	00021b6c 	.word	0x00021b6c
    7928:	00021aac 	.word	0x00021aac
    792c:	00024413 	.word	0x00024413

00007930 <le_conn_param_req>:
{
    7930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    7932:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    7934:	78d9      	ldrb	r1, [r3, #3]
    7936:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    7938:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    793a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    793e:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    7942:	7959      	ldrb	r1, [r3, #5]
    7944:	791a      	ldrb	r2, [r3, #4]
    7946:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    794a:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    794e:	799a      	ldrb	r2, [r3, #6]
    7950:	79d9      	ldrb	r1, [r3, #7]
    7952:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    7956:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    795a:	7a1a      	ldrb	r2, [r3, #8]
    795c:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    795e:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7960:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    7964:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    7966:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    796a:	f002 f8ab 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    796e:	4606      	mov	r6, r0
    7970:	b980      	cbnz	r0, 7994 <le_conn_param_req+0x64>
    7972:	4b20      	ldr	r3, [pc, #128]	; (79f4 <le_conn_param_req+0xc4>)
    7974:	4a20      	ldr	r2, [pc, #128]	; (79f8 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    7976:	4821      	ldr	r0, [pc, #132]	; (79fc <le_conn_param_req+0xcc>)
    7978:	1ad2      	subs	r2, r2, r3
    797a:	08d2      	lsrs	r2, r2, #3
    797c:	0192      	lsls	r2, r2, #6
    797e:	4621      	mov	r1, r4
    7980:	f042 0201 	orr.w	r2, r2, #1
    7984:	f015 fa80 	bl	1ce88 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    7988:	2102      	movs	r1, #2
    798a:	4620      	mov	r0, r4
    798c:	f7ff ffa6 	bl	78dc <le_conn_param_neg_reply>
}
    7990:	b003      	add	sp, #12
    7992:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    7994:	4669      	mov	r1, sp
    7996:	f001 feb1 	bl	96fc <le_param_req>
    799a:	b938      	cbnz	r0, 79ac <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    799c:	211e      	movs	r1, #30
    799e:	4620      	mov	r0, r4
    79a0:	f7ff ff9c 	bl	78dc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    79a4:	4630      	mov	r0, r6
    79a6:	f017 fda4 	bl	1f4f2 <bt_conn_unref>
    79aa:	e7f1      	b.n	7990 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    79ac:	210e      	movs	r1, #14
    79ae:	f242 0020 	movw	r0, #8224	; 0x2020
    79b2:	f7ff fec9 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    79b6:	4605      	mov	r5, r0
    79b8:	2800      	cmp	r0, #0
    79ba:	d0f3      	beq.n	79a4 <le_conn_param_req+0x74>
	cp = net_buf_add(buf, sizeof(*cp));
    79bc:	210e      	movs	r1, #14
    79be:	3008      	adds	r0, #8
    79c0:	f019 f8d2 	bl	20b68 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    79c4:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
    79c6:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
    79c8:	2100      	movs	r1, #0
    79ca:	f017 fa3d 	bl	1ee48 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    79ce:	f8bd 3000 	ldrh.w	r3, [sp]
    79d2:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    79d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    79d8:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    79da:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    79de:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    79e0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    79e4:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    79e6:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    79e8:	4629      	mov	r1, r5
    79ea:	f242 0020 	movw	r0, #8224	; 0x2020
    79ee:	f7ff fee3 	bl	77b8 <bt_hci_cmd_send>
    79f2:	e7d7      	b.n	79a4 <le_conn_param_req+0x74>
    79f4:	00021aac 	.word	0x00021aac
    79f8:	00021b6c 	.word	0x00021b6c
    79fc:	000241d1 	.word	0x000241d1

00007a00 <bt_hci_cmd_send_sync>:
{
    7a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a04:	4607      	mov	r7, r0
    7a06:	b086      	sub	sp, #24
    7a08:	4615      	mov	r5, r2
	if (!buf) {
    7a0a:	460c      	mov	r4, r1
    7a0c:	b921      	cbnz	r1, 7a18 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    7a0e:	f7ff fe9b 	bl	7748 <bt_hci_cmd_create>
		if (!buf) {
    7a12:	4604      	mov	r4, r0
    7a14:	2800      	cmp	r0, #0
    7a16:	d055      	beq.n	7ac4 <bt_hci_cmd_send_sync+0xc4>
	return z_impl_k_sem_init(sem, initial_count, limit);
    7a18:	2201      	movs	r2, #1
    7a1a:	2100      	movs	r1, #0
    7a1c:	4668      	mov	r0, sp
    7a1e:	f019 fc88 	bl	21332 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    7a22:	4620      	mov	r0, r4
    7a24:	f012 fab0 	bl	19f88 <net_buf_id>
    7a28:	4e28      	ldr	r6, [pc, #160]	; (7acc <bt_hci_cmd_send_sync+0xcc>)
    7a2a:	230c      	movs	r3, #12
    7a2c:	fb03 6000 	mla	r0, r3, r0, r6
    7a30:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    7a34:	4620      	mov	r0, r4
    7a36:	f019 f871 	bl	20b1c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    7a3a:	4825      	ldr	r0, [pc, #148]	; (7ad0 <bt_hci_cmd_send_sync+0xd0>)
    7a3c:	4621      	mov	r1, r4
    7a3e:	f019 f860 	bl	20b02 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    7a42:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    7a46:	2300      	movs	r3, #0
    7a48:	4668      	mov	r0, sp
    7a4a:	f014 f9a1 	bl	1bd90 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    7a4e:	4680      	mov	r8, r0
    7a50:	b180      	cbz	r0, 7a74 <bt_hci_cmd_send_sync+0x74>
    7a52:	4a20      	ldr	r2, [pc, #128]	; (7ad4 <bt_hci_cmd_send_sync+0xd4>)
    7a54:	4920      	ldr	r1, [pc, #128]	; (7ad8 <bt_hci_cmd_send_sync+0xd8>)
    7a56:	4821      	ldr	r0, [pc, #132]	; (7adc <bt_hci_cmd_send_sync+0xdc>)
    7a58:	f240 1371 	movw	r3, #369	; 0x171
    7a5c:	f014 feb1 	bl	1c7c2 <printk>
    7a60:	481f      	ldr	r0, [pc, #124]	; (7ae0 <bt_hci_cmd_send_sync+0xe0>)
    7a62:	4641      	mov	r1, r8
    7a64:	f014 fead 	bl	1c7c2 <printk>
    7a68:	4040      	eors	r0, r0
    7a6a:	f380 8811 	msr	BASEPRI, r0
    7a6e:	f04f 0003 	mov.w	r0, #3
    7a72:	df02      	svc	2
	status = cmd(buf)->status;
    7a74:	4620      	mov	r0, r4
    7a76:	f012 fa87 	bl	19f88 <net_buf_id>
    7a7a:	230c      	movs	r3, #12
    7a7c:	4343      	muls	r3, r0
    7a7e:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    7a80:	b1be      	cbz	r6, 7ab2 <bt_hci_cmd_send_sync+0xb2>
    7a82:	4a18      	ldr	r2, [pc, #96]	; (7ae4 <bt_hci_cmd_send_sync+0xe4>)
    7a84:	4b18      	ldr	r3, [pc, #96]	; (7ae8 <bt_hci_cmd_send_sync+0xe8>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    7a86:	4819      	ldr	r0, [pc, #100]	; (7aec <bt_hci_cmd_send_sync+0xec>)
    7a88:	1a9b      	subs	r3, r3, r2
    7a8a:	08db      	lsrs	r3, r3, #3
    7a8c:	019b      	lsls	r3, r3, #6
    7a8e:	f043 0302 	orr.w	r3, r3, #2
    7a92:	4632      	mov	r2, r6
    7a94:	4639      	mov	r1, r7
    7a96:	f015 fa0b 	bl	1ceb0 <log_2>
		net_buf_unref(buf);
    7a9a:	4620      	mov	r0, r4
    7a9c:	f012 fb28 	bl	1a0f0 <net_buf_unref>
			return -EIO;
    7aa0:	2e09      	cmp	r6, #9
    7aa2:	bf0c      	ite	eq
    7aa4:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    7aa8:	f06f 0004 	mvnne.w	r0, #4
}
    7aac:	b006      	add	sp, #24
    7aae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    7ab2:	b115      	cbz	r5, 7aba <bt_hci_cmd_send_sync+0xba>
		*rsp = buf;
    7ab4:	602c      	str	r4, [r5, #0]
	return 0;
    7ab6:	4630      	mov	r0, r6
    7ab8:	e7f8      	b.n	7aac <bt_hci_cmd_send_sync+0xac>
		net_buf_unref(buf);
    7aba:	4620      	mov	r0, r4
    7abc:	f012 fb18 	bl	1a0f0 <net_buf_unref>
	return 0;
    7ac0:	4628      	mov	r0, r5
    7ac2:	e7f3      	b.n	7aac <bt_hci_cmd_send_sync+0xac>
			return -ENOBUFS;
    7ac4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7ac8:	e7f0      	b.n	7aac <bt_hci_cmd_send_sync+0xac>
    7aca:	bf00      	nop
    7acc:	20001550 	.word	0x20001550
    7ad0:	200000ec 	.word	0x200000ec
    7ad4:	00024311 	.word	0x00024311
    7ad8:	00024345 	.word	0x00024345
    7adc:	0002434e 	.word	0x0002434e
    7ae0:	0002442d 	.word	0x0002442d
    7ae4:	00021aac 	.word	0x00021aac
    7ae8:	00021b6c 	.word	0x00021b6c
    7aec:	0002444d 	.word	0x0002444d

00007af0 <set_random_address>:
{
    7af0:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    7af2:	4e15      	ldr	r6, [pc, #84]	; (7b48 <set_random_address+0x58>)
    7af4:	2206      	movs	r2, #6
    7af6:	f106 0131 	add.w	r1, r6, #49	; 0x31
    7afa:	4605      	mov	r5, r0
    7afc:	f017 f969 	bl	1edd2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    7b00:	4604      	mov	r4, r0
    7b02:	b1d8      	cbz	r0, 7b3c <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    7b04:	2106      	movs	r1, #6
    7b06:	f242 0005 	movw	r0, #8197	; 0x2005
    7b0a:	f7ff fe1d 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    7b0e:	4604      	mov	r4, r0
    7b10:	b1b0      	cbz	r0, 7b40 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    7b12:	2206      	movs	r2, #6
    7b14:	4629      	mov	r1, r5
    7b16:	3008      	adds	r0, #8
    7b18:	f019 f82c 	bl	20b74 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    7b1c:	4621      	mov	r1, r4
    7b1e:	2200      	movs	r2, #0
    7b20:	f242 0005 	movw	r0, #8197	; 0x2005
    7b24:	f7ff ff6c 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    7b28:	4604      	mov	r4, r0
    7b2a:	b938      	cbnz	r0, 7b3c <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    7b2c:	4629      	mov	r1, r5
    7b2e:	f106 0031 	add.w	r0, r6, #49	; 0x31
    7b32:	f017 facd 	bl	1f0d0 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    7b36:	2301      	movs	r3, #1
    7b38:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    7b3c:	4620      	mov	r0, r4
    7b3e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    7b40:	f06f 0436 	mvn.w	r4, #54	; 0x36
    7b44:	e7fa      	b.n	7b3c <set_random_address+0x4c>
    7b46:	bf00      	nop
    7b48:	20000000 	.word	0x20000000

00007b4c <le_set_private_addr>:
{
    7b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    7b4e:	4d16      	ldr	r5, [pc, #88]	; (7ba8 <le_set_private_addr+0x5c>)
    7b50:	4603      	mov	r3, r0
    7b52:	f105 0098 	add.w	r0, r5, #152	; 0x98
    7b56:	f017 fab2 	bl	1f0be <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    7b5a:	04c2      	lsls	r2, r0, #19
    7b5c:	d422      	bmi.n	7ba4 <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    7b5e:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    7b62:	4669      	mov	r1, sp
    7b64:	f500 7084 	add.w	r0, r0, #264	; 0x108
    7b68:	f017 f9c6 	bl	1eef8 <bt_rpa_create>
	if (!err) {
    7b6c:	4604      	mov	r4, r0
    7b6e:	b950      	cbnz	r0, 7b86 <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    7b70:	4668      	mov	r0, sp
    7b72:	f7ff ffbd 	bl	7af0 <set_random_address>
		if (!err) {
    7b76:	4604      	mov	r4, r0
    7b78:	b928      	cbnz	r0, 7b86 <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7b7e:	f105 0098 	add.w	r0, r5, #152	; 0x98
    7b82:	f017 faab 	bl	1f0dc <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    7b86:	4809      	ldr	r0, [pc, #36]	; (7bac <le_set_private_addr+0x60>)
    7b88:	210d      	movs	r1, #13
    7b8a:	f017 fab6 	bl	1f0fa <atomic_test_and_set_bit>
    7b8e:	b930      	cbnz	r0, 7b9e <le_set_private_addr+0x52>
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					k_timeout_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7b90:	4907      	ldr	r1, [pc, #28]	; (7bb0 <le_set_private_addr+0x64>)
    7b92:	4808      	ldr	r0, [pc, #32]	; (7bb4 <le_set_private_addr+0x68>)
    7b94:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    7b98:	2300      	movs	r3, #0
    7b9a:	f014 fa1b 	bl	1bfd4 <k_delayed_work_submit_to_queue>
}
    7b9e:	4620      	mov	r0, r4
    7ba0:	b003      	add	sp, #12
    7ba2:	bd30      	pop	{r4, r5, pc}
		return 0;
    7ba4:	2400      	movs	r4, #0
    7ba6:	e7fa      	b.n	7b9e <le_set_private_addr+0x52>
    7ba8:	20000000 	.word	0x20000000
    7bac:	20000098 	.word	0x20000098
    7bb0:	20000118 	.word	0x20000118
    7bb4:	200012a8 	.word	0x200012a8

00007bb8 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    7bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bba:	f001 0304 	and.w	r3, r1, #4
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7bbe:	f011 0101 	ands.w	r1, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    7bc2:	4605      	mov	r5, r0
    7bc4:	4614      	mov	r4, r2
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    7bc6:	d020      	beq.n	7c0a <le_adv_set_random_addr.isra.0+0x52>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7bc8:	b953      	cbnz	r3, 7be0 <le_adv_set_random_addr.isra.0+0x28>
		return le_set_private_addr(adv->id);
    7bca:	f7ff ffbf 	bl	7b4c <le_set_private_addr>
			if (err) {
    7bce:	b990      	cbnz	r0, 7bf6 <le_adv_set_random_addr.isra.0+0x3e>
			if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    7bd0:	4b19      	ldr	r3, [pc, #100]	; (7c38 <le_adv_set_random_addr.isra.0+0x80>)
    7bd2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    7bd6:	065b      	lsls	r3, r3, #25
    7bd8:	d52c      	bpl.n	7c34 <le_adv_set_random_addr.isra.0+0x7c>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    7bda:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7bdc:	7023      	strb	r3, [r4, #0]
		if (err) {
    7bde:	e00a      	b.n	7bf6 <le_adv_set_random_addr.isra.0+0x3e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7be0:	4e15      	ldr	r6, [pc, #84]	; (7c38 <le_adv_set_random_addr.isra.0+0x80>)
    7be2:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    7be6:	00c7      	lsls	r7, r0, #3
    7be8:	5cf3      	ldrb	r3, [r6, r3]
    7bea:	2b01      	cmp	r3, #1
    7bec:	d004      	beq.n	7bf8 <le_adv_set_random_addr.isra.0+0x40>
			*own_addr_type = id_addr->type;
    7bee:	1b7d      	subs	r5, r7, r5
	return 0;
    7bf0:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
    7bf2:	5d73      	ldrb	r3, [r6, r5]
    7bf4:	7023      	strb	r3, [r4, #0]
}
    7bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = set_adv_random_address(adv, &id_addr->a);
    7bf8:	2007      	movs	r0, #7
    7bfa:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    7bfe:	4430      	add	r0, r6
    7c00:	f7ff ff76 	bl	7af0 <set_random_address>
				if (err) {
    7c04:	2800      	cmp	r0, #0
    7c06:	d0f2      	beq.n	7bee <le_adv_set_random_addr.isra.0+0x36>
    7c08:	e7f5      	b.n	7bf6 <le_adv_set_random_addr.isra.0+0x3e>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    7c0a:	b18b      	cbz	r3, 7c30 <le_adv_set_random_addr.isra.0+0x78>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    7c0c:	4e0a      	ldr	r6, [pc, #40]	; (7c38 <le_adv_set_random_addr.isra.0+0x80>)
    7c0e:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    7c12:	00c7      	lsls	r7, r0, #3
    7c14:	5cf3      	ldrb	r3, [r6, r3]
    7c16:	2b01      	cmp	r3, #1
    7c18:	d108      	bne.n	7c2c <le_adv_set_random_addr.isra.0+0x74>
				err = set_adv_random_address(adv, &id_addr->a);
    7c1a:	2007      	movs	r0, #7
    7c1c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    7c20:	4430      	add	r0, r6
    7c22:	f7ff ff65 	bl	7af0 <set_random_address>
			*own_addr_type = id_addr->type;
    7c26:	1b7d      	subs	r5, r7, r5
    7c28:	5d73      	ldrb	r3, [r6, r5]
    7c2a:	e7d7      	b.n	7bdc <le_adv_set_random_addr.isra.0+0x24>
	int err = 0;
    7c2c:	4608      	mov	r0, r1
    7c2e:	e7fa      	b.n	7c26 <le_adv_set_random_addr.isra.0+0x6e>
		return le_set_private_addr(adv->id);
    7c30:	f7ff ff8c 	bl	7b4c <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    7c34:	2301      	movs	r3, #1
    7c36:	e7d1      	b.n	7bdc <le_adv_set_random_addr.isra.0+0x24>
    7c38:	20000000 	.word	0x20000000

00007c3c <set_le_adv_enable_legacy>:
{
    7c3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7c3e:	4606      	mov	r6, r0
    7c40:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    7c42:	f242 000a 	movw	r0, #8202	; 0x200a
    7c46:	2101      	movs	r1, #1
    7c48:	f7ff fd7e 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    7c4c:	4604      	mov	r4, r0
    7c4e:	b1e8      	cbz	r0, 7c8c <set_le_adv_enable_legacy+0x50>
	if (enable) {
    7c50:	3008      	adds	r0, #8
    7c52:	b1cd      	cbz	r5, 7c88 <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    7c54:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7c56:	f018 ff96 	bl	20b86 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    7c5a:	3614      	adds	r6, #20
	state->bit = bit;
    7c5c:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    7c5e:	4620      	mov	r0, r4
	state->bit = bit;
    7c60:	9302      	str	r3, [sp, #8]
	state->target = target;
    7c62:	9601      	str	r6, [sp, #4]
	state->val = val;
    7c64:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    7c68:	f012 f98e 	bl	19f88 <net_buf_id>
    7c6c:	4b09      	ldr	r3, [pc, #36]	; (7c94 <set_le_adv_enable_legacy+0x58>)
    7c6e:	220c      	movs	r2, #12
    7c70:	fb02 3000 	mla	r0, r2, r0, r3
    7c74:	ab01      	add	r3, sp, #4
    7c76:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    7c78:	2200      	movs	r2, #0
    7c7a:	4621      	mov	r1, r4
    7c7c:	f242 000a 	movw	r0, #8202	; 0x200a
    7c80:	f7ff febe 	bl	7a00 <bt_hci_cmd_send_sync>
}
    7c84:	b004      	add	sp, #16
    7c86:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    7c88:	4629      	mov	r1, r5
    7c8a:	e7e4      	b.n	7c56 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    7c8c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7c90:	e7f8      	b.n	7c84 <set_le_adv_enable_legacy+0x48>
    7c92:	bf00      	nop
    7c94:	20001550 	.word	0x20001550

00007c98 <le_update_private_addr>:
{
    7c98:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7c9a:	4b19      	ldr	r3, [pc, #100]	; (7d00 <le_update_private_addr+0x68>)
    7c9c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7ca0:	f017 fa0d 	bl	1f0be <atomic_get>
		if (adv &&
    7ca4:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    7ca6:	f3c0 1580 	ubfx	r5, r0, #6, #1
    7caa:	d412      	bmi.n	7cd2 <le_update_private_addr+0x3a>
	uint8_t id = BT_ID_DEFAULT;
    7cac:	2400      	movs	r4, #0
	bool adv_enabled = false;
    7cae:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    7cb0:	4620      	mov	r0, r4
    7cb2:	f7ff ff4b 	bl	7b4c <le_set_private_addr>
	if (err) {
    7cb6:	4601      	mov	r1, r0
    7cb8:	b1c8      	cbz	r0, 7cee <le_update_private_addr+0x56>
    7cba:	4b12      	ldr	r3, [pc, #72]	; (7d04 <le_update_private_addr+0x6c>)
    7cbc:	4a12      	ldr	r2, [pc, #72]	; (7d08 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
    7cbe:	4813      	ldr	r0, [pc, #76]	; (7d0c <le_update_private_addr+0x74>)
    7cc0:	1ad2      	subs	r2, r2, r3
    7cc2:	08d2      	lsrs	r2, r2, #3
    7cc4:	0192      	lsls	r2, r2, #6
}
    7cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    7cca:	f042 0202 	orr.w	r2, r2, #2
    7cce:	f015 b8db 	b.w	1ce88 <log_1>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7cd2:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    7cd6:	f017 f9f2 	bl	1f0be <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7cda:	0502      	lsls	r2, r0, #20
    7cdc:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    7ce0:	d4e4      	bmi.n	7cac <le_update_private_addr+0x14>
			id = adv->id;
    7ce2:	4618      	mov	r0, r3
    7ce4:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    7ce8:	f7ff ffa8 	bl	7c3c <set_le_adv_enable_legacy>
    7cec:	e7e0      	b.n	7cb0 <le_update_private_addr+0x18>
	if (adv_enabled) {
    7cee:	b12d      	cbz	r5, 7cfc <le_update_private_addr+0x64>
}
    7cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    7cf4:	4806      	ldr	r0, [pc, #24]	; (7d10 <le_update_private_addr+0x78>)
    7cf6:	2101      	movs	r1, #1
    7cf8:	f7ff bfa0 	b.w	7c3c <set_le_adv_enable_legacy>
}
    7cfc:	bd38      	pop	{r3, r4, r5, pc}
    7cfe:	bf00      	nop
    7d00:	20000000 	.word	0x20000000
    7d04:	00021aac 	.word	0x00021aac
    7d08:	00021b6c 	.word	0x00021b6c
    7d0c:	00024469 	.word	0x00024469
    7d10:	20000018 	.word	0x20000018

00007d14 <rpa_timeout>:
{
    7d14:	b508      	push	{r3, lr}
	le_rpa_invalidate();
    7d16:	f7ff fbdf 	bl	74d8 <le_rpa_invalidate>
    7d1a:	480f      	ldr	r0, [pc, #60]	; (7d58 <rpa_timeout+0x44>)
    7d1c:	f017 f9cf 	bl	1f0be <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7d20:	0643      	lsls	r3, r0, #25
    7d22:	d40f      	bmi.n	7d44 <rpa_timeout+0x30>
    7d24:	480d      	ldr	r0, [pc, #52]	; (7d5c <rpa_timeout+0x48>)
    7d26:	f017 f9ca 	bl	1f0be <atomic_get>
	if (!(adv_enabled ||
    7d2a:	0500      	lsls	r0, r0, #20
    7d2c:	d40f      	bmi.n	7d4e <rpa_timeout+0x3a>
    7d2e:	480b      	ldr	r0, [pc, #44]	; (7d5c <rpa_timeout+0x48>)
    7d30:	f017 f9c5 	bl	1f0be <atomic_get>
    7d34:	0682      	lsls	r2, r0, #26
    7d36:	d504      	bpl.n	7d42 <rpa_timeout+0x2e>
    7d38:	4808      	ldr	r0, [pc, #32]	; (7d5c <rpa_timeout+0x48>)
    7d3a:	f017 f9c0 	bl	1f0be <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    7d3e:	0603      	lsls	r3, r0, #24
    7d40:	d405      	bmi.n	7d4e <rpa_timeout+0x3a>
}
    7d42:	bd08      	pop	{r3, pc}
    7d44:	4804      	ldr	r0, [pc, #16]	; (7d58 <rpa_timeout+0x44>)
    7d46:	f017 f9ba 	bl	1f0be <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    7d4a:	0501      	lsls	r1, r0, #20
    7d4c:	d4ea      	bmi.n	7d24 <rpa_timeout+0x10>
}
    7d4e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
    7d52:	f7ff bfa1 	b.w	7c98 <le_update_private_addr>
    7d56:	bf00      	nop
    7d58:	2000002c 	.word	0x2000002c
    7d5c:	20000098 	.word	0x20000098

00007d60 <hci_le_read_max_data_len>:
{
    7d60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7d62:	4606      	mov	r6, r0
    7d64:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    7d66:	aa01      	add	r2, sp, #4
    7d68:	2100      	movs	r1, #0
    7d6a:	f242 002f 	movw	r0, #8239	; 0x202f
    7d6e:	f7ff fe47 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    7d72:	4604      	mov	r4, r0
    7d74:	b160      	cbz	r0, 7d90 <hci_le_read_max_data_len+0x30>
    7d76:	490c      	ldr	r1, [pc, #48]	; (7da8 <hci_le_read_max_data_len+0x48>)
    7d78:	4b0c      	ldr	r3, [pc, #48]	; (7dac <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    7d7a:	480d      	ldr	r0, [pc, #52]	; (7db0 <hci_le_read_max_data_len+0x50>)
    7d7c:	1ac9      	subs	r1, r1, r3
    7d7e:	08c9      	lsrs	r1, r1, #3
    7d80:	0189      	lsls	r1, r1, #6
    7d82:	f041 0101 	orr.w	r1, r1, #1
    7d86:	f015 f872 	bl	1ce6e <log_0>
}
    7d8a:	4620      	mov	r0, r4
    7d8c:	b002      	add	sp, #8
    7d8e:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    7d90:	9801      	ldr	r0, [sp, #4]
    7d92:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    7d94:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    7d98:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    7d9a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    7d9e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    7da0:	f012 f9a6 	bl	1a0f0 <net_buf_unref>
	return 0;
    7da4:	e7f1      	b.n	7d8a <hci_le_read_max_data_len+0x2a>
    7da6:	bf00      	nop
    7da8:	00021b6c 	.word	0x00021b6c
    7dac:	00021aac 	.word	0x00021aac
    7db0:	0002448b 	.word	0x0002448b

00007db4 <hci_id_add>:
{
    7db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7db8:	4605      	mov	r5, r0
    7dba:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    7dbc:	f242 0027 	movw	r0, #8231	; 0x2027
    7dc0:	2127      	movs	r1, #39	; 0x27
{
    7dc2:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    7dc4:	f7ff fcc0 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    7dc8:	4604      	mov	r4, r0
    7dca:	b1f0      	cbz	r0, 7e0a <hci_id_add+0x56>
	cp = net_buf_add(buf, sizeof(*cp));
    7dcc:	2127      	movs	r1, #39	; 0x27
    7dce:	3008      	adds	r0, #8
    7dd0:	f018 feca 	bl	20b68 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7dd4:	4641      	mov	r1, r8
	cp = net_buf_add(buf, sizeof(*cp));
    7dd6:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    7dd8:	f017 f97d 	bl	1f0d6 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    7ddc:	4639      	mov	r1, r7
    7dde:	2210      	movs	r2, #16
    7de0:	1df0      	adds	r0, r6, #7
    7de2:	f017 f806 	bl	1edf2 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    7de6:	490b      	ldr	r1, [pc, #44]	; (7e14 <hci_id_add+0x60>)
    7de8:	2210      	movs	r2, #16
    7dea:	fb02 1105 	mla	r1, r2, r5, r1
    7dee:	f501 7184 	add.w	r1, r1, #264	; 0x108
    7df2:	f106 0017 	add.w	r0, r6, #23
    7df6:	f016 fffc 	bl	1edf2 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7dfa:	4621      	mov	r1, r4
    7dfc:	2200      	movs	r2, #0
}
    7dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    7e02:	f242 0027 	movw	r0, #8231	; 0x2027
    7e06:	f7ff bdfb 	b.w	7a00 <bt_hci_cmd_send_sync>
}
    7e0a:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7e12:	bf00      	nop
    7e14:	20000000 	.word	0x20000000

00007e18 <hci_set_ad>:
{
    7e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7e1c:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7e1e:	2120      	movs	r1, #32
{
    7e20:	4682      	mov	sl, r0
    7e22:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    7e24:	f7ff fc90 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    7e28:	4606      	mov	r6, r0
    7e2a:	2800      	cmp	r0, #0
    7e2c:	d05b      	beq.n	7ee6 <hci_set_ad+0xce>
	set_data = net_buf_add(buf, sizeof(*set_data));
    7e2e:	2120      	movs	r1, #32
    7e30:	3008      	adds	r0, #8
    7e32:	f018 fe99 	bl	20b68 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    7e36:	2220      	movs	r2, #32
    7e38:	2100      	movs	r1, #0
	set_data = net_buf_add(buf, sizeof(*set_data));
    7e3a:	4681      	mov	r9, r0
	(void)memset(set_data, 0, sizeof(*set_data));
    7e3c:	f017 f804 	bl	1ee48 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    7e40:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    7e44:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    7e48:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    7e4a:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    7e4c:	f8d4 8000 	ldr.w	r8, [r4]
    7e50:	2300      	movs	r3, #0
    7e52:	6862      	ldr	r2, [r4, #4]
    7e54:	4293      	cmp	r3, r2
    7e56:	d30d      	bcc.n	7e74 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    7e58:	9b00      	ldr	r3, [sp, #0]
    7e5a:	3408      	adds	r4, #8
    7e5c:	429c      	cmp	r4, r3
    7e5e:	d1f5      	bne.n	7e4c <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7e60:	2200      	movs	r2, #0
    7e62:	4631      	mov	r1, r6
    7e64:	4650      	mov	r0, sl
	*data_len = set_data_len;
    7e66:	f889 5000 	strb.w	r5, [r9]
}
    7e6a:	b003      	add	sp, #12
    7e6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    7e70:	f7ff bdc6 	b.w	7a00 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    7e74:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    7e78:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    7e7c:	1ca8      	adds	r0, r5, #2
    7e7e:	1881      	adds	r1, r0, r2
    7e80:	291f      	cmp	r1, #31
    7e82:	d919      	bls.n	7eb8 <hci_set_ad+0xa0>
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7e84:	f1bc 0f09 	cmp.w	ip, #9
				len = set_data_len_max - (set_data_len + 2);
    7e88:	f1c5 021d 	rsb	r2, r5, #29
				if (type != BT_DATA_NAME_COMPLETE || !len) {
    7e8c:	d100      	bne.n	7e90 <hci_set_ad+0x78>
    7e8e:	b98a      	cbnz	r2, 7eb4 <hci_set_ad+0x9c>
    7e90:	4b16      	ldr	r3, [pc, #88]	; (7eec <hci_set_ad+0xd4>)
    7e92:	4917      	ldr	r1, [pc, #92]	; (7ef0 <hci_set_ad+0xd8>)
					BT_ERR("Too big advertising data");
    7e94:	4817      	ldr	r0, [pc, #92]	; (7ef4 <hci_set_ad+0xdc>)
    7e96:	1ac9      	subs	r1, r1, r3
    7e98:	08c9      	lsrs	r1, r1, #3
    7e9a:	0189      	lsls	r1, r1, #6
    7e9c:	f041 0101 	orr.w	r1, r1, #1
    7ea0:	f014 ffe5 	bl	1ce6e <log_0>
		net_buf_unref(buf);
    7ea4:	4630      	mov	r0, r6
    7ea6:	f012 f923 	bl	1a0f0 <net_buf_unref>
					return -EINVAL;
    7eaa:	f06f 0015 	mvn.w	r0, #21
}
    7eae:	b003      	add	sp, #12
    7eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    7eb4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    7eb8:	b2d7      	uxtb	r7, r2
    7eba:	1c79      	adds	r1, r7, #1
    7ebc:	f80b 1005 	strb.w	r1, [fp, r5]
    7ec0:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    7ec2:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    7ec4:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    7ec8:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    7ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
    7ed0:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    7ed2:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    7ed4:	f016 ff8d 	bl	1edf2 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    7ed8:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    7eda:	443d      	add	r5, r7
    7edc:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    7ede:	3301      	adds	r3, #1
    7ee0:	f108 0808 	add.w	r8, r8, #8
    7ee4:	e7b5      	b.n	7e52 <hci_set_ad+0x3a>
		return -ENOBUFS;
    7ee6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    7eea:	e7e0      	b.n	7eae <hci_set_ad+0x96>
    7eec:	00021aac 	.word	0x00021aac
    7ef0:	00021b6c 	.word	0x00021b6c
    7ef4:	000244ab 	.word	0x000244ab

00007ef8 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    7ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7efc:	b086      	sub	sp, #24
    7efe:	4604      	mov	r4, r0
    7f00:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    7f04:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    7f08:	460f      	mov	r7, r1
    7f0a:	4615      	mov	r5, r2
	struct bt_ad d[2] = {};
    7f0c:	2100      	movs	r1, #0
    7f0e:	2210      	movs	r2, #16
    7f10:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    7f12:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
    7f14:	f016 ff98 	bl	1ee48 <memset>
	if (use_name) {
    7f18:	f1b8 0f00 	cmp.w	r8, #0
    7f1c:	d00e      	beq.n	7f3c <le_adv_update.constprop.0+0x44>
		if ((ad && ad_has_name(ad, ad_len)) ||
    7f1e:	bbac      	cbnz	r4, 7f8c <le_adv_update.constprop.0+0x94>
    7f20:	2d00      	cmp	r5, #0
    7f22:	d13e      	bne.n	7fa2 <le_adv_update.constprop.0+0xaa>
		data = (struct bt_data)BT_DATA(
    7f24:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 7fdc <le_adv_update.constprop.0+0xe4>
    7f28:	4650      	mov	r0, sl
    7f2a:	f016 ff30 	bl	1ed8e <strlen>
    7f2e:	2309      	movs	r3, #9
    7f30:	f88d 3000 	strb.w	r3, [sp]
    7f34:	f88d 0001 	strb.w	r0, [sp, #1]
    7f38:	f8cd a004 	str.w	sl, [sp, #4]
		d[0].len = ad_len;
    7f3c:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    7f40:	f1b8 0f00 	cmp.w	r8, #0
    7f44:	d02f      	beq.n	7fa6 <le_adv_update.constprop.0+0xae>
    7f46:	f1b9 0f00 	cmp.w	r9, #0
    7f4a:	d12c      	bne.n	7fa6 <le_adv_update.constprop.0+0xae>
			d[1].len = 1;
    7f4c:	2301      	movs	r3, #1
			d[1].data = &data;
    7f4e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    7f52:	9305      	str	r3, [sp, #20]
			d_len = 2;
    7f54:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    7f56:	a902      	add	r1, sp, #8
    7f58:	f242 0008 	movw	r0, #8200	; 0x2008
    7f5c:	f7ff ff5c 	bl	7e18 <hci_set_ad>
		if (err) {
    7f60:	4604      	mov	r4, r0
    7f62:	b930      	cbnz	r0, 7f72 <le_adv_update.constprop.0+0x7a>
	if (scannable) {
    7f64:	f1b9 0f00 	cmp.w	r9, #0
    7f68:	d11f      	bne.n	7faa <le_adv_update.constprop.0+0xb2>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    7f6a:	481b      	ldr	r0, [pc, #108]	; (7fd8 <le_adv_update.constprop.0+0xe0>)
    7f6c:	2104      	movs	r1, #4
    7f6e:	f017 f8b5 	bl	1f0dc <atomic_or>
}
    7f72:	4620      	mov	r0, r4
    7f74:	b006      	add	sp, #24
    7f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    7f7a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    7f7e:	3a08      	subs	r2, #8
    7f80:	2a01      	cmp	r2, #1
    7f82:	d925      	bls.n	7fd0 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    7f84:	3301      	adds	r3, #1
    7f86:	429f      	cmp	r7, r3
    7f88:	d1f7      	bne.n	7f7a <le_adv_update.constprop.0+0x82>
    7f8a:	e7c9      	b.n	7f20 <le_adv_update.constprop.0+0x28>
    7f8c:	2300      	movs	r3, #0
    7f8e:	e7fa      	b.n	7f86 <le_adv_update.constprop.0+0x8e>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    7f90:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    7f94:	3a08      	subs	r2, #8
    7f96:	2a01      	cmp	r2, #1
    7f98:	d91a      	bls.n	7fd0 <le_adv_update.constprop.0+0xd8>
	for (i = 0; i < ad_len; i++) {
    7f9a:	3301      	adds	r3, #1
    7f9c:	429e      	cmp	r6, r3
    7f9e:	d1f7      	bne.n	7f90 <le_adv_update.constprop.0+0x98>
    7fa0:	e7c0      	b.n	7f24 <le_adv_update.constprop.0+0x2c>
    7fa2:	2300      	movs	r3, #0
    7fa4:	e7fa      	b.n	7f9c <le_adv_update.constprop.0+0xa4>
		d_len = 1;
    7fa6:	2201      	movs	r2, #1
    7fa8:	e7d5      	b.n	7f56 <le_adv_update.constprop.0+0x5e>
		d[0].len = sd_len;
    7faa:	e9cd 5602 	strd	r5, r6, [sp, #8]
		if (use_name) {
    7fae:	2201      	movs	r2, #1
    7fb0:	f1b8 0f00 	cmp.w	r8, #0
    7fb4:	d003      	beq.n	7fbe <le_adv_update.constprop.0+0xc6>
			d[1].len = 1;
    7fb6:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    7fb8:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    7fbc:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    7fbe:	a902      	add	r1, sp, #8
    7fc0:	f242 0009 	movw	r0, #8201	; 0x2009
    7fc4:	f7ff ff28 	bl	7e18 <hci_set_ad>
		if (err) {
    7fc8:	2800      	cmp	r0, #0
    7fca:	d0ce      	beq.n	7f6a <le_adv_update.constprop.0+0x72>
    7fcc:	4604      	mov	r4, r0
    7fce:	e7d0      	b.n	7f72 <le_adv_update.constprop.0+0x7a>
			return -EINVAL;
    7fd0:	f06f 0415 	mvn.w	r4, #21
    7fd4:	e7cd      	b.n	7f72 <le_adv_update.constprop.0+0x7a>
    7fd6:	bf00      	nop
    7fd8:	2000002c 	.word	0x2000002c
    7fdc:	20000148 	.word	0x20000148

00007fe0 <conn_auto_initiate>:
{
    7fe0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    7fe2:	7b43      	ldrb	r3, [r0, #13]
    7fe4:	2b07      	cmp	r3, #7
{
    7fe6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    7fe8:	d11e      	bne.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    7fea:	1d05      	adds	r5, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7fec:	4628      	mov	r0, r5
    7fee:	f017 f866 	bl	1f0be <atomic_get>
    7ff2:	0483      	lsls	r3, r0, #18
    7ff4:	d41a      	bmi.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    7ff6:	78e3      	ldrb	r3, [r4, #3]
    7ff8:	b123      	cbz	r3, 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    7ffa:	4b35      	ldr	r3, [pc, #212]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    7ffc:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    8000:	071e      	lsls	r6, r3, #28
    8002:	d513      	bpl.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    8004:	2102      	movs	r1, #2
    8006:	f242 0016 	movw	r0, #8214	; 0x2016
    800a:	f7ff fb9d 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    800e:	4606      	mov	r6, r0
    8010:	b160      	cbz	r0, 802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
	cp = net_buf_add(buf, sizeof(*cp));
    8012:	2102      	movs	r1, #2
    8014:	3008      	adds	r0, #8
    8016:	f018 fda7 	bl	20b68 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    801a:	8823      	ldrh	r3, [r4, #0]
    801c:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    801e:	4631      	mov	r1, r6
    8020:	f242 0016 	movw	r0, #8214	; 0x2016
    8024:	f7ff fbc8 	bl	77b8 <bt_hci_cmd_send>
}
    8028:	b004      	add	sp, #16
    802a:	bd70      	pop	{r4, r5, r6, pc}
    802c:	4628      	mov	r0, r5
    802e:	f017 f846 	bl	1f0be <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8032:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    8036:	4e26      	ldr	r6, [pc, #152]	; (80d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd0>)
    8038:	f3c0 3100 	ubfx	r1, r0, #12, #1
    803c:	d11a      	bne.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    803e:	f896 30a1 	ldrb.w	r3, [r6, #161]	; 0xa1
    8042:	07d8      	lsls	r0, r3, #31
    8044:	d516      	bpl.n	8074 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x74>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    8046:	2302      	movs	r3, #2
    8048:	9100      	str	r1, [sp, #0]
    804a:	461a      	mov	r2, r3
    804c:	4620      	mov	r0, r4
    804e:	f017 f90c 	bl	1f26a <bt_le_set_phy>
		if (!err) {
    8052:	4601      	mov	r1, r0
    8054:	b920      	cbnz	r0, 8060 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x60>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8056:	2180      	movs	r1, #128	; 0x80
    8058:	4628      	mov	r0, r5
    805a:	f017 f83f 	bl	1f0dc <atomic_or>
			return;
    805e:	e7e3      	b.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    8060:	4a1c      	ldr	r2, [pc, #112]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    8062:	4b1d      	ldr	r3, [pc, #116]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    8064:	481d      	ldr	r0, [pc, #116]	; (80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>)
    8066:	1ad2      	subs	r2, r2, r3
    8068:	08d2      	lsrs	r2, r2, #3
    806a:	0192      	lsls	r2, r2, #6
    806c:	f042 0201 	orr.w	r2, r2, #1
    8070:	f014 ff0a 	bl	1ce88 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    8074:	f896 30a0 	ldrb.w	r3, [r6, #160]	; 0xa0
    8078:	069a      	lsls	r2, r3, #26
    807a:	d518      	bpl.n	80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    807c:	f10d 010e 	add.w	r1, sp, #14
    8080:	a803      	add	r0, sp, #12
    8082:	f7ff fe6d 	bl	7d60 <hci_le_read_max_data_len>
		if (!err) {
    8086:	b990      	cbnz	r0, 80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
			err = bt_le_set_data_len(conn, tx_octets, tx_time);
    8088:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    808c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    8090:	4620      	mov	r0, r4
    8092:	f017 f8cd 	bl	1f230 <bt_le_set_data_len>
			if (err) {
    8096:	4601      	mov	r1, r0
    8098:	b148      	cbz	r0, 80ae <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xae>
    809a:	4a0e      	ldr	r2, [pc, #56]	; (80d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd4>)
    809c:	4b0e      	ldr	r3, [pc, #56]	; (80d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xd8>)
				BT_ERR("Failed to set data len (%d)", err);
    809e:	4810      	ldr	r0, [pc, #64]	; (80e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe0>)
    80a0:	1ad2      	subs	r2, r2, r3
    80a2:	08d2      	lsrs	r2, r2, #3
    80a4:	0192      	lsls	r2, r2, #6
    80a6:	f042 0201 	orr.w	r2, r2, #1
    80aa:	f014 feed 	bl	1ce88 <log_1>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    80ae:	78e3      	ldrb	r3, [r4, #3]
    80b0:	2b01      	cmp	r3, #1
    80b2:	d1b9      	bne.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    80b4:	4628      	mov	r0, r5
    80b6:	f017 f802 	bl	1f0be <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    80ba:	05c3      	lsls	r3, r0, #23
    80bc:	d4b4      	bmi.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    80be:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    80c2:	2300      	movs	r3, #0
    80c4:	f104 0158 	add.w	r1, r4, #88	; 0x58
    80c8:	4806      	ldr	r0, [pc, #24]	; (80e4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe4>)
    80ca:	f013 ff83 	bl	1bfd4 <k_delayed_work_submit_to_queue>
    80ce:	e7ab      	b.n	8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>
    80d0:	20000000 	.word	0x20000000
    80d4:	00021b6c 	.word	0x00021b6c
    80d8:	00021aac 	.word	0x00021aac
    80dc:	000244c4 	.word	0x000244c4
    80e0:	000244de 	.word	0x000244de
    80e4:	200012a8 	.word	0x200012a8

000080e8 <le_phy_update_complete>:
{
    80e8:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    80ea:	6883      	ldr	r3, [r0, #8]
    80ec:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    80f0:	4628      	mov	r0, r5
    80f2:	f001 fce7 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    80f6:	4604      	mov	r4, r0
    80f8:	b960      	cbnz	r0, 8114 <le_phy_update_complete+0x2c>
    80fa:	4b11      	ldr	r3, [pc, #68]	; (8140 <le_phy_update_complete+0x58>)
    80fc:	4a11      	ldr	r2, [pc, #68]	; (8144 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    80fe:	4812      	ldr	r0, [pc, #72]	; (8148 <le_phy_update_complete+0x60>)
    8100:	1ad2      	subs	r2, r2, r3
    8102:	08d2      	lsrs	r2, r2, #3
    8104:	0192      	lsls	r2, r2, #6
    8106:	4629      	mov	r1, r5
    8108:	f042 0201 	orr.w	r2, r2, #1
}
    810c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8110:	f014 beba 	b.w	1ce88 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    8114:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8116:	f06f 0180 	mvn.w	r1, #128	; 0x80
    811a:	4628      	mov	r0, r5
    811c:	f016 ffc0 	bl	1f0a0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    8120:	0603      	lsls	r3, r0, #24
    8122:	d507      	bpl.n	8134 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    8128:	4628      	mov	r0, r5
    812a:	f016 ffd7 	bl	1f0dc <atomic_or>
		conn_auto_initiate(conn);
    812e:	4620      	mov	r0, r4
    8130:	f7ff ff56 	bl	7fe0 <conn_auto_initiate>
	bt_conn_unref(conn);
    8134:	4620      	mov	r0, r4
}
    8136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    813a:	f017 b9da 	b.w	1f4f2 <bt_conn_unref>
    813e:	bf00      	nop
    8140:	00021aac 	.word	0x00021aac
    8144:	00021b6c 	.word	0x00021b6c
    8148:	000241d1 	.word	0x000241d1

0000814c <le_remote_feat_complete>:
{
    814c:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    814e:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8150:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8154:	4630      	mov	r0, r6
    8156:	f001 fcb5 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    815a:	4604      	mov	r4, r0
    815c:	b960      	cbnz	r0, 8178 <le_remote_feat_complete+0x2c>
    815e:	4a10      	ldr	r2, [pc, #64]	; (81a0 <le_remote_feat_complete+0x54>)
    8160:	4b10      	ldr	r3, [pc, #64]	; (81a4 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8162:	4811      	ldr	r0, [pc, #68]	; (81a8 <le_remote_feat_complete+0x5c>)
    8164:	1ad2      	subs	r2, r2, r3
    8166:	08d2      	lsrs	r2, r2, #3
    8168:	0192      	lsls	r2, r2, #6
    816a:	4631      	mov	r1, r6
    816c:	f042 0201 	orr.w	r2, r2, #1
}
    8170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8174:	f014 be88 	b.w	1ce88 <log_1>
	if (!evt->status) {
    8178:	782b      	ldrb	r3, [r5, #0]
    817a:	b923      	cbnz	r3, 8186 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    817c:	2208      	movs	r2, #8
    817e:	1ce9      	adds	r1, r5, #3
    8180:	30ac      	adds	r0, #172	; 0xac
    8182:	f016 fe36 	bl	1edf2 <memcpy>
    8186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    818a:	1d20      	adds	r0, r4, #4
    818c:	f016 ffa6 	bl	1f0dc <atomic_or>
	conn_auto_initiate(conn);
    8190:	4620      	mov	r0, r4
    8192:	f7ff ff25 	bl	7fe0 <conn_auto_initiate>
	bt_conn_unref(conn);
    8196:	4620      	mov	r0, r4
}
    8198:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    819c:	f017 b9a9 	b.w	1f4f2 <bt_conn_unref>
    81a0:	00021b6c 	.word	0x00021b6c
    81a4:	00021aac 	.word	0x00021aac
    81a8:	000241d1 	.word	0x000241d1

000081ac <bt_unpair>:
{
    81ac:	b530      	push	{r4, r5, lr}
    81ae:	b085      	sub	sp, #20
    81b0:	460d      	mov	r5, r1
    81b2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    81b6:	b9c8      	cbnz	r0, 81ec <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    81b8:	b949      	cbnz	r1, 81ce <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    81ba:	490e      	ldr	r1, [pc, #56]	; (81f4 <bt_unpair+0x48>)
    81bc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    81c0:	f10d 0207 	add.w	r2, sp, #7
    81c4:	f006 fa94 	bl	e6f0 <bt_foreach_bond>
		return 0;
    81c8:	2000      	movs	r0, #0
}
    81ca:	b005      	add	sp, #20
    81cc:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    81ce:	9002      	str	r0, [sp, #8]
    81d0:	a902      	add	r1, sp, #8
    81d2:	f8cd 000b 	str.w	r0, [sp, #11]
    81d6:	4628      	mov	r0, r5
    81d8:	f016 ff77 	bl	1f0ca <bt_addr_le_cmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    81dc:	2800      	cmp	r0, #0
    81de:	d0ec      	beq.n	81ba <bt_unpair+0xe>
	unpair(id, addr);
    81e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    81e4:	4629      	mov	r1, r5
    81e6:	f7fe fdff 	bl	6de8 <unpair>
	return 0;
    81ea:	e7ed      	b.n	81c8 <bt_unpair+0x1c>
		return -EINVAL;
    81ec:	f06f 0015 	mvn.w	r0, #21
    81f0:	e7eb      	b.n	81ca <bt_unpair+0x1e>
    81f2:	bf00      	nop
    81f4:	0001f133 	.word	0x0001f133

000081f8 <bt_id_add>:
{
    81f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    81fa:	4f5c      	ldr	r7, [pc, #368]	; (836c <bt_id_add+0x174>)
    81fc:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    8200:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
{
    8204:	4604      	mov	r4, r0
    8206:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    8208:	b10a      	cbz	r2, 820e <bt_id_add+0x16>
    820a:	429a      	cmp	r2, r3
    820c:	d208      	bcs.n	8220 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    820e:	3301      	adds	r3, #1
    8210:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    8214:	7a23      	ldrb	r3, [r4, #8]
    8216:	f043 0304 	orr.w	r3, r3, #4
    821a:	7223      	strb	r3, [r4, #8]
}
    821c:	b003      	add	sp, #12
    821e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    8220:	2100      	movs	r1, #0
    8222:	2206      	movs	r2, #6
    8224:	4608      	mov	r0, r1
    8226:	f001 fc87 	bl	9b38 <bt_conn_lookup_state_le>
	if (conn) {
    822a:	4606      	mov	r6, r0
    822c:	b168      	cbz	r0, 824a <bt_id_add+0x52>
    822e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    8232:	f107 0098 	add.w	r0, r7, #152	; 0x98
    8236:	f016 ff51 	bl	1f0dc <atomic_or>
	keys->state |= flag;
    823a:	7a23      	ldrb	r3, [r4, #8]
    823c:	f043 0301 	orr.w	r3, r3, #1
    8240:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    8242:	4630      	mov	r0, r6
    8244:	f017 f955 	bl	1f4f2 <bt_conn_unref>
		return;
    8248:	e7e8      	b.n	821c <bt_id_add+0x24>
	func(&bt_dev.adv, data);
    824a:	4601      	mov	r1, r0
    824c:	f107 0018 	add.w	r0, r7, #24
    8250:	f016 ff84 	bl	1f15c <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
    8254:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    8258:	b173      	cbz	r3, 8278 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    825a:	4630      	mov	r0, r6
    825c:	f016 ffae 	bl	1f1bc <addr_res_enable>
		if (err) {
    8260:	b150      	cbz	r0, 8278 <bt_id_add+0x80>
    8262:	4943      	ldr	r1, [pc, #268]	; (8370 <bt_id_add+0x178>)
    8264:	4b43      	ldr	r3, [pc, #268]	; (8374 <bt_id_add+0x17c>)
			BT_WARN("Failed to disable address resolution");
    8266:	4844      	ldr	r0, [pc, #272]	; (8378 <bt_id_add+0x180>)
    8268:	1ac9      	subs	r1, r1, r3
    826a:	08c9      	lsrs	r1, r1, #3
    826c:	0189      	lsls	r1, r1, #6
    826e:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    8272:	f014 fdfc 	bl	1ce6e <log_0>
	if (err) {
    8276:	e023      	b.n	82c0 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    8278:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
    827c:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    8280:	429a      	cmp	r2, r3
    8282:	d125      	bne.n	82d0 <bt_id_add+0xd8>
    8284:	4b3b      	ldr	r3, [pc, #236]	; (8374 <bt_id_add+0x17c>)
    8286:	4e3a      	ldr	r6, [pc, #232]	; (8370 <bt_id_add+0x178>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    8288:	483c      	ldr	r0, [pc, #240]	; (837c <bt_id_add+0x184>)
    828a:	1af6      	subs	r6, r6, r3
    828c:	08f6      	lsrs	r6, r6, #3
    828e:	01b6      	lsls	r6, r6, #6
    8290:	f046 0102 	orr.w	r1, r6, #2
    8294:	f014 fdeb 	bl	1ce6e <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    8298:	2200      	movs	r2, #0
    829a:	4611      	mov	r1, r2
    829c:	f242 0029 	movw	r0, #8233	; 0x2029
    82a0:	f7ff fbae 	bl	7a00 <bt_hci_cmd_send_sync>
		if (err) {
    82a4:	b118      	cbz	r0, 82ae <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    82a6:	4836      	ldr	r0, [pc, #216]	; (8380 <bt_id_add+0x188>)
    82a8:	f046 0101 	orr.w	r1, r6, #1
    82ac:	e7e1      	b.n	8272 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    82ae:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    82b2:	3301      	adds	r3, #1
    82b4:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state |= BT_KEYS_ID_ADDED;
    82b8:	7a23      	ldrb	r3, [r4, #8]
    82ba:	f043 0304 	orr.w	r3, r3, #4
    82be:	7223      	strb	r3, [r4, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    82c0:	2001      	movs	r0, #1
    82c2:	f016 ff7b 	bl	1f1bc <addr_res_enable>
	func(&bt_dev.adv, data);
    82c6:	482f      	ldr	r0, [pc, #188]	; (8384 <bt_id_add+0x18c>)
    82c8:	2100      	movs	r1, #0
    82ca:	f016 ff5c 	bl	1f186 <adv_unpause_enabled>
}
    82ce:	e7a5      	b.n	821c <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    82d0:	4622      	mov	r2, r4
    82d2:	1c67      	adds	r7, r4, #1
    82d4:	f812 0b2a 	ldrb.w	r0, [r2], #42
    82d8:	4639      	mov	r1, r7
    82da:	f7ff fd6b 	bl	7db4 <hci_id_add>
	if (err) {
    82de:	4606      	mov	r6, r0
    82e0:	b140      	cbz	r0, 82f4 <bt_id_add+0xfc>
    82e2:	4923      	ldr	r1, [pc, #140]	; (8370 <bt_id_add+0x178>)
    82e4:	4b23      	ldr	r3, [pc, #140]	; (8374 <bt_id_add+0x17c>)
		BT_ERR("Failed to add IRK to controller");
    82e6:	4828      	ldr	r0, [pc, #160]	; (8388 <bt_id_add+0x190>)
    82e8:	1ac9      	subs	r1, r1, r3
    82ea:	08c9      	lsrs	r1, r1, #3
    82ec:	0189      	lsls	r1, r1, #6
    82ee:	f041 0101 	orr.w	r1, r1, #1
    82f2:	e7be      	b.n	8272 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    82f4:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    82f8:	3301      	adds	r3, #1
    82fa:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state |= BT_KEYS_ID_ADDED;
    82fe:	7a23      	ldrb	r3, [r4, #8]
    8300:	f043 0304 	orr.w	r3, r3, #4
    8304:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    8306:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    830a:	075b      	lsls	r3, r3, #29
    830c:	d408      	bmi.n	8320 <bt_id_add+0x128>
    830e:	4918      	ldr	r1, [pc, #96]	; (8370 <bt_id_add+0x178>)
    8310:	4b18      	ldr	r3, [pc, #96]	; (8374 <bt_id_add+0x17c>)
		BT_WARN("Set privacy mode command is not supported");
    8312:	481e      	ldr	r0, [pc, #120]	; (838c <bt_id_add+0x194>)
    8314:	1ac9      	subs	r1, r1, r3
    8316:	08c9      	lsrs	r1, r1, #3
    8318:	0189      	lsls	r1, r1, #6
    831a:	f041 0102 	orr.w	r1, r1, #2
    831e:	e7a8      	b.n	8272 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    8320:	4639      	mov	r1, r7
    8322:	4668      	mov	r0, sp
    8324:	f016 fed7 	bl	1f0d6 <bt_addr_le_copy>
	cp.mode = mode;
    8328:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    832a:	2108      	movs	r1, #8
    832c:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    8330:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    8334:	f7ff fa08 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    8338:	4604      	mov	r4, r0
    833a:	b940      	cbnz	r0, 834e <bt_id_add+0x156>
    833c:	490c      	ldr	r1, [pc, #48]	; (8370 <bt_id_add+0x178>)
    833e:	4b0d      	ldr	r3, [pc, #52]	; (8374 <bt_id_add+0x17c>)
		BT_ERR("Failed to set privacy mode");
    8340:	4813      	ldr	r0, [pc, #76]	; (8390 <bt_id_add+0x198>)
    8342:	1ac9      	subs	r1, r1, r3
    8344:	08c9      	lsrs	r1, r1, #3
    8346:	0189      	lsls	r1, r1, #6
    8348:	f041 0101 	orr.w	r1, r1, #1
    834c:	e791      	b.n	8272 <bt_id_add+0x7a>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    834e:	2208      	movs	r2, #8
    8350:	4669      	mov	r1, sp
    8352:	4410      	add	r0, r2
    8354:	f018 fc0e 	bl	20b74 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    8358:	4632      	mov	r2, r6
    835a:	4621      	mov	r1, r4
    835c:	f242 004e 	movw	r0, #8270	; 0x204e
    8360:	f7ff fb4e 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    8364:	2800      	cmp	r0, #0
    8366:	d0ab      	beq.n	82c0 <bt_id_add+0xc8>
    8368:	e7e8      	b.n	833c <bt_id_add+0x144>
    836a:	bf00      	nop
    836c:	20000000 	.word	0x20000000
    8370:	00021b6c 	.word	0x00021b6c
    8374:	00021aac 	.word	0x00021aac
    8378:	000244fa 	.word	0x000244fa
    837c:	0002451f 	.word	0x0002451f
    8380:	00024550 	.word	0x00024550
    8384:	20000018 	.word	0x20000018
    8388:	00024570 	.word	0x00024570
    838c:	00024590 	.word	0x00024590
    8390:	000245ba 	.word	0x000245ba

00008394 <bt_id_del>:
{
    8394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    8398:	4f45      	ldr	r7, [pc, #276]	; (84b0 <bt_id_del+0x11c>)
    839a:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    839e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
{
    83a2:	4604      	mov	r4, r0
    83a4:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
    83a6:	b112      	cbz	r2, 83ae <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    83a8:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    83aa:	4293      	cmp	r3, r2
    83ac:	dd08      	ble.n	83c0 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    83ae:	3b01      	subs	r3, #1
    83b0:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    83b4:	7a23      	ldrb	r3, [r4, #8]
    83b6:	f023 0304 	bic.w	r3, r3, #4
    83ba:	7223      	strb	r3, [r4, #8]
}
    83bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    83c0:	2100      	movs	r1, #0
    83c2:	2206      	movs	r2, #6
    83c4:	4608      	mov	r0, r1
    83c6:	f001 fbb7 	bl	9b38 <bt_conn_lookup_state_le>
	if (conn) {
    83ca:	4606      	mov	r6, r0
    83cc:	b170      	cbz	r0, 83ec <bt_id_del+0x58>
    83ce:	f107 0098 	add.w	r0, r7, #152	; 0x98
    83d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    83d6:	f016 fe81 	bl	1f0dc <atomic_or>
	keys->state |= flag;
    83da:	7a23      	ldrb	r3, [r4, #8]
    83dc:	f043 0302 	orr.w	r3, r3, #2
    83e0:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    83e2:	4630      	mov	r0, r6
}
    83e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    83e8:	f017 b883 	b.w	1f4f2 <bt_conn_unref>
	func(&bt_dev.adv, data);
    83ec:	4601      	mov	r1, r0
    83ee:	f107 0018 	add.w	r0, r7, #24
    83f2:	f016 feb3 	bl	1f15c <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    83f6:	4630      	mov	r0, r6
    83f8:	f016 fee0 	bl	1f1bc <addr_res_enable>
	if (err) {
    83fc:	4606      	mov	r6, r0
    83fe:	b1b0      	cbz	r0, 842e <bt_id_del+0x9a>
    8400:	4a2c      	ldr	r2, [pc, #176]	; (84b4 <bt_id_del+0x120>)
    8402:	4b2d      	ldr	r3, [pc, #180]	; (84b8 <bt_id_del+0x124>)
    8404:	1ad2      	subs	r2, r2, r3
    8406:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    8408:	0192      	lsls	r2, r2, #6
    840a:	4601      	mov	r1, r0
    840c:	f042 0201 	orr.w	r2, r2, #1
    8410:	482a      	ldr	r0, [pc, #168]	; (84bc <bt_id_del+0x128>)
    8412:	f014 fd39 	bl	1ce88 <log_1>
	if (bt_dev.le.rl_entries) {
    8416:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    841a:	b113      	cbz	r3, 8422 <bt_id_del+0x8e>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    841c:	2001      	movs	r0, #1
    841e:	f016 fecd 	bl	1f1bc <addr_res_enable>
}
    8422:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
    8426:	4826      	ldr	r0, [pc, #152]	; (84c0 <bt_id_del+0x12c>)
    8428:	2100      	movs	r1, #0
    842a:	f016 beac 	b.w	1f186 <adv_unpause_enabled>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    842e:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
    8432:	f897 20cc 	ldrb.w	r2, [r7, #204]	; 0xcc
    8436:	429a      	cmp	r2, r3
    8438:	d20c      	bcs.n	8454 <bt_id_del+0xc0>
		bt_dev.le.rl_entries--;
    843a:	3b01      	subs	r3, #1
    843c:	f887 30cd 	strb.w	r3, [r7, #205]	; 0xcd
		keys->state &= ~BT_KEYS_ID_ADDED;
    8440:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8442:	4920      	ldr	r1, [pc, #128]	; (84c4 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    8444:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    8448:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    844a:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    844c:	2002      	movs	r0, #2
    844e:	f006 f965 	bl	e71c <bt_keys_foreach>
		goto done;
    8452:	e7e0      	b.n	8416 <bt_id_del+0x82>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    8454:	2107      	movs	r1, #7
    8456:	f242 0028 	movw	r0, #8232	; 0x2028
    845a:	f7ff f975 	bl	7748 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    845e:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    8462:	4607      	mov	r7, r0
    8464:	b950      	cbnz	r0, 847c <bt_id_del+0xe8>
    8466:	4b14      	ldr	r3, [pc, #80]	; (84b8 <bt_id_del+0x124>)
    8468:	4912      	ldr	r1, [pc, #72]	; (84b4 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    846a:	4817      	ldr	r0, [pc, #92]	; (84c8 <bt_id_del+0x134>)
    846c:	1ac9      	subs	r1, r1, r3
    846e:	08c9      	lsrs	r1, r1, #3
    8470:	0189      	lsls	r1, r1, #6
    8472:	f041 0101 	orr.w	r1, r1, #1
    8476:	f014 fcfa 	bl	1ce6e <log_0>
		goto done;
    847a:	e7cc      	b.n	8416 <bt_id_del+0x82>
	cp = net_buf_add(buf, sizeof(*cp));
    847c:	2107      	movs	r1, #7
    847e:	3008      	adds	r0, #8
    8480:	f018 fb72 	bl	20b68 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    8484:	4641      	mov	r1, r8
    8486:	f016 fe26 	bl	1f0d6 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    848a:	4632      	mov	r2, r6
    848c:	4639      	mov	r1, r7
    848e:	f242 0028 	movw	r0, #8232	; 0x2028
    8492:	f7ff fab5 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    8496:	2800      	cmp	r0, #0
    8498:	d1e5      	bne.n	8466 <bt_id_del+0xd2>
	bt_dev.le.rl_entries--;
    849a:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    849e:	3b01      	subs	r3, #1
    84a0:	f885 30cd 	strb.w	r3, [r5, #205]	; 0xcd
	keys->state &= ~BT_KEYS_ID_ADDED;
    84a4:	7a23      	ldrb	r3, [r4, #8]
    84a6:	f023 0304 	bic.w	r3, r3, #4
    84aa:	7223      	strb	r3, [r4, #8]
    84ac:	e7b3      	b.n	8416 <bt_id_del+0x82>
    84ae:	bf00      	nop
    84b0:	20000000 	.word	0x20000000
    84b4:	00021b6c 	.word	0x00021b6c
    84b8:	00021aac 	.word	0x00021aac
    84bc:	000245d5 	.word	0x000245d5
    84c0:	20000018 	.word	0x20000018
    84c4:	0001f1a7 	.word	0x0001f1a7
    84c8:	00024602 	.word	0x00024602

000084cc <id_create>:
{
    84cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84d0:	4604      	mov	r4, r0
    84d2:	4828      	ldr	r0, [pc, #160]	; (8574 <id_create+0xa8>)
    84d4:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    84d8:	b086      	sub	sp, #24
    84da:	4615      	mov	r5, r2
    84dc:	4407      	add	r7, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    84de:	460e      	mov	r6, r1
    84e0:	4680      	mov	r8, r0
    84e2:	b361      	cbz	r1, 853e <id_create+0x72>
    84e4:	2300      	movs	r3, #0
    84e6:	4669      	mov	r1, sp
    84e8:	4630      	mov	r0, r6
    84ea:	9300      	str	r3, [sp, #0]
    84ec:	f8cd 3003 	str.w	r3, [sp, #3]
    84f0:	f016 fdeb 	bl	1f0ca <bt_addr_le_cmp>
    84f4:	b318      	cbz	r0, 853e <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    84f6:	4631      	mov	r1, r6
    84f8:	4638      	mov	r0, r7
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    84fa:	f016 fdec 	bl	1f0d6 <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    84fe:	2610      	movs	r6, #16
    8500:	2300      	movs	r3, #0
    8502:	fb06 8404 	mla	r4, r6, r4, r8
    8506:	e9cd 3302 	strd	r3, r3, [sp, #8]
    850a:	e9cd 3304 	strd	r3, r3, [sp, #16]
		if (irk && memcmp(irk, zero_irk, 16)) {
    850e:	f504 7484 	add.w	r4, r4, #264	; 0x108
    8512:	b32d      	cbz	r5, 8560 <id_create+0x94>
    8514:	4632      	mov	r2, r6
    8516:	a902      	add	r1, sp, #8
    8518:	4628      	mov	r0, r5
    851a:	f016 fc5a 	bl	1edd2 <memcmp>
    851e:	b1f8      	cbz	r0, 8560 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
    8520:	4632      	mov	r2, r6
    8522:	4629      	mov	r1, r5
    8524:	4620      	mov	r0, r4
				memcpy(irk, &bt_dev.irk[id], 16);
    8526:	f016 fc64 	bl	1edf2 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    852a:	4813      	ldr	r0, [pc, #76]	; (8578 <id_create+0xac>)
    852c:	f016 fdc7 	bl	1f0be <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8530:	0783      	lsls	r3, r0, #30
    8532:	d501      	bpl.n	8538 <id_create+0x6c>
		bt_settings_save_id();
    8534:	f7fe faec 	bl	6b10 <bt_settings_save_id>
}
    8538:	b006      	add	sp, #24
    853a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
    853e:	a802      	add	r0, sp, #8
    8540:	f016 fee9 	bl	1f316 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8544:	a802      	add	r0, sp, #8
    8546:	f7fe fbd7 	bl	6cf8 <id_find>
    854a:	2800      	cmp	r0, #0
    854c:	daf7      	bge.n	853e <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    854e:	a902      	add	r1, sp, #8
    8550:	4638      	mov	r0, r7
    8552:	f016 fdc0 	bl	1f0d6 <bt_addr_le_copy>
		if (addr) {
    8556:	2e00      	cmp	r6, #0
    8558:	d0d1      	beq.n	84fe <id_create+0x32>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    855a:	4639      	mov	r1, r7
    855c:	4630      	mov	r0, r6
    855e:	e7cc      	b.n	84fa <id_create+0x2e>
			bt_rand(&bt_dev.irk[id], 16);
    8560:	2110      	movs	r1, #16
    8562:	4620      	mov	r0, r4
    8564:	f009 f92e 	bl	117c4 <bt_rand>
			if (irk) {
    8568:	2d00      	cmp	r5, #0
    856a:	d0de      	beq.n	852a <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    856c:	2210      	movs	r2, #16
    856e:	4621      	mov	r1, r4
    8570:	4628      	mov	r0, r5
    8572:	e7d8      	b.n	8526 <id_create+0x5a>
    8574:	20000000 	.word	0x20000000
    8578:	20000098 	.word	0x20000098

0000857c <hci_event_prio>:
{
    857c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8580:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    8582:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    8586:	4630      	mov	r0, r6
    8588:	f018 fb25 	bl	20bd6 <net_buf_simple_headroom>
	state->len = buf->len;
    858c:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    8590:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    8594:	4605      	mov	r5, r0
    8596:	d80c      	bhi.n	85b2 <hci_event_prio+0x36>
    8598:	4a1c      	ldr	r2, [pc, #112]	; (860c <hci_event_prio+0x90>)
    859a:	491d      	ldr	r1, [pc, #116]	; (8610 <hci_event_prio+0x94>)
    859c:	481d      	ldr	r0, [pc, #116]	; (8614 <hci_event_prio+0x98>)
    859e:	f641 1307 	movw	r3, #6407	; 0x1907
    85a2:	f014 f90e 	bl	1c7c2 <printk>
    85a6:	4040      	eors	r0, r0
    85a8:	f380 8811 	msr	BASEPRI, r0
    85ac:	f04f 0003 	mov.w	r0, #3
    85b0:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    85b2:	2102      	movs	r1, #2
    85b4:	4630      	mov	r0, r6
    85b6:	f018 fafe 	bl	20bb6 <net_buf_simple_pull_mem>
    85ba:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    85bc:	7800      	ldrb	r0, [r0, #0]
    85be:	f016 fd5d 	bl	1f07c <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    85c2:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    85c4:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    85c6:	d40c      	bmi.n	85e2 <hci_event_prio+0x66>
    85c8:	4a10      	ldr	r2, [pc, #64]	; (860c <hci_event_prio+0x90>)
    85ca:	4913      	ldr	r1, [pc, #76]	; (8618 <hci_event_prio+0x9c>)
    85cc:	4811      	ldr	r0, [pc, #68]	; (8614 <hci_event_prio+0x98>)
    85ce:	f641 130b 	movw	r3, #6411	; 0x190b
    85d2:	f014 f8f6 	bl	1c7c2 <printk>
    85d6:	4040      	eors	r0, r0
    85d8:	f380 8811 	msr	BASEPRI, r0
    85dc:	f04f 0003 	mov.w	r0, #3
    85e0:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    85e2:	2305      	movs	r3, #5
    85e4:	4a0d      	ldr	r2, [pc, #52]	; (861c <hci_event_prio+0xa0>)
    85e6:	7838      	ldrb	r0, [r7, #0]
    85e8:	4621      	mov	r1, r4
    85ea:	f7fe fe5f 	bl	72ac <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    85ee:	07b3      	lsls	r3, r6, #30
    85f0:	d507      	bpl.n	8602 <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    85f2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    85f4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    85f8:	fa10 f585 	uxtah	r5, r0, r5
    85fc:	60a5      	str	r5, [r4, #8]
}
    85fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    8602:	4620      	mov	r0, r4
}
    8604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    8608:	f011 bd72 	b.w	1a0f0 <net_buf_unref>
    860c:	00024311 	.word	0x00024311
    8610:	00024627 	.word	0x00024627
    8614:	0002434e 	.word	0x0002434e
    8618:	00024640 	.word	0x00024640
    861c:	0002234c 	.word	0x0002234c

00008620 <bt_recv>:
{
    8620:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    8622:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    8624:	2901      	cmp	r1, #1
{
    8626:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    8628:	d04b      	beq.n	86c2 <bt_recv+0xa2>
    862a:	2903      	cmp	r1, #3
    862c:	d178      	bne.n	8720 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    862e:	8983      	ldrh	r3, [r0, #12]
    8630:	2b03      	cmp	r3, #3
    8632:	d80c      	bhi.n	864e <bt_recv+0x2e>
    8634:	4a42      	ldr	r2, [pc, #264]	; (8740 <bt_recv+0x120>)
    8636:	4943      	ldr	r1, [pc, #268]	; (8744 <bt_recv+0x124>)
    8638:	4843      	ldr	r0, [pc, #268]	; (8748 <bt_recv+0x128>)
    863a:	f240 5305 	movw	r3, #1285	; 0x505
    863e:	f014 f8c0 	bl	1c7c2 <printk>
    8642:	4040      	eors	r0, r0
    8644:	f380 8811 	msr	BASEPRI, r0
    8648:	f04f 0003 	mov.w	r0, #3
    864c:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    864e:	2104      	movs	r1, #4
    8650:	f104 0008 	add.w	r0, r4, #8
    8654:	f018 faaf 	bl	20bb6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    8658:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    865a:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    865c:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    865e:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    8660:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    8664:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    8666:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    8668:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    866a:	d00d      	beq.n	8688 <bt_recv+0x68>
    866c:	4837      	ldr	r0, [pc, #220]	; (874c <bt_recv+0x12c>)
    866e:	4b38      	ldr	r3, [pc, #224]	; (8750 <bt_recv+0x130>)
    8670:	1a1b      	subs	r3, r3, r0
    8672:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    8674:	019b      	lsls	r3, r3, #6
    8676:	4837      	ldr	r0, [pc, #220]	; (8754 <bt_recv+0x134>)
    8678:	f043 0301 	orr.w	r3, r3, #1
    867c:	f014 fc18 	bl	1ceb0 <log_2>
	net_buf_unref(buf);
    8680:	4620      	mov	r0, r4
    8682:	f011 fd35 	bl	1a0f0 <net_buf_unref>
    8686:	e01a      	b.n	86be <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    8688:	f001 fa1c 	bl	9ac4 <bt_conn_lookup_handle>
	if (!conn) {
    868c:	4605      	mov	r5, r0
    868e:	b958      	cbnz	r0, 86a8 <bt_recv+0x88>
    8690:	4b2e      	ldr	r3, [pc, #184]	; (874c <bt_recv+0x12c>)
    8692:	4a2f      	ldr	r2, [pc, #188]	; (8750 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    8694:	8ae1      	ldrh	r1, [r4, #22]
    8696:	4830      	ldr	r0, [pc, #192]	; (8758 <bt_recv+0x138>)
    8698:	1ad2      	subs	r2, r2, r3
    869a:	08d2      	lsrs	r2, r2, #3
    869c:	0192      	lsls	r2, r2, #6
    869e:	f042 0201 	orr.w	r2, r2, #1
    86a2:	f014 fbf1 	bl	1ce88 <log_1>
		net_buf_unref(buf);
    86a6:	e7eb      	b.n	8680 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    86a8:	f001 fd0e 	bl	a0c8 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    86ac:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    86ae:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    86b0:	4621      	mov	r1, r4
    86b2:	4628      	mov	r0, r5
    86b4:	f001 f884 	bl	97c0 <bt_conn_recv>
	bt_conn_unref(conn);
    86b8:	4628      	mov	r0, r5
    86ba:	f016 ff1a 	bl	1f4f2 <bt_conn_unref>
		return 0;
    86be:	2000      	movs	r0, #0
}
    86c0:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    86c2:	8983      	ldrh	r3, [r0, #12]
    86c4:	2b01      	cmp	r3, #1
    86c6:	d80c      	bhi.n	86e2 <bt_recv+0xc2>
    86c8:	4a1d      	ldr	r2, [pc, #116]	; (8740 <bt_recv+0x120>)
    86ca:	491e      	ldr	r1, [pc, #120]	; (8744 <bt_recv+0x124>)
    86cc:	481e      	ldr	r0, [pc, #120]	; (8748 <bt_recv+0x128>)
    86ce:	f241 439b 	movw	r3, #5275	; 0x149b
    86d2:	f014 f876 	bl	1c7c2 <printk>
    86d6:	4040      	eors	r0, r0
    86d8:	f380 8811 	msr	BASEPRI, r0
    86dc:	f04f 0003 	mov.w	r0, #3
    86e0:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    86e2:	2102      	movs	r1, #2
    86e4:	f104 0008 	add.w	r0, r4, #8
    86e8:	f018 fa65 	bl	20bb6 <net_buf_simple_pull_mem>
    86ec:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    86ee:	7800      	ldrb	r0, [r0, #0]
    86f0:	f016 fcc4 	bl	1f07c <bt_hci_evt_get_flags>
    86f4:	0783      	lsls	r3, r0, #30
    86f6:	d40c      	bmi.n	8712 <bt_recv+0xf2>
    86f8:	4a11      	ldr	r2, [pc, #68]	; (8740 <bt_recv+0x120>)
    86fa:	4918      	ldr	r1, [pc, #96]	; (875c <bt_recv+0x13c>)
    86fc:	4812      	ldr	r0, [pc, #72]	; (8748 <bt_recv+0x128>)
    86fe:	f241 439f 	movw	r3, #5279	; 0x149f
    8702:	f014 f85e 	bl	1c7c2 <printk>
    8706:	4040      	eors	r0, r0
    8708:	f380 8811 	msr	BASEPRI, r0
    870c:	f04f 0003 	mov.w	r0, #3
    8710:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    8712:	4a13      	ldr	r2, [pc, #76]	; (8760 <bt_recv+0x140>)
    8714:	7828      	ldrb	r0, [r5, #0]
    8716:	2305      	movs	r3, #5
    8718:	4621      	mov	r1, r4
    871a:	f7fe fdc7 	bl	72ac <handle_event>
    871e:	e7af      	b.n	8680 <bt_recv+0x60>
    8720:	4b0a      	ldr	r3, [pc, #40]	; (874c <bt_recv+0x12c>)
    8722:	4a0b      	ldr	r2, [pc, #44]	; (8750 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    8724:	480f      	ldr	r0, [pc, #60]	; (8764 <bt_recv+0x144>)
    8726:	1ad2      	subs	r2, r2, r3
    8728:	08d2      	lsrs	r2, r2, #3
    872a:	0192      	lsls	r2, r2, #6
    872c:	f042 0201 	orr.w	r2, r2, #1
    8730:	f014 fbaa 	bl	1ce88 <log_1>
		net_buf_unref(buf);
    8734:	4620      	mov	r0, r4
    8736:	f011 fcdb 	bl	1a0f0 <net_buf_unref>
		return -EINVAL;
    873a:	f06f 0015 	mvn.w	r0, #21
    873e:	e7bf      	b.n	86c0 <bt_recv+0xa0>
    8740:	00024311 	.word	0x00024311
    8744:	00024627 	.word	0x00024627
    8748:	0002434e 	.word	0x0002434e
    874c:	00021aac 	.word	0x00021aac
    8750:	00021b6c 	.word	0x00021b6c
    8754:	00024659 	.word	0x00024659
    8758:	0002467d 	.word	0x0002467d
    875c:	0002469f 	.word	0x0002469f
    8760:	00022314 	.word	0x00022314
    8764:	000246cd 	.word	0x000246cd

00008768 <bt_recv_prio>:
{
    8768:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    876a:	7d03      	ldrb	r3, [r0, #20]
    876c:	2b01      	cmp	r3, #1
{
    876e:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    8770:	d00c      	beq.n	878c <bt_recv_prio+0x24>
    8772:	4a09      	ldr	r2, [pc, #36]	; (8798 <bt_recv_prio+0x30>)
    8774:	4909      	ldr	r1, [pc, #36]	; (879c <bt_recv_prio+0x34>)
    8776:	480a      	ldr	r0, [pc, #40]	; (87a0 <bt_recv_prio+0x38>)
    8778:	f641 1344 	movw	r3, #6468	; 0x1944
    877c:	f014 f821 	bl	1c7c2 <printk>
    8780:	4040      	eors	r0, r0
    8782:	f380 8811 	msr	BASEPRI, r0
    8786:	f04f 0003 	mov.w	r0, #3
    878a:	df02      	svc	2
	hci_event_prio(buf);
    878c:	4620      	mov	r0, r4
    878e:	f7ff fef5 	bl	857c <hci_event_prio>
}
    8792:	2000      	movs	r0, #0
    8794:	bd10      	pop	{r4, pc}
    8796:	bf00      	nop
    8798:	00024311 	.word	0x00024311
    879c:	000246e1 	.word	0x000246e1
    87a0:	0002434e 	.word	0x0002434e

000087a4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    87a4:	4a08      	ldr	r2, [pc, #32]	; (87c8 <bt_hci_driver_register+0x24>)
{
    87a6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    87a8:	f8d2 0104 	ldr.w	r0, [r2, #260]	; 0x104
    87ac:	b930      	cbnz	r0, 87bc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    87ae:	68d9      	ldr	r1, [r3, #12]
    87b0:	b139      	cbz	r1, 87c2 <bt_hci_driver_register+0x1e>
    87b2:	6919      	ldr	r1, [r3, #16]
    87b4:	b129      	cbz	r1, 87c2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    87b6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return 0;
    87ba:	4770      	bx	lr
		return -EALREADY;
    87bc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    87c0:	4770      	bx	lr
		return -EINVAL;
    87c2:	f06f 0015 	mvn.w	r0, #21
}
    87c6:	4770      	bx	lr
    87c8:	20000000 	.word	0x20000000

000087cc <bt_finalize_init>:
{
    87cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    87d0:	4c2b      	ldr	r4, [pc, #172]	; (8880 <bt_finalize_init+0xb4>)
    87d2:	4d2c      	ldr	r5, [pc, #176]	; (8884 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    87d4:	4e2c      	ldr	r6, [pc, #176]	; (8888 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    87d6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 88a0 <bt_finalize_init+0xd4>
{
    87da:	b087      	sub	sp, #28
    87dc:	2102      	movs	r1, #2
    87de:	f104 0098 	add.w	r0, r4, #152	; 0x98
    87e2:	f016 fc7b 	bl	1f0dc <atomic_or>
    87e6:	4b29      	ldr	r3, [pc, #164]	; (888c <bt_finalize_init+0xc0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    87e8:	4929      	ldr	r1, [pc, #164]	; (8890 <bt_finalize_init+0xc4>)
    87ea:	1aed      	subs	r5, r5, r3
    87ec:	79e3      	ldrb	r3, [r4, #7]
    87ee:	4620      	mov	r0, r4
    87f0:	2b01      	cmp	r3, #1
    87f2:	bf88      	it	hi
    87f4:	460e      	movhi	r6, r1
    87f6:	f7fd feab 	bl	6550 <bt_addr_le_str_real>
    87fa:	f7fb f925 	bl	3a48 <log_strdup>
    87fe:	08ed      	lsrs	r5, r5, #3
    8800:	01ad      	lsls	r5, r5, #6
    8802:	f045 0703 	orr.w	r7, r5, #3
    8806:	4602      	mov	r2, r0
    8808:	4631      	mov	r1, r6
    880a:	4822      	ldr	r0, [pc, #136]	; (8894 <bt_finalize_init+0xc8>)
    880c:	463b      	mov	r3, r7
    880e:	f014 fb4f 	bl	1ceb0 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    8812:	46a0      	mov	r8, r4
    8814:	2601      	movs	r6, #1
    8816:	79e3      	ldrb	r3, [r4, #7]
    8818:	429e      	cmp	r6, r3
    881a:	f108 0807 	add.w	r8, r8, #7
    881e:	db22      	blt.n	8866 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    8820:	f894 6038 	ldrb.w	r6, [r4, #56]	; 0x38
    8824:	4630      	mov	r0, r6
    8826:	f7fe fa39 	bl	6c9c <ver_str>
    882a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    882c:	9304      	str	r3, [sp, #16]
    882e:	f045 0503 	orr.w	r5, r5, #3
    8832:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    8834:	9305      	str	r3, [sp, #20]
    8836:	e9cd 0602 	strd	r0, r6, [sp, #8]
    883a:	462b      	mov	r3, r5
    883c:	a902      	add	r1, sp, #8
    883e:	2204      	movs	r2, #4
    8840:	4815      	ldr	r0, [pc, #84]	; (8898 <bt_finalize_init+0xcc>)
    8842:	f014 fb6a 	bl	1cf1a <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    8846:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
    884a:	4630      	mov	r0, r6
    884c:	f7fe fa26 	bl	6c9c <ver_str>
    8850:	8fa3      	ldrh	r3, [r4, #60]	; 0x3c
    8852:	f8ad 5000 	strh.w	r5, [sp]
    8856:	4601      	mov	r1, r0
    8858:	4632      	mov	r2, r6
    885a:	4810      	ldr	r0, [pc, #64]	; (889c <bt_finalize_init+0xd0>)
    885c:	f014 fb41 	bl	1cee2 <log_3>
}
    8860:	b007      	add	sp, #28
    8862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    8866:	4640      	mov	r0, r8
    8868:	f7fd fe72 	bl	6550 <bt_addr_le_str_real>
    886c:	f7fb f8ec 	bl	3a48 <log_strdup>
    8870:	4631      	mov	r1, r6
    8872:	4602      	mov	r2, r0
    8874:	463b      	mov	r3, r7
    8876:	4648      	mov	r0, r9
    8878:	f014 fb1a 	bl	1ceb0 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    887c:	3601      	adds	r6, #1
    887e:	e7ca      	b.n	8816 <bt_finalize_init+0x4a>
    8880:	20000000 	.word	0x20000000
    8884:	00021b6c 	.word	0x00021b6c
    8888:	00023702 	.word	0x00023702
    888c:	00021aac 	.word	0x00021aac
    8890:	00024704 	.word	0x00024704
    8894:	00024708 	.word	0x00024708
    8898:	00024728 	.word	0x00024728
    889c:	00024766 	.word	0x00024766
    88a0:	00024717 	.word	0x00024717

000088a4 <init_work>:
{
    88a4:	b510      	push	{r4, lr}
	err = bt_init();
    88a6:	f7f7 fd97 	bl	3d8 <bt_init>
	if (ready_cb) {
    88aa:	4b03      	ldr	r3, [pc, #12]	; (88b8 <init_work+0x14>)
    88ac:	681b      	ldr	r3, [r3, #0]
    88ae:	b113      	cbz	r3, 88b6 <init_work+0x12>
}
    88b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    88b4:	4718      	bx	r3
}
    88b6:	bd10      	pop	{r4, pc}
    88b8:	20001570 	.word	0x20001570

000088bc <bt_enable>:
{
    88bc:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    88be:	4d31      	ldr	r5, [pc, #196]	; (8984 <bt_enable+0xc8>)
    88c0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
{
    88c4:	b088      	sub	sp, #32
    88c6:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    88c8:	b973      	cbnz	r3, 88e8 <bt_enable+0x2c>
    88ca:	4b2f      	ldr	r3, [pc, #188]	; (8988 <bt_enable+0xcc>)
    88cc:	492f      	ldr	r1, [pc, #188]	; (898c <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
    88ce:	4830      	ldr	r0, [pc, #192]	; (8990 <bt_enable+0xd4>)
    88d0:	1ac9      	subs	r1, r1, r3
    88d2:	08c9      	lsrs	r1, r1, #3
    88d4:	0189      	lsls	r1, r1, #6
    88d6:	f041 0101 	orr.w	r1, r1, #1
    88da:	f014 fac8 	bl	1ce6e <log_0>
		return -ENODEV;
    88de:	f06f 0412 	mvn.w	r4, #18
}
    88e2:	4620      	mov	r0, r4
    88e4:	b008      	add	sp, #32
    88e6:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    88e8:	2100      	movs	r1, #0
    88ea:	f105 0098 	add.w	r0, r5, #152	; 0x98
    88ee:	f016 fc04 	bl	1f0fa <atomic_test_and_set_bit>
    88f2:	2800      	cmp	r0, #0
    88f4:	d143      	bne.n	897e <bt_enable+0xc2>
		err = bt_settings_init();
    88f6:	f7fe f96b 	bl	6bd0 <bt_settings_init>
		if (err) {
    88fa:	4604      	mov	r4, r0
    88fc:	2800      	cmp	r0, #0
    88fe:	d1f0      	bne.n	88e2 <bt_enable+0x26>
	ready_cb = cb;
    8900:	4b24      	ldr	r3, [pc, #144]	; (8994 <bt_enable+0xd8>)
    8902:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8904:	2200      	movs	r2, #0
    8906:	2300      	movs	r3, #0
    8908:	e9cd 2306 	strd	r2, r3, [sp, #24]
    890c:	f06f 0308 	mvn.w	r3, #8
    8910:	e9cd 0302 	strd	r0, r3, [sp, #8]
    8914:	e9cd 0000 	strd	r0, r0, [sp]
    8918:	9004      	str	r0, [sp, #16]
    891a:	4b1f      	ldr	r3, [pc, #124]	; (8998 <bt_enable+0xdc>)
    891c:	491f      	ldr	r1, [pc, #124]	; (899c <bt_enable+0xe0>)
    891e:	4820      	ldr	r0, [pc, #128]	; (89a0 <bt_enable+0xe4>)
    8920:	f44f 7220 	mov.w	r2, #640	; 0x280
    8924:	f013 faa6 	bl	1be74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8928:	491e      	ldr	r1, [pc, #120]	; (89a4 <bt_enable+0xe8>)
    892a:	481d      	ldr	r0, [pc, #116]	; (89a0 <bt_enable+0xe4>)
    892c:	f018 fd19 	bl	21362 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    8930:	f7fd ffb6 	bl	68a0 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    8934:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    8938:	68db      	ldr	r3, [r3, #12]
    893a:	4798      	blx	r3
	if (err) {
    893c:	4604      	mov	r4, r0
    893e:	b158      	cbz	r0, 8958 <bt_enable+0x9c>
    8940:	4b11      	ldr	r3, [pc, #68]	; (8988 <bt_enable+0xcc>)
    8942:	4a12      	ldr	r2, [pc, #72]	; (898c <bt_enable+0xd0>)
    8944:	1ad2      	subs	r2, r2, r3
    8946:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    8948:	0192      	lsls	r2, r2, #6
    894a:	4601      	mov	r1, r0
    894c:	f042 0201 	orr.w	r2, r2, #1
    8950:	4815      	ldr	r0, [pc, #84]	; (89a8 <bt_enable+0xec>)
    8952:	f014 fa99 	bl	1ce88 <log_1>
		return err;
    8956:	e7c4      	b.n	88e2 <bt_enable+0x26>
	if (!cb) {
    8958:	b926      	cbnz	r6, 8964 <bt_enable+0xa8>
}
    895a:	b008      	add	sp, #32
    895c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    8960:	f7f7 bd3a 	b.w	3d8 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8964:	4601      	mov	r1, r0
    8966:	f105 0094 	add.w	r0, r5, #148	; 0x94
    896a:	f016 fbc6 	bl	1f0fa <atomic_test_and_set_bit>
    896e:	2800      	cmp	r0, #0
    8970:	d1b7      	bne.n	88e2 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    8972:	480e      	ldr	r0, [pc, #56]	; (89ac <bt_enable+0xf0>)
    8974:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    8978:	f018 fb68 	bl	2104c <k_queue_append>
    897c:	e7b1      	b.n	88e2 <bt_enable+0x26>
		return -EALREADY;
    897e:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8982:	e7ae      	b.n	88e2 <bt_enable+0x26>
    8984:	20000000 	.word	0x20000000
    8988:	00021aac 	.word	0x00021aac
    898c:	00021b6c 	.word	0x00021b6c
    8990:	000248b2 	.word	0x000248b2
    8994:	20001570 	.word	0x20001570
    8998:	00007351 	.word	0x00007351
    899c:	200039c0 	.word	0x200039c0
    89a0:	20000c20 	.word	0x20000c20
    89a4:	000248cb 	.word	0x000248cb
    89a8:	000248d1 	.word	0x000248d1
    89ac:	200012a8 	.word	0x200012a8

000089b0 <bt_set_name>:
{
    89b0:	b530      	push	{r4, r5, lr}
    89b2:	b085      	sub	sp, #20
    89b4:	4604      	mov	r4, r0
	size_t len = strlen(name);
    89b6:	f016 f9ea 	bl	1ed8e <strlen>
	if (len >= sizeof(bt_dev.name)) {
    89ba:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    89bc:	4605      	mov	r5, r0
	if (len >= sizeof(bt_dev.name)) {
    89be:	d835      	bhi.n	8a2c <bt_set_name+0x7c>
	if (!strcmp(bt_dev.name, name)) {
    89c0:	481c      	ldr	r0, [pc, #112]	; (8a34 <bt_set_name+0x84>)
    89c2:	4621      	mov	r1, r4
    89c4:	f016 f9ea 	bl	1ed9c <strcmp>
    89c8:	b910      	cbnz	r0, 89d0 <bt_set_name+0x20>
	return 0;
    89ca:	2000      	movs	r0, #0
}
    89cc:	b005      	add	sp, #20
    89ce:	bd30      	pop	{r4, r5, pc}
	strncpy(bt_dev.name, name, sizeof(bt_dev.name));
    89d0:	2242      	movs	r2, #66	; 0x42
    89d2:	4621      	mov	r1, r4
    89d4:	4817      	ldr	r0, [pc, #92]	; (8a34 <bt_set_name+0x84>)
    89d6:	f016 f9c7 	bl	1ed68 <strncpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    89da:	4817      	ldr	r0, [pc, #92]	; (8a38 <bt_set_name+0x88>)
    89dc:	f016 fb6f 	bl	1f0be <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    89e0:	0603      	lsls	r3, r0, #24
    89e2:	d511      	bpl.n	8a08 <bt_set_name+0x58>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    89e4:	2309      	movs	r3, #9
    89e6:	4620      	mov	r0, r4
    89e8:	f88d 3000 	strb.w	r3, [sp]
    89ec:	f016 f9cf 	bl	1ed8e <strlen>
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    89f0:	2201      	movs	r2, #1
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    89f2:	f88d 0001 	strb.w	r0, [sp, #1]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    89f6:	a902      	add	r1, sp, #8
    89f8:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    89fc:	9401      	str	r4, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    89fe:	f8cd d008 	str.w	sp, [sp, #8]
    8a02:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    8a04:	f7ff fa08 	bl	7e18 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    8a08:	490a      	ldr	r1, [pc, #40]	; (8a34 <bt_set_name+0x84>)
    8a0a:	480c      	ldr	r0, [pc, #48]	; (8a3c <bt_set_name+0x8c>)
    8a0c:	462a      	mov	r2, r5
    8a0e:	f7fc f997 	bl	4d40 <settings_save_one>
		if (err) {
    8a12:	2800      	cmp	r0, #0
    8a14:	d0d9      	beq.n	89ca <bt_set_name+0x1a>
    8a16:	4b0a      	ldr	r3, [pc, #40]	; (8a40 <bt_set_name+0x90>)
    8a18:	490a      	ldr	r1, [pc, #40]	; (8a44 <bt_set_name+0x94>)
			BT_WARN("Unable to store name");
    8a1a:	480b      	ldr	r0, [pc, #44]	; (8a48 <bt_set_name+0x98>)
    8a1c:	1ac9      	subs	r1, r1, r3
    8a1e:	08c9      	lsrs	r1, r1, #3
    8a20:	0189      	lsls	r1, r1, #6
    8a22:	f041 0102 	orr.w	r1, r1, #2
    8a26:	f014 fa22 	bl	1ce6e <log_0>
    8a2a:	e7ce      	b.n	89ca <bt_set_name+0x1a>
		return -ENOMEM;
    8a2c:	f06f 000b 	mvn.w	r0, #11
    8a30:	e7cc      	b.n	89cc <bt_set_name+0x1c>
    8a32:	bf00      	nop
    8a34:	20000148 	.word	0x20000148
    8a38:	2000002c 	.word	0x2000002c
    8a3c:	000248ed 	.word	0x000248ed
    8a40:	00021aac 	.word	0x00021aac
    8a44:	00021b6c 	.word	0x00021b6c
    8a48:	000248f5 	.word	0x000248f5

00008a4c <bt_get_name>:
}
    8a4c:	4800      	ldr	r0, [pc, #0]	; (8a50 <bt_get_name+0x4>)
    8a4e:	4770      	bx	lr
    8a50:	20000148 	.word	0x20000148

00008a54 <bt_id_create>:
{
    8a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8a56:	460e      	mov	r6, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8a58:	4605      	mov	r5, r0
    8a5a:	b930      	cbnz	r0, 8a6a <bt_id_create+0x16>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    8a5c:	4b1b      	ldr	r3, [pc, #108]	; (8acc <bt_id_create+0x78>)
    8a5e:	79dc      	ldrb	r4, [r3, #7]
    8a60:	2c01      	cmp	r4, #1
    8a62:	d12a      	bne.n	8aba <bt_id_create+0x66>
		return -ENOMEM;
    8a64:	f06f 040b 	mvn.w	r4, #11
    8a68:	e01c      	b.n	8aa4 <bt_id_create+0x50>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8a6a:	2300      	movs	r3, #0
    8a6c:	4669      	mov	r1, sp
    8a6e:	9300      	str	r3, [sp, #0]
    8a70:	f8cd 3003 	str.w	r3, [sp, #3]
    8a74:	f016 fb29 	bl	1f0ca <bt_addr_le_cmp>
    8a78:	2800      	cmp	r0, #0
    8a7a:	d0ef      	beq.n	8a5c <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    8a7c:	782b      	ldrb	r3, [r5, #0]
    8a7e:	2b01      	cmp	r3, #1
    8a80:	d104      	bne.n	8a8c <bt_id_create+0x38>
    8a82:	79ab      	ldrb	r3, [r5, #6]
    8a84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8a88:	2bc0      	cmp	r3, #192	; 0xc0
    8a8a:	d00e      	beq.n	8aaa <bt_id_create+0x56>
    8a8c:	4b10      	ldr	r3, [pc, #64]	; (8ad0 <bt_id_create+0x7c>)
    8a8e:	4911      	ldr	r1, [pc, #68]	; (8ad4 <bt_id_create+0x80>)
			BT_ERR("Only static random identity address supported");
    8a90:	4811      	ldr	r0, [pc, #68]	; (8ad8 <bt_id_create+0x84>)
    8a92:	1ac9      	subs	r1, r1, r3
    8a94:	08c9      	lsrs	r1, r1, #3
    8a96:	0189      	lsls	r1, r1, #6
    8a98:	f041 0101 	orr.w	r1, r1, #1
    8a9c:	f014 f9e7 	bl	1ce6e <log_0>
			return -EINVAL;
    8aa0:	f06f 0415 	mvn.w	r4, #21
}
    8aa4:	4620      	mov	r0, r4
    8aa6:	b002      	add	sp, #8
    8aa8:	bd70      	pop	{r4, r5, r6, pc}
		if (id_find(addr) >= 0) {
    8aaa:	4628      	mov	r0, r5
    8aac:	f7fe f924 	bl	6cf8 <id_find>
    8ab0:	2800      	cmp	r0, #0
    8ab2:	dbd3      	blt.n	8a5c <bt_id_create+0x8>
			return -EALREADY;
    8ab4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8ab8:	e7f4      	b.n	8aa4 <bt_id_create+0x50>
	new_id = bt_dev.id_count++;
    8aba:	1c62      	adds	r2, r4, #1
    8abc:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    8abe:	4629      	mov	r1, r5
    8ac0:	4632      	mov	r2, r6
    8ac2:	4620      	mov	r0, r4
    8ac4:	f7ff fd02 	bl	84cc <id_create>
	return new_id;
    8ac8:	e7ec      	b.n	8aa4 <bt_id_create+0x50>
    8aca:	bf00      	nop
    8acc:	20000000 	.word	0x20000000
    8ad0:	00021aac 	.word	0x00021aac
    8ad4:	00021b6c 	.word	0x00021b6c
    8ad8:	0002490a 	.word	0x0002490a

00008adc <bt_setup_public_id_addr>:
{
    8adc:	b570      	push	{r4, r5, r6, lr}
    8ade:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    8ae0:	aa01      	add	r2, sp, #4
    8ae2:	2100      	movs	r1, #0
    8ae4:	f241 0009 	movw	r0, #4105	; 0x1009
    8ae8:	f7fe ff8a 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    8aec:	4e37      	ldr	r6, [pc, #220]	; (8bcc <bt_setup_public_id_addr+0xf0>)
    8aee:	4604      	mov	r4, r0
    8af0:	b168      	cbz	r0, 8b0e <bt_setup_public_id_addr+0x32>
    8af2:	4937      	ldr	r1, [pc, #220]	; (8bd0 <bt_setup_public_id_addr+0xf4>)
    8af4:	4b37      	ldr	r3, [pc, #220]	; (8bd4 <bt_setup_public_id_addr+0xf8>)
		BT_WARN("Failed to read public address");
    8af6:	4838      	ldr	r0, [pc, #224]	; (8bd8 <bt_setup_public_id_addr+0xfc>)
    8af8:	1ac9      	subs	r1, r1, r3
    8afa:	08c9      	lsrs	r1, r1, #3
    8afc:	0189      	lsls	r1, r1, #6
    8afe:	f041 0102 	orr.w	r1, r1, #2
    8b02:	f014 f9b4 	bl	1ce6e <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8b06:	2300      	movs	r3, #0
    8b08:	71f3      	strb	r3, [r6, #7]
}
    8b0a:	b00c      	add	sp, #48	; 0x30
    8b0c:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    8b0e:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8b10:	689d      	ldr	r5, [r3, #8]
    8b12:	9008      	str	r0, [sp, #32]
    8b14:	3501      	adds	r5, #1
    8b16:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    8b1a:	2206      	movs	r2, #6
    8b1c:	a908      	add	r1, sp, #32
    8b1e:	4628      	mov	r0, r5
    8b20:	f016 f957 	bl	1edd2 <memcmp>
    8b24:	b918      	cbnz	r0, 8b2e <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    8b26:	9801      	ldr	r0, [sp, #4]
    8b28:	f011 fae2 	bl	1a0f0 <net_buf_unref>
    8b2c:	e7eb      	b.n	8b06 <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    8b2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8b32:	2206      	movs	r2, #6
    8b34:	a904      	add	r1, sp, #16
    8b36:	4628      	mov	r0, r5
    8b38:	9304      	str	r3, [sp, #16]
    8b3a:	f8ad 3014 	strh.w	r3, [sp, #20]
    8b3e:	f016 f948 	bl	1edd2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    8b42:	2800      	cmp	r0, #0
    8b44:	d0ef      	beq.n	8b26 <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    8b46:	4629      	mov	r1, r5
    8b48:	f10d 0009 	add.w	r0, sp, #9
    8b4c:	f016 fac0 	bl	1f0d0 <bt_addr_copy>
	net_buf_unref(rsp);
    8b50:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    8b52:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    8b56:	f011 facb 	bl	1a0f0 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    8b5a:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    8b5c:	2210      	movs	r2, #16
    8b5e:	4621      	mov	r1, r4
    8b60:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    8b62:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    8b64:	f016 f970 	bl	1ee48 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    8b68:	f896 308a 	ldrb.w	r3, [r6, #138]	; 0x8a
    8b6c:	079b      	lsls	r3, r3, #30
    8b6e:	d510      	bpl.n	8b92 <bt_setup_public_id_addr+0xb6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    8b70:	aa04      	add	r2, sp, #16
    8b72:	4621      	mov	r1, r4
    8b74:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    8b78:	f7fe ff42 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    8b7c:	b1c8      	cbz	r0, 8bb2 <bt_setup_public_id_addr+0xd6>
    8b7e:	4914      	ldr	r1, [pc, #80]	; (8bd0 <bt_setup_public_id_addr+0xf4>)
    8b80:	4b14      	ldr	r3, [pc, #80]	; (8bd4 <bt_setup_public_id_addr+0xf8>)
		BT_WARN("Failed to read identity root");
    8b82:	4816      	ldr	r0, [pc, #88]	; (8bdc <bt_setup_public_id_addr+0x100>)
    8b84:	1ac9      	subs	r1, r1, r3
    8b86:	08c9      	lsrs	r1, r1, #3
    8b88:	0189      	lsls	r1, r1, #6
    8b8a:	f041 0102 	orr.w	r1, r1, #2
    8b8e:	f014 f96e 	bl	1ce6e <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    8b92:	a904      	add	r1, sp, #16
    8b94:	a808      	add	r0, sp, #32
    8b96:	f017 ff59 	bl	20a4c <bt_smp_irk_get>
    8b9a:	b1a8      	cbz	r0, 8bc8 <bt_setup_public_id_addr+0xec>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8b9c:	4810      	ldr	r0, [pc, #64]	; (8be0 <bt_setup_public_id_addr+0x104>)
    8b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8ba2:	f016 fa9b 	bl	1f0dc <atomic_or>
	uint8_t *irk = NULL;
    8ba6:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    8ba8:	a902      	add	r1, sp, #8
    8baa:	2000      	movs	r0, #0
    8bac:	f7ff fc8e 	bl	84cc <id_create>
    8bb0:	e7ab      	b.n	8b0a <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    8bb2:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    8bb4:	6899      	ldr	r1, [r3, #8]
    8bb6:	2210      	movs	r2, #16
    8bb8:	3101      	adds	r1, #1
    8bba:	a808      	add	r0, sp, #32
    8bbc:	f016 f919 	bl	1edf2 <memcpy>
	net_buf_unref(rsp);
    8bc0:	9804      	ldr	r0, [sp, #16]
    8bc2:	f011 fa95 	bl	1a0f0 <net_buf_unref>
    8bc6:	e7e4      	b.n	8b92 <bt_setup_public_id_addr+0xb6>
		irk = ir_irk;
    8bc8:	aa04      	add	r2, sp, #16
    8bca:	e7ed      	b.n	8ba8 <bt_setup_public_id_addr+0xcc>
    8bcc:	20000000 	.word	0x20000000
    8bd0:	00021b6c 	.word	0x00021b6c
    8bd4:	00021aac 	.word	0x00021aac
    8bd8:	00024938 	.word	0x00024938
    8bdc:	00024956 	.word	0x00024956
    8be0:	20000098 	.word	0x20000098

00008be4 <bt_read_static_addr>:
{
    8be4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8be8:	4b25      	ldr	r3, [pc, #148]	; (8c80 <bt_read_static_addr+0x9c>)
    8bea:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    8bee:	f014 0401 	ands.w	r4, r4, #1
{
    8bf2:	4607      	mov	r7, r0
    8bf4:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    8bf6:	d10a      	bne.n	8c0e <bt_read_static_addr+0x2a>
    8bf8:	4922      	ldr	r1, [pc, #136]	; (8c84 <bt_read_static_addr+0xa0>)
    8bfa:	4b23      	ldr	r3, [pc, #140]	; (8c88 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    8bfc:	4823      	ldr	r0, [pc, #140]	; (8c8c <bt_read_static_addr+0xa8>)
    8bfe:	1ac9      	subs	r1, r1, r3
    8c00:	08c9      	lsrs	r1, r1, #3
    8c02:	0189      	lsls	r1, r1, #6
    8c04:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    8c08:	f014 f931 	bl	1ce6e <log_0>
    8c0c:	e012      	b.n	8c34 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    8c0e:	aa01      	add	r2, sp, #4
    8c10:	2100      	movs	r1, #0
    8c12:	f64f 4009 	movw	r0, #64521	; 0xfc09
    8c16:	f7fe fef3 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    8c1a:	4605      	mov	r5, r0
    8c1c:	b170      	cbz	r0, 8c3c <bt_read_static_addr+0x58>
    8c1e:	4b1a      	ldr	r3, [pc, #104]	; (8c88 <bt_read_static_addr+0xa4>)
    8c20:	4918      	ldr	r1, [pc, #96]	; (8c84 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    8c22:	481b      	ldr	r0, [pc, #108]	; (8c90 <bt_read_static_addr+0xac>)
    8c24:	1ac9      	subs	r1, r1, r3
    8c26:	08c9      	lsrs	r1, r1, #3
    8c28:	0189      	lsls	r1, r1, #6
    8c2a:	f041 0102 	orr.w	r1, r1, #2
    8c2e:	f014 f91e 	bl	1ce6e <log_0>
		return 0;
    8c32:	2400      	movs	r4, #0
}
    8c34:	4620      	mov	r0, r4
    8c36:	b002      	add	sp, #8
    8c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    8c3c:	9b01      	ldr	r3, [sp, #4]
    8c3e:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    8c40:	785c      	ldrb	r4, [r3, #1]
    8c42:	42b4      	cmp	r4, r6
    8c44:	bf28      	it	cs
    8c46:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    8c48:	f04f 0816 	mov.w	r8, #22
    8c4c:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    8c4e:	42a5      	cmp	r5, r4
    8c50:	db0d      	blt.n	8c6e <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    8c52:	9801      	ldr	r0, [sp, #4]
    8c54:	f011 fa4c 	bl	1a0f0 <net_buf_unref>
	if (!cnt) {
    8c58:	2c00      	cmp	r4, #0
    8c5a:	d1eb      	bne.n	8c34 <bt_read_static_addr+0x50>
    8c5c:	4909      	ldr	r1, [pc, #36]	; (8c84 <bt_read_static_addr+0xa0>)
    8c5e:	4b0a      	ldr	r3, [pc, #40]	; (8c88 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    8c60:	480c      	ldr	r0, [pc, #48]	; (8c94 <bt_read_static_addr+0xb0>)
    8c62:	1ac9      	subs	r1, r1, r3
    8c64:	08c9      	lsrs	r1, r1, #3
    8c66:	0189      	lsls	r1, r1, #6
    8c68:	f041 0102 	orr.w	r1, r1, #2
    8c6c:	e7cc      	b.n	8c08 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    8c6e:	fb08 7005 	mla	r0, r8, r5, r7
    8c72:	2216      	movs	r2, #22
    8c74:	4631      	mov	r1, r6
    8c76:	f016 f8bc 	bl	1edf2 <memcpy>
	for (i = 0; i < cnt; i++) {
    8c7a:	3501      	adds	r5, #1
    8c7c:	e7e7      	b.n	8c4e <bt_read_static_addr+0x6a>
    8c7e:	bf00      	nop
    8c80:	20000000 	.word	0x20000000
    8c84:	00021b6c 	.word	0x00021b6c
    8c88:	00021aac 	.word	0x00021aac
    8c8c:	00024973 	.word	0x00024973
    8c90:	0002499f 	.word	0x0002499f
    8c94:	000249bf 	.word	0x000249bf

00008c98 <bt_setup_random_id_addr>:
{
    8c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    8c9c:	4c21      	ldr	r4, [pc, #132]	; (8d24 <bt_setup_random_id_addr+0x8c>)
    8c9e:	79e5      	ldrb	r5, [r4, #7]
{
    8ca0:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    8ca2:	bba5      	cbnz	r5, 8d0e <bt_setup_random_id_addr+0x76>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    8ca4:	2101      	movs	r1, #1
    8ca6:	a806      	add	r0, sp, #24
    8ca8:	f7ff ff9c 	bl	8be4 <bt_read_static_addr>
    8cac:	71e0      	strb	r0, [r4, #7]
		if (bt_dev.id_count) {
    8cae:	b370      	cbz	r0, 8d0e <bt_setup_random_id_addr+0x76>
    8cb0:	f04f 0916 	mov.w	r9, #22
    8cb4:	f104 0a98 	add.w	sl, r4, #152	; 0x98
    8cb8:	e01f      	b.n	8cfa <bt_setup_random_id_addr+0x62>
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    8cba:	fb09 f806 	mul.w	r8, r9, r6
    8cbe:	f108 0006 	add.w	r0, r8, #6
    8cc2:	ab06      	add	r3, sp, #24
    8cc4:	a902      	add	r1, sp, #8
    8cc6:	4418      	add	r0, r3
    8cc8:	f017 fec0 	bl	20a4c <bt_smp_irk_get>
    8ccc:	b1e8      	cbz	r0, 8d0a <bt_setup_random_id_addr+0x72>
    8cce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8cd2:	4650      	mov	r0, sl
    8cd4:	f016 fa02 	bl	1f0dc <atomic_or>
				uint8_t *irk = NULL;
    8cd8:	2700      	movs	r7, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    8cda:	ab06      	add	r3, sp, #24
    8cdc:	eb03 0108 	add.w	r1, r3, r8
    8ce0:	f10d 0001 	add.w	r0, sp, #1
    8ce4:	f016 f9f4 	bl	1f0d0 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    8ce8:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    8cea:	463a      	mov	r2, r7
    8cec:	4669      	mov	r1, sp
    8cee:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    8cf0:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    8cf4:	f7ff fbea 	bl	84cc <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    8cf8:	3501      	adds	r5, #1
    8cfa:	79e3      	ldrb	r3, [r4, #7]
    8cfc:	b2ee      	uxtb	r6, r5
    8cfe:	42b3      	cmp	r3, r6
    8d00:	d8db      	bhi.n	8cba <bt_setup_random_id_addr+0x22>
			return 0;
    8d02:	2000      	movs	r0, #0
}
    8d04:	b00c      	add	sp, #48	; 0x30
    8d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    8d0a:	af02      	add	r7, sp, #8
    8d0c:	e7e5      	b.n	8cda <bt_setup_random_id_addr+0x42>
    8d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    8d12:	4805      	ldr	r0, [pc, #20]	; (8d28 <bt_setup_random_id_addr+0x90>)
    8d14:	f016 f9e2 	bl	1f0dc <atomic_or>
	return bt_id_create(NULL, NULL);
    8d18:	2100      	movs	r1, #0
    8d1a:	4608      	mov	r0, r1
    8d1c:	f7ff fe9a 	bl	8a54 <bt_id_create>
    8d20:	e7f0      	b.n	8d04 <bt_setup_random_id_addr+0x6c>
    8d22:	bf00      	nop
    8d24:	20000000 	.word	0x20000000
    8d28:	20000098 	.word	0x20000098

00008d2c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    8d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8d30:	4c81      	ldr	r4, [pc, #516]	; (8f38 <bt_le_adv_start_legacy+0x20c>)
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    8d32:	6906      	ldr	r6, [r0, #16]
{
    8d34:	b08b      	sub	sp, #44	; 0x2c
    8d36:	4605      	mov	r5, r0
	struct bt_conn *conn = NULL;
    8d38:	f04f 0b00 	mov.w	fp, #0
    8d3c:	f104 0098 	add.w	r0, r4, #152	; 0x98
{
    8d40:	4689      	mov	r9, r1
    8d42:	4692      	mov	sl, r2
    8d44:	4698      	mov	r8, r3
	struct bt_conn *conn = NULL;
    8d46:	f8cd b00c 	str.w	fp, [sp, #12]
    8d4a:	f016 f9b8 	bl	1f0be <atomic_get>
	int err;
	struct bt_le_ext_adv *adv;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    8d4e:	0787      	lsls	r7, r0, #30
    8d50:	f140 80e3 	bpl.w	8f1a <bt_le_adv_start_legacy+0x1ee>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    8d54:	4628      	mov	r0, r5
    8d56:	f7fd ffe7 	bl	6d28 <valid_adv_param>
    8d5a:	4607      	mov	r7, r0
    8d5c:	2800      	cmp	r0, #0
    8d5e:	f000 80df 	beq.w	8f20 <bt_le_adv_start_legacy+0x1f4>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    8d62:	220f      	movs	r2, #15
    8d64:	4659      	mov	r1, fp
    8d66:	a806      	add	r0, sp, #24
    8d68:	f016 f86e 	bl	1ee48 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    8d6c:	68ab      	ldr	r3, [r5, #8]
    8d6e:	f8ad 3018 	strh.w	r3, [sp, #24]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    8d72:	68eb      	ldr	r3, [r5, #12]
    8d74:	f8ad 301a 	strh.w	r3, [sp, #26]
    8d78:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	set_param.channel_map  = 0x07;
    8d7c:	2307      	movs	r3, #7
    8d7e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	set_param.filter_policy = get_filter_policy(param->options);
    8d82:	f88d b026 	strb.w	fp, [sp, #38]	; 0x26
    8d86:	f016 f99a 	bl	1f0be <atomic_get>

	adv = adv_new_legacy();
	if (!adv || atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8d8a:	0640      	lsls	r0, r0, #25
    8d8c:	f100 80cb 	bmi.w	8f26 <bt_le_adv_start_legacy+0x1fa>
		return -EALREADY;
	}

	if (adv->id != param->id) {
    8d90:	7e22      	ldrb	r2, [r4, #24]
    8d92:	782b      	ldrb	r3, [r5, #0]
    8d94:	429a      	cmp	r2, r3
    8d96:	d005      	beq.n	8da4 <bt_le_adv_start_legacy+0x78>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8d98:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8d9c:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8da0:	f016 f97e 	bl	1f0a0 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
    8da4:	7828      	ldrb	r0, [r5, #0]
    8da6:	7620      	strb	r0, [r4, #24]
	bt_dev.adv_conn_id = adv->id;
    8da8:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    8dac:	6869      	ldr	r1, [r5, #4]
    8dae:	f10d 021d 	add.w	r2, sp, #29
    8db2:	f7fe ff01 	bl	7bb8 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    8db6:	4604      	mov	r4, r0
    8db8:	2800      	cmp	r0, #0
    8dba:	d16d      	bne.n	8e98 <bt_le_adv_start_legacy+0x16c>
		return err;
	}

	if (dir_adv) {
    8dbc:	2e00      	cmp	r6, #0
    8dbe:	d049      	beq.n	8e54 <bt_le_adv_start_legacy+0x128>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    8dc0:	6929      	ldr	r1, [r5, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    8dc2:	485e      	ldr	r0, [pc, #376]	; (8f3c <bt_le_adv_start_legacy+0x210>)
    8dc4:	f016 f987 	bl	1f0d6 <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    8dc8:	6868      	ldr	r0, [r5, #4]
    8dca:	07c1      	lsls	r1, r0, #31
    8dcc:	d54a      	bpl.n	8e64 <bt_le_adv_start_legacy+0x138>
		scannable = true;

		if (dir_adv) {
    8dce:	2e00      	cmp	r6, #0
    8dd0:	d045      	beq.n	8e5e <bt_le_adv_start_legacy+0x132>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    8dd2:	f010 0f10 	tst.w	r0, #16
    8dd6:	bf14      	ite	ne
    8dd8:	2304      	movne	r3, #4
    8dda:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    8ddc:	6929      	ldr	r1, [r5, #16]
    8dde:	f88d 301c 	strb.w	r3, [sp, #28]
    8de2:	f10d 001e 	add.w	r0, sp, #30
    8de6:	f016 f976 	bl	1f0d6 <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    8dea:	210f      	movs	r1, #15
    8dec:	f242 0006 	movw	r0, #8198	; 0x2006
    8df0:	f7fe fcaa 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    8df4:	4604      	mov	r4, r0
    8df6:	2800      	cmp	r0, #0
    8df8:	f000 8098 	beq.w	8f2c <bt_le_adv_start_legacy+0x200>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    8dfc:	220f      	movs	r2, #15
    8dfe:	a906      	add	r1, sp, #24
    8e00:	3008      	adds	r0, #8
    8e02:	f017 feb7 	bl	20b74 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    8e06:	2200      	movs	r2, #0
    8e08:	4621      	mov	r1, r4
    8e0a:	f242 0006 	movw	r0, #8198	; 0x2006
    8e0e:	f7fe fdf7 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    8e12:	2800      	cmp	r0, #0
    8e14:	f040 808d 	bne.w	8f32 <bt_le_adv_start_legacy+0x206>
		return err;
	}

	if (!dir_adv) {
    8e18:	b386      	cbz	r6, 8e7c <bt_le_adv_start_legacy+0x150>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8e1a:	686b      	ldr	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8e1c:	07da      	lsls	r2, r3, #31
    8e1e:	d43f      	bmi.n	8ea0 <bt_le_adv_start_legacy+0x174>
	return set_le_adv_enable_legacy(adv, enable);
    8e20:	4847      	ldr	r0, [pc, #284]	; (8f40 <bt_le_adv_start_legacy+0x214>)
    8e22:	2101      	movs	r1, #1
    8e24:	f7fe ff0a 	bl	7c3c <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    8e28:	4604      	mov	r4, r0
    8e2a:	2800      	cmp	r0, #0
    8e2c:	d06e      	beq.n	8f0c <bt_le_adv_start_legacy+0x1e0>
    8e2e:	4b45      	ldr	r3, [pc, #276]	; (8f44 <bt_le_adv_start_legacy+0x218>)
    8e30:	4945      	ldr	r1, [pc, #276]	; (8f48 <bt_le_adv_start_legacy+0x21c>)
		BT_ERR("Failed to start advertiser");
    8e32:	4846      	ldr	r0, [pc, #280]	; (8f4c <bt_le_adv_start_legacy+0x220>)
    8e34:	1ac9      	subs	r1, r1, r3
    8e36:	08c9      	lsrs	r1, r1, #3
    8e38:	0189      	lsls	r1, r1, #6
    8e3a:	f041 0101 	orr.w	r1, r1, #1
    8e3e:	f014 f816 	bl	1ce6e <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    8e42:	9803      	ldr	r0, [sp, #12]
    8e44:	b340      	cbz	r0, 8e98 <bt_le_adv_start_legacy+0x16c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8e46:	2100      	movs	r1, #0
    8e48:	f000 fec2 	bl	9bd0 <bt_conn_set_state>
			bt_conn_unref(conn);
    8e4c:	9803      	ldr	r0, [sp, #12]
    8e4e:	f016 fb50 	bl	1f4f2 <bt_conn_unref>
    8e52:	e021      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    8e54:	9604      	str	r6, [sp, #16]
    8e56:	a904      	add	r1, sp, #16
    8e58:	f8cd 6013 	str.w	r6, [sp, #19]
    8e5c:	e7b1      	b.n	8dc2 <bt_le_adv_start_legacy+0x96>
			set_param.type = BT_HCI_ADV_IND;
    8e5e:	f88d 601c 	strb.w	r6, [sp, #28]
    8e62:	e7c2      	b.n	8dea <bt_le_adv_start_legacy+0xbe>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    8e64:	f1b8 0f00 	cmp.w	r8, #0
    8e68:	d106      	bne.n	8e78 <bt_le_adv_start_legacy+0x14c>
    8e6a:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    8e6e:	f1c7 0303 	rsb	r3, r7, #3
    8e72:	f88d 301c 	strb.w	r3, [sp, #28]
    8e76:	e7b8      	b.n	8dea <bt_le_adv_start_legacy+0xbe>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    8e78:	2701      	movs	r7, #1
    8e7a:	e7f8      	b.n	8e6e <bt_le_adv_start_legacy+0x142>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    8e7c:	686b      	ldr	r3, [r5, #4]
    8e7e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    8e82:	e9cd 7300 	strd	r7, r3, [sp]
    8e86:	4642      	mov	r2, r8
    8e88:	9b14      	ldr	r3, [sp, #80]	; 0x50
    8e8a:	4651      	mov	r1, sl
    8e8c:	4648      	mov	r0, r9
    8e8e:	f7ff f833 	bl	7ef8 <le_adv_update.constprop.0>
		if (err) {
    8e92:	4604      	mov	r4, r0
    8e94:	2800      	cmp	r0, #0
    8e96:	d0c0      	beq.n	8e1a <bt_le_adv_start_legacy+0xee>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    8e98:	4620      	mov	r0, r4
    8e9a:	b00b      	add	sp, #44	; 0x2c
    8e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    8ea0:	4827      	ldr	r0, [pc, #156]	; (8f40 <bt_le_adv_start_legacy+0x214>)
    8ea2:	a903      	add	r1, sp, #12
    8ea4:	f7fe fbce 	bl	7644 <le_adv_start_add_conn>
		if (err) {
    8ea8:	4604      	mov	r4, r0
    8eaa:	2800      	cmp	r0, #0
    8eac:	d0b8      	beq.n	8e20 <bt_le_adv_start_legacy+0xf4>
			if (err == -ENOMEM && !dir_adv &&
    8eae:	f110 0f0c 	cmn.w	r0, #12
    8eb2:	d1f1      	bne.n	8e98 <bt_le_adv_start_legacy+0x16c>
    8eb4:	2e00      	cmp	r6, #0
    8eb6:	d1ef      	bne.n	8e98 <bt_le_adv_start_legacy+0x16c>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    8eb8:	686b      	ldr	r3, [r5, #4]
			if (err == -ENOMEM && !dir_adv &&
    8eba:	079b      	lsls	r3, r3, #30
    8ebc:	d4ec      	bmi.n	8e98 <bt_le_adv_start_legacy+0x16c>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    8ebe:	686c      	ldr	r4, [r5, #4]
    8ec0:	f084 0402 	eor.w	r4, r4, #2
    8ec4:	f3c4 0440 	ubfx	r4, r4, #1, #1
    8ec8:	f004 0201 	and.w	r2, r4, #1
    8ecc:	4820      	ldr	r0, [pc, #128]	; (8f50 <bt_le_adv_start_legacy+0x224>)
    8ece:	210c      	movs	r1, #12
    8ed0:	f016 f91e 	bl	1f110 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    8ed4:	686a      	ldr	r2, [r5, #4]
    8ed6:	481e      	ldr	r0, [pc, #120]	; (8f50 <bt_le_adv_start_legacy+0x224>)
    8ed8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    8edc:	2107      	movs	r1, #7
    8ede:	f016 f917 	bl	1f110 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    8ee2:	686a      	ldr	r2, [r5, #4]
    8ee4:	481a      	ldr	r0, [pc, #104]	; (8f50 <bt_le_adv_start_legacy+0x224>)
    8ee6:	f002 0201 	and.w	r2, r2, #1
    8eea:	2108      	movs	r1, #8
    8eec:	f016 f910 	bl	1f110 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    8ef0:	4817      	ldr	r0, [pc, #92]	; (8f50 <bt_le_adv_start_legacy+0x224>)
    8ef2:	463a      	mov	r2, r7
    8ef4:	2109      	movs	r1, #9
    8ef6:	f016 f90b 	bl	1f110 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    8efa:	686a      	ldr	r2, [r5, #4]
    8efc:	4814      	ldr	r0, [pc, #80]	; (8f50 <bt_le_adv_start_legacy+0x224>)
    8efe:	f3c2 0280 	ubfx	r2, r2, #2, #1
    8f02:	210b      	movs	r1, #11
    8f04:	f016 f904 	bl	1f110 <atomic_set_bit_to>
	return 0;
    8f08:	2400      	movs	r4, #0
    8f0a:	e7c5      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    8f0c:	9803      	ldr	r0, [sp, #12]
    8f0e:	b108      	cbz	r0, 8f14 <bt_le_adv_start_legacy+0x1e8>
		bt_conn_unref(conn);
    8f10:	f016 faef 	bl	1f4f2 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    8f14:	2e00      	cmp	r6, #0
    8f16:	d1d7      	bne.n	8ec8 <bt_le_adv_start_legacy+0x19c>
    8f18:	e7d1      	b.n	8ebe <bt_le_adv_start_legacy+0x192>
		return -EAGAIN;
    8f1a:	f06f 040a 	mvn.w	r4, #10
    8f1e:	e7bb      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
		return -EINVAL;
    8f20:	f06f 0415 	mvn.w	r4, #21
    8f24:	e7b8      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
		return -EALREADY;
    8f26:	f06f 0444 	mvn.w	r4, #68	; 0x44
    8f2a:	e7b5      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
		return -ENOBUFS;
    8f2c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    8f30:	e7b2      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
    8f32:	4604      	mov	r4, r0
    8f34:	e7b0      	b.n	8e98 <bt_le_adv_start_legacy+0x16c>
    8f36:	bf00      	nop
    8f38:	20000000 	.word	0x20000000
    8f3c:	20000023 	.word	0x20000023
    8f40:	20000018 	.word	0x20000018
    8f44:	00021aac 	.word	0x00021aac
    8f48:	00021b6c 	.word	0x00021b6c
    8f4c:	000249e8 	.word	0x000249e8
    8f50:	2000002c 	.word	0x2000002c

00008f54 <bt_le_adv_stop>:

	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
}

int bt_le_adv_stop(void)
{
    8f54:	b530      	push	{r4, r5, lr}
    8f56:	4c22      	ldr	r4, [pc, #136]	; (8fe0 <bt_le_adv_stop+0x8c>)
    8f58:	b085      	sub	sp, #20
    8f5a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8f5e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8f62:	f016 f89d 	bl	1f0a0 <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8f66:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8f6a:	f016 f8a8 	bl	1f0be <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    8f6e:	0642      	lsls	r2, r0, #25
    8f70:	f3c0 1380 	ubfx	r3, r0, #6, #1
    8f74:	d531      	bpl.n	8fda <bt_le_adv_stop+0x86>
    8f76:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8f7a:	f016 f8a0 	bl	1f0be <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    8f7e:	05c3      	lsls	r3, r0, #23
    8f80:	d521      	bpl.n	8fc6 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    8f82:	2300      	movs	r3, #0
    8f84:	4669      	mov	r1, sp
    8f86:	f104 0023 	add.w	r0, r4, #35	; 0x23
    8f8a:	9300      	str	r3, [sp, #0]
    8f8c:	f8cd 3003 	str.w	r3, [sp, #3]
    8f90:	f016 f89b 	bl	1f0ca <bt_addr_le_cmp>
    8f94:	7e25      	ldrb	r5, [r4, #24]
    8f96:	b9e0      	cbnz	r0, 8fd2 <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    8f98:	4b12      	ldr	r3, [pc, #72]	; (8fe4 <bt_le_adv_stop+0x90>)
    8f9a:	889a      	ldrh	r2, [r3, #4]
    8f9c:	6818      	ldr	r0, [r3, #0]
    8f9e:	799b      	ldrb	r3, [r3, #6]
    8fa0:	f8ad 200c 	strh.w	r2, [sp, #12]
    8fa4:	9002      	str	r0, [sp, #8]
    8fa6:	f88d 300e 	strb.w	r3, [sp, #14]
    8faa:	2204      	movs	r2, #4
    8fac:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    8fae:	4628      	mov	r0, r5
    8fb0:	f000 fdc2 	bl	9b38 <bt_conn_lookup_state_le>
    8fb4:	4604      	mov	r4, r0
	if (conn) {
    8fb6:	b130      	cbz	r0, 8fc6 <bt_le_adv_stop+0x72>
		conn->err = status;
    8fb8:	2100      	movs	r1, #0
    8fba:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8fbc:	f000 fe08 	bl	9bd0 <bt_conn_set_state>
		bt_conn_unref(conn);
    8fc0:	4620      	mov	r0, r4
    8fc2:	f016 fa96 	bl	1f4f2 <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    8fc6:	4808      	ldr	r0, [pc, #32]	; (8fe8 <bt_le_adv_stop+0x94>)
    8fc8:	2100      	movs	r1, #0
    8fca:	f7fe fe37 	bl	7c3c <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    8fce:	b005      	add	sp, #20
    8fd0:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    8fd2:	2205      	movs	r2, #5
    8fd4:	f104 0123 	add.w	r1, r4, #35	; 0x23
    8fd8:	e7e9      	b.n	8fae <bt_le_adv_stop+0x5a>
		return 0;
    8fda:	4618      	mov	r0, r3
    8fdc:	e7f7      	b.n	8fce <bt_le_adv_stop+0x7a>
    8fde:	bf00      	nop
    8fe0:	20000000 	.word	0x20000000
    8fe4:	00021c90 	.word	0x00021c90
    8fe8:	20000018 	.word	0x20000018

00008fec <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    8fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8fee:	4c1f      	ldr	r4, [pc, #124]	; (906c <bt_le_adv_resume+0x80>)
    8ff0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    8ff4:	f016 f863 	bl	1f0be <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    8ff8:	04c0      	lsls	r0, r0, #19
    8ffa:	d535      	bpl.n	9068 <bt_le_adv_resume+0x7c>
    8ffc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9000:	f016 f85d 	bl	1f0be <atomic_get>
    9004:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9006:	f3c0 1580 	ubfx	r5, r0, #6, #1
    900a:	d42d      	bmi.n	9068 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    900c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9010:	f016 f855 	bl	1f0be <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    9014:	05c2      	lsls	r2, r0, #23
    9016:	d527      	bpl.n	9068 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    9018:	a901      	add	r1, sp, #4
    901a:	f104 0018 	add.w	r0, r4, #24
    901e:	f7fe fb11 	bl	7644 <le_adv_start_add_conn>
	if (err) {
    9022:	bb08      	cbnz	r0, 9068 <bt_le_adv_resume+0x7c>
    9024:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    9028:	f016 f849 	bl	1f0be <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    902c:	0503      	lsls	r3, r0, #20
    902e:	d402      	bmi.n	9036 <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    9030:	7e20      	ldrb	r0, [r4, #24]
    9032:	f7fe fd8b 	bl	7b4c <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    9036:	480e      	ldr	r0, [pc, #56]	; (9070 <bt_le_adv_resume+0x84>)
    9038:	2101      	movs	r1, #1
    903a:	f7fe fdff 	bl	7c3c <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    903e:	b150      	cbz	r0, 9056 <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9040:	9801      	ldr	r0, [sp, #4]
    9042:	2100      	movs	r1, #0
    9044:	f000 fdc4 	bl	9bd0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9048:	480a      	ldr	r0, [pc, #40]	; (9074 <bt_le_adv_resume+0x88>)
    904a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    904e:	f016 f827 	bl	1f0a0 <atomic_and>
	return (old & mask) != 0;
    9052:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    9056:	9801      	ldr	r0, [sp, #4]
    9058:	f016 fa4b 	bl	1f4f2 <bt_conn_unref>
	if (persist_paused) {
    905c:	b125      	cbz	r5, 9068 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    905e:	4805      	ldr	r0, [pc, #20]	; (9074 <bt_le_adv_resume+0x88>)
    9060:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9064:	f016 f83a 	bl	1f0dc <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    9068:	b003      	add	sp, #12
    906a:	bd30      	pop	{r4, r5, pc}
    906c:	20000000 	.word	0x20000000
    9070:	20000018 	.word	0x20000018
    9074:	2000002c 	.word	0x2000002c

00009078 <enh_conn_complete>:
{
    9078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    907c:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9080:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    9084:	b086      	sub	sp, #24
    9086:	4604      	mov	r4, r0
    9088:	4873      	ldr	r0, [pc, #460]	; (9258 <enh_conn_complete+0x1e0>)
    908a:	f016 f809 	bl	1f0a0 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    908e:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9090:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    9094:	d504      	bpl.n	90a0 <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    9096:	4971      	ldr	r1, [pc, #452]	; (925c <enh_conn_complete+0x1e4>)
    9098:	2200      	movs	r2, #0
    909a:	2002      	movs	r0, #2
    909c:	f005 fb3e 	bl	e71c <bt_keys_foreach>
	if (evt->status) {
    90a0:	7825      	ldrb	r5, [r4, #0]
    90a2:	b365      	cbz	r5, 90fe <enh_conn_complete+0x86>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    90a4:	2d3c      	cmp	r5, #60	; 0x3c
    90a6:	d11e      	bne.n	90e6 <enh_conn_complete+0x6e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    90a8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    90ac:	486c      	ldr	r0, [pc, #432]	; (9260 <enh_conn_complete+0x1e8>)
    90ae:	f015 fff7 	bl	1f0a0 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    90b2:	2000      	movs	r0, #0
    90b4:	f7fe f862 	bl	717c <find_pending_connect.part.0>
		if (!conn) {
    90b8:	4604      	mov	r4, r0
    90ba:	b960      	cbnz	r0, 90d6 <enh_conn_complete+0x5e>
    90bc:	4969      	ldr	r1, [pc, #420]	; (9264 <enh_conn_complete+0x1ec>)
    90be:	4b6a      	ldr	r3, [pc, #424]	; (9268 <enh_conn_complete+0x1f0>)
			BT_ERR("No pending slave connection");
    90c0:	486a      	ldr	r0, [pc, #424]	; (926c <enh_conn_complete+0x1f4>)
    90c2:	1ac9      	subs	r1, r1, r3
    90c4:	08c9      	lsrs	r1, r1, #3
    90c6:	0189      	lsls	r1, r1, #6
    90c8:	f041 0101 	orr.w	r1, r1, #1
    90cc:	f013 fecf 	bl	1ce6e <log_0>
}
    90d0:	b006      	add	sp, #24
    90d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    90d6:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    90d8:	2100      	movs	r1, #0
    90da:	f000 fd79 	bl	9bd0 <bt_conn_set_state>
		bt_conn_unref(conn);
    90de:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    90e0:	f016 fa07 	bl	1f4f2 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    90e4:	e7f4      	b.n	90d0 <enh_conn_complete+0x58>
    90e6:	4b60      	ldr	r3, [pc, #384]	; (9268 <enh_conn_complete+0x1f0>)
    90e8:	4a5e      	ldr	r2, [pc, #376]	; (9264 <enh_conn_complete+0x1ec>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    90ea:	4861      	ldr	r0, [pc, #388]	; (9270 <enh_conn_complete+0x1f8>)
    90ec:	1ad2      	subs	r2, r2, r3
    90ee:	08d2      	lsrs	r2, r2, #3
    90f0:	0192      	lsls	r2, r2, #6
    90f2:	f042 0202 	orr.w	r2, r2, #2
    90f6:	4629      	mov	r1, r5
    90f8:	f013 fec6 	bl	1ce88 <log_1>
		return;
    90fc:	e7e8      	b.n	90d0 <enh_conn_complete+0x58>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    90fe:	7923      	ldrb	r3, [r4, #4]
    9100:	3b02      	subs	r3, #2
    9102:	2b01      	cmp	r3, #1
    9104:	f104 0604 	add.w	r6, r4, #4
    9108:	d837      	bhi.n	917a <enh_conn_complete+0x102>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    910a:	4631      	mov	r1, r6
    910c:	a804      	add	r0, sp, #16
    910e:	f015 ffe2 	bl	1f0d6 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9112:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9116:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    911a:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    911c:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    9120:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    9124:	f015 ffd4 	bl	1f0d0 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    9128:	2301      	movs	r3, #1
    912a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    912e:	78e3      	ldrb	r3, [r4, #3]
    9130:	2b01      	cmp	r3, #1
    9132:	d10c      	bne.n	914e <enh_conn_complete+0xd6>
    9134:	a804      	add	r0, sp, #16
    9136:	f7fe f821 	bl	717c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    913a:	78e3      	ldrb	r3, [r4, #3]
    913c:	2b01      	cmp	r3, #1
    913e:	4605      	mov	r5, r0
    9140:	d104      	bne.n	914c <enh_conn_complete+0xd4>
    9142:	4847      	ldr	r0, [pc, #284]	; (9260 <enh_conn_complete+0x1e8>)
    9144:	f06f 0140 	mvn.w	r1, #64	; 0x40
    9148:	f015 ffaa 	bl	1f0a0 <atomic_and>
	if (!conn) {
    914c:	bb45      	cbnz	r5, 91a0 <enh_conn_complete+0x128>
    914e:	4a46      	ldr	r2, [pc, #280]	; (9268 <enh_conn_complete+0x1f0>)
    9150:	4c44      	ldr	r4, [pc, #272]	; (9264 <enh_conn_complete+0x1ec>)
		BT_ERR("No pending conn for peer %s",
    9152:	4630      	mov	r0, r6
    9154:	1aa4      	subs	r4, r4, r2
    9156:	f7fd f9fb 	bl	6550 <bt_addr_le_str_real>
    915a:	f7fa fc75 	bl	3a48 <log_strdup>
    915e:	08e4      	lsrs	r4, r4, #3
    9160:	01a4      	lsls	r4, r4, #6
    9162:	f044 0401 	orr.w	r4, r4, #1
    9166:	4601      	mov	r1, r0
    9168:	4622      	mov	r2, r4
    916a:	4842      	ldr	r0, [pc, #264]	; (9274 <enh_conn_complete+0x1fc>)
    916c:	f013 fe8c 	bl	1ce88 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    9170:	211f      	movs	r1, #31
    9172:	4638      	mov	r0, r7
    9174:	f016 f842 	bl	1f1fc <bt_hci_disconnect>
		return;
    9178:	e7aa      	b.n	90d0 <enh_conn_complete+0x58>
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    917a:	78e3      	ldrb	r3, [r4, #3]
    917c:	2b01      	cmp	r3, #1
    917e:	bf04      	itt	eq
    9180:	4b3d      	ldreq	r3, [pc, #244]	; (9278 <enh_conn_complete+0x200>)
    9182:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    9186:	4631      	mov	r1, r6
    9188:	4628      	mov	r0, r5
    918a:	f016 f82f 	bl	1f1ec <bt_lookup_id_addr>
    918e:	4601      	mov	r1, r0
    9190:	a804      	add	r0, sp, #16
    9192:	f015 ffa0 	bl	1f0d6 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    9196:	4631      	mov	r1, r6
    9198:	a802      	add	r0, sp, #8
    919a:	f015 ff9c 	bl	1f0d6 <bt_addr_le_copy>
    919e:	e7c6      	b.n	912e <enh_conn_complete+0xb6>
	conn->handle = handle;
    91a0:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    91a2:	a904      	add	r1, sp, #16
	conn->handle = handle;
    91a4:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    91a8:	f015 ff95 	bl	1f0d6 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    91ac:	7e22      	ldrb	r2, [r4, #24]
    91ae:	7de3      	ldrb	r3, [r4, #23]
    91b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    91b4:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    91b8:	7ea2      	ldrb	r2, [r4, #26]
    91ba:	7e63      	ldrb	r3, [r4, #25]
    91bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    91c0:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    91c4:	7ee3      	ldrb	r3, [r4, #27]
    91c6:	7f22      	ldrb	r2, [r4, #28]
    91c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    91cc:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    91d0:	78e7      	ldrb	r7, [r4, #3]
    91d2:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    91d4:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    91d6:	2f01      	cmp	r7, #1
	conn->err = 0U;
    91d8:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    91da:	d128      	bne.n	922e <enh_conn_complete+0x1b6>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    91dc:	4e26      	ldr	r6, [pc, #152]	; (9278 <enh_conn_complete+0x200>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    91de:	a902      	add	r1, sp, #8
    91e0:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    91e4:	f015 ff77 	bl	1f0d6 <bt_addr_le_copy>
    91e8:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    91ec:	f015 ff67 	bl	1f0be <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    91f0:	0502      	lsls	r2, r0, #20
    91f2:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    91f6:	d426      	bmi.n	9246 <enh_conn_complete+0x1ce>
				if (bt_addr_cmp(&evt->local_rpa,
    91f8:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    91fa:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    91fe:	2206      	movs	r2, #6
    9200:	4669      	mov	r1, sp
    9202:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    9204:	9300      	str	r3, [sp, #0]
    9206:	f8ad 3004 	strh.w	r3, [sp, #4]
    920a:	f015 fde2 	bl	1edd2 <memcmp>
    920e:	4603      	mov	r3, r0
    9210:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    9214:	b1a3      	cbz	r3, 9240 <enh_conn_complete+0x1c8>
					bt_addr_copy(&conn->le.resp_addr.a,
    9216:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    9218:	f015 ff5a 	bl	1f0d0 <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    921c:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    9220:	2200      	movs	r2, #0
    9222:	f001 0340 	and.w	r3, r1, #64	; 0x40
    9226:	4313      	orrs	r3, r2
    9228:	d001      	beq.n	922e <enh_conn_complete+0x1b6>
			bt_le_adv_resume();
    922a:	f7ff fedf 	bl	8fec <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    922e:	2107      	movs	r1, #7
    9230:	4628      	mov	r0, r5
    9232:	f000 fccd 	bl	9bd0 <bt_conn_set_state>
	conn_auto_initiate(conn);
    9236:	4628      	mov	r0, r5
    9238:	f7fe fed2 	bl	7fe0 <conn_auto_initiate>
	bt_conn_unref(conn);
    923c:	4628      	mov	r0, r5
    923e:	e74f      	b.n	90e0 <enh_conn_complete+0x68>
					bt_addr_copy(&conn->le.resp_addr.a,
    9240:	f106 0131 	add.w	r1, r6, #49	; 0x31
    9244:	e7e8      	b.n	9218 <enh_conn_complete+0x1a0>
						&bt_dev.id_addr[conn->id]);
    9246:	7a29      	ldrb	r1, [r5, #8]
    9248:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    924c:	4431      	add	r1, r6
    924e:	f105 0096 	add.w	r0, r5, #150	; 0x96
    9252:	f015 ff40 	bl	1f0d6 <bt_addr_le_copy>
    9256:	e7e1      	b.n	921c <enh_conn_complete+0x1a4>
    9258:	20000098 	.word	0x20000098
    925c:	0001f2f7 	.word	0x0001f2f7
    9260:	2000002c 	.word	0x2000002c
    9264:	00021b6c 	.word	0x00021b6c
    9268:	00021aac 	.word	0x00021aac
    926c:	00024a03 	.word	0x00024a03
    9270:	00024a1f 	.word	0x00024a1f
    9274:	00024a38 	.word	0x00024a38
    9278:	20000000 	.word	0x20000000

0000927c <le_legacy_conn_complete>:
{
    927c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    927e:	6881      	ldr	r1, [r0, #8]
{
    9280:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    9282:	780b      	ldrb	r3, [r1, #0]
    9284:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    9288:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    928c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    9290:	78cb      	ldrb	r3, [r1, #3]
    9292:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    9296:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    929a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    929e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    92a2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    92a6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    92aa:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    92ae:	7c4b      	ldrb	r3, [r1, #17]
    92b0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    92b4:	a803      	add	r0, sp, #12
    92b6:	3104      	adds	r1, #4
    92b8:	f015 ff0d 	bl	1f0d6 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    92bc:	f10d 0013 	add.w	r0, sp, #19
    92c0:	4908      	ldr	r1, [pc, #32]	; (92e4 <le_legacy_conn_complete+0x68>)
    92c2:	f015 ff05 	bl	1f0d0 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    92c6:	2300      	movs	r3, #0
    92c8:	4669      	mov	r1, sp
    92ca:	f10d 0019 	add.w	r0, sp, #25
    92ce:	9300      	str	r3, [sp, #0]
    92d0:	f8ad 3004 	strh.w	r3, [sp, #4]
    92d4:	f015 fefc 	bl	1f0d0 <bt_addr_copy>
	enh_conn_complete(&enh);
    92d8:	a802      	add	r0, sp, #8
    92da:	f7ff fecd 	bl	9078 <enh_conn_complete>
}
    92de:	b00b      	add	sp, #44	; 0x2c
    92e0:	f85d fb04 	ldr.w	pc, [sp], #4
    92e4:	20000031 	.word	0x20000031

000092e8 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    92e8:	b538      	push	{r3, r4, r5, lr}
    92ea:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    92ec:	4805      	ldr	r0, [pc, #20]	; (9304 <bt_buf_get_rx+0x1c>)
    92ee:	f017 fbe5 	bl	20abc <net_buf_alloc_fixed>
#endif

	if (buf) {
    92f2:	4604      	mov	r4, r0
    92f4:	b120      	cbz	r0, 9300 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    92f6:	2100      	movs	r1, #0
    92f8:	3008      	adds	r0, #8
    92fa:	f017 fbfe 	bl	20afa <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    92fe:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    9300:	4620      	mov	r0, r4
    9302:	bd38      	pop	{r3, r4, r5, pc}
    9304:	20000a70 	.word	0x20000a70

00009308 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    9308:	b570      	push	{r4, r5, r6, lr}
    930a:	4602      	mov	r2, r0
    930c:	460b      	mov	r3, r1
	__asm__ volatile(
    930e:	f04f 0120 	mov.w	r1, #32
    9312:	f3ef 8511 	mrs	r5, BASEPRI
    9316:	f381 8811 	msr	BASEPRI, r1
    931a:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    931e:	480c      	ldr	r0, [pc, #48]	; (9350 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    9320:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    9322:	f8d0 40e8 	ldr.w	r4, [r0, #232]	; 0xe8
	bt_dev.sent_cmd = NULL;
    9326:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
	__asm__ volatile(
    932a:	f385 8811 	msr	BASEPRI, r5
    932e:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    9332:	b924      	cbnz	r4, 933e <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    9334:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    9338:	2001      	movs	r0, #1
    933a:	f7ff bfd5 	b.w	92e8 <bt_buf_get_rx>
    933e:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9340:	f104 0008 	add.w	r0, r4, #8
    9344:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    9346:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    9348:	f017 fbd7 	bl	20afa <net_buf_simple_reserve>
}
    934c:	4620      	mov	r0, r4
    934e:	bd70      	pop	{r4, r5, r6, pc}
    9350:	20000000 	.word	0x20000000

00009354 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    9354:	b570      	push	{r4, r5, r6, lr}
    9356:	4604      	mov	r4, r0
	switch (evt) {
    9358:	2c0f      	cmp	r4, #15
{
    935a:	460d      	mov	r5, r1
    935c:	4610      	mov	r0, r2
    935e:	4619      	mov	r1, r3
	switch (evt) {
    9360:	d805      	bhi.n	936e <bt_buf_get_evt+0x1a>
    9362:	2c0d      	cmp	r4, #13
    9364:	d912      	bls.n	938c <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    9366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    936a:	f7ff bfcd 	b.w	9308 <bt_buf_get_cmd_complete>
	switch (evt) {
    936e:	2c13      	cmp	r4, #19
    9370:	d10c      	bne.n	938c <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    9372:	480b      	ldr	r0, [pc, #44]	; (93a0 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    9374:	f017 fba2 	bl	20abc <net_buf_alloc_fixed>
			if (buf) {
    9378:	4604      	mov	r4, r0
    937a:	b128      	cbz	r0, 9388 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    937c:	2100      	movs	r1, #0
    937e:	3008      	adds	r0, #8
    9380:	f017 fbbb 	bl	20afa <net_buf_simple_reserve>
    9384:	2301      	movs	r3, #1
    9386:	7523      	strb	r3, [r4, #20]
}
    9388:	4620      	mov	r0, r4
    938a:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    938c:	4602      	mov	r2, r0
    938e:	460b      	mov	r3, r1
		if (discardable) {
    9390:	b10d      	cbz	r5, 9396 <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    9392:	4804      	ldr	r0, [pc, #16]	; (93a4 <bt_buf_get_evt+0x50>)
    9394:	e7ee      	b.n	9374 <bt_buf_get_evt+0x20>
}
    9396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    939a:	2001      	movs	r0, #1
    939c:	f7ff bfa4 	b.w	92e8 <bt_buf_get_rx>
    93a0:	20000a98 	.word	0x20000a98
    93a4:	200009f8 	.word	0x200009f8

000093a8 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    93a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    93aa:	4d21      	ldr	r5, [pc, #132]	; (9430 <bt_pub_key_gen+0x88>)
    93ac:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
    93b0:	f003 0306 	and.w	r3, r3, #6
    93b4:	2b06      	cmp	r3, #6
    93b6:	d00d      	beq.n	93d4 <bt_pub_key_gen+0x2c>
    93b8:	4b1e      	ldr	r3, [pc, #120]	; (9434 <bt_pub_key_gen+0x8c>)
    93ba:	491f      	ldr	r1, [pc, #124]	; (9438 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    93bc:	481f      	ldr	r0, [pc, #124]	; (943c <bt_pub_key_gen+0x94>)
    93be:	1ac9      	subs	r1, r1, r3
    93c0:	08c9      	lsrs	r1, r1, #3
    93c2:	0189      	lsls	r1, r1, #6
    93c4:	f041 0102 	orr.w	r1, r1, #2
    93c8:	f013 fd51 	bl	1ce6e <log_0>
		return -ENOTSUP;
    93cc:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    93d0:	4620      	mov	r0, r4
    93d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    93d4:	4e1a      	ldr	r6, [pc, #104]	; (9440 <bt_pub_key_gen+0x98>)
    93d6:	6833      	ldr	r3, [r6, #0]
    93d8:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    93da:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    93dc:	2104      	movs	r1, #4
    93de:	f105 0098 	add.w	r0, r5, #152	; 0x98
    93e2:	f015 fe8a 	bl	1f0fa <atomic_test_and_set_bit>
    93e6:	4607      	mov	r7, r0
    93e8:	bb00      	cbnz	r0, 942c <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    93ea:	f06f 0108 	mvn.w	r1, #8
    93ee:	f105 0098 	add.w	r0, r5, #152	; 0x98
    93f2:	f015 fe55 	bl	1f0a0 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    93f6:	463a      	mov	r2, r7
    93f8:	4639      	mov	r1, r7
    93fa:	f242 0025 	movw	r0, #8229	; 0x2025
    93fe:	f7fe faff 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    9402:	4604      	mov	r4, r0
    9404:	2800      	cmp	r0, #0
    9406:	d0e3      	beq.n	93d0 <bt_pub_key_gen+0x28>
    9408:	4b0a      	ldr	r3, [pc, #40]	; (9434 <bt_pub_key_gen+0x8c>)
    940a:	490b      	ldr	r1, [pc, #44]	; (9438 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    940c:	480d      	ldr	r0, [pc, #52]	; (9444 <bt_pub_key_gen+0x9c>)
    940e:	1ac9      	subs	r1, r1, r3
    9410:	08c9      	lsrs	r1, r1, #3
    9412:	0189      	lsls	r1, r1, #6
    9414:	f041 0101 	orr.w	r1, r1, #1
    9418:	f013 fd29 	bl	1ce6e <log_0>
    941c:	f06f 0110 	mvn.w	r1, #16
    9420:	f105 0098 	add.w	r0, r5, #152	; 0x98
    9424:	f015 fe3c 	bl	1f0a0 <atomic_and>
		pub_key_cb = NULL;
    9428:	6037      	str	r7, [r6, #0]
		return err;
    942a:	e7d1      	b.n	93d0 <bt_pub_key_gen+0x28>
		return 0;
    942c:	2400      	movs	r4, #0
    942e:	e7cf      	b.n	93d0 <bt_pub_key_gen+0x28>
    9430:	20000000 	.word	0x20000000
    9434:	00021aac 	.word	0x00021aac
    9438:	00021b6c 	.word	0x00021b6c
    943c:	00024a54 	.word	0x00024a54
    9440:	2000156c 	.word	0x2000156c
    9444:	00024a73 	.word	0x00024a73

00009448 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    9448:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    944a:	4804      	ldr	r0, [pc, #16]	; (945c <bt_pub_key_get+0x14>)
    944c:	f015 fe37 	bl	1f0be <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9450:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    9454:	4802      	ldr	r0, [pc, #8]	; (9460 <bt_pub_key_get+0x18>)
    9456:	bf08      	it	eq
    9458:	2000      	moveq	r0, #0
    945a:	bd08      	pop	{r3, pc}
    945c:	20000098 	.word	0x20000098
    9460:	20003019 	.word	0x20003019

00009464 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    9464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    9466:	4d1a      	ldr	r5, [pc, #104]	; (94d0 <bt_dh_key_gen+0x6c>)
    9468:	682b      	ldr	r3, [r5, #0]
{
    946a:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    946c:	b113      	cbz	r3, 9474 <bt_dh_key_gen+0x10>
		return -EBUSY;
    946e:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    9472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9474:	4817      	ldr	r0, [pc, #92]	; (94d4 <bt_dh_key_gen+0x70>)
    9476:	f015 fe22 	bl	1f0be <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    947a:	06c2      	lsls	r2, r0, #27
    947c:	f3c0 1700 	ubfx	r7, r0, #4, #1
    9480:	d4f5      	bmi.n	946e <bt_dh_key_gen+0xa>
    9482:	4814      	ldr	r0, [pc, #80]	; (94d4 <bt_dh_key_gen+0x70>)
    9484:	f015 fe1b 	bl	1f0be <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    9488:	0703      	lsls	r3, r0, #28
    948a:	d51d      	bpl.n	94c8 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    948c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    948e:	f242 0026 	movw	r0, #8230	; 0x2026
    9492:	2140      	movs	r1, #64	; 0x40
    9494:	f7fe f958 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
    9498:	4604      	mov	r4, r0
    949a:	b918      	cbnz	r0, 94a4 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    949c:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    949e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    94a2:	e7e6      	b.n	9472 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    94a4:	2140      	movs	r1, #64	; 0x40
    94a6:	3008      	adds	r0, #8
    94a8:	f017 fb5e 	bl	20b68 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    94ac:	2240      	movs	r2, #64	; 0x40
    94ae:	4631      	mov	r1, r6
    94b0:	f015 fc9f 	bl	1edf2 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    94b4:	463a      	mov	r2, r7
    94b6:	4621      	mov	r1, r4
    94b8:	f242 0026 	movw	r0, #8230	; 0x2026
    94bc:	f7fe faa0 	bl	7a00 <bt_hci_cmd_send_sync>
	if (err) {
    94c0:	2800      	cmp	r0, #0
    94c2:	d0d6      	beq.n	9472 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    94c4:	602f      	str	r7, [r5, #0]
		return err;
    94c6:	e7d4      	b.n	9472 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    94c8:	f06f 0030 	mvn.w	r0, #48	; 0x30
    94cc:	e7d1      	b.n	9472 <bt_dh_key_gen+0xe>
    94ce:	bf00      	nop
    94d0:	20001568 	.word	0x20001568
    94d4:	20000098 	.word	0x20000098

000094d8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    94d8:	2300      	movs	r3, #0
	tx->user_data = NULL;
    94da:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    94de:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    94e0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    94e2:	4801      	ldr	r0, [pc, #4]	; (94e8 <tx_free+0x10>)
    94e4:	f017 bdb2 	b.w	2104c <k_queue_append>
    94e8:	200009a0 	.word	0x200009a0

000094ec <notify_connected>:
{
    94ec:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    94ee:	4b09      	ldr	r3, [pc, #36]	; (9514 <notify_connected+0x28>)
    94f0:	681d      	ldr	r5, [r3, #0]
{
    94f2:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    94f4:	7b21      	ldrb	r1, [r4, #12]
    94f6:	b92d      	cbnz	r5, 9504 <notify_connected+0x18>
	if (!conn->err) {
    94f8:	b951      	cbnz	r1, 9510 <notify_connected+0x24>
		bt_gatt_connected(conn);
    94fa:	4620      	mov	r0, r4
}
    94fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    9500:	f003 ba44 	b.w	c98c <bt_gatt_connected>
		if (cb->connected) {
    9504:	682b      	ldr	r3, [r5, #0]
    9506:	b10b      	cbz	r3, 950c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    9508:	4620      	mov	r0, r4
    950a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    950c:	69ad      	ldr	r5, [r5, #24]
    950e:	e7f1      	b.n	94f4 <notify_connected+0x8>
}
    9510:	bd38      	pop	{r3, r4, r5, pc}
    9512:	bf00      	nop
    9514:	20001578 	.word	0x20001578

00009518 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    9518:	b570      	push	{r4, r5, r6, lr}
    951a:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    951c:	f100 0634 	add.w	r6, r0, #52	; 0x34
    9520:	2200      	movs	r2, #0
    9522:	2300      	movs	r3, #0
    9524:	4630      	mov	r0, r6
    9526:	f017 face 	bl	20ac6 <net_buf_get>
    952a:	4605      	mov	r5, r0
    952c:	b958      	cbnz	r0, 9546 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    952e:	4620      	mov	r0, r4
    9530:	f015 ff4c 	bl	1f3cc <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9534:	f104 0158 	add.w	r1, r4, #88	; 0x58
    9538:	4807      	ldr	r0, [pc, #28]	; (9558 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    953a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    953e:	2200      	movs	r2, #0
    9540:	2300      	movs	r3, #0
    9542:	f012 bd47 	b.w	1bfd4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    9546:	6968      	ldr	r0, [r5, #20]
    9548:	b108      	cbz	r0, 954e <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    954a:	f7ff ffc5 	bl	94d8 <tx_free>
		net_buf_unref(buf);
    954e:	4628      	mov	r0, r5
    9550:	f010 fdce 	bl	1a0f0 <net_buf_unref>
    9554:	e7e4      	b.n	9520 <conn_cleanup+0x8>
    9556:	bf00      	nop
    9558:	200012a8 	.word	0x200012a8

0000955c <send_frag>:
{
    955c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    9560:	694d      	ldr	r5, [r1, #20]
{
    9562:	4604      	mov	r4, r0
    9564:	460e      	mov	r6, r1
    9566:	4691      	mov	r9, r2
    9568:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    956a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    956e:	4843      	ldr	r0, [pc, #268]	; (967c <send_frag+0x120>)
    9570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9574:	f012 fc0c 	bl	1bd90 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    9578:	7b63      	ldrb	r3, [r4, #13]
    957a:	2b07      	cmp	r3, #7
    957c:	d14e      	bne.n	961c <send_frag+0xc0>
	hdr = net_buf_push(buf, sizeof(*hdr));
    957e:	2104      	movs	r1, #4
    9580:	f106 0008 	add.w	r0, r6, #8
    9584:	f017 fb07 	bl	20b96 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9588:	8822      	ldrh	r2, [r4, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    958a:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    958c:	ea42 3209 	orr.w	r2, r2, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9590:	3b04      	subs	r3, #4
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    9592:	8002      	strh	r2, [r0, #0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    9594:	8043      	strh	r3, [r0, #2]
	__asm__ volatile(
    9596:	f04f 0320 	mov.w	r3, #32
    959a:	f3ef 8211 	mrs	r2, BASEPRI
    959e:	f383 8811 	msr	BASEPRI, r3
    95a2:	f3bf 8f6f 	isb	sy
	if (tx) {
    95a6:	2d00      	cmp	r5, #0
    95a8:	d04a      	beq.n	9640 <send_frag+0xe4>
	parent->next = child;
    95aa:	2300      	movs	r3, #0
    95ac:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    95ae:	69a3      	ldr	r3, [r4, #24]
    95b0:	2b00      	cmp	r3, #0
    95b2:	d142      	bne.n	963a <send_frag+0xde>
	list->head = node;
    95b4:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    95b8:	f382 8811 	msr	BASEPRI, r2
    95bc:	f3bf 8f6f 	isb	sy
    95c0:	2302      	movs	r3, #2
    95c2:	7533      	strb	r3, [r6, #20]
	err = bt_send(buf);
    95c4:	4630      	mov	r0, r6
    95c6:	f015 feb4 	bl	1f332 <bt_send>
	if (err) {
    95ca:	4601      	mov	r1, r0
    95cc:	2800      	cmp	r0, #0
    95ce:	d053      	beq.n	9678 <send_frag+0x11c>
    95d0:	4b2b      	ldr	r3, [pc, #172]	; (9680 <send_frag+0x124>)
    95d2:	4a2c      	ldr	r2, [pc, #176]	; (9684 <send_frag+0x128>)
		BT_ERR("Unable to send to driver (err %d)", err);
    95d4:	482c      	ldr	r0, [pc, #176]	; (9688 <send_frag+0x12c>)
    95d6:	1ad2      	subs	r2, r2, r3
    95d8:	08d2      	lsrs	r2, r2, #3
    95da:	0192      	lsls	r2, r2, #6
    95dc:	f042 0201 	orr.w	r2, r2, #1
    95e0:	f013 fc52 	bl	1ce88 <log_1>
	__asm__ volatile(
    95e4:	f04f 0320 	mov.w	r3, #32
    95e8:	f3ef 8111 	mrs	r1, BASEPRI
    95ec:	f383 8811 	msr	BASEPRI, r3
    95f0:	f3bf 8f6f 	isb	sy
		if (tx) {
    95f4:	2d00      	cmp	r5, #0
    95f6:	d039      	beq.n	966c <send_frag+0x110>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    95f8:	6963      	ldr	r3, [r4, #20]
    95fa:	2200      	movs	r2, #0
    95fc:	b153      	cbz	r3, 9614 <send_frag+0xb8>
    95fe:	429d      	cmp	r5, r3
    9600:	d131      	bne.n	9666 <send_frag+0x10a>
Z_GENLIST_REMOVE(slist, snode)
    9602:	682b      	ldr	r3, [r5, #0]
    9604:	bb4a      	cbnz	r2, 965a <send_frag+0xfe>
    9606:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    9608:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    960a:	4295      	cmp	r5, r2
    960c:	d100      	bne.n	9610 <send_frag+0xb4>
	list->tail = node;
    960e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    9610:	2300      	movs	r3, #0
    9612:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    9614:	f381 8811 	msr	BASEPRI, r1
    9618:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    961c:	4817      	ldr	r0, [pc, #92]	; (967c <send_frag+0x120>)
    961e:	f012 fb91 	bl	1bd44 <z_impl_k_sem_give>
	if (tx) {
    9622:	b115      	cbz	r5, 962a <send_frag+0xce>
		tx_free(tx);
    9624:	4628      	mov	r0, r5
    9626:	f7ff ff57 	bl	94d8 <tx_free>
	if (always_consume) {
    962a:	b11f      	cbz	r7, 9634 <send_frag+0xd8>
		net_buf_unref(buf);
    962c:	4630      	mov	r0, r6
    962e:	f010 fd5f 	bl	1a0f0 <net_buf_unref>
	return false;
    9632:	2700      	movs	r7, #0
}
    9634:	4638      	mov	r0, r7
    9636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    963a:	601d      	str	r5, [r3, #0]
	list->tail = node;
    963c:	61a5      	str	r5, [r4, #24]
}
    963e:	e7bb      	b.n	95b8 <send_frag+0x5c>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    9640:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    9642:	b133      	cbz	r3, 9652 <send_frag+0xf6>
			pending_no_cb = &tail_tx->pending_no_cb;
    9644:	f103 080c 	add.w	r8, r3, #12
    9648:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    964a:	3301      	adds	r3, #1
    964c:	f8c8 3000 	str.w	r3, [r8]
    9650:	e7b2      	b.n	95b8 <send_frag+0x5c>
			pending_no_cb = &conn->pending_no_cb;
    9652:	69e3      	ldr	r3, [r4, #28]
    9654:	f104 081c 	add.w	r8, r4, #28
    9658:	e7f7      	b.n	964a <send_frag+0xee>
	parent->next = child;
    965a:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    965c:	69a3      	ldr	r3, [r4, #24]
    965e:	429d      	cmp	r5, r3
	list->tail = node;
    9660:	bf08      	it	eq
    9662:	61a2      	streq	r2, [r4, #24]
}
    9664:	e7d4      	b.n	9610 <send_frag+0xb4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9666:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9668:	681b      	ldr	r3, [r3, #0]
    966a:	e7c7      	b.n	95fc <send_frag+0xa0>
			(*pending_no_cb)--;
    966c:	f8d8 3000 	ldr.w	r3, [r8]
    9670:	3b01      	subs	r3, #1
    9672:	f8c8 3000 	str.w	r3, [r8]
    9676:	e7cd      	b.n	9614 <send_frag+0xb8>
	return true;
    9678:	2701      	movs	r7, #1
    967a:	e7db      	b.n	9634 <send_frag+0xd8>
    967c:	200000b4 	.word	0x200000b4
    9680:	00021aac 	.word	0x00021aac
    9684:	00021abc 	.word	0x00021abc
    9688:	00024386 	.word	0x00024386

0000968c <bt_conn_get_pkts>:
}
    968c:	4800      	ldr	r0, [pc, #0]	; (9690 <bt_conn_get_pkts+0x4>)
    968e:	4770      	bx	lr
    9690:	200000b4 	.word	0x200000b4

00009694 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    9694:	1d03      	adds	r3, r0, #4
{
    9696:	b570      	push	{r4, r5, r6, lr}
    9698:	4604      	mov	r4, r0
    969a:	4618      	mov	r0, r3
    969c:	f015 fe90 	bl	1f3c0 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    96a0:	0582      	lsls	r2, r0, #22
    96a2:	d519      	bpl.n	96d8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    96a4:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    96a8:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    96ac:	4291      	cmp	r1, r2
    96ae:	d813      	bhi.n	96d8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    96b0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    96b4:	4291      	cmp	r1, r2
    96b6:	d30f      	bcc.n	96d8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    96b8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    96bc:	4291      	cmp	r1, r2
    96be:	d10b      	bne.n	96d8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    96c0:	f3bf 8f5b 	dmb	ish
    96c4:	e853 2f00 	ldrex	r2, [r3]
    96c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    96cc:	e843 2100 	strex	r1, r2, [r3]
    96d0:	2900      	cmp	r1, #0
    96d2:	d1f7      	bne.n	96c4 <notify_le_param_updated+0x30>
    96d4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    96d8:	4b07      	ldr	r3, [pc, #28]	; (96f8 <notify_le_param_updated+0x64>)
    96da:	681d      	ldr	r5, [r3, #0]
    96dc:	b905      	cbnz	r5, 96e0 <notify_le_param_updated+0x4c>
}
    96de:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    96e0:	68ee      	ldr	r6, [r5, #12]
    96e2:	b13e      	cbz	r6, 96f4 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    96e4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    96e8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    96ec:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    96f0:	4620      	mov	r0, r4
    96f2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    96f4:	69ad      	ldr	r5, [r5, #24]
    96f6:	e7f1      	b.n	96dc <notify_le_param_updated+0x48>
    96f8:	20001578 	.word	0x20001578

000096fc <le_param_req>:
{
    96fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96fe:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    9700:	4608      	mov	r0, r1
{
    9702:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    9704:	f015 fdd7 	bl	1f2b6 <bt_le_conn_params_valid>
    9708:	4604      	mov	r4, r0
    970a:	b910      	cbnz	r0, 9712 <le_param_req+0x16>
		return false;
    970c:	2400      	movs	r4, #0
}
    970e:	4620      	mov	r0, r4
    9710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    9712:	4b09      	ldr	r3, [pc, #36]	; (9738 <le_param_req+0x3c>)
    9714:	681e      	ldr	r6, [r3, #0]
    9716:	2e00      	cmp	r6, #0
    9718:	d0f9      	beq.n	970e <le_param_req+0x12>
		if (!cb->le_param_req) {
    971a:	68b3      	ldr	r3, [r6, #8]
    971c:	b90b      	cbnz	r3, 9722 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    971e:	69b6      	ldr	r6, [r6, #24]
    9720:	e7f9      	b.n	9716 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    9722:	4629      	mov	r1, r5
    9724:	4638      	mov	r0, r7
    9726:	4798      	blx	r3
    9728:	2800      	cmp	r0, #0
    972a:	d0ef      	beq.n	970c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    972c:	4628      	mov	r0, r5
    972e:	f015 fdc2 	bl	1f2b6 <bt_le_conn_params_valid>
    9732:	2800      	cmp	r0, #0
    9734:	d1f3      	bne.n	971e <le_param_req+0x22>
    9736:	e7e9      	b.n	970c <le_param_req+0x10>
    9738:	20001578 	.word	0x20001578

0000973c <bt_conn_identity_resolved>:
{
    973c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    973e:	78c3      	ldrb	r3, [r0, #3]
{
    9740:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    9742:	b93b      	cbnz	r3, 9754 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    9744:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    9748:	4b08      	ldr	r3, [pc, #32]	; (976c <bt_conn_identity_resolved+0x30>)
    974a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    974c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    9750:	b91d      	cbnz	r5, 975a <bt_conn_identity_resolved+0x1e>
}
    9752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    9754:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    9758:	e7f6      	b.n	9748 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    975a:	692b      	ldr	r3, [r5, #16]
    975c:	b11b      	cbz	r3, 9766 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    975e:	463a      	mov	r2, r7
    9760:	4631      	mov	r1, r6
    9762:	4620      	mov	r0, r4
    9764:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9766:	69ad      	ldr	r5, [r5, #24]
    9768:	e7f2      	b.n	9750 <bt_conn_identity_resolved+0x14>
    976a:	bf00      	nop
    976c:	20001578 	.word	0x20001578

00009770 <bt_conn_security_changed>:
	for (cb = callback_list; cb; cb = cb->_next) {
    9770:	4b0e      	ldr	r3, [pc, #56]	; (97ac <bt_conn_security_changed+0x3c>)
{
    9772:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    9774:	681e      	ldr	r6, [r3, #0]
{
    9776:	4604      	mov	r4, r0
    9778:	460d      	mov	r5, r1
	for (cb = callback_list; cb; cb = cb->_next) {
    977a:	b96e      	cbnz	r6, 9798 <bt_conn_security_changed+0x28>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    977c:	b9a5      	cbnz	r5, 97a8 <bt_conn_security_changed+0x38>
    977e:	7a63      	ldrb	r3, [r4, #9]
    9780:	2b01      	cmp	r3, #1
    9782:	d911      	bls.n	97a8 <bt_conn_security_changed+0x38>
		if (conn->type == BT_CONN_TYPE_LE) {
    9784:	78a3      	ldrb	r3, [r4, #2]
    9786:	2b01      	cmp	r3, #1
    9788:	d10e      	bne.n	97a8 <bt_conn_security_changed+0x38>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    978a:	7a20      	ldrb	r0, [r4, #8]
    978c:	f104 0188 	add.w	r1, r4, #136	; 0x88
}
    9790:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    9794:	f005 b952 	b.w	ea3c <bt_keys_update_usage>
		if (cb->security_changed) {
    9798:	6973      	ldr	r3, [r6, #20]
    979a:	b11b      	cbz	r3, 97a4 <bt_conn_security_changed+0x34>
			cb->security_changed(conn, conn->sec_level, err);
    979c:	7a61      	ldrb	r1, [r4, #9]
    979e:	462a      	mov	r2, r5
    97a0:	4620      	mov	r0, r4
    97a2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    97a4:	69b6      	ldr	r6, [r6, #24]
    97a6:	e7e8      	b.n	977a <bt_conn_security_changed+0xa>
}
    97a8:	bd70      	pop	{r4, r5, r6, pc}
    97aa:	bf00      	nop
    97ac:	20001578 	.word	0x20001578

000097b0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    97b0:	4b02      	ldr	r3, [pc, #8]	; (97bc <bt_conn_cb_register+0xc>)
    97b2:	681a      	ldr	r2, [r3, #0]
    97b4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    97b6:	6018      	str	r0, [r3, #0]
}
    97b8:	4770      	bx	lr
    97ba:	bf00      	nop
    97bc:	20001578 	.word	0x20001578

000097c0 <bt_conn_recv>:
{
    97c0:	b570      	push	{r4, r5, r6, lr}
    97c2:	4616      	mov	r6, r2
    97c4:	4604      	mov	r4, r0
    97c6:	460d      	mov	r5, r1
	tx_notify(conn);
    97c8:	f015 fe18 	bl	1f3fc <tx_notify>
	switch (flags) {
    97cc:	2e01      	cmp	r6, #1
    97ce:	d01b      	beq.n	9808 <bt_conn_recv+0x48>
    97d0:	2e02      	cmp	r6, #2
    97d2:	d16c      	bne.n	98ae <bt_conn_recv+0xee>
		len = sys_le16_to_cpu(hdr->len);
    97d4:	68ab      	ldr	r3, [r5, #8]
    97d6:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    97d8:	89e3      	ldrh	r3, [r4, #14]
    97da:	b163      	cbz	r3, 97f6 <bt_conn_recv+0x36>
    97dc:	4b3d      	ldr	r3, [pc, #244]	; (98d4 <bt_conn_recv+0x114>)
    97de:	493e      	ldr	r1, [pc, #248]	; (98d8 <bt_conn_recv+0x118>)
			BT_ERR("Unexpected first L2CAP frame");
    97e0:	483e      	ldr	r0, [pc, #248]	; (98dc <bt_conn_recv+0x11c>)
    97e2:	1ac9      	subs	r1, r1, r3
    97e4:	08c9      	lsrs	r1, r1, #3
    97e6:	0189      	lsls	r1, r1, #6
    97e8:	f041 0101 	orr.w	r1, r1, #1
    97ec:	f013 fb3f 	bl	1ce6e <log_0>
			bt_conn_reset_rx_state(conn);
    97f0:	4620      	mov	r0, r4
    97f2:	f015 fdeb 	bl	1f3cc <bt_conn_reset_rx_state>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    97f6:	89ab      	ldrh	r3, [r5, #12]
    97f8:	1af3      	subs	r3, r6, r3
    97fa:	3304      	adds	r3, #4
    97fc:	b29b      	uxth	r3, r3
    97fe:	81e3      	strh	r3, [r4, #14]
		if (conn->rx_len) {
    9800:	2b00      	cmp	r3, #0
    9802:	d043      	beq.n	988c <bt_conn_recv+0xcc>
			conn->rx = buf;
    9804:	6125      	str	r5, [r4, #16]
}
    9806:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    9808:	89e3      	ldrh	r3, [r4, #14]
    980a:	b98b      	cbnz	r3, 9830 <bt_conn_recv+0x70>
    980c:	4932      	ldr	r1, [pc, #200]	; (98d8 <bt_conn_recv+0x118>)
    980e:	4b31      	ldr	r3, [pc, #196]	; (98d4 <bt_conn_recv+0x114>)
			BT_ERR("Unexpected L2CAP continuation");
    9810:	4833      	ldr	r0, [pc, #204]	; (98e0 <bt_conn_recv+0x120>)
    9812:	1ac9      	subs	r1, r1, r3
    9814:	08c9      	lsrs	r1, r1, #3
    9816:	0189      	lsls	r1, r1, #6
    9818:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("L2CAP data overflow");
    981c:	f013 fb27 	bl	1ce6e <log_0>
			bt_conn_reset_rx_state(conn);
    9820:	4620      	mov	r0, r4
    9822:	f015 fdd3 	bl	1f3cc <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    9826:	4628      	mov	r0, r5
}
    9828:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    982c:	f010 bc60 	b.w	1a0f0 <net_buf_unref>
		if (buf->len > conn->rx_len) {
    9830:	89ae      	ldrh	r6, [r5, #12]
    9832:	42b3      	cmp	r3, r6
    9834:	d208      	bcs.n	9848 <bt_conn_recv+0x88>
    9836:	4928      	ldr	r1, [pc, #160]	; (98d8 <bt_conn_recv+0x118>)
    9838:	4b26      	ldr	r3, [pc, #152]	; (98d4 <bt_conn_recv+0x114>)
			BT_ERR("L2CAP data overflow");
    983a:	482a      	ldr	r0, [pc, #168]	; (98e4 <bt_conn_recv+0x124>)
    983c:	1ac9      	subs	r1, r1, r3
    983e:	08c9      	lsrs	r1, r1, #3
    9840:	0189      	lsls	r1, r1, #6
    9842:	f041 0101 	orr.w	r1, r1, #1
    9846:	e7e9      	b.n	981c <bt_conn_recv+0x5c>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    9848:	6920      	ldr	r0, [r4, #16]
    984a:	3008      	adds	r0, #8
    984c:	f017 f9c7 	bl	20bde <net_buf_simple_tailroom>
    9850:	4286      	cmp	r6, r0
    9852:	d908      	bls.n	9866 <bt_conn_recv+0xa6>
    9854:	4920      	ldr	r1, [pc, #128]	; (98d8 <bt_conn_recv+0x118>)
    9856:	4b1f      	ldr	r3, [pc, #124]	; (98d4 <bt_conn_recv+0x114>)
			BT_ERR("Not enough buffer space for L2CAP data");
    9858:	4823      	ldr	r0, [pc, #140]	; (98e8 <bt_conn_recv+0x128>)
    985a:	1ac9      	subs	r1, r1, r3
    985c:	08c9      	lsrs	r1, r1, #3
    985e:	0189      	lsls	r1, r1, #6
    9860:	f041 0101 	orr.w	r1, r1, #1
    9864:	e7da      	b.n	981c <bt_conn_recv+0x5c>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    9866:	6920      	ldr	r0, [r4, #16]
    9868:	89aa      	ldrh	r2, [r5, #12]
    986a:	68a9      	ldr	r1, [r5, #8]
    986c:	3008      	adds	r0, #8
    986e:	f017 f981 	bl	20b74 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    9872:	89e3      	ldrh	r3, [r4, #14]
    9874:	89aa      	ldrh	r2, [r5, #12]
    9876:	1a9b      	subs	r3, r3, r2
    9878:	81e3      	strh	r3, [r4, #14]
		net_buf_unref(buf);
    987a:	4628      	mov	r0, r5
    987c:	f010 fc38 	bl	1a0f0 <net_buf_unref>
		if (conn->rx_len) {
    9880:	89e3      	ldrh	r3, [r4, #14]
    9882:	2b00      	cmp	r3, #0
    9884:	d1bf      	bne.n	9806 <bt_conn_recv+0x46>
		buf = conn->rx;
    9886:	6925      	ldr	r5, [r4, #16]
		conn->rx_len = 0U;
    9888:	81e3      	strh	r3, [r4, #14]
		conn->rx = NULL;
    988a:	6123      	str	r3, [r4, #16]
	len = sys_le16_to_cpu(hdr->len);
    988c:	68ab      	ldr	r3, [r5, #8]
	if (sizeof(*hdr) + len != buf->len) {
    988e:	89aa      	ldrh	r2, [r5, #12]
    9890:	8819      	ldrh	r1, [r3, #0]
    9892:	1d0b      	adds	r3, r1, #4
    9894:	4293      	cmp	r3, r2
    9896:	d016      	beq.n	98c6 <bt_conn_recv+0x106>
    9898:	480e      	ldr	r0, [pc, #56]	; (98d4 <bt_conn_recv+0x114>)
    989a:	4b0f      	ldr	r3, [pc, #60]	; (98d8 <bt_conn_recv+0x118>)
    989c:	1a1b      	subs	r3, r3, r0
    989e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u != %u)", len, buf->len);
    98a0:	019b      	lsls	r3, r3, #6
    98a2:	4812      	ldr	r0, [pc, #72]	; (98ec <bt_conn_recv+0x12c>)
    98a4:	f043 0301 	orr.w	r3, r3, #1
    98a8:	f013 fb02 	bl	1ceb0 <log_2>
		net_buf_unref(buf);
    98ac:	e7bb      	b.n	9826 <bt_conn_recv+0x66>
    98ae:	4a09      	ldr	r2, [pc, #36]	; (98d4 <bt_conn_recv+0x114>)
    98b0:	4b09      	ldr	r3, [pc, #36]	; (98d8 <bt_conn_recv+0x118>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    98b2:	480f      	ldr	r0, [pc, #60]	; (98f0 <bt_conn_recv+0x130>)
    98b4:	1a9b      	subs	r3, r3, r2
    98b6:	08db      	lsrs	r3, r3, #3
    98b8:	019b      	lsls	r3, r3, #6
    98ba:	f043 0201 	orr.w	r2, r3, #1
    98be:	4631      	mov	r1, r6
    98c0:	f013 fae2 	bl	1ce88 <log_1>
		bt_conn_reset_rx_state(conn);
    98c4:	e7ac      	b.n	9820 <bt_conn_recv+0x60>
	bt_l2cap_recv(conn, buf);
    98c6:	4629      	mov	r1, r5
    98c8:	4620      	mov	r0, r4
}
    98ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    98ce:	f000 bd5d 	b.w	a38c <bt_l2cap_recv>
    98d2:	bf00      	nop
    98d4:	00021aac 	.word	0x00021aac
    98d8:	00021abc 	.word	0x00021abc
    98dc:	00024ac7 	.word	0x00024ac7
    98e0:	00024ae4 	.word	0x00024ae4
    98e4:	00024b02 	.word	0x00024b02
    98e8:	00024b16 	.word	0x00024b16
    98ec:	00024b5b 	.word	0x00024b5b
    98f0:	00024b3d 	.word	0x00024b3d

000098f4 <bt_conn_send_cb>:
{
    98f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98f8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    98fa:	7b43      	ldrb	r3, [r0, #13]
    98fc:	2b07      	cmp	r3, #7
{
    98fe:	4606      	mov	r6, r0
    9900:	460d      	mov	r5, r1
    9902:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    9904:	d00f      	beq.n	9926 <bt_conn_send_cb+0x32>
    9906:	4b2a      	ldr	r3, [pc, #168]	; (99b0 <bt_conn_send_cb+0xbc>)
    9908:	492a      	ldr	r1, [pc, #168]	; (99b4 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    990a:	482b      	ldr	r0, [pc, #172]	; (99b8 <bt_conn_send_cb+0xc4>)
    990c:	1ac9      	subs	r1, r1, r3
    990e:	08c9      	lsrs	r1, r1, #3
    9910:	0189      	lsls	r1, r1, #6
    9912:	f041 0101 	orr.w	r1, r1, #1
    9916:	f013 faaa 	bl	1ce6e <log_0>
		net_buf_unref(buf);
    991a:	4628      	mov	r0, r5
    991c:	f010 fbe8 	bl	1a0f0 <net_buf_unref>
			return -ENOTCONN;
    9920:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9924:	e020      	b.n	9968 <bt_conn_send_cb+0x74>
	if (cb) {
    9926:	2a00      	cmp	r2, #0
    9928:	d040      	beq.n	99ac <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    992a:	f012 fa05 	bl	1bd38 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    992e:	4b23      	ldr	r3, [pc, #140]	; (99bc <bt_conn_send_cb+0xc8>)
    9930:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    9932:	4823      	ldr	r0, [pc, #140]	; (99c0 <bt_conn_send_cb+0xcc>)
    9934:	bf07      	ittee	eq
    9936:	2200      	moveq	r2, #0
    9938:	2300      	moveq	r3, #0
    993a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    993e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    9942:	f011 fe7b 	bl	1b63c <z_impl_k_queue_get>
    9946:	4604      	mov	r4, r0
		if (!tx) {
    9948:	b980      	cbnz	r0, 996c <bt_conn_send_cb+0x78>
    994a:	4b19      	ldr	r3, [pc, #100]	; (99b0 <bt_conn_send_cb+0xbc>)
    994c:	4919      	ldr	r1, [pc, #100]	; (99b4 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    994e:	481d      	ldr	r0, [pc, #116]	; (99c4 <bt_conn_send_cb+0xd0>)
    9950:	1ac9      	subs	r1, r1, r3
    9952:	08c9      	lsrs	r1, r1, #3
    9954:	0189      	lsls	r1, r1, #6
    9956:	f041 0101 	orr.w	r1, r1, #1
    995a:	f013 fa88 	bl	1ce6e <log_0>
			net_buf_unref(buf);
    995e:	4628      	mov	r0, r5
    9960:	f010 fbc6 	bl	1a0f0 <net_buf_unref>
			return -ENOBUFS;
    9964:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    9968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    996c:	7b73      	ldrb	r3, [r6, #13]
    996e:	2b07      	cmp	r3, #7
    9970:	d010      	beq.n	9994 <bt_conn_send_cb+0xa0>
    9972:	4b0f      	ldr	r3, [pc, #60]	; (99b0 <bt_conn_send_cb+0xbc>)
    9974:	490f      	ldr	r1, [pc, #60]	; (99b4 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    9976:	4814      	ldr	r0, [pc, #80]	; (99c8 <bt_conn_send_cb+0xd4>)
    9978:	1ac9      	subs	r1, r1, r3
    997a:	08c9      	lsrs	r1, r1, #3
    997c:	0189      	lsls	r1, r1, #6
    997e:	f041 0102 	orr.w	r1, r1, #2
    9982:	f013 fa74 	bl	1ce6e <log_0>
			net_buf_unref(buf);
    9986:	4628      	mov	r0, r5
    9988:	f010 fbb2 	bl	1a0f0 <net_buf_unref>
			tx_free(tx);
    998c:	4620      	mov	r0, r4
    998e:	f7ff fda3 	bl	94d8 <tx_free>
    9992:	e7c5      	b.n	9920 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    9994:	2300      	movs	r3, #0
		tx->user_data = user_data;
    9996:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    999a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    999c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    999e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    99a2:	4629      	mov	r1, r5
    99a4:	f017 f8ad 	bl	20b02 <net_buf_put>
	return 0;
    99a8:	2000      	movs	r0, #0
    99aa:	e7dd      	b.n	9968 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    99ac:	614a      	str	r2, [r1, #20]
    99ae:	e7f6      	b.n	999e <bt_conn_send_cb+0xaa>
    99b0:	00021aac 	.word	0x00021aac
    99b4:	00021abc 	.word	0x00021abc
    99b8:	00024b77 	.word	0x00024b77
    99bc:	200012c0 	.word	0x200012c0
    99c0:	200009a0 	.word	0x200009a0
    99c4:	00024b86 	.word	0x00024b86
    99c8:	00024ba4 	.word	0x00024ba4

000099cc <bt_conn_prepare_events>:
{
	int i, ev_count = 0;

	BT_DBG("");

	conn_change.signaled = 0U;
    99cc:	4b1a      	ldr	r3, [pc, #104]	; (9a38 <bt_conn_prepare_events+0x6c>)
{
    99ce:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
    99d0:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    99d2:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
    99d4:	609a      	str	r2, [r3, #8]
{
    99d6:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    99d8:	f017 fee9 	bl	217ae <k_poll_event_init>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		struct bt_conn *conn = &conns[i];

		if (!atomic_get(&conn->ref)) {
    99dc:	4b17      	ldr	r3, [pc, #92]	; (9a3c <bt_conn_prepare_events+0x70>)
    99de:	f103 0054 	add.w	r0, r3, #84	; 0x54
    99e2:	f015 fced 	bl	1f3c0 <atomic_get>
    99e6:	4619      	mov	r1, r3
    99e8:	b908      	cbnz	r0, 99ee <bt_conn_prepare_events+0x22>
		}

		if (conn->state == BT_CONN_DISCONNECTED &&
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
			conn_cleanup(conn);
			continue;
    99ea:	2001      	movs	r0, #1
				  &conn->tx_queue);
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
	}

	return ev_count;
}
    99ec:	bd10      	pop	{r4, pc}
		if (conn->state == BT_CONN_DISCONNECTED &&
    99ee:	7b5a      	ldrb	r2, [r3, #13]
    99f0:	b99a      	cbnz	r2, 9a1a <bt_conn_prepare_events+0x4e>
    99f2:	f3bf 8f5b 	dmb	ish
    99f6:	1d1a      	adds	r2, r3, #4
    99f8:	e852 0f00 	ldrex	r0, [r2]
    99fc:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    9a00:	e842 ce00 	strex	lr, ip, [r2]
    9a04:	f1be 0f00 	cmp.w	lr, #0
    9a08:	d1f6      	bne.n	99f8 <bt_conn_prepare_events+0x2c>
    9a0a:	f3bf 8f5b 	dmb	ish
    9a0e:	0642      	lsls	r2, r0, #25
    9a10:	d503      	bpl.n	9a1a <bt_conn_prepare_events+0x4e>
			conn_cleanup(conn);
    9a12:	4618      	mov	r0, r3
    9a14:	f7ff fd80 	bl	9518 <conn_cleanup>
    9a18:	e7e7      	b.n	99ea <bt_conn_prepare_events+0x1e>
		if (conn->state != BT_CONN_CONNECTED) {
    9a1a:	7b4b      	ldrb	r3, [r1, #13]
    9a1c:	2b07      	cmp	r3, #7
    9a1e:	d1e4      	bne.n	99ea <bt_conn_prepare_events+0x1e>
		k_poll_event_init(&events[ev_count],
    9a20:	4b07      	ldr	r3, [pc, #28]	; (9a40 <bt_conn_prepare_events+0x74>)
    9a22:	f104 0014 	add.w	r0, r4, #20
    9a26:	2200      	movs	r2, #0
    9a28:	2104      	movs	r1, #4
    9a2a:	f017 fec0 	bl	217ae <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    9a2e:	2301      	movs	r3, #1
    9a30:	f884 3020 	strb.w	r3, [r4, #32]
    9a34:	2002      	movs	r0, #2
	return ev_count;
    9a36:	e7d9      	b.n	99ec <bt_conn_prepare_events+0x20>
    9a38:	20000314 	.word	0x20000314
    9a3c:	20000ca0 	.word	0x20000ca0
    9a40:	20000cd4 	.word	0x20000cd4

00009a44 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    9a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!atomic_get(&conns[i].ref)) {
    9a48:	4c1a      	ldr	r4, [pc, #104]	; (9ab4 <bt_conn_add_le+0x70>)
    9a4a:	f104 0854 	add.w	r8, r4, #84	; 0x54
{
    9a4e:	4607      	mov	r7, r0
		if (!atomic_get(&conns[i].ref)) {
    9a50:	4640      	mov	r0, r8
{
    9a52:	460e      	mov	r6, r1
		if (!atomic_get(&conns[i].ref)) {
    9a54:	f015 fcb4 	bl	1f3c0 <atomic_get>
    9a58:	4605      	mov	r5, r0
    9a5a:	b110      	cbz	r0, 9a62 <bt_conn_add_le+0x1e>
	struct bt_conn *conn = conn_new();

	if (!conn) {
		return NULL;
    9a5c:	2000      	movs	r0, #0
	conn->type = BT_CONN_TYPE_LE;
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    9a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	(void)memset(conn, 0, sizeof(*conn));
    9a62:	4601      	mov	r1, r0
    9a64:	22b8      	movs	r2, #184	; 0xb8
    9a66:	4620      	mov	r0, r4
    9a68:	f015 f9ee 	bl	1ee48 <memset>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    9a6c:	4912      	ldr	r1, [pc, #72]	; (9ab8 <bt_conn_add_le+0x74>)
    9a6e:	f104 0058 	add.w	r0, r4, #88	; 0x58
    9a72:	f017 fce1 	bl	21438 <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    9a76:	4b11      	ldr	r3, [pc, #68]	; (9abc <bt_conn_add_le+0x78>)
    9a78:	62a5      	str	r5, [r4, #40]	; 0x28
    9a7a:	e9c4 350b 	strd	r3, r5, [r4, #44]	; 0x2c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    9a7e:	2501      	movs	r5, #1
    9a80:	f3bf 8f5b 	dmb	ish
    9a84:	e858 3f00 	ldrex	r3, [r8]
    9a88:	e848 5200 	strex	r2, r5, [r8]
    9a8c:	2a00      	cmp	r2, #0
    9a8e:	d1f9      	bne.n	9a84 <bt_conn_add_le+0x40>
    9a90:	f3bf 8f5b 	dmb	ish
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    9a94:	2207      	movs	r2, #7
    9a96:	4631      	mov	r1, r6
    9a98:	f104 0088 	add.w	r0, r4, #136	; 0x88
	conn->id = id;
    9a9c:	7227      	strb	r7, [r4, #8]
    9a9e:	f015 f9a8 	bl	1edf2 <memcpy>
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9aa2:	4b07      	ldr	r3, [pc, #28]	; (9ac0 <bt_conn_add_le+0x7c>)
	conn->sec_level = BT_SECURITY_L1;
    9aa4:	7265      	strb	r5, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    9aa6:	72a5      	strb	r5, [r4, #10]
	conn->type = BT_CONN_TYPE_LE;
    9aa8:	70a5      	strb	r5, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    9aaa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
			conn = &conns[i];
    9aae:	4620      	mov	r0, r4
	return conn;
    9ab0:	e7d5      	b.n	9a5e <bt_conn_add_le+0x1a>
    9ab2:	bf00      	nop
    9ab4:	20000ca0 	.word	0x20000ca0
    9ab8:	00009e65 	.word	0x00009e65
    9abc:	0001f443 	.word	0x0001f443
    9ac0:	00280018 	.word	0x00280018

00009ac4 <bt_conn_lookup_handle>:
struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
	int i;

	for (i = 0; i < ARRAY_SIZE(conns); i++) {
		if (!atomic_get(&conns[i].ref)) {
    9ac4:	4a0c      	ldr	r2, [pc, #48]	; (9af8 <bt_conn_lookup_handle+0x34>)
{
    9ac6:	b508      	push	{r3, lr}
    9ac8:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    9aca:	f102 0054 	add.w	r0, r2, #84	; 0x54
    9ace:	f015 fc77 	bl	1f3c0 <atomic_get>
    9ad2:	4611      	mov	r1, r2
    9ad4:	b160      	cbz	r0, 9af0 <bt_conn_lookup_handle+0x2c>
			continue;
		}

		/* We only care about connections with a valid handle */
		if (!bt_conn_is_handle_valid(&conns[i])) {
    9ad6:	7b52      	ldrb	r2, [r2, #13]
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	return conn->state == BT_CONN_CONNECTED ||
	       conn->state == BT_CONN_DISCONNECT ||
    9ad8:	1fd0      	subs	r0, r2, #7
    9ada:	2801      	cmp	r0, #1
    9adc:	d901      	bls.n	9ae2 <bt_conn_lookup_handle+0x1e>
    9ade:	2a01      	cmp	r2, #1
    9ae0:	d107      	bne.n	9af2 <bt_conn_lookup_handle+0x2e>
			continue;
		}

		if (conns[i].handle == handle) {
    9ae2:	880a      	ldrh	r2, [r1, #0]
    9ae4:	429a      	cmp	r2, r3
    9ae6:	d104      	bne.n	9af2 <bt_conn_lookup_handle+0x2e>
#endif /* defined(CONFIG_BT_BREDR) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    9ae8:	4804      	ldr	r0, [pc, #16]	; (9afc <bt_conn_lookup_handle+0x38>)
    9aea:	f015 fc7a 	bl	1f3e2 <atomic_inc>
		if (!bt_conn_is_handle_valid(&conns[i])) {
    9aee:	4802      	ldr	r0, [pc, #8]	; (9af8 <bt_conn_lookup_handle+0x34>)
}
    9af0:	bd08      	pop	{r3, pc}
	return NULL;
    9af2:	2000      	movs	r0, #0
    9af4:	e7fc      	b.n	9af0 <bt_conn_lookup_handle+0x2c>
    9af6:	bf00      	nop
    9af8:	20000ca0 	.word	0x20000ca0
    9afc:	20000cf4 	.word	0x20000cf4

00009b00 <bt_conn_lookup_addr_le>:
{
    9b00:	b510      	push	{r4, lr}
		if (!atomic_get(&conns[i].ref)) {
    9b02:	4c0c      	ldr	r4, [pc, #48]	; (9b34 <bt_conn_lookup_addr_le+0x34>)
{
    9b04:	4603      	mov	r3, r0
		if (!atomic_get(&conns[i].ref)) {
    9b06:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    9b0a:	460a      	mov	r2, r1
		if (!atomic_get(&conns[i].ref)) {
    9b0c:	f015 fc58 	bl	1f3c0 <atomic_get>
    9b10:	b908      	cbnz	r0, 9b16 <bt_conn_lookup_addr_le+0x16>
	return NULL;
    9b12:	2000      	movs	r0, #0
}
    9b14:	bd10      	pop	{r4, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    9b16:	78a1      	ldrb	r1, [r4, #2]
    9b18:	2901      	cmp	r1, #1
    9b1a:	d1fa      	bne.n	9b12 <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    9b1c:	4619      	mov	r1, r3
    9b1e:	4620      	mov	r0, r4
    9b20:	f015 fcc7 	bl	1f4b2 <bt_conn_is_peer_addr_le>
    9b24:	2800      	cmp	r0, #0
    9b26:	d0f4      	beq.n	9b12 <bt_conn_lookup_addr_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    9b28:	f104 0054 	add.w	r0, r4, #84	; 0x54
    9b2c:	f015 fc59 	bl	1f3e2 <atomic_inc>
		if (bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    9b30:	4620      	mov	r0, r4
			return bt_conn_ref(&conns[i]);
    9b32:	e7ef      	b.n	9b14 <bt_conn_lookup_addr_le+0x14>
    9b34:	20000ca0 	.word	0x20000ca0

00009b38 <bt_conn_lookup_state_le>:
{
    9b38:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&conns[i].ref)) {
    9b3a:	4c10      	ldr	r4, [pc, #64]	; (9b7c <bt_conn_lookup_state_le+0x44>)
{
    9b3c:	4605      	mov	r5, r0
		if (!atomic_get(&conns[i].ref)) {
    9b3e:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    9b42:	4616      	mov	r6, r2
		if (!atomic_get(&conns[i].ref)) {
    9b44:	f015 fc3c 	bl	1f3c0 <atomic_get>
    9b48:	b908      	cbnz	r0, 9b4e <bt_conn_lookup_state_le+0x16>
	return NULL;
    9b4a:	2000      	movs	r0, #0
}
    9b4c:	bd70      	pop	{r4, r5, r6, pc}
		if (conns[i].type != BT_CONN_TYPE_LE) {
    9b4e:	78a3      	ldrb	r3, [r4, #2]
    9b50:	2b01      	cmp	r3, #1
    9b52:	d1fa      	bne.n	9b4a <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    9b54:	b951      	cbnz	r1, 9b6c <bt_conn_lookup_state_le+0x34>
		if (conns[i].state == state && conns[i].id == id) {
    9b56:	7b63      	ldrb	r3, [r4, #13]
    9b58:	42b3      	cmp	r3, r6
    9b5a:	d1f6      	bne.n	9b4a <bt_conn_lookup_state_le+0x12>
    9b5c:	7a23      	ldrb	r3, [r4, #8]
    9b5e:	42ab      	cmp	r3, r5
    9b60:	d1f3      	bne.n	9b4a <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    9b62:	4807      	ldr	r0, [pc, #28]	; (9b80 <bt_conn_lookup_state_le+0x48>)
    9b64:	f015 fc3d 	bl	1f3e2 <atomic_inc>
			return bt_conn_ref(&conns[i]);
    9b68:	4804      	ldr	r0, [pc, #16]	; (9b7c <bt_conn_lookup_state_le+0x44>)
    9b6a:	e7ef      	b.n	9b4c <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&conns[i], id, peer)) {
    9b6c:	460a      	mov	r2, r1
    9b6e:	4620      	mov	r0, r4
    9b70:	4629      	mov	r1, r5
    9b72:	f015 fc9e 	bl	1f4b2 <bt_conn_is_peer_addr_le>
    9b76:	2800      	cmp	r0, #0
    9b78:	d1ed      	bne.n	9b56 <bt_conn_lookup_state_le+0x1e>
    9b7a:	e7e6      	b.n	9b4a <bt_conn_lookup_state_le+0x12>
    9b7c:	20000ca0 	.word	0x20000ca0
    9b80:	20000cf4 	.word	0x20000cf4

00009b84 <bt_conn_exists_le>:
{
    9b84:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    9b86:	f7ff ffbb 	bl	9b00 <bt_conn_lookup_addr_le>
	if (conn) {
    9b8a:	4604      	mov	r4, r0
    9b8c:	b1a0      	cbz	r0, 9bb8 <bt_conn_exists_le+0x34>
    9b8e:	4b0b      	ldr	r3, [pc, #44]	; (9bbc <bt_conn_exists_le+0x38>)
    9b90:	4a0b      	ldr	r2, [pc, #44]	; (9bc0 <bt_conn_exists_le+0x3c>)
    9b92:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    9b94:	7b43      	ldrb	r3, [r0, #13]
    9b96:	480b      	ldr	r0, [pc, #44]	; (9bc4 <bt_conn_exists_le+0x40>)
    9b98:	2b08      	cmp	r3, #8
    9b9a:	bf96      	itet	ls
    9b9c:	490a      	ldrls	r1, [pc, #40]	; (9bc8 <bt_conn_exists_le+0x44>)
    9b9e:	490b      	ldrhi	r1, [pc, #44]	; (9bcc <bt_conn_exists_le+0x48>)
    9ba0:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    9ba4:	08d2      	lsrs	r2, r2, #3
    9ba6:	0192      	lsls	r2, r2, #6
    9ba8:	f042 0202 	orr.w	r2, r2, #2
    9bac:	f013 f96c 	bl	1ce88 <log_1>
		bt_conn_unref(conn);
    9bb0:	4620      	mov	r0, r4
    9bb2:	f015 fc9e 	bl	1f4f2 <bt_conn_unref>
		return true;
    9bb6:	2001      	movs	r0, #1
}
    9bb8:	bd10      	pop	{r4, pc}
    9bba:	bf00      	nop
    9bbc:	00021aac 	.word	0x00021aac
    9bc0:	00021abc 	.word	0x00021abc
    9bc4:	00024bd4 	.word	0x00024bd4
    9bc8:	00022384 	.word	0x00022384
    9bcc:	00024bca 	.word	0x00024bca

00009bd0 <bt_conn_set_state>:
{
    9bd0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    9bd2:	7b46      	ldrb	r6, [r0, #13]
    9bd4:	428e      	cmp	r6, r1
{
    9bd6:	4604      	mov	r4, r0
    9bd8:	460d      	mov	r5, r1
	if (conn->state == state) {
    9bda:	d112      	bne.n	9c02 <bt_conn_set_state+0x32>
    9bdc:	4b63      	ldr	r3, [pc, #396]	; (9d6c <bt_conn_set_state+0x19c>)
    9bde:	4a64      	ldr	r2, [pc, #400]	; (9d70 <bt_conn_set_state+0x1a0>)
		BT_WARN("no transition %s", state2str(state));
    9be0:	4864      	ldr	r0, [pc, #400]	; (9d74 <bt_conn_set_state+0x1a4>)
    9be2:	2e08      	cmp	r6, #8
    9be4:	eba2 0203 	sub.w	r2, r2, r3
    9be8:	bf96      	itet	ls
    9bea:	4b63      	ldrls	r3, [pc, #396]	; (9d78 <bt_conn_set_state+0x1a8>)
    9bec:	4963      	ldrhi	r1, [pc, #396]	; (9d7c <bt_conn_set_state+0x1ac>)
    9bee:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    9bf2:	08d2      	lsrs	r2, r2, #3
    9bf4:	0192      	lsls	r2, r2, #6
    9bf6:	f042 0202 	orr.w	r2, r2, #2
}
    9bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    9bfe:	f013 b943 	b.w	1ce88 <log_1>
	conn->state = state;
    9c02:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    9c04:	b916      	cbnz	r6, 9c0c <bt_conn_set_state+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
    9c06:	3054      	adds	r0, #84	; 0x54
    9c08:	f015 fbeb 	bl	1f3e2 <atomic_inc>
	switch (conn->state) {
    9c0c:	7b63      	ldrb	r3, [r4, #13]
    9c0e:	2b08      	cmp	r3, #8
    9c10:	f200 80a1 	bhi.w	9d56 <bt_conn_set_state+0x186>
    9c14:	e8df f003 	tbb	[pc, r3]
    9c18:	a9a90533 	.word	0xa9a90533
    9c1c:	1ca9a9a9 	.word	0x1ca9a9a9
    9c20:	a9          	.byte	0xa9
    9c21:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    9c22:	4d57      	ldr	r5, [pc, #348]	; (9d80 <bt_conn_set_state+0x1b0>)
		tx->pending_no_cb = 0U;
    9c24:	2600      	movs	r6, #0
	__asm__ volatile(
    9c26:	f04f 0320 	mov.w	r3, #32
    9c2a:	f3ef 8211 	mrs	r2, BASEPRI
    9c2e:	f383 8811 	msr	BASEPRI, r3
    9c32:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    9c36:	69e3      	ldr	r3, [r4, #28]
    9c38:	2b00      	cmp	r3, #0
    9c3a:	d06d      	beq.n	9d18 <bt_conn_set_state+0x148>
			conn->pending_no_cb--;
    9c3c:	3b01      	subs	r3, #1
    9c3e:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    9c40:	f382 8811 	msr	BASEPRI, r2
    9c44:	f3bf 8f6f 	isb	sy
    9c48:	4628      	mov	r0, r5
    9c4a:	f012 f87b 	bl	1bd44 <z_impl_k_sem_give>
}
    9c4e:	e7ea      	b.n	9c26 <bt_conn_set_state+0x56>
		if (conn->type == BT_CONN_TYPE_SCO) {
    9c50:	78a3      	ldrb	r3, [r4, #2]
    9c52:	2b04      	cmp	r3, #4
    9c54:	f000 8089 	beq.w	9d6a <bt_conn_set_state+0x19a>
	z_impl_k_queue_init(queue);
    9c58:	f104 0034 	add.w	r0, r4, #52	; 0x34
    9c5c:	f017 f9ea 	bl	21034 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    9c60:	2100      	movs	r1, #0
    9c62:	4848      	ldr	r0, [pc, #288]	; (9d84 <bt_conn_set_state+0x1b4>)
    9c64:	f012 fc26 	bl	1c4b4 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    9c68:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    9c6a:	4620      	mov	r0, r4
	list->tail = NULL;
    9c6c:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    9c70:	f000 fabe 	bl	a1f0 <bt_l2cap_connected>
		notify_connected(conn);
    9c74:	4620      	mov	r0, r4
}
    9c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    9c7a:	f7ff bc37 	b.w	94ec <notify_connected>
		if (conn->type == BT_CONN_TYPE_SCO) {
    9c7e:	78a3      	ldrb	r3, [r4, #2]
    9c80:	2b04      	cmp	r3, #4
    9c82:	d104      	bne.n	9c8e <bt_conn_set_state+0xbe>
			bt_conn_unref(conn);
    9c84:	4620      	mov	r0, r4
}
    9c86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    9c8a:	f015 bc32 	b.w	1f4f2 <bt_conn_unref>
		switch (old_state) {
    9c8e:	2e08      	cmp	r6, #8
    9c90:	d86b      	bhi.n	9d6a <bt_conn_set_state+0x19a>
    9c92:	a301      	add	r3, pc, #4	; (adr r3, 9c98 <bt_conn_set_state+0xc8>)
    9c94:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    9c98:	00009d05 	.word	0x00009d05
    9c9c:	00009cbd 	.word	0x00009cbd
    9ca0:	00009cf7 	.word	0x00009cf7
    9ca4:	00009c85 	.word	0x00009c85
    9ca8:	00009c85 	.word	0x00009c85
    9cac:	00009cf7 	.word	0x00009cf7
    9cb0:	00009cf7 	.word	0x00009cf7
    9cb4:	00009d05 	.word	0x00009d05
    9cb8:	00009d05 	.word	0x00009d05
			tx_notify(conn);
    9cbc:	4620      	mov	r0, r4
    9cbe:	f015 fb9d 	bl	1f3fc <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    9cc2:	78a3      	ldrb	r3, [r4, #2]
    9cc4:	2b01      	cmp	r3, #1
    9cc6:	d103      	bne.n	9cd0 <bt_conn_set_state+0x100>
				k_delayed_work_cancel(&conn->update_work);
    9cc8:	f104 0058 	add.w	r0, r4, #88	; 0x58
    9ccc:	f017 fbbc 	bl	21448 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9cd0:	f3bf 8f5b 	dmb	ish
    9cd4:	3404      	adds	r4, #4
    9cd6:	e854 3f00 	ldrex	r3, [r4]
    9cda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9cde:	e844 3200 	strex	r2, r3, [r4]
    9ce2:	2a00      	cmp	r2, #0
    9ce4:	d1f7      	bne.n	9cd6 <bt_conn_set_state+0x106>
    9ce6:	f3bf 8f5b 	dmb	ish
    9cea:	4826      	ldr	r0, [pc, #152]	; (9d84 <bt_conn_set_state+0x1b4>)
}
    9cec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9cf0:	2100      	movs	r1, #0
    9cf2:	f012 bbdf 	b.w	1c4b4 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    9cf6:	7b23      	ldrb	r3, [r4, #12]
    9cf8:	2b00      	cmp	r3, #0
    9cfa:	d0c3      	beq.n	9c84 <bt_conn_set_state+0xb4>
				notify_connected(conn);
    9cfc:	4620      	mov	r0, r4
    9cfe:	f7ff fbf5 	bl	94ec <notify_connected>
    9d02:	e7bf      	b.n	9c84 <bt_conn_set_state+0xb4>
    9d04:	4a1a      	ldr	r2, [pc, #104]	; (9d70 <bt_conn_set_state+0x1a0>)
    9d06:	4b19      	ldr	r3, [pc, #100]	; (9d6c <bt_conn_set_state+0x19c>)
			BT_WARN("Invalid (%u) old state", state);
    9d08:	481f      	ldr	r0, [pc, #124]	; (9d88 <bt_conn_set_state+0x1b8>)
    9d0a:	1ad2      	subs	r2, r2, r3
    9d0c:	08d2      	lsrs	r2, r2, #3
    9d0e:	0192      	lsls	r2, r2, #6
    9d10:	f042 0202 	orr.w	r2, r2, #2
    9d14:	4629      	mov	r1, r5
    9d16:	e770      	b.n	9bfa <bt_conn_set_state+0x2a>
Z_GENLIST_IS_EMPTY(slist)
    9d18:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    9d1a:	b128      	cbz	r0, 9d28 <bt_conn_set_state+0x158>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9d1c:	69a1      	ldr	r1, [r4, #24]
    9d1e:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    9d20:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9d22:	4288      	cmp	r0, r1
	list->tail = node;
    9d24:	bf08      	it	eq
    9d26:	61a3      	streq	r3, [r4, #24]
    9d28:	f382 8811 	msr	BASEPRI, r2
    9d2c:	f3bf 8f6f 	isb	sy
		if (!node) {
    9d30:	b1d8      	cbz	r0, 9d6a <bt_conn_set_state+0x19a>
	__asm__ volatile(
    9d32:	f04f 0220 	mov.w	r2, #32
    9d36:	f3ef 8311 	mrs	r3, BASEPRI
    9d3a:	f382 8811 	msr	BASEPRI, r2
    9d3e:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    9d42:	68c2      	ldr	r2, [r0, #12]
    9d44:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    9d46:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    9d48:	f383 8811 	msr	BASEPRI, r3
    9d4c:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    9d50:	f7ff fbc2 	bl	94d8 <tx_free>
    9d54:	e778      	b.n	9c48 <bt_conn_set_state+0x78>
    9d56:	4a06      	ldr	r2, [pc, #24]	; (9d70 <bt_conn_set_state+0x1a0>)
    9d58:	4b04      	ldr	r3, [pc, #16]	; (9d6c <bt_conn_set_state+0x19c>)
		BT_WARN("no valid (%u) state was set", state);
    9d5a:	480c      	ldr	r0, [pc, #48]	; (9d8c <bt_conn_set_state+0x1bc>)
    9d5c:	1ad2      	subs	r2, r2, r3
    9d5e:	08d2      	lsrs	r2, r2, #3
    9d60:	0192      	lsls	r2, r2, #6
    9d62:	f042 0202 	orr.w	r2, r2, #2
    9d66:	4629      	mov	r1, r5
    9d68:	e747      	b.n	9bfa <bt_conn_set_state+0x2a>
}
    9d6a:	bd70      	pop	{r4, r5, r6, pc}
    9d6c:	00021aac 	.word	0x00021aac
    9d70:	00021abc 	.word	0x00021abc
    9d74:	00024bf7 	.word	0x00024bf7
    9d78:	00022384 	.word	0x00022384
    9d7c:	00024bca 	.word	0x00024bca
    9d80:	200000b4 	.word	0x200000b4
    9d84:	20000314 	.word	0x20000314
    9d88:	00024c08 	.word	0x00024c08
    9d8c:	00024c1f 	.word	0x00024c1f

00009d90 <bt_conn_disconnect>:
			     param->pref_rx_phy, phy_opts);
}
#endif

int bt_conn_disconnect(struct bt_conn *conn, uint8_t reason)
{
    9d90:	b538      	push	{r3, r4, r5, lr}
    9d92:	7b43      	ldrb	r3, [r0, #13]
    9d94:	3b02      	subs	r3, #2
    9d96:	4604      	mov	r4, r0
    9d98:	460d      	mov	r5, r1
    9d9a:	2b06      	cmp	r3, #6
    9d9c:	d805      	bhi.n	9daa <bt_conn_disconnect+0x1a>
    9d9e:	e8df f003 	tbb	[pc, r3]
    9da2:	0408      	.short	0x0408
    9da4:	210c0e04 	.word	0x210c0e04
    9da8:	0c          	.byte	0x0c
    9da9:	00          	.byte	0x00
	    conn->type == BT_CONN_TYPE_LE) {
		bt_le_set_auto_conn(&conn->le.dst, NULL);
	}
#endif /* !defined(CONFIG_BT_WHITELIST) */

	switch (conn->state) {
    9daa:	f06f 0538 	mvn.w	r5, #56	; 0x38
		return 0;
	case BT_CONN_DISCONNECTED:
	default:
		return -ENOTCONN;
	}
}
    9dae:	4628      	mov	r0, r5
    9db0:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    9db2:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9db4:	2100      	movs	r1, #0
    9db6:	f7ff ff0b 	bl	9bd0 <bt_conn_set_state>
		return 0;
    9dba:	2500      	movs	r5, #0
    9dbc:	e7f7      	b.n	9dae <bt_conn_disconnect+0x1e>
    9dbe:	490f      	ldr	r1, [pc, #60]	; (9dfc <bt_conn_disconnect+0x6c>)
    9dc0:	4b0f      	ldr	r3, [pc, #60]	; (9e00 <bt_conn_disconnect+0x70>)
		BT_WARN("Deprecated: Use bt_le_adv_stop instead");
    9dc2:	4810      	ldr	r0, [pc, #64]	; (9e04 <bt_conn_disconnect+0x74>)
    9dc4:	1a5b      	subs	r3, r3, r1
    9dc6:	08db      	lsrs	r3, r3, #3
    9dc8:	019b      	lsls	r3, r3, #6
    9dca:	f043 0102 	orr.w	r1, r3, #2
    9dce:	f013 f84e 	bl	1ce6e <log_0>
		conn->err = reason;
    9dd2:	7325      	strb	r5, [r4, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    9dd4:	4620      	mov	r0, r4
    9dd6:	2100      	movs	r1, #0
    9dd8:	f7ff fefa 	bl	9bd0 <bt_conn_set_state>
}
    9ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
    9de0:	f7ff b8b8 	b.w	8f54 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
    9de4:	8800      	ldrh	r0, [r0, #0]
    9de6:	f015 fa09 	bl	1f1fc <bt_hci_disconnect>
	if (err) {
    9dea:	4605      	mov	r5, r0
    9dec:	2800      	cmp	r0, #0
    9dee:	d1de      	bne.n	9dae <bt_conn_disconnect+0x1e>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    9df0:	2108      	movs	r1, #8
    9df2:	4620      	mov	r0, r4
    9df4:	f7ff feec 	bl	9bd0 <bt_conn_set_state>
	return 0;
    9df8:	e7d9      	b.n	9dae <bt_conn_disconnect+0x1e>
    9dfa:	bf00      	nop
    9dfc:	00021aac 	.word	0x00021aac
    9e00:	00021abc 	.word	0x00021abc
    9e04:	00024c3b 	.word	0x00024c3b

00009e08 <send_conn_le_param_update>:
{
    9e08:	b538      	push	{r3, r4, r5, lr}
    9e0a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    9e0c:	4608      	mov	r0, r1
{
    9e0e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    9e10:	f015 fa51 	bl	1f2b6 <bt_le_conn_params_valid>
    9e14:	b308      	cbz	r0, 9e5a <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9e16:	4b12      	ldr	r3, [pc, #72]	; (9e60 <send_conn_le_param_update+0x58>)
    9e18:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    9e1c:	0799      	lsls	r1, r3, #30
    9e1e:	d407      	bmi.n	9e30 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    9e20:	78e3      	ldrb	r3, [r4, #3]
    9e22:	b173      	cbz	r3, 9e42 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    9e24:	4629      	mov	r1, r5
    9e26:	4620      	mov	r0, r4
}
    9e28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    9e2c:	f000 bae6 	b.w	a3fc <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    9e30:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    9e34:	079a      	lsls	r2, r3, #30
    9e36:	d5f3      	bpl.n	9e20 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9e38:	1d20      	adds	r0, r4, #4
    9e3a:	f015 fac1 	bl	1f3c0 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    9e3e:	0543      	lsls	r3, r0, #21
    9e40:	d4ee      	bmi.n	9e20 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    9e42:	4629      	mov	r1, r5
    9e44:	4620      	mov	r0, r4
    9e46:	f015 fb6b 	bl	1f520 <bt_conn_le_conn_update>
		if (rc == 0) {
    9e4a:	b928      	cbnz	r0, 9e58 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    9e4c:	88ab      	ldrh	r3, [r5, #4]
    9e4e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    9e52:	88eb      	ldrh	r3, [r5, #6]
    9e54:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    9e58:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9e5a:	f06f 0015 	mvn.w	r0, #21
    9e5e:	e7fb      	b.n	9e58 <send_conn_le_param_update+0x50>
    9e60:	20000000 	.word	0x20000000

00009e64 <conn_update_timeout>:
{
    9e64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    9e66:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    9e6a:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    9e6c:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    9e70:	b993      	cbnz	r3, 9e98 <conn_update_timeout+0x34>
		bt_l2cap_disconnected(conn);
    9e72:	4630      	mov	r0, r6
    9e74:	f015 fbb5 	bl	1f5e2 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    9e78:	4b1f      	ldr	r3, [pc, #124]	; (9ef8 <conn_update_timeout+0x94>)
    9e7a:	681d      	ldr	r5, [r3, #0]
    9e7c:	b925      	cbnz	r5, 9e88 <conn_update_timeout+0x24>
		bt_conn_unref(conn);
    9e7e:	4630      	mov	r0, r6
    9e80:	f015 fb37 	bl	1f4f2 <bt_conn_unref>
}
    9e84:	b002      	add	sp, #8
    9e86:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    9e88:	686b      	ldr	r3, [r5, #4]
    9e8a:	b11b      	cbz	r3, 9e94 <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    9e8c:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    9e90:	4630      	mov	r0, r6
    9e92:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    9e94:	69ad      	ldr	r5, [r5, #24]
    9e96:	e7f1      	b.n	9e7c <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    9e98:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    9e9c:	2b01      	cmp	r3, #1
    9e9e:	d1f1      	bne.n	9e84 <conn_update_timeout+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9ea0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    9ea4:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    9ea8:	e855 3f00 	ldrex	r3, [r5]
    9eac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    9eb0:	e845 2100 	strex	r1, r2, [r5]
    9eb4:	2900      	cmp	r1, #0
    9eb6:	d1f7      	bne.n	9ea8 <conn_update_timeout+0x44>
    9eb8:	f3bf 8f5b 	dmb	ish
    9ebc:	059b      	lsls	r3, r3, #22
    9ebe:	d514      	bpl.n	9eea <conn_update_timeout+0x86>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    9ec0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    9ec2:	9300      	str	r3, [sp, #0]
    9ec4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    9ec6:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    9ec8:	4669      	mov	r1, sp
    9eca:	4630      	mov	r0, r6
    9ecc:	f7ff ff9c 	bl	9e08 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9ed0:	f3bf 8f5b 	dmb	ish
    9ed4:	e855 3f00 	ldrex	r3, [r5]
    9ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9edc:	e845 3200 	strex	r2, r3, [r5]
    9ee0:	2a00      	cmp	r2, #0
    9ee2:	d1f7      	bne.n	9ed4 <conn_update_timeout+0x70>
    9ee4:	f3bf 8f5b 	dmb	ish
    9ee8:	e7cc      	b.n	9e84 <conn_update_timeout+0x20>
			param = BT_LE_CONN_PARAM(
    9eea:	4a04      	ldr	r2, [pc, #16]	; (9efc <conn_update_timeout+0x98>)
    9eec:	6810      	ldr	r0, [r2, #0]
    9eee:	6851      	ldr	r1, [r2, #4]
    9ef0:	466b      	mov	r3, sp
    9ef2:	c303      	stmia	r3!, {r0, r1}
    9ef4:	e7e8      	b.n	9ec8 <conn_update_timeout+0x64>
    9ef6:	bf00      	nop
    9ef8:	20001578 	.word	0x20001578
    9efc:	00021c9e 	.word	0x00021c9e

00009f00 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    9f00:	b538      	push	{r3, r4, r5, lr}
    9f02:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    9f04:	490c      	ldr	r1, [pc, #48]	; (9f38 <bt_conn_create_pdu_timeout+0x38>)
    9f06:	2800      	cmp	r0, #0
    9f08:	bf08      	it	eq
    9f0a:	4608      	moveq	r0, r1
    9f0c:	f016 fdd6 	bl	20abc <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    9f10:	4604      	mov	r4, r0
    9f12:	b958      	cbnz	r0, 9f2c <bt_conn_create_pdu_timeout+0x2c>
    9f14:	4909      	ldr	r1, [pc, #36]	; (9f3c <bt_conn_create_pdu_timeout+0x3c>)
    9f16:	4b0a      	ldr	r3, [pc, #40]	; (9f40 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    9f18:	480a      	ldr	r0, [pc, #40]	; (9f44 <bt_conn_create_pdu_timeout+0x44>)
    9f1a:	1ac9      	subs	r1, r1, r3
    9f1c:	08c9      	lsrs	r1, r1, #3
    9f1e:	0189      	lsls	r1, r1, #6
    9f20:	f041 0102 	orr.w	r1, r1, #2
    9f24:	f012 ffa3 	bl	1ce6e <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    9f28:	4620      	mov	r0, r4
    9f2a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_reserve(buf, reserve);
    9f2c:	1d29      	adds	r1, r5, #4
    9f2e:	3008      	adds	r0, #8
    9f30:	f016 fde3 	bl	20afa <net_buf_simple_reserve>
	return buf;
    9f34:	e7f8      	b.n	9f28 <bt_conn_create_pdu_timeout+0x28>
    9f36:	bf00      	nop
    9f38:	200009d0 	.word	0x200009d0
    9f3c:	00021abc 	.word	0x00021abc
    9f40:	00021aac 	.word	0x00021aac
    9f44:	00024c62 	.word	0x00024c62

00009f48 <bt_conn_create_frag_timeout>:
{
    9f48:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    9f4a:	4801      	ldr	r0, [pc, #4]	; (9f50 <bt_conn_create_frag_timeout+0x8>)
    9f4c:	f7ff bfd8 	b.w	9f00 <bt_conn_create_pdu_timeout>
    9f50:	20000a20 	.word	0x20000a20

00009f54 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f58:	4606      	mov	r6, r0
	frag = bt_conn_create_frag(0);
    9f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    9f62:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    9f64:	460c      	mov	r4, r1
	frag = bt_conn_create_frag(0);
    9f66:	f7ff ffef 	bl	9f48 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    9f6a:	7833      	ldrb	r3, [r6, #0]
    9f6c:	2b07      	cmp	r3, #7
	frag = bt_conn_create_frag(0);
    9f6e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9f70:	f04f 0600 	mov.w	r6, #0
    9f74:	d005      	beq.n	9f82 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    9f76:	f010 f8bb 	bl	1a0f0 <net_buf_unref>
		return NULL;
    9f7a:	4635      	mov	r5, r6
}
    9f7c:	4628      	mov	r0, r5
    9f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    9f82:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9f84:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.mtu;
    9f88:	4e0c      	ldr	r6, [pc, #48]	; (9fbc <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9f8a:	4638      	mov	r0, r7
    9f8c:	f8b6 80b0 	ldrh.w	r8, [r6, #176]	; 0xb0
    9f90:	f016 fe25 	bl	20bde <net_buf_simple_tailroom>
    9f94:	4580      	cmp	r8, r0
    9f96:	d20c      	bcs.n	9fb2 <create_frag.isra.0+0x5e>
	return bt_dev.le.mtu;
    9f98:	f8b6 60b0 	ldrh.w	r6, [r6, #176]	; 0xb0
	net_buf_add_mem(frag, buf->data, frag_len);
    9f9c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    9fa0:	4632      	mov	r2, r6
    9fa2:	4638      	mov	r0, r7
    9fa4:	f016 fde6 	bl	20b74 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    9fa8:	4631      	mov	r1, r6
    9faa:	4620      	mov	r0, r4
    9fac:	f016 fdfb 	bl	20ba6 <net_buf_simple_pull>
	return frag;
    9fb0:	e7e4      	b.n	9f7c <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    9fb2:	4638      	mov	r0, r7
    9fb4:	f016 fe13 	bl	20bde <net_buf_simple_tailroom>
    9fb8:	b286      	uxth	r6, r0
    9fba:	e7ef      	b.n	9f9c <create_frag.isra.0+0x48>
    9fbc:	20000000 	.word	0x20000000

00009fc0 <bt_conn_process_tx>:
{
    9fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    9fc2:	7b43      	ldrb	r3, [r0, #13]
{
    9fc4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    9fc6:	b993      	cbnz	r3, 9fee <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9fc8:	f3bf 8f5b 	dmb	ish
    9fcc:	1d03      	adds	r3, r0, #4
    9fce:	e853 2f00 	ldrex	r2, [r3]
    9fd2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    9fd6:	e843 1400 	strex	r4, r1, [r3]
    9fda:	2c00      	cmp	r4, #0
    9fdc:	d1f7      	bne.n	9fce <bt_conn_process_tx+0xe>
    9fde:	f3bf 8f5b 	dmb	ish
    9fe2:	0653      	lsls	r3, r2, #25
    9fe4:	d503      	bpl.n	9fee <bt_conn_process_tx+0x2e>
}
    9fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    9fea:	f7ff ba95 	b.w	9518 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    9fee:	2200      	movs	r2, #0
    9ff0:	2300      	movs	r3, #0
    9ff2:	f105 0034 	add.w	r0, r5, #52	; 0x34
    9ff6:	f016 fd66 	bl	20ac6 <net_buf_get>
	BT_ASSERT(buf);
    9ffa:	4604      	mov	r4, r0
    9ffc:	b960      	cbnz	r0, a018 <bt_conn_process_tx+0x58>
    9ffe:	4a20      	ldr	r2, [pc, #128]	; (a080 <bt_conn_process_tx+0xc0>)
    a000:	4920      	ldr	r1, [pc, #128]	; (a084 <bt_conn_process_tx+0xc4>)
    a002:	4821      	ldr	r0, [pc, #132]	; (a088 <bt_conn_process_tx+0xc8>)
    a004:	f240 6329 	movw	r3, #1577	; 0x629
    a008:	f012 fbdb 	bl	1c7c2 <printk>
    a00c:	4040      	eors	r0, r0
    a00e:	f380 8811 	msr	BASEPRI, r0
    a012:	f04f 0003 	mov.w	r0, #3
    a016:	df02      	svc	2
	return bt_dev.le.mtu;
    a018:	4f1c      	ldr	r7, [pc, #112]	; (a08c <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    a01a:	89a1      	ldrh	r1, [r4, #12]
    a01c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
    a020:	4291      	cmp	r1, r2
    a022:	d807      	bhi.n	a034 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    a024:	2300      	movs	r3, #0
    a026:	461a      	mov	r2, r3
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a028:	4621      	mov	r1, r4
    a02a:	4628      	mov	r0, r5
    a02c:	f7ff fa96 	bl	955c <send_frag>
	if (!send_buf(conn, buf)) {
    a030:	b140      	cbz	r0, a044 <bt_conn_process_tx+0x84>
}
    a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    a034:	f105 060d 	add.w	r6, r5, #13
    a038:	4621      	mov	r1, r4
    a03a:	4630      	mov	r0, r6
    a03c:	f7ff ff8a 	bl	9f54 <create_frag.isra.0>
	if (!frag) {
    a040:	4601      	mov	r1, r0
    a042:	b920      	cbnz	r0, a04e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    a044:	4620      	mov	r0, r4
}
    a046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    a04a:	f010 b851 	b.w	1a0f0 <net_buf_unref>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    a04e:	2301      	movs	r3, #1
    a050:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a052:	4628      	mov	r0, r5
    a054:	f7ff fa82 	bl	955c <send_frag>
    a058:	2800      	cmp	r0, #0
    a05a:	d0f3      	beq.n	a044 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    a05c:	89a2      	ldrh	r2, [r4, #12]
    a05e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
    a062:	429a      	cmp	r2, r3
    a064:	d802      	bhi.n	a06c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, BT_ACL_CONT, false);
    a066:	2300      	movs	r3, #0
    a068:	2201      	movs	r2, #1
    a06a:	e7dd      	b.n	a028 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    a06c:	4621      	mov	r1, r4
    a06e:	4630      	mov	r0, r6
    a070:	f7ff ff70 	bl	9f54 <create_frag.isra.0>
		if (!frag) {
    a074:	4601      	mov	r1, r0
    a076:	2800      	cmp	r0, #0
    a078:	d0e4      	beq.n	a044 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    a07a:	2301      	movs	r3, #1
    a07c:	461a      	mov	r2, r3
    a07e:	e7e8      	b.n	a052 <bt_conn_process_tx+0x92>
    a080:	00024c8b 	.word	0x00024c8b
    a084:	0002575e 	.word	0x0002575e
    a088:	0002434e 	.word	0x0002434e
    a08c:	20000000 	.word	0x20000000

0000a090 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    a090:	4b0c      	ldr	r3, [pc, #48]	; (a0c4 <bt_conn_auth_cb_register+0x34>)
    a092:	b908      	cbnz	r0, a098 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    a094:	6018      	str	r0, [r3, #0]
		return 0;
    a096:	4770      	bx	lr
	}

	if (bt_auth) {
    a098:	681a      	ldr	r2, [r3, #0]
    a09a:	b962      	cbnz	r2, a0b6 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    a09c:	6902      	ldr	r2, [r0, #16]
    a09e:	b93a      	cbnz	r2, a0b0 <bt_conn_auth_cb_register+0x20>
    a0a0:	6802      	ldr	r2, [r0, #0]
    a0a2:	b95a      	cbnz	r2, a0bc <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    a0a4:	6842      	ldr	r2, [r0, #4]
    a0a6:	b94a      	cbnz	r2, a0bc <bt_conn_auth_cb_register+0x2c>
    a0a8:	6882      	ldr	r2, [r0, #8]
    a0aa:	b93a      	cbnz	r2, a0bc <bt_conn_auth_cb_register+0x2c>
    a0ac:	6942      	ldr	r2, [r0, #20]
    a0ae:	b92a      	cbnz	r2, a0bc <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    a0b0:	6018      	str	r0, [r3, #0]
	return 0;
    a0b2:	2000      	movs	r0, #0
    a0b4:	4770      	bx	lr
		return -EALREADY;
    a0b6:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a0ba:	4770      	bx	lr
		return -EINVAL;
    a0bc:	f06f 0015 	mvn.w	r0, #21
}
    a0c0:	4770      	bx	lr
    a0c2:	bf00      	nop
    a0c4:	20001574 	.word	0x20001574

0000a0c8 <bt_conn_index>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

uint8_t bt_conn_index(struct bt_conn *conn)
{
	uint8_t index = conn - conns;
    a0c8:	4b03      	ldr	r3, [pc, #12]	; (a0d8 <bt_conn_index+0x10>)
    a0ca:	1ac0      	subs	r0, r0, r3
    a0cc:	4b03      	ldr	r3, [pc, #12]	; (a0dc <bt_conn_index+0x14>)
    a0ce:	10c0      	asrs	r0, r0, #3
    a0d0:	4358      	muls	r0, r3

	__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
	return index;
}
    a0d2:	b2c0      	uxtb	r0, r0
    a0d4:	4770      	bx	lr
    a0d6:	bf00      	nop
    a0d8:	20000ca0 	.word	0x20000ca0
    a0dc:	e9bd37a7 	.word	0xe9bd37a7

0000a0e0 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    a0e0:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    a0e2:	490b      	ldr	r1, [pc, #44]	; (a110 <bt_conn_init+0x30>)
    a0e4:	480b      	ldr	r0, [pc, #44]	; (a114 <bt_conn_init+0x34>)
    a0e6:	f016 ffb1 	bl	2104c <k_queue_append>
    a0ea:	490b      	ldr	r1, [pc, #44]	; (a118 <bt_conn_init+0x38>)
    a0ec:	4809      	ldr	r0, [pc, #36]	; (a114 <bt_conn_init+0x34>)
    a0ee:	f016 ffad 	bl	2104c <k_queue_append>
    a0f2:	490a      	ldr	r1, [pc, #40]	; (a11c <bt_conn_init+0x3c>)
    a0f4:	4807      	ldr	r0, [pc, #28]	; (a114 <bt_conn_init+0x34>)
    a0f6:	f016 ffa9 	bl	2104c <k_queue_append>
	}

	bt_att_init();
    a0fa:	f015 fdde 	bl	1fcba <bt_att_init>

	err = bt_smp_init();
    a0fe:	f004 fa9b 	bl	e638 <bt_smp_init>
	if (err) {
    a102:	4604      	mov	r4, r0
    a104:	b908      	cbnz	r0, a10a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    a106:	f015 fad0 	bl	1f6aa <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    a10a:	4620      	mov	r0, r4
    a10c:	bd10      	pop	{r4, pc}
    a10e:	bf00      	nop
    a110:	2000157c 	.word	0x2000157c
    a114:	200009a0 	.word	0x200009a0
    a118:	2000158c 	.word	0x2000158c
    a11c:	2000159c 	.word	0x2000159c

0000a120 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    a120:	4a0b      	ldr	r2, [pc, #44]	; (a150 <l2cap_accept+0x30>)
{
    a122:	b508      	push	{r3, lr}
    a124:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    a126:	6810      	ldr	r0, [r2, #0]
    a128:	b918      	cbnz	r0, a132 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    a12a:	4b0a      	ldr	r3, [pc, #40]	; (a154 <l2cap_accept+0x34>)
    a12c:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    a12e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    a130:	bd08      	pop	{r3, pc}
    a132:	4909      	ldr	r1, [pc, #36]	; (a158 <l2cap_accept+0x38>)
    a134:	4a09      	ldr	r2, [pc, #36]	; (a15c <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    a136:	480a      	ldr	r0, [pc, #40]	; (a160 <l2cap_accept+0x40>)
    a138:	1a52      	subs	r2, r2, r1
    a13a:	08d2      	lsrs	r2, r2, #3
    a13c:	0192      	lsls	r2, r2, #6
    a13e:	f042 0201 	orr.w	r2, r2, #1
    a142:	4619      	mov	r1, r3
    a144:	f012 fea0 	bl	1ce88 <log_1>
	return -ENOMEM;
    a148:	f06f 000b 	mvn.w	r0, #11
    a14c:	e7f0      	b.n	a130 <l2cap_accept+0x10>
    a14e:	bf00      	nop
    a150:	20000d58 	.word	0x20000d58
    a154:	000223c8 	.word	0x000223c8
    a158:	00021aac 	.word	0x00021aac
    a15c:	00021b84 	.word	0x00021b84
    a160:	00024d18 	.word	0x00024d18

0000a164 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    a164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a166:	4605      	mov	r5, r0
    a168:	460f      	mov	r7, r1
    a16a:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    a16c:	2300      	movs	r3, #0
    a16e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    a172:	2104      	movs	r1, #4
    a174:	2000      	movs	r0, #0
    a176:	f7ff fec3 	bl	9f00 <bt_conn_create_pdu_timeout>
	if (!buf) {
    a17a:	4604      	mov	r4, r0
    a17c:	b960      	cbnz	r0, a198 <l2cap_create_le_sig_pdu.isra.0+0x34>
    a17e:	4a0a      	ldr	r2, [pc, #40]	; (a1a8 <l2cap_create_le_sig_pdu.isra.0+0x44>)
    a180:	4b0a      	ldr	r3, [pc, #40]	; (a1ac <l2cap_create_le_sig_pdu.isra.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    a182:	480b      	ldr	r0, [pc, #44]	; (a1b0 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
    a184:	1ad2      	subs	r2, r2, r3
    a186:	08d2      	lsrs	r2, r2, #3
    a188:	0192      	lsls	r2, r2, #6
    a18a:	f042 0201 	orr.w	r2, r2, #1
    a18e:	4629      	mov	r1, r5
    a190:	f012 fe7a 	bl	1ce88 <log_1>
}
    a194:	4620      	mov	r0, r4
    a196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_add(buf, sizeof(*hdr));
    a198:	2104      	movs	r1, #4
    a19a:	3008      	adds	r0, #8
    a19c:	f016 fce4 	bl	20b68 <net_buf_simple_add>
	hdr->code = code;
    a1a0:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    a1a2:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    a1a4:	8046      	strh	r6, [r0, #2]
	return buf;
    a1a6:	e7f5      	b.n	a194 <l2cap_create_le_sig_pdu.isra.0+0x30>
    a1a8:	00021b84 	.word	0x00021b84
    a1ac:	00021aac 	.word	0x00021aac
    a1b0:	00024d3f 	.word	0x00024d3f

0000a1b4 <l2cap_rtx_timeout>:
{
    a1b4:	b538      	push	{r3, r4, r5, lr}
    a1b6:	4a0b      	ldr	r2, [pc, #44]	; (a1e4 <l2cap_rtx_timeout+0x30>)
    a1b8:	4b0b      	ldr	r3, [pc, #44]	; (a1e8 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    a1ba:	4604      	mov	r4, r0
    a1bc:	1ad2      	subs	r2, r2, r3
    a1be:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    a1c2:	480a      	ldr	r0, [pc, #40]	; (a1ec <l2cap_rtx_timeout+0x38>)
    a1c4:	08d2      	lsrs	r2, r2, #3
    a1c6:	0192      	lsls	r2, r2, #6
    a1c8:	4621      	mov	r1, r4
    a1ca:	f042 0201 	orr.w	r2, r2, #1
    a1ce:	f012 fe5b 	bl	1ce88 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    a1d2:	4628      	mov	r0, r5
    a1d4:	4621      	mov	r1, r4
    a1d6:	f015 f9cd 	bl	1f574 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    a1da:	4620      	mov	r0, r4
}
    a1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    a1e0:	f015 b9ea 	b.w	1f5b8 <bt_l2cap_chan_del>
    a1e4:	00021b84 	.word	0x00021b84
    a1e8:	00021aac 	.word	0x00021aac
    a1ec:	00024d67 	.word	0x00024d67

0000a1f0 <bt_l2cap_connected>:
{
    a1f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a1f4:	4e29      	ldr	r6, [pc, #164]	; (a29c <bt_l2cap_connected+0xac>)
    a1f6:	4f2a      	ldr	r7, [pc, #168]	; (a2a0 <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a1f8:	f8df 80a8 	ldr.w	r8, [pc, #168]	; a2a4 <bt_l2cap_connected+0xb4>
{
    a1fc:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a1fe:	42be      	cmp	r6, r7
    a200:	d302      	bcc.n	a208 <bt_l2cap_connected+0x18>
}
    a202:	b003      	add	sp, #12
    a204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    a208:	6873      	ldr	r3, [r6, #4]
    a20a:	a901      	add	r1, sp, #4
    a20c:	4620      	mov	r0, r4
    a20e:	4798      	blx	r3
    a210:	2800      	cmp	r0, #0
    a212:	db3d      	blt.n	a290 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    a214:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    a216:	8833      	ldrh	r3, [r6, #0]
    a218:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    a21c:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a220:	4641      	mov	r1, r8
    a222:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    a226:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    a22a:	f017 f905 	bl	21438 <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a22e:	f3bf 8f5b 	dmb	ish
    a232:	f105 0340 	add.w	r3, r5, #64	; 0x40
    a236:	2200      	movs	r2, #0
    a238:	e853 1f00 	ldrex	r1, [r3]
    a23c:	e843 2000 	strex	r0, r2, [r3]
    a240:	2800      	cmp	r0, #0
    a242:	d1f9      	bne.n	a238 <bt_l2cap_connected+0x48>
    a244:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    a248:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    a24a:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    a24c:	f105 0308 	add.w	r3, r5, #8
    a250:	bb02      	cbnz	r2, a294 <bt_l2cap_connected+0xa4>
	list->head = node;
    a252:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
    a256:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    a258:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    a25a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    a25c:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    a260:	681b      	ldr	r3, [r3, #0]
    a262:	b103      	cbz	r3, a266 <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    a264:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a266:	9b01      	ldr	r3, [sp, #4]
    a268:	f3bf 8f5b 	dmb	ish
    a26c:	3340      	adds	r3, #64	; 0x40
    a26e:	e853 2f00 	ldrex	r2, [r3]
    a272:	f042 0201 	orr.w	r2, r2, #1
    a276:	e843 2100 	strex	r1, r2, [r3]
    a27a:	2900      	cmp	r1, #0
    a27c:	d1f7      	bne.n	a26e <bt_l2cap_connected+0x7e>
    a27e:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    a282:	9801      	ldr	r0, [sp, #4]
    a284:	6843      	ldr	r3, [r0, #4]
    a286:	699b      	ldr	r3, [r3, #24]
    a288:	b113      	cbz	r3, a290 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    a28a:	f100 0140 	add.w	r1, r0, #64	; 0x40
    a28e:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    a290:	360c      	adds	r6, #12
    a292:	e7b4      	b.n	a1fe <bt_l2cap_connected+0xe>
	parent->next = child;
    a294:	6013      	str	r3, [r2, #0]
	list->tail = node;
    a296:	6523      	str	r3, [r4, #80]	; 0x50
}
    a298:	e7dd      	b.n	a256 <bt_l2cap_connected+0x66>
    a29a:	bf00      	nop
    a29c:	000219ec 	.word	0x000219ec
    a2a0:	00021a10 	.word	0x00021a10
    a2a4:	0000a1b5 	.word	0x0000a1b5

0000a2a8 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    a2a8:	898b      	ldrh	r3, [r1, #12]
    a2aa:	2b03      	cmp	r3, #3
{
    a2ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a2ae:	4606      	mov	r6, r0
    a2b0:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    a2b2:	d80a      	bhi.n	a2ca <l2cap_recv+0x22>
    a2b4:	492e      	ldr	r1, [pc, #184]	; (a370 <l2cap_recv+0xc8>)
    a2b6:	4b2f      	ldr	r3, [pc, #188]	; (a374 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    a2b8:	482f      	ldr	r0, [pc, #188]	; (a378 <l2cap_recv+0xd0>)
    a2ba:	1ac9      	subs	r1, r1, r3
    a2bc:	08c9      	lsrs	r1, r1, #3
    a2be:	0189      	lsls	r1, r1, #6
    a2c0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    a2c4:	f012 fdd3 	bl	1ce6e <log_0>
		return 0;
    a2c8:	e013      	b.n	a2f2 <l2cap_recv+0x4a>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a2ca:	2104      	movs	r1, #4
    a2cc:	f105 0008 	add.w	r0, r5, #8
    a2d0:	f016 fc71 	bl	20bb6 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a2d4:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    a2d6:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    a2d8:	428a      	cmp	r2, r1
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a2da:	4604      	mov	r4, r0
	if (buf->len != len) {
    a2dc:	d00c      	beq.n	a2f8 <l2cap_recv+0x50>
    a2de:	4825      	ldr	r0, [pc, #148]	; (a374 <l2cap_recv+0xcc>)
    a2e0:	4b23      	ldr	r3, [pc, #140]	; (a370 <l2cap_recv+0xc8>)
    a2e2:	1a1b      	subs	r3, r3, r0
    a2e4:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    a2e6:	019b      	lsls	r3, r3, #6
    a2e8:	4824      	ldr	r0, [pc, #144]	; (a37c <l2cap_recv+0xd4>)
    a2ea:	f043 0301 	orr.w	r3, r3, #1
    a2ee:	f012 fddf 	bl	1ceb0 <log_2>
}
    a2f2:	2000      	movs	r0, #0
    a2f4:	b002      	add	sp, #8
    a2f6:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    a2f8:	7843      	ldrb	r3, [r0, #1]
    a2fa:	b943      	cbnz	r3, a30e <l2cap_recv+0x66>
    a2fc:	491c      	ldr	r1, [pc, #112]	; (a370 <l2cap_recv+0xc8>)
    a2fe:	4b1d      	ldr	r3, [pc, #116]	; (a374 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    a300:	481f      	ldr	r0, [pc, #124]	; (a380 <l2cap_recv+0xd8>)
    a302:	1ac9      	subs	r1, r1, r3
    a304:	08c9      	lsrs	r1, r1, #3
    a306:	0189      	lsls	r1, r1, #6
    a308:	f041 0101 	orr.w	r1, r1, #1
    a30c:	e7da      	b.n	a2c4 <l2cap_recv+0x1c>
	switch (hdr->code) {
    a30e:	7801      	ldrb	r1, [r0, #0]
    a310:	2901      	cmp	r1, #1
    a312:	d0ee      	beq.n	a2f2 <l2cap_recv+0x4a>
    a314:	2913      	cmp	r1, #19
    a316:	d10a      	bne.n	a32e <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    a318:	2a01      	cmp	r2, #1
    a31a:	d8ea      	bhi.n	a2f2 <l2cap_recv+0x4a>
    a31c:	4914      	ldr	r1, [pc, #80]	; (a370 <l2cap_recv+0xc8>)
    a31e:	4b15      	ldr	r3, [pc, #84]	; (a374 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    a320:	4818      	ldr	r0, [pc, #96]	; (a384 <l2cap_recv+0xdc>)
    a322:	1ac9      	subs	r1, r1, r3
    a324:	08c9      	lsrs	r1, r1, #3
    a326:	0189      	lsls	r1, r1, #6
    a328:	f041 0101 	orr.w	r1, r1, #1
    a32c:	e7ca      	b.n	a2c4 <l2cap_recv+0x1c>
    a32e:	4b11      	ldr	r3, [pc, #68]	; (a374 <l2cap_recv+0xcc>)
    a330:	4a0f      	ldr	r2, [pc, #60]	; (a370 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    a332:	4815      	ldr	r0, [pc, #84]	; (a388 <l2cap_recv+0xe0>)
    a334:	1ad2      	subs	r2, r2, r3
    a336:	08d2      	lsrs	r2, r2, #3
    a338:	0192      	lsls	r2, r2, #6
    a33a:	f042 0202 	orr.w	r2, r2, #2
    a33e:	f012 fda3 	bl	1ce88 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    a342:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    a344:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    a346:	2202      	movs	r2, #2
    a348:	2001      	movs	r0, #1
    a34a:	f7ff ff0b 	bl	a164 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    a34e:	4604      	mov	r4, r0
    a350:	2800      	cmp	r0, #0
    a352:	d0ce      	beq.n	a2f2 <l2cap_recv+0x4a>
	rej = net_buf_add(buf, sizeof(*rej));
    a354:	2102      	movs	r1, #2
    a356:	3008      	adds	r0, #8
    a358:	f016 fc06 	bl	20b68 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    a35c:	2300      	movs	r3, #0
    a35e:	7003      	strb	r3, [r0, #0]
    a360:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    a362:	4622      	mov	r2, r4
    a364:	9300      	str	r3, [sp, #0]
    a366:	2105      	movs	r1, #5
    a368:	4628      	mov	r0, r5
    a36a:	f015 f965 	bl	1f638 <bt_l2cap_send_cb>
}
    a36e:	e7c0      	b.n	a2f2 <l2cap_recv+0x4a>
    a370:	00021b84 	.word	0x00021b84
    a374:	00021aac 	.word	0x00021aac
    a378:	00024d77 	.word	0x00024d77
    a37c:	00024d95 	.word	0x00024d95
    a380:	00024db6 	.word	0x00024db6
    a384:	00024dd7 	.word	0x00024dd7
    a388:	00024df3 	.word	0x00024df3

0000a38c <bt_l2cap_recv>:
{
    a38c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    a38e:	898b      	ldrh	r3, [r1, #12]
    a390:	2b03      	cmp	r3, #3
{
    a392:	4605      	mov	r5, r0
    a394:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    a396:	d80e      	bhi.n	a3b6 <bt_l2cap_recv+0x2a>
    a398:	4914      	ldr	r1, [pc, #80]	; (a3ec <bt_l2cap_recv+0x60>)
    a39a:	4b15      	ldr	r3, [pc, #84]	; (a3f0 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    a39c:	4815      	ldr	r0, [pc, #84]	; (a3f4 <bt_l2cap_recv+0x68>)
    a39e:	1ac9      	subs	r1, r1, r3
    a3a0:	08c9      	lsrs	r1, r1, #3
    a3a2:	0189      	lsls	r1, r1, #6
    a3a4:	f041 0101 	orr.w	r1, r1, #1
    a3a8:	f012 fd61 	bl	1ce6e <log_0>
	net_buf_unref(buf);
    a3ac:	4620      	mov	r0, r4
}
    a3ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    a3b2:	f00f be9d 	b.w	1a0f0 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a3b6:	2104      	movs	r1, #4
    a3b8:	f104 0008 	add.w	r0, r4, #8
    a3bc:	f016 fbfb 	bl	20bb6 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
    a3c0:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    a3c2:	4628      	mov	r0, r5
    a3c4:	f015 f961 	bl	1f68a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a3c8:	b950      	cbnz	r0, a3e0 <bt_l2cap_recv+0x54>
    a3ca:	4b09      	ldr	r3, [pc, #36]	; (a3f0 <bt_l2cap_recv+0x64>)
    a3cc:	4a07      	ldr	r2, [pc, #28]	; (a3ec <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown CID 0x%04x", cid);
    a3ce:	480a      	ldr	r0, [pc, #40]	; (a3f8 <bt_l2cap_recv+0x6c>)
    a3d0:	1ad2      	subs	r2, r2, r3
    a3d2:	08d2      	lsrs	r2, r2, #3
    a3d4:	0192      	lsls	r2, r2, #6
    a3d6:	f042 0202 	orr.w	r2, r2, #2
    a3da:	f012 fd55 	bl	1ce88 <log_1>
		net_buf_unref(buf);
    a3de:	e7e5      	b.n	a3ac <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    a3e0:	6843      	ldr	r3, [r0, #4]
    a3e2:	4621      	mov	r1, r4
    a3e4:	691b      	ldr	r3, [r3, #16]
    a3e6:	4798      	blx	r3
    a3e8:	e7e0      	b.n	a3ac <bt_l2cap_recv+0x20>
    a3ea:	bf00      	nop
    a3ec:	00021b84 	.word	0x00021b84
    a3f0:	00021aac 	.word	0x00021aac
    a3f4:	00024e11 	.word	0x00024e11
    a3f8:	00024e2e 	.word	0x00024e2e

0000a3fc <bt_l2cap_update_conn_param>:
{
    a3fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    a3fe:	4b15      	ldr	r3, [pc, #84]	; (a454 <bt_l2cap_update_conn_param+0x58>)
    a400:	781a      	ldrb	r2, [r3, #0]
    a402:	3201      	adds	r2, #1
	if (!ident) {
    a404:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    a408:	bf08      	it	eq
    a40a:	2201      	moveq	r2, #1
    a40c:	701a      	strb	r2, [r3, #0]
{
    a40e:	4605      	mov	r5, r0
    a410:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    a412:	2208      	movs	r2, #8
    a414:	7819      	ldrb	r1, [r3, #0]
    a416:	2012      	movs	r0, #18
    a418:	f7ff fea4 	bl	a164 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    a41c:	4606      	mov	r6, r0
    a41e:	b1b0      	cbz	r0, a44e <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    a420:	2108      	movs	r1, #8
    a422:	4408      	add	r0, r1
    a424:	f016 fba0 	bl	20b68 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    a428:	8822      	ldrh	r2, [r4, #0]
    a42a:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    a42c:	8862      	ldrh	r2, [r4, #2]
    a42e:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    a430:	88a2      	ldrh	r2, [r4, #4]
    a432:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    a434:	88e2      	ldrh	r2, [r4, #6]
    a436:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    a438:	2400      	movs	r4, #0
    a43a:	9400      	str	r4, [sp, #0]
    a43c:	4623      	mov	r3, r4
    a43e:	4632      	mov	r2, r6
    a440:	2105      	movs	r1, #5
    a442:	4628      	mov	r0, r5
    a444:	f015 f8f8 	bl	1f638 <bt_l2cap_send_cb>
	return 0;
    a448:	4620      	mov	r0, r4
}
    a44a:	b002      	add	sp, #8
    a44c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    a44e:	f06f 000b 	mvn.w	r0, #11
    a452:	e7fa      	b.n	a44a <bt_l2cap_update_conn_param+0x4e>
    a454:	20003059 	.word	0x20003059

0000a458 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    a458:	4b02      	ldr	r3, [pc, #8]	; (a464 <att_cfm_sent+0xc>)
    a45a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    a45e:	f015 b952 	b.w	1f706 <att_sent>
    a462:	bf00      	nop
    a464:	0001f98f 	.word	0x0001f98f

0000a468 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    a468:	4b02      	ldr	r3, [pc, #8]	; (a474 <att_rsp_sent+0xc>)
    a46a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    a46e:	f015 b94a 	b.w	1f706 <att_sent>
    a472:	bf00      	nop
    a474:	0001f973 	.word	0x0001f973

0000a478 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    a478:	4b02      	ldr	r3, [pc, #8]	; (a484 <att_req_sent+0xc>)
    a47a:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    a47e:	f015 b942 	b.w	1f706 <att_sent>
    a482:	bf00      	nop
    a484:	0000a7d1 	.word	0x0000a7d1

0000a488 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    a488:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    a48a:	3808      	subs	r0, #8
    a48c:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    a48e:	a901      	add	r1, sp, #4
    a490:	4802      	ldr	r0, [pc, #8]	; (a49c <bt_att_released+0x14>)
    a492:	f010 ffeb 	bl	1b46c <k_mem_slab_free>
}
    a496:	b003      	add	sp, #12
    a498:	f85d fb04 	ldr.w	pc, [sp], #4
    a49c:	200008cc 	.word	0x200008cc

0000a4a0 <read_group_cb>:
{
    a4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a4a2:	b085      	sub	sp, #20
	struct bt_att_chan *chan = data->chan;
    a4a4:	680e      	ldr	r6, [r1, #0]
{
    a4a6:	4605      	mov	r5, r0
    a4a8:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a4aa:	2700      	movs	r7, #0
    a4ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a4b0:	6800      	ldr	r0, [r0, #0]
    a4b2:	f88d 7008 	strb.w	r7, [sp, #8]
    a4b6:	a902      	add	r1, sp, #8
    a4b8:	f8ad 300a 	strh.w	r3, [sp, #10]
    a4bc:	f014 fd8c 	bl	1efd8 <bt_uuid_cmp>
    a4c0:	b1a0      	cbz	r0, a4ec <read_group_cb+0x4c>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a4c2:	f642 0301 	movw	r3, #10241	; 0x2801
    a4c6:	6828      	ldr	r0, [r5, #0]
    a4c8:	f88d 700c 	strb.w	r7, [sp, #12]
    a4cc:	a903      	add	r1, sp, #12
    a4ce:	f8ad 300e 	strh.w	r3, [sp, #14]
    a4d2:	f014 fd81 	bl	1efd8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    a4d6:	b148      	cbz	r0, a4ec <read_group_cb+0x4c>
		if (data->group &&
    a4d8:	6923      	ldr	r3, [r4, #16]
    a4da:	b123      	cbz	r3, a4e6 <read_group_cb+0x46>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    a4dc:	8a2a      	ldrh	r2, [r5, #16]
		if (data->group &&
    a4de:	8859      	ldrh	r1, [r3, #2]
    a4e0:	4291      	cmp	r1, r2
    a4e2:	d200      	bcs.n	a4e6 <read_group_cb+0x46>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a4e4:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    a4e6:	2001      	movs	r0, #1
}
    a4e8:	b005      	add	sp, #20
    a4ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a4ec:	6861      	ldr	r1, [r4, #4]
    a4ee:	6828      	ldr	r0, [r5, #0]
    a4f0:	f014 fd72 	bl	1efd8 <bt_uuid_cmp>
    a4f4:	b110      	cbz	r0, a4fc <read_group_cb+0x5c>
		data->group = NULL;
    a4f6:	2300      	movs	r3, #0
    a4f8:	6123      	str	r3, [r4, #16]
    a4fa:	e7f4      	b.n	a4e6 <read_group_cb+0x46>
	if (data->rsp->len &&
    a4fc:	68e3      	ldr	r3, [r4, #12]
    a4fe:	68a0      	ldr	r0, [r4, #8]
    a500:	781a      	ldrb	r2, [r3, #0]
    a502:	b13a      	cbz	r2, a514 <read_group_cb+0x74>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    a504:	f8b6 305e 	ldrh.w	r3, [r6, #94]	; 0x5e
    a508:	8981      	ldrh	r1, [r0, #12]
    a50a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    a50c:	4293      	cmp	r3, r2
    a50e:	da01      	bge.n	a514 <read_group_cb+0x74>
		return BT_GATT_ITER_STOP;
    a510:	2000      	movs	r0, #0
    a512:	e7e9      	b.n	a4e8 <read_group_cb+0x48>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a514:	2104      	movs	r1, #4
    a516:	3008      	adds	r0, #8
    a518:	f016 fb26 	bl	20b68 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a51c:	8a2b      	ldrh	r3, [r5, #16]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    a51e:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a520:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a522:	8043      	strh	r3, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    a524:	4b07      	ldr	r3, [pc, #28]	; (a544 <read_group_cb+0xa4>)
    a526:	9300      	str	r3, [sp, #0]
    a528:	68a2      	ldr	r2, [r4, #8]
    a52a:	9401      	str	r4, [sp, #4]
    a52c:	2300      	movs	r3, #0
    a52e:	4629      	mov	r1, r5
    a530:	4630      	mov	r0, r6
    a532:	f015 f983 	bl	1f83c <att_chan_read>
	if (read < 0) {
    a536:	2800      	cmp	r0, #0
    a538:	dbea      	blt.n	a510 <read_group_cb+0x70>
	if (!data->group) {
    a53a:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    a53c:	3800      	subs	r0, #0
    a53e:	bf18      	it	ne
    a540:	2001      	movne	r0, #1
    a542:	e7d1      	b.n	a4e8 <read_group_cb+0x48>
    a544:	0001f953 	.word	0x0001f953

0000a548 <read_type_cb>:
{
    a548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
    a54c:	f8d1 8000 	ldr.w	r8, [r1]
{
    a550:	4606      	mov	r6, r0
    a552:	460c      	mov	r4, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a554:	6800      	ldr	r0, [r0, #0]
    a556:	6849      	ldr	r1, [r1, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    a558:	f8d8 5008 	ldr.w	r5, [r8, #8]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    a55c:	f014 fd3c 	bl	1efd8 <bt_uuid_cmp>
    a560:	4607      	mov	r7, r0
    a562:	2800      	cmp	r0, #0
    a564:	d13e      	bne.n	a5e4 <read_type_cb+0x9c>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    a566:	4628      	mov	r0, r5
    a568:	2215      	movs	r2, #21
    a56a:	4631      	mov	r1, r6
    a56c:	f015 feac 	bl	202c8 <bt_gatt_check_perm>
    a570:	4605      	mov	r5, r0
    a572:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    a574:	b148      	cbz	r0, a58a <read_type_cb+0x42>
		if (data->rsp->len) {
    a576:	68e3      	ldr	r3, [r4, #12]
    a578:	781b      	ldrb	r3, [r3, #0]
    a57a:	b923      	cbnz	r3, a586 <read_type_cb+0x3e>
		return BT_GATT_ITER_STOP;
    a57c:	2500      	movs	r5, #0
}
    a57e:	4628      	mov	r0, r5
    a580:	b002      	add	sp, #8
    a582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			data->err = 0x00;
    a586:	7527      	strb	r7, [r4, #20]
    a588:	e7f8      	b.n	a57c <read_type_cb+0x34>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    a58a:	68a0      	ldr	r0, [r4, #8]
    a58c:	f016 faca 	bl	20b24 <net_buf_frag_last>
    a590:	2102      	movs	r1, #2
    a592:	3008      	adds	r0, #8
    a594:	f016 fae8 	bl	20b68 <net_buf_simple_add>
	data->item->handle = sys_cpu_to_le16(attr->handle);
    a598:	8a33      	ldrh	r3, [r6, #16]
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    a59a:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    a59c:	8003      	strh	r3, [r0, #0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    a59e:	4b12      	ldr	r3, [pc, #72]	; (a5e8 <read_type_cb+0xa0>)
    a5a0:	9300      	str	r3, [sp, #0]
    a5a2:	68a2      	ldr	r2, [r4, #8]
    a5a4:	9401      	str	r4, [sp, #4]
    a5a6:	462b      	mov	r3, r5
    a5a8:	4631      	mov	r1, r6
    a5aa:	4640      	mov	r0, r8
    a5ac:	f015 f946 	bl	1f83c <att_chan_read>
	if (read < 0) {
    a5b0:	2800      	cmp	r0, #0
    a5b2:	da07      	bge.n	a5c4 <read_type_cb+0x7c>
	if (err < 0 && err >= -0xff) {
    a5b4:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    a5b8:	bf26      	itte	cs
    a5ba:	4240      	negcs	r0, r0
    a5bc:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    a5be:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    a5c0:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    a5c2:	e7dc      	b.n	a57e <read_type_cb+0x36>
	if (!data->item) {
    a5c4:	6923      	ldr	r3, [r4, #16]
    a5c6:	2b00      	cmp	r3, #0
    a5c8:	d0d8      	beq.n	a57c <read_type_cb+0x34>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    a5ca:	68a0      	ldr	r0, [r4, #8]
    a5cc:	f015 f893 	bl	1f6f6 <net_buf_frags_len>
    a5d0:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a5d4:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    a5d6:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    a5d8:	7818      	ldrb	r0, [r3, #0]
    a5da:	4285      	cmp	r5, r0
    a5dc:	bf94      	ite	ls
    a5de:	2500      	movls	r5, #0
    a5e0:	2501      	movhi	r5, #1
    a5e2:	e7cc      	b.n	a57e <read_type_cb+0x36>
		return BT_GATT_ITER_CONTINUE;
    a5e4:	2501      	movs	r5, #1
    a5e6:	e7ca      	b.n	a57e <read_type_cb+0x36>
    a5e8:	0001f713 	.word	0x0001f713

0000a5ec <find_type_cb>:
{
    a5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_att_chan *chan = data->chan;
    a5f0:	680f      	ldr	r7, [r1, #0]
{
    a5f2:	b090      	sub	sp, #64	; 0x40
    a5f4:	4606      	mov	r6, r0
    a5f6:	460d      	mov	r5, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a5f8:	2400      	movs	r4, #0
    a5fa:	f642 0301 	movw	r3, #10241	; 0x2801
    a5fe:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    a600:	f8d7 8008 	ldr.w	r8, [r7, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    a604:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    a608:	a90b      	add	r1, sp, #44	; 0x2c
    a60a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a60e:	f014 fce3 	bl	1efd8 <bt_uuid_cmp>
    a612:	2800      	cmp	r0, #0
    a614:	d06a      	beq.n	a6ec <find_type_cb+0x100>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    a616:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    a61a:	6830      	ldr	r0, [r6, #0]
    a61c:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    a620:	a90b      	add	r1, sp, #44	; 0x2c
    a622:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    a626:	f014 fcd7 	bl	1efd8 <bt_uuid_cmp>
    a62a:	4604      	mov	r4, r0
    a62c:	b150      	cbz	r0, a644 <find_type_cb+0x58>
		if (data->group &&
    a62e:	68ab      	ldr	r3, [r5, #8]
    a630:	b123      	cbz	r3, a63c <find_type_cb+0x50>
		    attr->handle > sys_le16_to_cpu(data->group->end_handle)) {
    a632:	8a32      	ldrh	r2, [r6, #16]
		if (data->group &&
    a634:	8859      	ldrh	r1, [r3, #2]
    a636:	4291      	cmp	r1, r2
    a638:	d200      	bcs.n	a63c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a63a:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    a63c:	2001      	movs	r0, #1
}
    a63e:	b010      	add	sp, #64	; 0x40
    a640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    a644:	6869      	ldr	r1, [r5, #4]
    a646:	4608      	mov	r0, r1
    a648:	f015 f855 	bl	1f6f6 <net_buf_frags_len>
    a64c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    a650:	1a1b      	subs	r3, r3, r0
    a652:	2b03      	cmp	r3, #3
    a654:	d922      	bls.n	a69c <find_type_cb+0xb0>
	frag = net_buf_frag_last(data->buf);
    a656:	4608      	mov	r0, r1
    a658:	f016 fa64 	bl	20b24 <net_buf_frag_last>
    a65c:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    a65e:	6868      	ldr	r0, [r5, #4]
    a660:	f015 f849 	bl	1f6f6 <net_buf_frags_len>
    a664:	f8b7 905e 	ldrh.w	r9, [r7, #94]	; 0x5e
    a668:	f104 0a08 	add.w	sl, r4, #8
    a66c:	eba9 0900 	sub.w	r9, r9, r0
    a670:	4650      	mov	r0, sl
    a672:	f016 fab4 	bl	20bde <net_buf_simple_tailroom>
    a676:	4581      	cmp	r9, r0
    a678:	d212      	bcs.n	a6a0 <find_type_cb+0xb4>
    a67a:	6868      	ldr	r0, [r5, #4]
    a67c:	f015 f83b 	bl	1f6f6 <net_buf_frags_len>
    a680:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    a684:	1a18      	subs	r0, r3, r0
	if (!len) {
    a686:	b998      	cbnz	r0, a6b0 <find_type_cb+0xc4>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    a688:	686b      	ldr	r3, [r5, #4]
    a68a:	7998      	ldrb	r0, [r3, #6]
    a68c:	f00f fc74 	bl	19f78 <net_buf_pool_get>
    a690:	2200      	movs	r2, #0
    a692:	2300      	movs	r3, #0
    a694:	f016 fa12 	bl	20abc <net_buf_alloc_fixed>
		if (!frag) {
    a698:	4604      	mov	r4, r0
    a69a:	b928      	cbnz	r0, a6a8 <find_type_cb+0xbc>
		return BT_GATT_ITER_STOP;
    a69c:	4620      	mov	r0, r4
    a69e:	e7ce      	b.n	a63e <find_type_cb+0x52>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    a6a0:	4650      	mov	r0, sl
    a6a2:	f016 fa9c 	bl	20bde <net_buf_simple_tailroom>
    a6a6:	e7ee      	b.n	a686 <find_type_cb+0x9a>
		net_buf_frag_add(data->buf, frag);
    a6a8:	4601      	mov	r1, r0
    a6aa:	6868      	ldr	r0, [r5, #4]
    a6ac:	f016 fa4b 	bl	20b46 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    a6b0:	2300      	movs	r3, #0
    a6b2:	6877      	ldr	r7, [r6, #4]
    a6b4:	9300      	str	r3, [sp, #0]
    a6b6:	aa02      	add	r2, sp, #8
    a6b8:	2310      	movs	r3, #16
    a6ba:	4631      	mov	r1, r6
    a6bc:	4640      	mov	r0, r8
    a6be:	47b8      	blx	r7
	if (read < 0) {
    a6c0:	1e07      	subs	r7, r0, #0
    a6c2:	db13      	blt.n	a6ec <find_type_cb+0x100>
	if (read != data->value_len) {
    a6c4:	7c2a      	ldrb	r2, [r5, #16]
    a6c6:	68e8      	ldr	r0, [r5, #12]
    a6c8:	42ba      	cmp	r2, r7
    a6ca:	d034      	beq.n	a736 <find_type_cb+0x14a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    a6cc:	4601      	mov	r1, r0
    a6ce:	a80b      	add	r0, sp, #44	; 0x2c
    a6d0:	f014 fcac 	bl	1f02c <bt_uuid_create>
    a6d4:	b968      	cbnz	r0, a6f2 <find_type_cb+0x106>
    a6d6:	4a1a      	ldr	r2, [pc, #104]	; (a740 <find_type_cb+0x154>)
    a6d8:	4b1a      	ldr	r3, [pc, #104]	; (a744 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    a6da:	7c29      	ldrb	r1, [r5, #16]
    a6dc:	481a      	ldr	r0, [pc, #104]	; (a748 <find_type_cb+0x15c>)
    a6de:	1ad2      	subs	r2, r2, r3
    a6e0:	08d2      	lsrs	r2, r2, #3
    a6e2:	0192      	lsls	r2, r2, #6
    a6e4:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    a6e8:	f012 fbce 	bl	1ce88 <log_1>
	data->group = NULL;
    a6ec:	2300      	movs	r3, #0
    a6ee:	60ab      	str	r3, [r5, #8]
    a6f0:	e7a4      	b.n	a63c <find_type_cb+0x50>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    a6f2:	b2fa      	uxtb	r2, r7
    a6f4:	a902      	add	r1, sp, #8
    a6f6:	a806      	add	r0, sp, #24
    a6f8:	f014 fc98 	bl	1f02c <bt_uuid_create>
    a6fc:	b948      	cbnz	r0, a712 <find_type_cb+0x126>
    a6fe:	4a10      	ldr	r2, [pc, #64]	; (a740 <find_type_cb+0x154>)
    a700:	4b10      	ldr	r3, [pc, #64]	; (a744 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    a702:	4812      	ldr	r0, [pc, #72]	; (a74c <find_type_cb+0x160>)
    a704:	1ad2      	subs	r2, r2, r3
    a706:	08d2      	lsrs	r2, r2, #3
    a708:	0192      	lsls	r2, r2, #6
    a70a:	f042 0202 	orr.w	r2, r2, #2
    a70e:	4639      	mov	r1, r7
    a710:	e7ea      	b.n	a6e8 <find_type_cb+0xfc>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    a712:	a906      	add	r1, sp, #24
    a714:	a80b      	add	r0, sp, #44	; 0x2c
    a716:	f014 fc5f 	bl	1efd8 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    a71a:	2800      	cmp	r0, #0
    a71c:	d1e6      	bne.n	a6ec <find_type_cb+0x100>
	data->err = 0x00;
    a71e:	2300      	movs	r3, #0
    a720:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
    a722:	2104      	movs	r1, #4
    a724:	f104 0008 	add.w	r0, r4, #8
    a728:	f016 fa1e 	bl	20b68 <net_buf_simple_add>
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a72c:	8a33      	ldrh	r3, [r6, #16]
	data->group = net_buf_add(frag, sizeof(*data->group));
    a72e:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    a730:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    a732:	8043      	strh	r3, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    a734:	e782      	b.n	a63c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    a736:	a902      	add	r1, sp, #8
    a738:	f014 fb4b 	bl	1edd2 <memcmp>
    a73c:	e7ed      	b.n	a71a <find_type_cb+0x12e>
    a73e:	bf00      	nop
    a740:	00021ab4 	.word	0x00021ab4
    a744:	00021aac 	.word	0x00021aac
    a748:	00024e63 	.word	0x00024e63
    a74c:	00024e82 	.word	0x00024e82

0000a750 <att_get>:
{
    a750:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    a752:	7b43      	ldrb	r3, [r0, #13]
    a754:	2b07      	cmp	r3, #7
    a756:	d00b      	beq.n	a770 <att_get+0x20>
    a758:	4918      	ldr	r1, [pc, #96]	; (a7bc <att_get+0x6c>)
    a75a:	4b19      	ldr	r3, [pc, #100]	; (a7c0 <att_get+0x70>)
		BT_WARN("Not connected");
    a75c:	4819      	ldr	r0, [pc, #100]	; (a7c4 <att_get+0x74>)
    a75e:	1ac9      	subs	r1, r1, r3
    a760:	08c9      	lsrs	r1, r1, #3
    a762:	0189      	lsls	r1, r1, #6
    a764:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("ATT channel flagged as disconnected");
    a768:	f012 fb81 	bl	1ce6e <log_0>
		return NULL;
    a76c:	2400      	movs	r4, #0
    a76e:	e00e      	b.n	a78e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    a770:	2104      	movs	r1, #4
    a772:	f014 ff8a 	bl	1f68a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    a776:	4604      	mov	r4, r0
    a778:	b958      	cbnz	r0, a792 <att_get+0x42>
    a77a:	4910      	ldr	r1, [pc, #64]	; (a7bc <att_get+0x6c>)
    a77c:	4b10      	ldr	r3, [pc, #64]	; (a7c0 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    a77e:	4812      	ldr	r0, [pc, #72]	; (a7c8 <att_get+0x78>)
    a780:	1ac9      	subs	r1, r1, r3
    a782:	08c9      	lsrs	r1, r1, #3
    a784:	0189      	lsls	r1, r1, #6
    a786:	f041 0101 	orr.w	r1, r1, #1
    a78a:	f012 fb70 	bl	1ce6e <log_0>
}
    a78e:	4620      	mov	r0, r4
    a790:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a792:	f3bf 8f5b 	dmb	ish
    a796:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    a79a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    a79e:	075b      	lsls	r3, r3, #29
    a7a0:	d508      	bpl.n	a7b4 <att_get+0x64>
    a7a2:	4906      	ldr	r1, [pc, #24]	; (a7bc <att_get+0x6c>)
    a7a4:	4b06      	ldr	r3, [pc, #24]	; (a7c0 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    a7a6:	4809      	ldr	r0, [pc, #36]	; (a7cc <att_get+0x7c>)
    a7a8:	1ac9      	subs	r1, r1, r3
    a7aa:	08c9      	lsrs	r1, r1, #3
    a7ac:	0189      	lsls	r1, r1, #6
    a7ae:	f041 0102 	orr.w	r1, r1, #2
    a7b2:	e7d9      	b.n	a768 <att_get+0x18>
	return att_chan->att;
    a7b4:	f850 4c08 	ldr.w	r4, [r0, #-8]
    a7b8:	e7e9      	b.n	a78e <att_get+0x3e>
    a7ba:	bf00      	nop
    a7bc:	00021ab4 	.word	0x00021ab4
    a7c0:	00021aac 	.word	0x00021aac
    a7c4:	00024ea1 	.word	0x00024ea1
    a7c8:	00024eaf 	.word	0x00024eaf
    a7cc:	00024eca 	.word	0x00024eca

0000a7d0 <chan_req_sent>:
	if (chan->req) {
    a7d0:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    a7d4:	b13b      	cbz	r3, a7e6 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    a7d6:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    a7da:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    a7de:	4802      	ldr	r0, [pc, #8]	; (a7e8 <chan_req_sent+0x18>)
    a7e0:	2300      	movs	r3, #0
    a7e2:	f011 bbf7 	b.w	1bfd4 <k_delayed_work_submit_to_queue>
}
    a7e6:	4770      	bx	lr
    a7e8:	200012a8 	.word	0x200012a8

0000a7ec <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    a7ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    a7ee:	2300      	movs	r3, #0
{
    a7f0:	4606      	mov	r6, r0
    a7f2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    a7f4:	482c      	ldr	r0, [pc, #176]	; (a8a8 <bt_att_accept+0xbc>)
    a7f6:	2200      	movs	r2, #0
    a7f8:	4669      	mov	r1, sp
    a7fa:	f010 fe05 	bl	1b408 <k_mem_slab_alloc>
    a7fe:	4604      	mov	r4, r0
    a800:	b178      	cbz	r0, a822 <bt_att_accept+0x36>
    a802:	4a2a      	ldr	r2, [pc, #168]	; (a8ac <bt_att_accept+0xc0>)
    a804:	4b2a      	ldr	r3, [pc, #168]	; (a8b0 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT context for conn %p", conn);
    a806:	482b      	ldr	r0, [pc, #172]	; (a8b4 <bt_att_accept+0xc8>)
    a808:	1ad2      	subs	r2, r2, r3
    a80a:	08d2      	lsrs	r2, r2, #3
    a80c:	0192      	lsls	r2, r2, #6
    a80e:	f042 0201 	orr.w	r2, r2, #1
    a812:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    a814:	f012 fb38 	bl	1ce88 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    a818:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    a81c:	4620      	mov	r0, r4
    a81e:	b003      	add	sp, #12
    a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    a822:	4601      	mov	r1, r0
    a824:	2244      	movs	r2, #68	; 0x44
    a826:	9800      	ldr	r0, [sp, #0]
    a828:	f014 fb0e 	bl	1ee48 <memset>
	att->conn = conn;
    a82c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    a82e:	4822      	ldr	r0, [pc, #136]	; (a8b8 <bt_att_accept+0xcc>)
	list->tail = NULL;
    a830:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    a832:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    a836:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    a83a:	2200      	movs	r2, #0
    a83c:	2300      	movs	r3, #0
    a83e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    a840:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    a842:	f010 fde1 	bl	1b408 <k_mem_slab_alloc>
    a846:	4604      	mov	r4, r0
    a848:	b148      	cbz	r0, a85e <bt_att_accept+0x72>
    a84a:	4a18      	ldr	r2, [pc, #96]	; (a8ac <bt_att_accept+0xc0>)
    a84c:	4b18      	ldr	r3, [pc, #96]	; (a8b0 <bt_att_accept+0xc4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    a84e:	6829      	ldr	r1, [r5, #0]
    a850:	481a      	ldr	r0, [pc, #104]	; (a8bc <bt_att_accept+0xd0>)
    a852:	1ad2      	subs	r2, r2, r3
    a854:	08d2      	lsrs	r2, r2, #3
    a856:	0192      	lsls	r2, r2, #6
    a858:	f042 0201 	orr.w	r2, r2, #1
    a85c:	e7da      	b.n	a814 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    a85e:	4601      	mov	r1, r0
    a860:	f44f 7298 	mov.w	r2, #304	; 0x130
    a864:	9801      	ldr	r0, [sp, #4]
    a866:	f014 faef 	bl	1ee48 <memset>
	chan->chan.chan.ops = &ops;
    a86a:	9801      	ldr	r0, [sp, #4]
    a86c:	4b14      	ldr	r3, [pc, #80]	; (a8c0 <bt_att_accept+0xd4>)
    a86e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    a870:	30c8      	adds	r0, #200	; 0xc8
    a872:	f016 fbdf 	bl	21034 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    a876:	9801      	ldr	r0, [sp, #4]
    a878:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    a87c:	2203      	movs	r2, #3
    a87e:	4611      	mov	r1, r2
    a880:	f016 fd57 	bl	21332 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    a884:	9b01      	ldr	r3, [sp, #4]
    a886:	f3bf 8f5b 	dmb	ish
    a88a:	33c0      	adds	r3, #192	; 0xc0
    a88c:	e853 2f00 	ldrex	r2, [r3]
    a890:	e843 4100 	strex	r1, r4, [r3]
    a894:	2900      	cmp	r1, #0
    a896:	d1f9      	bne.n	a88c <bt_att_accept+0xa0>
    a898:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    a89c:	9b01      	ldr	r3, [sp, #4]
    a89e:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    a8a2:	603b      	str	r3, [r7, #0]
	return 0;
    a8a4:	e7ba      	b.n	a81c <bt_att_accept+0x30>
    a8a6:	bf00      	nop
    a8a8:	200008b0 	.word	0x200008b0
    a8ac:	00021ab4 	.word	0x00021ab4
    a8b0:	00021aac 	.word	0x00021aac
    a8b4:	00024eee 	.word	0x00024eee
    a8b8:	200008cc 	.word	0x200008cc
    a8bc:	00024f13 	.word	0x00024f13
    a8c0:	20000324 	.word	0x20000324

0000a8c4 <bt_att_connected>:
{
    a8c4:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    a8c6:	2104      	movs	r1, #4
{
    a8c8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    a8ca:	6800      	ldr	r0, [r0, #0]
    a8cc:	f014 fecd 	bl	1f66a <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    a8d0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    a8d4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    a8d6:	b93b      	cbnz	r3, a8e8 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    a8d8:	f105 000c 	add.w	r0, r5, #12
    a8dc:	f016 fbaa 	bl	21034 <z_impl_k_queue_init>
    a8e0:	f105 0024 	add.w	r0, r5, #36	; 0x24
    a8e4:	f016 fba6 	bl	21034 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    a8e8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    a8ea:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    a8ee:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    a8f0:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    a8f4:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    a8f6:	b902      	cbnz	r2, a8fa <bt_att_connected+0x36>
	list->tail = node;
    a8f8:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a8fa:	f3bf 8f5b 	dmb	ish
    a8fe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    a902:	4908      	ldr	r1, [pc, #32]	; (a924 <bt_att_connected+0x60>)
    a904:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    a908:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a90a:	bf5e      	ittt	pl
    a90c:	2317      	movpl	r3, #23
    a90e:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    a912:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    a916:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
    a91a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    a91e:	f016 bd8b 	b.w	21438 <k_delayed_work_init>
    a922:	bf00      	nop
    a924:	0000b66d 	.word	0x0000b66d

0000a928 <prep_write_cb>:
{
    a928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a92a:	460c      	mov	r4, r1
    a92c:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
    a92e:	4601      	mov	r1, r0
    a930:	222a      	movs	r2, #42	; 0x2a
    a932:	6820      	ldr	r0, [r4, #0]
    a934:	f015 fcc8 	bl	202c8 <bt_gatt_check_perm>
    a938:	4605      	mov	r5, r0
    a93a:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    a93c:	2800      	cmp	r0, #0
    a93e:	d12d      	bne.n	a99c <prep_write_cb+0x74>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    a940:	7cb3      	ldrb	r3, [r6, #18]
    a942:	065b      	lsls	r3, r3, #25
    a944:	d514      	bpl.n	a970 <prep_write_cb+0x48>
	write = attr->write(data->conn, attr, data->value, data->len,
    a946:	2301      	movs	r3, #1
    a948:	9301      	str	r3, [sp, #4]
    a94a:	89e3      	ldrh	r3, [r4, #14]
    a94c:	9300      	str	r3, [sp, #0]
    a94e:	68b7      	ldr	r7, [r6, #8]
    a950:	89a3      	ldrh	r3, [r4, #12]
    a952:	68a2      	ldr	r2, [r4, #8]
    a954:	6820      	ldr	r0, [r4, #0]
    a956:	4631      	mov	r1, r6
    a958:	47b8      	blx	r7
	if (write != 0) {
    a95a:	b148      	cbz	r0, a970 <prep_write_cb+0x48>
	if (err < 0 && err >= -0xff) {
    a95c:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    a960:	bf26      	itte	cs
    a962:	4243      	negcs	r3, r0
    a964:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    a966:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    a968:	7423      	strb	r3, [r4, #16]
}
    a96a:	4628      	mov	r0, r5
    a96c:	b003      	add	sp, #12
    a96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    a970:	480b      	ldr	r0, [pc, #44]	; (a9a0 <prep_write_cb+0x78>)
    a972:	2200      	movs	r2, #0
    a974:	2300      	movs	r3, #0
    a976:	f016 f8a1 	bl	20abc <net_buf_alloc_fixed>
    a97a:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    a97c:	b908      	cbnz	r0, a982 <prep_write_cb+0x5a>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    a97e:	2309      	movs	r3, #9
    a980:	e7f2      	b.n	a968 <prep_write_cb+0x40>
	attr_data->handle = attr->handle;
    a982:	8a33      	ldrh	r3, [r6, #16]
    a984:	8283      	strh	r3, [r0, #20]
	attr_data->offset = data->offset;
    a986:	89e3      	ldrh	r3, [r4, #14]
    a988:	82c3      	strh	r3, [r0, #22]
	net_buf_add_mem(data->buf, data->value, data->len);
    a98a:	89a2      	ldrh	r2, [r4, #12]
    a98c:	68a1      	ldr	r1, [r4, #8]
    a98e:	3008      	adds	r0, #8
    a990:	f016 f8f0 	bl	20b74 <net_buf_simple_add_mem>
	data->err = 0U;
    a994:	2300      	movs	r3, #0
    a996:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    a998:	2501      	movs	r5, #1
    a99a:	e7e6      	b.n	a96a <prep_write_cb+0x42>
		return BT_GATT_ITER_STOP;
    a99c:	2500      	movs	r5, #0
    a99e:	e7e4      	b.n	a96a <prep_write_cb+0x42>
    a9a0:	20000ac0 	.word	0x20000ac0

0000a9a4 <chan_send>:
{
    a9a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a9a6:	688b      	ldr	r3, [r1, #8]
    a9a8:	781b      	ldrb	r3, [r3, #0]
    a9aa:	2bd2      	cmp	r3, #210	; 0xd2
{
    a9ac:	4604      	mov	r4, r0
    a9ae:	460f      	mov	r7, r1
    a9b0:	4615      	mov	r5, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    a9b2:	d115      	bne.n	a9e0 <chan_send+0x3c>
		err = bt_smp_sign(chan->att->conn, buf);
    a9b4:	6803      	ldr	r3, [r0, #0]
    a9b6:	6818      	ldr	r0, [r3, #0]
    a9b8:	f003 fc96 	bl	e2e8 <bt_smp_sign>
		if (err) {
    a9bc:	4606      	mov	r6, r0
    a9be:	b178      	cbz	r0, a9e0 <chan_send+0x3c>
    a9c0:	491b      	ldr	r1, [pc, #108]	; (aa30 <chan_send+0x8c>)
    a9c2:	4b1c      	ldr	r3, [pc, #112]	; (aa34 <chan_send+0x90>)
			BT_ERR("Error signing data");
    a9c4:	481c      	ldr	r0, [pc, #112]	; (aa38 <chan_send+0x94>)
    a9c6:	1a5b      	subs	r3, r3, r1
    a9c8:	08db      	lsrs	r3, r3, #3
    a9ca:	019b      	lsls	r3, r3, #6
    a9cc:	f043 0101 	orr.w	r1, r3, #1
    a9d0:	f012 fa4d 	bl	1ce6e <log_0>
			net_buf_unref(buf);
    a9d4:	4638      	mov	r0, r7
    a9d6:	f00f fb8b 	bl	1a0f0 <net_buf_unref>
}
    a9da:	4630      	mov	r0, r6
    a9dc:	b003      	add	sp, #12
    a9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	chan->sent = cb ? cb : chan_cb(buf);
    a9e0:	b955      	cbnz	r5, a9f8 <chan_send+0x54>
	switch (att_op_get_type(buf->data[0])) {
    a9e2:	68bb      	ldr	r3, [r7, #8]
    a9e4:	7818      	ldrb	r0, [r3, #0]
    a9e6:	f014 fea4 	bl	1f732 <att_op_get_type>
    a9ea:	3801      	subs	r0, #1
    a9ec:	b2c0      	uxtb	r0, r0
    a9ee:	2804      	cmp	r0, #4
    a9f0:	bf9c      	itt	ls
    a9f2:	4b12      	ldrls	r3, [pc, #72]	; (aa3c <chan_send+0x98>)
    a9f4:	f853 5020 	ldrls.w	r5, [r3, r0, lsl #2]
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    a9f8:	6823      	ldr	r3, [r4, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    a9fa:	f8c4 5128 	str.w	r5, [r4, #296]	; 0x128
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    a9fe:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    aa00:	4b0f      	ldr	r3, [pc, #60]	; (aa40 <chan_send+0x9c>)
    aa02:	429d      	cmp	r5, r3
    aa04:	d010      	beq.n	aa28 <chan_send+0x84>
	} else if (cb == chan_cfm_sent) {
    aa06:	4b0f      	ldr	r3, [pc, #60]	; (aa44 <chan_send+0xa0>)
    aa08:	429d      	cmp	r5, r3
    aa0a:	d00f      	beq.n	aa2c <chan_send+0x88>
		return att_sent;
    aa0c:	490e      	ldr	r1, [pc, #56]	; (aa48 <chan_send+0xa4>)
    aa0e:	4b0f      	ldr	r3, [pc, #60]	; (aa4c <chan_send+0xa8>)
    aa10:	4a0f      	ldr	r2, [pc, #60]	; (aa50 <chan_send+0xac>)
    aa12:	428d      	cmp	r5, r1
    aa14:	bf18      	it	ne
    aa16:	4613      	movne	r3, r2
				att_cb(chan->sent), &chan->chan.chan);
    aa18:	3408      	adds	r4, #8
	return bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT, buf,
    aa1a:	9400      	str	r4, [sp, #0]
    aa1c:	463a      	mov	r2, r7
    aa1e:	2104      	movs	r1, #4
    aa20:	f014 fe0a 	bl	1f638 <bt_l2cap_send_cb>
    aa24:	4606      	mov	r6, r0
    aa26:	e7d8      	b.n	a9da <chan_send+0x36>
		return att_rsp_sent;
    aa28:	4b0a      	ldr	r3, [pc, #40]	; (aa54 <chan_send+0xb0>)
    aa2a:	e7f5      	b.n	aa18 <chan_send+0x74>
		return att_cfm_sent;
    aa2c:	4b0a      	ldr	r3, [pc, #40]	; (aa58 <chan_send+0xb4>)
    aa2e:	e7f3      	b.n	aa18 <chan_send+0x74>
    aa30:	00021aac 	.word	0x00021aac
    aa34:	00021ab4 	.word	0x00021ab4
    aa38:	00024f38 	.word	0x00024f38
    aa3c:	000223e8 	.word	0x000223e8
    aa40:	0001f973 	.word	0x0001f973
    aa44:	0001f98f 	.word	0x0001f98f
    aa48:	0000a7d1 	.word	0x0000a7d1
    aa4c:	0000a479 	.word	0x0000a479
    aa50:	0001f707 	.word	0x0001f707
    aa54:	0000a469 	.word	0x0000a469
    aa58:	0000a459 	.word	0x0000a459

0000aa5c <bt_att_chan_create_pdu>:
{
    aa5c:	b538      	push	{r3, r4, r5, lr}
    aa5e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    aa60:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    aa64:	3201      	adds	r2, #1
    aa66:	428a      	cmp	r2, r1
    aa68:	d90c      	bls.n	aa84 <bt_att_chan_create_pdu+0x28>
    aa6a:	481a      	ldr	r0, [pc, #104]	; (aad4 <bt_att_chan_create_pdu+0x78>)
    aa6c:	4b1a      	ldr	r3, [pc, #104]	; (aad8 <bt_att_chan_create_pdu+0x7c>)
    aa6e:	1a1b      	subs	r3, r3, r0
    aa70:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    aa72:	019b      	lsls	r3, r3, #6
    aa74:	4819      	ldr	r0, [pc, #100]	; (aadc <bt_att_chan_create_pdu+0x80>)
    aa76:	f043 0302 	orr.w	r3, r3, #2
    aa7a:	f012 fa19 	bl	1ceb0 <log_2>
		return NULL;
    aa7e:	2400      	movs	r4, #0
}
    aa80:	4620      	mov	r0, r4
    aa82:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    aa84:	4628      	mov	r0, r5
    aa86:	f014 fe54 	bl	1f732 <att_op_get_type>
    aa8a:	2802      	cmp	r0, #2
    aa8c:	d001      	beq.n	aa92 <bt_att_chan_create_pdu+0x36>
    aa8e:	2804      	cmp	r0, #4
    aa90:	d114      	bne.n	aabc <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    aa92:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    aa96:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    aa98:	2100      	movs	r1, #0
    aa9a:	4608      	mov	r0, r1
    aa9c:	f014 fdc9 	bl	1f632 <bt_l2cap_create_pdu_timeout>
    aaa0:	4604      	mov	r4, r0
	if (!buf) {
    aaa2:	b980      	cbnz	r0, aac6 <bt_att_chan_create_pdu+0x6a>
    aaa4:	4b0b      	ldr	r3, [pc, #44]	; (aad4 <bt_att_chan_create_pdu+0x78>)
    aaa6:	4a0c      	ldr	r2, [pc, #48]	; (aad8 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    aaa8:	480d      	ldr	r0, [pc, #52]	; (aae0 <bt_att_chan_create_pdu+0x84>)
    aaaa:	1ad2      	subs	r2, r2, r3
    aaac:	08d2      	lsrs	r2, r2, #3
    aaae:	0192      	lsls	r2, r2, #6
    aab0:	f042 0201 	orr.w	r2, r2, #1
    aab4:	4629      	mov	r1, r5
    aab6:	f012 f9e7 	bl	1ce88 <log_1>
		return NULL;
    aaba:	e7e1      	b.n	aa80 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    aabc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    aac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    aac4:	e7e8      	b.n	aa98 <bt_att_chan_create_pdu+0x3c>
	hdr = net_buf_add(buf, sizeof(*hdr));
    aac6:	2101      	movs	r1, #1
    aac8:	3008      	adds	r0, #8
    aaca:	f016 f84d 	bl	20b68 <net_buf_simple_add>
	hdr->code = op;
    aace:	7005      	strb	r5, [r0, #0]
	return buf;
    aad0:	e7d6      	b.n	aa80 <bt_att_chan_create_pdu+0x24>
    aad2:	bf00      	nop
    aad4:	00021aac 	.word	0x00021aac
    aad8:	00021ab4 	.word	0x00021ab4
    aadc:	00024f4b 	.word	0x00024f4b
    aae0:	00024d3f 	.word	0x00024d3f

0000aae4 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    aae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aae8:	4688      	mov	r8, r1
    aaea:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    aaec:	2101      	movs	r1, #1
    aaee:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    aaf0:	4605      	mov	r5, r0
    aaf2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    aaf4:	f7ff ffb2 	bl	aa5c <bt_att_chan_create_pdu>
	if (!buf) {
    aaf8:	4604      	mov	r4, r0
    aafa:	b178      	cbz	r0, ab1c <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    aafc:	2104      	movs	r1, #4
    aafe:	3008      	adds	r0, #8
    ab00:	f016 f832 	bl	20b68 <net_buf_simple_add>
	rsp->request = req;
    ab04:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    ab08:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    ab0a:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ab0e:	4621      	mov	r1, r4
    ab10:	4628      	mov	r0, r5
    ab12:	4a03      	ldr	r2, [pc, #12]	; (ab20 <send_err_rsp.part.0+0x3c>)
}
    ab14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ab18:	f015 b823 	b.w	1fb62 <bt_att_chan_send_rsp>
}
    ab1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab20:	0001f973 	.word	0x0001f973

0000ab24 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    ab24:	898b      	ldrh	r3, [r1, #12]
{
    ab26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab2a:	4604      	mov	r4, r0
    ab2c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    ab2e:	b963      	cbnz	r3, ab4a <bt_att_recv+0x26>
    ab30:	494a      	ldr	r1, [pc, #296]	; (ac5c <bt_att_recv+0x138>)
    ab32:	4b4b      	ldr	r3, [pc, #300]	; (ac60 <bt_att_recv+0x13c>)
		BT_ERR("Too small ATT PDU received");
    ab34:	484b      	ldr	r0, [pc, #300]	; (ac64 <bt_att_recv+0x140>)
    ab36:	1ac9      	subs	r1, r1, r3
    ab38:	08c9      	lsrs	r1, r1, #3
    ab3a:	0189      	lsls	r1, r1, #6
    ab3c:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    ab40:	f012 f995 	bl	1ce6e <log_0>
}
    ab44:	2000      	movs	r0, #0
    ab46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ab4a:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    ab4c:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ab50:	f108 0008 	add.w	r0, r8, #8
    ab54:	f016 f82f 	bl	20bb6 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    ab58:	4a43      	ldr	r2, [pc, #268]	; (ac68 <bt_att_recv+0x144>)
    ab5a:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    ab5c:	4605      	mov	r5, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    ab5e:	2300      	movs	r3, #0
    ab60:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    ab62:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    ab66:	4288      	cmp	r0, r1
    ab68:	d11d      	bne.n	aba6 <bt_att_recv+0x82>
		if (handler->type == ATT_REQUEST &&
    ab6a:	00d8      	lsls	r0, r3, #3
    ab6c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    ab70:	789f      	ldrb	r7, [r3, #2]
    ab72:	2f01      	cmp	r7, #1
    ab74:	d132      	bne.n	abdc <bt_att_recv+0xb8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab76:	f3bf 8f5b 	dmb	ish
    ab7a:	34b8      	adds	r4, #184	; 0xb8
    ab7c:	e854 3f00 	ldrex	r3, [r4]
    ab80:	f043 0201 	orr.w	r2, r3, #1
    ab84:	e844 2100 	strex	r1, r2, [r4]
    ab88:	2900      	cmp	r1, #0
    ab8a:	d1f7      	bne.n	ab7c <bt_att_recv+0x58>
    ab8c:	f3bf 8f5b 	dmb	ish
    ab90:	07da      	lsls	r2, r3, #31
    ab92:	d53d      	bpl.n	ac10 <bt_att_recv+0xec>
    ab94:	4931      	ldr	r1, [pc, #196]	; (ac5c <bt_att_recv+0x138>)
    ab96:	4b32      	ldr	r3, [pc, #200]	; (ac60 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected request");
    ab98:	4834      	ldr	r0, [pc, #208]	; (ac6c <bt_att_recv+0x148>)
    ab9a:	1ac9      	subs	r1, r1, r3
    ab9c:	08c9      	lsrs	r1, r1, #3
    ab9e:	0189      	lsls	r1, r1, #6
    aba0:	f041 0102 	orr.w	r1, r1, #2
    aba4:	e7cc      	b.n	ab40 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    aba6:	3301      	adds	r3, #1
    aba8:	2b0e      	cmp	r3, #14
    abaa:	d1da      	bne.n	ab62 <bt_att_recv+0x3e>
    abac:	4b2c      	ldr	r3, [pc, #176]	; (ac60 <bt_att_recv+0x13c>)
    abae:	4a2b      	ldr	r2, [pc, #172]	; (ac5c <bt_att_recv+0x138>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    abb0:	482f      	ldr	r0, [pc, #188]	; (ac70 <bt_att_recv+0x14c>)
    abb2:	1ad2      	subs	r2, r2, r3
    abb4:	08d2      	lsrs	r2, r2, #3
    abb6:	0192      	lsls	r2, r2, #6
    abb8:	f042 0202 	orr.w	r2, r2, #2
    abbc:	f012 f964 	bl	1ce88 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    abc0:	7829      	ldrb	r1, [r5, #0]
    abc2:	4608      	mov	r0, r1
    abc4:	f014 fdb5 	bl	1f732 <att_op_get_type>
    abc8:	2800      	cmp	r0, #0
    abca:	d0bb      	beq.n	ab44 <bt_att_recv+0x20>
	if (!req) {
    abcc:	2900      	cmp	r1, #0
    abce:	d0b9      	beq.n	ab44 <bt_att_recv+0x20>
    abd0:	2306      	movs	r3, #6
    abd2:	2200      	movs	r2, #0
    abd4:	4630      	mov	r0, r6
    abd6:	f7ff ff85 	bl	aae4 <send_err_rsp.part.0>
    abda:	e7b3      	b.n	ab44 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    abdc:	2f05      	cmp	r7, #5
    abde:	d117      	bne.n	ac10 <bt_att_recv+0xec>
    abe0:	f3bf 8f5b 	dmb	ish
    abe4:	34b8      	adds	r4, #184	; 0xb8
    abe6:	e854 3f00 	ldrex	r3, [r4]
    abea:	f043 0202 	orr.w	r2, r3, #2
    abee:	e844 2100 	strex	r1, r2, [r4]
    abf2:	2900      	cmp	r1, #0
    abf4:	d1f7      	bne.n	abe6 <bt_att_recv+0xc2>
    abf6:	f3bf 8f5b 	dmb	ish
    abfa:	079b      	lsls	r3, r3, #30
    abfc:	d508      	bpl.n	ac10 <bt_att_recv+0xec>
    abfe:	4917      	ldr	r1, [pc, #92]	; (ac5c <bt_att_recv+0x138>)
    ac00:	4b17      	ldr	r3, [pc, #92]	; (ac60 <bt_att_recv+0x13c>)
			BT_WARN("Ignoring unexpected indication");
    ac02:	481c      	ldr	r0, [pc, #112]	; (ac74 <bt_att_recv+0x150>)
    ac04:	1ac9      	subs	r1, r1, r3
    ac06:	08c9      	lsrs	r1, r1, #3
    ac08:	0189      	lsls	r1, r1, #6
    ac0a:	f041 0102 	orr.w	r1, r1, #2
    ac0e:	e797      	b.n	ab40 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    ac10:	eb0c 0300 	add.w	r3, ip, r0
    ac14:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    ac18:	785a      	ldrb	r2, [r3, #1]
    ac1a:	428a      	cmp	r2, r1
    ac1c:	d90e      	bls.n	ac3c <bt_att_recv+0x118>
    ac1e:	4a10      	ldr	r2, [pc, #64]	; (ac60 <bt_att_recv+0x13c>)
    ac20:	4b0e      	ldr	r3, [pc, #56]	; (ac5c <bt_att_recv+0x138>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    ac22:	4815      	ldr	r0, [pc, #84]	; (ac78 <bt_att_recv+0x154>)
    ac24:	1a9b      	subs	r3, r3, r2
    ac26:	08db      	lsrs	r3, r3, #3
    ac28:	019b      	lsls	r3, r3, #6
    ac2a:	782a      	ldrb	r2, [r5, #0]
    ac2c:	f043 0301 	orr.w	r3, r3, #1
    ac30:	f012 f93e 	bl	1ceb0 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    ac34:	2f01      	cmp	r7, #1
    ac36:	d185      	bne.n	ab44 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    ac38:	2304      	movs	r3, #4
    ac3a:	e00a      	b.n	ac52 <bt_att_recv+0x12e>
		err = handler->func(att_chan, buf);
    ac3c:	685b      	ldr	r3, [r3, #4]
    ac3e:	4641      	mov	r1, r8
    ac40:	4630      	mov	r0, r6
    ac42:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    ac44:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    ac46:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    ac48:	f47f af7c 	bne.w	ab44 <bt_att_recv+0x20>
    ac4c:	2800      	cmp	r0, #0
    ac4e:	f43f af79 	beq.w	ab44 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    ac52:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    ac54:	2900      	cmp	r1, #0
    ac56:	f43f af75 	beq.w	ab44 <bt_att_recv+0x20>
    ac5a:	e7ba      	b.n	abd2 <bt_att_recv+0xae>
    ac5c:	00021ab4 	.word	0x00021ab4
    ac60:	00021aac 	.word	0x00021aac
    ac64:	00024f70 	.word	0x00024f70
    ac68:	000223fc 	.word	0x000223fc
    ac6c:	00024f8b 	.word	0x00024f8b
    ac70:	00024fe5 	.word	0x00024fe5
    ac74:	00024fa7 	.word	0x00024fa7
    ac78:	00024fc6 	.word	0x00024fc6

0000ac7c <att_write_rsp>:
{
    ac7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ac80:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ac82:	6803      	ldr	r3, [r0, #0]
    ac84:	460e      	mov	r6, r1
    ac86:	3900      	subs	r1, #0
{
    ac88:	b086      	sub	sp, #24
    ac8a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ac8c:	bf18      	it	ne
    ac8e:	2101      	movne	r1, #1
    ac90:	6818      	ldr	r0, [r3, #0]
{
    ac92:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    ac94:	f015 fb43 	bl	2031e <bt_gatt_change_aware>
    ac98:	2800      	cmp	r0, #0
    ac9a:	d04e      	beq.n	ad3a <att_write_rsp+0xbe>
	if (!handle) {
    ac9c:	2f00      	cmp	r7, #0
    ac9e:	d04e      	beq.n	ad3e <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    aca0:	2218      	movs	r2, #24
    aca2:	2100      	movs	r1, #0
    aca4:	4668      	mov	r0, sp
    aca6:	f014 f8cf 	bl	1ee48 <memset>
	if (rsp) {
    acaa:	f1b8 0f00 	cmp.w	r8, #0
    acae:	d126      	bne.n	acfe <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    acb0:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    acb2:	4a24      	ldr	r2, [pc, #144]	; (ad44 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    acb4:	681b      	ldr	r3, [r3, #0]
    acb6:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    acb8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    acbc:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    acc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    acc2:	9303      	str	r3, [sp, #12]
	data.len = len;
    acc4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    acc8:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    accc:	2301      	movs	r3, #1
    acce:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    acd2:	4639      	mov	r1, r7
    acd4:	466b      	mov	r3, sp
    acd6:	4638      	mov	r0, r7
	data.req = req;
    acd8:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    acdc:	f014 fd56 	bl	1f78c <bt_gatt_foreach_attr>
	if (data.err) {
    ace0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ace4:	b30c      	cbz	r4, ad2a <att_write_rsp+0xae>
		if (rsp) {
    ace6:	f1b8 0f00 	cmp.w	r8, #0
    acea:	d019      	beq.n	ad20 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    acec:	9801      	ldr	r0, [sp, #4]
    acee:	f00f f9ff 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    acf2:	b976      	cbnz	r6, ad12 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    acf4:	2400      	movs	r4, #0
}
    acf6:	4620      	mov	r0, r4
    acf8:	b006      	add	sp, #24
    acfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    acfe:	2200      	movs	r2, #0
    ad00:	4641      	mov	r1, r8
    ad02:	4628      	mov	r0, r5
    ad04:	f7ff feaa 	bl	aa5c <bt_att_chan_create_pdu>
    ad08:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    ad0a:	2800      	cmp	r0, #0
    ad0c:	d1d0      	bne.n	acb0 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    ad0e:	240e      	movs	r4, #14
    ad10:	e7f1      	b.n	acf6 <att_write_rsp+0x7a>
    ad12:	f89d 3014 	ldrb.w	r3, [sp, #20]
    ad16:	463a      	mov	r2, r7
    ad18:	4631      	mov	r1, r6
    ad1a:	4628      	mov	r0, r5
    ad1c:	f7ff fee2 	bl	aae4 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    ad20:	2e18      	cmp	r6, #24
    ad22:	d1e7      	bne.n	acf4 <att_write_rsp+0x78>
    ad24:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ad28:	e7e5      	b.n	acf6 <att_write_rsp+0x7a>
	if (data.buf) {
    ad2a:	9901      	ldr	r1, [sp, #4]
    ad2c:	2900      	cmp	r1, #0
    ad2e:	d0e1      	beq.n	acf4 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ad30:	4a05      	ldr	r2, [pc, #20]	; (ad48 <att_write_rsp+0xcc>)
    ad32:	4628      	mov	r0, r5
    ad34:	f014 ff15 	bl	1fb62 <bt_att_chan_send_rsp>
    ad38:	e7dd      	b.n	acf6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ad3a:	2412      	movs	r4, #18
    ad3c:	e7db      	b.n	acf6 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    ad3e:	2401      	movs	r4, #1
    ad40:	e7d9      	b.n	acf6 <att_write_rsp+0x7a>
    ad42:	bf00      	nop
    ad44:	0001f9ab 	.word	0x0001f9ab
    ad48:	0001f973 	.word	0x0001f973

0000ad4c <att_signed_write_cmd>:
{
    ad4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    ad50:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    ad52:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
    ad54:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    ad58:	460c      	mov	r4, r1
    ad5a:	4606      	mov	r6, r0
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    ad5c:	2101      	movs	r1, #1
    ad5e:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    ad60:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    ad62:	f015 ff18 	bl	20b96 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    ad66:	4628      	mov	r0, r5
    ad68:	4621      	mov	r1, r4
    ad6a:	f003 fa41 	bl	e1f0 <bt_smp_sign_verify>
	if (err) {
    ad6e:	4605      	mov	r5, r0
    ad70:	b168      	cbz	r0, ad8e <att_signed_write_cmd+0x42>
    ad72:	4b12      	ldr	r3, [pc, #72]	; (adbc <att_signed_write_cmd+0x70>)
    ad74:	4912      	ldr	r1, [pc, #72]	; (adc0 <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    ad76:	4813      	ldr	r0, [pc, #76]	; (adc4 <att_signed_write_cmd+0x78>)
    ad78:	1ac9      	subs	r1, r1, r3
    ad7a:	08c9      	lsrs	r1, r1, #3
    ad7c:	0189      	lsls	r1, r1, #6
    ad7e:	f041 0101 	orr.w	r1, r1, #1
    ad82:	f012 f874 	bl	1ce6e <log_0>
		return 0;
    ad86:	2000      	movs	r0, #0
}
    ad88:	b004      	add	sp, #16
    ad8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    ad8e:	2101      	movs	r1, #1
    ad90:	4640      	mov	r0, r8
    ad92:	f015 ff08 	bl	20ba6 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    ad96:	2102      	movs	r1, #2
    ad98:	4640      	mov	r0, r8
    ad9a:	f015 ff04 	bl	20ba6 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    ad9e:	89a3      	ldrh	r3, [r4, #12]
    ada0:	3b0c      	subs	r3, #12
    ada2:	b29b      	uxth	r3, r3
    ada4:	9302      	str	r3, [sp, #8]
    ada6:	68a3      	ldr	r3, [r4, #8]
    ada8:	462a      	mov	r2, r5
    adaa:	e9cd 5300 	strd	r5, r3, [sp]
    adae:	4629      	mov	r1, r5
    adb0:	463b      	mov	r3, r7
    adb2:	4630      	mov	r0, r6
    adb4:	f7ff ff62 	bl	ac7c <att_write_rsp>
    adb8:	e7e6      	b.n	ad88 <att_signed_write_cmd+0x3c>
    adba:	bf00      	nop
    adbc:	00021aac 	.word	0x00021aac
    adc0:	00021ab4 	.word	0x00021ab4
    adc4:	00024fff 	.word	0x00024fff

0000adc8 <bt_att_create_pdu>:
{
    adc8:	b570      	push	{r4, r5, r6, lr}
    adca:	460e      	mov	r6, r1
    adcc:	4615      	mov	r5, r2
	att = att_get(conn);
    adce:	f7ff fcbf 	bl	a750 <att_get>
	if (!att) {
    add2:	b1c0      	cbz	r0, ae06 <bt_att_create_pdu+0x3e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    add4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	return list->head;
    add6:	1c69      	adds	r1, r5, #1
    add8:	b15b      	cbz	r3, adf2 <bt_att_create_pdu+0x2a>
    adda:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
    adde:	d008      	beq.n	adf2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ade0:	681b      	ldr	r3, [r3, #0]
    ade2:	b10b      	cbz	r3, ade8 <bt_att_create_pdu+0x20>
    ade4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    ade8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    adec:	4291      	cmp	r1, r2
    adee:	d90c      	bls.n	ae0a <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    adf0:	b98b      	cbnz	r3, ae16 <bt_att_create_pdu+0x4e>
    adf2:	4a0e      	ldr	r2, [pc, #56]	; (ae2c <bt_att_create_pdu+0x64>)
    adf4:	4b0e      	ldr	r3, [pc, #56]	; (ae30 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    adf6:	480f      	ldr	r0, [pc, #60]	; (ae34 <bt_att_create_pdu+0x6c>)
    adf8:	1ad2      	subs	r2, r2, r3
    adfa:	08d2      	lsrs	r2, r2, #3
    adfc:	0192      	lsls	r2, r2, #6
    adfe:	f042 0202 	orr.w	r2, r2, #2
    ae02:	f012 f841 	bl	1ce88 <log_1>
}
    ae06:	2000      	movs	r0, #0
    ae08:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    ae0a:	462a      	mov	r2, r5
    ae0c:	4631      	mov	r1, r6
}
    ae0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    ae12:	f7ff be23 	b.w	aa5c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    ae16:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
    ae1a:	d004      	beq.n	ae26 <bt_att_create_pdu+0x5e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    ae1c:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ae20:	b10c      	cbz	r4, ae26 <bt_att_create_pdu+0x5e>
    ae22:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
    ae26:	4618      	mov	r0, r3
    ae28:	4623      	mov	r3, r4
    ae2a:	e7dd      	b.n	ade8 <bt_att_create_pdu+0x20>
    ae2c:	00021ab4 	.word	0x00021ab4
    ae30:	00021aac 	.word	0x00021aac
    ae34:	00025014 	.word	0x00025014

0000ae38 <att_exec_write_req>:
{
    ae38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    ae3c:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    ae3e:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    ae40:	f893 8000 	ldrb.w	r8, [r3]
{
    ae44:	4606      	mov	r6, r0
	uint8_t err = 0U;
    ae46:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    ae48:	6830      	ldr	r0, [r6, #0]
    ae4a:	2200      	movs	r2, #0
    ae4c:	2300      	movs	r3, #0
    ae4e:	3024      	adds	r0, #36	; 0x24
    ae50:	f015 fe39 	bl	20ac6 <net_buf_get>
    ae54:	4605      	mov	r5, r0
    ae56:	b978      	cbnz	r0, ae78 <att_exec_write_req+0x40>
	if (err) {
    ae58:	bb54      	cbnz	r4, aeb0 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    ae5a:	2119      	movs	r1, #25
    ae5c:	4622      	mov	r2, r4
    ae5e:	4638      	mov	r0, r7
    ae60:	f7ff ffb2 	bl	adc8 <bt_att_create_pdu>
	if (!buf) {
    ae64:	4601      	mov	r1, r0
    ae66:	b328      	cbz	r0, aeb4 <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    ae68:	4a13      	ldr	r2, [pc, #76]	; (aeb8 <att_exec_write_req+0x80>)
    ae6a:	4630      	mov	r0, r6
    ae6c:	f014 fe79 	bl	1fb62 <bt_att_chan_send_rsp>
}
    ae70:	4620      	mov	r0, r4
    ae72:	b004      	add	sp, #16
    ae74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    ae78:	b9b4      	cbnz	r4, aea8 <att_exec_write_req+0x70>
    ae7a:	f1b8 0f01 	cmp.w	r8, #1
    ae7e:	d113      	bne.n	aea8 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    ae80:	89aa      	ldrh	r2, [r5, #12]
    ae82:	8aab      	ldrh	r3, [r5, #20]
    ae84:	9202      	str	r2, [sp, #8]
    ae86:	68aa      	ldr	r2, [r5, #8]
    ae88:	9201      	str	r2, [sp, #4]
    ae8a:	8aea      	ldrh	r2, [r5, #22]
    ae8c:	9200      	str	r2, [sp, #0]
    ae8e:	2118      	movs	r1, #24
    ae90:	4622      	mov	r2, r4
    ae92:	4630      	mov	r0, r6
    ae94:	f7ff fef2 	bl	ac7c <att_write_rsp>
			if (err) {
    ae98:	4604      	mov	r4, r0
    ae9a:	b128      	cbz	r0, aea8 <att_exec_write_req+0x70>
	if (!req) {
    ae9c:	4603      	mov	r3, r0
    ae9e:	8aaa      	ldrh	r2, [r5, #20]
    aea0:	2118      	movs	r1, #24
    aea2:	4630      	mov	r0, r6
    aea4:	f7ff fe1e 	bl	aae4 <send_err_rsp.part.0>
		net_buf_unref(buf);
    aea8:	4628      	mov	r0, r5
    aeaa:	f00f f921 	bl	1a0f0 <net_buf_unref>
    aeae:	e7cb      	b.n	ae48 <att_exec_write_req+0x10>
		return 0;
    aeb0:	4604      	mov	r4, r0
    aeb2:	e7dd      	b.n	ae70 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    aeb4:	240e      	movs	r4, #14
    aeb6:	e7db      	b.n	ae70 <att_exec_write_req+0x38>
    aeb8:	0001f973 	.word	0x0001f973

0000aebc <att_prepare_write_req>:
{
    aebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    aec0:	460c      	mov	r4, r1
    aec2:	b087      	sub	sp, #28
    aec4:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    aec6:	2104      	movs	r1, #4
    aec8:	f104 0008 	add.w	r0, r4, #8
    aecc:	f015 fe73 	bl	20bb6 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    aed0:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    aed4:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    aed8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    aedc:	f8d4 8008 	ldr.w	r8, [r4, #8]
    aee0:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    aee2:	2101      	movs	r1, #1
    aee4:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    aee6:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    aeea:	f015 fa18 	bl	2031e <bt_gatt_change_aware>
    aeee:	2800      	cmp	r0, #0
    aef0:	d04b      	beq.n	af8a <att_prepare_write_req+0xce>
	if (!handle) {
    aef2:	2e00      	cmp	r6, #0
    aef4:	d04b      	beq.n	af8e <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    aef6:	2214      	movs	r2, #20
    aef8:	2100      	movs	r1, #0
    aefa:	a801      	add	r0, sp, #4
    aefc:	f013 ffa4 	bl	1ee48 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    af00:	2301      	movs	r3, #1
    af02:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    af06:	4a24      	ldr	r2, [pc, #144]	; (af98 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    af08:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    af0c:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    af0e:	ab01      	add	r3, sp, #4
    af10:	4631      	mov	r1, r6
    af12:	4630      	mov	r0, r6
	data.offset = offset;
    af14:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    af18:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    af1c:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    af20:	f014 fc34 	bl	1f78c <bt_gatt_foreach_attr>
	if (data.err) {
    af24:	f89d 4014 	ldrb.w	r4, [sp, #20]
    af28:	b154      	cbz	r4, af40 <att_prepare_write_req+0x84>
	if (!req) {
    af2a:	4623      	mov	r3, r4
    af2c:	4632      	mov	r2, r6
    af2e:	2116      	movs	r1, #22
    af30:	4628      	mov	r0, r5
    af32:	f7ff fdd7 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    af36:	2400      	movs	r4, #0
}
    af38:	4620      	mov	r0, r4
    af3a:	b007      	add	sp, #28
    af3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    af40:	6828      	ldr	r0, [r5, #0]
    af42:	9902      	ldr	r1, [sp, #8]
    af44:	3024      	adds	r0, #36	; 0x24
    af46:	f015 fddc 	bl	20b02 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    af4a:	4622      	mov	r2, r4
    af4c:	2117      	movs	r1, #23
    af4e:	4658      	mov	r0, fp
    af50:	f7ff ff3a 	bl	adc8 <bt_att_create_pdu>
    af54:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    af56:	b1e0      	cbz	r0, af92 <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    af58:	2104      	movs	r1, #4
    af5a:	3008      	adds	r0, #8
    af5c:	f015 fe04 	bl	20b68 <net_buf_simple_add>
    af60:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    af62:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    af66:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    af6a:	9802      	ldr	r0, [sp, #8]
    af6c:	4639      	mov	r1, r7
    af6e:	3008      	adds	r0, #8
    af70:	f015 fdfa 	bl	20b68 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    af74:	463a      	mov	r2, r7
    af76:	4641      	mov	r1, r8
    af78:	1d30      	adds	r0, r6, #4
    af7a:	f013 ff3a 	bl	1edf2 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    af7e:	4a07      	ldr	r2, [pc, #28]	; (af9c <att_prepare_write_req+0xe0>)
    af80:	9902      	ldr	r1, [sp, #8]
    af82:	4628      	mov	r0, r5
    af84:	f014 fded 	bl	1fb62 <bt_att_chan_send_rsp>
	return 0;
    af88:	e7d6      	b.n	af38 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    af8a:	2412      	movs	r4, #18
    af8c:	e7d4      	b.n	af38 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    af8e:	2401      	movs	r4, #1
    af90:	e7d2      	b.n	af38 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    af92:	240e      	movs	r4, #14
    af94:	e7d0      	b.n	af38 <att_prepare_write_req+0x7c>
    af96:	bf00      	nop
    af98:	0000a929 	.word	0x0000a929
    af9c:	0001f973 	.word	0x0001f973

0000afa0 <att_read_group_req>:
{
    afa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    afa4:	7b0c      	ldrb	r4, [r1, #12]
    afa6:	3c04      	subs	r4, #4
    afa8:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    afaa:	2c02      	cmp	r4, #2
{
    afac:	4605      	mov	r5, r0
    afae:	b08c      	sub	sp, #48	; 0x30
    afb0:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    afb2:	d001      	beq.n	afb8 <att_read_group_req+0x18>
    afb4:	2c10      	cmp	r4, #16
    afb6:	d16f      	bne.n	b098 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    afb8:	2104      	movs	r1, #4
    afba:	3008      	adds	r0, #8
    afbc:	f015 fdfb 	bl	20bb6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    afc0:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    afc4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    afc6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    afc8:	1d01      	adds	r1, r0, #4
    afca:	4622      	mov	r2, r4
    afcc:	4640      	mov	r0, r8
    afce:	f014 f82d 	bl	1f02c <bt_uuid_create>
    afd2:	2800      	cmp	r0, #0
    afd4:	d062      	beq.n	b09c <att_read_group_req+0xfc>
	if (!start || !end) {
    afd6:	2e00      	cmp	r6, #0
    afd8:	d03a      	beq.n	b050 <att_read_group_req+0xb0>
    afda:	2400      	movs	r4, #0
    afdc:	2f00      	cmp	r7, #0
    afde:	d036      	beq.n	b04e <att_read_group_req+0xae>
	if (start > end) {
    afe0:	42be      	cmp	r6, r7
    afe2:	d835      	bhi.n	b050 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    afe4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    afe8:	a901      	add	r1, sp, #4
    afea:	4640      	mov	r0, r8
    afec:	f88d 4004 	strb.w	r4, [sp, #4]
    aff0:	f8ad 3006 	strh.w	r3, [sp, #6]
    aff4:	f013 fff0 	bl	1efd8 <bt_uuid_cmp>
    aff8:	2800      	cmp	r0, #0
    affa:	d134      	bne.n	b066 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    affc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    affe:	2214      	movs	r2, #20
    b000:	2100      	movs	r1, #0
    b002:	a807      	add	r0, sp, #28
    b004:	f013 ff20 	bl	1ee48 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    b008:	2201      	movs	r2, #1
    b00a:	2111      	movs	r1, #17
    b00c:	4620      	mov	r0, r4
    b00e:	f7ff fedb 	bl	adc8 <bt_att_create_pdu>
    b012:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    b014:	2800      	cmp	r0, #0
    b016:	d041      	beq.n	b09c <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b018:	2101      	movs	r1, #1
    b01a:	3008      	adds	r0, #8
	data.uuid = uuid;
    b01c:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b020:	f015 fda2 	bl	20b68 <net_buf_simple_add>
	data.rsp->len = 0U;
    b024:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b028:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b02a:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    b02c:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b030:	4a1b      	ldr	r2, [pc, #108]	; (b0a0 <att_read_group_req+0x100>)
	data.group = NULL;
    b032:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    b036:	4639      	mov	r1, r7
    b038:	4630      	mov	r0, r6
    b03a:	f014 fba7 	bl	1f78c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    b03e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b040:	781c      	ldrb	r4, [r3, #0]
    b042:	bb1c      	cbnz	r4, b08c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    b044:	9809      	ldr	r0, [sp, #36]	; 0x24
    b046:	f00f f853 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    b04a:	230a      	movs	r3, #10
    b04c:	e018      	b.n	b080 <att_read_group_req+0xe0>
			*err = 0U;
    b04e:	463e      	mov	r6, r7
	if (!req) {
    b050:	2301      	movs	r3, #1
    b052:	4632      	mov	r2, r6
    b054:	2110      	movs	r1, #16
    b056:	4628      	mov	r0, r5
    b058:	f7ff fd44 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    b05c:	2400      	movs	r4, #0
}
    b05e:	4620      	mov	r0, r4
    b060:	b00c      	add	sp, #48	; 0x30
    b062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    b066:	f642 0301 	movw	r3, #10241	; 0x2801
    b06a:	a907      	add	r1, sp, #28
    b06c:	4640      	mov	r0, r8
    b06e:	f88d 401c 	strb.w	r4, [sp, #28]
    b072:	f8ad 301e 	strh.w	r3, [sp, #30]
    b076:	f013 ffaf 	bl	1efd8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    b07a:	2800      	cmp	r0, #0
    b07c:	d0be      	beq.n	affc <att_read_group_req+0x5c>
	if (!req) {
    b07e:	2310      	movs	r3, #16
    b080:	4632      	mov	r2, r6
    b082:	2110      	movs	r1, #16
    b084:	4628      	mov	r0, r5
    b086:	f7ff fd2d 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    b08a:	e7e8      	b.n	b05e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b08c:	4a05      	ldr	r2, [pc, #20]	; (b0a4 <att_read_group_req+0x104>)
    b08e:	9909      	ldr	r1, [sp, #36]	; 0x24
    b090:	4628      	mov	r0, r5
    b092:	f014 fd66 	bl	1fb62 <bt_att_chan_send_rsp>
	return 0;
    b096:	e7e1      	b.n	b05c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    b098:	2404      	movs	r4, #4
    b09a:	e7e0      	b.n	b05e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    b09c:	240e      	movs	r4, #14
    b09e:	e7de      	b.n	b05e <att_read_group_req+0xbe>
    b0a0:	0000a4a1 	.word	0x0000a4a1
    b0a4:	0001f973 	.word	0x0001f973

0000b0a8 <att_read_mult_req>:
{
    b0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b0ac:	6886      	ldr	r6, [r0, #8]
{
    b0ae:	b087      	sub	sp, #28
	(void)memset(&data, 0, sizeof(data));
    b0b0:	2214      	movs	r2, #20
{
    b0b2:	4604      	mov	r4, r0
    b0b4:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    b0b6:	a801      	add	r0, sp, #4
    b0b8:	2100      	movs	r1, #0
    b0ba:	f013 fec5 	bl	1ee48 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    b0be:	2200      	movs	r2, #0
    b0c0:	210f      	movs	r1, #15
    b0c2:	4630      	mov	r0, r6
    b0c4:	f7ff fe80 	bl	adc8 <bt_att_create_pdu>
    b0c8:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    b0ca:	b360      	cbz	r0, b126 <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b0cc:	f8df 9060 	ldr.w	r9, [pc, #96]	; b130 <att_read_mult_req+0x88>
	data.chan = chan;
    b0d0:	9401      	str	r4, [sp, #4]
		handle = net_buf_pull_le16(buf);
    b0d2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b0d6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    b0da:	89ab      	ldrh	r3, [r5, #12]
    b0dc:	2b01      	cmp	r3, #1
    b0de:	d805      	bhi.n	b0ec <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b0e0:	4a12      	ldr	r2, [pc, #72]	; (b12c <att_read_mult_req+0x84>)
    b0e2:	9903      	ldr	r1, [sp, #12]
    b0e4:	4620      	mov	r0, r4
    b0e6:	f014 fd3c 	bl	1fb62 <bt_att_chan_send_rsp>
    b0ea:	e018      	b.n	b11e <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    b0ec:	4638      	mov	r0, r7
    b0ee:	f015 fd6a 	bl	20bc6 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b0f2:	ab01      	add	r3, sp, #4
    b0f4:	464a      	mov	r2, r9
    b0f6:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    b0f8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    b0fa:	f88d 8014 	strb.w	r8, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b0fe:	f014 fb45 	bl	1f78c <bt_gatt_foreach_attr>
		if (data.err) {
    b102:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b106:	2b00      	cmp	r3, #0
    b108:	d0e7      	beq.n	b0da <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    b10a:	9803      	ldr	r0, [sp, #12]
    b10c:	f00e fff0 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    b110:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b114:	4632      	mov	r2, r6
    b116:	210e      	movs	r1, #14
    b118:	4620      	mov	r0, r4
    b11a:	f7ff fce3 	bl	aae4 <send_err_rsp.part.0>
	return 0;
    b11e:	2000      	movs	r0, #0
}
    b120:	b007      	add	sp, #28
    b122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    b126:	200e      	movs	r0, #14
    b128:	e7fa      	b.n	b120 <att_read_mult_req+0x78>
    b12a:	bf00      	nop
    b12c:	0001f973 	.word	0x0001f973
    b130:	0001fa07 	.word	0x0001fa07

0000b134 <att_read_rsp>:
{
    b134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    b138:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    b13c:	b086      	sub	sp, #24
    b13e:	4605      	mov	r5, r0
    b140:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    b142:	4640      	mov	r0, r8
    b144:	2101      	movs	r1, #1
{
    b146:	4614      	mov	r4, r2
    b148:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    b14a:	f015 f8e8 	bl	2031e <bt_gatt_change_aware>
    b14e:	b390      	cbz	r0, b1b6 <att_read_rsp+0x82>
	if (!handle) {
    b150:	b39e      	cbz	r6, b1ba <att_read_rsp+0x86>
	(void)memset(&data, 0, sizeof(data));
    b152:	2214      	movs	r2, #20
    b154:	2100      	movs	r1, #0
    b156:	a801      	add	r0, sp, #4
    b158:	f013 fe76 	bl	1ee48 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    b15c:	2200      	movs	r2, #0
    b15e:	4621      	mov	r1, r4
    b160:	4640      	mov	r0, r8
    b162:	f7ff fe31 	bl	adc8 <bt_att_create_pdu>
    b166:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    b168:	b348      	cbz	r0, b1be <att_read_rsp+0x8a>
	data.offset = offset;
    b16a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    b16e:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    b172:	2301      	movs	r3, #1
    b174:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b178:	4a12      	ldr	r2, [pc, #72]	; (b1c4 <att_read_rsp+0x90>)
	data.chan = chan;
    b17a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    b17c:	ab01      	add	r3, sp, #4
    b17e:	4631      	mov	r1, r6
    b180:	4630      	mov	r0, r6
    b182:	f014 fb03 	bl	1f78c <bt_gatt_foreach_attr>
	if (data.err) {
    b186:	f89d 4014 	ldrb.w	r4, [sp, #20]
    b18a:	b174      	cbz	r4, b1aa <att_read_rsp+0x76>
		net_buf_unref(data.buf);
    b18c:	9803      	ldr	r0, [sp, #12]
    b18e:	f00e ffaf 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    b192:	f89d 3014 	ldrb.w	r3, [sp, #20]
    b196:	4632      	mov	r2, r6
    b198:	4639      	mov	r1, r7
    b19a:	4628      	mov	r0, r5
    b19c:	f7ff fca2 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    b1a0:	2400      	movs	r4, #0
}
    b1a2:	4620      	mov	r0, r4
    b1a4:	b006      	add	sp, #24
    b1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b1aa:	4a07      	ldr	r2, [pc, #28]	; (b1c8 <att_read_rsp+0x94>)
    b1ac:	9903      	ldr	r1, [sp, #12]
    b1ae:	4628      	mov	r0, r5
    b1b0:	f014 fcd7 	bl	1fb62 <bt_att_chan_send_rsp>
	return 0;
    b1b4:	e7f5      	b.n	b1a2 <att_read_rsp+0x6e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    b1b6:	2412      	movs	r4, #18
    b1b8:	e7f3      	b.n	b1a2 <att_read_rsp+0x6e>
		return BT_ATT_ERR_INVALID_HANDLE;
    b1ba:	2401      	movs	r4, #1
    b1bc:	e7f1      	b.n	b1a2 <att_read_rsp+0x6e>
		return BT_ATT_ERR_UNLIKELY;
    b1be:	240e      	movs	r4, #14
    b1c0:	e7ef      	b.n	b1a2 <att_read_rsp+0x6e>
    b1c2:	bf00      	nop
    b1c4:	0001fa07 	.word	0x0001fa07
    b1c8:	0001f973 	.word	0x0001f973

0000b1cc <att_read_type_req>:
{
    b1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    b1d0:	7b0c      	ldrb	r4, [r1, #12]
    b1d2:	3c04      	subs	r4, #4
    b1d4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    b1d6:	2c02      	cmp	r4, #2
{
    b1d8:	4605      	mov	r5, r0
    b1da:	b08c      	sub	sp, #48	; 0x30
    b1dc:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    b1de:	d001      	beq.n	b1e4 <att_read_type_req+0x18>
    b1e0:	2c10      	cmp	r4, #16
    b1e2:	d150      	bne.n	b286 <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    b1e4:	2104      	movs	r1, #4
    b1e6:	3008      	adds	r0, #8
    b1e8:	f015 fce5 	bl	20bb6 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b1ec:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    b1f0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    b1f2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    b1f4:	1d01      	adds	r1, r0, #4
    b1f6:	4622      	mov	r2, r4
    b1f8:	4640      	mov	r0, r8
    b1fa:	f013 ff17 	bl	1f02c <bt_uuid_create>
    b1fe:	b188      	cbz	r0, b224 <att_read_type_req+0x58>
	if (!start || !end) {
    b200:	b19e      	cbz	r6, b22a <att_read_type_req+0x5e>
    b202:	b18f      	cbz	r7, b228 <att_read_type_req+0x5c>
	if (start > end) {
    b204:	42b7      	cmp	r7, r6
    b206:	d310      	bcc.n	b22a <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    b208:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    b20a:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    b20c:	2100      	movs	r1, #0
    b20e:	eb0d 0002 	add.w	r0, sp, r2
    b212:	f013 fe19 	bl	1ee48 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    b216:	2201      	movs	r2, #1
    b218:	2109      	movs	r1, #9
    b21a:	4620      	mov	r0, r4
    b21c:	f7ff fdd4 	bl	adc8 <bt_att_create_pdu>
    b220:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    b222:	b968      	cbnz	r0, b240 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    b224:	240e      	movs	r4, #14
    b226:	e007      	b.n	b238 <att_read_type_req+0x6c>
			*err = 0U;
    b228:	463e      	mov	r6, r7
	if (!req) {
    b22a:	2301      	movs	r3, #1
    b22c:	4632      	mov	r2, r6
    b22e:	2108      	movs	r1, #8
    b230:	4628      	mov	r0, r5
    b232:	f7ff fc57 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    b236:	2400      	movs	r4, #0
}
    b238:	4620      	mov	r0, r4
    b23a:	b00c      	add	sp, #48	; 0x30
    b23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b240:	2101      	movs	r1, #1
    b242:	3008      	adds	r0, #8
	data.uuid = uuid;
    b244:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b248:	f015 fc8e 	bl	20b68 <net_buf_simple_add>
	data.rsp->len = 0U;
    b24c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b250:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    b252:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b254:	4a0d      	ldr	r2, [pc, #52]	; (b28c <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    b256:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b25a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b25c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    b260:	4630      	mov	r0, r6
    b262:	ab06      	add	r3, sp, #24
    b264:	f014 fa92 	bl	1f78c <bt_gatt_foreach_attr>
	if (data.err) {
    b268:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    b26c:	b12c      	cbz	r4, b27a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    b26e:	9808      	ldr	r0, [sp, #32]
    b270:	f00e ff3e 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    b274:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    b278:	e7d8      	b.n	b22c <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b27a:	4a05      	ldr	r2, [pc, #20]	; (b290 <att_read_type_req+0xc4>)
    b27c:	9908      	ldr	r1, [sp, #32]
    b27e:	4628      	mov	r0, r5
    b280:	f014 fc6f 	bl	1fb62 <bt_att_chan_send_rsp>
	return 0;
    b284:	e7d8      	b.n	b238 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    b286:	2404      	movs	r4, #4
    b288:	e7d6      	b.n	b238 <att_read_type_req+0x6c>
    b28a:	bf00      	nop
    b28c:	0000a549 	.word	0x0000a549
    b290:	0001f973 	.word	0x0001f973

0000b294 <att_find_type_req>:
{
    b294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b298:	4688      	mov	r8, r1
    b29a:	b086      	sub	sp, #24
    b29c:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    b29e:	2106      	movs	r1, #6
    b2a0:	f108 0008 	add.w	r0, r8, #8
    b2a4:	f015 fc87 	bl	20bb6 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    b2a8:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    b2aa:	b317      	cbz	r7, b2f2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b2ac:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    b2b0:	f1b9 0f00 	cmp.w	r9, #0
    b2b4:	d01c      	beq.n	b2f0 <att_find_type_req+0x5c>
	if (start > end) {
    b2b6:	454f      	cmp	r7, r9
    b2b8:	d81b      	bhi.n	b2f2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    b2ba:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b2bc:	f8ad 3002 	strh.w	r3, [sp, #2]
    b2c0:	2400      	movs	r4, #0
    b2c2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    b2c6:	a901      	add	r1, sp, #4
    b2c8:	4668      	mov	r0, sp
	value = buf->data;
    b2ca:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    b2ce:	f88d 4000 	strb.w	r4, [sp]
    b2d2:	f88d 4004 	strb.w	r4, [sp, #4]
    b2d6:	f8ad 3006 	strh.w	r3, [sp, #6]
    b2da:	f013 fe7d 	bl	1efd8 <bt_uuid_cmp>
    b2de:	4606      	mov	r6, r0
    b2e0:	b190      	cbz	r0, b308 <att_find_type_req+0x74>
	if (!req) {
    b2e2:	230a      	movs	r3, #10
    b2e4:	463a      	mov	r2, r7
    b2e6:	2106      	movs	r1, #6
    b2e8:	4628      	mov	r0, r5
    b2ea:	f7ff fbfb 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    b2ee:	e007      	b.n	b300 <att_find_type_req+0x6c>
			*err = 0U;
    b2f0:	464f      	mov	r7, r9
	if (!req) {
    b2f2:	2301      	movs	r3, #1
    b2f4:	463a      	mov	r2, r7
    b2f6:	2106      	movs	r1, #6
    b2f8:	4628      	mov	r0, r5
    b2fa:	f7ff fbf3 	bl	aae4 <send_err_rsp.part.0>
		return 0;
    b2fe:	2400      	movs	r4, #0
}
    b300:	4620      	mov	r0, r4
    b302:	b006      	add	sp, #24
    b304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    b308:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    b30c:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    b310:	4601      	mov	r1, r0
    b312:	2214      	movs	r2, #20
    b314:	a801      	add	r0, sp, #4
    b316:	f013 fd97 	bl	1ee48 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    b31a:	4632      	mov	r2, r6
    b31c:	2107      	movs	r1, #7
    b31e:	4640      	mov	r0, r8
    b320:	f7ff fd52 	bl	adc8 <bt_att_create_pdu>
    b324:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    b326:	b1e0      	cbz	r0, b362 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    b328:	230a      	movs	r3, #10
    b32a:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b32e:	4a0e      	ldr	r2, [pc, #56]	; (b368 <att_find_type_req+0xd4>)
	data.value_len = value_len;
    b330:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b334:	ab01      	add	r3, sp, #4
    b336:	4649      	mov	r1, r9
    b338:	4638      	mov	r0, r7
	data.value = value;
    b33a:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    b33e:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    b340:	f014 fa24 	bl	1f78c <bt_gatt_foreach_attr>
	if (data.err) {
    b344:	f89d 4015 	ldrb.w	r4, [sp, #21]
    b348:	b12c      	cbz	r4, b356 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    b34a:	9802      	ldr	r0, [sp, #8]
    b34c:	f00e fed0 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    b350:	f89d 3015 	ldrb.w	r3, [sp, #21]
    b354:	e7ce      	b.n	b2f4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b356:	4a05      	ldr	r2, [pc, #20]	; (b36c <att_find_type_req+0xd8>)
    b358:	9902      	ldr	r1, [sp, #8]
    b35a:	4628      	mov	r0, r5
    b35c:	f014 fc01 	bl	1fb62 <bt_att_chan_send_rsp>
	return 0;
    b360:	e7ce      	b.n	b300 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    b362:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    b364:	e7cc      	b.n	b300 <att_find_type_req+0x6c>
    b366:	bf00      	nop
    b368:	0000a5ed 	.word	0x0000a5ed
    b36c:	0001f973 	.word	0x0001f973

0000b370 <att_find_info_req>:
{
    b370:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    b372:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    b374:	881e      	ldrh	r6, [r3, #0]
{
    b376:	b085      	sub	sp, #20
    b378:	4605      	mov	r5, r0
	if (!start || !end) {
    b37a:	b19e      	cbz	r6, b3a4 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    b37c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    b37e:	b184      	cbz	r4, b3a2 <att_find_info_req+0x32>
	if (start > end) {
    b380:	42b4      	cmp	r4, r6
    b382:	d30f      	bcc.n	b3a4 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    b384:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    b386:	2210      	movs	r2, #16
    b388:	2100      	movs	r1, #0
    b38a:	4668      	mov	r0, sp
    b38c:	f013 fd5c 	bl	1ee48 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    b390:	2200      	movs	r2, #0
    b392:	2105      	movs	r1, #5
    b394:	4638      	mov	r0, r7
    b396:	f7ff fd17 	bl	adc8 <bt_att_create_pdu>
    b39a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    b39c:	b958      	cbnz	r0, b3b6 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    b39e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    b3a0:	e007      	b.n	b3b2 <att_find_info_req+0x42>
			*err = 0U;
    b3a2:	4626      	mov	r6, r4
	if (!req) {
    b3a4:	2301      	movs	r3, #1
    b3a6:	4632      	mov	r2, r6
    b3a8:	2104      	movs	r1, #4
    b3aa:	4628      	mov	r0, r5
    b3ac:	f7ff fb9a 	bl	aae4 <send_err_rsp.part.0>
	return 0;
    b3b0:	2000      	movs	r0, #0
}
    b3b2:	b005      	add	sp, #20
    b3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b3b6:	4621      	mov	r1, r4
    b3b8:	4a09      	ldr	r2, [pc, #36]	; (b3e0 <att_find_info_req+0x70>)
	data.chan = chan;
    b3ba:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    b3bc:	466b      	mov	r3, sp
    b3be:	4630      	mov	r0, r6
    b3c0:	f014 f9e4 	bl	1f78c <bt_gatt_foreach_attr>
	if (!data.rsp) {
    b3c4:	9c02      	ldr	r4, [sp, #8]
    b3c6:	b924      	cbnz	r4, b3d2 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    b3c8:	9801      	ldr	r0, [sp, #4]
    b3ca:	f00e fe91 	bl	1a0f0 <net_buf_unref>
	if (!req) {
    b3ce:	230a      	movs	r3, #10
    b3d0:	e7e9      	b.n	b3a6 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    b3d2:	4a04      	ldr	r2, [pc, #16]	; (b3e4 <att_find_info_req+0x74>)
    b3d4:	9901      	ldr	r1, [sp, #4]
    b3d6:	4628      	mov	r0, r5
    b3d8:	f014 fbc3 	bl	1fb62 <bt_att_chan_send_rsp>
    b3dc:	e7e8      	b.n	b3b0 <att_find_info_req+0x40>
    b3de:	bf00      	nop
    b3e0:	0001f7a3 	.word	0x0001f7a3
    b3e4:	0001f973 	.word	0x0001f973

0000b3e8 <att_mtu_req>:
{
    b3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    b3ea:	6803      	ldr	r3, [r0, #0]
{
    b3ec:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    b3ee:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b3f0:	f3bf 8f5b 	dmb	ish
    b3f4:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    b3f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    b3fc:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    b400:	071b      	lsls	r3, r3, #28
    b402:	d41e      	bmi.n	b442 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    b404:	688b      	ldr	r3, [r1, #8]
    b406:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    b408:	2e16      	cmp	r6, #22
    b40a:	d91c      	bls.n	b446 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    b40c:	2202      	movs	r2, #2
    b40e:	2103      	movs	r1, #3
    b410:	f7ff fcda 	bl	adc8 <bt_att_create_pdu>
	if (!pdu) {
    b414:	4607      	mov	r7, r0
    b416:	b1c0      	cbz	r0, b44a <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    b418:	2102      	movs	r1, #2
    b41a:	3008      	adds	r0, #8
    b41c:	f015 fba4 	bl	20b68 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    b420:	2341      	movs	r3, #65	; 0x41
    b422:	7003      	strb	r3, [r0, #0]
    b424:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    b426:	4a0a      	ldr	r2, [pc, #40]	; (b450 <att_mtu_req+0x68>)
    b428:	4628      	mov	r0, r5
    b42a:	4639      	mov	r1, r7
    b42c:	f014 fb99 	bl	1fb62 <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    b430:	2e41      	cmp	r6, #65	; 0x41
    b432:	bf28      	it	cs
    b434:	2641      	movcs	r6, #65	; 0x41
    b436:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    b43a:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    b43e:	4620      	mov	r0, r4
}
    b440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    b442:	2006      	movs	r0, #6
    b444:	e7fc      	b.n	b440 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    b446:	2004      	movs	r0, #4
    b448:	e7fa      	b.n	b440 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    b44a:	200e      	movs	r0, #14
    b44c:	e7f8      	b.n	b440 <att_mtu_req+0x58>
    b44e:	bf00      	nop
    b450:	0001f973 	.word	0x0001f973

0000b454 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    b454:	b513      	push	{r0, r1, r4, lr}
    b456:	4602      	mov	r2, r0
    b458:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b45a:	4808      	ldr	r0, [pc, #32]	; (b47c <bt_att_req_alloc+0x28>)
    b45c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    b45e:	2400      	movs	r4, #0
    b460:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    b462:	f00f ffd1 	bl	1b408 <k_mem_slab_alloc>
    b466:	4601      	mov	r1, r0
    b468:	b930      	cbnz	r0, b478 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    b46a:	9801      	ldr	r0, [sp, #4]
    b46c:	221c      	movs	r2, #28
    b46e:	f013 fceb 	bl	1ee48 <memset>

	return req;
    b472:	9801      	ldr	r0, [sp, #4]
}
    b474:	b002      	add	sp, #8
    b476:	bd10      	pop	{r4, pc}
		return NULL;
    b478:	4620      	mov	r0, r4
    b47a:	e7fb      	b.n	b474 <bt_att_req_alloc+0x20>
    b47c:	200008e8 	.word	0x200008e8

0000b480 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    b480:	b507      	push	{r0, r1, r2, lr}
    b482:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    b484:	a901      	add	r1, sp, #4
    b486:	4803      	ldr	r0, [pc, #12]	; (b494 <bt_att_req_free+0x14>)
    b488:	f00f fff0 	bl	1b46c <k_mem_slab_free>
}
    b48c:	b003      	add	sp, #12
    b48e:	f85d fb04 	ldr.w	pc, [sp], #4
    b492:	bf00      	nop
    b494:	200008e8 	.word	0x200008e8

0000b498 <att_handle_rsp>:
{
    b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b49c:	4605      	mov	r5, r0
    b49e:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    b4a0:	30e0      	adds	r0, #224	; 0xe0
{
    b4a2:	4689      	mov	r9, r1
    b4a4:	4692      	mov	sl, r2
    b4a6:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    b4a8:	f015 ffce 	bl	21448 <k_delayed_work_cancel>
	if (!chan->req) {
    b4ac:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    b4b0:	bb64      	cbnz	r4, b50c <att_handle_rsp+0x74>
    b4b2:	4932      	ldr	r1, [pc, #200]	; (b57c <att_handle_rsp+0xe4>)
    b4b4:	4b32      	ldr	r3, [pc, #200]	; (b580 <att_handle_rsp+0xe8>)
		BT_WARN("No pending ATT request");
    b4b6:	4833      	ldr	r0, [pc, #204]	; (b584 <att_handle_rsp+0xec>)
    b4b8:	1ac9      	subs	r1, r1, r3
    b4ba:	08c9      	lsrs	r1, r1, #3
    b4bc:	0189      	lsls	r1, r1, #6
    b4be:	f041 0102 	orr.w	r1, r1, #2
    b4c2:	f011 fcd4 	bl	1ce6e <log_0>
	att_process(chan->att);
    b4c6:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    b4ca:	f10b 0004 	add.w	r0, fp, #4
    b4ce:	f014 f8ed 	bl	1f6ac <sys_slist_get>
	if (!node) {
    b4d2:	4607      	mov	r7, r0
    b4d4:	2800      	cmp	r0, #0
    b4d6:	d039      	beq.n	b54c <att_handle_rsp+0xb4>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b4d8:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    b4dc:	b15a      	cbz	r2, b4f6 <att_handle_rsp+0x5e>
    b4de:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    b4e2:	d008      	beq.n	b4f6 <att_handle_rsp+0x5e>
    b4e4:	6816      	ldr	r6, [r2, #0]
    b4e6:	b10e      	cbz	r6, b4ec <att_handle_rsp+0x54>
    b4e8:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    b4ec:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    b4f0:	b33a      	cbz	r2, b542 <att_handle_rsp+0xaa>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b4f2:	2e00      	cmp	r6, #0
    b4f4:	d137      	bne.n	b566 <att_handle_rsp+0xce>
Z_GENLIST_PREPEND(slist, snode)
    b4f6:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    b4fa:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    b4fc:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    b500:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    b504:	bb12      	cbnz	r2, b54c <att_handle_rsp+0xb4>
	list->tail = node;
    b506:	f8cb 7008 	str.w	r7, [fp, #8]
}
    b50a:	e01f      	b.n	b54c <att_handle_rsp+0xb4>
	if (chan->req == &cancel) {
    b50c:	4b1e      	ldr	r3, [pc, #120]	; (b588 <att_handle_rsp+0xf0>)
    b50e:	429c      	cmp	r4, r3
    b510:	d103      	bne.n	b51a <att_handle_rsp+0x82>
		chan->req = NULL;
    b512:	2400      	movs	r4, #0
    b514:	f8c5 40c4 	str.w	r4, [r5, #196]	; 0xc4
		goto process;
    b518:	e7d5      	b.n	b4c6 <att_handle_rsp+0x2e>
	if (chan->req->buf) {
    b51a:	6920      	ldr	r0, [r4, #16]
    b51c:	b128      	cbz	r0, b52a <att_handle_rsp+0x92>
		net_buf_unref(chan->req->buf);
    b51e:	f00e fde7 	bl	1a0f0 <net_buf_unref>
		chan->req->buf = NULL;
    b522:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    b526:	2200      	movs	r2, #0
    b528:	611a      	str	r2, [r3, #16]
	func = chan->req->func;
    b52a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
	chan->req->func = NULL;
    b52e:	2600      	movs	r6, #0
	func = chan->req->func;
    b530:	6844      	ldr	r4, [r0, #4]
	params = chan->req->user_data;
    b532:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    b534:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    b536:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    b538:	f014 fbc1 	bl	1fcbe <att_req_destroy>
	chan->req = NULL;
    b53c:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    b540:	e7c1      	b.n	b4c6 <att_handle_rsp+0x2e>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    b542:	4639      	mov	r1, r7
    b544:	f014 fab9 	bl	1faba <bt_att_chan_req_send>
    b548:	2800      	cmp	r0, #0
    b54a:	dbd2      	blt.n	b4f2 <att_handle_rsp+0x5a>
	if (func) {
    b54c:	b13c      	cbz	r4, b55e <att_handle_rsp+0xc6>
		func(chan->att->conn, err, pdu, len, params);
    b54e:	9b03      	ldr	r3, [sp, #12]
    b550:	6828      	ldr	r0, [r5, #0]
    b552:	9300      	str	r3, [sp, #0]
    b554:	6800      	ldr	r0, [r0, #0]
    b556:	4653      	mov	r3, sl
    b558:	464a      	mov	r2, r9
    b55a:	4641      	mov	r1, r8
    b55c:	47a0      	blx	r4
}
    b55e:	2000      	movs	r0, #0
    b560:	b005      	add	sp, #20
    b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    b566:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    b56a:	d004      	beq.n	b576 <att_handle_rsp+0xde>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b56c:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    b570:	b10a      	cbz	r2, b576 <att_handle_rsp+0xde>
    b572:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    b576:	4630      	mov	r0, r6
    b578:	4616      	mov	r6, r2
    b57a:	e7b7      	b.n	b4ec <att_handle_rsp+0x54>
    b57c:	00021ab4 	.word	0x00021ab4
    b580:	00021aac 	.word	0x00021aac
    b584:	0002502f 	.word	0x0002502f
    b588:	200015ac 	.word	0x200015ac

0000b58c <bt_att_encrypt_change>:
{
    b58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b590:	4605      	mov	r5, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    b592:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    b596:	460c      	mov	r4, r1
    b598:	b139      	cbz	r1, b5aa <bt_att_encrypt_change+0x1e>
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    b59a:	2200      	movs	r2, #0
    b59c:	4630      	mov	r0, r6
    b59e:	2305      	movs	r3, #5
}
    b5a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		att_handle_rsp(att_chan, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    b5a4:	4611      	mov	r1, r2
    b5a6:	f7ff bf77 	b.w	b498 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    b5aa:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    b5ac:	4638      	mov	r0, r7
    b5ae:	f001 fa29 	bl	ca04 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    b5b2:	7a7b      	ldrb	r3, [r7, #9]
    b5b4:	2b01      	cmp	r3, #1
    b5b6:	d018      	beq.n	b5ea <bt_att_encrypt_change+0x5e>
	if (!att_chan->req || !att_chan->req->retrying) {
    b5b8:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    b5bc:	b1ab      	cbz	r3, b5ea <bt_att_encrypt_change+0x5e>
    b5be:	7d1a      	ldrb	r2, [r3, #20]
    b5c0:	b19a      	cbz	r2, b5ea <bt_att_encrypt_change+0x5e>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    b5c2:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    b5c4:	688b      	ldr	r3, [r1, #8]
    b5c6:	7818      	ldrb	r0, [r3, #0]
    b5c8:	f014 f8b3 	bl	1f732 <att_op_get_type>
    b5cc:	1e43      	subs	r3, r0, #1
    b5ce:	b2db      	uxtb	r3, r3
    b5d0:	2b04      	cmp	r3, #4
    b5d2:	bf96      	itet	ls
    b5d4:	4a06      	ldrls	r2, [pc, #24]	; (b5f0 <bt_att_encrypt_change+0x64>)
    b5d6:	4622      	movhi	r2, r4
    b5d8:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    b5dc:	4630      	mov	r0, r6
    b5de:	f014 fac0 	bl	1fb62 <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    b5e2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    b5e6:	2200      	movs	r2, #0
    b5e8:	611a      	str	r2, [r3, #16]
}
    b5ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b5ee:	bf00      	nop
    b5f0:	000223e8 	.word	0x000223e8

0000b5f4 <att_reset>:
{
    b5f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    b5f6:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    b5f8:	9803      	ldr	r0, [sp, #12]
    b5fa:	2200      	movs	r2, #0
    b5fc:	2300      	movs	r3, #0
    b5fe:	3024      	adds	r0, #36	; 0x24
    b600:	f015 fa61 	bl	20ac6 <net_buf_get>
    b604:	b980      	cbnz	r0, b628 <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    b606:	9803      	ldr	r0, [sp, #12]
    b608:	2200      	movs	r2, #0
    b60a:	2300      	movs	r3, #0
    b60c:	300c      	adds	r0, #12
    b60e:	f015 fa5a 	bl	20ac6 <net_buf_get>
    b612:	b960      	cbnz	r0, b62e <att_reset+0x3a>
	att->conn = NULL;
    b614:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    b616:	6855      	ldr	r5, [r2, #4]
	att->conn = NULL;
    b618:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    b61a:	b95d      	cbnz	r5, b634 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    b61c:	4812      	ldr	r0, [pc, #72]	; (b668 <att_reset+0x74>)
    b61e:	a903      	add	r1, sp, #12
    b620:	f00f ff24 	bl	1b46c <k_mem_slab_free>
}
    b624:	b004      	add	sp, #16
    b626:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    b628:	f00e fd62 	bl	1a0f0 <net_buf_unref>
    b62c:	e7e4      	b.n	b5f8 <att_reset+0x4>
		net_buf_unref(buf);
    b62e:	f00e fd5f 	bl	1a0f0 <net_buf_unref>
    b632:	e7e8      	b.n	b606 <att_reset+0x12>
	return node->next;
    b634:	682c      	ldr	r4, [r5, #0]
    b636:	2c00      	cmp	r4, #0
    b638:	bf38      	it	cc
    b63a:	2400      	movcc	r4, #0
		if (req->func) {
    b63c:	686e      	ldr	r6, [r5, #4]
    b63e:	b136      	cbz	r6, b64e <att_reset+0x5a>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    b640:	69ab      	ldr	r3, [r5, #24]
    b642:	9300      	str	r3, [sp, #0]
    b644:	2300      	movs	r3, #0
    b646:	461a      	mov	r2, r3
    b648:	210e      	movs	r1, #14
    b64a:	4618      	mov	r0, r3
    b64c:	47b0      	blx	r6
		att_req_destroy(req);
    b64e:	4628      	mov	r0, r5
    b650:	f014 fb35 	bl	1fcbe <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    b654:	2c00      	cmp	r4, #0
    b656:	d0e1      	beq.n	b61c <att_reset+0x28>
    b658:	6823      	ldr	r3, [r4, #0]
    b65a:	2b00      	cmp	r3, #0
    b65c:	bf38      	it	cc
    b65e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    b660:	4625      	mov	r5, r4
    b662:	461c      	mov	r4, r3
    b664:	e7ea      	b.n	b63c <att_reset+0x48>
    b666:	bf00      	nop
    b668:	200008b0 	.word	0x200008b0

0000b66c <att_timeout>:
    b66c:	4b0e      	ldr	r3, [pc, #56]	; (b6a8 <att_timeout+0x3c>)
    b66e:	490f      	ldr	r1, [pc, #60]	; (b6ac <att_timeout+0x40>)
{
    b670:	b570      	push	{r4, r5, r6, lr}
    b672:	1ac9      	subs	r1, r1, r3
	struct bt_att *att = chan->att;
    b674:	4605      	mov	r5, r0
    b676:	08c9      	lsrs	r1, r1, #3
    b678:	f855 6de0 	ldr.w	r6, [r5, #-224]!
	BT_ERR("ATT Timeout");
    b67c:	0189      	lsls	r1, r1, #6
    b67e:	f041 0101 	orr.w	r1, r1, #1
{
    b682:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    b684:	480a      	ldr	r0, [pc, #40]	; (b6b0 <att_timeout+0x44>)
    b686:	f011 fbf2 	bl	1ce6e <log_0>
	att_chan_detach(chan);
    b68a:	4628      	mov	r0, r5
    b68c:	f014 fb2b 	bl	1fce6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
    b690:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
    b692:	b945      	cbnz	r5, b6a6 <att_timeout+0x3a>
	att_reset(att);
    b694:	4630      	mov	r0, r6
    b696:	f7ff ffad 	bl	b5f4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    b69a:	f854 0cd8 	ldr.w	r0, [r4, #-216]
    b69e:	f001 fa2d 	bl	cafc <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    b6a2:	f844 5cd8 	str.w	r5, [r4, #-216]
}
    b6a6:	bd70      	pop	{r4, r5, r6, pc}
    b6a8:	00021aac 	.word	0x00021aac
    b6ac:	00021ab4 	.word	0x00021ab4
    b6b0:	00025046 	.word	0x00025046

0000b6b4 <find_static_attr>:

	return BT_GATT_ITER_CONTINUE;
}

static uint16_t find_static_attr(const struct bt_gatt_attr *attr)
{
    b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b6b6:	490f      	ldr	r1, [pc, #60]	; (b6f4 <find_static_attr+0x40>)
	uint16_t handle = 1;

	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b6b8:	4f0f      	ldr	r7, [pc, #60]	; (b6f8 <find_static_attr+0x44>)
{
    b6ba:	4604      	mov	r4, r0
	uint16_t handle = 1;
    b6bc:	2501      	movs	r5, #1
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
			if (attr == &static_svc->attrs[i]) {
    b6be:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b6c2:	f1a1 0308 	sub.w	r3, r1, #8
    b6c6:	42bb      	cmp	r3, r7
    b6c8:	d211      	bcs.n	b6ee <find_static_attr+0x3a>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    b6ca:	f851 6c04 	ldr.w	r6, [r1, #-4]
    b6ce:	2200      	movs	r2, #0
    b6d0:	e006      	b.n	b6e0 <find_static_attr+0x2c>
			if (attr == &static_svc->attrs[i]) {
    b6d2:	f851 3c08 	ldr.w	r3, [r1, #-8]
    b6d6:	fb0c 3302 	mla	r3, ip, r2, r3
    b6da:	429c      	cmp	r4, r3
    b6dc:	d008      	beq.n	b6f0 <find_static_attr+0x3c>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    b6de:	3201      	adds	r2, #1
    b6e0:	18ab      	adds	r3, r5, r2
    b6e2:	4296      	cmp	r6, r2
    b6e4:	b298      	uxth	r0, r3
    b6e6:	d1f4      	bne.n	b6d2 <find_static_attr+0x1e>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    b6e8:	3108      	adds	r1, #8
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    b6ea:	4605      	mov	r5, r0
    b6ec:	e7e9      	b.n	b6c2 <find_static_attr+0xe>
				return handle;
			}
		}
	}

	return 0;
    b6ee:	2000      	movs	r0, #0
}
    b6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b6f2:	bf00      	nop
    b6f4:	00021a18 	.word	0x00021a18
    b6f8:	00021a48 	.word	0x00021a48

0000b6fc <db_hash_store>:
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    b6fc:	490a      	ldr	r1, [pc, #40]	; (b728 <db_hash_store+0x2c>)
    b6fe:	480b      	ldr	r0, [pc, #44]	; (b72c <db_hash_store+0x30>)
{
    b700:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    b702:	2210      	movs	r2, #16
    b704:	f7f9 fb1c 	bl	4d40 <settings_save_one>
	if (err) {
    b708:	4601      	mov	r1, r0
    b70a:	b158      	cbz	r0, b724 <db_hash_store+0x28>
    b70c:	4b08      	ldr	r3, [pc, #32]	; (b730 <db_hash_store+0x34>)
    b70e:	4a09      	ldr	r2, [pc, #36]	; (b734 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    b710:	4809      	ldr	r0, [pc, #36]	; (b738 <db_hash_store+0x3c>)
    b712:	1ad2      	subs	r2, r2, r3
    b714:	08d2      	lsrs	r2, r2, #3
    b716:	0192      	lsls	r2, r2, #6
}
    b718:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    b71c:	f042 0201 	orr.w	r2, r2, #1
    b720:	f011 bbb2 	b.w	1ce88 <log_1>
}
    b724:	bd08      	pop	{r3, pc}
    b726:	bf00      	nop
    b728:	2000305a 	.word	0x2000305a
    b72c:	00025059 	.word	0x00025059
    b730:	00021aac 	.word	0x00021aac
    b734:	00021b64 	.word	0x00021b64
    b738:	00025061 	.word	0x00025061

0000b73c <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    b73c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    b73e:	490b      	ldr	r1, [pc, #44]	; (b76c <db_hash_set+0x30>)
{
    b740:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    b742:	4618      	mov	r0, r3
    b744:	2210      	movs	r2, #16
    b746:	47a0      	blx	r4
	if (len < 0) {
    b748:	1e04      	subs	r4, r0, #0
    b74a:	da0c      	bge.n	b766 <db_hash_set+0x2a>
    b74c:	4a08      	ldr	r2, [pc, #32]	; (b770 <db_hash_set+0x34>)
    b74e:	4b09      	ldr	r3, [pc, #36]	; (b774 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    b750:	4809      	ldr	r0, [pc, #36]	; (b778 <db_hash_set+0x3c>)
    b752:	1ad2      	subs	r2, r2, r3
    b754:	08d2      	lsrs	r2, r2, #3
    b756:	0192      	lsls	r2, r2, #6
    b758:	f042 0201 	orr.w	r2, r2, #1
    b75c:	4621      	mov	r1, r4
    b75e:	f011 fb93 	bl	1ce88 <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    b762:	4620      	mov	r0, r4
    b764:	bd10      	pop	{r4, pc}
	return 0;
    b766:	2400      	movs	r4, #0
    b768:	e7fb      	b.n	b762 <db_hash_set+0x26>
    b76a:	bf00      	nop
    b76c:	2000306a 	.word	0x2000306a
    b770:	00021b64 	.word	0x00021b64
    b774:	00021aac 	.word	0x00021aac
    b778:	00025087 	.word	0x00025087

0000b77c <sc_store>:
{
    b77c:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    b77e:	4605      	mov	r5, r0
{
    b780:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    b782:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    b786:	4604      	mov	r4, r0
	if (cfg->id) {
    b788:	b1fa      	cbz	r2, b7ca <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    b78a:	ae02      	add	r6, sp, #8
    b78c:	2104      	movs	r1, #4
    b78e:	4630      	mov	r0, r6
    b790:	f010 ff62 	bl	1c658 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    b794:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    b796:	4a0e      	ldr	r2, [pc, #56]	; (b7d0 <sc_store+0x54>)
    b798:	462b      	mov	r3, r5
    b79a:	2124      	movs	r1, #36	; 0x24
    b79c:	a803      	add	r0, sp, #12
    b79e:	f7fb f987 	bl	6ab0 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    b7a2:	f104 0108 	add.w	r1, r4, #8
    b7a6:	2204      	movs	r2, #4
    b7a8:	a803      	add	r0, sp, #12
    b7aa:	f7f9 fac9 	bl	4d40 <settings_save_one>
	if (err) {
    b7ae:	4601      	mov	r1, r0
    b7b0:	b148      	cbz	r0, b7c6 <sc_store+0x4a>
    b7b2:	4a08      	ldr	r2, [pc, #32]	; (b7d4 <sc_store+0x58>)
    b7b4:	4b08      	ldr	r3, [pc, #32]	; (b7d8 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    b7b6:	4809      	ldr	r0, [pc, #36]	; (b7dc <sc_store+0x60>)
    b7b8:	1ad2      	subs	r2, r2, r3
    b7ba:	08d2      	lsrs	r2, r2, #3
    b7bc:	0192      	lsls	r2, r2, #6
    b7be:	f042 0201 	orr.w	r2, r2, #1
    b7c2:	f011 fb61 	bl	1ce88 <log_1>
}
    b7c6:	b00c      	add	sp, #48	; 0x30
    b7c8:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    b7ca:	9200      	str	r2, [sp, #0]
    b7cc:	e7e3      	b.n	b796 <sc_store+0x1a>
    b7ce:	bf00      	nop
    b7d0:	000252ec 	.word	0x000252ec
    b7d4:	00021b64 	.word	0x00021b64
    b7d8:	00021aac 	.word	0x00021aac
    b7dc:	000250a8 	.word	0x000250a8

0000b7e0 <gatt_notify>:
{
    b7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b7e4:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    b7e6:	8992      	ldrh	r2, [r2, #12]
{
    b7e8:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    b7ea:	3202      	adds	r2, #2
    b7ec:	211b      	movs	r1, #27
{
    b7ee:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    b7f0:	f7ff faea 	bl	adc8 <bt_att_create_pdu>
	if (!buf) {
    b7f4:	4605      	mov	r5, r0
    b7f6:	b1c8      	cbz	r0, b82c <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
    b7f8:	f100 0908 	add.w	r9, r0, #8
    b7fc:	2102      	movs	r1, #2
    b7fe:	4648      	mov	r0, r9
    b800:	f015 f9b2 	bl	20b68 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    b804:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    b806:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
    b808:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
    b80c:	4648      	mov	r0, r9
    b80e:	f015 f9ab 	bl	20b68 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    b812:	89a2      	ldrh	r2, [r4, #12]
    b814:	68a1      	ldr	r1, [r4, #8]
    b816:	4630      	mov	r0, r6
    b818:	f013 faeb 	bl	1edf2 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    b81c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b820:	4629      	mov	r1, r5
    b822:	4638      	mov	r0, r7
}
    b824:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    b828:	f014 ba98 	b.w	1fd5c <bt_att_send>
    b82c:	4b06      	ldr	r3, [pc, #24]	; (b848 <gatt_notify+0x68>)
    b82e:	4907      	ldr	r1, [pc, #28]	; (b84c <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    b830:	4807      	ldr	r0, [pc, #28]	; (b850 <gatt_notify+0x70>)
    b832:	1ac9      	subs	r1, r1, r3
    b834:	08c9      	lsrs	r1, r1, #3
    b836:	0189      	lsls	r1, r1, #6
    b838:	f041 0102 	orr.w	r1, r1, #2
    b83c:	f011 fb17 	bl	1ce6e <log_0>
}
    b840:	f06f 000b 	mvn.w	r0, #11
    b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b848:	00021aac 	.word	0x00021aac
    b84c:	00021b64 	.word	0x00021b64
    b850:	000250c4 	.word	0x000250c4

0000b854 <gatt_send.constprop.0>:
static int gatt_send(struct bt_conn *conn, struct net_buf *buf,
    b854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b858:	4606      	mov	r6, r0
    b85a:	4688      	mov	r8, r1
    b85c:	4617      	mov	r7, r2
	if (params) {
    b85e:	461c      	mov	r4, r3
    b860:	b34b      	cbz	r3, b8b6 <gatt_send.constprop.0+0x62>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    b862:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    b866:	2100      	movs	r1, #0
    b868:	f7ff fdf4 	bl	b454 <bt_att_req_alloc>
		if (!req) {
    b86c:	4605      	mov	r5, r0
    b86e:	b920      	cbnz	r0, b87a <gatt_send.constprop.0+0x26>
			return -ENOMEM;
    b870:	f06f 040b 	mvn.w	r4, #11
}
    b874:	4620      	mov	r0, r4
    b876:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		req->destroy = destroy;
    b87a:	2300      	movs	r3, #0
		req->user_data = params;
    b87c:	6184      	str	r4, [r0, #24]
		req->buf = buf;
    b87e:	f8c0 8010 	str.w	r8, [r0, #16]
		req->func = func;
    b882:	6047      	str	r7, [r0, #4]
		req->destroy = destroy;
    b884:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    b886:	4601      	mov	r1, r0
    b888:	4630      	mov	r0, r6
    b88a:	f014 fab1 	bl	1fdf0 <bt_att_req_send>
		if (err) {
    b88e:	4604      	mov	r4, r0
    b890:	2800      	cmp	r0, #0
    b892:	d0ef      	beq.n	b874 <gatt_send.constprop.0+0x20>
			bt_att_req_free(req);
    b894:	4628      	mov	r0, r5
    b896:	f7ff fdf3 	bl	b480 <bt_att_req_free>
	if (err) {
    b89a:	2c00      	cmp	r4, #0
    b89c:	d0ea      	beq.n	b874 <gatt_send.constprop.0+0x20>
    b89e:	4b08      	ldr	r3, [pc, #32]	; (b8c0 <gatt_send.constprop.0+0x6c>)
    b8a0:	4a08      	ldr	r2, [pc, #32]	; (b8c4 <gatt_send.constprop.0+0x70>)
		BT_ERR("Error sending ATT PDU: %d", err);
    b8a2:	4809      	ldr	r0, [pc, #36]	; (b8c8 <gatt_send.constprop.0+0x74>)
    b8a4:	1ad2      	subs	r2, r2, r3
    b8a6:	08d2      	lsrs	r2, r2, #3
    b8a8:	0192      	lsls	r2, r2, #6
    b8aa:	f042 0201 	orr.w	r2, r2, #1
    b8ae:	4621      	mov	r1, r4
    b8b0:	f011 faea 	bl	1ce88 <log_1>
    b8b4:	e7de      	b.n	b874 <gatt_send.constprop.0+0x20>
		err = bt_att_send(conn, buf, NULL, NULL);
    b8b6:	461a      	mov	r2, r3
    b8b8:	f014 fa50 	bl	1fd5c <bt_att_send>
    b8bc:	4604      	mov	r4, r0
    b8be:	e7ec      	b.n	b89a <gatt_send.constprop.0+0x46>
    b8c0:	00021aac 	.word	0x00021aac
    b8c4:	00021b64 	.word	0x00021b64
    b8c8:	000250ed 	.word	0x000250ed

0000b8cc <gatt_indicate>:
{
    b8cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8d0:	4614      	mov	r4, r2
				sizeof(*ind) + params->len);
    b8d2:	8a12      	ldrh	r2, [r2, #16]
{
    b8d4:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    b8d6:	3202      	adds	r2, #2
    b8d8:	211d      	movs	r1, #29
{
    b8da:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    b8dc:	f7ff fa74 	bl	adc8 <bt_att_create_pdu>
	if (!buf) {
    b8e0:	4605      	mov	r5, r0
    b8e2:	b1e8      	cbz	r0, b920 <gatt_indicate+0x54>
	ind = net_buf_add(buf, sizeof(*ind));
    b8e4:	f100 0808 	add.w	r8, r0, #8
    b8e8:	2102      	movs	r1, #2
    b8ea:	4640      	mov	r0, r8
    b8ec:	f015 f93c 	bl	20b68 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    b8f0:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
    b8f2:	8a21      	ldrh	r1, [r4, #16]
	ind->handle = sys_cpu_to_le16(handle);
    b8f4:	f826 9b02 	strh.w	r9, [r6], #2
	net_buf_add(buf, params->len);
    b8f8:	4640      	mov	r0, r8
    b8fa:	f015 f935 	bl	20b68 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    b8fe:	8a22      	ldrh	r2, [r4, #16]
    b900:	68e1      	ldr	r1, [r4, #12]
    b902:	4630      	mov	r0, r6
    b904:	f013 fa75 	bl	1edf2 <memcpy>
	if (!params->func) {
    b908:	68a3      	ldr	r3, [r4, #8]
    b90a:	b933      	cbnz	r3, b91a <gatt_indicate+0x4e>
		return gatt_send(conn, buf, NULL, NULL, NULL);
    b90c:	461a      	mov	r2, r3
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    b90e:	4629      	mov	r1, r5
    b910:	4638      	mov	r0, r7
}
    b912:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    b916:	f7ff bf9d 	b.w	b854 <gatt_send.constprop.0>
    b91a:	4a08      	ldr	r2, [pc, #32]	; (b93c <gatt_indicate+0x70>)
    b91c:	4623      	mov	r3, r4
    b91e:	e7f6      	b.n	b90e <gatt_indicate+0x42>
    b920:	4b07      	ldr	r3, [pc, #28]	; (b940 <gatt_indicate+0x74>)
    b922:	4908      	ldr	r1, [pc, #32]	; (b944 <gatt_indicate+0x78>)
		BT_WARN("No buffer available to send indication");
    b924:	4808      	ldr	r0, [pc, #32]	; (b948 <gatt_indicate+0x7c>)
    b926:	1ac9      	subs	r1, r1, r3
    b928:	08c9      	lsrs	r1, r1, #3
    b92a:	0189      	lsls	r1, r1, #6
    b92c:	f041 0102 	orr.w	r1, r1, #2
    b930:	f011 fa9d 	bl	1ce6e <log_0>
}
    b934:	f06f 000b 	mvn.w	r0, #11
    b938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b93c:	0001fe71 	.word	0x0001fe71
    b940:	00021aac 	.word	0x00021aac
    b944:	00021b64 	.word	0x00021b64
    b948:	00025107 	.word	0x00025107

0000b94c <ccc_load>:
{
    b94c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b94e:	4a22      	ldr	r2, [pc, #136]	; (b9d8 <ccc_load+0x8c>)
{
    b950:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b952:	6881      	ldr	r1, [r0, #8]
    b954:	4291      	cmp	r1, r2
{
    b956:	4603      	mov	r3, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    b958:	d002      	beq.n	b960 <ccc_load+0x14>
		return BT_GATT_ITER_CONTINUE;
    b95a:	2001      	movs	r0, #1
}
    b95c:	b002      	add	sp, #8
    b95e:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    b960:	68a2      	ldr	r2, [r4, #8]
	ccc = attr->user_data;
    b962:	68c6      	ldr	r6, [r0, #12]
	if (!load->entry) {
    b964:	b94a      	cbnz	r2, b97a <ccc_load+0x2e>
	cfg = ccc_find_cfg(ccc, addr, id);
    b966:	7922      	ldrb	r2, [r4, #4]
    b968:	6821      	ldr	r1, [r4, #0]
    b96a:	4630      	mov	r0, r6
    b96c:	f014 fb40 	bl	1fff0 <ccc_find_cfg>
	if (!cfg) {
    b970:	2800      	cmp	r0, #0
    b972:	d0f2      	beq.n	b95a <ccc_load+0xe>
	clear_ccc_cfg(cfg);
    b974:	f014 fa87 	bl	1fe86 <clear_ccc_cfg>
    b978:	e7ef      	b.n	b95a <ccc_load+0xe>
	} else if (!load->count) {
    b97a:	68e0      	ldr	r0, [r4, #12]
    b97c:	2800      	cmp	r0, #0
    b97e:	d0ed      	beq.n	b95c <ccc_load+0x10>
	if (load->entry->handle != attr->handle) {
    b980:	8812      	ldrh	r2, [r2, #0]
    b982:	8a1b      	ldrh	r3, [r3, #16]
    b984:	429a      	cmp	r2, r3
    b986:	d00a      	beq.n	b99e <ccc_load+0x52>
		if (load->entry->handle < attr->handle) {
    b988:	d2e7      	bcs.n	b95a <ccc_load+0xe>
	load->count--;
    b98a:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    b98c:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    b98e:	3801      	subs	r0, #1
	load->entry++;
    b990:	3304      	adds	r3, #4
	load->count--;
    b992:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b994:	3800      	subs	r0, #0
	load->entry++;
    b996:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    b998:	bf18      	it	ne
    b99a:	2001      	movne	r0, #1
    b99c:	e7de      	b.n	b95c <ccc_load+0x10>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    b99e:	7922      	ldrb	r2, [r4, #4]
    b9a0:	6821      	ldr	r1, [r4, #0]
    b9a2:	4630      	mov	r0, r6
    b9a4:	f014 fb24 	bl	1fff0 <ccc_find_cfg>
	if (!cfg) {
    b9a8:	4605      	mov	r5, r0
    b9aa:	b980      	cbnz	r0, b9ce <ccc_load+0x82>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    b9ac:	9000      	str	r0, [sp, #0]
    b9ae:	4602      	mov	r2, r0
    b9b0:	f8cd 0003 	str.w	r0, [sp, #3]
    b9b4:	4669      	mov	r1, sp
    b9b6:	4630      	mov	r0, r6
    b9b8:	f014 fb1a 	bl	1fff0 <ccc_find_cfg>
		if (!cfg) {
    b9bc:	4605      	mov	r5, r0
    b9be:	2800      	cmp	r0, #0
    b9c0:	d0e3      	beq.n	b98a <ccc_load+0x3e>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    b9c2:	6821      	ldr	r1, [r4, #0]
    b9c4:	3001      	adds	r0, #1
    b9c6:	f014 fa5b 	bl	1fe80 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    b9ca:	7923      	ldrb	r3, [r4, #4]
    b9cc:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    b9ce:	68a3      	ldr	r3, [r4, #8]
    b9d0:	885b      	ldrh	r3, [r3, #2]
    b9d2:	812b      	strh	r3, [r5, #8]
    b9d4:	e7d9      	b.n	b98a <ccc_load+0x3e>
    b9d6:	bf00      	nop
    b9d8:	0000ba3d 	.word	0x0000ba3d

0000b9dc <ccc_save>:
{
    b9dc:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    b9de:	6882      	ldr	r2, [r0, #8]
    b9e0:	4b0b      	ldr	r3, [pc, #44]	; (ba10 <ccc_save+0x34>)
    b9e2:	429a      	cmp	r2, r3
{
    b9e4:	4605      	mov	r5, r0
    b9e6:	460c      	mov	r4, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    b9e8:	d110      	bne.n	ba0c <ccc_save+0x30>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    b9ea:	790a      	ldrb	r2, [r1, #4]
    b9ec:	68c0      	ldr	r0, [r0, #12]
    b9ee:	6809      	ldr	r1, [r1, #0]
    b9f0:	f014 fafe 	bl	1fff0 <ccc_find_cfg>
	if (!cfg) {
    b9f4:	b150      	cbz	r0, ba0c <ccc_save+0x30>
	save->store[save->count].handle = attr->handle;
    b9f6:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
    b9fa:	8a29      	ldrh	r1, [r5, #16]
    b9fc:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    ba00:	3301      	adds	r3, #1
	save->store[save->count].handle = attr->handle;
    ba02:	8111      	strh	r1, [r2, #8]
	save->store[save->count].value = cfg->value;
    ba04:	8901      	ldrh	r1, [r0, #8]
    ba06:	8151      	strh	r1, [r2, #10]
	save->count++;
    ba08:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    ba0c:	2001      	movs	r0, #1
    ba0e:	bd38      	pop	{r3, r4, r5, pc}
    ba10:	0000ba3d 	.word	0x0000ba3d

0000ba14 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				  void *user_data)
{
    ba14:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    ba16:	6882      	ldr	r2, [r0, #8]
    ba18:	4b07      	ldr	r3, [pc, #28]	; (ba38 <remove_peer_from_attr+0x24>)
    ba1a:	429a      	cmp	r2, r3
    ba1c:	d109      	bne.n	ba32 <remove_peer_from_attr+0x1e>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    ba1e:	790a      	ldrb	r2, [r1, #4]
    ba20:	68c0      	ldr	r0, [r0, #12]
    ba22:	6809      	ldr	r1, [r1, #0]
    ba24:	f014 fae4 	bl	1fff0 <ccc_find_cfg>
	if (cfg) {
    ba28:	b118      	cbz	r0, ba32 <remove_peer_from_attr+0x1e>
		memset(cfg, 0, sizeof(*cfg));
    ba2a:	220a      	movs	r2, #10
    ba2c:	2100      	movs	r1, #0
    ba2e:	f013 fa0b 	bl	1ee48 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    ba32:	2001      	movs	r0, #1
    ba34:	bd08      	pop	{r3, pc}
    ba36:	bf00      	nop
    ba38:	0000ba3d 	.word	0x0000ba3d

0000ba3c <bt_gatt_attr_write_ccc>:
{
    ba3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ba40:	461f      	mov	r7, r3
    ba42:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    ba46:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    ba4a:	4606      	mov	r6, r0
    ba4c:	4688      	mov	r8, r1
	if (offset) {
    ba4e:	2b00      	cmp	r3, #0
    ba50:	d14a      	bne.n	bae8 <bt_gatt_attr_write_ccc+0xac>
	if (!len || len > sizeof(uint16_t)) {
    ba52:	1e7b      	subs	r3, r7, #1
    ba54:	2b01      	cmp	r3, #1
    ba56:	d84a      	bhi.n	baee <bt_gatt_attr_write_ccc+0xb2>
	if (len < sizeof(uint16_t)) {
    ba58:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
    ba5a:	7815      	ldrb	r5, [r2, #0]
	return ((uint16_t)src[1] << 8) | src[0];
    ba5c:	bf18      	it	ne
    ba5e:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
    ba60:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
    ba62:	bf0c      	ite	eq
    ba64:	b2ad      	uxtheq	r5, r5
    ba66:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
    ba6a:	f014 fad0 	bl	2000e <find_ccc_cfg>
	if (!cfg) {
    ba6e:	4604      	mov	r4, r0
    ba70:	b9e0      	cbnz	r0, baac <bt_gatt_attr_write_ccc+0x70>
		if (!value) {
    ba72:	b915      	cbnz	r5, ba7a <bt_gatt_attr_write_ccc+0x3e>
			return len;
    ba74:	4638      	mov	r0, r7
}
    ba76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    ba7a:	4649      	mov	r1, r9
    ba7c:	f014 fac7 	bl	2000e <find_ccc_cfg>
		if (!cfg) {
    ba80:	4604      	mov	r4, r0
    ba82:	b960      	cbnz	r0, ba9e <bt_gatt_attr_write_ccc+0x62>
    ba84:	4b1b      	ldr	r3, [pc, #108]	; (baf4 <bt_gatt_attr_write_ccc+0xb8>)
    ba86:	491c      	ldr	r1, [pc, #112]	; (baf8 <bt_gatt_attr_write_ccc+0xbc>)
			BT_WARN("No space to store CCC cfg");
    ba88:	481c      	ldr	r0, [pc, #112]	; (bafc <bt_gatt_attr_write_ccc+0xc0>)
    ba8a:	1ac9      	subs	r1, r1, r3
    ba8c:	08c9      	lsrs	r1, r1, #3
    ba8e:	0189      	lsls	r1, r1, #6
    ba90:	f041 0102 	orr.w	r1, r1, #2
    ba94:	f011 f9eb 	bl	1ce6e <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    ba98:	f06f 0010 	mvn.w	r0, #16
    ba9c:	e7eb      	b.n	ba76 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    ba9e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    baa2:	3001      	adds	r0, #1
    baa4:	f014 f9ec 	bl	1fe80 <bt_addr_le_copy>
		cfg->id = conn->id;
    baa8:	7a33      	ldrb	r3, [r6, #8]
    baaa:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    baac:	f8d9 3010 	ldr.w	r3, [r9, #16]
    bab0:	b973      	cbnz	r3, bad0 <bt_gatt_attr_write_ccc+0x94>
	if (cfg->value != ccc->value) {
    bab2:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    bab6:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    bab8:	42ab      	cmp	r3, r5
    baba:	d003      	beq.n	bac4 <bt_gatt_attr_write_ccc+0x88>
		gatt_ccc_changed(attr, ccc);
    babc:	4649      	mov	r1, r9
    babe:	4640      	mov	r0, r8
    bac0:	f014 f9cc 	bl	1fe5c <gatt_ccc_changed>
	if (!value) {
    bac4:	2d00      	cmp	r5, #0
    bac6:	d1d5      	bne.n	ba74 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
    bac8:	4620      	mov	r0, r4
    baca:	f014 f9dc 	bl	1fe86 <clear_ccc_cfg>
    bace:	e7d1      	b.n	ba74 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    bad0:	462a      	mov	r2, r5
    bad2:	4641      	mov	r1, r8
    bad4:	4630      	mov	r0, r6
    bad6:	4798      	blx	r3
		if (write < 0) {
    bad8:	2800      	cmp	r0, #0
    bada:	dbcc      	blt.n	ba76 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
    badc:	1e42      	subs	r2, r0, #1
    bade:	2a01      	cmp	r2, #1
    bae0:	d9e7      	bls.n	bab2 <bt_gatt_attr_write_ccc+0x76>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    bae2:	f06f 000d 	mvn.w	r0, #13
    bae6:	e7c6      	b.n	ba76 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bae8:	f06f 0006 	mvn.w	r0, #6
    baec:	e7c3      	b.n	ba76 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    baee:	f06f 000c 	mvn.w	r0, #12
    baf2:	e7c0      	b.n	ba76 <bt_gatt_attr_write_ccc+0x3a>
    baf4:	00021aac 	.word	0x00021aac
    baf8:	00021b64 	.word	0x00021b64
    bafc:	0002512e 	.word	0x0002512e

0000bb00 <sc_commit>:
{
    bb00:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb02:	4c0c      	ldr	r4, [pc, #48]	; (bb34 <sc_commit+0x34>)
    bb04:	f06f 0102 	mvn.w	r1, #2
    bb08:	f104 0048 	add.w	r0, r4, #72	; 0x48
    bb0c:	f014 fa41 	bl	1ff92 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb10:	f3bf 8f5b 	dmb	ish
    bb14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    bb16:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    bb1a:	07db      	lsls	r3, r3, #31
    bb1c:	d507      	bpl.n	bb2e <sc_commit+0x2e>
    bb1e:	4806      	ldr	r0, [pc, #24]	; (bb38 <sc_commit+0x38>)
    bb20:	f44f 72a4 	mov.w	r2, #328	; 0x148
    bb24:	2300      	movs	r3, #0
    bb26:	f104 0118 	add.w	r1, r4, #24
    bb2a:	f010 fa53 	bl	1bfd4 <k_delayed_work_submit_to_queue>
}
    bb2e:	2000      	movs	r0, #0
    bb30:	bd10      	pop	{r4, pc}
    bb32:	bf00      	nop
    bb34:	20000e40 	.word	0x20000e40
    bb38:	200012a8 	.word	0x200012a8

0000bb3c <find_cf_cfg_by_addr>:
{
    bb3c:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    bb3e:	4c0e      	ldr	r4, [pc, #56]	; (bb78 <find_cf_cfg_by_addr+0x3c>)
    bb40:	7823      	ldrb	r3, [r4, #0]
    bb42:	4283      	cmp	r3, r0
{
    bb44:	4606      	mov	r6, r0
    bb46:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    bb48:	d00a      	beq.n	bb60 <find_cf_cfg_by_addr+0x24>
    bb4a:	7c23      	ldrb	r3, [r4, #16]
    bb4c:	42b3      	cmp	r3, r6
    bb4e:	d111      	bne.n	bb74 <find_cf_cfg_by_addr+0x38>
	return memcmp(a, b, sizeof(*a));
    bb50:	490a      	ldr	r1, [pc, #40]	; (bb7c <find_cf_cfg_by_addr+0x40>)
    bb52:	2207      	movs	r2, #7
    bb54:	4628      	mov	r0, r5
    bb56:	f013 f93c 	bl	1edd2 <memcmp>
    bb5a:	b958      	cbnz	r0, bb74 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    bb5c:	2001      	movs	r0, #1
    bb5e:	e006      	b.n	bb6e <find_cf_cfg_by_addr+0x32>
    bb60:	2207      	movs	r2, #7
    bb62:	1c61      	adds	r1, r4, #1
    bb64:	4628      	mov	r0, r5
    bb66:	f013 f934 	bl	1edd2 <memcmp>
			if (id == cf_cfg[i].id &&
    bb6a:	2800      	cmp	r0, #0
    bb6c:	d1ed      	bne.n	bb4a <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    bb6e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    bb72:	e000      	b.n	bb76 <find_cf_cfg_by_addr+0x3a>
	return NULL;
    bb74:	2000      	movs	r0, #0
}
    bb76:	bd70      	pop	{r4, r5, r6, pc}
    bb78:	200015c8 	.word	0x200015c8
    bb7c:	200015d9 	.word	0x200015d9

0000bb80 <find_sc_cfg>:
{
    bb80:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    bb82:	4c0e      	ldr	r4, [pc, #56]	; (bbbc <find_sc_cfg+0x3c>)
    bb84:	7823      	ldrb	r3, [r4, #0]
    bb86:	4283      	cmp	r3, r0
{
    bb88:	4605      	mov	r5, r0
    bb8a:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    bb8c:	d00a      	beq.n	bba4 <find_sc_cfg+0x24>
    bb8e:	7b23      	ldrb	r3, [r4, #12]
    bb90:	42ab      	cmp	r3, r5
    bb92:	d111      	bne.n	bbb8 <find_sc_cfg+0x38>
    bb94:	480a      	ldr	r0, [pc, #40]	; (bbc0 <find_sc_cfg+0x40>)
    bb96:	2207      	movs	r2, #7
    bb98:	4631      	mov	r1, r6
    bb9a:	f013 f91a 	bl	1edd2 <memcmp>
    bb9e:	b958      	cbnz	r0, bbb8 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bba0:	2001      	movs	r0, #1
    bba2:	e005      	b.n	bbb0 <find_sc_cfg+0x30>
    bba4:	2207      	movs	r2, #7
    bba6:	1c60      	adds	r0, r4, #1
    bba8:	f013 f913 	bl	1edd2 <memcmp>
		if (id == sc_cfg[i].id &&
    bbac:	2800      	cmp	r0, #0
    bbae:	d1ee      	bne.n	bb8e <find_sc_cfg+0xe>
			return &sc_cfg[i];
    bbb0:	230c      	movs	r3, #12
    bbb2:	fb03 4000 	mla	r0, r3, r0, r4
    bbb6:	e000      	b.n	bbba <find_sc_cfg+0x3a>
	return NULL;
    bbb8:	2000      	movs	r0, #0
}
    bbba:	bd70      	pop	{r4, r5, r6, pc}
    bbbc:	20002ac2 	.word	0x20002ac2
    bbc0:	20002acf 	.word	0x20002acf

0000bbc4 <sc_save>:
{
    bbc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    bbc8:	4680      	mov	r8, r0
    bbca:	460f      	mov	r7, r1
    bbcc:	4616      	mov	r6, r2
    bbce:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    bbd0:	f7ff ffd6 	bl	bb80 <find_sc_cfg>
	if (!cfg) {
    bbd4:	4604      	mov	r4, r0
    bbd6:	b9c8      	cbnz	r0, bc0c <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    bbd8:	4669      	mov	r1, sp
    bbda:	9000      	str	r0, [sp, #0]
    bbdc:	f8cd 0003 	str.w	r0, [sp, #3]
    bbe0:	f7ff ffce 	bl	bb80 <find_sc_cfg>
		if (!cfg) {
    bbe4:	4604      	mov	r4, r0
    bbe6:	b960      	cbnz	r0, bc02 <sc_save+0x3e>
    bbe8:	4915      	ldr	r1, [pc, #84]	; (bc40 <sc_save+0x7c>)
    bbea:	4b16      	ldr	r3, [pc, #88]	; (bc44 <sc_save+0x80>)
			BT_ERR("unable to save SC: no cfg left");
    bbec:	4816      	ldr	r0, [pc, #88]	; (bc48 <sc_save+0x84>)
    bbee:	1ac9      	subs	r1, r1, r3
    bbf0:	08c9      	lsrs	r1, r1, #3
    bbf2:	0189      	lsls	r1, r1, #6
    bbf4:	f041 0101 	orr.w	r1, r1, #1
    bbf8:	f011 f939 	bl	1ce6e <log_0>
}
    bbfc:	b002      	add	sp, #8
    bbfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    bc02:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    bc06:	4639      	mov	r1, r7
    bc08:	f014 f93a 	bl	1fe80 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    bc0c:	8922      	ldrh	r2, [r4, #8]
    bc0e:	8963      	ldrh	r3, [r4, #10]
    bc10:	b96a      	cbnz	r2, bc2e <sc_save+0x6a>
    bc12:	b973      	cbnz	r3, bc32 <sc_save+0x6e>
		cfg->data.start = start;
    bc14:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    bc16:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    bc18:	4621      	mov	r1, r4
    bc1a:	f811 0b01 	ldrb.w	r0, [r1], #1
    bc1e:	f013 fb8a 	bl	1f336 <bt_addr_le_is_bonded>
    bc22:	2800      	cmp	r0, #0
    bc24:	d0ea      	beq.n	bbfc <sc_save+0x38>
		sc_store(cfg);
    bc26:	4620      	mov	r0, r4
    bc28:	f7ff fda8 	bl	b77c <sc_store>
    bc2c:	e7e6      	b.n	bbfc <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    bc2e:	4296      	cmp	r6, r2
    bc30:	d302      	bcc.n	bc38 <sc_save+0x74>
    bc32:	429d      	cmp	r5, r3
    bc34:	d8ef      	bhi.n	bc16 <sc_save+0x52>
    bc36:	e7e1      	b.n	bbfc <sc_save+0x38>
	if (*end < new_end) {
    bc38:	429d      	cmp	r5, r3
		*start = new_start;
    bc3a:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    bc3c:	d9ec      	bls.n	bc18 <sc_save+0x54>
    bc3e:	e7ea      	b.n	bc16 <sc_save+0x52>
    bc40:	00021b64 	.word	0x00021b64
    bc44:	00021aac 	.word	0x00021aac
    bc48:	00025148 	.word	0x00025148

0000bc4c <notify_cb>:
{
    bc4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    bc50:	4b31      	ldr	r3, [pc, #196]	; (bd18 <notify_cb+0xcc>)
    bc52:	6882      	ldr	r2, [r0, #8]
    bc54:	429a      	cmp	r2, r3
{
    bc56:	4606      	mov	r6, r0
    bc58:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    bc5a:	d113      	bne.n	bc84 <notify_cb+0x38>
	ccc = attr->user_data;
    bc5c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    bc5e:	4b2f      	ldr	r3, [pc, #188]	; (bd1c <notify_cb+0xd0>)
    bc60:	429f      	cmp	r7, r3
    bc62:	d013      	beq.n	bc8c <notify_cb+0x40>
		if (cfg->value != data->type) {
    bc64:	893a      	ldrh	r2, [r7, #8]
    bc66:	88ab      	ldrh	r3, [r5, #4]
    bc68:	429a      	cmp	r2, r3
    bc6a:	d10b      	bne.n	bc84 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    bc6c:	4639      	mov	r1, r7
    bc6e:	f811 0b01 	ldrb.w	r0, [r1], #1
    bc72:	f7fd ff45 	bl	9b00 <bt_conn_lookup_addr_le>
		if (!conn) {
    bc76:	4604      	mov	r4, r0
    bc78:	b120      	cbz	r0, bc84 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    bc7a:	7b43      	ldrb	r3, [r0, #13]
    bc7c:	2b07      	cmp	r3, #7
    bc7e:	d02d      	beq.n	bcdc <notify_cb+0x90>
			bt_conn_unref(conn);
    bc80:	f013 fc37 	bl	1f4f2 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    bc84:	2001      	movs	r0, #1
}
    bc86:	b003      	add	sp, #12
    bc88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bc8c:	f04f 0800 	mov.w	r8, #0
    bc90:	4c23      	ldr	r4, [pc, #140]	; (bd20 <notify_cb+0xd4>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    bc92:	46c1      	mov	r9, r8
    bc94:	2207      	movs	r2, #7
    bc96:	4669      	mov	r1, sp
    bc98:	4620      	mov	r0, r4
    bc9a:	f8cd 9000 	str.w	r9, [sp]
    bc9e:	f8cd 9003 	str.w	r9, [sp, #3]
    bca2:	f013 f896 	bl	1edd2 <memcmp>
    bca6:	b178      	cbz	r0, bcc8 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    bca8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    bcac:	2207      	movs	r2, #7
    bcae:	4621      	mov	r1, r4
    bcb0:	f7fd ff42 	bl	9b38 <bt_conn_lookup_state_le>
			if (!conn) {
    bcb4:	b978      	cbnz	r0, bcd6 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    bcb6:	68ab      	ldr	r3, [r5, #8]
				sc_save(cfg->id, &cfg->peer,
    bcb8:	f814 0c01 	ldrb.w	r0, [r4, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    bcbc:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    bcbe:	4621      	mov	r1, r4
    bcc0:	8853      	ldrh	r3, [r2, #2]
    bcc2:	8812      	ldrh	r2, [r2, #0]
    bcc4:	f7ff ff7e 	bl	bbc4 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    bcc8:	340c      	adds	r4, #12
    bcca:	f1b8 0f00 	cmp.w	r8, #0
    bcce:	d1c9      	bne.n	bc64 <notify_cb+0x18>
    bcd0:	f04f 0801 	mov.w	r8, #1
    bcd4:	e7de      	b.n	bc94 <notify_cb+0x48>
			bt_conn_unref(conn);
    bcd6:	f013 fc0c 	bl	1f4f2 <bt_conn_unref>
    bcda:	e7f5      	b.n	bcc8 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    bcdc:	697b      	ldr	r3, [r7, #20]
    bcde:	b123      	cbz	r3, bcea <notify_cb+0x9e>
    bce0:	4631      	mov	r1, r6
    bce2:	4798      	blx	r3
    bce4:	b908      	cbnz	r0, bcea <notify_cb+0x9e>
			bt_conn_unref(conn);
    bce6:	4620      	mov	r0, r4
    bce8:	e7ca      	b.n	bc80 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    bcea:	8a31      	ldrh	r1, [r6, #16]
    bcec:	88ab      	ldrh	r3, [r5, #4]
    bcee:	68aa      	ldr	r2, [r5, #8]
    bcf0:	3901      	subs	r1, #1
    bcf2:	2b02      	cmp	r3, #2
    bcf4:	b289      	uxth	r1, r1
			err = gatt_indicate(conn, attr->handle - 1,
    bcf6:	4620      	mov	r0, r4
		if (data->type == BT_GATT_CCC_INDICATE) {
    bcf8:	d10b      	bne.n	bd12 <notify_cb+0xc6>
			err = gatt_indicate(conn, attr->handle - 1,
    bcfa:	f7ff fde7 	bl	b8cc <gatt_indicate>
			err = gatt_notify(conn, attr->handle - 1,
    bcfe:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    bd00:	4620      	mov	r0, r4
    bd02:	f013 fbf6 	bl	1f4f2 <bt_conn_unref>
		if (err < 0) {
    bd06:	2e00      	cmp	r6, #0
    bd08:	f04f 0000 	mov.w	r0, #0
    bd0c:	dbbb      	blt.n	bc86 <notify_cb+0x3a>
		data->err = 0;
    bd0e:	6028      	str	r0, [r5, #0]
    bd10:	e7b8      	b.n	bc84 <notify_cb+0x38>
			err = gatt_notify(conn, attr->handle - 1,
    bd12:	f7ff fd65 	bl	b7e0 <gatt_notify>
    bd16:	e7f2      	b.n	bcfe <notify_cb+0xb2>
    bd18:	0000ba3d 	.word	0x0000ba3d
    bd1c:	20000374 	.word	0x20000374
    bd20:	20002ac3 	.word	0x20002ac3

0000bd24 <sc_set>:
{
    bd24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bd28:	460e      	mov	r6, r1
    bd2a:	b087      	sub	sp, #28
    bd2c:	4690      	mov	r8, r2
    bd2e:	4699      	mov	r9, r3
	if (!name) {
    bd30:	4607      	mov	r7, r0
    bd32:	b978      	cbnz	r0, bd54 <sc_set+0x30>
    bd34:	4937      	ldr	r1, [pc, #220]	; (be14 <sc_set+0xf0>)
    bd36:	4b38      	ldr	r3, [pc, #224]	; (be18 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    bd38:	4838      	ldr	r0, [pc, #224]	; (be1c <sc_set+0xf8>)
    bd3a:	1ac9      	subs	r1, r1, r3
    bd3c:	08c9      	lsrs	r1, r1, #3
    bd3e:	0189      	lsls	r1, r1, #6
    bd40:	f041 0101 	orr.w	r1, r1, #1
    bd44:	f011 f893 	bl	1ce6e <log_0>
		return -EINVAL;
    bd48:	f06f 0515 	mvn.w	r5, #21
}
    bd4c:	4628      	mov	r0, r5
    bd4e:	b007      	add	sp, #28
    bd50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    bd54:	a902      	add	r1, sp, #8
    bd56:	f013 f91b 	bl	1ef90 <bt_settings_decode_key>
	if (err) {
    bd5a:	4605      	mov	r5, r0
    bd5c:	b178      	cbz	r0, bd7e <sc_set+0x5a>
    bd5e:	4a2e      	ldr	r2, [pc, #184]	; (be18 <sc_set+0xf4>)
    bd60:	4c2c      	ldr	r4, [pc, #176]	; (be14 <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    bd62:	4638      	mov	r0, r7
    bd64:	1aa4      	subs	r4, r4, r2
    bd66:	08e4      	lsrs	r4, r4, #3
    bd68:	f7f7 fe6e 	bl	3a48 <log_strdup>
    bd6c:	01a4      	lsls	r4, r4, #6
    bd6e:	f044 0401 	orr.w	r4, r4, #1
    bd72:	4601      	mov	r1, r0
    bd74:	4622      	mov	r2, r4
    bd76:	482a      	ldr	r0, [pc, #168]	; (be20 <sc_set+0xfc>)
    bd78:	f011 f886 	bl	1ce88 <log_1>
    bd7c:	e7e4      	b.n	bd48 <sc_set+0x24>
	settings_name_next(name, &next);
    bd7e:	a901      	add	r1, sp, #4
    bd80:	4638      	mov	r0, r7
    bd82:	f011 fd34 	bl	1d7ee <settings_name_next>
	if (!next) {
    bd86:	9801      	ldr	r0, [sp, #4]
    bd88:	b308      	cbz	r0, bdce <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    bd8a:	220a      	movs	r2, #10
    bd8c:	4629      	mov	r1, r5
    bd8e:	f012 ff6b 	bl	1ec68 <strtol>
    bd92:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    bd94:	a902      	add	r1, sp, #8
    bd96:	4638      	mov	r0, r7
    bd98:	f7ff fef2 	bl	bb80 <find_sc_cfg>
	if (!cfg && len_rd) {
    bd9c:	4604      	mov	r4, r0
    bd9e:	bb88      	cbnz	r0, be04 <sc_set+0xe0>
    bda0:	2e00      	cmp	r6, #0
    bda2:	d0d3      	beq.n	bd4c <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    bda4:	a904      	add	r1, sp, #16
    bda6:	9004      	str	r0, [sp, #16]
    bda8:	f8cd 0013 	str.w	r0, [sp, #19]
    bdac:	f7ff fee8 	bl	bb80 <find_sc_cfg>
		if (!cfg) {
    bdb0:	4604      	mov	r4, r0
    bdb2:	b970      	cbnz	r0, bdd2 <sc_set+0xae>
    bdb4:	4b18      	ldr	r3, [pc, #96]	; (be18 <sc_set+0xf4>)
    bdb6:	4917      	ldr	r1, [pc, #92]	; (be14 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    bdb8:	481a      	ldr	r0, [pc, #104]	; (be24 <sc_set+0x100>)
    bdba:	1ac9      	subs	r1, r1, r3
    bdbc:	08c9      	lsrs	r1, r1, #3
    bdbe:	0189      	lsls	r1, r1, #6
    bdc0:	f041 0101 	orr.w	r1, r1, #1
    bdc4:	f011 f853 	bl	1ce6e <log_0>
			return -ENOMEM;
    bdc8:	f06f 050b 	mvn.w	r5, #11
    bdcc:	e7be      	b.n	bd4c <sc_set+0x28>
		id = BT_ID_DEFAULT;
    bdce:	462f      	mov	r7, r5
    bdd0:	e7e0      	b.n	bd94 <sc_set+0x70>
		cfg->id = id;
    bdd2:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    bdd6:	a902      	add	r1, sp, #8
    bdd8:	f014 f852 	bl	1fe80 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    bddc:	f104 0108 	add.w	r1, r4, #8
    bde0:	2204      	movs	r2, #4
    bde2:	4648      	mov	r0, r9
    bde4:	47c0      	blx	r8
		if (len < 0) {
    bde6:	1e04      	subs	r4, r0, #0
    bde8:	dab0      	bge.n	bd4c <sc_set+0x28>
    bdea:	4b0b      	ldr	r3, [pc, #44]	; (be18 <sc_set+0xf4>)
    bdec:	4a09      	ldr	r2, [pc, #36]	; (be14 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
    bdee:	480e      	ldr	r0, [pc, #56]	; (be28 <sc_set+0x104>)
    bdf0:	1ad2      	subs	r2, r2, r3
    bdf2:	08d2      	lsrs	r2, r2, #3
    bdf4:	0192      	lsls	r2, r2, #6
    bdf6:	f042 0201 	orr.w	r2, r2, #1
    bdfa:	4621      	mov	r1, r4
    bdfc:	f011 f844 	bl	1ce88 <log_1>
			return len;
    be00:	4625      	mov	r5, r4
    be02:	e7a3      	b.n	bd4c <sc_set+0x28>
	if (len_rd) {
    be04:	2e00      	cmp	r6, #0
    be06:	d1e9      	bne.n	bddc <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    be08:	220c      	movs	r2, #12
    be0a:	4631      	mov	r1, r6
    be0c:	f013 f81c 	bl	1ee48 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    be10:	e79c      	b.n	bd4c <sc_set+0x28>
    be12:	bf00      	nop
    be14:	00021b64 	.word	0x00021b64
    be18:	00021aac 	.word	0x00021aac
    be1c:	00023f47 	.word	0x00023f47
    be20:	00025167 	.word	0x00025167
    be24:	00025183 	.word	0x00025183
    be28:	00025087 	.word	0x00025087

0000be2c <find_cf_cfg>:
{
    be2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    be2e:	4c16      	ldr	r4, [pc, #88]	; (be88 <find_cf_cfg+0x5c>)
		if (!conn) {
    be30:	4605      	mov	r5, r0
    be32:	b140      	cbz	r0, be46 <find_cf_cfg+0x1a>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    be34:	4622      	mov	r2, r4
    be36:	f812 1b01 	ldrb.w	r1, [r2], #1
    be3a:	f013 fb3a 	bl	1f4b2 <bt_conn_is_peer_addr_le>
    be3e:	b1c0      	cbz	r0, be72 <find_cf_cfg+0x46>
}
    be40:	4620      	mov	r0, r4
    be42:	b003      	add	sp, #12
    be44:	bd30      	pop	{r4, r5, pc}
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    be46:	9000      	str	r0, [sp, #0]
    be48:	2207      	movs	r2, #7
    be4a:	f8cd 0003 	str.w	r0, [sp, #3]
    be4e:	4669      	mov	r1, sp
    be50:	1c60      	adds	r0, r4, #1
    be52:	f012 ffbe 	bl	1edd2 <memcmp>
    be56:	2800      	cmp	r0, #0
    be58:	d0f2      	beq.n	be40 <find_cf_cfg+0x14>
    be5a:	2207      	movs	r2, #7
    be5c:	4669      	mov	r1, sp
    be5e:	f104 0011 	add.w	r0, r4, #17
    be62:	9500      	str	r5, [sp, #0]
    be64:	f8cd 5003 	str.w	r5, [sp, #3]
    be68:	f012 ffb3 	bl	1edd2 <memcmp>
    be6c:	b948      	cbnz	r0, be82 <find_cf_cfg+0x56>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    be6e:	3410      	adds	r4, #16
    be70:	e7e6      	b.n	be40 <find_cf_cfg+0x14>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    be72:	7c21      	ldrb	r1, [r4, #16]
    be74:	f104 0211 	add.w	r2, r4, #17
    be78:	4628      	mov	r0, r5
    be7a:	f013 fb1a 	bl	1f4b2 <bt_conn_is_peer_addr_le>
    be7e:	2800      	cmp	r0, #0
    be80:	d1f5      	bne.n	be6e <find_cf_cfg+0x42>
	return NULL;
    be82:	2400      	movs	r4, #0
    be84:	e7dc      	b.n	be40 <find_cf_cfg+0x14>
    be86:	bf00      	nop
    be88:	200015c8 	.word	0x200015c8

0000be8c <cf_write>:
{
    be8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be90:	461f      	mov	r7, r3
    be92:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
    be96:	2b01      	cmp	r3, #1
{
    be98:	4680      	mov	r8, r0
    be9a:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    be9c:	d847      	bhi.n	bf2e <cf_write+0xa2>
	if (offset + len > sizeof(cfg->data)) {
    be9e:	443b      	add	r3, r7
    bea0:	2b01      	cmp	r3, #1
    bea2:	463d      	mov	r5, r7
    bea4:	dc46      	bgt.n	bf34 <cf_write+0xa8>
	cfg = find_cf_cfg(conn);
    bea6:	f7ff ffc1 	bl	be2c <find_cf_cfg>
	if (!cfg) {
    beaa:	4604      	mov	r4, r0
    beac:	b990      	cbnz	r0, bed4 <cf_write+0x48>
		cfg = find_cf_cfg(NULL);
    beae:	f7ff ffbd 	bl	be2c <find_cf_cfg>
	if (!cfg) {
    beb2:	4604      	mov	r4, r0
    beb4:	b970      	cbnz	r0, bed4 <cf_write+0x48>
    beb6:	4b22      	ldr	r3, [pc, #136]	; (bf40 <cf_write+0xb4>)
    beb8:	4922      	ldr	r1, [pc, #136]	; (bf44 <cf_write+0xb8>)
		BT_WARN("No space to store Client Supported Features");
    beba:	4823      	ldr	r0, [pc, #140]	; (bf48 <cf_write+0xbc>)
    bebc:	1ac9      	subs	r1, r1, r3
    bebe:	08c9      	lsrs	r1, r1, #3
    bec0:	0189      	lsls	r1, r1, #6
    bec2:	f041 0102 	orr.w	r1, r1, #2
    bec6:	f010 ffd2 	bl	1ce6e <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    beca:	f06f 0510 	mvn.w	r5, #16
}
    bece:	4628      	mov	r0, r5
    bed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool cf_set_value(struct gatt_cf_cfg *cfg, const uint8_t *value, uint16_t len)
    bed4:	4632      	mov	r2, r6
    bed6:	eb07 0c06 	add.w	ip, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    beda:	4562      	cmp	r2, ip
    bedc:	d114      	bne.n	bf08 <cf_write+0x7c>
	for (i = 0U; i < len && i < last_byte; i++) {
    bede:	b12f      	cbz	r7, beec <cf_write+0x60>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    bee0:	7833      	ldrb	r3, [r6, #0]
    bee2:	7a22      	ldrb	r2, [r4, #8]
    bee4:	f003 0307 	and.w	r3, r3, #7
    bee8:	4313      	orrs	r3, r2
    beea:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    beec:	f108 0188 	add.w	r1, r8, #136	; 0x88
    bef0:	1c60      	adds	r0, r4, #1
    bef2:	f013 ffc5 	bl	1fe80 <bt_addr_le_copy>
	cfg->id = conn->id;
    bef6:	4620      	mov	r0, r4
    bef8:	f898 3008 	ldrb.w	r3, [r8, #8]
    befc:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    bf00:	2100      	movs	r1, #0
    bf02:	f014 f89e 	bl	20042 <atomic_set_bit>
	return len;
    bf06:	e7e2      	b.n	bece <cf_write+0x42>
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    bf08:	f812 1b01 	ldrb.w	r1, [r2], #1
    bf0c:	7a20      	ldrb	r0, [r4, #8]
    bf0e:	2300      	movs	r3, #0
    bf10:	4041      	eors	r1, r0
			if ((BIT(bit) & chg_bits) &&
    bf12:	fa21 fe03 	lsr.w	lr, r1, r3
    bf16:	f01e 0f01 	tst.w	lr, #1
    bf1a:	d004      	beq.n	bf26 <cf_write+0x9a>
    bf1c:	fa20 fe03 	lsr.w	lr, r0, r3
    bf20:	f01e 0f01 	tst.w	lr, #1
    bf24:	d109      	bne.n	bf3a <cf_write+0xae>
		for (bit = 0U; bit <= last_bit; bit++) {
    bf26:	3301      	adds	r3, #1
    bf28:	2b03      	cmp	r3, #3
    bf2a:	d1f2      	bne.n	bf12 <cf_write+0x86>
    bf2c:	e7d5      	b.n	beda <cf_write+0x4e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    bf2e:	f06f 0506 	mvn.w	r5, #6
    bf32:	e7cc      	b.n	bece <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    bf34:	f06f 050c 	mvn.w	r5, #12
    bf38:	e7c9      	b.n	bece <cf_write+0x42>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    bf3a:	f06f 0512 	mvn.w	r5, #18
    bf3e:	e7c6      	b.n	bece <cf_write+0x42>
    bf40:	00021aac 	.word	0x00021aac
    bf44:	00021b64 	.word	0x00021b64
    bf48:	000251a5 	.word	0x000251a5

0000bf4c <sc_indicate_rsp>:
{
    bf4c:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bf4e:	4d12      	ldr	r5, [pc, #72]	; (bf98 <sc_indicate_rsp+0x4c>)
    bf50:	4604      	mov	r4, r0
    bf52:	f06f 0102 	mvn.w	r1, #2
    bf56:	f105 0048 	add.w	r0, r5, #72	; 0x48
    bf5a:	f014 f81a 	bl	1ff92 <atomic_and>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf5e:	f3bf 8f5b 	dmb	ish
    bf62:	6cab      	ldr	r3, [r5, #72]	; 0x48
    bf64:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    bf68:	07da      	lsls	r2, r3, #31
    bf6a:	d506      	bpl.n	bf7a <sc_indicate_rsp+0x2e>
    bf6c:	480b      	ldr	r0, [pc, #44]	; (bf9c <sc_indicate_rsp+0x50>)
    bf6e:	2200      	movs	r2, #0
    bf70:	2300      	movs	r3, #0
    bf72:	f105 0118 	add.w	r1, r5, #24
    bf76:	f010 f82d 	bl	1bfd4 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    bf7a:	4620      	mov	r0, r4
    bf7c:	f7ff ff56 	bl	be2c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    bf80:	b140      	cbz	r0, bf94 <sc_indicate_rsp+0x48>
    bf82:	7a03      	ldrb	r3, [r0, #8]
    bf84:	07db      	lsls	r3, r3, #31
    bf86:	d505      	bpl.n	bf94 <sc_indicate_rsp+0x48>
}
    bf88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    bf8c:	2100      	movs	r1, #0
    bf8e:	300c      	adds	r0, #12
    bf90:	f014 b857 	b.w	20042 <atomic_set_bit>
}
    bf94:	bd38      	pop	{r3, r4, r5, pc}
    bf96:	bf00      	nop
    bf98:	20000e40 	.word	0x20000e40
    bf9c:	200012a8 	.word	0x200012a8

0000bfa0 <cf_set>:
{
    bfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bfa4:	4689      	mov	r9, r1
    bfa6:	b085      	sub	sp, #20
    bfa8:	4617      	mov	r7, r2
    bfaa:	4698      	mov	r8, r3
	if (!name) {
    bfac:	4605      	mov	r5, r0
    bfae:	b978      	cbnz	r0, bfd0 <cf_set+0x30>
    bfb0:	4934      	ldr	r1, [pc, #208]	; (c084 <cf_set+0xe4>)
    bfb2:	4b35      	ldr	r3, [pc, #212]	; (c088 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    bfb4:	4835      	ldr	r0, [pc, #212]	; (c08c <cf_set+0xec>)
    bfb6:	1ac9      	subs	r1, r1, r3
    bfb8:	08c9      	lsrs	r1, r1, #3
    bfba:	0189      	lsls	r1, r1, #6
    bfbc:	f041 0101 	orr.w	r1, r1, #1
    bfc0:	f010 ff55 	bl	1ce6e <log_0>
		return -EINVAL;
    bfc4:	f06f 0415 	mvn.w	r4, #21
}
    bfc8:	4620      	mov	r0, r4
    bfca:	b005      	add	sp, #20
    bfcc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    bfd0:	a902      	add	r1, sp, #8
    bfd2:	f012 ffdd 	bl	1ef90 <bt_settings_decode_key>
	if (err) {
    bfd6:	4604      	mov	r4, r0
    bfd8:	b178      	cbz	r0, bffa <cf_set+0x5a>
    bfda:	4a2b      	ldr	r2, [pc, #172]	; (c088 <cf_set+0xe8>)
    bfdc:	4c29      	ldr	r4, [pc, #164]	; (c084 <cf_set+0xe4>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    bfde:	4628      	mov	r0, r5
    bfe0:	1aa4      	subs	r4, r4, r2
    bfe2:	08e4      	lsrs	r4, r4, #3
    bfe4:	f7f7 fd30 	bl	3a48 <log_strdup>
    bfe8:	01a4      	lsls	r4, r4, #6
    bfea:	f044 0401 	orr.w	r4, r4, #1
    bfee:	4601      	mov	r1, r0
    bff0:	4622      	mov	r2, r4
    bff2:	4827      	ldr	r0, [pc, #156]	; (c090 <cf_set+0xf0>)
    bff4:	f010 ff48 	bl	1ce88 <log_1>
    bff8:	e7e4      	b.n	bfc4 <cf_set+0x24>
	settings_name_next(name, &next);
    bffa:	a901      	add	r1, sp, #4
    bffc:	4628      	mov	r0, r5
    bffe:	f011 fbf6 	bl	1d7ee <settings_name_next>
	if (!next) {
    c002:	9801      	ldr	r0, [sp, #4]
    c004:	b1d8      	cbz	r0, c03e <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    c006:	220a      	movs	r2, #10
    c008:	4621      	mov	r1, r4
    c00a:	f012 fe2d 	bl	1ec68 <strtol>
    c00e:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    c010:	a902      	add	r1, sp, #8
    c012:	4630      	mov	r0, r6
    c014:	f7ff fd92 	bl	bb3c <find_cf_cfg_by_addr>
	if (!cfg) {
    c018:	4605      	mov	r5, r0
    c01a:	b9b8      	cbnz	r0, c04c <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    c01c:	f7ff ff06 	bl	be2c <find_cf_cfg>
		if (!cfg) {
    c020:	4605      	mov	r5, r0
    c022:	b970      	cbnz	r0, c042 <cf_set+0xa2>
    c024:	4b18      	ldr	r3, [pc, #96]	; (c088 <cf_set+0xe8>)
    c026:	4917      	ldr	r1, [pc, #92]	; (c084 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    c028:	481a      	ldr	r0, [pc, #104]	; (c094 <cf_set+0xf4>)
    c02a:	1ac9      	subs	r1, r1, r3
    c02c:	08c9      	lsrs	r1, r1, #3
    c02e:	0189      	lsls	r1, r1, #6
    c030:	f041 0101 	orr.w	r1, r1, #1
    c034:	f010 ff1b 	bl	1ce6e <log_0>
			return -ENOMEM;
    c038:	f06f 040b 	mvn.w	r4, #11
    c03c:	e7c4      	b.n	bfc8 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    c03e:	4626      	mov	r6, r4
    c040:	e7e6      	b.n	c010 <cf_set+0x70>
		cfg->id = id;
    c042:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    c046:	a902      	add	r1, sp, #8
    c048:	f013 ff1a 	bl	1fe80 <bt_addr_le_copy>
	if (len_rd) {
    c04c:	f1b9 0f00 	cmp.w	r9, #0
    c050:	d013      	beq.n	c07a <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    c052:	f105 0108 	add.w	r1, r5, #8
    c056:	2201      	movs	r2, #1
    c058:	4640      	mov	r0, r8
    c05a:	47b8      	blx	r7
		if (len < 0) {
    c05c:	1e05      	subs	r5, r0, #0
    c05e:	dab3      	bge.n	bfc8 <cf_set+0x28>
    c060:	4b09      	ldr	r3, [pc, #36]	; (c088 <cf_set+0xe8>)
    c062:	4a08      	ldr	r2, [pc, #32]	; (c084 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    c064:	480c      	ldr	r0, [pc, #48]	; (c098 <cf_set+0xf8>)
    c066:	1ad2      	subs	r2, r2, r3
    c068:	08d2      	lsrs	r2, r2, #3
    c06a:	0192      	lsls	r2, r2, #6
    c06c:	f042 0201 	orr.w	r2, r2, #1
    c070:	4629      	mov	r1, r5
    c072:	f010 ff09 	bl	1ce88 <log_1>
			return len;
    c076:	462c      	mov	r4, r5
    c078:	e7a6      	b.n	bfc8 <cf_set+0x28>
		clear_cf_cfg(cfg);
    c07a:	4628      	mov	r0, r5
    c07c:	f013 ff98 	bl	1ffb0 <clear_cf_cfg>
    c080:	e7a2      	b.n	bfc8 <cf_set+0x28>
    c082:	bf00      	nop
    c084:	00021b64 	.word	0x00021b64
    c088:	00021aac 	.word	0x00021aac
    c08c:	00023f47 	.word	0x00023f47
    c090:	00025167 	.word	0x00025167
    c094:	000251d1 	.word	0x000251d1
    c098:	00025087 	.word	0x00025087

0000c09c <read_ppcp>:
{
    c09c:	b513      	push	{r0, r1, r4, lr}
    c09e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c0a2:	4c0b      	ldr	r4, [pc, #44]	; (c0d0 <read_ppcp+0x34>)
{
    c0a4:	4610      	mov	r0, r2
	if (offset > value_len) {
    c0a6:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    c0a8:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    c0ac:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    c0b0:	d80b      	bhi.n	c0ca <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    c0b2:	f1c1 0408 	rsb	r4, r1, #8
    c0b6:	429c      	cmp	r4, r3
    c0b8:	bfa8      	it	ge
    c0ba:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    c0bc:	4622      	mov	r2, r4
    c0be:	4469      	add	r1, sp
    c0c0:	f012 fe97 	bl	1edf2 <memcpy>
}
    c0c4:	4620      	mov	r0, r4
    c0c6:	b002      	add	sp, #8
    c0c8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    c0ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    c0ce:	e7f9      	b.n	c0c4 <read_ppcp+0x28>
    c0d0:	00280018 	.word	0x00280018

0000c0d4 <bt_gatt_clear_sc>:
{
    c0d4:	b570      	push	{r4, r5, r6, lr}
    c0d6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    c0d8:	f7ff fd52 	bl	bb80 <find_sc_cfg>
	if (!cfg) {
    c0dc:	4604      	mov	r4, r0
    c0de:	b318      	cbz	r0, c128 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    c0e0:	4605      	mov	r5, r0
    c0e2:	f815 2b01 	ldrb.w	r2, [r5], #1
    c0e6:	b312      	cbz	r2, c12e <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    c0e8:	ae02      	add	r6, sp, #8
    c0ea:	2104      	movs	r1, #4
    c0ec:	4630      	mov	r0, r6
    c0ee:	f010 fab3 	bl	1c658 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    c0f2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    c0f4:	2124      	movs	r1, #36	; 0x24
    c0f6:	4a0f      	ldr	r2, [pc, #60]	; (c134 <bt_gatt_clear_sc+0x60>)
    c0f8:	462b      	mov	r3, r5
    c0fa:	a803      	add	r0, sp, #12
    c0fc:	f7fa fcd8 	bl	6ab0 <bt_settings_encode_key>
		err = settings_delete(key);
    c100:	a803      	add	r0, sp, #12
    c102:	f011 fb4d 	bl	1d7a0 <settings_delete>
		if (err) {
    c106:	4601      	mov	r1, r0
    c108:	b148      	cbz	r0, c11e <bt_gatt_clear_sc+0x4a>
    c10a:	4a0b      	ldr	r2, [pc, #44]	; (c138 <bt_gatt_clear_sc+0x64>)
    c10c:	4b0b      	ldr	r3, [pc, #44]	; (c13c <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    c10e:	480c      	ldr	r0, [pc, #48]	; (c140 <bt_gatt_clear_sc+0x6c>)
    c110:	1ad2      	subs	r2, r2, r3
    c112:	08d2      	lsrs	r2, r2, #3
    c114:	0192      	lsls	r2, r2, #6
    c116:	f042 0201 	orr.w	r2, r2, #1
    c11a:	f010 feb5 	bl	1ce88 <log_1>
	memset(cfg, 0, sizeof(*cfg));
    c11e:	220c      	movs	r2, #12
    c120:	2100      	movs	r1, #0
    c122:	4620      	mov	r0, r4
    c124:	f012 fe90 	bl	1ee48 <memset>
}
    c128:	2000      	movs	r0, #0
    c12a:	b00c      	add	sp, #48	; 0x30
    c12c:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    c12e:	9200      	str	r2, [sp, #0]
    c130:	e7e0      	b.n	c0f4 <bt_gatt_clear_sc+0x20>
    c132:	bf00      	nop
    c134:	000252ec 	.word	0x000252ec
    c138:	00021b64 	.word	0x00021b64
    c13c:	00021aac 	.word	0x00021aac
    c140:	000251f3 	.word	0x000251f3

0000c144 <sc_clear>:
{
    c144:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c146:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    c14a:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c14c:	4631      	mov	r1, r6
    c14e:	7a00      	ldrb	r0, [r0, #8]
    c150:	f013 f8f1 	bl	1f336 <bt_addr_le_is_bonded>
    c154:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    c156:	4631      	mov	r1, r6
    c158:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c15a:	b17d      	cbz	r5, c17c <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    c15c:	f7ff ffba 	bl	c0d4 <bt_gatt_clear_sc>
		if (err) {
    c160:	4601      	mov	r1, r0
    c162:	b1a0      	cbz	r0, c18e <sc_clear+0x4a>
    c164:	4a0a      	ldr	r2, [pc, #40]	; (c190 <sc_clear+0x4c>)
    c166:	4b0b      	ldr	r3, [pc, #44]	; (c194 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    c168:	480b      	ldr	r0, [pc, #44]	; (c198 <sc_clear+0x54>)
    c16a:	1ad2      	subs	r2, r2, r3
    c16c:	08d2      	lsrs	r2, r2, #3
    c16e:	0192      	lsls	r2, r2, #6
}
    c170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    c174:	f042 0201 	orr.w	r2, r2, #1
    c178:	f010 be86 	b.w	1ce88 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    c17c:	f7ff fd00 	bl	bb80 <find_sc_cfg>
		if (cfg) {
    c180:	b128      	cbz	r0, c18e <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    c182:	4629      	mov	r1, r5
    c184:	220c      	movs	r2, #12
}
    c186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    c18a:	f012 be5d 	b.w	1ee48 <memset>
}
    c18e:	bd70      	pop	{r4, r5, r6, pc}
    c190:	00021b64 	.word	0x00021b64
    c194:	00021aac 	.word	0x00021aac
    c198:	00025210 	.word	0x00025210

0000c19c <disconnected_cb>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    c19c:	6882      	ldr	r2, [r0, #8]
    c19e:	4b20      	ldr	r3, [pc, #128]	; (c220 <disconnected_cb+0x84>)
    c1a0:	429a      	cmp	r2, r3
{
    c1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1a6:	4606      	mov	r6, r0
    c1a8:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    c1aa:	d102      	bne.n	c1b2 <disconnected_cb+0x16>
	ccc = attr->user_data;
    c1ac:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    c1ae:	8963      	ldrh	r3, [r4, #10]
    c1b0:	b9c3      	cbnz	r3, c1e4 <disconnected_cb+0x48>
}
    c1b2:	2001      	movs	r0, #1
    c1b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c1b8:	f105 0888 	add.w	r8, r5, #136	; 0x88
    c1bc:	7a28      	ldrb	r0, [r5, #8]
    c1be:	4641      	mov	r1, r8
    c1c0:	f013 f8b9 	bl	1f336 <bt_addr_le_is_bonded>
    c1c4:	b948      	cbnz	r0, c1da <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    c1c6:	4b17      	ldr	r3, [pc, #92]	; (c224 <disconnected_cb+0x88>)
    c1c8:	429c      	cmp	r4, r3
    c1ca:	d102      	bne.n	c1d2 <disconnected_cb+0x36>
					sc_clear(conn);
    c1cc:	4628      	mov	r0, r5
    c1ce:	f7ff ffb9 	bl	c144 <sc_clear>
				clear_ccc_cfg(cfg);
    c1d2:	4620      	mov	r0, r4
    c1d4:	f013 fe57 	bl	1fe86 <clear_ccc_cfg>
	if (!value_used) {
    c1d8:	e019      	b.n	c20e <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    c1da:	4641      	mov	r1, r8
    c1dc:	4638      	mov	r0, r7
    c1de:	f013 fe4f 	bl	1fe80 <bt_addr_le_copy>
	if (!value_used) {
    c1e2:	e014      	b.n	c20e <disconnected_cb+0x72>
		if (!cfg->value) {
    c1e4:	8923      	ldrh	r3, [r4, #8]
    c1e6:	b193      	cbz	r3, c20e <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c1e8:	4627      	mov	r7, r4
    c1ea:	4628      	mov	r0, r5
    c1ec:	f817 1b01 	ldrb.w	r1, [r7], #1
    c1f0:	463a      	mov	r2, r7
    c1f2:	f013 f95e 	bl	1f4b2 <bt_conn_is_peer_addr_le>
    c1f6:	2800      	cmp	r0, #0
    c1f8:	d1de      	bne.n	c1b8 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    c1fa:	7820      	ldrb	r0, [r4, #0]
    c1fc:	4639      	mov	r1, r7
    c1fe:	f7fd fc7f 	bl	9b00 <bt_conn_lookup_addr_le>
			if (tmp) {
    c202:	b120      	cbz	r0, c20e <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    c204:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    c206:	f013 f974 	bl	1f4f2 <bt_conn_unref>
	if (!value_used) {
    c20a:	2d07      	cmp	r5, #7
    c20c:	d0d1      	beq.n	c1b2 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    c20e:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    c210:	2100      	movs	r1, #0
    c212:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    c214:	2b00      	cmp	r3, #0
    c216:	d0cc      	beq.n	c1b2 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    c218:	4630      	mov	r0, r6
    c21a:	4798      	blx	r3
    c21c:	e7c9      	b.n	c1b2 <disconnected_cb+0x16>
    c21e:	bf00      	nop
    c220:	0000ba3d 	.word	0x0000ba3d
    c224:	20000374 	.word	0x20000374

0000c228 <bt_gatt_init>:
{
    c228:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    c22a:	4b1d      	ldr	r3, [pc, #116]	; (c2a0 <bt_gatt_init+0x78>)
    c22c:	f3bf 8f5b 	dmb	ish
    c230:	2201      	movs	r2, #1
    c232:	e853 1f00 	ldrex	r1, [r3]
    c236:	2900      	cmp	r1, #0
    c238:	d103      	bne.n	c242 <bt_gatt_init+0x1a>
    c23a:	e843 2000 	strex	r0, r2, [r3]
    c23e:	2800      	cmp	r0, #0
    c240:	d1f7      	bne.n	c232 <bt_gatt_init+0xa>
    c242:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    c246:	d124      	bne.n	c292 <bt_gatt_init+0x6a>
    c248:	4a16      	ldr	r2, [pc, #88]	; (c2a4 <bt_gatt_init+0x7c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c24a:	4917      	ldr	r1, [pc, #92]	; (c2a8 <bt_gatt_init+0x80>)
    c24c:	8813      	ldrh	r3, [r2, #0]
    c24e:	4c17      	ldr	r4, [pc, #92]	; (c2ac <bt_gatt_init+0x84>)
	if (!atomic_cas(&init, 0, 1)) {
    c250:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c252:	42a1      	cmp	r1, r4
    c254:	d31e      	bcc.n	c294 <bt_gatt_init+0x6c>
    c256:	b100      	cbz	r0, c25a <bt_gatt_init+0x32>
    c258:	8013      	strh	r3, [r2, #0]
	k_delayed_work_init(&db_hash_work, db_hash_process);
    c25a:	4915      	ldr	r1, [pc, #84]	; (c2b0 <bt_gatt_init+0x88>)
    c25c:	4815      	ldr	r0, [pc, #84]	; (c2b4 <bt_gatt_init+0x8c>)
    c25e:	f015 f8eb 	bl	21438 <k_delayed_work_init>
    c262:	2300      	movs	r3, #0
    c264:	4913      	ldr	r1, [pc, #76]	; (c2b4 <bt_gatt_init+0x8c>)
    c266:	4814      	ldr	r0, [pc, #80]	; (c2b8 <bt_gatt_init+0x90>)
    c268:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c26c:	f00f feb2 	bl	1bfd4 <k_delayed_work_submit_to_queue>
		k_delayed_work_init(&gatt_sc.work, sc_process);
    c270:	4912      	ldr	r1, [pc, #72]	; (c2bc <bt_gatt_init+0x94>)
    c272:	4813      	ldr	r0, [pc, #76]	; (c2c0 <bt_gatt_init+0x98>)
    c274:	f015 f8e0 	bl	21438 <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c278:	f3bf 8f5b 	dmb	ish
    c27c:	4b11      	ldr	r3, [pc, #68]	; (c2c4 <bt_gatt_init+0x9c>)
    c27e:	e853 2f00 	ldrex	r2, [r3]
    c282:	f042 0202 	orr.w	r2, r2, #2
    c286:	e843 2100 	strex	r1, r2, [r3]
    c28a:	2900      	cmp	r1, #0
    c28c:	d1f7      	bne.n	c27e <bt_gatt_init+0x56>
    c28e:	f3bf 8f5b 	dmb	ish
}
    c292:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    c294:	6848      	ldr	r0, [r1, #4]
    c296:	4403      	add	r3, r0
    c298:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    c29a:	3108      	adds	r1, #8
    c29c:	2001      	movs	r0, #1
    c29e:	e7d8      	b.n	c252 <bt_gatt_init+0x2a>
    c2a0:	200015e8 	.word	0x200015e8
    c2a4:	20002ac0 	.word	0x20002ac0
    c2a8:	00021a10 	.word	0x00021a10
    c2ac:	00021a48 	.word	0x00021a48
    c2b0:	0002028d 	.word	0x0002028d
    c2b4:	20000e10 	.word	0x20000e10
    c2b8:	200012a8 	.word	0x200012a8
    c2bc:	0000c80d 	.word	0x0000c80d
    c2c0:	20000e58 	.word	0x20000e58
    c2c4:	20000e88 	.word	0x20000e88

0000c2c8 <bt_gatt_attr_value_handle>:
{
    c2c8:	b508      	push	{r3, lr}
	if ((attr != NULL)
    c2ca:	b180      	cbz	r0, c2ee <bt_gatt_attr_value_handle+0x26>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    c2cc:	6841      	ldr	r1, [r0, #4]
    c2ce:	4b09      	ldr	r3, [pc, #36]	; (c2f4 <bt_gatt_attr_value_handle+0x2c>)
    c2d0:	4299      	cmp	r1, r3
    c2d2:	d10c      	bne.n	c2ee <bt_gatt_attr_value_handle+0x26>
		handle = chrc->value_handle;
    c2d4:	68c3      	ldr	r3, [r0, #12]
    c2d6:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    c2d8:	b91b      	cbnz	r3, c2e2 <bt_gatt_attr_value_handle+0x1a>
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    c2da:	8a03      	ldrh	r3, [r0, #16]
    c2dc:	b11b      	cbz	r3, c2e6 <bt_gatt_attr_value_handle+0x1e>
    c2de:	3301      	adds	r3, #1
    c2e0:	b29b      	uxth	r3, r3
}
    c2e2:	4618      	mov	r0, r3
    c2e4:	bd08      	pop	{r3, pc}
			handle = (attr->handle ? : find_static_attr(attr)) + 1U;
    c2e6:	f7ff f9e5 	bl	b6b4 <find_static_attr>
    c2ea:	1c43      	adds	r3, r0, #1
    c2ec:	e7f8      	b.n	c2e0 <bt_gatt_attr_value_handle+0x18>
	uint16_t handle = 0;
    c2ee:	2300      	movs	r3, #0
    c2f0:	e7f7      	b.n	c2e2 <bt_gatt_attr_value_handle+0x1a>
    c2f2:	bf00      	nop
    c2f4:	00020215 	.word	0x00020215

0000c2f8 <bt_gatt_foreach_attr_type>:
{
    c2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2fc:	b089      	sub	sp, #36	; 0x24
    c2fe:	4698      	mov	r8, r3
    c300:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48
    c304:	9101      	str	r1, [sp, #4]
		num_matches = UINT16_MAX;
    c306:	f64f 73ff 	movw	r3, #65535	; 0xffff
    c30a:	2d00      	cmp	r5, #0
    c30c:	bf08      	it	eq
    c30e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    c310:	4b26      	ldr	r3, [pc, #152]	; (c3ac <bt_gatt_foreach_attr_type+0xb4>)
    c312:	881b      	ldrh	r3, [r3, #0]
    c314:	4283      	cmp	r3, r0
{
    c316:	4606      	mov	r6, r0
    c318:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    c31a:	d33c      	bcc.n	c396 <bt_gatt_foreach_attr_type+0x9e>
    c31c:	f8df a094 	ldr.w	sl, [pc, #148]	; c3b4 <bt_gatt_foreach_attr_type+0xbc>
		uint16_t handle = 1;
    c320:	2401      	movs	r4, #1
				memcpy(&attr, &static_svc->attrs[i],
    c322:	f04f 0b14 	mov.w	fp, #20
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c326:	4b22      	ldr	r3, [pc, #136]	; (c3b0 <bt_gatt_foreach_attr_type+0xb8>)
    c328:	f1aa 0208 	sub.w	r2, sl, #8
    c32c:	429a      	cmp	r2, r3
    c32e:	d232      	bcs.n	c396 <bt_gatt_foreach_attr_type+0x9e>
			if (handle + static_svc->attr_count < start_handle) {
    c330:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    c334:	4422      	add	r2, r4
    c336:	42b2      	cmp	r2, r6
    c338:	d234      	bcs.n	c3a4 <bt_gatt_foreach_attr_type+0xac>
				handle += static_svc->attr_count;
    c33a:	b294      	uxth	r4, r2
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    c33c:	f10a 0a08 	add.w	sl, sl, #8
    c340:	e7f1      	b.n	c326 <bt_gatt_foreach_attr_type+0x2e>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c342:	9903      	ldr	r1, [sp, #12]
    c344:	4638      	mov	r0, r7
    c346:	f012 fe47 	bl	1efd8 <bt_uuid_cmp>
    c34a:	b1c0      	cbz	r0, c37e <bt_gatt_foreach_attr_type+0x86>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c34c:	3401      	adds	r4, #1
    c34e:	f109 0901 	add.w	r9, r9, #1
    c352:	b2a4      	uxth	r4, r4
    c354:	f85a 2c04 	ldr.w	r2, [sl, #-4]
    c358:	454a      	cmp	r2, r9
    c35a:	d9ef      	bls.n	c33c <bt_gatt_foreach_attr_type+0x44>
				memcpy(&attr, &static_svc->attrs[i],
    c35c:	f85a 1c08 	ldr.w	r1, [sl, #-8]
    c360:	2214      	movs	r2, #20
    c362:	fb0b 1109 	mla	r1, fp, r9, r1
    c366:	a803      	add	r0, sp, #12
    c368:	f012 fd43 	bl	1edf2 <memcpy>
	if (attr->handle > end_handle) {
    c36c:	9b01      	ldr	r3, [sp, #4]
				attr.handle = handle;
    c36e:	f8ad 401c 	strh.w	r4, [sp, #28]
	if (attr->handle > end_handle) {
    c372:	429c      	cmp	r4, r3
    c374:	d80f      	bhi.n	c396 <bt_gatt_foreach_attr_type+0x9e>
	if (attr->handle < start_handle) {
    c376:	42b4      	cmp	r4, r6
    c378:	d3e8      	bcc.n	c34c <bt_gatt_foreach_attr_type+0x54>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    c37a:	2f00      	cmp	r7, #0
    c37c:	d1e1      	bne.n	c342 <bt_gatt_foreach_attr_type+0x4a>
	if (attr_data && attr_data != attr->user_data) {
    c37e:	f1b8 0f00 	cmp.w	r8, #0
    c382:	d10b      	bne.n	c39c <bt_gatt_foreach_attr_type+0xa4>
	*num_matches -= 1;
    c384:	3d01      	subs	r5, #1
    c386:	b2ad      	uxth	r5, r5
	result = func(attr, user_data);
    c388:	9914      	ldr	r1, [sp, #80]	; 0x50
    c38a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    c38c:	a803      	add	r0, sp, #12
    c38e:	4798      	blx	r3
	if (!*num_matches) {
    c390:	b10d      	cbz	r5, c396 <bt_gatt_foreach_attr_type+0x9e>
				if (gatt_foreach_iter(&attr, start_handle,
    c392:	2800      	cmp	r0, #0
    c394:	d1da      	bne.n	c34c <bt_gatt_foreach_attr_type+0x54>
}
    c396:	b009      	add	sp, #36	; 0x24
    c398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    c39c:	9a06      	ldr	r2, [sp, #24]
    c39e:	4590      	cmp	r8, r2
    c3a0:	d1d4      	bne.n	c34c <bt_gatt_foreach_attr_type+0x54>
    c3a2:	e7ef      	b.n	c384 <bt_gatt_foreach_attr_type+0x8c>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    c3a4:	f04f 0900 	mov.w	r9, #0
    c3a8:	e7d4      	b.n	c354 <bt_gatt_foreach_attr_type+0x5c>
    c3aa:	bf00      	nop
    c3ac:	20002ac0 	.word	0x20002ac0
    c3b0:	00021a48 	.word	0x00021a48
    c3b4:	00021a18 	.word	0x00021a18

0000c3b8 <db_hash_gen>:
{
    c3b8:	b530      	push	{r4, r5, lr}
    c3ba:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    c3bc:	2300      	movs	r3, #0
{
    c3be:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c3c0:	aa1c      	add	r2, sp, #112	; 0x70
    c3c2:	4669      	mov	r1, sp
    c3c4:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    c3c6:	e9cd 3300 	strd	r3, r3, [sp]
    c3ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    c3ce:	f012 fb70 	bl	1eab2 <tc_cmac_setup>
    c3d2:	b958      	cbnz	r0, c3ec <db_hash_gen+0x34>
    c3d4:	4918      	ldr	r1, [pc, #96]	; (c438 <db_hash_gen+0x80>)
    c3d6:	4b19      	ldr	r3, [pc, #100]	; (c43c <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    c3d8:	4819      	ldr	r0, [pc, #100]	; (c440 <db_hash_gen+0x88>)
    c3da:	1ac9      	subs	r1, r1, r3
    c3dc:	08c9      	lsrs	r1, r1, #3
    c3de:	0189      	lsls	r1, r1, #6
    c3e0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    c3e4:	f010 fd43 	bl	1ce6e <log_0>
}
    c3e8:	b049      	add	sp, #292	; 0x124
    c3ea:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    c3ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c3f0:	2001      	movs	r0, #1
    c3f2:	4a14      	ldr	r2, [pc, #80]	; (c444 <db_hash_gen+0x8c>)
    c3f4:	ab04      	add	r3, sp, #16
    c3f6:	f013 ff3e 	bl	20276 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c3fa:	4813      	ldr	r0, [pc, #76]	; (c448 <db_hash_gen+0x90>)
    c3fc:	a904      	add	r1, sp, #16
    c3fe:	f012 fbef 	bl	1ebe0 <tc_cmac_final>
    c402:	b940      	cbnz	r0, c416 <db_hash_gen+0x5e>
    c404:	490c      	ldr	r1, [pc, #48]	; (c438 <db_hash_gen+0x80>)
    c406:	4b0d      	ldr	r3, [pc, #52]	; (c43c <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    c408:	4810      	ldr	r0, [pc, #64]	; (c44c <db_hash_gen+0x94>)
    c40a:	1ac9      	subs	r1, r1, r3
    c40c:	08c9      	lsrs	r1, r1, #3
    c40e:	0189      	lsls	r1, r1, #6
    c410:	f041 0101 	orr.w	r1, r1, #1
    c414:	e7e6      	b.n	c3e4 <db_hash_gen+0x2c>
    c416:	4b0c      	ldr	r3, [pc, #48]	; (c448 <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    c418:	2208      	movs	r2, #8
    c41a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    c41e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    c420:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    c424:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    c428:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    c42a:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    c42c:	d1f7      	bne.n	c41e <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    c42e:	2c00      	cmp	r4, #0
    c430:	d0da      	beq.n	c3e8 <db_hash_gen+0x30>
		db_hash_store();
    c432:	f7ff f963 	bl	b6fc <db_hash_store>
    c436:	e7d7      	b.n	c3e8 <db_hash_gen+0x30>
    c438:	00021b64 	.word	0x00021b64
    c43c:	00021aac 	.word	0x00021aac
    c440:	00025226 	.word	0x00025226
    c444:	0001fee3 	.word	0x0001fee3
    c448:	2000305a 	.word	0x2000305a
    c44c:	0002523f 	.word	0x0002523f

0000c450 <db_hash_commit>:
{
    c450:	b508      	push	{r3, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    c452:	4826      	ldr	r0, [pc, #152]	; (c4ec <db_hash_commit+0x9c>)
    c454:	f014 fff8 	bl	21448 <k_delayed_work_cancel>
	if (!err) {
    c458:	b908      	cbnz	r0, c45e <db_hash_commit+0xe>
		db_hash_gen(false);
    c45a:	f7ff ffad 	bl	c3b8 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    c45e:	4924      	ldr	r1, [pc, #144]	; (c4f0 <db_hash_commit+0xa0>)
    c460:	4824      	ldr	r0, [pc, #144]	; (c4f4 <db_hash_commit+0xa4>)
    c462:	2210      	movs	r2, #16
    c464:	f012 fcb5 	bl	1edd2 <memcmp>
    c468:	b948      	cbnz	r0, c47e <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    c46a:	4823      	ldr	r0, [pc, #140]	; (c4f8 <db_hash_commit+0xa8>)
    c46c:	f014 ffec 	bl	21448 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c470:	4822      	ldr	r0, [pc, #136]	; (c4fc <db_hash_commit+0xac>)
    c472:	f06f 0101 	mvn.w	r1, #1
    c476:	f013 fd8c 	bl	1ff92 <atomic_and>
}
    c47a:	2000      	movs	r0, #0
    c47c:	bd08      	pop	{r3, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c47e:	4b20      	ldr	r3, [pc, #128]	; (c500 <db_hash_commit+0xb0>)
    c480:	f3bf 8f5b 	dmb	ish
    c484:	f103 0248 	add.w	r2, r3, #72	; 0x48
    c488:	e852 1f00 	ldrex	r1, [r2]
    c48c:	f041 0001 	orr.w	r0, r1, #1
    c490:	e842 0c00 	strex	ip, r0, [r2]
    c494:	f1bc 0f00 	cmp.w	ip, #0
    c498:	d1f6      	bne.n	c488 <db_hash_commit+0x38>
    c49a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    c49e:	07ca      	lsls	r2, r1, #31
    c4a0:	d412      	bmi.n	c4c8 <db_hash_commit+0x78>
		gatt_sc.start = start;
    c4a2:	4a18      	ldr	r2, [pc, #96]	; (c504 <db_hash_commit+0xb4>)
    c4a4:	615a      	str	r2, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4a6:	f3bf 8f5b 	dmb	ish
    c4aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    c4ac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    c4b0:	079b      	lsls	r3, r3, #30
    c4b2:	d406      	bmi.n	c4c2 <db_hash_commit+0x72>
    c4b4:	4910      	ldr	r1, [pc, #64]	; (c4f8 <db_hash_commit+0xa8>)
    c4b6:	4814      	ldr	r0, [pc, #80]	; (c508 <db_hash_commit+0xb8>)
    c4b8:	f44f 72a4 	mov.w	r2, #328	; 0x148
    c4bc:	2300      	movs	r3, #0
    c4be:	f00f fd89 	bl	1bfd4 <k_delayed_work_submit_to_queue>
	db_hash_store();
    c4c2:	f7ff f91b 	bl	b6fc <db_hash_store>
	return 0;
    c4c6:	e7d8      	b.n	c47a <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    c4c8:	8a9a      	ldrh	r2, [r3, #20]
    c4ca:	8ad9      	ldrh	r1, [r3, #22]
    c4cc:	2a01      	cmp	r2, #1
    c4ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c4d2:	d805      	bhi.n	c4e0 <db_hash_commit+0x90>
    c4d4:	4291      	cmp	r1, r2
    c4d6:	d0f4      	beq.n	c4c2 <db_hash_commit+0x72>
		*end = new_end;
    c4d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c4dc:	82da      	strh	r2, [r3, #22]
    c4de:	e7e2      	b.n	c4a6 <db_hash_commit+0x56>
		*start = new_start;
    c4e0:	2001      	movs	r0, #1
	if (*end < new_end) {
    c4e2:	4291      	cmp	r1, r2
		*start = new_start;
    c4e4:	8298      	strh	r0, [r3, #20]
	if (*end < new_end) {
    c4e6:	d0de      	beq.n	c4a6 <db_hash_commit+0x56>
    c4e8:	e7f6      	b.n	c4d8 <db_hash_commit+0x88>
    c4ea:	bf00      	nop
    c4ec:	20000e10 	.word	0x20000e10
    c4f0:	2000305a 	.word	0x2000305a
    c4f4:	2000306a 	.word	0x2000306a
    c4f8:	20000e58 	.word	0x20000e58
    c4fc:	20000e88 	.word	0x20000e88
    c500:	20000e40 	.word	0x20000e40
    c504:	ffff0001 	.word	0xffff0001
    c508:	200012a8 	.word	0x200012a8

0000c50c <ccc_set_direct>:
{
    c50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c510:	b0b9      	sub	sp, #228	; 0xe4
    c512:	4688      	mov	r8, r1
    c514:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    c516:	4939      	ldr	r1, [pc, #228]	; (c5fc <ccc_set_direct+0xf0>)
    c518:	9840      	ldr	r0, [sp, #256]	; 0x100
    c51a:	466a      	mov	r2, sp
{
    c51c:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    c51e:	f011 f943 	bl	1d7a8 <settings_name_steq>
    c522:	b978      	cbnz	r0, c544 <ccc_set_direct+0x38>
    c524:	4b36      	ldr	r3, [pc, #216]	; (c600 <ccc_set_direct+0xf4>)
    c526:	4937      	ldr	r1, [pc, #220]	; (c604 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    c528:	4837      	ldr	r0, [pc, #220]	; (c608 <ccc_set_direct+0xfc>)
    c52a:	1ac9      	subs	r1, r1, r3
    c52c:	08c9      	lsrs	r1, r1, #3
    c52e:	0189      	lsls	r1, r1, #6
    c530:	f041 0101 	orr.w	r1, r1, #1
    c534:	f010 fc9b 	bl	1ce6e <log_0>
			return -EINVAL;
    c538:	f06f 0515 	mvn.w	r5, #21
}
    c53c:	4628      	mov	r0, r5
    c53e:	b039      	add	sp, #228	; 0xe4
    c540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    c544:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    c546:	a901      	add	r1, sp, #4
    c548:	4630      	mov	r0, r6
    c54a:	f011 f950 	bl	1d7ee <settings_name_next>
		if (!name) {
    c54e:	b96e      	cbnz	r6, c56c <ccc_set_direct+0x60>
    c550:	492c      	ldr	r1, [pc, #176]	; (c604 <ccc_set_direct+0xf8>)
    c552:	4b2b      	ldr	r3, [pc, #172]	; (c600 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    c554:	482d      	ldr	r0, [pc, #180]	; (c60c <ccc_set_direct+0x100>)
    c556:	1ac9      	subs	r1, r1, r3
    c558:	08c9      	lsrs	r1, r1, #3
    c55a:	0189      	lsls	r1, r1, #6
    c55c:	f041 0101 	orr.w	r1, r1, #1
    c560:	f010 fc85 	bl	1ce6e <log_0>
			return -EINVAL;
    c564:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    c568:	4625      	mov	r5, r4
    c56a:	e7e7      	b.n	c53c <ccc_set_direct+0x30>
		} else if (!next) {
    c56c:	9801      	ldr	r0, [sp, #4]
    c56e:	b9c8      	cbnz	r0, c5a4 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    c570:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    c574:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    c578:	4649      	mov	r1, r9
    c57a:	4630      	mov	r0, r6
    c57c:	f012 fd08 	bl	1ef90 <bt_settings_decode_key>
		if (err) {
    c580:	4605      	mov	r5, r0
    c582:	b1a0      	cbz	r0, c5ae <ccc_set_direct+0xa2>
    c584:	4a1e      	ldr	r2, [pc, #120]	; (c600 <ccc_set_direct+0xf4>)
    c586:	4c1f      	ldr	r4, [pc, #124]	; (c604 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    c588:	4630      	mov	r0, r6
    c58a:	1aa4      	subs	r4, r4, r2
    c58c:	08e4      	lsrs	r4, r4, #3
    c58e:	f7f7 fa5b 	bl	3a48 <log_strdup>
    c592:	01a4      	lsls	r4, r4, #6
    c594:	f044 0401 	orr.w	r4, r4, #1
    c598:	4601      	mov	r1, r0
    c59a:	4622      	mov	r2, r4
    c59c:	481c      	ldr	r0, [pc, #112]	; (c610 <ccc_set_direct+0x104>)
    c59e:	f010 fc73 	bl	1ce88 <log_1>
    c5a2:	e7df      	b.n	c564 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    c5a4:	220a      	movs	r2, #10
    c5a6:	2100      	movs	r1, #0
    c5a8:	f012 fb5e 	bl	1ec68 <strtol>
    c5ac:	e7e0      	b.n	c570 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    c5ae:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    c5b2:	f1b8 0f00 	cmp.w	r8, #0
    c5b6:	d01d      	beq.n	c5f4 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    c5b8:	ae08      	add	r6, sp, #32
    c5ba:	22c0      	movs	r2, #192	; 0xc0
    c5bc:	4631      	mov	r1, r6
    c5be:	4638      	mov	r0, r7
    c5c0:	47a0      	blx	r4
			if (len < 0) {
    c5c2:	1e04      	subs	r4, r0, #0
    c5c4:	da0b      	bge.n	c5de <ccc_set_direct+0xd2>
    c5c6:	4b0e      	ldr	r3, [pc, #56]	; (c600 <ccc_set_direct+0xf4>)
    c5c8:	4a0e      	ldr	r2, [pc, #56]	; (c604 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    c5ca:	4812      	ldr	r0, [pc, #72]	; (c614 <ccc_set_direct+0x108>)
    c5cc:	1ad2      	subs	r2, r2, r3
    c5ce:	08d2      	lsrs	r2, r2, #3
    c5d0:	0192      	lsls	r2, r2, #6
    c5d2:	f042 0201 	orr.w	r2, r2, #1
    c5d6:	4621      	mov	r1, r4
    c5d8:	f010 fc56 	bl	1ce88 <log_1>
				return len;
    c5dc:	e7c4      	b.n	c568 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    c5de:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    c5e0:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    c5e2:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    c5e4:	4a0c      	ldr	r2, [pc, #48]	; (c618 <ccc_set_direct+0x10c>)
    c5e6:	ab04      	add	r3, sp, #16
    c5e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c5ec:	2001      	movs	r0, #1
    c5ee:	f013 fe42 	bl	20276 <bt_gatt_foreach_attr>
	return 0;
    c5f2:	e7a3      	b.n	c53c <ccc_set_direct+0x30>
			load.count = 0;
    c5f4:	e9cd 0006 	strd	r0, r0, [sp, #24]
    c5f8:	e7f4      	b.n	c5e4 <ccc_set_direct+0xd8>
    c5fa:	bf00      	nop
    c5fc:	00025258 	.word	0x00025258
    c600:	00021aac 	.word	0x00021aac
    c604:	00021b64 	.word	0x00021b64
    c608:	0002525f 	.word	0x0002525f
    c60c:	00023f47 	.word	0x00023f47
    c610:	00025167 	.word	0x00025167
    c614:	00025087 	.word	0x00025087
    c618:	0000b94d 	.word	0x0000b94d

0000c61c <bt_gatt_notify_cb>:
{
    c61c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c61e:	4b3a      	ldr	r3, [pc, #232]	; (c708 <bt_gatt_notify_cb+0xec>)
    c620:	f3bf 8f5b 	dmb	ish
    c624:	681b      	ldr	r3, [r3, #0]
    c626:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c62a:	079a      	lsls	r2, r3, #30
{
    c62c:	b08b      	sub	sp, #44	; 0x2c
    c62e:	4605      	mov	r5, r0
    c630:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c632:	d562      	bpl.n	c6fa <bt_gatt_notify_cb+0xde>
	attr = params->attr;
    c634:	6848      	ldr	r0, [r1, #4]
    c636:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c638:	b115      	cbz	r5, c640 <bt_gatt_notify_cb+0x24>
    c63a:	7b6b      	ldrb	r3, [r5, #13]
    c63c:	2b07      	cmp	r3, #7
    c63e:	d15f      	bne.n	c700 <bt_gatt_notify_cb+0xe4>
	handle = attr->handle ? : find_static_attr(attr);
    c640:	8a04      	ldrh	r4, [r0, #16]
    c642:	b93c      	cbnz	r4, c654 <bt_gatt_notify_cb+0x38>
    c644:	f7ff f836 	bl	b6b4 <find_static_attr>
	if (!handle) {
    c648:	4604      	mov	r4, r0
    c64a:	b918      	cbnz	r0, c654 <bt_gatt_notify_cb+0x38>
		return -ENOENT;
    c64c:	f06f 0001 	mvn.w	r0, #1
}
    c650:	b00b      	add	sp, #44	; 0x2c
    c652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    c654:	6832      	ldr	r2, [r6, #0]
    c656:	b1b2      	cbz	r2, c686 <bt_gatt_notify_cb+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c658:	a905      	add	r1, sp, #20
    c65a:	9102      	str	r1, [sp, #8]
    c65c:	492b      	ldr	r1, [pc, #172]	; (c70c <bt_gatt_notify_cb+0xf0>)
    c65e:	9101      	str	r1, [sp, #4]
    c660:	2101      	movs	r1, #1
		attr = NULL;
    c662:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c664:	9100      	str	r1, [sp, #0]
    c666:	4620      	mov	r0, r4
    c668:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    c66c:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c66e:	f7ff fe43 	bl	c2f8 <bt_gatt_foreach_attr_type>
		if (!attr) {
    c672:	9805      	ldr	r0, [sp, #20]
    c674:	2800      	cmp	r0, #0
    c676:	d0e9      	beq.n	c64c <bt_gatt_notify_cb+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    c678:	8a04      	ldrh	r4, [r0, #16]
    c67a:	b924      	cbnz	r4, c686 <bt_gatt_notify_cb+0x6a>
    c67c:	f7ff f81a 	bl	b6b4 <find_static_attr>
		if (!handle) {
    c680:	4604      	mov	r4, r0
    c682:	2800      	cmp	r0, #0
    c684:	d0e2      	beq.n	c64c <bt_gatt_notify_cb+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    c686:	9b05      	ldr	r3, [sp, #20]
    c688:	af07      	add	r7, sp, #28
    c68a:	6818      	ldr	r0, [r3, #0]
    c68c:	2300      	movs	r3, #0
    c68e:	f88d 301c 	strb.w	r3, [sp, #28]
    c692:	4639      	mov	r1, r7
    c694:	f642 0303 	movw	r3, #10243	; 0x2803
    c698:	f8ad 301e 	strh.w	r3, [sp, #30]
    c69c:	f012 fc9c 	bl	1efd8 <bt_uuid_cmp>
    c6a0:	b950      	cbnz	r0, c6b8 <bt_gatt_notify_cb+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    c6a2:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    c6a4:	68c3      	ldr	r3, [r0, #12]
    c6a6:	799b      	ldrb	r3, [r3, #6]
    c6a8:	06db      	lsls	r3, r3, #27
    c6aa:	d402      	bmi.n	c6b2 <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    c6ac:	f06f 0015 	mvn.w	r0, #21
    c6b0:	e7ce      	b.n	c650 <bt_gatt_notify_cb+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    c6b2:	f7ff fe09 	bl	c2c8 <bt_gatt_attr_value_handle>
    c6b6:	4604      	mov	r4, r0
	if (conn) {
    c6b8:	b12d      	cbz	r5, c6c6 <bt_gatt_notify_cb+0xaa>
		return gatt_notify(conn, handle, params);
    c6ba:	4632      	mov	r2, r6
    c6bc:	4621      	mov	r1, r4
    c6be:	4628      	mov	r0, r5
    c6c0:	f7ff f88e 	bl	b7e0 <gatt_notify>
    c6c4:	e7c4      	b.n	c650 <bt_gatt_notify_cb+0x34>
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6c6:	f642 1202 	movw	r2, #10498	; 0x2902
	data.err = -ENOTCONN;
    c6ca:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6ce:	f8ad 201a 	strh.w	r2, [sp, #26]
    c6d2:	4a0f      	ldr	r2, [pc, #60]	; (c710 <bt_gatt_notify_cb+0xf4>)
	data.err = -ENOTCONN;
    c6d4:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    c6d6:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6d8:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    c6dc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6e0:	4620      	mov	r0, r4
    c6e2:	9702      	str	r7, [sp, #8]
    c6e4:	462b      	mov	r3, r5
    c6e6:	aa06      	add	r2, sp, #24
    c6e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    c6ec:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c6ee:	f88d 5018 	strb.w	r5, [sp, #24]
    c6f2:	f7ff fe01 	bl	c2f8 <bt_gatt_foreach_attr_type>
	return data.err;
    c6f6:	9807      	ldr	r0, [sp, #28]
    c6f8:	e7aa      	b.n	c650 <bt_gatt_notify_cb+0x34>
		return -EAGAIN;
    c6fa:	f06f 000a 	mvn.w	r0, #10
    c6fe:	e7a7      	b.n	c650 <bt_gatt_notify_cb+0x34>
		return -ENOTCONN;
    c700:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c704:	e7a4      	b.n	c650 <bt_gatt_notify_cb+0x34>
    c706:	bf00      	nop
    c708:	20000098 	.word	0x20000098
    c70c:	0001ffeb 	.word	0x0001ffeb
    c710:	0000bc4d 	.word	0x0000bc4d

0000c714 <bt_gatt_indicate>:
{
    c714:	b5f0      	push	{r4, r5, r6, r7, lr}
    c716:	4b3a      	ldr	r3, [pc, #232]	; (c800 <bt_gatt_indicate+0xec>)
    c718:	f3bf 8f5b 	dmb	ish
    c71c:	681b      	ldr	r3, [r3, #0]
    c71e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c722:	079a      	lsls	r2, r3, #30
{
    c724:	b08b      	sub	sp, #44	; 0x2c
    c726:	4605      	mov	r5, r0
    c728:	460e      	mov	r6, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    c72a:	d563      	bpl.n	c7f4 <bt_gatt_indicate+0xe0>
	attr = params->attr;
    c72c:	6848      	ldr	r0, [r1, #4]
    c72e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    c730:	b115      	cbz	r5, c738 <bt_gatt_indicate+0x24>
    c732:	7b6b      	ldrb	r3, [r5, #13]
    c734:	2b07      	cmp	r3, #7
    c736:	d160      	bne.n	c7fa <bt_gatt_indicate+0xe6>
	handle = attr->handle ? : find_static_attr(attr);
    c738:	8a04      	ldrh	r4, [r0, #16]
    c73a:	b93c      	cbnz	r4, c74c <bt_gatt_indicate+0x38>
    c73c:	f7fe ffba 	bl	b6b4 <find_static_attr>
	if (!handle) {
    c740:	4604      	mov	r4, r0
    c742:	b918      	cbnz	r0, c74c <bt_gatt_indicate+0x38>
		return -ENOENT;
    c744:	f06f 0001 	mvn.w	r0, #1
}
    c748:	b00b      	add	sp, #44	; 0x2c
    c74a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (params->uuid) {
    c74c:	6832      	ldr	r2, [r6, #0]
    c74e:	b1b2      	cbz	r2, c77e <bt_gatt_indicate+0x6a>
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c750:	a905      	add	r1, sp, #20
    c752:	9102      	str	r1, [sp, #8]
    c754:	492b      	ldr	r1, [pc, #172]	; (c804 <bt_gatt_indicate+0xf0>)
    c756:	9101      	str	r1, [sp, #4]
    c758:	2101      	movs	r1, #1
		attr = NULL;
    c75a:	2300      	movs	r3, #0
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c75c:	9100      	str	r1, [sp, #0]
    c75e:	4620      	mov	r0, r4
    c760:	f64f 71ff 	movw	r1, #65535	; 0xffff
		attr = NULL;
    c764:	9305      	str	r3, [sp, #20]
		bt_gatt_foreach_attr_type(handle, 0xffff, params->uuid,
    c766:	f7ff fdc7 	bl	c2f8 <bt_gatt_foreach_attr_type>
		if (!attr) {
    c76a:	9805      	ldr	r0, [sp, #20]
    c76c:	2800      	cmp	r0, #0
    c76e:	d0e9      	beq.n	c744 <bt_gatt_indicate+0x30>
		handle = attr->handle ? : find_static_attr(attr);
    c770:	8a04      	ldrh	r4, [r0, #16]
    c772:	b924      	cbnz	r4, c77e <bt_gatt_indicate+0x6a>
    c774:	f7fe ff9e 	bl	b6b4 <find_static_attr>
		if (!handle) {
    c778:	4604      	mov	r4, r0
    c77a:	2800      	cmp	r0, #0
    c77c:	d0e2      	beq.n	c744 <bt_gatt_indicate+0x30>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    c77e:	9b05      	ldr	r3, [sp, #20]
    c780:	af07      	add	r7, sp, #28
    c782:	6818      	ldr	r0, [r3, #0]
    c784:	2300      	movs	r3, #0
    c786:	f88d 301c 	strb.w	r3, [sp, #28]
    c78a:	4639      	mov	r1, r7
    c78c:	f642 0303 	movw	r3, #10243	; 0x2803
    c790:	f8ad 301e 	strh.w	r3, [sp, #30]
    c794:	f012 fc20 	bl	1efd8 <bt_uuid_cmp>
    c798:	b950      	cbnz	r0, c7b0 <bt_gatt_indicate+0x9c>
		struct bt_gatt_chrc *chrc = attr->user_data;
    c79a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    c79c:	68c3      	ldr	r3, [r0, #12]
    c79e:	799b      	ldrb	r3, [r3, #6]
    c7a0:	069b      	lsls	r3, r3, #26
    c7a2:	d402      	bmi.n	c7aa <bt_gatt_indicate+0x96>
			return -EINVAL;
    c7a4:	f06f 0015 	mvn.w	r0, #21
    c7a8:	e7ce      	b.n	c748 <bt_gatt_indicate+0x34>
		handle = bt_gatt_attr_value_handle(attr);
    c7aa:	f7ff fd8d 	bl	c2c8 <bt_gatt_attr_value_handle>
    c7ae:	4604      	mov	r4, r0
	if (conn) {
    c7b0:	b12d      	cbz	r5, c7be <bt_gatt_indicate+0xaa>
		return gatt_indicate(conn, handle, params);
    c7b2:	4632      	mov	r2, r6
    c7b4:	4621      	mov	r1, r4
    c7b6:	4628      	mov	r0, r5
    c7b8:	f7ff f888 	bl	b8cc <gatt_indicate>
    c7bc:	e7c4      	b.n	c748 <bt_gatt_indicate+0x34>
	data.err = -ENOTCONN;
    c7be:	f06f 0338 	mvn.w	r3, #56	; 0x38
    c7c2:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    c7c4:	2302      	movs	r3, #2
    c7c6:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c7ca:	f642 1302 	movw	r3, #10498	; 0x2902
    c7ce:	f8ad 301a 	strh.w	r3, [sp, #26]
    c7d2:	4b0d      	ldr	r3, [pc, #52]	; (c808 <bt_gatt_indicate+0xf4>)
    c7d4:	9301      	str	r3, [sp, #4]
    c7d6:	2301      	movs	r3, #1
    c7d8:	9300      	str	r3, [sp, #0]
    c7da:	4620      	mov	r0, r4
    c7dc:	9702      	str	r7, [sp, #8]
    c7de:	462b      	mov	r3, r5
    c7e0:	aa06      	add	r2, sp, #24
    c7e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    c7e6:	9609      	str	r6, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(handle, 0xffff, BT_UUID_GATT_CCC, NULL, 1,
    c7e8:	f88d 5018 	strb.w	r5, [sp, #24]
    c7ec:	f7ff fd84 	bl	c2f8 <bt_gatt_foreach_attr_type>
	return data.err;
    c7f0:	9807      	ldr	r0, [sp, #28]
    c7f2:	e7a9      	b.n	c748 <bt_gatt_indicate+0x34>
		return -EAGAIN;
    c7f4:	f06f 000a 	mvn.w	r0, #10
    c7f8:	e7a6      	b.n	c748 <bt_gatt_indicate+0x34>
		return -ENOTCONN;
    c7fa:	f06f 0038 	mvn.w	r0, #56	; 0x38
    c7fe:	e7a3      	b.n	c748 <bt_gatt_indicate+0x34>
    c800:	20000098 	.word	0x20000098
    c804:	0001ffeb 	.word	0x0001ffeb
    c808:	0000bc4d 	.word	0x0000bc4d

0000c80c <sc_process>:
{
    c80c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    c80e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    c812:	4604      	mov	r4, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    c814:	f850 3c04 	ldr.w	r3, [r0, #-4]
    c818:	9301      	str	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    c81a:	f1a0 0618 	sub.w	r6, r0, #24
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    c81e:	f06f 0101 	mvn.w	r1, #1
    c822:	4628      	mov	r0, r5
    c824:	f013 fbb5 	bl	1ff92 <atomic_and>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    c828:	4b0d      	ldr	r3, [pc, #52]	; (c860 <sc_process+0x54>)
    c82a:	f844 3c14 	str.w	r3, [r4, #-20]
	sc->params.func = sc_indicate_rsp;
    c82e:	4b0d      	ldr	r3, [pc, #52]	; (c864 <sc_process+0x58>)
    c830:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.data = &sc_range[0];
    c834:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    c836:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    c838:	f844 3c0c 	str.w	r3, [r4, #-12]
	sc->params.len = sizeof(sc_range);
    c83c:	2304      	movs	r3, #4
	sc->start = 0U;
    c83e:	f824 0c04 	strh.w	r0, [r4, #-4]
	sc->end = 0U;
    c842:	f824 0c02 	strh.w	r0, [r4, #-2]
	sc->params.len = sizeof(sc_range);
    c846:	f824 3c08 	strh.w	r3, [r4, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    c84a:	4631      	mov	r1, r6
    c84c:	f7ff ff62 	bl	c714 <bt_gatt_indicate>
    c850:	b918      	cbnz	r0, c85a <sc_process+0x4e>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    c852:	2101      	movs	r1, #1
    c854:	4628      	mov	r0, r5
    c856:	f013 fbf4 	bl	20042 <atomic_set_bit>
}
    c85a:	b002      	add	sp, #8
    c85c:	bd70      	pop	{r4, r5, r6, pc}
    c85e:	bf00      	nop
    c860:	000224a4 	.word	0x000224a4
    c864:	0000bf4d 	.word	0x0000bf4d

0000c868 <update_ccc>:
	if (attr->write != bt_gatt_attr_write_ccc) {
    c868:	6882      	ldr	r2, [r0, #8]
    c86a:	4b3f      	ldr	r3, [pc, #252]	; (c968 <update_ccc+0x100>)
    c86c:	429a      	cmp	r2, r3
{
    c86e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = data->conn;
    c872:	680d      	ldr	r5, [r1, #0]
{
    c874:	4604      	mov	r4, r0
    c876:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    c878:	d11c      	bne.n	c8b4 <update_ccc+0x4c>
	ccc = attr->user_data;
    c87a:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    c87c:	893b      	ldrh	r3, [r7, #8]
    c87e:	b1cb      	cbz	r3, c8b4 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    c880:	463a      	mov	r2, r7
    c882:	4628      	mov	r0, r5
    c884:	f812 1b01 	ldrb.w	r1, [r2], #1
    c888:	f012 fe13 	bl	1f4b2 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    c88c:	b190      	cbz	r0, c8b4 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    c88e:	222a      	movs	r2, #42	; 0x2a
    c890:	4621      	mov	r1, r4
    c892:	4628      	mov	r0, r5
    c894:	f013 fd18 	bl	202c8 <bt_gatt_check_perm>
		if (err) {
    c898:	b308      	cbz	r0, c8de <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    c89a:	2803      	cmp	r0, #3
    c89c:	d10e      	bne.n	c8bc <update_ccc+0x54>
    c89e:	4a33      	ldr	r2, [pc, #204]	; (c96c <update_ccc+0x104>)
    c8a0:	4b33      	ldr	r3, [pc, #204]	; (c970 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
    c8a2:	4834      	ldr	r0, [pc, #208]	; (c974 <update_ccc+0x10c>)
    c8a4:	1ad2      	subs	r2, r2, r3
    c8a6:	08d2      	lsrs	r2, r2, #3
    c8a8:	0192      	lsls	r2, r2, #6
    c8aa:	f042 0202 	orr.w	r2, r2, #2
    c8ae:	4621      	mov	r1, r4
    c8b0:	f010 faea 	bl	1ce88 <log_1>
}
    c8b4:	2001      	movs	r0, #1
    c8b6:	b002      	add	sp, #8
    c8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    c8bc:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    c8be:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    c8c0:	bf14      	ite	ne
    c8c2:	f04f 0802 	movne.w	r8, #2
    c8c6:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    c8ca:	f012 fdf0 	bl	1f4ae <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    c8ce:	4580      	cmp	r8, r0
    c8d0:	d905      	bls.n	c8de <update_ccc+0x76>
				if (data->sec < sec) {
    c8d2:	7933      	ldrb	r3, [r6, #4]
    c8d4:	4543      	cmp	r3, r8
    c8d6:	d2ed      	bcs.n	c8b4 <update_ccc+0x4c>
					data->sec = sec;
    c8d8:	f886 8004 	strb.w	r8, [r6, #4]
    c8dc:	e7ea      	b.n	c8b4 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
    c8de:	4639      	mov	r1, r7
    c8e0:	4620      	mov	r0, r4
    c8e2:	f013 fabb 	bl	1fe5c <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    c8e6:	4b24      	ldr	r3, [pc, #144]	; (c978 <update_ccc+0x110>)
    c8e8:	429f      	cmp	r7, r3
    c8ea:	d1e3      	bne.n	c8b4 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    c8ec:	7a28      	ldrb	r0, [r5, #8]
    c8ee:	f105 0188 	add.w	r1, r5, #136	; 0x88
    c8f2:	f7ff f945 	bl	bb80 <find_sc_cfg>
	if (!cfg) {
    c8f6:	4604      	mov	r4, r0
    c8f8:	2800      	cmp	r0, #0
    c8fa:	d0db      	beq.n	c8b4 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    c8fc:	8902      	ldrh	r2, [r0, #8]
    c8fe:	8943      	ldrh	r3, [r0, #10]
    c900:	ea52 0103 	orrs.w	r1, r2, r3
    c904:	d0d6      	beq.n	c8b4 <update_ccc+0x4c>
	index = bt_conn_index(conn);
    c906:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    c908:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    c90c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    c910:	f7fd fbda 	bl	a0c8 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    c914:	4919      	ldr	r1, [pc, #100]	; (c97c <update_ccc+0x114>)
    c916:	4a1a      	ldr	r2, [pc, #104]	; (c980 <update_ccc+0x118>)
    c918:	2314      	movs	r3, #20
    c91a:	fb03 1300 	mla	r3, r3, r0, r1
    c91e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    c920:	4a18      	ldr	r2, [pc, #96]	; (c984 <update_ccc+0x11c>)
    c922:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    c924:	aa01      	add	r2, sp, #4
    c926:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    c928:	2204      	movs	r2, #4
    c92a:	821a      	strh	r2, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    c92c:	b203      	sxth	r3, r0
    c92e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    c932:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    c936:	4628      	mov	r0, r5
    c938:	f7ff feec 	bl	c714 <bt_gatt_indicate>
    c93c:	b148      	cbz	r0, c952 <update_ccc+0xea>
    c93e:	490b      	ldr	r1, [pc, #44]	; (c96c <update_ccc+0x104>)
    c940:	4b0b      	ldr	r3, [pc, #44]	; (c970 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
    c942:	4811      	ldr	r0, [pc, #68]	; (c988 <update_ccc+0x120>)
    c944:	1ac9      	subs	r1, r1, r3
    c946:	08c9      	lsrs	r1, r1, #3
    c948:	0189      	lsls	r1, r1, #6
    c94a:	f041 0101 	orr.w	r1, r1, #1
    c94e:	f010 fa8e 	bl	1ce6e <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    c952:	2204      	movs	r2, #4
    c954:	2100      	movs	r1, #0
    c956:	f104 0008 	add.w	r0, r4, #8
    c95a:	f012 fa75 	bl	1ee48 <memset>
		sc_store(cfg);
    c95e:	4620      	mov	r0, r4
    c960:	f7fe ff0c 	bl	b77c <sc_store>
    c964:	e7a6      	b.n	c8b4 <update_ccc+0x4c>
    c966:	bf00      	nop
    c968:	0000ba3d 	.word	0x0000ba3d
    c96c:	00021b64 	.word	0x00021b64
    c970:	00021aac 	.word	0x00021aac
    c974:	0002526b 	.word	0x0002526b
    c978:	20000374 	.word	0x20000374
    c97c:	200015ec 	.word	0x200015ec
    c980:	000224a4 	.word	0x000224a4
    c984:	0002005f 	.word	0x0002005f
    c988:	0002527f 	.word	0x0002527f

0000c98c <bt_gatt_connected>:
{
    c98c:	b570      	push	{r4, r5, r6, lr}
    c98e:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c990:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    c994:	4604      	mov	r4, r0
	data.conn = conn;
    c996:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    c998:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c99a:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    c99c:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    c9a0:	4629      	mov	r1, r5
    c9a2:	f012 fcc8 	bl	1f336 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    c9a6:	b190      	cbz	r0, c9ce <bt_gatt_connected+0x42>
		if (conn->id) {
    c9a8:	7a22      	ldrb	r2, [r4, #8]
    c9aa:	b31a      	cbz	r2, c9f4 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    c9ac:	ae02      	add	r6, sp, #8
    c9ae:	2104      	movs	r1, #4
    c9b0:	4630      	mov	r0, r6
    c9b2:	f00f fe51 	bl	1c658 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9b6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9b8:	4a0f      	ldr	r2, [pc, #60]	; (c9f8 <bt_gatt_connected+0x6c>)
    c9ba:	2124      	movs	r1, #36	; 0x24
    c9bc:	a805      	add	r0, sp, #20
    c9be:	462b      	mov	r3, r5
    c9c0:	f7fa f876 	bl	6ab0 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    c9c4:	aa05      	add	r2, sp, #20
    c9c6:	490d      	ldr	r1, [pc, #52]	; (c9fc <bt_gatt_connected+0x70>)
    c9c8:	4610      	mov	r0, r2
    c9ca:	f7f8 fa1d 	bl	4e08 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    c9ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c9d2:	4a0b      	ldr	r2, [pc, #44]	; (ca00 <bt_gatt_connected+0x74>)
    c9d4:	ab03      	add	r3, sp, #12
    c9d6:	2001      	movs	r0, #1
    c9d8:	f013 fc4d 	bl	20276 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    c9dc:	4620      	mov	r0, r4
    c9de:	f012 fd66 	bl	1f4ae <bt_conn_get_security>
    c9e2:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    c9e6:	4288      	cmp	r0, r1
    c9e8:	d202      	bcs.n	c9f0 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    c9ea:	4620      	mov	r0, r4
    c9ec:	f012 fd2c 	bl	1f448 <bt_conn_set_security>
}
    c9f0:	b00e      	add	sp, #56	; 0x38
    c9f2:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    c9f4:	9200      	str	r2, [sp, #0]
    c9f6:	e7df      	b.n	c9b8 <bt_gatt_connected+0x2c>
    c9f8:	0002525b 	.word	0x0002525b
    c9fc:	0000c50d 	.word	0x0000c50d
    ca00:	0000c869 	.word	0x0000c869

0000ca04 <bt_gatt_encrypt_change>:
{
    ca04:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ca06:	4a06      	ldr	r2, [pc, #24]	; (ca20 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    ca08:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ca0a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    ca0c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ca0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    ca12:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    ca16:	f013 fc2e 	bl	20276 <bt_gatt_foreach_attr>
}
    ca1a:	b003      	add	sp, #12
    ca1c:	f85d fb04 	ldr.w	pc, [sp], #4
    ca20:	0000c869 	.word	0x0000c869

0000ca24 <db_hash_read>:
{
    ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca26:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    ca28:	4810      	ldr	r0, [pc, #64]	; (ca6c <db_hash_read+0x48>)
{
    ca2a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    ca2e:	4615      	mov	r5, r2
    ca30:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    ca32:	f014 fd09 	bl	21448 <k_delayed_work_cancel>
	if (!err) {
    ca36:	b910      	cbnz	r0, ca3e <db_hash_read+0x1a>
		db_hash_gen(true);
    ca38:	2001      	movs	r0, #1
    ca3a:	f7ff fcbd 	bl	c3b8 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    ca3e:	2101      	movs	r1, #1
    ca40:	4620      	mov	r0, r4
    ca42:	f013 fc6c 	bl	2031e <bt_gatt_change_aware>
	if (offset > value_len) {
    ca46:	2e10      	cmp	r6, #16
    ca48:	d80c      	bhi.n	ca64 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    ca4a:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    ca4e:	4908      	ldr	r1, [pc, #32]	; (ca70 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    ca50:	42bc      	cmp	r4, r7
    ca52:	bfa8      	it	ge
    ca54:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    ca56:	4622      	mov	r2, r4
    ca58:	4431      	add	r1, r6
    ca5a:	4628      	mov	r0, r5
    ca5c:	f012 f9c9 	bl	1edf2 <memcpy>
}
    ca60:	4620      	mov	r0, r4
    ca62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    ca64:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    ca68:	e7fa      	b.n	ca60 <db_hash_read+0x3c>
    ca6a:	bf00      	nop
    ca6c:	20000e10 	.word	0x20000e10
    ca70:	2000305a 	.word	0x2000305a

0000ca74 <bt_gatt_store_ccc>:
{
    ca74:	b570      	push	{r4, r5, r6, lr}
    ca76:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    ca78:	2300      	movs	r3, #0
{
    ca7a:	4604      	mov	r4, r0
    ca7c:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    ca7e:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    ca80:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    ca84:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    ca86:	4a18      	ldr	r2, [pc, #96]	; (cae8 <bt_gatt_store_ccc+0x74>)
    ca88:	ab0d      	add	r3, sp, #52	; 0x34
    ca8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ca8e:	2001      	movs	r0, #1
    ca90:	f013 fbf1 	bl	20276 <bt_gatt_foreach_attr>
	if (id) {
    ca94:	b31c      	cbz	r4, cade <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    ca96:	ae03      	add	r6, sp, #12
    ca98:	4622      	mov	r2, r4
    ca9a:	2104      	movs	r1, #4
    ca9c:	4630      	mov	r0, r6
    ca9e:	f00f fddb 	bl	1c658 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    caa2:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    caa4:	4a11      	ldr	r2, [pc, #68]	; (caec <bt_gatt_store_ccc+0x78>)
    caa6:	462b      	mov	r3, r5
    caa8:	2124      	movs	r1, #36	; 0x24
    caaa:	a804      	add	r0, sp, #16
    caac:	f7fa f800 	bl	6ab0 <bt_settings_encode_key>
	if (save.count) {
    cab0:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    cab2:	b1b2      	cbz	r2, cae2 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    cab4:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    cab6:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    cab8:	a804      	add	r0, sp, #16
    caba:	f7f8 f941 	bl	4d40 <settings_save_one>
	if (err) {
    cabe:	4604      	mov	r4, r0
    cac0:	b150      	cbz	r0, cad8 <bt_gatt_store_ccc+0x64>
    cac2:	4a0b      	ldr	r2, [pc, #44]	; (caf0 <bt_gatt_store_ccc+0x7c>)
    cac4:	4b0b      	ldr	r3, [pc, #44]	; (caf4 <bt_gatt_store_ccc+0x80>)
    cac6:	1ad2      	subs	r2, r2, r3
    cac8:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    caca:	0192      	lsls	r2, r2, #6
    cacc:	4601      	mov	r1, r0
    cace:	f042 0201 	orr.w	r2, r2, #1
    cad2:	4809      	ldr	r0, [pc, #36]	; (caf8 <bt_gatt_store_ccc+0x84>)
    cad4:	f010 f9d8 	bl	1ce88 <log_1>
}
    cad8:	4620      	mov	r0, r4
    cada:	b040      	add	sp, #256	; 0x100
    cadc:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    cade:	9400      	str	r4, [sp, #0]
    cae0:	e7e0      	b.n	caa4 <bt_gatt_store_ccc+0x30>
		str = NULL;
    cae2:	4611      	mov	r1, r2
    cae4:	e7e8      	b.n	cab8 <bt_gatt_store_ccc+0x44>
    cae6:	bf00      	nop
    cae8:	0000b9dd 	.word	0x0000b9dd
    caec:	0002525b 	.word	0x0002525b
    caf0:	00021b64 	.word	0x00021b64
    caf4:	00021aac 	.word	0x00021aac
    caf8:	0002529c 	.word	0x0002529c

0000cafc <bt_gatt_disconnected>:
{
    cafc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cafe:	4604      	mov	r4, r0
    cb00:	b08d      	sub	sp, #52	; 0x34
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    cb02:	4603      	mov	r3, r0
    cb04:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cb08:	2001      	movs	r0, #1
    cb0a:	4a2f      	ldr	r2, [pc, #188]	; (cbc8 <bt_gatt_disconnected+0xcc>)
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cb0c:	f104 0688 	add.w	r6, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    cb10:	f013 fbb1 	bl	20276 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cb14:	7a20      	ldrb	r0, [r4, #8]
    cb16:	4631      	mov	r1, r6
    cb18:	f012 fc0d 	bl	1f336 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    cb1c:	2800      	cmp	r0, #0
    cb1e:	d035      	beq.n	cb8c <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    cb20:	4631      	mov	r1, r6
    cb22:	7a20      	ldrb	r0, [r4, #8]
    cb24:	f7ff ffa6 	bl	ca74 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    cb28:	4620      	mov	r0, r4
    cb2a:	f7ff f97f 	bl	be2c <find_cf_cfg>
	if (!cfg) {
    cb2e:	4605      	mov	r5, r0
    cb30:	2800      	cmp	r0, #0
    cb32:	d03a      	beq.n	cbaa <bt_gatt_disconnected+0xae>
		if (conn->id) {
    cb34:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    cb36:	3508      	adds	r5, #8
		if (conn->id) {
    cb38:	2a00      	cmp	r2, #0
    cb3a:	d038      	beq.n	cbae <bt_gatt_disconnected+0xb2>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    cb3c:	af02      	add	r7, sp, #8
    cb3e:	2104      	movs	r1, #4
    cb40:	4638      	mov	r0, r7
    cb42:	f00f fd89 	bl	1c658 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cb46:	9700      	str	r7, [sp, #0]
    cb48:	4633      	mov	r3, r6
    cb4a:	4a20      	ldr	r2, [pc, #128]	; (cbcc <bt_gatt_disconnected+0xd0>)
    cb4c:	2124      	movs	r1, #36	; 0x24
    cb4e:	a803      	add	r0, sp, #12
    cb50:	f7f9 ffae 	bl	6ab0 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    cb54:	7a23      	ldrb	r3, [r4, #8]
    cb56:	2701      	movs	r7, #1
    cb58:	b93b      	cbnz	r3, cb6a <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    cb5a:	2300      	movs	r3, #0
    cb5c:	9300      	str	r3, [sp, #0]
    cb5e:	4a1b      	ldr	r2, [pc, #108]	; (cbcc <bt_gatt_disconnected+0xd0>)
    cb60:	4633      	mov	r3, r6
    cb62:	2124      	movs	r1, #36	; 0x24
    cb64:	a803      	add	r0, sp, #12
    cb66:	f7f9 ffa3 	bl	6ab0 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    cb6a:	4629      	mov	r1, r5
    cb6c:	463a      	mov	r2, r7
    cb6e:	a803      	add	r0, sp, #12
    cb70:	f7f8 f8e6 	bl	4d40 <settings_save_one>
	if (err) {
    cb74:	4601      	mov	r1, r0
    cb76:	b148      	cbz	r0, cb8c <bt_gatt_disconnected+0x90>
    cb78:	4a15      	ldr	r2, [pc, #84]	; (cbd0 <bt_gatt_disconnected+0xd4>)
    cb7a:	4b16      	ldr	r3, [pc, #88]	; (cbd4 <bt_gatt_disconnected+0xd8>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    cb7c:	4816      	ldr	r0, [pc, #88]	; (cbd8 <bt_gatt_disconnected+0xdc>)
    cb7e:	1ad2      	subs	r2, r2, r3
    cb80:	08d2      	lsrs	r2, r2, #3
    cb82:	0192      	lsls	r2, r2, #6
    cb84:	f042 0201 	orr.w	r2, r2, #1
    cb88:	f010 f97e 	bl	1ce88 <log_1>
	cfg = find_cf_cfg(conn);
    cb8c:	4620      	mov	r0, r4
    cb8e:	f7ff f94d 	bl	be2c <find_cf_cfg>
	if (!cfg) {
    cb92:	4605      	mov	r5, r0
    cb94:	b138      	cbz	r0, cba6 <bt_gatt_disconnected+0xaa>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    cb96:	7a20      	ldrb	r0, [r4, #8]
    cb98:	4631      	mov	r1, r6
    cb9a:	f012 fbcc 	bl	1f336 <bt_addr_le_is_bonded>
    cb9e:	b940      	cbnz	r0, cbb2 <bt_gatt_disconnected+0xb6>
		clear_cf_cfg(cfg);
    cba0:	4628      	mov	r0, r5
    cba2:	f013 fa05 	bl	1ffb0 <clear_cf_cfg>
}
    cba6:	b00d      	add	sp, #52	; 0x34
    cba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		len = 0;
    cbaa:	4607      	mov	r7, r0
    cbac:	e7d5      	b.n	cb5a <bt_gatt_disconnected+0x5e>
    cbae:	2701      	movs	r7, #1
    cbb0:	e7d3      	b.n	cb5a <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    cbb2:	4631      	mov	r1, r6
    cbb4:	1c68      	adds	r0, r5, #1
    cbb6:	f013 f963 	bl	1fe80 <bt_addr_le_copy>
    cbba:	f06f 0102 	mvn.w	r1, #2
    cbbe:	f105 000c 	add.w	r0, r5, #12
    cbc2:	f013 f9e6 	bl	1ff92 <atomic_and>
}
    cbc6:	e7ee      	b.n	cba6 <bt_gatt_disconnected+0xaa>
    cbc8:	0000c19d 	.word	0x0000c19d
    cbcc:	000252e6 	.word	0x000252e6
    cbd0:	00021b64 	.word	0x00021b64
    cbd4:	00021aac 	.word	0x00021aac
    cbd8:	000252ba 	.word	0x000252ba

0000cbdc <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
    cbdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    cbde:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    cbe0:	ae03      	add	r6, sp, #12
{
    cbe2:	4604      	mov	r4, r0
    cbe4:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    cbe6:	9103      	str	r1, [sp, #12]
    cbe8:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    cbec:	4a1f      	ldr	r2, [pc, #124]	; (cc6c <bt_gatt_clear+0x90>)
    cbee:	4633      	mov	r3, r6
    cbf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cbf4:	2001      	movs	r0, #1
    cbf6:	f013 fb3e 	bl	20276 <bt_gatt_foreach_attr>
		if (id) {
    cbfa:	b394      	cbz	r4, cc62 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
    cbfc:	af02      	add	r7, sp, #8
    cbfe:	4622      	mov	r2, r4
    cc00:	2104      	movs	r1, #4
    cc02:	4638      	mov	r0, r7
    cc04:	f00f fd28 	bl	1c658 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    cc08:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    cc0a:	4a19      	ldr	r2, [pc, #100]	; (cc70 <bt_gatt_clear+0x94>)
    cc0c:	462b      	mov	r3, r5
    cc0e:	2124      	movs	r1, #36	; 0x24
    cc10:	a805      	add	r0, sp, #20
    cc12:	f7f9 ff4d 	bl	6ab0 <bt_settings_encode_key>
		return settings_delete(key);
    cc16:	a805      	add	r0, sp, #20
    cc18:	f010 fdc2 	bl	1d7a0 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    cc1c:	2800      	cmp	r0, #0
    cc1e:	db1e      	blt.n	cc5e <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
    cc20:	4629      	mov	r1, r5
    cc22:	4620      	mov	r0, r4
    cc24:	f7ff fa56 	bl	c0d4 <bt_gatt_clear_sc>
		if (err < 0) {
    cc28:	2800      	cmp	r0, #0
    cc2a:	db18      	blt.n	cc5e <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
    cc2c:	4629      	mov	r1, r5
    cc2e:	4620      	mov	r0, r4
    cc30:	f7fe ff84 	bl	bb3c <find_cf_cfg_by_addr>
	if (cfg) {
    cc34:	b108      	cbz	r0, cc3a <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
    cc36:	f013 f9bb 	bl	1ffb0 <clear_cf_cfg>
		if (id) {
    cc3a:	b1a4      	cbz	r4, cc66 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
    cc3c:	4622      	mov	r2, r4
    cc3e:	2104      	movs	r1, #4
    cc40:	4630      	mov	r0, r6
    cc42:	f00f fd09 	bl	1c658 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc46:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc48:	4a0a      	ldr	r2, [pc, #40]	; (cc74 <bt_gatt_clear+0x98>)
    cc4a:	462b      	mov	r3, r5
    cc4c:	2124      	movs	r1, #36	; 0x24
    cc4e:	a805      	add	r0, sp, #20
    cc50:	f7f9 ff2e 	bl	6ab0 <bt_settings_encode_key>
		return settings_delete(key);
    cc54:	a805      	add	r0, sp, #20
    cc56:	f010 fda3 	bl	1d7a0 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    cc5a:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    cc5e:	b00f      	add	sp, #60	; 0x3c
    cc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    cc62:	9400      	str	r4, [sp, #0]
    cc64:	e7d1      	b.n	cc0a <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    cc66:	9400      	str	r4, [sp, #0]
    cc68:	e7ee      	b.n	cc48 <bt_gatt_clear+0x6c>
    cc6a:	bf00      	nop
    cc6c:	0000ba15 	.word	0x0000ba15
    cc70:	0002525b 	.word	0x0002525b
    cc74:	000252e6 	.word	0x000252e6

0000cc78 <get_io_capa>:
static const uint8_t *sc_public_key;
static K_SEM_DEFINE(sc_local_pkey_ready, 0, 1);

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    cc78:	4b10      	ldr	r3, [pc, #64]	; (ccbc <get_io_capa+0x44>)
    cc7a:	681b      	ldr	r3, [r3, #0]
    cc7c:	b1bb      	cbz	r3, ccae <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    cc7e:	681a      	ldr	r2, [r3, #0]
    cc80:	b142      	cbz	r2, cc94 <get_io_capa+0x1c>
    cc82:	6859      	ldr	r1, [r3, #4]
    cc84:	b131      	cbz	r1, cc94 <get_io_capa+0x1c>
    cc86:	6899      	ldr	r1, [r3, #8]
    cc88:	b911      	cbnz	r1, cc90 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    cc8a:	490d      	ldr	r1, [pc, #52]	; (ccc0 <get_io_capa+0x48>)
    cc8c:	7809      	ldrb	r1, [r1, #0]
    cc8e:	b939      	cbnz	r1, cca0 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    cc90:	2004      	movs	r0, #4
    cc92:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    cc94:	490a      	ldr	r1, [pc, #40]	; (ccc0 <get_io_capa+0x48>)
    cc96:	7809      	ldrb	r1, [r1, #0]
    cc98:	b111      	cbz	r1, cca0 <get_io_capa+0x28>
    cc9a:	b10a      	cbz	r2, cca0 <get_io_capa+0x28>
    cc9c:	6899      	ldr	r1, [r3, #8]
    cc9e:	b941      	cbnz	r1, ccb2 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    cca0:	685b      	ldr	r3, [r3, #4]
    cca2:	b943      	cbnz	r3, ccb6 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    cca4:	2a00      	cmp	r2, #0
    cca6:	bf0c      	ite	eq
    cca8:	2003      	moveq	r0, #3
    ccaa:	2000      	movne	r0, #0
    ccac:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    ccae:	2003      	movs	r0, #3
    ccb0:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    ccb2:	2001      	movs	r0, #1
    ccb4:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    ccb6:	2002      	movs	r0, #2
	}
}
    ccb8:	4770      	bx	lr
    ccba:	bf00      	nop
    ccbc:	20001574 	.word	0x20001574
    ccc0:	2000307b 	.word	0x2000307b

0000ccc4 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    ccc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    ccc6:	1d14      	adds	r4, r2, #4
{
    ccc8:	b08b      	sub	sp, #44	; 0x2c
    ccca:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    cccc:	588b      	ldr	r3, [r1, r2]
    ccce:	9301      	str	r3, [sp, #4]
{
    ccd0:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    ccd2:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    ccd4:	4628      	mov	r0, r5
    ccd6:	4621      	mov	r1, r4
    ccd8:	f013 fb57 	bl	2038a <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    ccdc:	4631      	mov	r1, r6
    ccde:	2210      	movs	r2, #16
    cce0:	a802      	add	r0, sp, #8
    cce2:	f013 fb48 	bl	20376 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    cce6:	ab06      	add	r3, sp, #24
    cce8:	4622      	mov	r2, r4
    ccea:	4629      	mov	r1, r5
    ccec:	a802      	add	r0, sp, #8
    ccee:	f013 fb69 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
    ccf2:	4606      	mov	r6, r0
    ccf4:	b160      	cbz	r0, cd10 <smp_sign_buf+0x4c>
    ccf6:	4910      	ldr	r1, [pc, #64]	; (cd38 <smp_sign_buf+0x74>)
    ccf8:	4b10      	ldr	r3, [pc, #64]	; (cd3c <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    ccfa:	4811      	ldr	r0, [pc, #68]	; (cd40 <smp_sign_buf+0x7c>)
    ccfc:	1ac9      	subs	r1, r1, r3
    ccfe:	08c9      	lsrs	r1, r1, #3
    cd00:	0189      	lsls	r1, r1, #6
    cd02:	f041 0101 	orr.w	r1, r1, #1
    cd06:	f010 f8b2 	bl	1ce6e <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    cd0a:	4630      	mov	r0, r6
    cd0c:	b00b      	add	sp, #44	; 0x2c
    cd0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    cd10:	a806      	add	r0, sp, #24
    cd12:	2110      	movs	r1, #16
    cd14:	f013 fb39 	bl	2038a <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    cd18:	2204      	movs	r2, #4
    cd1a:	eb0d 0102 	add.w	r1, sp, r2
    cd1e:	a807      	add	r0, sp, #28
    cd20:	f012 f867 	bl	1edf2 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    cd24:	4621      	mov	r1, r4
    cd26:	4628      	mov	r0, r5
    cd28:	f013 fb2f 	bl	2038a <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    cd2c:	220c      	movs	r2, #12
    cd2e:	a907      	add	r1, sp, #28
    cd30:	4638      	mov	r0, r7
    cd32:	f012 f85e 	bl	1edf2 <memcpy>
	return 0;
    cd36:	e7e8      	b.n	cd0a <smp_sign_buf+0x46>
    cd38:	00021b9c 	.word	0x00021b9c
    cd3c:	00021aac 	.word	0x00021aac
    cd40:	000252f7 	.word	0x000252f7

0000cd44 <get_auth.isra.0>:
	if (sc_supported) {
    cd44:	4b0c      	ldr	r3, [pc, #48]	; (cd78 <get_auth.isra.0+0x34>)
    cd46:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    cd48:	b510      	push	{r4, lr}
	if (sc_supported) {
    cd4a:	b17b      	cbz	r3, cd6c <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    cd4c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cd50:	f7ff ff92 	bl	cc78 <get_io_capa>
	if (bondable) {
    cd54:	4b09      	ldr	r3, [pc, #36]	; (cd7c <get_auth.isra.0+0x38>)
    cd56:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    cd58:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    cd5a:	bf0c      	ite	eq
    cd5c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    cd60:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    cd64:	b12b      	cbz	r3, cd72 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    cd66:	f044 0001 	orr.w	r0, r4, #1
}
    cd6a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    cd6c:	f000 0407 	and.w	r4, r0, #7
    cd70:	e7ee      	b.n	cd50 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    cd72:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    cd76:	e7f8      	b.n	cd6a <get_auth.isra.0+0x26>
    cd78:	2000307b 	.word	0x2000307b
    cd7c:	2000084d 	.word	0x2000084d

0000cd80 <smp_chan_get>:
{
    cd80:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    cd82:	2106      	movs	r1, #6
    cd84:	f012 fc81 	bl	1f68a <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    cd88:	4604      	mov	r4, r0
    cd8a:	b948      	cbnz	r0, cda0 <smp_chan_get+0x20>
    cd8c:	4905      	ldr	r1, [pc, #20]	; (cda4 <smp_chan_get+0x24>)
    cd8e:	4b06      	ldr	r3, [pc, #24]	; (cda8 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    cd90:	4806      	ldr	r0, [pc, #24]	; (cdac <smp_chan_get+0x2c>)
    cd92:	1ac9      	subs	r1, r1, r3
    cd94:	08c9      	lsrs	r1, r1, #3
    cd96:	0189      	lsls	r1, r1, #6
    cd98:	f041 0101 	orr.w	r1, r1, #1
    cd9c:	f010 f867 	bl	1ce6e <log_0>
}
    cda0:	4620      	mov	r0, r4
    cda2:	bd10      	pop	{r4, pc}
    cda4:	00021b9c 	.word	0x00021b9c
    cda8:	00021aac 	.word	0x00021aac
    cdac:	0002530b 	.word	0x0002530b

0000cdb0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    cdb0:	4a0b      	ldr	r2, [pc, #44]	; (cde0 <bt_smp_accept+0x30>)
{
    cdb2:	b508      	push	{r3, lr}
    cdb4:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    cdb6:	6810      	ldr	r0, [r2, #0]
    cdb8:	b918      	cbnz	r0, cdc2 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    cdba:	4b0a      	ldr	r3, [pc, #40]	; (cde4 <bt_smp_accept+0x34>)
    cdbc:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    cdbe:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    cdc0:	bd08      	pop	{r3, pc}
    cdc2:	4909      	ldr	r1, [pc, #36]	; (cde8 <bt_smp_accept+0x38>)
    cdc4:	4a09      	ldr	r2, [pc, #36]	; (cdec <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    cdc6:	480a      	ldr	r0, [pc, #40]	; (cdf0 <bt_smp_accept+0x40>)
    cdc8:	1a52      	subs	r2, r2, r1
    cdca:	08d2      	lsrs	r2, r2, #3
    cdcc:	0192      	lsls	r2, r2, #6
    cdce:	f042 0201 	orr.w	r2, r2, #1
    cdd2:	4619      	mov	r1, r3
    cdd4:	f010 f858 	bl	1ce88 <log_1>
	return -ENOMEM;
    cdd8:	f06f 000b 	mvn.w	r0, #11
    cddc:	e7f0      	b.n	cdc0 <bt_smp_accept+0x10>
    cdde:	bf00      	nop
    cde0:	20000e90 	.word	0x20000e90
    cde4:	00022618 	.word	0x00022618
    cde8:	00021aac 	.word	0x00021aac
    cdec:	00021b9c 	.word	0x00021b9c
    cdf0:	00025326 	.word	0x00025326

0000cdf4 <smp_init>:
{
    cdf4:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    cdf6:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    cdfa:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    cdfc:	22f0      	movs	r2, #240	; 0xf0
    cdfe:	2100      	movs	r1, #0
    ce00:	4628      	mov	r0, r5
    ce02:	f012 f821 	bl	1ee48 <memset>
	if (bt_rand(smp->prnd, 16)) {
    ce06:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    ce0a:	2110      	movs	r1, #16
    ce0c:	f004 fcda 	bl	117c4 <bt_rand>
    ce10:	4604      	mov	r4, r0
    ce12:	b948      	cbnz	r0, ce28 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    ce14:	2105      	movs	r1, #5
    ce16:	4628      	mov	r0, r5
    ce18:	f013 fac6 	bl	203a8 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    ce1c:	f7fc fb14 	bl	9448 <bt_pub_key_get>
    ce20:	4b02      	ldr	r3, [pc, #8]	; (ce2c <smp_init+0x38>)
    ce22:	6018      	str	r0, [r3, #0]
}
    ce24:	4620      	mov	r0, r4
    ce26:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ce28:	2408      	movs	r4, #8
    ce2a:	e7fb      	b.n	ce24 <smp_init+0x30>
    ce2c:	20001600 	.word	0x20001600

0000ce30 <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ce30:	b513      	push	{r0, r1, r4, lr}
    ce32:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ce34:	2200      	movs	r2, #0
    ce36:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    ce38:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    ce3a:	460a      	mov	r2, r1
    ce3c:	6800      	ldr	r0, [r0, #0]
    ce3e:	2106      	movs	r1, #6
    ce40:	f012 fbfa 	bl	1f638 <bt_l2cap_send_cb>
    ce44:	4805      	ldr	r0, [pc, #20]	; (ce5c <smp_send.isra.0+0x2c>)
    ce46:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    ce4a:	2300      	movs	r3, #0
    ce4c:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    ce50:	b002      	add	sp, #8
    ce52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ce56:	f00f b8bd 	b.w	1bfd4 <k_delayed_work_submit_to_queue>
    ce5a:	bf00      	nop
    ce5c:	200012a8 	.word	0x200012a8

0000ce60 <smp_send_pairing_confirm>:
{
    ce60:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    ce62:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    ce66:	2c02      	cmp	r4, #2
{
    ce68:	4605      	mov	r5, r0
	switch (smp->method) {
    ce6a:	d824      	bhi.n	ceb6 <smp_send_pairing_confirm+0x56>
    ce6c:	b14c      	cbz	r4, ce82 <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ce6e:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    ce72:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    ce76:	40dc      	lsrs	r4, r3
    ce78:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    ce7c:	f064 047f 	orn	r4, r4, #127	; 0x7f
    ce80:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    ce82:	2103      	movs	r1, #3
    ce84:	4628      	mov	r0, r5
    ce86:	f013 fb60 	bl	2054a <smp_create_pdu.isra.0>
	if (!buf) {
    ce8a:	4606      	mov	r6, r0
    ce8c:	b1a8      	cbz	r0, ceba <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    ce8e:	2110      	movs	r1, #16
    ce90:	3008      	adds	r0, #8
    ce92:	f013 fe69 	bl	20b68 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    ce96:	9000      	str	r0, [sp, #0]
    ce98:	4810      	ldr	r0, [pc, #64]	; (cedc <smp_send_pairing_confirm+0x7c>)
    ce9a:	4623      	mov	r3, r4
    ce9c:	6800      	ldr	r0, [r0, #0]
    ce9e:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    cea2:	f205 110f 	addw	r1, r5, #271	; 0x10f
    cea6:	f013 faa9 	bl	203fc <smp_f4>
    ceaa:	4604      	mov	r4, r0
    ceac:	b148      	cbz	r0, cec2 <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    ceae:	4630      	mov	r0, r6
    ceb0:	f00d f91e 	bl	1a0f0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    ceb4:	e001      	b.n	ceba <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    ceb6:	2c03      	cmp	r4, #3
    ceb8:	d001      	beq.n	cebe <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    ceba:	2008      	movs	r0, #8
    cebc:	e00c      	b.n	ced8 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    cebe:	2400      	movs	r4, #0
    cec0:	e7df      	b.n	ce82 <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    cec2:	4602      	mov	r2, r0
    cec4:	4631      	mov	r1, r6
    cec6:	4628      	mov	r0, r5
    cec8:	f7ff ffb2 	bl	ce30 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    cecc:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    ced0:	4621      	mov	r1, r4
    ced2:	f013 fb06 	bl	204e2 <atomic_clear_bit>
	return 0;
    ced6:	4620      	mov	r0, r4
}
    ced8:	b002      	add	sp, #8
    ceda:	bd70      	pop	{r4, r5, r6, pc}
    cedc:	20001600 	.word	0x20001600

0000cee0 <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
    cee0:	b538      	push	{r3, r4, r5, lr}
    cee2:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    cee6:	4604      	mov	r4, r0
    cee8:	2b05      	cmp	r3, #5
    ceea:	d814      	bhi.n	cf16 <smp_public_key_slave.part.0+0x36>
    ceec:	e8df f003 	tbb	[pc, r3]
    cef0:	030d3603 	.word	0x030d3603
    cef4:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cef6:	30b8      	adds	r0, #184	; 0xb8
    cef8:	2104      	movs	r1, #4
    cefa:	f013 fa55 	bl	203a8 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    cefe:	4620      	mov	r0, r4
    cf00:	f7ff ffae 	bl	ce60 <smp_send_pairing_confirm>
		if (err) {
    cf04:	2800      	cmp	r0, #0
    cf06:	d037      	beq.n	cf78 <smp_public_key_slave.part.0+0x98>
}
    cf08:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    cf0a:	2104      	movs	r1, #4
    cf0c:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    cf10:	f004 fc58 	bl	117c4 <bt_rand>
    cf14:	b108      	cbz	r0, cf1a <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
    cf16:	2008      	movs	r0, #8
    cf18:	e7f6      	b.n	cf08 <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
    cf1a:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    cf1e:	4a1f      	ldr	r2, [pc, #124]	; (cf9c <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    cf20:	4d1f      	ldr	r5, [pc, #124]	; (cfa0 <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
    cf22:	fbb1 f3f2 	udiv	r3, r1, r2
    cf26:	fb02 1313 	mls	r3, r2, r3, r1
    cf2a:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    cf2e:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    cf30:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    cf34:	b163      	cbz	r3, cf50 <smp_public_key_slave.part.0+0x70>
    cf36:	681b      	ldr	r3, [r3, #0]
    cf38:	b153      	cbz	r3, cf50 <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    cf3a:	210a      	movs	r1, #10
    cf3c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    cf40:	f013 fa32 	bl	203a8 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    cf44:	682b      	ldr	r3, [r5, #0]
    cf46:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    cf4a:	681b      	ldr	r3, [r3, #0]
    cf4c:	6820      	ldr	r0, [r4, #0]
    cf4e:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    cf50:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cf52:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    cf56:	f013 fa27 	bl	203a8 <atomic_set_bit>
		break;
    cf5a:	e00d      	b.n	cf78 <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    cf5c:	2103      	movs	r1, #3
    cf5e:	30b8      	adds	r0, #184	; 0xb8
    cf60:	f013 fa22 	bl	203a8 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    cf64:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    cf68:	2109      	movs	r1, #9
    cf6a:	f013 fa1d 	bl	203a8 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    cf6e:	4b0c      	ldr	r3, [pc, #48]	; (cfa0 <smp_public_key_slave.part.0+0xc0>)
    cf70:	6820      	ldr	r0, [r4, #0]
    cf72:	681b      	ldr	r3, [r3, #0]
    cf74:	685b      	ldr	r3, [r3, #4]
    cf76:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    cf78:	490a      	ldr	r1, [pc, #40]	; (cfa4 <smp_public_key_slave.part.0+0xc4>)
    cf7a:	f204 100f 	addw	r0, r4, #271	; 0x10f
    cf7e:	f7fc fa71 	bl	9464 <bt_dh_key_gen>
    cf82:	4605      	mov	r5, r0
    cf84:	2800      	cmp	r0, #0
    cf86:	d1c6      	bne.n	cf16 <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    cf88:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    cf8c:	2107      	movs	r1, #7
    cf8e:	f013 fa0b 	bl	203a8 <atomic_set_bit>
	return 0;
    cf92:	4628      	mov	r0, r5
    cf94:	e7b8      	b.n	cf08 <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    cf96:	2104      	movs	r1, #4
    cf98:	e7db      	b.n	cf52 <smp_public_key_slave.part.0+0x72>
    cf9a:	bf00      	nop
    cf9c:	000f4240 	.word	0x000f4240
    cfa0:	20001574 	.word	0x20001574
    cfa4:	0000d70d 	.word	0x0000d70d

0000cfa8 <compute_and_check_and_send_slave_dhcheck>:
{
    cfa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    cfac:	2210      	movs	r2, #16
{
    cfae:	b0a3      	sub	sp, #140	; 0x8c
    cfb0:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    cfb2:	2100      	movs	r1, #0
    cfb4:	eb0d 0002 	add.w	r0, sp, r2
    cfb8:	f011 ff46 	bl	1ee48 <memset>
	switch (smp->method) {
    cfbc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    cfc0:	2b05      	cmp	r3, #5
    cfc2:	f200 8081 	bhi.w	d0c8 <compute_and_check_and_send_slave_dhcheck+0x120>
    cfc6:	e8df f003 	tbb	[pc, r3]
    cfca:	0309      	.short	0x0309
    cfcc:	817f0903 	.word	0x817f0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    cfd0:	2204      	movs	r2, #4
    cfd2:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    cfd6:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    cfd8:	f011 ff0b 	bl	1edf2 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    cfdc:	4b64      	ldr	r3, [pc, #400]	; (d170 <compute_and_check_and_send_slave_dhcheck+0x1c8>)
		   &smp->chan.chan.conn->le.init_addr,
    cfde:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    cfe2:	aa14      	add	r2, sp, #80	; 0x50
    cfe4:	f103 0630 	add.w	r6, r3, #48	; 0x30
    cfe8:	6818      	ldr	r0, [r3, #0]
    cfea:	6859      	ldr	r1, [r3, #4]
    cfec:	4615      	mov	r5, r2
    cfee:	c503      	stmia	r5!, {r0, r1}
    cff0:	3308      	adds	r3, #8
    cff2:	42b3      	cmp	r3, r6
    cff4:	462a      	mov	r2, r5
    cff6:	d1f7      	bne.n	cfe8 <compute_and_check_and_send_slave_dhcheck+0x40>
    cff8:	6818      	ldr	r0, [r3, #0]
    cffa:	791b      	ldrb	r3, [r3, #4]
    cffc:	6028      	str	r0, [r5, #0]
    cffe:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    d000:	ad0c      	add	r5, sp, #48	; 0x30
    d002:	2220      	movs	r2, #32
    d004:	f204 114f 	addw	r1, r4, #335	; 0x14f
    d008:	4628      	mov	r0, r5
    d00a:	f013 f9b4 	bl	20376 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    d00e:	4859      	ldr	r0, [pc, #356]	; (d174 <compute_and_check_and_send_slave_dhcheck+0x1cc>)
    d010:	ab08      	add	r3, sp, #32
    d012:	2220      	movs	r2, #32
    d014:	4629      	mov	r1, r5
    d016:	f013 f9d5 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
    d01a:	2800      	cmp	r0, #0
    d01c:	d154      	bne.n	d0c8 <compute_and_check_and_send_slave_dhcheck+0x120>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d01e:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    d022:	2210      	movs	r2, #16
    d024:	4639      	mov	r1, r7
    d026:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    d02a:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    d02e:	f013 f9a2 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    d032:	2210      	movs	r2, #16
    d034:	4641      	mov	r1, r8
    d036:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    d03a:	f013 f99c 	bl	20376 <sys_memcpy_swap>
	m[37] = a1->type;
    d03e:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    d042:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    d046:	2206      	movs	r2, #6
    d048:	f109 0190 	add.w	r1, r9, #144	; 0x90
    d04c:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    d050:	f013 f991 	bl	20376 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    d054:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    d058:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    d05c:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    d060:	2206      	movs	r2, #6
    d062:	f109 0197 	add.w	r1, r9, #151	; 0x97
    d066:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    d06a:	f013 f984 	bl	20376 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    d06e:	4633      	mov	r3, r6
    d070:	2235      	movs	r2, #53	; 0x35
    d072:	a914      	add	r1, sp, #80	; 0x50
    d074:	a808      	add	r0, sp, #32
    d076:	f013 f9a5 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
    d07a:	bb28      	cbnz	r0, d0c8 <compute_and_check_and_send_slave_dhcheck+0x120>
	sys_mem_swap(mackey, 16);
    d07c:	2110      	movs	r1, #16
    d07e:	4630      	mov	r0, r6
    d080:	f013 f983 	bl	2038a <sys_mem_swap>
		   smp->tk)) {
    d084:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    d088:	2301      	movs	r3, #1
    d08a:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    d08e:	2235      	movs	r2, #53	; 0x35
    d090:	464b      	mov	r3, r9
    d092:	a914      	add	r1, sp, #80	; 0x50
    d094:	a808      	add	r0, sp, #32
    d096:	f013 f995 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
    d09a:	b9a8      	cbnz	r0, d0c8 <compute_and_check_and_send_slave_dhcheck+0x120>
	sys_mem_swap(ltk, 16);
    d09c:	2110      	movs	r1, #16
    d09e:	4648      	mov	r0, r9
    d0a0:	f013 f973 	bl	2038a <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    d0a4:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d0a6:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    d0a8:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d0ac:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    d0ae:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    d0b2:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    d0b4:	e9cd 2300 	strd	r2, r3, [sp]
    d0b8:	9102      	str	r1, [sp, #8]
    d0ba:	ab04      	add	r3, sp, #16
    d0bc:	463a      	mov	r2, r7
    d0be:	4641      	mov	r1, r8
    d0c0:	4630      	mov	r0, r6
    d0c2:	f013 f9c1 	bl	20448 <smp_f6>
    d0c6:	b148      	cbz	r0, d0dc <compute_and_check_and_send_slave_dhcheck+0x134>
		return BT_SMP_ERR_UNSPECIFIED;
    d0c8:	2008      	movs	r0, #8
    d0ca:	e048      	b.n	d15e <compute_and_check_and_send_slave_dhcheck+0x1b6>
		if (smp->oobd_remote) {
    d0cc:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    d0d0:	2900      	cmp	r1, #0
    d0d2:	d083      	beq.n	cfdc <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    d0d4:	2210      	movs	r2, #16
    d0d6:	eb0d 0002 	add.w	r0, sp, r2
    d0da:	e77d      	b.n	cfd8 <compute_and_check_and_send_slave_dhcheck+0x30>
	if (smp->method == LE_SC_OOB) {
    d0dc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d0e0:	2b05      	cmp	r3, #5
    d0e2:	d108      	bne.n	d0f6 <compute_and_check_and_send_slave_dhcheck+0x14e>
		if (smp->oobd_local) {
    d0e4:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d0e8:	2210      	movs	r2, #16
    d0ea:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    d0ee:	2900      	cmp	r1, #0
    d0f0:	d038      	beq.n	d164 <compute_and_check_and_send_slave_dhcheck+0x1bc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    d0f2:	f011 fe7e 	bl	1edf2 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    d0f6:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d0f8:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    d0fa:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d0fe:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    d100:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    d104:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    d106:	e9cd 2300 	strd	r2, r3, [sp]
    d10a:	9102      	str	r1, [sp, #8]
    d10c:	ab04      	add	r3, sp, #16
    d10e:	4642      	mov	r2, r8
    d110:	4639      	mov	r1, r7
    d112:	f013 f999 	bl	20448 <smp_f6>
    d116:	2800      	cmp	r0, #0
    d118:	d1d6      	bne.n	d0c8 <compute_and_check_and_send_slave_dhcheck+0x120>
	if (memcmp(smp->e, re, 16)) {
    d11a:	4629      	mov	r1, r5
    d11c:	2210      	movs	r2, #16
    d11e:	f204 106f 	addw	r0, r4, #367	; 0x16f
    d122:	f011 fe56 	bl	1edd2 <memcmp>
    d126:	4605      	mov	r5, r0
    d128:	b9f8      	cbnz	r0, d16a <compute_and_check_and_send_slave_dhcheck+0x1c2>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    d12a:	210d      	movs	r1, #13
    d12c:	4620      	mov	r0, r4
    d12e:	f013 fa0c 	bl	2054a <smp_create_pdu.isra.0>
	if (!buf) {
    d132:	4606      	mov	r6, r0
    d134:	2800      	cmp	r0, #0
    d136:	d0c7      	beq.n	d0c8 <compute_and_check_and_send_slave_dhcheck+0x120>
	req = net_buf_add(buf, sizeof(*req));
    d138:	2110      	movs	r1, #16
    d13a:	3008      	adds	r0, #8
    d13c:	f013 fd14 	bl	20b68 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    d140:	2210      	movs	r2, #16
    d142:	a914      	add	r1, sp, #80	; 0x50
    d144:	f011 fe55 	bl	1edf2 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    d148:	462a      	mov	r2, r5
    d14a:	4631      	mov	r1, r6
    d14c:	4620      	mov	r0, r4
    d14e:	f7ff fe6f 	bl	ce30 <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    d152:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    d156:	2101      	movs	r1, #1
    d158:	f013 f926 	bl	203a8 <atomic_set_bit>
	return 0;
    d15c:	4628      	mov	r0, r5
}
    d15e:	b023      	add	sp, #140	; 0x8c
    d160:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    d164:	f011 fe70 	bl	1ee48 <memset>
    d168:	e7c5      	b.n	d0f6 <compute_and_check_and_send_slave_dhcheck+0x14e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    d16a:	200b      	movs	r0, #11
    d16c:	e7f7      	b.n	d15e <compute_and_check_and_send_slave_dhcheck+0x1b6>
    d16e:	bf00      	nop
    d170:	00021ca6 	.word	0x00021ca6
    d174:	0002563c 	.word	0x0002563c

0000d178 <sc_send_public_key>:
{
    d178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d17a:	210c      	movs	r1, #12
{
    d17c:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    d17e:	f013 f9e4 	bl	2054a <smp_create_pdu.isra.0>
	if (!req_buf) {
    d182:	4604      	mov	r4, r0
    d184:	b1b0      	cbz	r0, d1b4 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    d186:	2140      	movs	r1, #64	; 0x40
    d188:	3008      	adds	r0, #8
    d18a:	f013 fced 	bl	20b68 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d18e:	4f0a      	ldr	r7, [pc, #40]	; (d1b8 <sc_send_public_key+0x40>)
    d190:	2220      	movs	r2, #32
    d192:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    d194:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    d196:	f011 fe2c 	bl	1edf2 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    d19a:	6839      	ldr	r1, [r7, #0]
    d19c:	2220      	movs	r2, #32
    d19e:	4411      	add	r1, r2
    d1a0:	18b0      	adds	r0, r6, r2
    d1a2:	f011 fe26 	bl	1edf2 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    d1a6:	4628      	mov	r0, r5
    d1a8:	2200      	movs	r2, #0
    d1aa:	4621      	mov	r1, r4
    d1ac:	f7ff fe40 	bl	ce30 <smp_send.isra.0>
	return 0;
    d1b0:	2000      	movs	r0, #0
}
    d1b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    d1b4:	2008      	movs	r0, #8
    d1b6:	e7fc      	b.n	d1b2 <sc_send_public_key+0x3a>
    d1b8:	20001600 	.word	0x20001600

0000d1bc <smp_ident_info>:
{
    d1bc:	b570      	push	{r4, r5, r6, lr}
    d1be:	460b      	mov	r3, r1
    d1c0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d1c2:	210c      	movs	r1, #12
    d1c4:	30bc      	adds	r0, #188	; 0xbc
    d1c6:	f013 f9b7 	bl	20538 <atomic_test_bit>
    d1ca:	b308      	cbz	r0, d210 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    d1cc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    d1ce:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    d1d0:	f103 0588 	add.w	r5, r3, #136	; 0x88
    d1d4:	7a19      	ldrb	r1, [r3, #8]
    d1d6:	462a      	mov	r2, r5
    d1d8:	2002      	movs	r0, #2
    d1da:	f013 fc5a 	bl	20a92 <bt_keys_get_type>
		if (!keys) {
    d1de:	b990      	cbnz	r0, d206 <smp_ident_info+0x4a>
    d1e0:	4a0f      	ldr	r2, [pc, #60]	; (d220 <smp_ident_info+0x64>)
    d1e2:	4c10      	ldr	r4, [pc, #64]	; (d224 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    d1e4:	4628      	mov	r0, r5
    d1e6:	1aa4      	subs	r4, r4, r2
    d1e8:	f7f9 f9b2 	bl	6550 <bt_addr_le_str_real>
    d1ec:	f7f6 fc2c 	bl	3a48 <log_strdup>
    d1f0:	08e4      	lsrs	r4, r4, #3
    d1f2:	01a4      	lsls	r4, r4, #6
    d1f4:	f044 0401 	orr.w	r4, r4, #1
    d1f8:	4601      	mov	r1, r0
    d1fa:	4622      	mov	r2, r4
    d1fc:	480a      	ldr	r0, [pc, #40]	; (d228 <smp_ident_info+0x6c>)
    d1fe:	f00f fe43 	bl	1ce88 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d202:	2008      	movs	r0, #8
}
    d204:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    d206:	2210      	movs	r2, #16
    d208:	4631      	mov	r1, r6
    d20a:	302a      	adds	r0, #42	; 0x2a
    d20c:	f011 fdf1 	bl	1edf2 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    d210:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    d214:	2109      	movs	r1, #9
    d216:	f013 f8c7 	bl	203a8 <atomic_set_bit>
	return 0;
    d21a:	2000      	movs	r0, #0
    d21c:	e7f2      	b.n	d204 <smp_ident_info+0x48>
    d21e:	bf00      	nop
    d220:	00021aac 	.word	0x00021aac
    d224:	00021b9c 	.word	0x00021b9c
    d228:	0002534b 	.word	0x0002534b

0000d22c <smp_encrypt_info>:
{
    d22c:	b570      	push	{r4, r5, r6, lr}
    d22e:	460b      	mov	r3, r1
    d230:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d232:	210c      	movs	r1, #12
    d234:	30bc      	adds	r0, #188	; 0xbc
    d236:	f013 f97f 	bl	20538 <atomic_test_bit>
    d23a:	b308      	cbz	r0, d280 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    d23c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    d23e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    d240:	f103 0588 	add.w	r5, r3, #136	; 0x88
    d244:	7a19      	ldrb	r1, [r3, #8]
    d246:	462a      	mov	r2, r5
    d248:	2004      	movs	r0, #4
    d24a:	f013 fc22 	bl	20a92 <bt_keys_get_type>
		if (!keys) {
    d24e:	b990      	cbnz	r0, d276 <smp_encrypt_info+0x4a>
    d250:	4a0f      	ldr	r2, [pc, #60]	; (d290 <smp_encrypt_info+0x64>)
    d252:	4c10      	ldr	r4, [pc, #64]	; (d294 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    d254:	4628      	mov	r0, r5
    d256:	1aa4      	subs	r4, r4, r2
    d258:	f7f9 f97a 	bl	6550 <bt_addr_le_str_real>
    d25c:	f7f6 fbf4 	bl	3a48 <log_strdup>
    d260:	08e4      	lsrs	r4, r4, #3
    d262:	01a4      	lsls	r4, r4, #6
    d264:	f044 0401 	orr.w	r4, r4, #1
    d268:	4601      	mov	r1, r0
    d26a:	4622      	mov	r2, r4
    d26c:	480a      	ldr	r0, [pc, #40]	; (d298 <smp_encrypt_info+0x6c>)
    d26e:	f00f fe0b 	bl	1ce88 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d272:	2008      	movs	r0, #8
}
    d274:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    d276:	2210      	movs	r2, #16
    d278:	4631      	mov	r1, r6
    d27a:	301a      	adds	r0, #26
    d27c:	f011 fdb9 	bl	1edf2 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    d280:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    d284:	2107      	movs	r1, #7
    d286:	f013 f88f 	bl	203a8 <atomic_set_bit>
	return 0;
    d28a:	2000      	movs	r0, #0
    d28c:	e7f2      	b.n	d274 <smp_encrypt_info+0x48>
    d28e:	bf00      	nop
    d290:	00021aac 	.word	0x00021aac
    d294:	00021b9c 	.word	0x00021b9c
    d298:	0002534b 	.word	0x0002534b

0000d29c <smp_pairing_req>:
{
    d29c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    d2a0:	688d      	ldr	r5, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d2a2:	78eb      	ldrb	r3, [r5, #3]
    d2a4:	3b07      	subs	r3, #7
    d2a6:	2b09      	cmp	r3, #9
{
    d2a8:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    d2aa:	d904      	bls.n	d2b6 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    d2ac:	2506      	movs	r5, #6
}
    d2ae:	4628      	mov	r0, r5
    d2b0:	b002      	add	sp, #8
    d2b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    d2b6:	6807      	ldr	r7, [r0, #0]
	if (!conn->le.keys) {
    d2b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    d2bc:	b163      	cbz	r3, d2d8 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    d2be:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
    d2c2:	210e      	movs	r1, #14
    d2c4:	4630      	mov	r0, r6
    d2c6:	f013 f937 	bl	20538 <atomic_test_bit>
    d2ca:	b980      	cbnz	r0, d2ee <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    d2cc:	4620      	mov	r0, r4
    d2ce:	f7ff fd91 	bl	cdf4 <smp_init>
		if (ret) {
    d2d2:	b160      	cbz	r0, d2ee <smp_pairing_req+0x52>
			return ret;
    d2d4:	b2c5      	uxtb	r5, r0
    d2d6:	e7ea      	b.n	d2ae <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d2d8:	7a38      	ldrb	r0, [r7, #8]
    d2da:	f107 0188 	add.w	r1, r7, #136	; 0x88
    d2de:	f001 f9c1 	bl	e664 <bt_keys_get_addr>
    d2e2:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if (!conn->le.keys) {
    d2e6:	2800      	cmp	r0, #0
    d2e8:	d1e9      	bne.n	d2be <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    d2ea:	2508      	movs	r5, #8
    d2ec:	e7df      	b.n	d2ae <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d2ee:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    d2f0:	2206      	movs	r2, #6
    d2f2:	4629      	mov	r1, r5
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    d2f4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    d2f8:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    d2fc:	f011 fd79 	bl	1edf2 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    d300:	2302      	movs	r3, #2
    d302:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    d306:	78a8      	ldrb	r0, [r5, #2]
    d308:	f7ff fd1c 	bl	cd44 <get_auth.isra.0>
    d30c:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    d310:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    d312:	f7ff fcb1 	bl	cc78 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d316:	4bb4      	ldr	r3, [pc, #720]	; (d5e8 <smp_pairing_req+0x34c>)
	rsp->io_capability = get_io_capa();
    d318:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    d31c:	781b      	ldrb	r3, [r3, #0]
    d31e:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    d322:	2310      	movs	r3, #16
    d324:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    d328:	792b      	ldrb	r3, [r5, #4]
    d32a:	f003 0307 	and.w	r3, r3, #7
    d32e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d332:	796b      	ldrb	r3, [r5, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d334:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    d338:	f003 0307 	and.w	r3, r3, #7
    d33c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    d340:	d012      	beq.n	d368 <smp_pairing_req+0xcc>
    d342:	78ab      	ldrb	r3, [r5, #2]
    d344:	0719      	lsls	r1, r3, #28
    d346:	d50f      	bpl.n	d368 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    d348:	2105      	movs	r1, #5
    d34a:	4630      	mov	r0, r6
    d34c:	f013 f82c 	bl	203a8 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    d350:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    d354:	f003 0306 	and.w	r3, r3, #6
    d358:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    d35c:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    d360:	f003 0306 	and.w	r3, r3, #6
    d364:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    d368:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d36c:	069a      	lsls	r2, r3, #26
    d36e:	d506      	bpl.n	d37e <smp_pairing_req+0xe2>
    d370:	78ab      	ldrb	r3, [r5, #2]
    d372:	069b      	lsls	r3, r3, #26
    d374:	d503      	bpl.n	d37e <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    d376:	2113      	movs	r1, #19
    d378:	4630      	mov	r0, r6
    d37a:	f013 f815 	bl	203a8 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    d37e:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    d382:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    d386:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    d38a:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    d38e:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d392:	07d8      	lsls	r0, r3, #31
    d394:	d506      	bpl.n	d3a4 <smp_pairing_req+0x108>
    d396:	78ab      	ldrb	r3, [r5, #2]
    d398:	07d9      	lsls	r1, r3, #31
    d39a:	d503      	bpl.n	d3a4 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    d39c:	210c      	movs	r1, #12
    d39e:	4630      	mov	r0, r6
    d3a0:	f013 f802 	bl	203a8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    d3a4:	2103      	movs	r1, #3
    d3a6:	4630      	mov	r0, r6
    d3a8:	f012 fffe 	bl	203a8 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d3ac:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    d3ae:	782d      	ldrb	r5, [r5, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d3b0:	f013 f8c2 	bl	20538 <atomic_test_bit>
    d3b4:	f8d4 8000 	ldr.w	r8, [r4]
    d3b8:	2800      	cmp	r0, #0
    d3ba:	d151      	bne.n	d460 <smp_pairing_req+0x1c4>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d3bc:	2d04      	cmp	r5, #4
    d3be:	d81d      	bhi.n	d3fc <smp_pairing_req+0x160>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d3c0:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    d3c4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    d3c8:	4013      	ands	r3, r2
    d3ca:	07da      	lsls	r2, r3, #31
    d3cc:	d465      	bmi.n	d49a <smp_pairing_req+0x1fe>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d3ce:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    d3d2:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    d3d6:	4318      	orrs	r0, r3
    d3d8:	f010 0004 	ands.w	r0, r0, #4
    d3dc:	d00e      	beq.n	d3fc <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    d3de:	f7ff fc4b 	bl	cc78 <get_io_capa>
    d3e2:	4b82      	ldr	r3, [pc, #520]	; (d5ec <smp_pairing_req+0x350>)
    d3e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d3e8:	441d      	add	r5, r3
    d3ea:	5c28      	ldrb	r0, [r5, r0]
	if (method == PASSKEY_ROLE) {
    d3ec:	2804      	cmp	r0, #4
    d3ee:	d105      	bne.n	d3fc <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    d3f0:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    d3f4:	2b00      	cmp	r3, #0
    d3f6:	bf0c      	ite	eq
    d3f8:	2002      	moveq	r0, #2
    d3fa:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    d3fc:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    d400:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    d404:	b93b      	cbnz	r3, d416 <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    d406:	f898 0008 	ldrb.w	r0, [r8, #8]
    d40a:	f108 0188 	add.w	r1, r8, #136	; 0x88
    d40e:	f001 f929 	bl	e664 <bt_keys_get_addr>
    d412:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    d416:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    d41a:	2a00      	cmp	r2, #0
    d41c:	d143      	bne.n	d4a6 <smp_pairing_req+0x20a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d41e:	2105      	movs	r1, #5
    d420:	4630      	mov	r0, r6
    d422:	f013 f889 	bl	20538 <atomic_test_bit>
    d426:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d42a:	2800      	cmp	r0, #0
    d42c:	f040 80f2 	bne.w	d614 <smp_pairing_req+0x378>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d430:	461d      	mov	r5, r3
    d432:	2b00      	cmp	r3, #0
    d434:	d155      	bne.n	d4e2 <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d436:	210e      	movs	r1, #14
    d438:	4630      	mov	r0, r6
    d43a:	f013 f87d 	bl	20538 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d43e:	2800      	cmp	r0, #0
    d440:	d14f      	bne.n	d4e2 <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d442:	4f6b      	ldr	r7, [pc, #428]	; (d5f0 <smp_pairing_req+0x354>)
    d444:	683b      	ldr	r3, [r7, #0]
    d446:	2b00      	cmp	r3, #0
    d448:	d04b      	beq.n	d4e2 <smp_pairing_req+0x246>
	    bt_auth && bt_auth->pairing_confirm) {
    d44a:	695b      	ldr	r3, [r3, #20]
    d44c:	2b00      	cmp	r3, #0
    d44e:	d048      	beq.n	d4e2 <smp_pairing_req+0x246>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d450:	4630      	mov	r0, r6
    d452:	2109      	movs	r1, #9
    d454:	f012 ffa8 	bl	203a8 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    d458:	683b      	ldr	r3, [r7, #0]
    d45a:	6820      	ldr	r0, [r4, #0]
    d45c:	695b      	ldr	r3, [r3, #20]
    d45e:	e0b6      	b.n	d5ce <smp_pairing_req+0x332>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    d460:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    d464:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    d468:	ea00 0302 	and.w	r3, r0, r2
    d46c:	071b      	lsls	r3, r3, #28
    d46e:	d506      	bpl.n	d47e <smp_pairing_req+0x1e2>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    d470:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    d474:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    d478:	430b      	orrs	r3, r1
    d47a:	07d9      	lsls	r1, r3, #31
    d47c:	d40f      	bmi.n	d49e <smp_pairing_req+0x202>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    d47e:	2d04      	cmp	r5, #4
    d480:	d80f      	bhi.n	d4a2 <smp_pairing_req+0x206>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    d482:	4310      	orrs	r0, r2
    d484:	f010 0004 	ands.w	r0, r0, #4
    d488:	d0b8      	beq.n	d3fc <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    d48a:	f7ff fbf5 	bl	cc78 <get_io_capa>
    d48e:	4b59      	ldr	r3, [pc, #356]	; (d5f4 <smp_pairing_req+0x358>)
    d490:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    d494:	441d      	add	r5, r3
    d496:	5c28      	ldrb	r0, [r5, r0]
    d498:	e7b0      	b.n	d3fc <smp_pairing_req+0x160>
		return LEGACY_OOB;
    d49a:	2006      	movs	r0, #6
    d49c:	e7ae      	b.n	d3fc <smp_pairing_req+0x160>
			return LE_SC_OOB;
    d49e:	2005      	movs	r0, #5
    d4a0:	e7ac      	b.n	d3fc <smp_pairing_req+0x160>
		return JUST_WORKS;
    d4a2:	2000      	movs	r0, #0
    d4a4:	e7aa      	b.n	d3fc <smp_pairing_req+0x160>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    d4a6:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    d4a8:	f011 0f24 	tst.w	r1, #36	; 0x24
    d4ac:	d0b7      	beq.n	d41e <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    d4ae:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    d4b2:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    d4b6:	7b12      	ldrb	r2, [r2, #12]
    d4b8:	4283      	cmp	r3, r0
    d4ba:	bf28      	it	cs
    d4bc:	4603      	movcs	r3, r0
    d4be:	429a      	cmp	r2, r3
    d4c0:	d901      	bls.n	d4c6 <smp_pairing_req+0x22a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    d4c2:	2503      	movs	r5, #3
    d4c4:	e6f3      	b.n	d2ae <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    d4c6:	068a      	lsls	r2, r1, #26
    d4c8:	d404      	bmi.n	d4d4 <smp_pairing_req+0x238>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    d4ca:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    d4ce:	2b00      	cmp	r3, #0
    d4d0:	d1a5      	bne.n	d41e <smp_pairing_req+0x182>
    d4d2:	e7f6      	b.n	d4c2 <smp_pairing_req+0x226>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    d4d4:	2105      	movs	r1, #5
    d4d6:	4630      	mov	r0, r6
    d4d8:	f013 f82e 	bl	20538 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    d4dc:	2800      	cmp	r0, #0
    d4de:	d1f4      	bne.n	d4ca <smp_pairing_req+0x22e>
    d4e0:	e7ef      	b.n	d4c2 <smp_pairing_req+0x226>
	ret = send_pairing_rsp(smp);
    d4e2:	4620      	mov	r0, r4
    d4e4:	f013 f86a 	bl	205bc <send_pairing_rsp>
	if (ret) {
    d4e8:	4605      	mov	r5, r0
    d4ea:	2800      	cmp	r0, #0
    d4ec:	f47f aedf 	bne.w	d2ae <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    d4f0:	2103      	movs	r1, #3
    d4f2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    d4f6:	f012 ff57 	bl	203a8 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    d4fa:	6827      	ldr	r7, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    d4fc:	f107 0188 	add.w	r1, r7, #136	; 0x88
    d500:	7a38      	ldrb	r0, [r7, #8]
    d502:	f001 f973 	bl	e7ec <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    d506:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    d50a:	b170      	cbz	r0, d52a <smp_pairing_req+0x28e>
    d50c:	7b43      	ldrb	r3, [r0, #13]
    d50e:	07db      	lsls	r3, r3, #31
    d510:	d50b      	bpl.n	d52a <smp_pairing_req+0x28e>
    d512:	b951      	cbnz	r1, d52a <smp_pairing_req+0x28e>
    d514:	4b38      	ldr	r3, [pc, #224]	; (d5f8 <smp_pairing_req+0x35c>)
    d516:	4939      	ldr	r1, [pc, #228]	; (d5fc <smp_pairing_req+0x360>)
		BT_ERR("JustWorks failed, authenticated keys present");
    d518:	4839      	ldr	r0, [pc, #228]	; (d600 <smp_pairing_req+0x364>)
    d51a:	1ac9      	subs	r1, r1, r3
    d51c:	08c9      	lsrs	r1, r1, #3
    d51e:	0189      	lsls	r1, r1, #6
    d520:	f041 0101 	orr.w	r1, r1, #1
    d524:	f00f fca3 	bl	1ce6e <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    d528:	e6df      	b.n	d2ea <smp_pairing_req+0x4e>
	switch (smp->method) {
    d52a:	2906      	cmp	r1, #6
    d52c:	d851      	bhi.n	d5d2 <smp_pairing_req+0x336>
    d52e:	e8df f001 	tbb	[pc, r1]
    d532:	466d      	.short	0x466d
    d534:	50505018 	.word	0x50505018
    d538:	04          	.byte	0x04
    d539:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    d53a:	4f2d      	ldr	r7, [pc, #180]	; (d5f0 <smp_pairing_req+0x354>)
    d53c:	683b      	ldr	r3, [r7, #0]
    d53e:	2b00      	cmp	r3, #0
    d540:	d066      	beq.n	d610 <smp_pairing_req+0x374>
    d542:	68db      	ldr	r3, [r3, #12]
    d544:	2b00      	cmp	r3, #0
    d546:	d063      	beq.n	d610 <smp_pairing_req+0x374>
			struct bt_conn_oob_info info = {
    d548:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d54a:	4630      	mov	r0, r6
    d54c:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
    d54e:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d552:	f012 ff29 	bl	203a8 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    d556:	683b      	ldr	r3, [r7, #0]
    d558:	6820      	ldr	r0, [r4, #0]
    d55a:	68db      	ldr	r3, [r3, #12]
    d55c:	a901      	add	r1, sp, #4
    d55e:	4798      	blx	r3
		break;
    d560:	e6a5      	b.n	d2ae <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    d562:	2104      	movs	r1, #4
    d564:	eb0d 0001 	add.w	r0, sp, r1
    d568:	f004 f92c 	bl	117c4 <bt_rand>
    d56c:	2800      	cmp	r0, #0
    d56e:	f47f aebc 	bne.w	d2ea <smp_pairing_req+0x4e>
			passkey %= 1000000;
    d572:	9901      	ldr	r1, [sp, #4]
    d574:	4a23      	ldr	r2, [pc, #140]	; (d604 <smp_pairing_req+0x368>)
		if (bt_auth && bt_auth->passkey_display) {
    d576:	f8df 8078 	ldr.w	r8, [pc, #120]	; d5f0 <smp_pairing_req+0x354>
			passkey %= 1000000;
    d57a:	fbb1 f3f2 	udiv	r3, r1, r2
    d57e:	fb02 1313 	mls	r3, r2, r3, r1
    d582:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    d584:	f8d8 3000 	ldr.w	r3, [r8]
    d588:	b15b      	cbz	r3, d5a2 <smp_pairing_req+0x306>
    d58a:	681b      	ldr	r3, [r3, #0]
    d58c:	b14b      	cbz	r3, d5a2 <smp_pairing_req+0x306>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    d58e:	210a      	movs	r1, #10
    d590:	4630      	mov	r0, r6
    d592:	f012 ff09 	bl	203a8 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    d596:	f8d8 3000 	ldr.w	r3, [r8]
    d59a:	9901      	ldr	r1, [sp, #4]
    d59c:	681b      	ldr	r3, [r3, #0]
    d59e:	4638      	mov	r0, r7
    d5a0:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    d5a2:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    d5a4:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    d5a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    d5ac:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d5ae:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    d5b2:	0a1b      	lsrs	r3, r3, #8
    d5b4:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    d5b8:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
    d5bc:	e677      	b.n	d2ae <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    d5be:	4630      	mov	r0, r6
    d5c0:	2109      	movs	r1, #9
    d5c2:	f012 fef1 	bl	203a8 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    d5c6:	4b0a      	ldr	r3, [pc, #40]	; (d5f0 <smp_pairing_req+0x354>)
    d5c8:	681b      	ldr	r3, [r3, #0]
    d5ca:	685b      	ldr	r3, [r3, #4]
    d5cc:	4638      	mov	r0, r7
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    d5ce:	4798      	blx	r3
		return 0;
    d5d0:	e66d      	b.n	d2ae <smp_pairing_req+0x12>
    d5d2:	4b09      	ldr	r3, [pc, #36]	; (d5f8 <smp_pairing_req+0x35c>)
    d5d4:	4a09      	ldr	r2, [pc, #36]	; (d5fc <smp_pairing_req+0x360>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    d5d6:	480c      	ldr	r0, [pc, #48]	; (d608 <smp_pairing_req+0x36c>)
    d5d8:	1ad2      	subs	r2, r2, r3
    d5da:	08d2      	lsrs	r2, r2, #3
    d5dc:	0192      	lsls	r2, r2, #6
    d5de:	f042 0201 	orr.w	r2, r2, #1
    d5e2:	f00f fc51 	bl	1ce88 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    d5e6:	e680      	b.n	d2ea <smp_pairing_req+0x4e>
    d5e8:	2000307a 	.word	0x2000307a
    d5ec:	0002560a 	.word	0x0002560a
    d5f0:	20001574 	.word	0x20001574
    d5f4:	00025623 	.word	0x00025623
    d5f8:	00021aac 	.word	0x00021aac
    d5fc:	00021b9c 	.word	0x00021b9c
    d600:	00025365 	.word	0x00025365
    d604:	000f4240 	.word	0x000f4240
    d608:	00025392 	.word	0x00025392
	switch (smp->method) {
    d60c:	460d      	mov	r5, r1
    d60e:	e64e      	b.n	d2ae <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    d610:	2502      	movs	r5, #2
    d612:	e64c      	b.n	d2ae <smp_pairing_req+0x12>
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    d614:	7aba      	ldrb	r2, [r7, #10]
    d616:	2a04      	cmp	r2, #4
    d618:	461d      	mov	r5, r3
    d61a:	d116      	bne.n	d64a <smp_pairing_req+0x3ae>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    d61c:	2b00      	cmp	r3, #0
    d61e:	f43f af50 	beq.w	d4c2 <smp_pairing_req+0x226>
	return MIN(req->max_key_size, rsp->max_key_size);
    d622:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    d626:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
    d62a:	4293      	cmp	r3, r2
    d62c:	bf28      	it	cs
    d62e:	4613      	movcs	r3, r2
    d630:	2b10      	cmp	r3, #16
    d632:	f47f ae3b 	bne.w	d2ac <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    d636:	210c      	movs	r1, #12
    d638:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    d63c:	f012 feb4 	bl	203a8 <atomic_set_bit>
	return send_pairing_rsp(smp);
    d640:	4620      	mov	r0, r4
    d642:	f012 ffbb 	bl	205bc <send_pairing_rsp>
    d646:	4605      	mov	r5, r0
    d648:	e631      	b.n	d2ae <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d64a:	2b00      	cmp	r3, #0
    d64c:	d1f3      	bne.n	d636 <smp_pairing_req+0x39a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d64e:	210e      	movs	r1, #14
    d650:	4630      	mov	r0, r6
    d652:	f012 ff71 	bl	20538 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    d656:	2800      	cmp	r0, #0
    d658:	d1ed      	bne.n	d636 <smp_pairing_req+0x39a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    d65a:	4f04      	ldr	r7, [pc, #16]	; (d66c <smp_pairing_req+0x3d0>)
    d65c:	683b      	ldr	r3, [r7, #0]
    d65e:	2b00      	cmp	r3, #0
    d660:	d0e9      	beq.n	d636 <smp_pairing_req+0x39a>
	    bt_auth && bt_auth->pairing_confirm) {
    d662:	695b      	ldr	r3, [r3, #20]
    d664:	2b00      	cmp	r3, #0
    d666:	d0e6      	beq.n	d636 <smp_pairing_req+0x39a>
    d668:	e6f2      	b.n	d450 <smp_pairing_req+0x1b4>
    d66a:	bf00      	nop
    d66c:	20001574 	.word	0x20001574

0000d670 <smp_pairing_complete>:
{
    d670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d672:	4e24      	ldr	r6, [pc, #144]	; (d704 <smp_pairing_complete+0x94>)
    d674:	4604      	mov	r4, r0
    d676:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (!status) {
    d67a:	b9b1      	cbnz	r1, d6aa <smp_pairing_complete+0x3a>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    d67c:	210c      	movs	r1, #12
    d67e:	4638      	mov	r0, r7
    d680:	f012 ff5a 	bl	20538 <atomic_test_bit>
		if (bond_flag) {
    d684:	4605      	mov	r5, r0
    d686:	b120      	cbz	r0, d692 <smp_pairing_complete+0x22>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    d688:	6823      	ldr	r3, [r4, #0]
    d68a:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    d68e:	f001 f9a1 	bl	e9d4 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    d692:	6833      	ldr	r3, [r6, #0]
    d694:	b123      	cbz	r3, d6a0 <smp_pairing_complete+0x30>
    d696:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    d698:	b113      	cbz	r3, d6a0 <smp_pairing_complete+0x30>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    d69a:	6820      	ldr	r0, [r4, #0]
    d69c:	4629      	mov	r1, r5
    d69e:	4798      	blx	r3
	smp_reset(smp);
    d6a0:	4620      	mov	r0, r4
}
    d6a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	smp_reset(smp);
    d6a6:	f012 bfe3 	b.w	20670 <smp_reset>
	switch (smp_err) {
    d6aa:	3901      	subs	r1, #1
    d6ac:	b2c9      	uxtb	r1, r1
    d6ae:	290d      	cmp	r1, #13
    d6b0:	bf9c      	itt	ls
    d6b2:	4b15      	ldrls	r3, [pc, #84]	; (d708 <smp_pairing_complete+0x98>)
    d6b4:	5c5d      	ldrbls	r5, [r3, r1]
		if (smp->chan.chan.conn->le.keys &&
    d6b6:	6803      	ldr	r3, [r0, #0]
    d6b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    d6bc:	bf88      	it	hi
    d6be:	2508      	movhi	r5, #8
		if (smp->chan.chan.conn->le.keys &&
    d6c0:	b153      	cbz	r3, d6d8 <smp_pairing_complete+0x68>
    d6c2:	7b1b      	ldrb	r3, [r3, #12]
    d6c4:	b9b3      	cbnz	r3, d6f4 <smp_pairing_complete+0x84>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    d6c6:	6823      	ldr	r3, [r4, #0]
    d6c8:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    d6cc:	f001 f89e 	bl	e80c <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    d6d0:	6823      	ldr	r3, [r4, #0]
    d6d2:	2200      	movs	r2, #0
    d6d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    d6d8:	2102      	movs	r1, #2
    d6da:	4638      	mov	r0, r7
    d6dc:	f012 ff2c 	bl	20538 <atomic_test_bit>
    d6e0:	b918      	cbnz	r0, d6ea <smp_pairing_complete+0x7a>
			bt_conn_security_changed(smp->chan.chan.conn, auth_err);
    d6e2:	6820      	ldr	r0, [r4, #0]
    d6e4:	4629      	mov	r1, r5
    d6e6:	f7fc f843 	bl	9770 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    d6ea:	6833      	ldr	r3, [r6, #0]
    d6ec:	2b00      	cmp	r3, #0
    d6ee:	d0d7      	beq.n	d6a0 <smp_pairing_complete+0x30>
    d6f0:	69db      	ldr	r3, [r3, #28]
    d6f2:	e7d1      	b.n	d698 <smp_pairing_complete+0x28>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    d6f4:	2102      	movs	r1, #2
    d6f6:	4638      	mov	r0, r7
    d6f8:	f012 ff1e 	bl	20538 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    d6fc:	2800      	cmp	r0, #0
    d6fe:	d1e2      	bne.n	d6c6 <smp_pairing_complete+0x56>
    d700:	e7ea      	b.n	d6d8 <smp_pairing_complete+0x68>
    d702:	bf00      	nop
    d704:	20001574 	.word	0x20001574
    d708:	000255fc 	.word	0x000255fc

0000d70c <bt_smp_dhkey_ready>:
{
    d70c:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    d70e:	2107      	movs	r1, #7
{
    d710:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    d712:	4816      	ldr	r0, [pc, #88]	; (d76c <bt_smp_dhkey_ready+0x60>)
    d714:	f012 ff94 	bl	20640 <atomic_test_and_clear_bit>
    d718:	b338      	cbz	r0, d76a <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    d71a:	b92c      	cbnz	r4, d728 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    d71c:	210b      	movs	r1, #11
}
    d71e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    d722:	4813      	ldr	r0, [pc, #76]	; (d770 <bt_smp_dhkey_ready+0x64>)
    d724:	f012 bfcf 	b.w	206c6 <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    d728:	4621      	mov	r1, r4
    d72a:	4812      	ldr	r0, [pc, #72]	; (d774 <bt_smp_dhkey_ready+0x68>)
    d72c:	2220      	movs	r2, #32
    d72e:	f011 fb60 	bl	1edf2 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    d732:	480e      	ldr	r0, [pc, #56]	; (d76c <bt_smp_dhkey_ready+0x60>)
    d734:	2109      	movs	r1, #9
    d736:	f012 feff 	bl	20538 <atomic_test_bit>
    d73a:	b128      	cbz	r0, d748 <bt_smp_dhkey_ready+0x3c>
}
    d73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    d740:	480a      	ldr	r0, [pc, #40]	; (d76c <bt_smp_dhkey_ready+0x60>)
    d742:	2108      	movs	r1, #8
    d744:	f012 be30 	b.w	203a8 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    d748:	4808      	ldr	r0, [pc, #32]	; (d76c <bt_smp_dhkey_ready+0x60>)
    d74a:	210f      	movs	r1, #15
    d74c:	f012 fef4 	bl	20538 <atomic_test_bit>
    d750:	2800      	cmp	r0, #0
    d752:	d1f3      	bne.n	d73c <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    d754:	4805      	ldr	r0, [pc, #20]	; (d76c <bt_smp_dhkey_ready+0x60>)
    d756:	2108      	movs	r1, #8
    d758:	f012 feee 	bl	20538 <atomic_test_bit>
    d75c:	b128      	cbz	r0, d76a <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    d75e:	4804      	ldr	r0, [pc, #16]	; (d770 <bt_smp_dhkey_ready+0x64>)
    d760:	f7ff fc22 	bl	cfa8 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    d764:	4601      	mov	r1, r0
    d766:	2800      	cmp	r0, #0
    d768:	d1d9      	bne.n	d71e <bt_smp_dhkey_ready+0x12>
}
    d76a:	bd10      	pop	{r4, pc}
    d76c:	20000f4c 	.word	0x20000f4c
    d770:	20000e90 	.word	0x20000e90
    d774:	20000fdf 	.word	0x20000fdf

0000d778 <bt_smp_recv>:
{
    d778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    d77a:	898b      	ldrh	r3, [r1, #12]
{
    d77c:	4604      	mov	r4, r0
    d77e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    d780:	b95b      	cbnz	r3, d79a <bt_smp_recv+0x22>
    d782:	4935      	ldr	r1, [pc, #212]	; (d858 <bt_smp_recv+0xe0>)
    d784:	4b35      	ldr	r3, [pc, #212]	; (d85c <bt_smp_recv+0xe4>)
		BT_ERR("Too small SMP PDU received");
    d786:	4836      	ldr	r0, [pc, #216]	; (d860 <bt_smp_recv+0xe8>)
    d788:	1ac9      	subs	r1, r1, r3
    d78a:	08c9      	lsrs	r1, r1, #3
    d78c:	0189      	lsls	r1, r1, #6
    d78e:	f041 0101 	orr.w	r1, r1, #1
    d792:	f00f fb6c 	bl	1ce6e <log_0>
}
    d796:	2000      	movs	r0, #0
    d798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    d79a:	2101      	movs	r1, #1
    d79c:	f105 0008 	add.w	r0, r5, #8
    d7a0:	f013 fa09 	bl	20bb6 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d7a4:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    d7a6:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    d7a8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    d7ac:	f012 fec4 	bl	20538 <atomic_test_bit>
    d7b0:	7831      	ldrb	r1, [r6, #0]
    d7b2:	b150      	cbz	r0, d7ca <bt_smp_recv+0x52>
    d7b4:	4b29      	ldr	r3, [pc, #164]	; (d85c <bt_smp_recv+0xe4>)
    d7b6:	4a28      	ldr	r2, [pc, #160]	; (d858 <bt_smp_recv+0xe0>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    d7b8:	482a      	ldr	r0, [pc, #168]	; (d864 <bt_smp_recv+0xec>)
    d7ba:	1ad2      	subs	r2, r2, r3
    d7bc:	08d2      	lsrs	r2, r2, #3
    d7be:	0192      	lsls	r2, r2, #6
    d7c0:	f042 0202 	orr.w	r2, r2, #2
    d7c4:	f00f fb60 	bl	1ce88 <log_1>
		return 0;
    d7c8:	e7e5      	b.n	d796 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    d7ca:	290d      	cmp	r1, #13
    d7cc:	d803      	bhi.n	d7d6 <bt_smp_recv+0x5e>
    d7ce:	4f26      	ldr	r7, [pc, #152]	; (d868 <bt_smp_recv+0xf0>)
    d7d0:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    d7d4:	b973      	cbnz	r3, d7f4 <bt_smp_recv+0x7c>
    d7d6:	4b21      	ldr	r3, [pc, #132]	; (d85c <bt_smp_recv+0xe4>)
    d7d8:	4a1f      	ldr	r2, [pc, #124]	; (d858 <bt_smp_recv+0xe0>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    d7da:	4824      	ldr	r0, [pc, #144]	; (d86c <bt_smp_recv+0xf4>)
    d7dc:	1ad2      	subs	r2, r2, r3
    d7de:	08d2      	lsrs	r2, r2, #3
    d7e0:	0192      	lsls	r2, r2, #6
    d7e2:	f042 0202 	orr.w	r2, r2, #2
    d7e6:	f00f fb4f 	bl	1ce88 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    d7ea:	2107      	movs	r1, #7
		smp_error(smp, err);
    d7ec:	4620      	mov	r0, r4
    d7ee:	f012 ff6a 	bl	206c6 <smp_error>
    d7f2:	e7d0      	b.n	d796 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    d7f4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    d7f8:	f012 ff22 	bl	20640 <atomic_test_and_clear_bit>
    d7fc:	7831      	ldrb	r1, [r6, #0]
    d7fe:	b970      	cbnz	r0, d81e <bt_smp_recv+0xa6>
    d800:	4b16      	ldr	r3, [pc, #88]	; (d85c <bt_smp_recv+0xe4>)
    d802:	4a15      	ldr	r2, [pc, #84]	; (d858 <bt_smp_recv+0xe0>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    d804:	481a      	ldr	r0, [pc, #104]	; (d870 <bt_smp_recv+0xf8>)
    d806:	1ad2      	subs	r2, r2, r3
    d808:	08d2      	lsrs	r2, r2, #3
    d80a:	0192      	lsls	r2, r2, #6
    d80c:	f042 0202 	orr.w	r2, r2, #2
    d810:	f00f fb3a 	bl	1ce88 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    d814:	7833      	ldrb	r3, [r6, #0]
    d816:	2b05      	cmp	r3, #5
    d818:	d0bd      	beq.n	d796 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    d81a:	2108      	movs	r1, #8
    d81c:	e7e6      	b.n	d7ec <bt_smp_recv+0x74>
	if (buf->len != handlers[hdr->code].expect_len) {
    d81e:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    d822:	89a8      	ldrh	r0, [r5, #12]
    d824:	791b      	ldrb	r3, [r3, #4]
    d826:	4283      	cmp	r3, r0
    d828:	d00d      	beq.n	d846 <bt_smp_recv+0xce>
    d82a:	4a0c      	ldr	r2, [pc, #48]	; (d85c <bt_smp_recv+0xe4>)
    d82c:	4b0a      	ldr	r3, [pc, #40]	; (d858 <bt_smp_recv+0xe0>)
    d82e:	1a9b      	subs	r3, r3, r2
    d830:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    d832:	019b      	lsls	r3, r3, #6
    d834:	460a      	mov	r2, r1
    d836:	f043 0301 	orr.w	r3, r3, #1
    d83a:	4601      	mov	r1, r0
    d83c:	480d      	ldr	r0, [pc, #52]	; (d874 <bt_smp_recv+0xfc>)
    d83e:	f00f fb37 	bl	1ceb0 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    d842:	210a      	movs	r1, #10
    d844:	e7d2      	b.n	d7ec <bt_smp_recv+0x74>
	err = handlers[hdr->code].func(smp, buf);
    d846:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    d84a:	4620      	mov	r0, r4
    d84c:	4629      	mov	r1, r5
    d84e:	4798      	blx	r3
	if (err) {
    d850:	4601      	mov	r1, r0
    d852:	2800      	cmp	r0, #0
    d854:	d09f      	beq.n	d796 <bt_smp_recv+0x1e>
    d856:	e7c9      	b.n	d7ec <bt_smp_recv+0x74>
    d858:	00021b9c 	.word	0x00021b9c
    d85c:	00021aac 	.word	0x00021aac
    d860:	000253ae 	.word	0x000253ae
    d864:	000253c9 	.word	0x000253c9
    d868:	000225a8 	.word	0x000225a8
    d86c:	000253fa 	.word	0x000253fa
    d870:	00025414 	.word	0x00025414
    d874:	00024fc6 	.word	0x00024fc6

0000d878 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    d878:	4b15      	ldr	r3, [pc, #84]	; (d8d0 <bt_smp_pkey_ready+0x58>)
{
    d87a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    d87c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    d87e:	b958      	cbnz	r0, d898 <bt_smp_pkey_ready+0x20>
    d880:	4914      	ldr	r1, [pc, #80]	; (d8d4 <bt_smp_pkey_ready+0x5c>)
    d882:	4b15      	ldr	r3, [pc, #84]	; (d8d8 <bt_smp_pkey_ready+0x60>)
		BT_WARN("Public key not available");
    d884:	4815      	ldr	r0, [pc, #84]	; (d8dc <bt_smp_pkey_ready+0x64>)
    d886:	1ac9      	subs	r1, r1, r3
    d888:	08c9      	lsrs	r1, r1, #3
    d88a:	0189      	lsls	r1, r1, #6
}
    d88c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    d890:	f041 0102 	orr.w	r1, r1, #2
    d894:	f00f baeb 	b.w	1ce6e <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d898:	4c11      	ldr	r4, [pc, #68]	; (d8e0 <bt_smp_pkey_ready+0x68>)
	z_impl_k_sem_give(sem);
    d89a:	4812      	ldr	r0, [pc, #72]	; (d8e4 <bt_smp_pkey_ready+0x6c>)
    d89c:	f00e fa52 	bl	1bd44 <z_impl_k_sem_give>
    d8a0:	f3bf 8f5b 	dmb	ish
    d8a4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    d8a8:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    d8ac:	065b      	lsls	r3, r3, #25
    d8ae:	d50e      	bpl.n	d8ce <bt_smp_pkey_ready+0x56>
	err = sc_send_public_key(smp);
    d8b0:	4620      	mov	r0, r4
    d8b2:	f7ff fc61 	bl	d178 <sc_send_public_key>
	if (err) {
    d8b6:	4601      	mov	r1, r0
    d8b8:	b920      	cbnz	r0, d8c4 <bt_smp_pkey_ready+0x4c>
    d8ba:	4620      	mov	r0, r4
    d8bc:	f7ff fb10 	bl	cee0 <smp_public_key_slave.part.0>
		if (err) {
    d8c0:	4601      	mov	r1, r0
    d8c2:	b120      	cbz	r0, d8ce <bt_smp_pkey_ready+0x56>
}
    d8c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    d8c8:	4805      	ldr	r0, [pc, #20]	; (d8e0 <bt_smp_pkey_ready+0x68>)
    d8ca:	f012 befc 	b.w	206c6 <smp_error>
}
    d8ce:	bd10      	pop	{r4, pc}
    d8d0:	20001600 	.word	0x20001600
    d8d4:	00021b9c 	.word	0x00021b9c
    d8d8:	00021aac 	.word	0x00021aac
    d8dc:	0002542f 	.word	0x0002542f
    d8e0:	20000e90 	.word	0x20000e90
    d8e4:	20000970 	.word	0x20000970

0000d8e8 <smp_pairing_failed>:
{
    d8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d8ea:	4a15      	ldr	r2, [pc, #84]	; (d940 <smp_pairing_failed+0x58>)
    d8ec:	4b15      	ldr	r3, [pc, #84]	; (d944 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    d8ee:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    d8f0:	4605      	mov	r5, r0
    d8f2:	1ad2      	subs	r2, r2, r3
    d8f4:	08d2      	lsrs	r2, r2, #3
    d8f6:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    d8fa:	7831      	ldrb	r1, [r6, #0]
    d8fc:	0192      	lsls	r2, r2, #6
{
    d8fe:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    d900:	f042 0201 	orr.w	r2, r2, #1
    d904:	4810      	ldr	r0, [pc, #64]	; (d948 <smp_pairing_failed+0x60>)
    d906:	f00f fabf 	bl	1ce88 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    d90a:	2109      	movs	r1, #9
    d90c:	4628      	mov	r0, r5
    d90e:	f012 fe97 	bl	20640 <atomic_test_and_clear_bit>
    d912:	b140      	cbz	r0, d926 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    d914:	4b0d      	ldr	r3, [pc, #52]	; (d94c <smp_pairing_failed+0x64>)
    d916:	681b      	ldr	r3, [r3, #0]
    d918:	b963      	cbnz	r3, d934 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    d91a:	4620      	mov	r0, r4
    d91c:	7831      	ldrb	r1, [r6, #0]
    d91e:	f7ff fea7 	bl	d670 <smp_pairing_complete>
}
    d922:	2000      	movs	r0, #0
    d924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    d926:	210a      	movs	r1, #10
    d928:	4628      	mov	r0, r5
    d92a:	f012 fe89 	bl	20640 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    d92e:	2800      	cmp	r0, #0
    d930:	d1f0      	bne.n	d914 <smp_pairing_failed+0x2c>
    d932:	e7f2      	b.n	d91a <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    d934:	691b      	ldr	r3, [r3, #16]
    d936:	2b00      	cmp	r3, #0
    d938:	d0ef      	beq.n	d91a <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    d93a:	4638      	mov	r0, r7
    d93c:	4798      	blx	r3
    d93e:	e7ec      	b.n	d91a <smp_pairing_failed+0x32>
    d940:	00021b9c 	.word	0x00021b9c
    d944:	00021aac 	.word	0x00021aac
    d948:	00025448 	.word	0x00025448
    d94c:	20001574 	.word	0x20001574

0000d950 <smp_timeout>:
    d950:	4b0b      	ldr	r3, [pc, #44]	; (d980 <smp_timeout+0x30>)
    d952:	490c      	ldr	r1, [pc, #48]	; (d984 <smp_timeout+0x34>)
{
    d954:	b510      	push	{r4, lr}
    d956:	1ac9      	subs	r1, r1, r3
    d958:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    d95a:	0189      	lsls	r1, r1, #6
{
    d95c:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    d95e:	f041 0101 	orr.w	r1, r1, #1
    d962:	4809      	ldr	r0, [pc, #36]	; (d988 <smp_timeout+0x38>)
    d964:	f00f fa83 	bl	1ce6e <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    d968:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    d96c:	2108      	movs	r1, #8
    d96e:	f7ff fe7f 	bl	d670 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    d972:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    d976:	2104      	movs	r1, #4
}
    d978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    d97c:	f012 bd14 	b.w	203a8 <atomic_set_bit>
    d980:	00021aac 	.word	0x00021aac
    d984:	00021b9c 	.word	0x00021b9c
    d988:	00025454 	.word	0x00025454

0000d98c <smp_signing_info>:
{
    d98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d98e:	4605      	mov	r5, r0
    d990:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    d992:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    d996:	210c      	movs	r1, #12
    d998:	f012 fdce 	bl	20538 <atomic_test_bit>
    d99c:	b300      	cbz	r0, d9e0 <smp_signing_info+0x54>
					&conn->le.dst);
    d99e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    d9a2:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    d9a4:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    d9a6:	4632      	mov	r2, r6
    d9a8:	2010      	movs	r0, #16
    d9aa:	f013 f872 	bl	20a92 <bt_keys_get_type>
		if (!keys) {
    d9ae:	b990      	cbnz	r0, d9d6 <smp_signing_info+0x4a>
    d9b0:	4a13      	ldr	r2, [pc, #76]	; (da00 <smp_signing_info+0x74>)
    d9b2:	4c14      	ldr	r4, [pc, #80]	; (da04 <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    d9b4:	4630      	mov	r0, r6
    d9b6:	1aa4      	subs	r4, r4, r2
    d9b8:	f7f8 fdca 	bl	6550 <bt_addr_le_str_real>
    d9bc:	f7f6 f844 	bl	3a48 <log_strdup>
    d9c0:	08e4      	lsrs	r4, r4, #3
    d9c2:	01a4      	lsls	r4, r4, #6
    d9c4:	f044 0401 	orr.w	r4, r4, #1
    d9c8:	4601      	mov	r1, r0
    d9ca:	4622      	mov	r2, r4
    d9cc:	480e      	ldr	r0, [pc, #56]	; (da08 <smp_signing_info+0x7c>)
    d9ce:	f00f fa5b 	bl	1ce88 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    d9d2:	2008      	movs	r0, #8
}
    d9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    d9d6:	2210      	movs	r2, #16
    d9d8:	4639      	mov	r1, r7
    d9da:	3054      	adds	r0, #84	; 0x54
    d9dc:	f011 fa09 	bl	1edf2 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    d9e0:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    d9e4:	f023 0304 	bic.w	r3, r3, #4
    d9e8:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
    d9ec:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    d9f0:	b91c      	cbnz	r4, d9fa <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    d9f2:	4621      	mov	r1, r4
    d9f4:	4628      	mov	r0, r5
    d9f6:	f7ff fe3b 	bl	d670 <smp_pairing_complete>
	return 0;
    d9fa:	2000      	movs	r0, #0
    d9fc:	e7ea      	b.n	d9d4 <smp_signing_info+0x48>
    d9fe:	bf00      	nop
    da00:	00021aac 	.word	0x00021aac
    da04:	00021b9c 	.word	0x00021b9c
    da08:	0002534b 	.word	0x0002534b

0000da0c <smp_master_ident>:
{
    da0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    da0e:	4604      	mov	r4, r0
    da10:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    da12:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    da16:	210c      	movs	r1, #12
    da18:	f012 fd8e 	bl	20538 <atomic_test_bit>
    da1c:	b368      	cbz	r0, da7a <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    da1e:	f105 0788 	add.w	r7, r5, #136	; 0x88
    da22:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    da24:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    da26:	463a      	mov	r2, r7
    da28:	2004      	movs	r0, #4
    da2a:	f013 f832 	bl	20a92 <bt_keys_get_type>
		if (!keys) {
    da2e:	4605      	mov	r5, r0
    da30:	b990      	cbnz	r0, da58 <smp_master_ident+0x4c>
    da32:	4a1d      	ldr	r2, [pc, #116]	; (daa8 <smp_master_ident+0x9c>)
    da34:	4c1d      	ldr	r4, [pc, #116]	; (daac <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    da36:	4638      	mov	r0, r7
    da38:	1aa4      	subs	r4, r4, r2
    da3a:	f7f8 fd89 	bl	6550 <bt_addr_le_str_real>
    da3e:	f7f6 f803 	bl	3a48 <log_strdup>
    da42:	08e4      	lsrs	r4, r4, #3
    da44:	01a4      	lsls	r4, r4, #6
    da46:	f044 0401 	orr.w	r4, r4, #1
    da4a:	4601      	mov	r1, r0
    da4c:	4622      	mov	r2, r4
    da4e:	4818      	ldr	r0, [pc, #96]	; (dab0 <smp_master_ident+0xa4>)
    da50:	f00f fa1a 	bl	1ce88 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    da54:	2008      	movs	r0, #8
}
    da56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    da58:	2202      	movs	r2, #2
    da5a:	4631      	mov	r1, r6
    da5c:	3018      	adds	r0, #24
    da5e:	f011 f9c8 	bl	1edf2 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    da62:	2208      	movs	r2, #8
    da64:	1cb1      	adds	r1, r6, #2
    da66:	f105 0010 	add.w	r0, r5, #16
    da6a:	f011 f9c2 	bl	1edf2 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    da6e:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    da72:	f023 0301 	bic.w	r3, r3, #1
    da76:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    da7a:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    da7e:	079a      	lsls	r2, r3, #30
    da80:	d50d      	bpl.n	da9e <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    da82:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    da84:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    da88:	f012 fc8e 	bl	203a8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    da8c:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    da90:	b91d      	cbnz	r5, da9a <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    da92:	4629      	mov	r1, r5
    da94:	4620      	mov	r0, r4
    da96:	f7ff fdeb 	bl	d670 <smp_pairing_complete>
	return 0;
    da9a:	2000      	movs	r0, #0
    da9c:	e7db      	b.n	da56 <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    da9e:	075b      	lsls	r3, r3, #29
    daa0:	d5f4      	bpl.n	da8c <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    daa2:	210a      	movs	r1, #10
    daa4:	e7ee      	b.n	da84 <smp_master_ident+0x78>
    daa6:	bf00      	nop
    daa8:	00021aac 	.word	0x00021aac
    daac:	00021b9c 	.word	0x00021b9c
    dab0:	0002534b 	.word	0x0002534b

0000dab4 <bt_smp_connected>:
{
    dab4:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    dab6:	4905      	ldr	r1, [pc, #20]	; (dacc <bt_smp_connected+0x18>)
{
    dab8:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    daba:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    dabe:	f013 fcbb 	bl	21438 <k_delayed_work_init>
	smp_reset(smp);
    dac2:	4620      	mov	r0, r4
}
    dac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    dac8:	f012 bdd2 	b.w	20670 <smp_reset>
    dacc:	0000d951 	.word	0x0000d951

0000dad0 <bt_smp_encrypt_change>:
{
    dad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    dad4:	4605      	mov	r5, r0
{
    dad6:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    dad8:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    dadc:	b089      	sub	sp, #36	; 0x24
    dade:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    dae0:	2101      	movs	r1, #1
    dae2:	4628      	mov	r0, r5
    dae4:	f012 fcfd 	bl	204e2 <atomic_clear_bit>
	if (hci_status) {
    dae8:	b946      	cbnz	r6, dafc <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    daea:	7afb      	ldrb	r3, [r7, #11]
    daec:	b133      	cbz	r3, dafc <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    daee:	2103      	movs	r1, #3
    daf0:	f012 fd22 	bl	20538 <atomic_test_bit>
    daf4:	b928      	cbnz	r0, db02 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    daf6:	4620      	mov	r0, r4
    daf8:	f012 fdba 	bl	20670 <smp_reset>
}
    dafc:	b009      	add	sp, #36	; 0x24
    dafe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    db02:	2105      	movs	r1, #5
    db04:	4628      	mov	r0, r5
    db06:	f012 fd17 	bl	20538 <atomic_test_bit>
    db0a:	b198      	cbz	r0, db34 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    db0c:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    db10:	071a      	lsls	r2, r3, #28
    db12:	d507      	bpl.n	db24 <bt_smp_encrypt_change+0x54>
    db14:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    db18:	071b      	lsls	r3, r3, #28
    db1a:	d503      	bpl.n	db24 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    db1c:	2110      	movs	r1, #16
    db1e:	4628      	mov	r0, r5
    db20:	f012 fc42 	bl	203a8 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    db24:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    db28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    db2c:	f023 0308 	bic.w	r3, r3, #8
    db30:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    db34:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    db38:	07df      	lsls	r7, r3, #31
    db3a:	d51f      	bpl.n	db7c <bt_smp_encrypt_change+0xac>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    db3c:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    db3e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    db42:	f012 fc31 	bl	203a8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    db46:	2102      	movs	r1, #2
    db48:	4628      	mov	r0, r5
    db4a:	f012 fc2d 	bl	203a8 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    db4e:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    db50:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
	if (!keys) {
    db54:	b9d7      	cbnz	r7, db8c <bt_smp_encrypt_change+0xbc>
    db56:	4a8c      	ldr	r2, [pc, #560]	; (dd88 <bt_smp_encrypt_change+0x2b8>)
    db58:	4c8c      	ldr	r4, [pc, #560]	; (dd8c <bt_smp_encrypt_change+0x2bc>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    db5a:	f106 0088 	add.w	r0, r6, #136	; 0x88
    db5e:	1aa4      	subs	r4, r4, r2
    db60:	f7f8 fcf6 	bl	6550 <bt_addr_le_str_real>
    db64:	f7f5 ff70 	bl	3a48 <log_strdup>
    db68:	08e4      	lsrs	r4, r4, #3
    db6a:	01a4      	lsls	r4, r4, #6
    db6c:	f044 0401 	orr.w	r4, r4, #1
    db70:	4601      	mov	r1, r0
    db72:	4622      	mov	r2, r4
    db74:	4886      	ldr	r0, [pc, #536]	; (dd90 <bt_smp_encrypt_change+0x2c0>)
    db76:	f00f f987 	bl	1ce88 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    db7a:	e7bf      	b.n	dafc <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    db7c:	079e      	lsls	r6, r3, #30
    db7e:	d501      	bpl.n	db84 <bt_smp_encrypt_change+0xb4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    db80:	2108      	movs	r1, #8
    db82:	e7dc      	b.n	db3e <bt_smp_encrypt_change+0x6e>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    db84:	0758      	lsls	r0, r3, #29
    db86:	d5de      	bpl.n	db46 <bt_smp_encrypt_change+0x76>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    db88:	210a      	movs	r1, #10
    db8a:	e7d8      	b.n	db3e <bt_smp_encrypt_change+0x6e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    db8c:	2105      	movs	r1, #5
    db8e:	f012 fcd3 	bl	20538 <atomic_test_bit>
    db92:	4682      	mov	sl, r0
    db94:	b9d0      	cbnz	r0, dbcc <bt_smp_encrypt_change+0xfc>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    db96:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    db9a:	07d9      	lsls	r1, r3, #31
    db9c:	d516      	bpl.n	dbcc <bt_smp_encrypt_change+0xfc>
	struct bt_keys *keys = conn->le.keys;
    db9e:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    dba0:	211a      	movs	r1, #26
    dba2:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    dba4:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    dba8:	f003 fe0c 	bl	117c4 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    dbac:	2106      	movs	r1, #6
    dbae:	4620      	mov	r0, r4
    dbb0:	f012 fccb 	bl	2054a <smp_create_pdu.isra.0>
		if (!buf) {
    dbb4:	4681      	mov	r9, r0
    dbb6:	bb00      	cbnz	r0, dbfa <bt_smp_encrypt_change+0x12a>
    dbb8:	4974      	ldr	r1, [pc, #464]	; (dd8c <bt_smp_encrypt_change+0x2bc>)
    dbba:	4b73      	ldr	r3, [pc, #460]	; (dd88 <bt_smp_encrypt_change+0x2b8>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    dbbc:	4875      	ldr	r0, [pc, #468]	; (dd94 <bt_smp_encrypt_change+0x2c4>)
    dbbe:	1ac9      	subs	r1, r1, r3
    dbc0:	08c9      	lsrs	r1, r1, #3
    dbc2:	0189      	lsls	r1, r1, #6
    dbc4:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Master Ident buffer");
    dbc8:	f00f f951 	bl	1ce6e <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    dbcc:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    dbd0:	079a      	lsls	r2, r3, #30
    dbd2:	f140 809e 	bpl.w	dd12 <bt_smp_encrypt_change+0x242>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    dbd6:	2108      	movs	r1, #8
    dbd8:	4620      	mov	r0, r4
    dbda:	f012 fcb6 	bl	2054a <smp_create_pdu.isra.0>
		if (!buf) {
    dbde:	4680      	mov	r8, r0
    dbe0:	2800      	cmp	r0, #0
    dbe2:	d163      	bne.n	dcac <bt_smp_encrypt_change+0x1dc>
    dbe4:	4969      	ldr	r1, [pc, #420]	; (dd8c <bt_smp_encrypt_change+0x2bc>)
    dbe6:	4b68      	ldr	r3, [pc, #416]	; (dd88 <bt_smp_encrypt_change+0x2b8>)
			BT_ERR("Unable to allocate Ident Info buffer");
    dbe8:	486b      	ldr	r0, [pc, #428]	; (dd98 <bt_smp_encrypt_change+0x2c8>)
    dbea:	1ac9      	subs	r1, r1, r3
    dbec:	08c9      	lsrs	r1, r1, #3
    dbee:	0189      	lsls	r1, r1, #6
    dbf0:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    dbf4:	f00f f93b 	bl	1ce6e <log_0>
			return BT_SMP_ERR_UNSPECIFIED;
    dbf8:	e780      	b.n	dafc <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
    dbfa:	2110      	movs	r1, #16
    dbfc:	3008      	adds	r0, #8
    dbfe:	f012 ffb3 	bl	20b68 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    dc02:	f898 200c 	ldrb.w	r2, [r8, #12]
    dc06:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    dc08:	4683      	mov	fp, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    dc0a:	f011 f8f2 	bl	1edf2 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    dc0e:	f898 000c 	ldrb.w	r0, [r8, #12]
    dc12:	280f      	cmp	r0, #15
    dc14:	d805      	bhi.n	dc22 <bt_smp_encrypt_change+0x152>
			(void)memset(info->ltk + keys->enc_size, 0,
    dc16:	f1c0 0210 	rsb	r2, r0, #16
    dc1a:	4651      	mov	r1, sl
    dc1c:	4458      	add	r0, fp
    dc1e:	f011 f913 	bl	1ee48 <memset>
		smp_send(smp, buf, NULL, NULL);
    dc22:	4649      	mov	r1, r9
    dc24:	2200      	movs	r2, #0
    dc26:	4620      	mov	r0, r4
    dc28:	f7ff f902 	bl	ce30 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    dc2c:	2107      	movs	r1, #7
    dc2e:	4620      	mov	r0, r4
    dc30:	f012 fc8b 	bl	2054a <smp_create_pdu.isra.0>
		if (!buf) {
    dc34:	4681      	mov	r9, r0
    dc36:	b940      	cbnz	r0, dc4a <bt_smp_encrypt_change+0x17a>
    dc38:	4954      	ldr	r1, [pc, #336]	; (dd8c <bt_smp_encrypt_change+0x2bc>)
    dc3a:	4b53      	ldr	r3, [pc, #332]	; (dd88 <bt_smp_encrypt_change+0x2b8>)
			BT_ERR("Unable to allocate Master Ident buffer");
    dc3c:	4857      	ldr	r0, [pc, #348]	; (dd9c <bt_smp_encrypt_change+0x2cc>)
    dc3e:	1ac9      	subs	r1, r1, r3
    dc40:	08c9      	lsrs	r1, r1, #3
    dc42:	0189      	lsls	r1, r1, #6
    dc44:	f041 0101 	orr.w	r1, r1, #1
    dc48:	e7be      	b.n	dbc8 <bt_smp_encrypt_change+0xf8>
		ident = net_buf_add(buf, sizeof(*ident));
    dc4a:	210a      	movs	r1, #10
    dc4c:	3008      	adds	r0, #8
    dc4e:	f012 ff8b 	bl	20b68 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    dc52:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    dc54:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    dc56:	a905      	add	r1, sp, #20
    dc58:	3002      	adds	r0, #2
    dc5a:	f011 f8ca 	bl	1edf2 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    dc5e:	2202      	movs	r2, #2
    dc60:	a907      	add	r1, sp, #28
    dc62:	4650      	mov	r0, sl
    dc64:	f011 f8c5 	bl	1edf2 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    dc68:	4649      	mov	r1, r9
    dc6a:	4620      	mov	r0, r4
    dc6c:	4a4c      	ldr	r2, [pc, #304]	; (dda0 <bt_smp_encrypt_change+0x2d0>)
    dc6e:	f7ff f8df 	bl	ce30 <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dc72:	210c      	movs	r1, #12
    dc74:	4628      	mov	r0, r5
    dc76:	f012 fc5f 	bl	20538 <atomic_test_bit>
    dc7a:	2800      	cmp	r0, #0
    dc7c:	d0a6      	beq.n	dbcc <bt_smp_encrypt_change+0xfc>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    dc7e:	4640      	mov	r0, r8
    dc80:	2101      	movs	r1, #1
    dc82:	f012 ff16 	bl	20ab2 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    dc86:	a901      	add	r1, sp, #4
    dc88:	2210      	movs	r2, #16
    dc8a:	f108 0072 	add.w	r0, r8, #114	; 0x72
    dc8e:	f011 f8b0 	bl	1edf2 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    dc92:	a905      	add	r1, sp, #20
    dc94:	2208      	movs	r2, #8
    dc96:	f108 0068 	add.w	r0, r8, #104	; 0x68
    dc9a:	f011 f8aa 	bl	1edf2 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    dc9e:	2202      	movs	r2, #2
    dca0:	a907      	add	r1, sp, #28
    dca2:	f108 0070 	add.w	r0, r8, #112	; 0x70
    dca6:	f011 f8a4 	bl	1edf2 <memcpy>
    dcaa:	e78f      	b.n	dbcc <bt_smp_encrypt_change+0xfc>
		id_info = net_buf_add(buf, sizeof(*id_info));
    dcac:	2110      	movs	r1, #16
    dcae:	3008      	adds	r0, #8
    dcb0:	f012 ff5a 	bl	20b68 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    dcb4:	7a31      	ldrb	r1, [r6, #8]
    dcb6:	f8df 90fc 	ldr.w	r9, [pc, #252]	; ddb4 <bt_smp_encrypt_change+0x2e4>
    dcba:	f44f 7384 	mov.w	r3, #264	; 0x108
    dcbe:	2210      	movs	r2, #16
    dcc0:	fb12 3101 	smlabb	r1, r2, r1, r3
    dcc4:	4449      	add	r1, r9
    dcc6:	f011 f894 	bl	1edf2 <memcpy>
		smp_send(smp, buf, NULL, NULL);
    dcca:	4641      	mov	r1, r8
    dccc:	2200      	movs	r2, #0
    dcce:	4620      	mov	r0, r4
    dcd0:	f7ff f8ae 	bl	ce30 <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    dcd4:	2109      	movs	r1, #9
    dcd6:	4620      	mov	r0, r4
    dcd8:	f012 fc37 	bl	2054a <smp_create_pdu.isra.0>
		if (!buf) {
    dcdc:	4680      	mov	r8, r0
    dcde:	b940      	cbnz	r0, dcf2 <bt_smp_encrypt_change+0x222>
    dce0:	492a      	ldr	r1, [pc, #168]	; (dd8c <bt_smp_encrypt_change+0x2bc>)
    dce2:	4b29      	ldr	r3, [pc, #164]	; (dd88 <bt_smp_encrypt_change+0x2b8>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    dce4:	482f      	ldr	r0, [pc, #188]	; (dda4 <bt_smp_encrypt_change+0x2d4>)
    dce6:	1ac9      	subs	r1, r1, r3
    dce8:	08c9      	lsrs	r1, r1, #3
    dcea:	0189      	lsls	r1, r1, #6
    dcec:	f041 0101 	orr.w	r1, r1, #1
    dcf0:	e780      	b.n	dbf4 <bt_smp_encrypt_change+0x124>
		id_addr_info = net_buf_add(buf, sizeof(*id_addr_info));
    dcf2:	2107      	movs	r1, #7
    dcf4:	3008      	adds	r0, #8
    dcf6:	f012 ff37 	bl	20b68 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    dcfa:	7a31      	ldrb	r1, [r6, #8]
    dcfc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
    dd00:	2207      	movs	r2, #7
    dd02:	4449      	add	r1, r9
    dd04:	f011 f875 	bl	1edf2 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    dd08:	4a27      	ldr	r2, [pc, #156]	; (dda8 <bt_smp_encrypt_change+0x2d8>)
    dd0a:	4641      	mov	r1, r8
    dd0c:	4620      	mov	r0, r4
    dd0e:	f7ff f88f 	bl	ce30 <smp_send.isra.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    dd12:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    dd16:	075b      	lsls	r3, r3, #29
    dd18:	d52c      	bpl.n	dd74 <bt_smp_encrypt_change+0x2a4>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    dd1a:	210a      	movs	r1, #10
    dd1c:	4620      	mov	r0, r4
    dd1e:	f012 fc14 	bl	2054a <smp_create_pdu.isra.0>
		if (!buf) {
    dd22:	4606      	mov	r6, r0
    dd24:	b940      	cbnz	r0, dd38 <bt_smp_encrypt_change+0x268>
    dd26:	4919      	ldr	r1, [pc, #100]	; (dd8c <bt_smp_encrypt_change+0x2bc>)
    dd28:	4b17      	ldr	r3, [pc, #92]	; (dd88 <bt_smp_encrypt_change+0x2b8>)
			BT_ERR("Unable to allocate Signing Info buffer");
    dd2a:	4820      	ldr	r0, [pc, #128]	; (ddac <bt_smp_encrypt_change+0x2dc>)
    dd2c:	1ac9      	subs	r1, r1, r3
    dd2e:	08c9      	lsrs	r1, r1, #3
    dd30:	0189      	lsls	r1, r1, #6
    dd32:	f041 0101 	orr.w	r1, r1, #1
    dd36:	e75d      	b.n	dbf4 <bt_smp_encrypt_change+0x124>
		info = net_buf_add(buf, sizeof(*info));
    dd38:	2110      	movs	r1, #16
    dd3a:	3008      	adds	r0, #8
    dd3c:	f012 ff14 	bl	20b68 <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    dd40:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    dd42:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    dd44:	f003 fd3e 	bl	117c4 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    dd48:	210c      	movs	r1, #12
    dd4a:	4628      	mov	r0, r5
    dd4c:	f012 fbf4 	bl	20538 <atomic_test_bit>
    dd50:	b158      	cbz	r0, dd6a <bt_smp_encrypt_change+0x29a>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    dd52:	2108      	movs	r1, #8
    dd54:	4638      	mov	r0, r7
    dd56:	f012 feac 	bl	20ab2 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    dd5a:	2210      	movs	r2, #16
    dd5c:	4641      	mov	r1, r8
    dd5e:	f107 0040 	add.w	r0, r7, #64	; 0x40
    dd62:	f011 f846 	bl	1edf2 <memcpy>
			keys->local_csrk.cnt = 0U;
    dd66:	2300      	movs	r3, #0
    dd68:	653b      	str	r3, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    dd6a:	4a11      	ldr	r2, [pc, #68]	; (ddb0 <bt_smp_encrypt_change+0x2e0>)
    dd6c:	4631      	mov	r1, r6
    dd6e:	4620      	mov	r0, r4
    dd70:	f7ff f85e 	bl	ce30 <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
    dd74:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    dd78:	2900      	cmp	r1, #0
    dd7a:	f47f aebf 	bne.w	dafc <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    dd7e:	4620      	mov	r0, r4
    dd80:	f7ff fc76 	bl	d670 <smp_pairing_complete>
    dd84:	e6ba      	b.n	dafc <bt_smp_encrypt_change+0x2c>
    dd86:	bf00      	nop
    dd88:	00021aac 	.word	0x00021aac
    dd8c:	00021b9c 	.word	0x00021b9c
    dd90:	00025460 	.word	0x00025460
    dd94:	00025475 	.word	0x00025475
    dd98:	000254c3 	.word	0x000254c3
    dd9c:	0002549c 	.word	0x0002549c
    dda0:	00020737 	.word	0x00020737
    dda4:	000254e8 	.word	0x000254e8
    dda8:	00020743 	.word	0x00020743
    ddac:	00025512 	.word	0x00025512
    ddb0:	00020729 	.word	0x00020729
    ddb4:	20000000 	.word	0x20000000

0000ddb8 <smp_pairing_random>:
{
    ddb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddbc:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    ddbe:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    ddc2:	6889      	ldr	r1, [r1, #8]
{
    ddc4:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    ddc6:	2210      	movs	r2, #16
    ddc8:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ddca:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    ddce:	f011 f810 	bl	1edf2 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ddd2:	2105      	movs	r1, #5
    ddd4:	4630      	mov	r0, r6
    ddd6:	f012 fbaf 	bl	20538 <atomic_test_bit>
    ddda:	2800      	cmp	r0, #0
    dddc:	d13d      	bne.n	de5a <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    ddde:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    dde0:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    dde2:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    dde6:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    dde8:	f103 0296 	add.w	r2, r3, #150	; 0x96
    ddec:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    ddee:	9201      	str	r2, [sp, #4]
    ddf0:	9300      	str	r3, [sp, #0]
    ddf2:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    ddf6:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    ddfa:	4639      	mov	r1, r7
    ddfc:	4640      	mov	r0, r8
    ddfe:	f012 fca7 	bl	20750 <smp_c1>
	if (err) {
    de02:	b108      	cbz	r0, de08 <smp_pairing_random+0x50>
	switch (smp->method) {
    de04:	2508      	movs	r5, #8
    de06:	e096      	b.n	df36 <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    de08:	2210      	movs	r2, #16
    de0a:	4629      	mov	r1, r5
    de0c:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    de10:	f010 ffdf 	bl	1edd2 <memcmp>
    de14:	2800      	cmp	r0, #0
    de16:	f040 808d 	bne.w	df34 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    de1a:	2208      	movs	r2, #8
    de1c:	4639      	mov	r1, r7
    de1e:	4628      	mov	r0, r5
    de20:	f010 ffe7 	bl	1edf2 <memcpy>
	memcpy(out + 8, r1, 8);
    de24:	2208      	movs	r2, #8
    de26:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    de2a:	a80c      	add	r0, sp, #48	; 0x30
    de2c:	f010 ffe1 	bl	1edf2 <memcpy>
	return bt_encrypt_le(k, out, out);
    de30:	462a      	mov	r2, r5
    de32:	4629      	mov	r1, r5
    de34:	4640      	mov	r0, r8
    de36:	f003 fcc7 	bl	117c8 <bt_encrypt_le>
		if (err) {
    de3a:	2800      	cmp	r0, #0
    de3c:	d1e2      	bne.n	de04 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    de3e:	4629      	mov	r1, r5
    de40:	2210      	movs	r2, #16
    de42:	4640      	mov	r0, r8
    de44:	f010 ffd5 	bl	1edf2 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    de48:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    de4a:	4630      	mov	r0, r6
    de4c:	f012 faac 	bl	203a8 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    de50:	4620      	mov	r0, r4
    de52:	f012 fb9a 	bl	2058a <smp_send_pairing_random>
    de56:	4605      	mov	r5, r0
    de58:	e06d      	b.n	df36 <smp_pairing_random+0x17e>
	switch (smp->method) {
    de5a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    de5e:	2b05      	cmp	r3, #5
    de60:	d8d0      	bhi.n	de04 <smp_pairing_random+0x4c>
    de62:	a201      	add	r2, pc, #4	; (adr r2, de68 <smp_pairing_random+0xb0>)
    de64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    de68:	0000deef 	.word	0x0000deef
    de6c:	0000defd 	.word	0x0000defd
    de70:	0000defd 	.word	0x0000defd
    de74:	0000de81 	.word	0x0000de81
    de78:	0000de05 	.word	0x0000de05
    de7c:	0000df89 	.word	0x0000df89
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    de80:	4b5a      	ldr	r3, [pc, #360]	; (dfec <smp_pairing_random+0x234>)
    de82:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    de84:	2220      	movs	r2, #32
    de86:	f204 110f 	addw	r1, r4, #271	; 0x10f
    de8a:	a80a      	add	r0, sp, #40	; 0x28
    de8c:	f012 fa73 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    de90:	2220      	movs	r2, #32
    de92:	4629      	mov	r1, r5
    de94:	a812      	add	r0, sp, #72	; 0x48
    de96:	f012 fa6e 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    de9a:	2210      	movs	r2, #16
    de9c:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    dea0:	a81a      	add	r0, sp, #104	; 0x68
    dea2:	f012 fa68 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    dea6:	2210      	movs	r2, #16
    dea8:	4639      	mov	r1, r7
    deaa:	a806      	add	r0, sp, #24
    deac:	f012 fa63 	bl	20376 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    deb0:	ab06      	add	r3, sp, #24
    deb2:	2250      	movs	r2, #80	; 0x50
    deb4:	a90a      	add	r1, sp, #40	; 0x28
    deb6:	4618      	mov	r0, r3
    deb8:	f012 fa84 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
    debc:	2800      	cmp	r0, #0
    debe:	d1a1      	bne.n	de04 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    dec0:	2204      	movs	r2, #4
    dec2:	a909      	add	r1, sp, #36	; 0x24
    dec4:	a805      	add	r0, sp, #20
    dec6:	f010 ff94 	bl	1edf2 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    deca:	9b05      	ldr	r3, [sp, #20]
    decc:	4948      	ldr	r1, [pc, #288]	; (dff0 <smp_pairing_random+0x238>)
    dece:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ded0:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    ded2:	fbb3 f2f1 	udiv	r2, r3, r1
    ded6:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    deda:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    dedc:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    dede:	f012 fa63 	bl	203a8 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    dee2:	4b44      	ldr	r3, [pc, #272]	; (dff4 <smp_pairing_random+0x23c>)
    dee4:	9905      	ldr	r1, [sp, #20]
    dee6:	681b      	ldr	r3, [r3, #0]
    dee8:	6820      	ldr	r0, [r4, #0]
    deea:	689b      	ldr	r3, [r3, #8]
    deec:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    deee:	210d      	movs	r1, #13
    def0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    def4:	f012 fa58 	bl	203a8 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    def8:	210f      	movs	r1, #15
    defa:	e7a6      	b.n	de4a <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    defc:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    df00:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df04:	4939      	ldr	r1, [pc, #228]	; (dfec <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df06:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df08:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    df0a:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    df0e:	9500      	str	r5, [sp, #0]
    df10:	6809      	ldr	r1, [r1, #0]
    df12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    df16:	463a      	mov	r2, r7
    df18:	f204 100f 	addw	r0, r4, #271	; 0x10f
    df1c:	f012 fa6e 	bl	203fc <smp_f4>
    df20:	2800      	cmp	r0, #0
    df22:	f47f af6f 	bne.w	de04 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    df26:	2210      	movs	r2, #16
    df28:	4629      	mov	r1, r5
    df2a:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    df2e:	f010 ff50 	bl	1edd2 <memcmp>
    df32:	b120      	cbz	r0, df3e <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    df34:	2504      	movs	r5, #4
}
    df36:	4628      	mov	r0, r5
    df38:	b01e      	add	sp, #120	; 0x78
    df3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    df3e:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    df42:	2103      	movs	r1, #3
    df44:	4638      	mov	r0, r7
    df46:	f012 fa2f 	bl	203a8 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    df4a:	4620      	mov	r0, r4
    df4c:	f012 fb1d 	bl	2058a <smp_send_pairing_random>
		if (err) {
    df50:	4605      	mov	r5, r0
    df52:	2800      	cmp	r0, #0
    df54:	d1ef      	bne.n	df36 <smp_pairing_random+0x17e>
		smp->passkey_round++;
    df56:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    df5a:	3301      	adds	r3, #1
    df5c:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    df5e:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    df60:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    df64:	d108      	bne.n	df78 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    df66:	4638      	mov	r0, r7
    df68:	210d      	movs	r1, #13
    df6a:	f012 fa1d 	bl	203a8 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    df6e:	210f      	movs	r1, #15
    df70:	4630      	mov	r0, r6
    df72:	f012 fa19 	bl	203a8 <atomic_set_bit>
			return 0;
    df76:	e7de      	b.n	df36 <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    df78:	2110      	movs	r1, #16
    df7a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    df7e:	f003 fc21 	bl	117c4 <bt_rand>
    df82:	2800      	cmp	r0, #0
    df84:	d0d7      	beq.n	df36 <smp_pairing_random+0x17e>
    df86:	e73d      	b.n	de04 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    df88:	2110      	movs	r1, #16
    df8a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    df8e:	f003 fc19 	bl	117c4 <bt_rand>
    df92:	2800      	cmp	r0, #0
    df94:	f47f af36 	bne.w	de04 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    df98:	4f16      	ldr	r7, [pc, #88]	; (dff4 <smp_pairing_random+0x23c>)
    df9a:	683b      	ldr	r3, [r7, #0]
    df9c:	b193      	cbz	r3, dfc4 <smp_pairing_random+0x20c>
    df9e:	68db      	ldr	r3, [r3, #12]
    dfa0:	b183      	cbz	r3, dfc4 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
    dfa2:	4b15      	ldr	r3, [pc, #84]	; (dff8 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    dfa4:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    dfa8:	881b      	ldrh	r3, [r3, #0]
    dfaa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    dfae:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    dfb2:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    dfb4:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    dfb8:	d406      	bmi.n	dfc8 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
    dfba:	2b00      	cmp	r3, #0
    dfbc:	bf0c      	ite	eq
    dfbe:	2003      	moveq	r0, #3
    dfc0:	2001      	movne	r0, #1
    dfc2:	e004      	b.n	dfce <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    dfc4:	2502      	movs	r5, #2
    dfc6:	e7b6      	b.n	df36 <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    dfc8:	2b00      	cmp	r3, #0
    dfca:	bf18      	it	ne
    dfcc:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    dfce:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    dfd0:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    dfd4:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    dfd8:	4630      	mov	r0, r6
    dfda:	210b      	movs	r1, #11
    dfdc:	f012 f9e4 	bl	203a8 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    dfe0:	683b      	ldr	r3, [r7, #0]
    dfe2:	6820      	ldr	r0, [r4, #0]
    dfe4:	68db      	ldr	r3, [r3, #12]
    dfe6:	a90a      	add	r1, sp, #40	; 0x28
    dfe8:	4798      	blx	r3
			return 0;
    dfea:	e7a4      	b.n	df36 <smp_pairing_random+0x17e>
    dfec:	20001600 	.word	0x20001600
    dff0:	000f4240 	.word	0x000f4240
    dff4:	20001574 	.word	0x20001574
    dff8:	00021cdb 	.word	0x00021cdb

0000dffc <smp_public_key>:
{
    dffc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    dffe:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    e000:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
    e004:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    e006:	2220      	movs	r2, #32
    e008:	4631      	mov	r1, r6
    e00a:	4620      	mov	r0, r4
    e00c:	f010 fef1 	bl	1edf2 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    e010:	2220      	movs	r2, #32
    e012:	18b1      	adds	r1, r6, r2
    e014:	f205 102f 	addw	r0, r5, #303	; 0x12f
    e018:	f010 feeb 	bl	1edf2 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    e01c:	4920      	ldr	r1, [pc, #128]	; (e0a0 <smp_public_key+0xa4>)
    e01e:	2240      	movs	r2, #64	; 0x40
    e020:	4620      	mov	r0, r4
    e022:	f010 fed6 	bl	1edd2 <memcmp>
    e026:	b148      	cbz	r0, e03c <smp_public_key+0x40>
	if (!sc_public_key) {
    e028:	4b1e      	ldr	r3, [pc, #120]	; (e0a4 <smp_public_key+0xa8>)
    e02a:	681c      	ldr	r4, [r3, #0]
    e02c:	bb74      	cbnz	r4, e08c <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    e02e:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e032:	2106      	movs	r1, #6
    e034:	f012 f9b8 	bl	203a8 <atomic_set_bit>
		return 0;
    e038:	4620      	mov	r0, r4
}
    e03a:	bd70      	pop	{r4, r5, r6, pc}
    e03c:	4b1a      	ldr	r3, [pc, #104]	; (e0a8 <smp_public_key+0xac>)
    e03e:	491b      	ldr	r1, [pc, #108]	; (e0ac <smp_public_key+0xb0>)
		BT_INFO("Remote is using Debug Public key");
    e040:	481b      	ldr	r0, [pc, #108]	; (e0b0 <smp_public_key+0xb4>)
    e042:	1ac9      	subs	r1, r1, r3
    e044:	08c9      	lsrs	r1, r1, #3
    e046:	0189      	lsls	r1, r1, #6
    e048:	f041 0103 	orr.w	r1, r1, #3
    e04c:	f00e ff0f 	bl	1ce6e <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    e050:	210d      	movs	r1, #13
    e052:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    e056:	f012 f9a7 	bl	203a8 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    e05a:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    e05c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    e060:	b933      	cbnz	r3, e070 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e062:	7a20      	ldrb	r0, [r4, #8]
    e064:	f104 0188 	add.w	r1, r4, #136	; 0x88
    e068:	f000 fafc 	bl	e664 <bt_keys_get_addr>
    e06c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
    e070:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    e074:	2b00      	cmp	r3, #0
    e076:	d0d7      	beq.n	e028 <smp_public_key+0x2c>
    e078:	89da      	ldrh	r2, [r3, #14]
    e07a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e07e:	2a00      	cmp	r2, #0
    e080:	d0d2      	beq.n	e028 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    e082:	7b5b      	ldrb	r3, [r3, #13]
    e084:	079b      	lsls	r3, r3, #30
    e086:	d5cf      	bpl.n	e028 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    e088:	2003      	movs	r0, #3
    e08a:	e7d6      	b.n	e03a <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    e08c:	4628      	mov	r0, r5
    e08e:	f7ff f873 	bl	d178 <sc_send_public_key>
	if (err) {
    e092:	2800      	cmp	r0, #0
    e094:	d1d1      	bne.n	e03a <smp_public_key+0x3e>
    e096:	4628      	mov	r0, r5
}
    e098:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e09c:	f7fe bf20 	b.w	cee0 <smp_public_key_slave.part.0>
    e0a0:	0002564c 	.word	0x0002564c
    e0a4:	20001600 	.word	0x20001600
    e0a8:	00021aac 	.word	0x00021aac
    e0ac:	00021b9c 	.word	0x00021b9c
    e0b0:	00025539 	.word	0x00025539

0000e0b4 <smp_ident_addr_info>:
{
    e0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    e0b8:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    e0ba:	6805      	ldr	r5, [r0, #0]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e0bc:	7833      	ldrb	r3, [r6, #0]
{
    e0be:	4604      	mov	r4, r0
    e0c0:	b31b      	cbz	r3, e10a <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    e0c2:	79b3      	ldrb	r3, [r6, #6]
    e0c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e0c8:	2bc0      	cmp	r3, #192	; 0xc0
    e0ca:	d01e      	beq.n	e10a <smp_ident_addr_info+0x56>
    e0cc:	4b43      	ldr	r3, [pc, #268]	; (e1dc <smp_ident_addr_info+0x128>)
    e0ce:	4c44      	ldr	r4, [pc, #272]	; (e1e0 <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    e0d0:	4630      	mov	r0, r6
    e0d2:	1ae4      	subs	r4, r4, r3
    e0d4:	f7f8 fa3c 	bl	6550 <bt_addr_le_str_real>
    e0d8:	f7f5 fcb6 	bl	3a48 <log_strdup>
    e0dc:	08e4      	lsrs	r4, r4, #3
    e0de:	01a4      	lsls	r4, r4, #6
    e0e0:	f044 0401 	orr.w	r4, r4, #1
    e0e4:	4601      	mov	r1, r0
    e0e6:	4622      	mov	r2, r4
    e0e8:	483e      	ldr	r0, [pc, #248]	; (e1e4 <smp_ident_addr_info+0x130>)
    e0ea:	f00e fecd 	bl	1ce88 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    e0ee:	f105 0088 	add.w	r0, r5, #136	; 0x88
    e0f2:	f7f8 fa2d 	bl	6550 <bt_addr_le_str_real>
    e0f6:	f7f5 fca7 	bl	3a48 <log_strdup>
    e0fa:	4622      	mov	r2, r4
    e0fc:	4601      	mov	r1, r0
    e0fe:	483a      	ldr	r0, [pc, #232]	; (e1e8 <smp_ident_addr_info+0x134>)
    e100:	f00e fec2 	bl	1ce88 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    e104:	200a      	movs	r0, #10
}
    e106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e10a:	210c      	movs	r1, #12
    e10c:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    e110:	f012 fa12 	bl	20538 <atomic_test_bit>
    e114:	2800      	cmp	r0, #0
    e116:	d048      	beq.n	e1aa <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e118:	f105 0788 	add.w	r7, r5, #136	; 0x88
    e11c:	7a29      	ldrb	r1, [r5, #8]
    e11e:	463a      	mov	r2, r7
    e120:	2002      	movs	r0, #2
    e122:	f012 fcb6 	bl	20a92 <bt_keys_get_type>
		if (!keys) {
    e126:	4680      	mov	r8, r0
    e128:	b990      	cbnz	r0, e150 <smp_ident_addr_info+0x9c>
    e12a:	4a2c      	ldr	r2, [pc, #176]	; (e1dc <smp_ident_addr_info+0x128>)
    e12c:	4c2c      	ldr	r4, [pc, #176]	; (e1e0 <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    e12e:	4638      	mov	r0, r7
    e130:	1aa4      	subs	r4, r4, r2
    e132:	f7f8 fa0d 	bl	6550 <bt_addr_le_str_real>
    e136:	f7f5 fc87 	bl	3a48 <log_strdup>
    e13a:	08e4      	lsrs	r4, r4, #3
    e13c:	01a4      	lsls	r4, r4, #6
    e13e:	f044 0401 	orr.w	r4, r4, #1
    e142:	4601      	mov	r1, r0
    e144:	4622      	mov	r2, r4
    e146:	4829      	ldr	r0, [pc, #164]	; (e1ec <smp_ident_addr_info+0x138>)
    e148:	f00e fe9e 	bl	1ce88 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e14c:	2008      	movs	r0, #8
    e14e:	e7da      	b.n	e106 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    e150:	78eb      	ldrb	r3, [r5, #3]
    e152:	2b00      	cmp	r3, #0
    e154:	d13f      	bne.n	e1d6 <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    e156:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e15a:	780b      	ldrb	r3, [r1, #0]
    e15c:	2b01      	cmp	r3, #1
    e15e:	d121      	bne.n	e1a4 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    e160:	798b      	ldrb	r3, [r1, #6]
    e162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e166:	2b40      	cmp	r3, #64	; 0x40
    e168:	d11c      	bne.n	e1a4 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    e16a:	2206      	movs	r2, #6
    e16c:	3101      	adds	r1, #1
    e16e:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    e172:	f010 fe3e 	bl	1edf2 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    e176:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    e17a:	b19b      	cbz	r3, e1a4 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    e17c:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    e180:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e184:	2bc0      	cmp	r3, #192	; 0xc0
    e186:	d00d      	beq.n	e1a4 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    e188:	2207      	movs	r2, #7
    e18a:	4631      	mov	r1, r6
    e18c:	f108 0001 	add.w	r0, r8, #1
    e190:	f010 fe2f 	bl	1edf2 <memcpy>
    e194:	2207      	movs	r2, #7
    e196:	4631      	mov	r1, r6
    e198:	4638      	mov	r0, r7
    e19a:	f010 fe2a 	bl	1edf2 <memcpy>
				bt_conn_identity_resolved(conn);
    e19e:	4628      	mov	r0, r5
    e1a0:	f7fb facc 	bl	973c <bt_conn_identity_resolved>
		bt_id_add(keys);
    e1a4:	4640      	mov	r0, r8
    e1a6:	f7fa f827 	bl	81f8 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e1aa:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    e1ae:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e1b2:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    e1b4:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    e1b8:	d504      	bpl.n	e1c4 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    e1ba:	210a      	movs	r1, #10
    e1bc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e1c0:	f012 f8f2 	bl	203a8 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    e1c4:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    e1c8:	b91d      	cbnz	r5, e1d2 <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    e1ca:	4629      	mov	r1, r5
    e1cc:	4620      	mov	r0, r4
    e1ce:	f7ff fa4f 	bl	d670 <smp_pairing_complete>
	return 0;
    e1d2:	2000      	movs	r0, #0
    e1d4:	e797      	b.n	e106 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    e1d6:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    e1da:	e7be      	b.n	e15a <smp_ident_addr_info+0xa6>
    e1dc:	00021aac 	.word	0x00021aac
    e1e0:	00021b9c 	.word	0x00021b9c
    e1e4:	0002555a 	.word	0x0002555a
    e1e8:	00025588 	.word	0x00025588
    e1ec:	0002534b 	.word	0x0002534b

0000e1f0 <bt_smp_sign_verify>:
{
    e1f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    e1f2:	898b      	ldrh	r3, [r1, #12]
    e1f4:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e1f6:	6889      	ldr	r1, [r1, #8]
{
    e1f8:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e1fa:	3b0c      	subs	r3, #12
    e1fc:	4419      	add	r1, r3
    e1fe:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    e200:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    e204:	a801      	add	r0, sp, #4
    e206:	f010 fdf4 	bl	1edf2 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    e20a:	7a31      	ldrb	r1, [r6, #8]
    e20c:	462a      	mov	r2, r5
    e20e:	2010      	movs	r0, #16
    e210:	f000 fa9c 	bl	e74c <bt_keys_find>
	if (!keys) {
    e214:	4606      	mov	r6, r0
    e216:	b9a0      	cbnz	r0, e242 <bt_smp_sign_verify+0x52>
    e218:	4a2e      	ldr	r2, [pc, #184]	; (e2d4 <bt_smp_sign_verify+0xe4>)
    e21a:	4c2f      	ldr	r4, [pc, #188]	; (e2d8 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    e21c:	4628      	mov	r0, r5
    e21e:	1aa4      	subs	r4, r4, r2
    e220:	f7f8 f996 	bl	6550 <bt_addr_le_str_real>
    e224:	f7f5 fc10 	bl	3a48 <log_strdup>
    e228:	08e4      	lsrs	r4, r4, #3
    e22a:	01a4      	lsls	r4, r4, #6
    e22c:	f044 0401 	orr.w	r4, r4, #1
    e230:	4601      	mov	r1, r0
    e232:	4622      	mov	r2, r4
    e234:	4829      	ldr	r0, [pc, #164]	; (e2dc <bt_smp_sign_verify+0xec>)
    e236:	f00e fe27 	bl	1ce88 <log_1>
		return -ENOENT;
    e23a:	f06f 0001 	mvn.w	r0, #1
}
    e23e:	b004      	add	sp, #16
    e240:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    e242:	6e43      	ldr	r3, [r0, #100]	; 0x64
    e244:	9300      	str	r3, [sp, #0]
    e246:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    e248:	68a0      	ldr	r0, [r4, #8]
    e24a:	3b0c      	subs	r3, #12
    e24c:	2204      	movs	r2, #4
    e24e:	4669      	mov	r1, sp
    e250:	4418      	add	r0, r3
    e252:	f010 fdce 	bl	1edf2 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    e256:	89a2      	ldrh	r2, [r4, #12]
    e258:	68a1      	ldr	r1, [r4, #8]
    e25a:	3a0c      	subs	r2, #12
    e25c:	b292      	uxth	r2, r2
    e25e:	f106 0054 	add.w	r0, r6, #84	; 0x54
    e262:	f7fe fd2f 	bl	ccc4 <smp_sign_buf>
	if (err) {
    e266:	b198      	cbz	r0, e290 <bt_smp_sign_verify+0xa0>
    e268:	4a1a      	ldr	r2, [pc, #104]	; (e2d4 <bt_smp_sign_verify+0xe4>)
    e26a:	4c1b      	ldr	r4, [pc, #108]	; (e2d8 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    e26c:	4628      	mov	r0, r5
    e26e:	1aa4      	subs	r4, r4, r2
    e270:	f7f8 f96e 	bl	6550 <bt_addr_le_str_real>
    e274:	f7f5 fbe8 	bl	3a48 <log_strdup>
    e278:	08e4      	lsrs	r4, r4, #3
    e27a:	01a4      	lsls	r4, r4, #6
    e27c:	f044 0401 	orr.w	r4, r4, #1
    e280:	4601      	mov	r1, r0
    e282:	4622      	mov	r2, r4
    e284:	4816      	ldr	r0, [pc, #88]	; (e2e0 <bt_smp_sign_verify+0xf0>)
    e286:	f00e fdff 	bl	1ce88 <log_1>
		return -EIO;
    e28a:	f06f 0004 	mvn.w	r0, #4
    e28e:	e7d6      	b.n	e23e <bt_smp_sign_verify+0x4e>
    e290:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    e292:	68a1      	ldr	r1, [r4, #8]
    e294:	3b0c      	subs	r3, #12
    e296:	220c      	movs	r2, #12
    e298:	4419      	add	r1, r3
    e29a:	a801      	add	r0, sp, #4
    e29c:	f010 fd99 	bl	1edd2 <memcmp>
    e2a0:	b198      	cbz	r0, e2ca <bt_smp_sign_verify+0xda>
    e2a2:	4a0c      	ldr	r2, [pc, #48]	; (e2d4 <bt_smp_sign_verify+0xe4>)
    e2a4:	4c0c      	ldr	r4, [pc, #48]	; (e2d8 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    e2a6:	4628      	mov	r0, r5
    e2a8:	1aa4      	subs	r4, r4, r2
    e2aa:	f7f8 f951 	bl	6550 <bt_addr_le_str_real>
    e2ae:	f7f5 fbcb 	bl	3a48 <log_strdup>
    e2b2:	08e4      	lsrs	r4, r4, #3
    e2b4:	01a4      	lsls	r4, r4, #6
    e2b6:	f044 0401 	orr.w	r4, r4, #1
    e2ba:	4601      	mov	r1, r0
    e2bc:	4622      	mov	r2, r4
    e2be:	4809      	ldr	r0, [pc, #36]	; (e2e4 <bt_smp_sign_verify+0xf4>)
    e2c0:	f00e fde2 	bl	1ce88 <log_1>
		return -EBADMSG;
    e2c4:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    e2c8:	e7b9      	b.n	e23e <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    e2ca:	6e73      	ldr	r3, [r6, #100]	; 0x64
    e2cc:	3301      	adds	r3, #1
    e2ce:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    e2d0:	e7b5      	b.n	e23e <bt_smp_sign_verify+0x4e>
    e2d2:	bf00      	nop
    e2d4:	00021aac 	.word	0x00021aac
    e2d8:	00021b9c 	.word	0x00021b9c
    e2dc:	0002556e 	.word	0x0002556e
    e2e0:	00025590 	.word	0x00025590
    e2e4:	000255b2 	.word	0x000255b2

0000e2e8 <bt_smp_sign>:
{
    e2e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    e2ea:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    e2ee:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    e2f0:	462a      	mov	r2, r5
    e2f2:	7a01      	ldrb	r1, [r0, #8]
    e2f4:	2008      	movs	r0, #8
    e2f6:	f000 fa29 	bl	e74c <bt_keys_find>
	if (!keys) {
    e2fa:	4604      	mov	r4, r0
    e2fc:	b9a0      	cbnz	r0, e328 <bt_smp_sign+0x40>
    e2fe:	4a23      	ldr	r2, [pc, #140]	; (e38c <bt_smp_sign+0xa4>)
    e300:	4c23      	ldr	r4, [pc, #140]	; (e390 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    e302:	4628      	mov	r0, r5
    e304:	1aa4      	subs	r4, r4, r2
    e306:	f7f8 f923 	bl	6550 <bt_addr_le_str_real>
    e30a:	f7f5 fb9d 	bl	3a48 <log_strdup>
    e30e:	08e4      	lsrs	r4, r4, #3
    e310:	01a4      	lsls	r4, r4, #6
    e312:	f044 0401 	orr.w	r4, r4, #1
    e316:	4601      	mov	r1, r0
    e318:	4622      	mov	r2, r4
    e31a:	481e      	ldr	r0, [pc, #120]	; (e394 <bt_smp_sign+0xac>)
    e31c:	f00e fdb4 	bl	1ce88 <log_1>
		return -ENOENT;
    e320:	f06f 0001 	mvn.w	r0, #1
}
    e324:	b002      	add	sp, #8
    e326:	bd70      	pop	{r4, r5, r6, pc}
	net_buf_add(buf, 12);
    e328:	210c      	movs	r1, #12
    e32a:	f106 0008 	add.w	r0, r6, #8
    e32e:	f012 fc1b 	bl	20b68 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    e332:	6d23      	ldr	r3, [r4, #80]	; 0x50
    e334:	9301      	str	r3, [sp, #4]
    e336:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    e338:	68b0      	ldr	r0, [r6, #8]
    e33a:	2204      	movs	r2, #4
    e33c:	3b0c      	subs	r3, #12
    e33e:	eb0d 0102 	add.w	r1, sp, r2
    e342:	4418      	add	r0, r3
    e344:	f010 fd55 	bl	1edf2 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    e348:	89b2      	ldrh	r2, [r6, #12]
    e34a:	68b1      	ldr	r1, [r6, #8]
    e34c:	3a0c      	subs	r2, #12
    e34e:	b292      	uxth	r2, r2
    e350:	f104 0040 	add.w	r0, r4, #64	; 0x40
    e354:	f7fe fcb6 	bl	ccc4 <smp_sign_buf>
	if (err) {
    e358:	b198      	cbz	r0, e382 <bt_smp_sign+0x9a>
    e35a:	4a0c      	ldr	r2, [pc, #48]	; (e38c <bt_smp_sign+0xa4>)
    e35c:	4c0c      	ldr	r4, [pc, #48]	; (e390 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    e35e:	4628      	mov	r0, r5
    e360:	1aa4      	subs	r4, r4, r2
    e362:	f7f8 f8f5 	bl	6550 <bt_addr_le_str_real>
    e366:	f7f5 fb6f 	bl	3a48 <log_strdup>
    e36a:	08e4      	lsrs	r4, r4, #3
    e36c:	01a4      	lsls	r4, r4, #6
    e36e:	f044 0401 	orr.w	r4, r4, #1
    e372:	4601      	mov	r1, r0
    e374:	4622      	mov	r2, r4
    e376:	4808      	ldr	r0, [pc, #32]	; (e398 <bt_smp_sign+0xb0>)
    e378:	f00e fd86 	bl	1ce88 <log_1>
		return -EIO;
    e37c:	f06f 0004 	mvn.w	r0, #4
    e380:	e7d0      	b.n	e324 <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    e382:	6d23      	ldr	r3, [r4, #80]	; 0x50
    e384:	3301      	adds	r3, #1
    e386:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    e388:	e7cc      	b.n	e324 <bt_smp_sign+0x3c>
    e38a:	bf00      	nop
    e38c:	00021aac 	.word	0x00021aac
    e390:	00021b9c 	.word	0x00021b9c
    e394:	000255d4 	.word	0x000255d4
    e398:	00025590 	.word	0x00025590

0000e39c <bt_smp_start_security>:
{
    e39c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    e3a0:	78c4      	ldrb	r4, [r0, #3]
    e3a2:	2c01      	cmp	r4, #1
{
    e3a4:	4605      	mov	r5, r0
	switch (conn->role) {
    e3a6:	d005      	beq.n	e3b4 <bt_smp_start_security+0x18>
		return -EINVAL;
    e3a8:	f06f 0415 	mvn.w	r4, #21
}
    e3ac:	4620      	mov	r0, r4
    e3ae:	b003      	add	sp, #12
    e3b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    e3b4:	f7fe fce4 	bl	cd80 <smp_chan_get>
	if (!smp) {
    e3b8:	4606      	mov	r6, r0
    e3ba:	2800      	cmp	r0, #0
    e3bc:	f000 80a1 	beq.w	e502 <bt_smp_start_security+0x166>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    e3c0:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    e3c4:	2104      	movs	r1, #4
    e3c6:	4638      	mov	r0, r7
    e3c8:	f012 f8b6 	bl	20538 <atomic_test_bit>
    e3cc:	2800      	cmp	r0, #0
    e3ce:	f040 809b 	bne.w	e508 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e3d2:	2103      	movs	r1, #3
    e3d4:	4638      	mov	r0, r7
    e3d6:	f012 f8af 	bl	20538 <atomic_test_bit>
    e3da:	b110      	cbz	r0, e3e2 <bt_smp_start_security+0x46>
		return -EBUSY;
    e3dc:	f06f 040f 	mvn.w	r4, #15
    e3e0:	e7e4      	b.n	e3ac <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    e3e2:	4621      	mov	r1, r4
    e3e4:	4638      	mov	r0, r7
    e3e6:	f012 f8a7 	bl	20538 <atomic_test_bit>
    e3ea:	2800      	cmp	r0, #0
    e3ec:	d1f6      	bne.n	e3dc <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e3ee:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    e3f0:	2b03      	cmp	r3, #3
    e3f2:	d03d      	beq.n	e470 <bt_smp_start_security+0xd4>
    e3f4:	d82c      	bhi.n	e450 <bt_smp_start_security+0xb4>
    e3f6:	3b01      	subs	r3, #1
    e3f8:	2b01      	cmp	r3, #1
    e3fa:	d947      	bls.n	e48c <bt_smp_start_security+0xf0>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    e3fc:	210b      	movs	r1, #11
    e3fe:	1d28      	adds	r0, r5, #4
    e400:	f012 f89a 	bl	20538 <atomic_test_bit>
    e404:	2800      	cmp	r0, #0
    e406:	d1cf      	bne.n	e3a8 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    e408:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e40c:	b983      	cbnz	r3, e430 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    e40e:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    e412:	7a29      	ldrb	r1, [r5, #8]
    e414:	4622      	mov	r2, r4
    e416:	2020      	movs	r0, #32
    e418:	f000 f998 	bl	e74c <bt_keys_find>
    e41c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e420:	b930      	cbnz	r0, e430 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    e422:	7a29      	ldrb	r1, [r5, #8]
    e424:	4622      	mov	r2, r4
    e426:	2004      	movs	r0, #4
    e428:	f000 f990 	bl	e74c <bt_keys_find>
    e42c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    e430:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e434:	2b00      	cmp	r3, #0
    e436:	d0b7      	beq.n	e3a8 <bt_smp_start_security+0xc>
    e438:	89da      	ldrh	r2, [r3, #14]
    e43a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    e43e:	2a00      	cmp	r2, #0
    e440:	d0b2      	beq.n	e3a8 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    e442:	7aaa      	ldrb	r2, [r5, #10]
    e444:	2a02      	cmp	r2, #2
    e446:	d921      	bls.n	e48c <bt_smp_start_security+0xf0>
    e448:	7b5b      	ldrb	r3, [r3, #13]
    e44a:	07db      	lsls	r3, r3, #31
    e44c:	d5ac      	bpl.n	e3a8 <bt_smp_start_security+0xc>
    e44e:	e01d      	b.n	e48c <bt_smp_start_security+0xf0>
	switch (conn->required_sec_level) {
    e450:	2b04      	cmp	r3, #4
    e452:	d1d3      	bne.n	e3fc <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e454:	f7fe fc10 	bl	cc78 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e458:	2803      	cmp	r0, #3
    e45a:	d104      	bne.n	e466 <bt_smp_start_security+0xca>
    e45c:	4b2c      	ldr	r3, [pc, #176]	; (e510 <bt_smp_start_security+0x174>)
    e45e:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e460:	b1fb      	cbz	r3, e4a2 <bt_smp_start_security+0x106>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e462:	68dc      	ldr	r4, [r3, #12]
    e464:	b10c      	cbz	r4, e46a <bt_smp_start_security+0xce>
    e466:	4b2b      	ldr	r3, [pc, #172]	; (e514 <bt_smp_start_security+0x178>)
    e468:	781c      	ldrb	r4, [r3, #0]
    e46a:	f004 0401 	and.w	r4, r4, #1
    e46e:	e00b      	b.n	e488 <bt_smp_start_security+0xec>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e470:	f7fe fc02 	bl	cc78 <get_io_capa>
    e474:	2803      	cmp	r0, #3
    e476:	d107      	bne.n	e488 <bt_smp_start_security+0xec>
		       (bt_auth && bt_auth->oob_data_request);
    e478:	4b25      	ldr	r3, [pc, #148]	; (e510 <bt_smp_start_security+0x174>)
    e47a:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    e47c:	2c00      	cmp	r4, #0
    e47e:	d0bd      	beq.n	e3fc <bt_smp_start_security+0x60>
		       (bt_auth && bt_auth->oob_data_request);
    e480:	68e4      	ldr	r4, [r4, #12]
    e482:	3c00      	subs	r4, #0
    e484:	bf18      	it	ne
    e486:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    e488:	2c00      	cmp	r4, #0
    e48a:	d0b7      	beq.n	e3fc <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    e48c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    e490:	b14b      	cbz	r3, e4a6 <bt_smp_start_security+0x10a>
	if (smp_init(smp) != 0) {
    e492:	4630      	mov	r0, r6
    e494:	f7fe fcae 	bl	cdf4 <smp_init>
    e498:	4604      	mov	r4, r0
    e49a:	b180      	cbz	r0, e4be <bt_smp_start_security+0x122>
		return -ENOBUFS;
    e49c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    e4a0:	e784      	b.n	e3ac <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    e4a2:	2400      	movs	r4, #0
    e4a4:	e7e1      	b.n	e46a <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e4a6:	7a28      	ldrb	r0, [r5, #8]
    e4a8:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e4ac:	f000 f8da 	bl	e664 <bt_keys_get_addr>
    e4b0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    e4b4:	2800      	cmp	r0, #0
    e4b6:	d1ec      	bne.n	e492 <bt_smp_start_security+0xf6>
			return -ENOMEM;
    e4b8:	f06f 040b 	mvn.w	r4, #11
    e4bc:	e776      	b.n	e3ac <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    e4be:	210b      	movs	r1, #11
    e4c0:	4630      	mov	r0, r6
    e4c2:	f012 f842 	bl	2054a <smp_create_pdu.isra.0>
	if (!req_buf) {
    e4c6:	4680      	mov	r8, r0
    e4c8:	2800      	cmp	r0, #0
    e4ca:	d0e7      	beq.n	e49c <bt_smp_start_security+0x100>
	req = net_buf_add(req_buf, sizeof(*req));
    e4cc:	2101      	movs	r1, #1
    e4ce:	3008      	adds	r0, #8
    e4d0:	f012 fb4a 	bl	20b68 <net_buf_simple_add>
    e4d4:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    e4d6:	2009      	movs	r0, #9
    e4d8:	f7fe fc34 	bl	cd44 <get_auth.isra.0>
    e4dc:	4623      	mov	r3, r4
    e4de:	f889 0000 	strb.w	r0, [r9]
    e4e2:	4642      	mov	r2, r8
    e4e4:	9400      	str	r4, [sp, #0]
    e4e6:	2106      	movs	r1, #6
    e4e8:	4628      	mov	r0, r5
    e4ea:	f011 f8a5 	bl	1f638 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    e4ee:	4638      	mov	r0, r7
    e4f0:	210e      	movs	r1, #14
    e4f2:	f011 ff59 	bl	203a8 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    e4f6:	2101      	movs	r1, #1
    e4f8:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    e4fc:	f011 ff54 	bl	203a8 <atomic_set_bit>
	return 0;
    e500:	e754      	b.n	e3ac <bt_smp_start_security+0x10>
		return -ENOTCONN;
    e502:	f06f 0438 	mvn.w	r4, #56	; 0x38
    e506:	e751      	b.n	e3ac <bt_smp_start_security+0x10>
		return -EIO;
    e508:	f06f 0404 	mvn.w	r4, #4
    e50c:	e74e      	b.n	e3ac <bt_smp_start_security+0x10>
    e50e:	bf00      	nop
    e510:	20001574 	.word	0x20001574
    e514:	2000307b 	.word	0x2000307b

0000e518 <bt_smp_update_keys>:
{
    e518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e51a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    e51c:	f7fe fc30 	bl	cd80 <smp_chan_get>
	if (!smp) {
    e520:	4605      	mov	r5, r0
    e522:	2800      	cmp	r0, #0
    e524:	f000 8081 	beq.w	e62a <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    e528:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
    e52c:	2103      	movs	r1, #3
    e52e:	4630      	mov	r0, r6
    e530:	f012 f802 	bl	20538 <atomic_test_bit>
    e534:	2800      	cmp	r0, #0
    e536:	d078      	beq.n	e62a <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
    e538:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e53c:	b108      	cbz	r0, e542 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
    e53e:	f000 f965 	bl	e80c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e542:	f104 0788 	add.w	r7, r4, #136	; 0x88
    e546:	7a20      	ldrb	r0, [r4, #8]
    e548:	4639      	mov	r1, r7
    e54a:	f000 f88b 	bl	e664 <bt_keys_get_addr>
    e54e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    e552:	b9b0      	cbnz	r0, e582 <bt_smp_update_keys+0x6a>
    e554:	4a35      	ldr	r2, [pc, #212]	; (e62c <bt_smp_update_keys+0x114>)
    e556:	4c36      	ldr	r4, [pc, #216]	; (e630 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
    e558:	4638      	mov	r0, r7
    e55a:	1aa4      	subs	r4, r4, r2
    e55c:	f7f7 fff8 	bl	6550 <bt_addr_le_str_real>
    e560:	f7f5 fa72 	bl	3a48 <log_strdup>
    e564:	08e4      	lsrs	r4, r4, #3
    e566:	01a4      	lsls	r4, r4, #6
    e568:	f044 0401 	orr.w	r4, r4, #1
    e56c:	4601      	mov	r1, r0
    e56e:	4622      	mov	r2, r4
    e570:	4830      	ldr	r0, [pc, #192]	; (e634 <bt_smp_update_keys+0x11c>)
    e572:	f00e fc89 	bl	1ce88 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e576:	4628      	mov	r0, r5
    e578:	2108      	movs	r1, #8
}
    e57a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    e57e:	f012 b8a2 	b.w	206c6 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    e582:	210d      	movs	r1, #13
    e584:	4630      	mov	r0, r6
    e586:	f011 ffd7 	bl	20538 <atomic_test_bit>
    e58a:	b128      	cbz	r0, e598 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    e58c:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    e590:	7b53      	ldrb	r3, [r2, #13]
    e592:	f043 0302 	orr.w	r3, r3, #2
    e596:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    e598:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
    e59c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
    e5a0:	2a03      	cmp	r2, #3
    e5a2:	7b4b      	ldrb	r3, [r1, #13]
    e5a4:	d838      	bhi.n	e618 <bt_smp_update_keys+0x100>
    e5a6:	b3d2      	cbz	r2, e61e <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    e5a8:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e5ac:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    e5ae:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    e5b2:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
    e5b6:	4293      	cmp	r3, r2
    e5b8:	bf28      	it	cs
    e5ba:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    e5bc:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e5be:	4630      	mov	r0, r6
    e5c0:	2105      	movs	r1, #5
    e5c2:	f011 ffb9 	bl	20538 <atomic_test_bit>
    e5c6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    e5ca:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e5cc:	b350      	cbz	r0, e624 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
    e5ce:	f042 0210 	orr.w	r2, r2, #16
    e5d2:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e5d4:	210c      	movs	r1, #12
    e5d6:	4630      	mov	r0, r6
    e5d8:	f011 ffae 	bl	20538 <atomic_test_bit>
    e5dc:	b328      	cbz	r0, e62a <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    e5de:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e5e2:	2120      	movs	r1, #32
    e5e4:	f012 fa65 	bl	20ab2 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    e5e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e5ec:	f105 01ff 	add.w	r1, r5, #255	; 0xff
    e5f0:	2210      	movs	r2, #16
    e5f2:	301a      	adds	r0, #26
    e5f4:	f010 fbfd 	bl	1edf2 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    e5f8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e5fc:	2208      	movs	r2, #8
    e5fe:	2100      	movs	r1, #0
    e600:	3010      	adds	r0, #16
    e602:	f010 fc21 	bl	1ee48 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e606:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    e60a:	2202      	movs	r2, #2
}
    e60c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    e610:	2100      	movs	r1, #0
    e612:	3018      	adds	r0, #24
    e614:	f010 bc18 	b.w	1ee48 <memset>
	switch (smp->method) {
    e618:	3a05      	subs	r2, #5
    e61a:	2a01      	cmp	r2, #1
    e61c:	d9c4      	bls.n	e5a8 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    e61e:	f023 0301 	bic.w	r3, r3, #1
    e622:	e7c3      	b.n	e5ac <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    e624:	f022 0210 	bic.w	r2, r2, #16
    e628:	735a      	strb	r2, [r3, #13]
}
    e62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e62c:	00021aac 	.word	0x00021aac
    e630:	00021b9c 	.word	0x00021b9c
    e634:	0002534b 	.word	0x0002534b

0000e638 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    e638:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e63a:	4b07      	ldr	r3, [pc, #28]	; (e658 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    e63c:	4807      	ldr	r0, [pc, #28]	; (e65c <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    e63e:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    e642:	f003 0306 	and.w	r3, r3, #6
    e646:	1f9a      	subs	r2, r3, #6
    e648:	4253      	negs	r3, r2
    e64a:	4153      	adcs	r3, r2
    e64c:	4a04      	ldr	r2, [pc, #16]	; (e660 <bt_smp_init+0x28>)
    e64e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    e650:	f7fa feaa 	bl	93a8 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    e654:	2000      	movs	r0, #0
    e656:	bd08      	pop	{r3, pc}
    e658:	20000000 	.word	0x20000000
    e65c:	2000038c 	.word	0x2000038c
    e660:	2000307b 	.word	0x2000307b

0000e664 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    e664:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e666:	4c1e      	ldr	r4, [pc, #120]	; (e6e0 <bt_keys_get_addr+0x7c>)
    e668:	7823      	ldrb	r3, [r4, #0]
    e66a:	4283      	cmp	r3, r0
{
    e66c:	b085      	sub	sp, #20
    e66e:	4605      	mov	r5, r0
    e670:	460f      	mov	r7, r1
    e672:	4626      	mov	r6, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e674:	d02c      	beq.n	e6d0 <bt_keys_get_addr+0x6c>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    e676:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    e678:	481a      	ldr	r0, [pc, #104]	; (e6e4 <bt_keys_get_addr+0x80>)
    e67a:	9402      	str	r4, [sp, #8]
    e67c:	2207      	movs	r2, #7
    e67e:	a902      	add	r1, sp, #8
    e680:	f8cd 400b 	str.w	r4, [sp, #11]
    e684:	f010 fba5 	bl	1edd2 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    e688:	b188      	cbz	r0, e6ae <bt_keys_get_addr+0x4a>
	memcpy(dst, src, sizeof(*dst));
    e68a:	2207      	movs	r2, #7
    e68c:	4915      	ldr	r1, [pc, #84]	; (e6e4 <bt_keys_get_addr+0x80>)
    e68e:	4668      	mov	r0, sp
    e690:	f010 fbaf 	bl	1edf2 <memcpy>
			}
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
    e694:	4669      	mov	r1, sp
    e696:	7830      	ldrb	r0, [r6, #0]
    e698:	f7f9 fd88 	bl	81ac <bt_unpair>
	return memcmp(a, b, sizeof(*a));
    e69c:	4811      	ldr	r0, [pc, #68]	; (e6e4 <bt_keys_get_addr+0x80>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
    e69e:	9402      	str	r4, [sp, #8]
    e6a0:	2207      	movs	r2, #7
    e6a2:	a902      	add	r1, sp, #8
    e6a4:	f8cd 400b 	str.w	r4, [sp, #11]
    e6a8:	f010 fb93 	bl	1edd2 <memcmp>
    e6ac:	b9b0      	cbnz	r0, e6dc <bt_keys_get_addr+0x78>
	memcpy(dst, src, sizeof(*dst));
    e6ae:	2207      	movs	r2, #7
    e6b0:	480c      	ldr	r0, [pc, #48]	; (e6e4 <bt_keys_get_addr+0x80>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
    e6b2:	7035      	strb	r5, [r6, #0]
    e6b4:	4639      	mov	r1, r7
    e6b6:	f010 fb9c 	bl	1edf2 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
    e6ba:	4a0b      	ldr	r2, [pc, #44]	; (e6e8 <bt_keys_get_addr+0x84>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
    e6bc:	4808      	ldr	r0, [pc, #32]	; (e6e0 <bt_keys_get_addr+0x7c>)
		keys->aging_counter = ++aging_counter_val;
    e6be:	6813      	ldr	r3, [r2, #0]
    e6c0:	3301      	adds	r3, #1
    e6c2:	6013      	str	r3, [r2, #0]
    e6c4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		last_keys_updated = keys;
    e6c8:	4b08      	ldr	r3, [pc, #32]	; (e6ec <bt_keys_get_addr+0x88>)
    e6ca:	601e      	str	r6, [r3, #0]
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
}
    e6cc:	b005      	add	sp, #20
    e6ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
    e6d0:	2207      	movs	r2, #7
    e6d2:	1c60      	adds	r0, r4, #1
    e6d4:	f010 fb7d 	bl	1edd2 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    e6d8:	2800      	cmp	r0, #0
    e6da:	d1cc      	bne.n	e676 <bt_keys_get_addr+0x12>
		keys = &key_pool[i];
    e6dc:	4620      	mov	r0, r4
    e6de:	e7f5      	b.n	e6cc <bt_keys_get_addr+0x68>
    e6e0:	20001608 	.word	0x20001608
    e6e4:	20001609 	.word	0x20001609
    e6e8:	20001604 	.word	0x20001604
    e6ec:	20001690 	.word	0x20001690

0000e6f0 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
    e6f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e6f2:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
    e6f4:	4908      	ldr	r1, [pc, #32]	; (e718 <bt_foreach_bond+0x28>)
    e6f6:	89cb      	ldrh	r3, [r1, #14]
{
    e6f8:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
    e6fa:	b153      	cbz	r3, e712 <bt_foreach_bond+0x22>
    e6fc:	780b      	ldrb	r3, [r1, #0]
    e6fe:	4283      	cmp	r3, r0
    e700:	d107      	bne.n	e712 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
    e702:	3101      	adds	r1, #1
    e704:	2207      	movs	r2, #7
    e706:	4668      	mov	r0, sp
    e708:	f010 fb73 	bl	1edf2 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
    e70c:	4629      	mov	r1, r5
    e70e:	4668      	mov	r0, sp
    e710:	47a0      	blx	r4
		}
	}
}
    e712:	b003      	add	sp, #12
    e714:	bd30      	pop	{r4, r5, pc}
    e716:	bf00      	nop
    e718:	20001608 	.word	0x20001608

0000e71c <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    e71c:	460b      	mov	r3, r1
    e71e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    e720:	4a04      	ldr	r2, [pc, #16]	; (e734 <bt_keys_foreach+0x18>)
{
    e722:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    e724:	89d4      	ldrh	r4, [r2, #14]
    e726:	4204      	tst	r4, r0
    e728:	d002      	beq.n	e730 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    e72a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    e72c:	4610      	mov	r0, r2
    e72e:	4718      	bx	r3
}
    e730:	bc10      	pop	{r4}
    e732:	4770      	bx	lr
    e734:	20001608 	.word	0x20001608

0000e738 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    e738:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    e73a:	4903      	ldr	r1, [pc, #12]	; (e748 <keys_commit+0x10>)
    e73c:	2200      	movs	r2, #0
    e73e:	2002      	movs	r0, #2
    e740:	f7ff ffec 	bl	e71c <bt_keys_foreach>
	}

	return 0;
}
    e744:	2000      	movs	r0, #0
    e746:	bd08      	pop	{r3, pc}
    e748:	00020a8f 	.word	0x00020a8f

0000e74c <bt_keys_find>:
{
    e74c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e74e:	4c09      	ldr	r4, [pc, #36]	; (e774 <bt_keys_find+0x28>)
{
    e750:	460b      	mov	r3, r1
    e752:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    e754:	89e2      	ldrh	r2, [r4, #14]
    e756:	4202      	tst	r2, r0
    e758:	d007      	beq.n	e76a <bt_keys_find+0x1e>
    e75a:	7822      	ldrb	r2, [r4, #0]
    e75c:	429a      	cmp	r2, r3
    e75e:	d104      	bne.n	e76a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    e760:	2207      	movs	r2, #7
    e762:	1c60      	adds	r0, r4, #1
    e764:	f010 fb35 	bl	1edd2 <memcmp>
    e768:	b108      	cbz	r0, e76e <bt_keys_find+0x22>
	return NULL;
    e76a:	2000      	movs	r0, #0
}
    e76c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e76e:	4620      	mov	r0, r4
    e770:	e7fc      	b.n	e76c <bt_keys_find+0x20>
    e772:	bf00      	nop
    e774:	20001608 	.word	0x20001608

0000e778 <bt_keys_find_irk>:
{
    e778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    e77a:	780b      	ldrb	r3, [r1, #0]
    e77c:	2b01      	cmp	r3, #1
    e77e:	4607      	mov	r7, r0
    e780:	460c      	mov	r4, r1
    e782:	d001      	beq.n	e788 <bt_keys_find_irk+0x10>
		return NULL;
    e784:	2000      	movs	r0, #0
}
    e786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    e788:	798b      	ldrb	r3, [r1, #6]
    e78a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    e78e:	2b40      	cmp	r3, #64	; 0x40
    e790:	d1f8      	bne.n	e784 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e792:	4d13      	ldr	r5, [pc, #76]	; (e7e0 <bt_keys_find_irk+0x68>)
    e794:	89eb      	ldrh	r3, [r5, #14]
    e796:	f013 0f02 	tst.w	r3, #2
    e79a:	462e      	mov	r6, r5
    e79c:	d0f2      	beq.n	e784 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    e79e:	7833      	ldrb	r3, [r6, #0]
    e7a0:	42bb      	cmp	r3, r7
    e7a2:	d10b      	bne.n	e7bc <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    e7a4:	2206      	movs	r2, #6
    e7a6:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    e7aa:	1c60      	adds	r0, r4, #1
    e7ac:	f010 fb11 	bl	1edd2 <memcmp>
    e7b0:	b908      	cbnz	r0, e7b6 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    e7b2:	4628      	mov	r0, r5
    e7b4:	e7e7      	b.n	e786 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    e7b6:	89f3      	ldrh	r3, [r6, #14]
    e7b8:	079b      	lsls	r3, r3, #30
    e7ba:	d5e3      	bpl.n	e784 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    e7bc:	7833      	ldrb	r3, [r6, #0]
    e7be:	42bb      	cmp	r3, r7
    e7c0:	d1e0      	bne.n	e784 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    e7c2:	3401      	adds	r4, #1
    e7c4:	4807      	ldr	r0, [pc, #28]	; (e7e4 <bt_keys_find_irk+0x6c>)
    e7c6:	4621      	mov	r1, r4
    e7c8:	f010 fb83 	bl	1eed2 <bt_rpa_irk_matches>
    e7cc:	2800      	cmp	r0, #0
    e7ce:	d0d9      	beq.n	e784 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    e7d0:	4805      	ldr	r0, [pc, #20]	; (e7e8 <bt_keys_find_irk+0x70>)
    e7d2:	2206      	movs	r2, #6
    e7d4:	4621      	mov	r1, r4
    e7d6:	f010 fb0c 	bl	1edf2 <memcpy>
			return &key_pool[i];
    e7da:	4801      	ldr	r0, [pc, #4]	; (e7e0 <bt_keys_find_irk+0x68>)
}
    e7dc:	e7d3      	b.n	e786 <bt_keys_find_irk+0xe>
    e7de:	bf00      	nop
    e7e0:	20001608 	.word	0x20001608
    e7e4:	20001632 	.word	0x20001632
    e7e8:	20001642 	.word	0x20001642

0000e7ec <bt_keys_find_addr>:
{
    e7ec:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    e7ee:	4c06      	ldr	r4, [pc, #24]	; (e808 <bt_keys_find_addr+0x1c>)
    e7f0:	7823      	ldrb	r3, [r4, #0]
    e7f2:	4283      	cmp	r3, r0
    e7f4:	d104      	bne.n	e800 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    e7f6:	2207      	movs	r2, #7
    e7f8:	1c60      	adds	r0, r4, #1
    e7fa:	f010 faea 	bl	1edd2 <memcmp>
    e7fe:	b108      	cbz	r0, e804 <bt_keys_find_addr+0x18>
	return NULL;
    e800:	2000      	movs	r0, #0
}
    e802:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    e804:	4620      	mov	r0, r4
    e806:	e7fc      	b.n	e802 <bt_keys_find_addr+0x16>
    e808:	20001608 	.word	0x20001608

0000e80c <bt_keys_clear>:
{
    e80c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    e80e:	7a03      	ldrb	r3, [r0, #8]
    e810:	075b      	lsls	r3, r3, #29
{
    e812:	b08c      	sub	sp, #48	; 0x30
    e814:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    e816:	d501      	bpl.n	e81c <bt_keys_clear+0x10>
		bt_id_del(keys);
    e818:	f7f9 fdbc 	bl	8394 <bt_id_del>
		if (keys->id) {
    e81c:	4625      	mov	r5, r4
    e81e:	f815 2b01 	ldrb.w	r2, [r5], #1
    e822:	b1aa      	cbz	r2, e850 <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    e824:	ae02      	add	r6, sp, #8
    e826:	2104      	movs	r1, #4
    e828:	4630      	mov	r0, r6
    e82a:	f00d ff15 	bl	1c658 <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    e82e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    e830:	462b      	mov	r3, r5
    e832:	4a08      	ldr	r2, [pc, #32]	; (e854 <bt_keys_clear+0x48>)
    e834:	2124      	movs	r1, #36	; 0x24
    e836:	a803      	add	r0, sp, #12
    e838:	f7f8 f93a 	bl	6ab0 <bt_settings_encode_key>
		settings_delete(key);
    e83c:	a803      	add	r0, sp, #12
    e83e:	f00e ffaf 	bl	1d7a0 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    e842:	2288      	movs	r2, #136	; 0x88
    e844:	2100      	movs	r1, #0
    e846:	4620      	mov	r0, r4
    e848:	f010 fafe 	bl	1ee48 <memset>
}
    e84c:	b00c      	add	sp, #48	; 0x30
    e84e:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    e850:	9200      	str	r2, [sp, #0]
    e852:	e7ed      	b.n	e830 <bt_keys_clear+0x24>
    e854:	0002574d 	.word	0x0002574d

0000e858 <keys_set>:
{
    e858:	b5f0      	push	{r4, r5, r6, r7, lr}
    e85a:	4614      	mov	r4, r2
    e85c:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
    e85e:	4606      	mov	r6, r0
    e860:	b970      	cbnz	r0, e880 <keys_set+0x28>
    e862:	4952      	ldr	r1, [pc, #328]	; (e9ac <keys_set+0x154>)
    e864:	4b52      	ldr	r3, [pc, #328]	; (e9b0 <keys_set+0x158>)
		BT_ERR("Insufficient number of arguments");
    e866:	4853      	ldr	r0, [pc, #332]	; (e9b4 <keys_set+0x15c>)
    e868:	1ac9      	subs	r1, r1, r3
    e86a:	08c9      	lsrs	r1, r1, #3
    e86c:	0189      	lsls	r1, r1, #6
    e86e:	f041 0101 	orr.w	r1, r1, #1
    e872:	f00e fafc 	bl	1ce6e <log_0>
		return -EINVAL;
    e876:	f06f 0415 	mvn.w	r4, #21
}
    e87a:	4620      	mov	r0, r4
    e87c:	b023      	add	sp, #140	; 0x8c
    e87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
    e880:	227c      	movs	r2, #124	; 0x7c
    e882:	a903      	add	r1, sp, #12
    e884:	4618      	mov	r0, r3
    e886:	47a0      	blx	r4
	if (len < 0) {
    e888:	1e05      	subs	r5, r0, #0
    e88a:	da0b      	bge.n	e8a4 <keys_set+0x4c>
    e88c:	4a47      	ldr	r2, [pc, #284]	; (e9ac <keys_set+0x154>)
    e88e:	4b48      	ldr	r3, [pc, #288]	; (e9b0 <keys_set+0x158>)
		BT_ERR("Failed to read value (err %zd)", len);
    e890:	4849      	ldr	r0, [pc, #292]	; (e9b8 <keys_set+0x160>)
    e892:	1ad2      	subs	r2, r2, r3
    e894:	08d2      	lsrs	r2, r2, #3
    e896:	0192      	lsls	r2, r2, #6
    e898:	f042 0201 	orr.w	r2, r2, #1
    e89c:	4629      	mov	r1, r5
    e89e:	f00e faf3 	bl	1ce88 <log_1>
    e8a2:	e7e8      	b.n	e876 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
    e8a4:	a901      	add	r1, sp, #4
    e8a6:	4630      	mov	r0, r6
    e8a8:	f010 fb72 	bl	1ef90 <bt_settings_decode_key>
	if (err) {
    e8ac:	4604      	mov	r4, r0
    e8ae:	b148      	cbz	r0, e8c4 <keys_set+0x6c>
    e8b0:	4a3e      	ldr	r2, [pc, #248]	; (e9ac <keys_set+0x154>)
    e8b2:	4b3f      	ldr	r3, [pc, #252]	; (e9b0 <keys_set+0x158>)
		BT_ERR("Unable to decode address %s", name);
    e8b4:	4841      	ldr	r0, [pc, #260]	; (e9bc <keys_set+0x164>)
    e8b6:	1ad2      	subs	r2, r2, r3
    e8b8:	08d2      	lsrs	r2, r2, #3
    e8ba:	0192      	lsls	r2, r2, #6
    e8bc:	f042 0201 	orr.w	r2, r2, #1
    e8c0:	4631      	mov	r1, r6
    e8c2:	e7ec      	b.n	e89e <keys_set+0x46>
	settings_name_next(name, &next);
    e8c4:	4669      	mov	r1, sp
    e8c6:	4630      	mov	r0, r6
    e8c8:	f00e ff91 	bl	1d7ee <settings_name_next>
	if (!next) {
    e8cc:	9800      	ldr	r0, [sp, #0]
    e8ce:	b188      	cbz	r0, e8f4 <keys_set+0x9c>
		id = strtol(next, NULL, 10);
    e8d0:	220a      	movs	r2, #10
    e8d2:	4621      	mov	r1, r4
    e8d4:	f010 f9c8 	bl	1ec68 <strtol>
    e8d8:	b2c0      	uxtb	r0, r0
	if (!len) {
    e8da:	b9fd      	cbnz	r5, e91c <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
    e8dc:	4601      	mov	r1, r0
    e8de:	aa01      	add	r2, sp, #4
    e8e0:	203f      	movs	r0, #63	; 0x3f
    e8e2:	f7ff ff33 	bl	e74c <bt_keys_find>
		if (keys) {
    e8e6:	b138      	cbz	r0, e8f8 <keys_set+0xa0>
			(void)memset(keys, 0, sizeof(*keys));
    e8e8:	2288      	movs	r2, #136	; 0x88
    e8ea:	4629      	mov	r1, r5
    e8ec:	f010 faac 	bl	1ee48 <memset>
		return 0;
    e8f0:	462c      	mov	r4, r5
    e8f2:	e7c2      	b.n	e87a <keys_set+0x22>
		id = BT_ID_DEFAULT;
    e8f4:	4620      	mov	r0, r4
    e8f6:	e7f0      	b.n	e8da <keys_set+0x82>
    e8f8:	4a2d      	ldr	r2, [pc, #180]	; (e9b0 <keys_set+0x158>)
    e8fa:	4c2c      	ldr	r4, [pc, #176]	; (e9ac <keys_set+0x154>)
			BT_WARN("Unable to find deleted keys for %s",
    e8fc:	a801      	add	r0, sp, #4
    e8fe:	1aa4      	subs	r4, r4, r2
    e900:	f7f7 fe26 	bl	6550 <bt_addr_le_str_real>
    e904:	f7f5 f8a0 	bl	3a48 <log_strdup>
    e908:	08e4      	lsrs	r4, r4, #3
    e90a:	01a4      	lsls	r4, r4, #6
    e90c:	f044 0402 	orr.w	r4, r4, #2
    e910:	4601      	mov	r1, r0
    e912:	4622      	mov	r2, r4
    e914:	482a      	ldr	r0, [pc, #168]	; (e9c0 <keys_set+0x168>)
    e916:	f00e fab7 	bl	1ce88 <log_1>
    e91a:	e7e9      	b.n	e8f0 <keys_set+0x98>
	keys = bt_keys_get_addr(id, &addr);
    e91c:	a901      	add	r1, sp, #4
    e91e:	f7ff fea1 	bl	e664 <bt_keys_get_addr>
	if (!keys) {
    e922:	4607      	mov	r7, r0
    e924:	b998      	cbnz	r0, e94e <keys_set+0xf6>
    e926:	4a22      	ldr	r2, [pc, #136]	; (e9b0 <keys_set+0x158>)
    e928:	4c20      	ldr	r4, [pc, #128]	; (e9ac <keys_set+0x154>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
    e92a:	a801      	add	r0, sp, #4
    e92c:	1aa4      	subs	r4, r4, r2
    e92e:	f7f7 fe0f 	bl	6550 <bt_addr_le_str_real>
    e932:	f7f5 f889 	bl	3a48 <log_strdup>
    e936:	08e4      	lsrs	r4, r4, #3
    e938:	01a4      	lsls	r4, r4, #6
    e93a:	f044 0401 	orr.w	r4, r4, #1
    e93e:	4601      	mov	r1, r0
    e940:	4622      	mov	r2, r4
    e942:	4820      	ldr	r0, [pc, #128]	; (e9c4 <keys_set+0x16c>)
    e944:	f00e faa0 	bl	1ce88 <log_1>
		return -ENOMEM;
    e948:	f06f 040b 	mvn.w	r4, #11
    e94c:	e795      	b.n	e87a <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
    e94e:	2d7c      	cmp	r5, #124	; 0x7c
    e950:	d013      	beq.n	e97a <keys_set+0x122>
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
    e952:	4b16      	ldr	r3, [pc, #88]	; (e9ac <keys_set+0x154>)
    e954:	4a16      	ldr	r2, [pc, #88]	; (e9b0 <keys_set+0x158>)
    e956:	1a9b      	subs	r3, r3, r2
    e958:	08db      	lsrs	r3, r3, #3
    e95a:	2d78      	cmp	r5, #120	; 0x78
    e95c:	ea4f 1383 	mov.w	r3, r3, lsl #6
    e960:	d119      	bne.n	e996 <keys_set+0x13e>
				BT_WARN("Keys for %s have no aging counter",
    e962:	a801      	add	r0, sp, #4
    e964:	f043 0602 	orr.w	r6, r3, #2
    e968:	f7f7 fdf2 	bl	6550 <bt_addr_le_str_real>
    e96c:	f7f5 f86c 	bl	3a48 <log_strdup>
    e970:	4632      	mov	r2, r6
    e972:	4601      	mov	r1, r0
    e974:	4814      	ldr	r0, [pc, #80]	; (e9c8 <keys_set+0x170>)
    e976:	f00e fa87 	bl	1ce88 <log_1>
		memcpy(keys->storage_start, val, len);
    e97a:	462a      	mov	r2, r5
    e97c:	a903      	add	r1, sp, #12
    e97e:	f107 000c 	add.w	r0, r7, #12
    e982:	f010 fa36 	bl	1edf2 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
    e986:	4b11      	ldr	r3, [pc, #68]	; (e9cc <keys_set+0x174>)
    e988:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    e98c:	6819      	ldr	r1, [r3, #0]
    e98e:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
    e990:	bf88      	it	hi
    e992:	601a      	strhi	r2, [r3, #0]
    e994:	e771      	b.n	e87a <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
    e996:	480e      	ldr	r0, [pc, #56]	; (e9d0 <keys_set+0x178>)
    e998:	f043 0301 	orr.w	r3, r3, #1
    e99c:	227c      	movs	r2, #124	; 0x7c
    e99e:	4629      	mov	r1, r5
    e9a0:	f00e fa86 	bl	1ceb0 <log_2>
			bt_keys_clear(keys);
    e9a4:	4638      	mov	r0, r7
    e9a6:	f7ff ff31 	bl	e80c <bt_keys_clear>
			return -EINVAL;
    e9aa:	e764      	b.n	e876 <keys_set+0x1e>
    e9ac:	00021b7c 	.word	0x00021b7c
    e9b0:	00021aac 	.word	0x00021aac
    e9b4:	00023f47 	.word	0x00023f47
    e9b8:	0002568c 	.word	0x0002568c
    e9bc:	00025167 	.word	0x00025167
    e9c0:	000256ab 	.word	0x000256ab
    e9c4:	000256ce 	.word	0x000256ce
    e9c8:	000256ed 	.word	0x000256ed
    e9cc:	20001604 	.word	0x20001604
    e9d0:	0002570f 	.word	0x0002570f

0000e9d4 <bt_keys_store>:
{
    e9d4:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    e9d6:	4605      	mov	r5, r0
{
    e9d8:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    e9da:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    e9de:	4604      	mov	r4, r0
	if (keys->id) {
    e9e0:	b30a      	cbz	r2, ea26 <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
    e9e2:	ae02      	add	r6, sp, #8
    e9e4:	2104      	movs	r1, #4
    e9e6:	4630      	mov	r0, r6
    e9e8:	f00d fe36 	bl	1c658 <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    e9ec:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    e9ee:	4a0f      	ldr	r2, [pc, #60]	; (ea2c <bt_keys_store+0x58>)
    e9f0:	462b      	mov	r3, r5
    e9f2:	2124      	movs	r1, #36	; 0x24
    e9f4:	a803      	add	r0, sp, #12
    e9f6:	f7f8 f85b 	bl	6ab0 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    e9fa:	f104 010c 	add.w	r1, r4, #12
    e9fe:	227c      	movs	r2, #124	; 0x7c
    ea00:	a803      	add	r0, sp, #12
    ea02:	f7f6 f99d 	bl	4d40 <settings_save_one>
	if (err) {
    ea06:	4604      	mov	r4, r0
    ea08:	b150      	cbz	r0, ea20 <bt_keys_store+0x4c>
    ea0a:	4a09      	ldr	r2, [pc, #36]	; (ea30 <bt_keys_store+0x5c>)
    ea0c:	4b09      	ldr	r3, [pc, #36]	; (ea34 <bt_keys_store+0x60>)
    ea0e:	1ad2      	subs	r2, r2, r3
    ea10:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
    ea12:	0192      	lsls	r2, r2, #6
    ea14:	4601      	mov	r1, r0
    ea16:	f042 0201 	orr.w	r2, r2, #1
    ea1a:	4807      	ldr	r0, [pc, #28]	; (ea38 <bt_keys_store+0x64>)
    ea1c:	f00e fa34 	bl	1ce88 <log_1>
}
    ea20:	4620      	mov	r0, r4
    ea22:	b00c      	add	sp, #48	; 0x30
    ea24:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    ea26:	9200      	str	r2, [sp, #0]
    ea28:	e7e1      	b.n	e9ee <bt_keys_store+0x1a>
    ea2a:	bf00      	nop
    ea2c:	0002574d 	.word	0x0002574d
    ea30:	00021b7c 	.word	0x00021b7c
    ea34:	00021aac 	.word	0x00021aac
    ea38:	0002572d 	.word	0x0002572d

0000ea3c <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
    ea3c:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
    ea3e:	f7ff fed5 	bl	e7ec <bt_keys_find_addr>

	if (!keys) {
    ea42:	b150      	cbz	r0, ea5a <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
    ea44:	4a05      	ldr	r2, [pc, #20]	; (ea5c <bt_keys_update_usage+0x20>)
    ea46:	6813      	ldr	r3, [r2, #0]
    ea48:	4283      	cmp	r3, r0
    ea4a:	d006      	beq.n	ea5a <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
    ea4c:	4904      	ldr	r1, [pc, #16]	; (ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>)
	last_keys_updated = keys;
    ea4e:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
    ea50:	680b      	ldr	r3, [r1, #0]
    ea52:	3301      	adds	r3, #1
    ea54:	600b      	str	r3, [r1, #0]
    ea56:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
    ea5a:	bd08      	pop	{r3, pc}
    ea5c:	20001690 	.word	0x20001690
    ea60:	20001604 	.word	0x20001604

0000ea64 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    ea64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea68:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ea6a:	1dc2      	adds	r2, r0, #7
    ea6c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ea70:	1e67      	subs	r7, r4, #1
    ea72:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    ea74:	6018      	str	r0, [r3, #0]
{
    ea76:	b082      	sub	sp, #8
    ea78:	4605      	mov	r5, r0
    ea7a:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ea7c:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    ea80:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    ea82:	2100      	movs	r1, #0
    ea84:	2204      	movs	r2, #4
    ea86:	f010 f9df 	bl	1ee48 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    ea8a:	b1b7      	cbz	r7, eaba <mem_init+0x56>
    ea8c:	3c02      	subs	r4, #2
    ea8e:	b2a4      	uxth	r4, r4
    ea90:	fb04 6306 	mla	r3, r4, r6, r6
    ea94:	fb04 f706 	mul.w	r7, r4, r6
    ea98:	441d      	add	r5, r3
    ea9a:	1aff      	subs	r7, r7, r3
    ea9c:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    eaa0:	2204      	movs	r2, #4
	while (mem_count--) {
    eaa2:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    eaa4:	19e8      	adds	r0, r5, r7
    eaa6:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    eaaa:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
    eaac:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    eaae:	f010 f9a0 	bl	1edf2 <memcpy>
	while (mem_count--) {
    eab2:	4544      	cmp	r4, r8
    eab4:	eba5 0506 	sub.w	r5, r5, r6
    eab8:	d1f2      	bne.n	eaa0 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    eaba:	b002      	add	sp, #8
    eabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000eac0 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    eac0:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    eac2:	6805      	ldr	r5, [r0, #0]
{
    eac4:	b082      	sub	sp, #8
	if (*mem_head) {
    eac6:	b195      	cbz	r5, eaee <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    eac8:	1deb      	adds	r3, r5, #7
    eaca:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    eace:	2204      	movs	r2, #4
    ead0:	4604      	mov	r4, r0
    ead2:	4629      	mov	r1, r5
    ead4:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    ead8:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    eada:	f010 f98a 	bl	1edf2 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    eade:	9b01      	ldr	r3, [sp, #4]
    eae0:	b123      	cbz	r3, eaec <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    eae2:	1dda      	adds	r2, r3, #7
    eae4:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    eae8:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    eaea:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    eaec:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    eaee:	4628      	mov	r0, r5
    eaf0:	b002      	add	sp, #8
    eaf2:	bd70      	pop	{r4, r5, r6, pc}

0000eaf4 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    eaf4:	680b      	ldr	r3, [r1, #0]
{
    eaf6:	b570      	push	{r4, r5, r6, lr}
    eaf8:	460c      	mov	r4, r1
    eafa:	4605      	mov	r5, r0
	if (*mem_head) {
    eafc:	b183      	cbz	r3, eb20 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    eafe:	3307      	adds	r3, #7
    eb00:	f023 0303 	bic.w	r3, r3, #3
    eb04:	881e      	ldrh	r6, [r3, #0]
    eb06:	3601      	adds	r6, #1
    eb08:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    eb0a:	2204      	movs	r2, #4
    eb0c:	4621      	mov	r1, r4
    eb0e:	4628      	mov	r0, r5
    eb10:	f010 f96f 	bl	1edf2 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    eb14:	1deb      	adds	r3, r5, #7
    eb16:	f023 0303 	bic.w	r3, r3, #3
    eb1a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    eb1c:	6025      	str	r5, [r4, #0]
}
    eb1e:	bd70      	pop	{r4, r5, r6, pc}
    eb20:	2601      	movs	r6, #1
    eb22:	e7f2      	b.n	eb0a <mem_release+0x16>

0000eb24 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    eb24:	fb02 0001 	mla	r0, r2, r1, r0
    eb28:	4770      	bx	lr
    eb2a:	bf00      	nop

0000eb2c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    eb2c:	1a40      	subs	r0, r0, r1
    eb2e:	b280      	uxth	r0, r0
}
    eb30:	fbb0 f0f2 	udiv	r0, r0, r2
    eb34:	4770      	bx	lr
    eb36:	bf00      	nop

0000eb38 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    eb38:	1e53      	subs	r3, r2, #1
	src += len;
    eb3a:	4411      	add	r1, r2
	while (len--) {
    eb3c:	b29b      	uxth	r3, r3
    eb3e:	b142      	cbz	r2, eb52 <mem_rcopy+0x1a>
    eb40:	43db      	mvns	r3, r3
    eb42:	18ca      	adds	r2, r1, r3
    eb44:	3801      	subs	r0, #1
		*dst++ = *--src;
    eb46:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    eb4a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    eb4e:	4291      	cmp	r1, r2
    eb50:	d1f9      	bne.n	eb46 <mem_rcopy+0xe>
	}
}
    eb52:	4770      	bx	lr

0000eb54 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    eb54:	4401      	add	r1, r0
    eb56:	e002      	b.n	eb5e <mem_nz+0xa>
		if (*src++) {
    eb58:	f810 3b01 	ldrb.w	r3, [r0], #1
    eb5c:	b91b      	cbnz	r3, eb66 <mem_nz+0x12>
	while (len--) {
    eb5e:	4288      	cmp	r0, r1
    eb60:	d1fa      	bne.n	eb58 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    eb62:	2000      	movs	r0, #0
    eb64:	4770      	bx	lr
			return 1;
    eb66:	2001      	movs	r0, #1
}
    eb68:	4770      	bx	lr
    eb6a:	bf00      	nop

0000eb6c <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    eb6c:	6010      	str	r0, [r2, #0]
    eb6e:	6008      	str	r0, [r1, #0]

	return link;
}
    eb70:	4770      	bx	lr
    eb72:	bf00      	nop

0000eb74 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    eb74:	680a      	ldr	r2, [r1, #0]
{
    eb76:	4603      	mov	r3, r0
	if (*head != *tail) {
    eb78:	6800      	ldr	r0, [r0, #0]
    eb7a:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    eb7c:	bf05      	ittet	eq
    eb7e:	2200      	moveq	r2, #0
    eb80:	600a      	streq	r2, [r1, #0]
		return NULL;
    eb82:	2000      	movne	r0, #0
	*head = *tail = NULL;
    eb84:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    eb86:	4770      	bx	lr

0000eb88 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    eb88:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    eb8a:	6814      	ldr	r4, [r2, #0]
    eb8c:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    eb8e:	6814      	ldr	r4, [r2, #0]
    eb90:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    eb92:	bc10      	pop	{r4}
	*tail = link;
    eb94:	6010      	str	r0, [r2, #0]
}
    eb96:	4770      	bx	lr

0000eb98 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    eb98:	4288      	cmp	r0, r1
    eb9a:	d003      	beq.n	eba4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    eb9c:	b11a      	cbz	r2, eba6 <memq_peek+0xe>
		*mem = head->mem;
    eb9e:	6843      	ldr	r3, [r0, #4]
    eba0:	6013      	str	r3, [r2, #0]
    eba2:	4770      	bx	lr
		return NULL;
    eba4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    eba6:	4770      	bx	lr

0000eba8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    eba8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    ebaa:	4283      	cmp	r3, r0
    ebac:	d009      	beq.n	ebc2 <memq_dequeue+0x1a>
	if (mem) {
    ebae:	b12a      	cbz	r2, ebbc <memq_dequeue+0x14>
		*mem = head->mem;
    ebb0:	6858      	ldr	r0, [r3, #4]
    ebb2:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    ebb4:	681a      	ldr	r2, [r3, #0]
    ebb6:	600a      	str	r2, [r1, #0]

	return old_head;
}
    ebb8:	4618      	mov	r0, r3
    ebba:	4770      	bx	lr
	if (old_head == NULL) {
    ebbc:	2b00      	cmp	r3, #0
    ebbe:	d1f9      	bne.n	ebb4 <memq_dequeue+0xc>
    ebc0:	e7fa      	b.n	ebb8 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    ebc2:	2300      	movs	r3, #0
    ebc4:	e7f8      	b.n	ebb8 <memq_dequeue+0x10>
    ebc6:	bf00      	nop

0000ebc8 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    ebc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ebcc:	f8df 8034 	ldr.w	r8, [pc, #52]	; ec04 <mayfly_init+0x3c>
    ebd0:	4e0b      	ldr	r6, [pc, #44]	; (ec00 <mayfly_init+0x38>)
    ebd2:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    ebd4:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    ebd8:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    ebda:	1d22      	adds	r2, r4, #4
    ebdc:	4621      	mov	r1, r4
    ebde:	4628      	mov	r0, r5
    ebe0:	3c0c      	subs	r4, #12
    ebe2:	f7ff ffc3 	bl	eb6c <memq_init>
		while (caller_id--) {
    ebe6:	42b4      	cmp	r4, r6
    ebe8:	f1a5 0508 	sub.w	r5, r5, #8
    ebec:	d1f5      	bne.n	ebda <mayfly_init+0x12>
	while (callee_id--) {
    ebee:	3f04      	subs	r7, #4
    ebf0:	1d3b      	adds	r3, r7, #4
    ebf2:	f1a8 0820 	sub.w	r8, r8, #32
    ebf6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    ebfa:	d1eb      	bne.n	ebd4 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ec00:	2000179c 	.word	0x2000179c
    ec04:	2000170c 	.word	0x2000170c

0000ec08 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    ec08:	b430      	push	{r4, r5}
    ec0a:	4603      	mov	r3, r0
    ec0c:	460c      	mov	r4, r1
	if (enable) {
    ec0e:	b19a      	cbz	r2, ec38 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    ec10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    ec14:	0108      	lsls	r0, r1, #4
    ec16:	4d14      	ldr	r5, [pc, #80]	; (ec68 <mayfly_enable+0x60>)
    ec18:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    ec1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    ec20:	4429      	add	r1, r5
    ec22:	7a48      	ldrb	r0, [r1, #9]
    ec24:	7a0d      	ldrb	r5, [r1, #8]
    ec26:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    ec28:	bf04      	itt	eq
    ec2a:	3001      	addeq	r0, #1
    ec2c:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    ec2e:	4621      	mov	r1, r4
    ec30:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    ec32:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    ec34:	f00a bfba 	b.w	19bac <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    ec38:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    ec3c:	4d0a      	ldr	r5, [pc, #40]	; (ec68 <mayfly_enable+0x60>)
    ec3e:	0112      	lsls	r2, r2, #4
    ec40:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ec44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ec48:	442b      	add	r3, r5
    ec4a:	7a9d      	ldrb	r5, [r3, #10]
    ec4c:	7ada      	ldrb	r2, [r3, #11]
    ec4e:	42aa      	cmp	r2, r5
    ec50:	d001      	beq.n	ec56 <mayfly_enable+0x4e>
}
    ec52:	bc30      	pop	{r4, r5}
    ec54:	4770      	bx	lr
			mfp[callee_id] = 1U;
    ec56:	4d05      	ldr	r5, [pc, #20]	; (ec6c <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    ec58:	3201      	adds	r2, #1
    ec5a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    ec5c:	2301      	movs	r3, #1
    ec5e:	546b      	strb	r3, [r5, r1]
}
    ec60:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    ec62:	f00b b801 	b.w	19c68 <mayfly_pend>
    ec66:	bf00      	nop
    ec68:	20001718 	.word	0x20001718
    ec6c:	20001714 	.word	0x20001714

0000ec70 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    ec70:	b570      	push	{r4, r5, r6, lr}
    ec72:	461c      	mov	r4, r3
    ec74:	4606      	mov	r6, r0
    ec76:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    ec78:	b322      	cbz	r2, ecc4 <mayfly_enqueue+0x54>
    ec7a:	7863      	ldrb	r3, [r4, #1]

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    ec7c:	7822      	ldrb	r2, [r4, #0]
    ec7e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ec80:	f012 0203 	ands.w	r2, r2, #3
    ec84:	d005      	beq.n	ec92 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    ec86:	2a01      	cmp	r2, #1
    ec88:	d040      	beq.n	ed0c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    ec8a:	3301      	adds	r3, #1
    ec8c:	b2db      	uxtb	r3, r3
    ec8e:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    ec90:	e00f      	b.n	ecb2 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ec92:	2230      	movs	r2, #48	; 0x30
    ec94:	2104      	movs	r1, #4
    ec96:	fb12 1105 	smlabb	r1, r2, r5, r1
    ec9a:	220c      	movs	r2, #12
    ec9c:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    eca0:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    eca2:	491b      	ldr	r1, [pc, #108]	; (ed10 <mayfly_enqueue+0xa0>)
    eca4:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    eca6:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    eca8:	440a      	add	r2, r1
	m->_req = ack + 1;
    ecaa:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    ecac:	4621      	mov	r1, r4
    ecae:	f7ff ff6b 	bl	eb88 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    ecb2:	4b18      	ldr	r3, [pc, #96]	; (ed14 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    ecb4:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    ecb6:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    ecb8:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    ecba:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    ecbc:	f00a ffd4 	bl	19c68 <mayfly_pend>

	return 0;
    ecc0:	2000      	movs	r0, #0
}
    ecc2:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ecc4:	f00a ffb2 	bl	19c2c <mayfly_prio_is_equal>
    ecc8:	2800      	cmp	r0, #0
    ecca:	d0d6      	beq.n	ec7a <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    eccc:	4629      	mov	r1, r5
    ecce:	4630      	mov	r0, r6
    ecd0:	f00a ff8c 	bl	19bec <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    ecd4:	2800      	cmp	r0, #0
    ecd6:	d0d0      	beq.n	ec7a <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    ecd8:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    ecdc:	0111      	lsls	r1, r2, #4
    ecde:	480c      	ldr	r0, [pc, #48]	; (ed10 <mayfly_enqueue+0xa0>)
    ece0:	7863      	ldrb	r3, [r4, #1]
    ece2:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ece6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    ecea:	4402      	add	r2, r0
		!mayfly_is_enabled(caller_id, callee_id) ||
    ecec:	7a91      	ldrb	r1, [r2, #10]
    ecee:	7ad2      	ldrb	r2, [r2, #11]
    ecf0:	4291      	cmp	r1, r2
    ecf2:	d1c3      	bne.n	ec7c <mayfly_enqueue+0xc>
	state = (m->_req - ack) & 0x03;
    ecf4:	7822      	ldrb	r2, [r4, #0]
    ecf6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    ecf8:	0792      	lsls	r2, r2, #30
    ecfa:	d002      	beq.n	ed02 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    ecfc:	3302      	adds	r3, #2
    ecfe:	b2db      	uxtb	r3, r3
    ed00:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    ed02:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    ed06:	4798      	blx	r3
		return 0;
    ed08:	2000      	movs	r0, #0
}
    ed0a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    ed0c:	4610      	mov	r0, r2
}
    ed0e:	bd70      	pop	{r4, r5, r6, pc}
    ed10:	20001718 	.word	0x20001718
    ed14:	20001714 	.word	0x20001714

0000ed18 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    ed18:	494e      	ldr	r1, [pc, #312]	; (ee54 <mayfly_run+0x13c>)
    ed1a:	5c0b      	ldrb	r3, [r1, r0]
    ed1c:	2b00      	cmp	r3, #0
    ed1e:	f000 8098 	beq.w	ee52 <mayfly_run+0x13a>
{
    ed22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ed26:	4b4c      	ldr	r3, [pc, #304]	; (ee58 <mayfly_run+0x140>)
    ed28:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    ed2c:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    ed2e:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ed30:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    ed34:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    ed36:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ed3a:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    ed3e:	9203      	str	r2, [sp, #12]
    ed40:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    ed44:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    ed46:	f04f 0903 	mov.w	r9, #3
    ed4a:	4688      	mov	r8, r1
    ed4c:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    ed4e:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    ed50:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    ed54:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    ed56:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    ed58:	f7ff ff1e 	bl	eb98 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    ed5c:	f107 0624 	add.w	r6, r7, #36	; 0x24
    ed60:	4683      	mov	fp, r0
    ed62:	2800      	cmp	r0, #0
    ed64:	d034      	beq.n	edd0 <mayfly_run+0xb8>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    ed66:	9c05      	ldr	r4, [sp, #20]
    ed68:	7825      	ldrb	r5, [r4, #0]
    ed6a:	7863      	ldrb	r3, [r4, #1]
    ed6c:	1aed      	subs	r5, r5, r3
    ed6e:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    ed72:	2d01      	cmp	r5, #1
    ed74:	d106      	bne.n	ed84 <mayfly_run+0x6c>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    ed76:	3b01      	subs	r3, #1
    ed78:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    ed7a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    ed7e:	4798      	blx	r3
    ed80:	9c05      	ldr	r4, [sp, #20]
    ed82:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    ed84:	f894 c000 	ldrb.w	ip, [r4]
    ed88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
	if (((req - m->_ack) & 0x03) != 1U) {
    ed8a:	ebac 0303 	sub.w	r3, ip, r3
    ed8e:	f003 0303 	and.w	r3, r3, #3
    ed92:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    ed94:	f04f 0200 	mov.w	r2, #0
    ed98:	4631      	mov	r1, r6
	req = m->_req;
    ed9a:	fa5f fa8c 	uxtb.w	sl, ip
	if (((req - m->_ack) & 0x03) != 1U) {
    ed9e:	d00d      	beq.n	edbc <mayfly_run+0xa4>
		memq_dequeue(mft[callee_id][caller_id].tail,
    eda0:	f7ff ff02 	bl	eba8 <memq_dequeue>
		ack = m->_ack;
    eda4:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    eda6:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    eda8:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    edac:	1a9b      	subs	r3, r3, r2
    edae:	f003 0303 	and.w	r3, r3, #3
    edb2:	2b01      	cmp	r3, #1
		m->_ack = req;
    edb4:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    edb8:	d044      	beq.n	ee44 <mayfly_run+0x12c>
    edba:	6ab8      	ldr	r0, [r7, #40]	; 0x28

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    edbc:	4601      	mov	r1, r0
    edbe:	aa05      	add	r2, sp, #20
    edc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    edc2:	f7ff fee9 	bl	eb98 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    edc6:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    edc8:	4683      	mov	fp, r0
			if (state == 1U) {
    edca:	d029      	beq.n	ee20 <mayfly_run+0x108>
		while (link) {
    edcc:	2800      	cmp	r0, #0
    edce:	d1ca      	bne.n	ed66 <mayfly_run+0x4e>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    edd0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    edd4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    edd8:	429a      	cmp	r2, r3
    edda:	d003      	beq.n	ede4 <mayfly_run+0xcc>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    eddc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    ede0:	2301      	movs	r3, #1
    ede2:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    ede4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    ede8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    edec:	429a      	cmp	r2, r3
    edee:	d003      	beq.n	edf8 <mayfly_run+0xe0>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    edf0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    edf4:	2301      	movs	r3, #1
    edf6:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    edf8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    edfc:	fa5f f989 	uxtb.w	r9, r9
    ee00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    ee04:	f1a7 070c 	sub.w	r7, r7, #12
    ee08:	d1a1      	bne.n	ed4e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ee0a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    ee0e:	b1b3      	cbz	r3, ee3e <mayfly_run+0x126>
    ee10:	9b03      	ldr	r3, [sp, #12]
    ee12:	b9a3      	cbnz	r3, ee3e <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ee14:	461a      	mov	r2, r3
    ee16:	4651      	mov	r1, sl
    ee18:	4650      	mov	r0, sl
    ee1a:	f00a fec7 	bl	19bac <mayfly_enable_cb>
    ee1e:	e00e      	b.n	ee3e <mayfly_run+0x126>
				if (caller_id || link) {
    ee20:	f1b9 0f00 	cmp.w	r9, #0
    ee24:	d101      	bne.n	ee2a <mayfly_run+0x112>
    ee26:	2800      	cmp	r0, #0
    ee28:	d0d2      	beq.n	edd0 <mayfly_run+0xb8>
    ee2a:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    ee2e:	4a09      	ldr	r2, [pc, #36]	; (ee54 <mayfly_run+0x13c>)
    ee30:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    ee32:	4651      	mov	r1, sl
    ee34:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    ee36:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    ee3a:	f00a ff15 	bl	19c68 <mayfly_pend>
	}
}
    ee3e:	b007      	add	sp, #28
    ee40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    ee44:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    ee46:	4621      	mov	r1, r4
    ee48:	4658      	mov	r0, fp
    ee4a:	4642      	mov	r2, r8
    ee4c:	f7ff fe9c 	bl	eb88 <memq_enqueue>
    ee50:	e7b3      	b.n	edba <mayfly_run+0xa2>
    ee52:	4770      	bx	lr
    ee54:	20001714 	.word	0x20001714
    ee58:	20001718 	.word	0x20001718

0000ee5c <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    ee5c:	b1a1      	cbz	r1, ee88 <util_ones_count_get+0x2c>
    ee5e:	1e4b      	subs	r3, r1, #1
    ee60:	b2db      	uxtb	r3, r3
{
    ee62:	b410      	push	{r4}
    ee64:	1e41      	subs	r1, r0, #1
    ee66:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    ee68:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    ee6a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    ee6e:	b13b      	cbz	r3, ee80 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    ee70:	b25b      	sxtb	r3, r3
    ee72:	1e5a      	subs	r2, r3, #1
    ee74:	4013      	ands	r3, r2
			one_count++;
    ee76:	3001      	adds	r0, #1
		while (bite) {
    ee78:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    ee7c:	b2c0      	uxtb	r0, r0
		while (bite) {
    ee7e:	d1f7      	bne.n	ee70 <util_ones_count_get+0x14>
	while (octets_len--) {
    ee80:	42a1      	cmp	r1, r4
    ee82:	d1f2      	bne.n	ee6a <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    ee84:	bc10      	pop	{r4}
    ee86:	4770      	bx	lr
	uint8_t one_count = 0U;
    ee88:	4608      	mov	r0, r1
}
    ee8a:	4770      	bx	lr

0000ee8c <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee90:	b08d      	sub	sp, #52	; 0x34
    ee92:	4602      	mov	r2, r0
    ee94:	9002      	str	r0, [sp, #8]
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    ee96:	7f80      	ldrb	r0, [r0, #30]
    ee98:	9008      	str	r0, [sp, #32]
	instance->worker_trigger = 1U;
    ee9a:	2301      	movs	r3, #1
    ee9c:	77d3      	strb	r3, [r2, #31]
	if (instance->job_guard) {
    ee9e:	2800      	cmp	r0, #0
    eea0:	f040 80a2 	bne.w	efe8 <ticker_worker+0x15c>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    eea4:	7f53      	ldrb	r3, [r2, #29]
    eea6:	2bff      	cmp	r3, #255	; 0xff
    eea8:	f000 809d 	beq.w	efe6 <ticker_worker+0x15a>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    eeac:	f00a fa14 	bl	192d8 <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eeb0:	9902      	ldr	r1, [sp, #8]
    eeb2:	694a      	ldr	r2, [r1, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    eeb4:	7f0b      	ldrb	r3, [r1, #28]
	ticker_id_head = instance->ticker_id_head;
    eeb6:	f891 b01d 	ldrb.w	fp, [r1, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eeba:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    eebc:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    eebe:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    eec2:	f000 8120 	beq.w	f106 <ticker_worker+0x27a>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    eec6:	698b      	ldr	r3, [r1, #24]
	uint8_t slot_reserved = 0;
    eec8:	42bb      	cmp	r3, r7
    eeca:	bf94      	ite	ls
    eecc:	2300      	movls	r3, #0
    eece:	2301      	movhi	r3, #1
    eed0:	9304      	str	r3, [sp, #16]
	node = &instance->nodes[0];
    eed2:	9b02      	ldr	r3, [sp, #8]
	while (ticker_id_head != TICKER_NULL) {
    eed4:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    eed8:	f8d3 8000 	ldr.w	r8, [r3]
	ticks_expired = 0U;
    eedc:	f04f 0300 	mov.w	r3, #0
	while (ticker_id_head != TICKER_NULL) {
    eee0:	f000 8114 	beq.w	f10c <ticker_worker+0x280>
			must_expire_skip = 1U;
    eee4:	469a      	mov	sl, r3
		ticker = &node[ticker_id_head];
    eee6:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    eeea:	eb08 140b 	add.w	r4, r8, fp, lsl #4
    eeee:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    eef2:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    eef4:	42bb      	cmp	r3, r7
    eef6:	d853      	bhi.n	efa0 <ticker_worker+0x114>
		if (ticker->ticks_slot != 0U &&
    eef8:	f8d4 c018 	ldr.w	ip, [r4, #24]
		ticker_id_head = ticker->next;
    eefc:	f818 b00b 	ldrb.w	fp, [r8, fp]
		ticks_elapsed -= ticks_to_expire;
    ef00:	1aff      	subs	r7, r7, r3
		ticks_expired += ticks_to_expire;
    ef02:	449a      	add	sl, r3
		if (ticker->ticks_slot != 0U &&
    ef04:	f1bc 0f00 	cmp.w	ip, #0
    ef08:	d076      	beq.n	eff8 <ticker_worker+0x16c>
    ef0a:	9b04      	ldr	r3, [sp, #16]
    ef0c:	2b00      	cmp	r3, #0
    ef0e:	d079      	beq.n	f004 <ticker_worker+0x178>
    ef10:	8be3      	ldrh	r3, [r4, #30]
    ef12:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    ef14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    ef16:	b153      	cbz	r3, ef2e <ticker_worker+0xa2>
    ef18:	681a      	ldr	r2, [r3, #0]
    ef1a:	b132      	cbz	r2, ef2a <ticker_worker+0x9e>
			    ext_data->ticks_slot_window != 0U &&
    ef1c:	7a1a      	ldrb	r2, [r3, #8]
    ef1e:	b922      	cbnz	r2, ef2a <ticker_worker+0x9e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    ef20:	8ba2      	ldrh	r2, [r4, #28]
    ef22:	9903      	ldr	r1, [sp, #12]
    ef24:	428a      	cmp	r2, r1
    ef26:	f240 80ea 	bls.w	f0fe <ticker_worker+0x272>
				ext_data->reschedule_state =
    ef2a:	2200      	movs	r2, #0
    ef2c:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    ef2e:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    ef30:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    ef34:	3201      	adds	r2, #1
    ef36:	b292      	uxth	r2, r2
    ef38:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    ef3a:	2900      	cmp	r1, #0
    ef3c:	d02d      	beq.n	ef9a <ticker_worker+0x10e>
    ef3e:	8ba1      	ldrh	r1, [r4, #28]
    ef40:	4291      	cmp	r1, r2
    ef42:	d22a      	bcs.n	ef9a <ticker_worker+0x10e>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    ef44:	2b00      	cmp	r3, #0
    ef46:	f000 80d8 	beq.w	f0fa <ticker_worker+0x26e>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    ef4a:	7a1a      	ldrb	r2, [r3, #8]
    ef4c:	2a01      	cmp	r2, #1
    ef4e:	d024      	beq.n	ef9a <ticker_worker+0x10e>
			must_expire_skip = 1U;
    ef50:	2501      	movs	r5, #1
			ticker->ext_data->ticks_drift = 0U;
    ef52:	2200      	movs	r2, #0
    ef54:	605a      	str	r2, [r3, #4]
			ticker->ext_data->reschedule_state =
    ef56:	721a      	strb	r2, [r3, #8]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    ef58:	78a2      	ldrb	r2, [r4, #2]
    ef5a:	7863      	ldrb	r3, [r4, #1]
    ef5c:	1a9b      	subs	r3, r3, r2
    ef5e:	b2db      	uxtb	r3, r3
    ef60:	2b01      	cmp	r3, #1
    ef62:	d11a      	bne.n	ef9a <ticker_worker+0x10e>
		if (ticker->timeout_func) {
    ef64:	68e6      	ldr	r6, [r4, #12]
		ticker->ack--;
    ef66:	3a01      	subs	r2, #1
    ef68:	70a2      	strb	r2, [r4, #2]
		if (ticker->timeout_func) {
    ef6a:	b1b6      	cbz	r6, ef9a <ticker_worker+0x10e>
					   ticks_expired -
    ef6c:	9b02      	ldr	r3, [sp, #8]
    ef6e:	6962      	ldr	r2, [r4, #20]
    ef70:	6958      	ldr	r0, [r3, #20]
			ticker->timeout_func(ticks_at_expire,
    ef72:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ef74:	6923      	ldr	r3, [r4, #16]
					   ticks_expired -
    ef76:	ebaa 0202 	sub.w	r2, sl, r2
    ef7a:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    ef7c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    ef80:	2d00      	cmp	r5, #0
    ef82:	f040 80ad 	bne.w	f0e0 <ticker_worker+0x254>
    ef86:	8be2      	ldrh	r2, [r4, #30]
    ef88:	47b0      	blx	r6
				if (ticker->ticks_slot != 0U) {
    ef8a:	69a3      	ldr	r3, [r4, #24]
				ticker->lazy_current = 0U;
    ef8c:	83e5      	strh	r5, [r4, #30]
					slot_reserved = 1U;
    ef8e:	2b00      	cmp	r3, #0
    ef90:	9b04      	ldr	r3, [sp, #16]
				ticker->force = 0U;
    ef92:	70e5      	strb	r5, [r4, #3]
					slot_reserved = 1U;
    ef94:	bf18      	it	ne
    ef96:	2301      	movne	r3, #1
    ef98:	9304      	str	r3, [sp, #16]
	while (ticker_id_head != TICKER_NULL) {
    ef9a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    ef9e:	d1a2      	bne.n	eee6 <ticker_worker+0x5a>
    efa0:	4650      	mov	r0, sl
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    efa2:	9a02      	ldr	r2, [sp, #8]
    efa4:	7ad3      	ldrb	r3, [r2, #11]
    efa6:	7a92      	ldrb	r2, [r2, #10]
    efa8:	429a      	cmp	r2, r3
    efaa:	d10c      	bne.n	efc6 <ticker_worker+0x13a>
	uint8_t idx = *ticks_elapsed_index + 1;
    efac:	3201      	adds	r2, #1
    efae:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    efb0:	2a02      	cmp	r2, #2
    efb2:	bf18      	it	ne
    efb4:	4613      	movne	r3, r2
	*ticks_elapsed_index = idx;
    efb6:	9a02      	ldr	r2, [sp, #8]
    efb8:	bf18      	it	ne
    efba:	9308      	strne	r3, [sp, #32]
    efbc:	4611      	mov	r1, r2
    efbe:	9a08      	ldr	r2, [sp, #32]
    efc0:	72ca      	strb	r2, [r1, #11]
    efc2:	bf08      	it	eq
    efc4:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    efc6:	9902      	ldr	r1, [sp, #8]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    efc8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    efca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
	instance->worker_trigger = 0U;
    efce:	2200      	movs	r2, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    efd0:	60d8      	str	r0, [r3, #12]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    efd2:	46a4      	mov	ip, r4
	instance->worker_trigger = 0U;
    efd4:	77ca      	strb	r2, [r1, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    efd6:	460b      	mov	r3, r1
    efd8:	2201      	movs	r2, #1
    efda:	2104      	movs	r1, #4
    efdc:	2003      	movs	r0, #3
}
    efde:	b00d      	add	sp, #52	; 0x34
    efe0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    efe4:	4760      	bx	ip
		instance->worker_trigger = 0U;
    efe6:	77d0      	strb	r0, [r2, #31]
}
    efe8:	b00d      	add	sp, #52	; 0x34
    efea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    efee:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
    eff2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    eff6:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    eff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    effa:	b10b      	cbz	r3, f000 <ticker_worker+0x174>
    effc:	2500      	movs	r5, #0
    effe:	e7a8      	b.n	ef52 <ticker_worker+0xc6>
    f000:	461d      	mov	r5, r3
    f002:	e7a9      	b.n	ef58 <ticker_worker+0xcc>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    f004:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    f008:	9305      	str	r3, [sp, #20]
    f00a:	3380      	adds	r3, #128	; 0x80
    f00c:	d0f4      	beq.n	eff8 <ticker_worker+0x16c>
    f00e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    f012:	d0f1      	beq.n	eff8 <ticker_worker+0x16c>
		int32_t lazy_current = ticker->lazy_current;
    f014:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    f016:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    f018:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    f01a:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    f01c:	bf28      	it	cs
    f01e:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    f020:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    f022:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    f024:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    f028:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    f02a:	fb03 2302 	mla	r3, r3, r2, r2
    f02e:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    f030:	e9cd 7a09 	strd	r7, sl, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    f034:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    f036:	465b      	mov	r3, fp
		uint32_t acc_ticks_to_expire = 0U;
    f038:	2000      	movs	r0, #0
    f03a:	46a1      	mov	r9, r4
    f03c:	9201      	str	r2, [sp, #4]
    f03e:	e02b      	b.n	f098 <ticker_worker+0x20c>
				(ticker->ticks_periodic == 0U) ||
    f040:	9c01      	ldr	r4, [sp, #4]
					  0U :
    f042:	ebaa 0e0e 	sub.w	lr, sl, lr
				(ticker->ticks_periodic == 0U) ||
    f046:	2c00      	cmp	r4, #0
    f048:	d045      	beq.n	f0d6 <ticker_worker+0x24a>
    f04a:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    f04c:	fb0a ee06 	mla	lr, sl, r6, lr
				(ticker->ticks_periodic == 0U) ||
    f050:	4574      	cmp	r4, lr
    f052:	bf8c      	ite	hi
    f054:	f04f 0e01 	movhi.w	lr, #1
    f058:	f04f 0e00 	movls.w	lr, #0
					(ticker->ticks_periodic != 0U) &&
    f05c:	bf34      	ite	cc
    f05e:	f04f 0a01 	movcc.w	sl, #1
    f062:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    f066:	42a9      	cmp	r1, r5
			uint8_t next_force = (ticker_next->force > ticker->force);
    f068:	f892 b003 	ldrb.w	fp, [r2, #3]
    f06c:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    f070:	d30e      	bcc.n	f090 <ticker_worker+0x204>
    f072:	4593      	cmp	fp, r2
    f074:	d83b      	bhi.n	f0ee <ticker_worker+0x262>
			    (next_force ||
    f076:	f117 0f80 	cmn.w	r7, #128	; 0x80
    f07a:	d038      	beq.n	f0ee <ticker_worker+0x262>
			     next_is_critical ||
    f07c:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    f07e:	1bf6      	subs	r6, r6, r7
			     next_is_critical ||
    f080:	4296      	cmp	r6, r2
    f082:	dd02      	ble.n	f08a <ticker_worker+0x1fe>
			     (next_has_priority && !current_is_older) ||
    f084:	f1be 0f00 	cmp.w	lr, #0
    f088:	d031      	beq.n	f0ee <ticker_worker+0x262>
    f08a:	9a05      	ldr	r2, [sp, #20]
    f08c:	42ba      	cmp	r2, r7
    f08e:	d02b      	beq.n	f0e8 <ticker_worker+0x25c>
			id_head = ticker_next->next;
    f090:	f818 3003 	ldrb.w	r3, [r8, r3]
		while (id_head != TICKER_NULL) {
    f094:	2bff      	cmp	r3, #255	; 0xff
    f096:	d0aa      	beq.n	efee <ticker_worker+0x162>
			struct ticker_node *ticker_next = &nodes[id_head];
    f098:	b21b      	sxth	r3, r3
    f09a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f09e:	eb08 1203 	add.w	r2, r8, r3, lsl #4
    f0a2:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    f0a4:	f8d2 e008 	ldr.w	lr, [r2, #8]
    f0a8:	4470      	add	r0, lr
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    f0aa:	4584      	cmp	ip, r0
    f0ac:	d39f      	bcc.n	efee <ticker_worker+0x162>
			if (ticker_next->ticks_slot == 0U) {
    f0ae:	6991      	ldr	r1, [r2, #24]
    f0b0:	2900      	cmp	r1, #0
    f0b2:	d0ed      	beq.n	f090 <ticker_worker+0x204>
			int32_t lazy_next = ticker_next->lazy_current;
    f0b4:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    f0b6:	8b95      	ldrh	r5, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    f0b8:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    f0bc:	f992 702d 	ldrsb.w	r7, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    f0c0:	42a9      	cmp	r1, r5
			int32_t lazy_next = ticker_next->lazy_current;
    f0c2:	460e      	mov	r6, r1
				lazy_next -= ticker_next->lazy_periodic;
    f0c4:	bf28      	it	cs
    f0c6:	1b4e      	subcs	r6, r1, r5
					  0U :
    f0c8:	f1ba 0f00 	cmp.w	sl, #0
    f0cc:	d1b8      	bne.n	f040 <ticker_worker+0x1b4>
				(ticker->ticks_periodic == 0U) ||
    f0ce:	9c01      	ldr	r4, [sp, #4]
					  0U :
    f0d0:	46d6      	mov	lr, sl
				(ticker->ticks_periodic == 0U) ||
    f0d2:	2c00      	cmp	r4, #0
    f0d4:	d1b9      	bne.n	f04a <ticker_worker+0x1be>
					(ticker->ticks_periodic != 0U) &&
    f0d6:	f8dd a004 	ldr.w	sl, [sp, #4]
				(ticker->ticks_periodic == 0U) ||
    f0da:	f04f 0e01 	mov.w	lr, #1
    f0de:	e7c2      	b.n	f066 <ticker_worker+0x1da>
			ticker->timeout_func(ticks_at_expire,
    f0e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f0e4:	47b0      	blx	r6
			if (must_expire_skip == 0U) {
    f0e6:	e758      	b.n	ef9a <ticker_worker+0x10e>
			     (equal_priority && next_is_older))) {
    f0e8:	f1ba 0f00 	cmp.w	sl, #0
    f0ec:	d0d0      	beq.n	f090 <ticker_worker+0x204>
    f0ee:	e9dd 7a09 	ldrd	r7, sl, [sp, #36]	; 0x24
    f0f2:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    f0f6:	464c      	mov	r4, r9
    f0f8:	e70c      	b.n	ef14 <ticker_worker+0x88>
			must_expire_skip = 1U;
    f0fa:	2501      	movs	r5, #1
    f0fc:	e72c      	b.n	ef58 <ticker_worker+0xcc>
				ext_data->reschedule_state =
    f0fe:	f04f 0201 	mov.w	r2, #1
    f102:	721a      	strb	r2, [r3, #8]
    f104:	e713      	b.n	ef2e <ticker_worker+0xa2>
	uint8_t slot_reserved = 0;
    f106:	9b08      	ldr	r3, [sp, #32]
    f108:	9304      	str	r3, [sp, #16]
    f10a:	e6e2      	b.n	eed2 <ticker_worker+0x46>
	ticks_expired = 0U;
    f10c:	4618      	mov	r0, r3
    f10e:	e748      	b.n	efa2 <ticker_worker+0x116>

0000f110 <ticker_job>:
	if (instance->worker_trigger) {
    f110:	7fc2      	ldrb	r2, [r0, #31]
    f112:	2a00      	cmp	r2, #0
    f114:	f040 862f 	bne.w	fd76 <__kernel_ram_size+0x85e>
{
    f118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f11c:	7a83      	ldrb	r3, [r0, #10]
    f11e:	7ac1      	ldrb	r1, [r0, #11]
{
    f120:	b08f      	sub	sp, #60	; 0x3c
    f122:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    f124:	6940      	ldr	r0, [r0, #20]
    f126:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f128:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    f12a:	f04f 0001 	mov.w	r0, #1
    f12e:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    f132:	f000 8096 	beq.w	f262 <ticker_job+0x152>
	uint8_t idx = *ticks_elapsed_index + 1;
    f136:	4403      	add	r3, r0
    f138:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    f13a:	2b02      	cmp	r3, #2
		idx = 0U;
    f13c:	bf08      	it	eq
    f13e:	4613      	moveq	r3, r2
		ticks_elapsed =
    f140:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    f144:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    f148:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    f14a:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    f14c:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    f14e:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    f150:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    f154:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    f158:	2301      	movs	r3, #1
    f15a:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    f15c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    f160:	f89b 201d 	ldrb.w	r2, [fp, #29]
    f164:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    f166:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    f16a:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    f16e:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    f170:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    f172:	461a      	mov	r2, r3
    f174:	3b01      	subs	r3, #1
	users = &instance->users[0];
    f176:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    f178:	b2db      	uxtb	r3, r3
    f17a:	2a00      	cmp	r2, #0
    f17c:	f000 8321 	beq.w	f7c2 <__kernel_ram_size+0x2aa>
    f180:	eb01 06c3 	add.w	r6, r1, r3, lsl #3
	pending = 0U;
    f184:	2300      	movs	r3, #0
    f186:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    f188:	23ff      	movs	r3, #255	; 0xff
    f18a:	9301      	str	r3, [sp, #4]
    f18c:	4637      	mov	r7, r6
    f18e:	46d9      	mov	r9, fp
		user_ops = &user->user_op[0];
    f190:	687b      	ldr	r3, [r7, #4]
    f192:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    f194:	f897 c003 	ldrb.w	ip, [r7, #3]
    f198:	78bb      	ldrb	r3, [r7, #2]
    f19a:	46ba      	mov	sl, r7
    f19c:	9907      	ldr	r1, [sp, #28]
					ticks_used = 0;
    f19e:	4698      	mov	r8, r3
			user_op = &user_ops[user->middle];
    f1a0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    f1a4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    f1a8:	1c58      	adds	r0, r3, #1
		while (user->middle != user->last) {
    f1aa:	4563      	cmp	r3, ip
			user_op = &user_ops[user->middle];
    f1ac:	eb01 0582 	add.w	r5, r1, r2, lsl #2
			middle = user->middle + 1;
    f1b0:	b2c3      	uxtb	r3, r0
		while (user->middle != user->last) {
    f1b2:	f000 8182 	beq.w	f4ba <ticker_job+0x3aa>
			if (middle == user->count_user_op) {
    f1b6:	f89a 0000 	ldrb.w	r0, [sl]
				middle = 0U;
    f1ba:	4298      	cmp	r0, r3
    f1bc:	bf08      	it	eq
    f1be:	2300      	moveq	r3, #0
			user->middle = middle;
    f1c0:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    f1c4:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
    f1c8:	2a04      	cmp	r2, #4
    f1ca:	f240 8174 	bls.w	f4b6 <ticker_job+0x3a6>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    f1ce:	2a07      	cmp	r2, #7
    f1d0:	f200 8086 	bhi.w	f2e0 <ticker_job+0x1d0>
			ticker = &node[user_op->id];
    f1d4:	7869      	ldrb	r1, [r5, #1]
    f1d6:	9c04      	ldr	r4, [sp, #16]
    f1d8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    f1dc:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    f1e0:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    f1e2:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    f1e4:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    f1e6:	7860      	ldrb	r0, [r4, #1]
    f1e8:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    f1ea:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    f1ee:	d077      	beq.n	f2e0 <ticker_job+0x1d0>
			    (state == 0U) ||
    f1f0:	2a05      	cmp	r2, #5
    f1f2:	d065      	beq.n	f2c0 <ticker_job+0x1b0>
			if (state == 1U) {
    f1f4:	2801      	cmp	r0, #1
    f1f6:	d137      	bne.n	f268 <ticker_job+0x158>
	previous = instance->ticker_id_head;
    f1f8:	f899 c01d 	ldrb.w	ip, [r9, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f1fc:	f8d9 6000 	ldr.w	r6, [r9]
	while (current != TICKER_NULL) {
    f200:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f204:	d017      	beq.n	f236 <ticker_job+0x126>
		ticker_current = &node[current];
    f206:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		if (current == id) {
    f20a:	4561      	cmp	r1, ip
		ticker_current = &node[current];
    f20c:	eb06 1000 	add.w	r0, r6, r0, lsl #4
		if (current == id) {
    f210:	f000 8090 	beq.w	f334 <ticker_job+0x224>
	total = 0U;
    f214:	2300      	movs	r3, #0
    f216:	e001      	b.n	f21c <ticker_job+0x10c>
		if (current == id) {
    f218:	4561      	cmp	r1, ip
    f21a:	d070      	beq.n	f2fe <ticker_job+0x1ee>
		total += ticker_current->ticks_to_expire;
    f21c:	46e6      	mov	lr, ip
		current = ticker_current->next;
    f21e:	f890 c000 	ldrb.w	ip, [r0]
		total += ticker_current->ticks_to_expire;
    f222:	f8d0 8008 	ldr.w	r8, [r0, #8]
	while (current != TICKER_NULL) {
    f226:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
		ticker_current = &node[current];
    f22a:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
		total += ticker_current->ticks_to_expire;
    f22e:	4443      	add	r3, r8
		ticker_current = &node[current];
    f230:	eb06 1000 	add.w	r0, r6, r0, lsl #4
	while (current != TICKER_NULL) {
    f234:	d1f0      	bne.n	f218 <ticker_job+0x108>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f236:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f238:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f23a:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f23c:	f000 8126 	beq.w	f48c <ticker_job+0x37c>
		ticker->req = ticker->ack;
    f240:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    f242:	f899 301c 	ldrb.w	r3, [r9, #28]
    f246:	428b      	cmp	r3, r1
    f248:	d022      	beq.n	f290 <ticker_job+0x180>
	if (user_op->fp_op_func) {
    f24a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f24c:	2000      	movs	r0, #0
    f24e:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    f250:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f252:	b10b      	cbz	r3, f258 <ticker_job+0x148>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f254:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f256:	4798      	blx	r3
    f258:	f89a c003 	ldrb.w	ip, [sl, #3]
    f25c:	f89a 3002 	ldrb.w	r3, [sl, #2]
    f260:	e79c      	b.n	f19c <ticker_job+0x8c>
		flag_elapsed = 0U;
    f262:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    f264:	9202      	str	r2, [sp, #8]
    f266:	e779      	b.n	f15c <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    f268:	2104      	movs	r1, #4
    f26a:	464b      	mov	r3, r9
    f26c:	2201      	movs	r2, #1
    f26e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
    f272:	4608      	mov	r0, r1
    f274:	47a0      	blx	r4
	while (count_user--) {
    f276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
    f278:	f88a 8002 	strb.w	r8, [sl, #2]
    f27c:	4657      	mov	r7, sl
				pending = 1U;
    f27e:	2301      	movs	r3, #1
	while (count_user--) {
    f280:	42ba      	cmp	r2, r7
				pending = 1U;
    f282:	9308      	str	r3, [sp, #32]
    f284:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    f288:	f000 811e 	beq.w	f4c8 <ticker_job+0x3b8>
    f28c:	461f      	mov	r7, r3
    f28e:	e77f      	b.n	f190 <ticker_job+0x80>
			instance->ticker_id_slot_previous = TICKER_NULL;
    f290:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    f292:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    f294:	f889 301c 	strb.w	r3, [r9, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    f298:	f040 81dd 	bne.w	f656 <__kernel_ram_size+0x13e>
				ticks_at_stop =
    f29c:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    f29e:	f8d9 3014 	ldr.w	r3, [r9, #20]
			if (!((ticks_at_stop - ticks_current) &
    f2a2:	1ac2      	subs	r2, r0, r3
    f2a4:	0214      	lsls	r4, r2, #8
    f2a6:	f100 81cd 	bmi.w	f644 <__kernel_ram_size+0x12c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f2aa:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    f2ae:	9a02      	ldr	r2, [sp, #8]
    f2b0:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    f2b2:	f8d9 2018 	ldr.w	r2, [r9, #24]
    f2b6:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    f2b8:	bf88      	it	hi
    f2ba:	f8c9 3018 	strhi.w	r3, [r9, #24]
    f2be:	e7c4      	b.n	f24a <ticker_job+0x13a>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    f2c0:	686e      	ldr	r6, [r5, #4]
    f2c2:	2e00      	cmp	r6, #0
    f2c4:	d196      	bne.n	f1f4 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    f2c6:	68ae      	ldr	r6, [r5, #8]
    f2c8:	2e00      	cmp	r6, #0
    f2ca:	d193      	bne.n	f1f4 <ticker_job+0xe4>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    f2cc:	68ee      	ldr	r6, [r5, #12]
    f2ce:	2e00      	cmp	r6, #0
    f2d0:	d190      	bne.n	f1f4 <ticker_job+0xe4>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    f2d2:	692e      	ldr	r6, [r5, #16]
    f2d4:	2e00      	cmp	r6, #0
    f2d6:	d18d      	bne.n	f1f4 <ticker_job+0xe4>
			     (user_op->params.update.lazy == 0U) &&
    f2d8:	696e      	ldr	r6, [r5, #20]
    f2da:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    f2de:	d189      	bne.n	f1f4 <ticker_job+0xe4>
	if (user_op->fp_op_func) {
    f2e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f2e2:	2100      	movs	r1, #0
	user_op->status = status;
    f2e4:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f2e6:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    f2e8:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f2ea:	2a00      	cmp	r2, #0
    f2ec:	f43f af56 	beq.w	f19c <ticker_job+0x8c>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f2f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f2f2:	4790      	blx	r2
    f2f4:	f89a c003 	ldrb.w	ip, [sl, #3]
    f2f8:	f89a 3002 	ldrb.w	r3, [sl, #2]
    f2fc:	e74e      	b.n	f19c <ticker_job+0x8c>
	if (previous == current) {
    f2fe:	eb0e 074e 	add.w	r7, lr, lr, lsl #1
    f302:	4571      	cmp	r1, lr
    f304:	eb06 1707 	add.w	r7, r6, r7, lsl #4
    f308:	d016      	beq.n	f338 <ticker_job+0x228>
	node[previous].next = ticker_current->next;
    f30a:	7801      	ldrb	r1, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    f30c:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
    f310:	7039      	strb	r1, [r7, #0]
	if (ticker_current->next != TICKER_NULL) {
    f312:	29ff      	cmp	r1, #255	; 0xff
    f314:	d006      	beq.n	f324 <ticker_job+0x214>
		node[ticker_current->next].ticks_to_expire += timeout;
    f316:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    f31a:	eb06 1101 	add.w	r1, r6, r1, lsl #4
    f31e:	6888      	ldr	r0, [r1, #8]
    f320:	4460      	add	r0, ip
    f322:	6088      	str	r0, [r1, #8]
	return (total + timeout);
    f324:	eb0c 0603 	add.w	r6, ip, r3
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f328:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    f32a:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    f32c:	d009      	beq.n	f342 <ticker_job+0x232>
    f32e:	78a7      	ldrb	r7, [r4, #2]
    f330:	7869      	ldrb	r1, [r5, #1]
    f332:	e785      	b.n	f240 <ticker_job+0x130>
		if (current == id) {
    f334:	4607      	mov	r7, r0
	total = 0U;
    f336:	2300      	movs	r3, #0
		instance->ticker_id_head = ticker_current->next;
    f338:	7802      	ldrb	r2, [r0, #0]
    f33a:	f889 201d 	strb.w	r2, [r9, #29]
    f33e:	782a      	ldrb	r2, [r5, #0]
    f340:	e7e3      	b.n	f30a <ticker_job+0x1fa>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    f342:	f8d9 7014 	ldr.w	r7, [r9, #20]
    f346:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    f348:	f009 ffc6 	bl	192d8 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f34c:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f34e:	eba0 0c07 	sub.w	ip, r0, r7
    f352:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f356:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    f358:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    f35a:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    f35c:	f240 80a2 	bls.w	f4a4 <ticker_job+0x394>
		ticks_to_expire -= ticks_elapsed;
    f360:	6962      	ldr	r2, [r4, #20]
    f362:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    f364:	6866      	ldr	r6, [r4, #4]
    f366:	2e00      	cmp	r6, #0
    f368:	d053      	beq.n	f412 <ticker_job+0x302>
	    (user_op->params.update.lazy != 0U)) {
    f36a:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    f36c:	2800      	cmp	r0, #0
    f36e:	d050      	beq.n	f412 <ticker_job+0x302>
		user_op->params.update.lazy--;
    f370:	3801      	subs	r0, #1
    f372:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f374:	429e      	cmp	r6, r3
    f376:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
    f378:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f37a:	d225      	bcs.n	f3c8 <ticker_job+0x2b8>
    f37c:	f106 0b01 	add.w	fp, r6, #1
    f380:	920b      	str	r2, [sp, #44]	; 0x2c
    f382:	e011      	b.n	f3a8 <ticker_job+0x298>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    f384:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    f388:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    f38c:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    f390:	46de      	mov	lr, fp
	ticker->remainder_current -= ticker->remainder_periodic;
    f392:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
    f394:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    f396:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    f39a:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    f39c:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f39e:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    f3a0:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    f3a2:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    f3a4:	d20e      	bcs.n	f3c4 <ticker_job+0x2b4>
    f3a6:	8aa8      	ldrh	r0, [r5, #20]
    f3a8:	4288      	cmp	r0, r1
    f3aa:	f080 81b2 	bcs.w	f712 <__kernel_ram_size+0x1fa>
					   ticker_remainder_dec(ticker);
    f3ae:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    f3b2:	f8df e2d0 	ldr.w	lr, [pc, #720]	; f684 <__kernel_ram_size+0x16c>
					   ticker_remainder_dec(ticker);
    f3b6:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
    f3b8:	4ab1      	ldr	r2, [pc, #708]	; (f680 <__kernel_ram_size+0x168>)
    f3ba:	4486      	add	lr, r0
    f3bc:	4596      	cmp	lr, r2
    f3be:	d8e1      	bhi.n	f384 <ticker_job+0x274>
    f3c0:	46b6      	mov	lr, r6
    f3c2:	e7e6      	b.n	f392 <ticker_job+0x282>
    f3c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f3c6:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f3c8:	4288      	cmp	r0, r1
    f3ca:	d921      	bls.n	f410 <ticker_job+0x300>
					   ticker_remainder_inc(ticker);
    f3cc:	6a20      	ldr	r0, [r4, #32]
    f3ce:	9009      	str	r0, [sp, #36]	; 0x24
    f3d0:	f106 0e01 	add.w	lr, r6, #1
    f3d4:	920b      	str	r2, [sp, #44]	; 0x2c
    f3d6:	e007      	b.n	f3e8 <ticker_job+0x2d8>
	ticker->remainder_current += ticker->remainder_periodic;
    f3d8:	6260      	str	r0, [r4, #36]	; 0x24
    f3da:	46b3      	mov	fp, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f3dc:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    f3de:	3101      	adds	r1, #1
    f3e0:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f3e2:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    f3e4:	445b      	add	r3, fp
		while (ticker->lazy_current < user_op->params.update.lazy) {
    f3e6:	d211      	bcs.n	f40c <ticker_job+0x2fc>
	ticker->remainder_current += ticker->remainder_periodic;
    f3e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f3ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    f3ec:	f8df b294 	ldr.w	fp, [pc, #660]	; f684 <__kernel_ram_size+0x16c>
	ticker->remainder_current += ticker->remainder_periodic;
    f3f0:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    f3f2:	4aa3      	ldr	r2, [pc, #652]	; (f680 <__kernel_ram_size+0x168>)
    f3f4:	4483      	add	fp, r0
    f3f6:	4593      	cmp	fp, r2
    f3f8:	d8ee      	bhi.n	f3d8 <ticker_job+0x2c8>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    f3fa:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    f3fe:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    f402:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    f406:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    f408:	46f3      	mov	fp, lr
    f40a:	e7e7      	b.n	f3dc <ticker_job+0x2cc>
    f40c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f40e:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    f410:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    f412:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    f416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    f418:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    f41a:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    f41c:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    f41e:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    f420:	b136      	cbz	r6, f430 <ticker_job+0x320>
    f422:	6831      	ldr	r1, [r6, #0]
    f424:	b121      	cbz	r1, f430 <ticker_job+0x320>
			user_op->params.update.ticks_drift_plus -
    f426:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    f42a:	6070      	str	r0, [r6, #4]
    f42c:	68a3      	ldr	r3, [r4, #8]
    f42e:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f430:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    f434:	d121      	bne.n	f47a <ticker_job+0x36a>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    f436:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    f438:	4293      	cmp	r3, r2
    f43a:	d91b      	bls.n	f474 <ticker_job+0x364>
		ticks_to_expire -= ticks_to_expire_minus;
    f43c:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    f43e:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    f440:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    f442:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    f444:	68e9      	ldr	r1, [r5, #12]
    f446:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    f448:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    f44a:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    f44c:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    f44e:	bf88      	it	hi
    f450:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    f452:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    f454:	bf98      	it	ls
    f456:	2300      	movls	r3, #0
    f458:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    f45a:	b102      	cbz	r2, f45e <ticker_job+0x34e>
		ticker->force = user_op->params.update.force;
    f45c:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
    f45e:	9b04      	ldr	r3, [sp, #16]
    f460:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f462:	4619      	mov	r1, r3
    f464:	9b01      	ldr	r3, [sp, #4]
    f466:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    f468:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    f46a:	786a      	ldrb	r2, [r5, #1]
    f46c:	9201      	str	r2, [sp, #4]
		ticker->req++;
    f46e:	3301      	adds	r3, #1
    f470:	7063      	strb	r3, [r4, #1]
    f472:	e6ea      	b.n	f24a <ticker_job+0x13a>
    f474:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    f476:	2300      	movs	r3, #0
    f478:	e7e2      	b.n	f440 <ticker_job+0x330>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f47a:	9903      	ldr	r1, [sp, #12]
    f47c:	eba1 0708 	sub.w	r7, r1, r8
    f480:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    f484:	429f      	cmp	r7, r3
    f486:	d213      	bcs.n	f4b0 <ticker_job+0x3a0>
			ticks_to_expire -= delta_current_start;
    f488:	1bdb      	subs	r3, r3, r7
    f48a:	e7d5      	b.n	f438 <ticker_job+0x328>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    f48c:	f8d9 7014 	ldr.w	r7, [r9, #20]
    f490:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    f492:	f009 ff21 	bl	192d8 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f496:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f498:	eba0 0c07 	sub.w	ip, r0, r7
    f49c:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    f4a0:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    f4a2:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    f4a4:	6961      	ldr	r1, [r4, #20]
    f4a6:	440b      	add	r3, r1
    f4a8:	1b9a      	subs	r2, r3, r6
    f4aa:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    f4ac:	2300      	movs	r3, #0
    f4ae:	e759      	b.n	f364 <ticker_job+0x254>
			ticks_to_expire_minus +=
    f4b0:	443a      	add	r2, r7
    f4b2:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    f4b4:	e7df      	b.n	f476 <ticker_job+0x366>
    f4b6:	4698      	mov	r8, r3
    f4b8:	e672      	b.n	f1a0 <ticker_job+0x90>
	while (count_user--) {
    f4ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f4bc:	4657      	mov	r7, sl
    f4be:	42ba      	cmp	r2, r7
    f4c0:	f1a7 0308 	sub.w	r3, r7, #8
    f4c4:	f47f aee2 	bne.w	f28c <ticker_job+0x17c>
    f4c8:	f899 701d 	ldrb.w	r7, [r9, #29]
    f4cc:	9b06      	ldr	r3, [sp, #24]
    f4ce:	1bdb      	subs	r3, r3, r7
    f4d0:	bf18      	it	ne
    f4d2:	2301      	movne	r3, #1
    f4d4:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
    f4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f4d8:	46cb      	mov	fp, r9
    f4da:	2b00      	cmp	r3, #0
    f4dc:	f040 8179 	bne.w	f7d2 <__kernel_ram_size+0x2ba>
	count_user = instance->count_user;
    f4e0:	f899 2009 	ldrb.w	r2, [r9, #9]
	node = &instance->nodes[0];
    f4e4:	f8d9 3000 	ldr.w	r3, [r9]
	users = &instance->users[0];
    f4e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
	node = &instance->nodes[0];
    f4ec:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    f4ee:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    f4f0:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    f4f2:	b2db      	uxtb	r3, r3
    f4f4:	2a00      	cmp	r2, #0
    f4f6:	f000 8110 	beq.w	f71a <__kernel_ram_size+0x202>
    f4fa:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f4fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f500:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    f502:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    f506:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    f50a:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    f50c:	9b01      	ldr	r3, [sp, #4]
    f50e:	2bff      	cmp	r3, #255	; 0xff
    f510:	d05e      	beq.n	f5d0 <__kernel_ram_size+0xb8>
				ticker = &node[id_insert];
    f512:	f8dd a004 	ldr.w	sl, [sp, #4]
    f516:	9b04      	ldr	r3, [sp, #16]
    f518:	fa0f f48a 	sxth.w	r4, sl
    f51c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f520:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    f524:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    f528:	f813 300c 	ldrb.w	r3, [r3, ip]
    f52c:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    f52e:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    f530:	22ff      	movs	r2, #255	; 0xff
    f532:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    f534:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    f538:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    f53c:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f540:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    f542:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    f544:	bf18      	it	ne
    f546:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f548:	d111      	bne.n	f56e <__kernel_ram_size+0x56>
    f54a:	e093      	b.n	f674 <__kernel_ram_size+0x15c>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    f54c:	ebb1 010c 	subs.w	r1, r1, ip
    f550:	d106      	bne.n	f560 <__kernel_ram_size+0x48>
    f552:	f8be e01e 	ldrh.w	lr, [lr, #30]
    f556:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    f55a:	45f1      	cmp	r9, lr
    f55c:	f200 80d6 	bhi.w	f70c <__kernel_ram_size+0x1f4>
		current = ticker_current->next;
    f560:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f564:	9302      	str	r3, [sp, #8]
    f566:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f56a:	d077      	beq.n	f65c <__kernel_ram_size+0x144>
    f56c:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    f56e:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    f572:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    f576:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    f57a:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f57e:	458c      	cmp	ip, r1
    f580:	d9e4      	bls.n	f54c <__kernel_ram_size+0x34>
    f582:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    f584:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    f586:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    f588:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    f58a:	d16c      	bne.n	f666 <__kernel_ram_size+0x14e>
		instance->ticker_id_head = id;
    f58c:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    f590:	2bff      	cmp	r3, #255	; 0xff
    f592:	d006      	beq.n	f5a2 <__kernel_ram_size+0x8a>
		node[current].ticks_to_expire -= ticks_to_expire;
    f594:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f598:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    f59c:	68bb      	ldr	r3, [r7, #8]
    f59e:	1a59      	subs	r1, r3, r1
    f5a0:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    f5a2:	78a3      	ldrb	r3, [r4, #2]
    f5a4:	3301      	adds	r3, #1
    f5a6:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    f5a8:	2d00      	cmp	r5, #0
    f5aa:	d0af      	beq.n	f50c <ticker_job+0x3fc>
	if (user_op->fp_op_func) {
    f5ac:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f5ae:	9a03      	ldr	r2, [sp, #12]
    f5b0:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    f5b2:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f5b4:	b113      	cbz	r3, f5bc <__kernel_ram_size+0xa4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f5b6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f5b8:	2000      	movs	r0, #0
    f5ba:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    f5bc:	6863      	ldr	r3, [r4, #4]
    f5be:	2b00      	cmp	r3, #0
    f5c0:	d1a4      	bne.n	f50c <ticker_job+0x3fc>
					ticker->op_context =
    f5c2:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    f5c6:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    f5ca:	9b01      	ldr	r3, [sp, #4]
    f5cc:	2bff      	cmp	r3, #255	; 0xff
    f5ce:	d1a0      	bne.n	f512 <ticker_job+0x402>
    f5d0:	f898 3002 	ldrb.w	r3, [r8, #2]
    f5d4:	42b3      	cmp	r3, r6
    f5d6:	d02e      	beq.n	f636 <__kernel_ram_size+0x11e>
    f5d8:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    f5da:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    f5de:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    f5e2:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    f5e6:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f5e8:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    f5ec:	b2f6      	uxtb	r6, r6
					first = 0U;
    f5ee:	42b0      	cmp	r0, r6
    f5f0:	bf08      	it	eq
    f5f2:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f5f4:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    f5f6:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f5fa:	d11a      	bne.n	f632 <__kernel_ram_size+0x11a>
				id_insert = user_op->id;
    f5fc:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    f600:	9b04      	ldr	r3, [sp, #16]
    f602:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    f606:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    f60a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    f60e:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    f610:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    f612:	1ac9      	subs	r1, r1, r3
    f614:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    f618:	d036      	beq.n	f688 <__kernel_ram_size+0x170>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f61a:	9b03      	ldr	r3, [sp, #12]
    f61c:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    f620:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    f622:	2201      	movs	r2, #1
    f624:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f626:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    f628:	b10b      	cbz	r3, f62e <__kernel_ram_size+0x116>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f62a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f62c:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    f62e:	f898 3002 	ldrb.w	r3, [r8, #2]
    f632:	42b3      	cmp	r3, r6
    f634:	d1d1      	bne.n	f5da <__kernel_ram_size+0xc2>
	while (count_user--) {
    f636:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f638:	4542      	cmp	r2, r8
    f63a:	f1a8 0308 	sub.w	r3, r8, #8
    f63e:	d06a      	beq.n	f716 <__kernel_ram_size+0x1fe>
    f640:	4698      	mov	r8, r3
    f642:	e75e      	b.n	f502 <ticker_job+0x3f2>
				if (ticks_elapsed > ticks_used) {
    f644:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f646:	1a1b      	subs	r3, r3, r0
    f648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    f64c:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    f64e:	bf8c      	ite	hi
    f650:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    f652:	2300      	movls	r3, #0
    f654:	e62d      	b.n	f2b2 <ticker_job+0x1a2>
				ticks_at_stop = cntr_cnt_get();
    f656:	f009 fe3f 	bl	192d8 <cntr_cnt_get>
    f65a:	e620      	b.n	f29e <ticker_job+0x18e>
	ticker_new->next = current;
    f65c:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    f65e:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    f660:	f880 c000 	strb.w	ip, [r0]
    f664:	4663      	mov	r3, ip
		node[previous].next = id;
    f666:	b212      	sxth	r2, r2
    f668:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    f66c:	0112      	lsls	r2, r2, #4
    f66e:	f807 a002 	strb.w	sl, [r7, r2]
    f672:	e78d      	b.n	f590 <__kernel_ram_size+0x78>
	ticker_new->next = current;
    f674:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    f678:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    f67c:	e791      	b.n	f5a2 <__kernel_ram_size+0x8a>
    f67e:	bf00      	nop
    f680:	7f172b59 	.word	0x7f172b59
    f684:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    f688:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    f68a:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    f68e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    f690:	f64f 79ff 	movw	r9, #65535	; 0xffff
    f694:	454f      	cmp	r7, r9
    f696:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
    f69a:	d02e      	beq.n	f6fa <__kernel_ram_size+0x1e2>
    f69c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    f6a0:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    f6a2:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    f6a4:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
    f6a6:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    f6aa:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    f6ac:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    f6ae:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f6b0:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f6b2:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    f6b6:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f6ba:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    f6bc:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    f6be:	d40c      	bmi.n	f6da <__kernel_ram_size+0x1c2>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f6c0:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    f6c4:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    f6c6:	b18b      	cbz	r3, f6ec <__kernel_ram_size+0x1d4>
	ticker->ticks_to_expire = ticks_to_expire;
    f6c8:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    f6ca:	9b03      	ldr	r3, [sp, #12]
    f6cc:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    f6ce:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    f6d0:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    f6d4:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    f6d6:	70e3      	strb	r3, [r4, #3]
}
    f6d8:	e72a      	b.n	f530 <__kernel_ram_size+0x18>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f6da:	ebae 0200 	sub.w	r2, lr, r0
    f6de:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    f6e2:	4293      	cmp	r3, r2
    f6e4:	d905      	bls.n	f6f2 <__kernel_ram_size+0x1da>
			ticks_to_expire -= delta_current_start;
    f6e6:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    f6e8:	2b00      	cmp	r3, #0
    f6ea:	d1ed      	bne.n	f6c8 <__kernel_ram_size+0x1b0>
		ticks_to_expire_minus -= ticks_to_expire;
    f6ec:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    f6ee:	2300      	movs	r3, #0
    f6f0:	e7ea      	b.n	f6c8 <__kernel_ram_size+0x1b0>
			    (delta_current_start - ticks_to_expire);
    f6f2:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    f6f4:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    f6f6:	2300      	movs	r3, #0
    f6f8:	e7e6      	b.n	f6c8 <__kernel_ram_size+0x1b0>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    f6fa:	f04f 0701 	mov.w	r7, #1
    f6fe:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    f702:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    f704:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    f706:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    f708:	460f      	mov	r7, r1
    f70a:	e7cc      	b.n	f6a6 <__kernel_ram_size+0x18e>
    f70c:	9a02      	ldr	r2, [sp, #8]
    f70e:	4661      	mov	r1, ip
    f710:	e738      	b.n	f584 <__kernel_ram_size+0x6c>
    f712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f714:	e658      	b.n	f3c8 <ticker_job+0x2b8>
    f716:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    f71a:	9b06      	ldr	r3, [sp, #24]
    f71c:	42bb      	cmp	r3, r7
    f71e:	f000 8334 	beq.w	fd8a <__kernel_ram_size+0x872>
	if (!pending) {
    f722:	9b08      	ldr	r3, [sp, #32]
    f724:	2b00      	cmp	r3, #0
    f726:	f000 8356 	beq.w	fdd6 <__kernel_ram_size+0x8be>
	instance->job_guard = 0U;
    f72a:	2300      	movs	r3, #0
    f72c:	f89b 701d 	ldrb.w	r7, [fp, #29]
    f730:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    f734:	2fff      	cmp	r7, #255	; 0xff
    f736:	f000 83dc 	beq.w	fef2 <__kernel_ram_size+0x9da>
	if (ticker_id_old_head == TICKER_NULL) {
    f73a:	9b06      	ldr	r3, [sp, #24]
    f73c:	2bff      	cmp	r3, #255	; 0xff
    f73e:	f000 83f6 	beq.w	ff2e <__kernel_ram_size+0xa16>
	ticks_to_expire = ticker->ticks_to_expire;
    f742:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    f746:	f8df 9300 	ldr.w	r9, [pc, #768]	; fa48 <__kernel_ram_size+0x530>
    f74a:	f8df 8300 	ldr.w	r8, [pc, #768]	; fa4c <__kernel_ram_size+0x534>
    f74e:	4ebd      	ldr	r6, [pc, #756]	; (fa44 <__kernel_ram_size+0x52c>)
	ticker = &instance->nodes[instance->ticker_id_head];
    f750:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    f754:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
    f758:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    f75a:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    f75c:	f009 fdbc 	bl	192d8 <cntr_cnt_get>
		cc = instance->ticks_current;
    f760:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    f764:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f768:	1ac4      	subs	r4, r0, r3
    f76a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    f76e:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    f770:	42bc      	cmp	r4, r7
    f772:	bf2c      	ite	cs
    f774:	191b      	addcs	r3, r3, r4
    f776:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
    f778:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    f77c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    f77e:	4620      	mov	r0, r4
    f780:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    f782:	f009 fda9 	bl	192d8 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f786:	eba0 000a 	sub.w	r0, r0, sl
    f78a:	eba4 040a 	sub.w	r4, r4, sl
    f78e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    f792:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    f796:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    f798:	42a0      	cmp	r0, r4
		i--;
    f79a:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    f79e:	f240 82ff 	bls.w	fda0 <__kernel_ram_size+0x888>
		LL_ASSERT(i);
    f7a2:	2d00      	cmp	r5, #0
    f7a4:	d1da      	bne.n	f75c <__kernel_ram_size+0x244>
    f7a6:	f640 0399 	movw	r3, #2201	; 0x899
    f7aa:	464a      	mov	r2, r9
    f7ac:	4641      	mov	r1, r8
    f7ae:	4630      	mov	r0, r6
    f7b0:	f00d f807 	bl	1c7c2 <printk>
    f7b4:	4040      	eors	r0, r0
    f7b6:	f380 8811 	msr	BASEPRI, r0
    f7ba:	f04f 0003 	mov.w	r0, #3
    f7be:	df02      	svc	2
    f7c0:	e7cc      	b.n	f75c <__kernel_ram_size+0x244>
	if (flag_elapsed) {
    f7c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f7c4:	2b00      	cmp	r3, #0
    f7c6:	f000 82f9 	beq.w	fdbc <__kernel_ram_size+0x8a4>
	pending = 0U;
    f7ca:	9b07      	ldr	r3, [sp, #28]
    f7cc:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    f7ce:	23ff      	movs	r3, #255	; 0xff
    f7d0:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    f7d2:	f009 fd81 	bl	192d8 <cntr_cnt_get>
	node = &instance->nodes[0];
    f7d6:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    f7da:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    f7de:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f7e0:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    f7e2:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    f7e4:	eba0 0003 	sub.w	r0, r0, r3
    f7e8:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    f7ec:	d054      	beq.n	f898 <__kernel_ram_size+0x380>
    f7ee:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    f7f2:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
    f7f6:	464b      	mov	r3, r9
    f7f8:	46d1      	mov	r9, sl
    f7fa:	46c2      	mov	sl, r8
    f7fc:	4698      	mov	r8, r3
		ticker = &node[id_expired];
    f7fe:	9b03      	ldr	r3, [sp, #12]
    f800:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    f804:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    f808:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    f80a:	454b      	cmp	r3, r9
    f80c:	f200 82dc 	bhi.w	fdc8 <__kernel_ram_size+0x8b0>
		is_must_expire_skip = (ticker->must_expire &&
    f810:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
    f814:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
    f818:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
    f81a:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
    f81e:	2900      	cmp	r1, #0
    f820:	f000 8138 	beq.w	fa94 <__kernel_ram_size+0x57c>
    f824:	8be6      	ldrh	r6, [r4, #30]
    f826:	3e00      	subs	r6, #0
    f828:	bf18      	it	ne
    f82a:	2601      	movne	r6, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    f82c:	f8db 2018 	ldr.w	r2, [fp, #24]
    f830:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
    f832:	bf25      	ittet	cs
    f834:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    f838:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    f83c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    f83e:	2300      	movcs	r3, #0
		if ((ticker->ticks_slot != 0U) &&
    f840:	69a7      	ldr	r7, [r4, #24]
			instance->ticks_slot_previous = 0U;
    f842:	f8cb 3018 	str.w	r3, [fp, #24]
    f846:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f848:	6860      	ldr	r0, [r4, #4]
    f84a:	f894 c000 	ldrb.w	ip, [r4]
		if ((ticker->ticks_slot != 0U) &&
    f84e:	b147      	cbz	r7, f862 <__kernel_ram_size+0x34a>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    f850:	7863      	ldrb	r3, [r4, #1]
    f852:	f894 e002 	ldrb.w	lr, [r4, #2]
    f856:	eba3 030e 	sub.w	r3, r3, lr
    f85a:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
    f85c:	2b02      	cmp	r3, #2
    f85e:	f000 8147 	beq.w	faf0 <__kernel_ram_size+0x5d8>
		ticker->ticks_to_expire = 0U;
    f862:	2300      	movs	r3, #0
    f864:	60a3      	str	r3, [r4, #8]
		instance->ticker_id_head = ticker->next;
    f866:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    f86a:	2800      	cmp	r0, #0
    f86c:	f040 80d6 	bne.w	fa1c <__kernel_ram_size+0x504>
    f870:	b11a      	cbz	r2, f87a <__kernel_ram_size+0x362>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    f872:	7a13      	ldrb	r3, [r2, #8]
    f874:	2b01      	cmp	r3, #1
    f876:	f000 8115 	beq.w	faa4 <__kernel_ram_size+0x58c>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
    f87a:	78a2      	ldrb	r2, [r4, #2]
    f87c:	7860      	ldrb	r0, [r4, #1]
    f87e:	1a80      	subs	r0, r0, r2
    f880:	b2c0      	uxtb	r0, r0
    f882:	2801      	cmp	r0, #1
    f884:	f000 80c2 	beq.w	fa0c <__kernel_ram_size+0x4f4>
			ticker->req = ticker->ack;
    f888:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    f88a:	f89b 501d 	ldrb.w	r5, [fp, #29]
    f88e:	2dff      	cmp	r5, #255	; 0xff
    f890:	d1b5      	bne.n	f7fe <__kernel_ram_size+0x2e6>
    f892:	f8db 3000 	ldr.w	r3, [fp]
    f896:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
    f898:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
    f89c:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    f8a0:	f8db 1004 	ldr.w	r1, [fp, #4]
    f8a4:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    f8a6:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    f8a8:	42ac      	cmp	r4, r5
    f8aa:	bf18      	it	ne
    f8ac:	2001      	movne	r0, #1
    f8ae:	9007      	str	r0, [sp, #28]
	while (count_user--) {
    f8b0:	b2db      	uxtb	r3, r3
    f8b2:	2a00      	cmp	r2, #0
    f8b4:	f000 818a 	beq.w	fbcc <__kernel_ram_size+0x6b4>
    f8b8:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    f8bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    f8c0:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    f8c4:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    f8c6:	9b01      	ldr	r3, [sp, #4]
    f8c8:	2bff      	cmp	r3, #255	; 0xff
    f8ca:	d062      	beq.n	f992 <__kernel_ram_size+0x47a>
				ticker = &node[id_insert];
    f8cc:	f8dd a004 	ldr.w	sl, [sp, #4]
    f8d0:	9b03      	ldr	r3, [sp, #12]
    f8d2:	fa0f f48a 	sxth.w	r4, sl
    f8d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f8da:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    f8de:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    f8e2:	f813 300c 	ldrb.w	r3, [r3, ip]
    f8e6:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    f8e8:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    f8ea:	22ff      	movs	r2, #255	; 0xff
    f8ec:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    f8ee:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    f8f2:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    f8f6:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f8fa:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    f8fc:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    f8fe:	bf18      	it	ne
    f900:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f902:	d112      	bne.n	f92a <__kernel_ram_size+0x412>
    f904:	e15a      	b.n	fbbc <__kernel_ram_size+0x6a4>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    f906:	ebb1 010c 	subs.w	r1, r1, ip
    f90a:	d106      	bne.n	f91a <__kernel_ram_size+0x402>
    f90c:	f8be e01e 	ldrh.w	lr, [lr, #30]
    f910:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    f914:	45f1      	cmp	r9, lr
    f916:	f200 810c 	bhi.w	fb32 <__kernel_ram_size+0x61a>
		current = ticker_current->next;
    f91a:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f91e:	9304      	str	r3, [sp, #16]
    f920:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f924:	f000 80f9 	beq.w	fb1a <__kernel_ram_size+0x602>
    f928:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    f92a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    f92e:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    f932:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    f936:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    f93a:	458c      	cmp	ip, r1
    f93c:	d9e3      	bls.n	f906 <__kernel_ram_size+0x3ee>
    f93e:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    f940:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    f942:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    f944:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    f946:	f040 80ed 	bne.w	fb24 <__kernel_ram_size+0x60c>
		instance->ticker_id_head = id;
    f94a:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    f94e:	2bff      	cmp	r3, #255	; 0xff
    f950:	d006      	beq.n	f960 <__kernel_ram_size+0x448>
		node[current].ticks_to_expire -= ticks_to_expire;
    f952:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f956:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    f95a:	68bb      	ldr	r3, [r7, #8]
    f95c:	1a59      	subs	r1, r3, r1
    f95e:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    f960:	78a3      	ldrb	r3, [r4, #2]
    f962:	3301      	adds	r3, #1
    f964:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    f966:	2d00      	cmp	r5, #0
    f968:	d0ad      	beq.n	f8c6 <__kernel_ram_size+0x3ae>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f96a:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    f96e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f970:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    f972:	2200      	movs	r2, #0
    f974:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    f976:	b113      	cbz	r3, f97e <__kernel_ram_size+0x466>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f978:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f97a:	4610      	mov	r0, r2
    f97c:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    f97e:	6863      	ldr	r3, [r4, #4]
    f980:	2b00      	cmp	r3, #0
    f982:	d1a0      	bne.n	f8c6 <__kernel_ram_size+0x3ae>
					ticker->op_context =
    f984:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    f988:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    f98c:	9b01      	ldr	r3, [sp, #4]
    f98e:	2bff      	cmp	r3, #255	; 0xff
    f990:	d19c      	bne.n	f8cc <__kernel_ram_size+0x3b4>
    f992:	f898 3002 	ldrb.w	r3, [r8, #2]
    f996:	42b3      	cmp	r3, r6
    f998:	d030      	beq.n	f9fc <__kernel_ram_size+0x4e4>
    f99a:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    f99c:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    f9a0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    f9a4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    f9a8:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f9aa:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    f9ae:	b2f6      	uxtb	r6, r6
					first = 0U;
    f9b0:	42b0      	cmp	r0, r6
    f9b2:	bf08      	it	eq
    f9b4:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f9b6:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    f9b8:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    f9bc:	d11c      	bne.n	f9f8 <__kernel_ram_size+0x4e0>
				id_insert = user_op->id;
    f9be:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    f9c2:	9b03      	ldr	r3, [sp, #12]
    f9c4:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    f9c8:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    f9cc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    f9d0:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    f9d2:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    f9d4:	1ac9      	subs	r1, r1, r3
    f9d6:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    f9da:	f000 80ad 	beq.w	fb38 <__kernel_ram_size+0x620>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    f9de:	f04f 0300 	mov.w	r3, #0
    f9e2:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    f9e6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    f9e8:	2201      	movs	r2, #1
    f9ea:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f9ec:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    f9ee:	b10b      	cbz	r3, f9f4 <__kernel_ram_size+0x4dc>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    f9f0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    f9f2:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    f9f4:	f898 3002 	ldrb.w	r3, [r8, #2]
    f9f8:	42b3      	cmp	r3, r6
    f9fa:	d1cf      	bne.n	f99c <__kernel_ram_size+0x484>
	while (count_user--) {
    f9fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f9fe:	4542      	cmp	r2, r8
    fa00:	f1a8 0308 	sub.w	r3, r8, #8
    fa04:	f000 80df 	beq.w	fbc6 <__kernel_ram_size+0x6ae>
    fa08:	4698      	mov	r8, r3
    fa0a:	e757      	b.n	f8bc <__kernel_ram_size+0x3a4>
			    ticker->fp_op_func) {
    fa0c:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
    fa0e:	2b00      	cmp	r3, #0
    fa10:	f43f af3a 	beq.w	f888 <__kernel_ram_size+0x370>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    fa14:	6a61      	ldr	r1, [r4, #36]	; 0x24
    fa16:	4798      	blx	r3
    fa18:	78a2      	ldrb	r2, [r4, #2]
    fa1a:	e735      	b.n	f888 <__kernel_ram_size+0x370>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    fa1c:	b112      	cbz	r2, fa24 <__kernel_ram_size+0x50c>
    fa1e:	7a13      	ldrb	r3, [r2, #8]
    fa20:	2b01      	cmp	r3, #1
    fa22:	d03f      	beq.n	faa4 <__kernel_ram_size+0x58c>
				if (!ticker->lazy_current) {
    fa24:	8be3      	ldrh	r3, [r4, #30]
    fa26:	930a      	str	r3, [sp, #40]	; 0x28
    fa28:	2b00      	cmp	r3, #0
    fa2a:	d170      	bne.n	fb0e <__kernel_ram_size+0x5f6>
					lazy_periodic = ticker->lazy_periodic;
    fa2c:	8ba3      	ldrh	r3, [r4, #28]
    fa2e:	7866      	ldrb	r6, [r4, #1]
    fa30:	9304      	str	r3, [sp, #16]
    fa32:	469e      	mov	lr, r3
				while (count--) {
    fa34:	1c47      	adds	r7, r0, #1
    fa36:	9709      	str	r7, [sp, #36]	; 0x24
    fa38:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
    fa3c:	2300      	movs	r3, #0
    fa3e:	910b      	str	r1, [sp, #44]	; 0x2c
    fa40:	4677      	mov	r7, lr
    fa42:	e00a      	b.n	fa5a <__kernel_ram_size+0x542>
    fa44:	00022678 	.word	0x00022678
    fa48:	00022638 	.word	0x00022638
    fa4c:	0002273c 	.word	0x0002273c
				while (count--) {
    fa50:	3f01      	subs	r7, #1
    fa52:	4686      	mov	lr, r0
    fa54:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    fa56:	4473      	add	r3, lr
				while (count--) {
    fa58:	d012      	beq.n	fa80 <__kernel_ram_size+0x568>
	if ((ticker->remainder_current < BIT(31)) &&
    fa5a:	f8df e2d8 	ldr.w	lr, [pc, #728]	; fd34 <__kernel_ram_size+0x81c>
    fa5e:	49b4      	ldr	r1, [pc, #720]	; (fd30 <__kernel_ram_size+0x818>)
	ticker->remainder_current += ticker->remainder_periodic;
    fa60:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    fa62:	4496      	add	lr, r2
    fa64:	458e      	cmp	lr, r1
    fa66:	d8f3      	bhi.n	fa50 <__kernel_ram_size+0x538>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fa68:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    fa6c:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    fa70:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fa72:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
    fa76:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fa78:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    fa7c:	4473      	add	r3, lr
				while (count--) {
    fa7e:	d1ec      	bne.n	fa5a <__kernel_ram_size+0x542>
    fa80:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fa82:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
    fa84:	2900      	cmp	r1, #0
    fa86:	f000 814b 	beq.w	fd20 <__kernel_ram_size+0x808>
				ticker->lazy_current += (lazy_periodic + lazy);
    fa8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fa8c:	9904      	ldr	r1, [sp, #16]
    fa8e:	440a      	add	r2, r1
    fa90:	83e2      	strh	r2, [r4, #30]
    fa92:	e009      	b.n	faa8 <__kernel_ram_size+0x590>
		is_must_expire_skip = (ticker->must_expire &&
    fa94:	460e      	mov	r6, r1
    fa96:	e6c9      	b.n	f82c <__kernel_ram_size+0x314>
		ticker->ticks_to_expire = 0U;
    fa98:	60a6      	str	r6, [r4, #8]
		instance->ticker_id_head = ticker->next;
    fa9a:	f88b c01d 	strb.w	ip, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    fa9e:	2800      	cmp	r0, #0
    faa0:	f43f aee7 	beq.w	f872 <__kernel_ram_size+0x35a>
				ticker->req = ticker->ack;
    faa4:	78a6      	ldrb	r6, [r4, #2]
    faa6:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
    faa8:	9805      	ldr	r0, [sp, #20]
    faaa:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    faae:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    fab0:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    fab4:	1ab8      	subs	r0, r7, r2
    fab6:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    faba:	d10e      	bne.n	fada <__kernel_ram_size+0x5c2>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fabc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    fac0:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    fac2:	4299      	cmp	r1, r3
    fac4:	d211      	bcs.n	faea <__kernel_ram_size+0x5d2>
		ticks_to_expire -= ticks_to_expire_minus;
    fac6:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
    fac8:	2100      	movs	r1, #0
			ticker->next = *insert_head;
    faca:	9a01      	ldr	r2, [sp, #4]
    facc:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    face:	3601      	adds	r6, #1
    fad0:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    fad2:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    fad4:	6161      	str	r1, [r4, #20]
			ticker->req++;
    fad6:	9501      	str	r5, [sp, #4]
    fad8:	e6d7      	b.n	f88a <__kernel_ram_size+0x372>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fada:	1bd2      	subs	r2, r2, r7
    fadc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    fae0:	429a      	cmp	r2, r3
    fae2:	d211      	bcs.n	fb08 <__kernel_ram_size+0x5f0>
			ticks_to_expire -= delta_current_start;
    fae4:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    fae6:	4299      	cmp	r1, r3
    fae8:	d3ed      	bcc.n	fac6 <__kernel_ram_size+0x5ae>
    faea:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    faec:	2300      	movs	r3, #0
    faee:	e7ec      	b.n	faca <__kernel_ram_size+0x5b2>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    faf0:	2e00      	cmp	r6, #0
    faf2:	f47f aeb6 	bne.w	f862 <__kernel_ram_size+0x34a>
		    !is_must_expire_skip &&
    faf6:	b112      	cbz	r2, fafe <__kernel_ram_size+0x5e6>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    faf8:	7a13      	ldrb	r3, [r2, #8]
    fafa:	2b01      	cmp	r3, #1
    fafc:	d0cc      	beq.n	fa98 <__kernel_ram_size+0x580>
			instance->ticker_id_slot_previous = id_expired;
    fafe:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    fb02:	f8cb 7018 	str.w	r7, [fp, #24]
    fb06:	e6ac      	b.n	f862 <__kernel_ram_size+0x34a>
			ticks_to_expire_minus +=
    fb08:	4411      	add	r1, r2
    fb0a:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    fb0c:	e7ee      	b.n	faec <__kernel_ram_size+0x5d4>
					ticker->req = ticker->ack;
    fb0e:	f04f 0e00 	mov.w	lr, #0
    fb12:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
    fb14:	f8cd e010 	str.w	lr, [sp, #16]
    fb18:	e78c      	b.n	fa34 <__kernel_ram_size+0x51c>
	ticker_new->next = current;
    fb1a:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    fb1c:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    fb1e:	f880 c000 	strb.w	ip, [r0]
    fb22:	4663      	mov	r3, ip
		node[previous].next = id;
    fb24:	b212      	sxth	r2, r2
    fb26:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fb2a:	0112      	lsls	r2, r2, #4
    fb2c:	f807 a002 	strb.w	sl, [r7, r2]
    fb30:	e70d      	b.n	f94e <__kernel_ram_size+0x436>
    fb32:	9a04      	ldr	r2, [sp, #16]
    fb34:	4661      	mov	r1, ip
    fb36:	e703      	b.n	f940 <__kernel_ram_size+0x428>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fb38:	8aaf      	ldrh	r7, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    fb3a:	f8db e014 	ldr.w	lr, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fb3e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    fb40:	f64f 79ff 	movw	r9, #65535	; 0xffff
    fb44:	454f      	cmp	r7, r9
    fb46:	e9d5 2303 	ldrd	r2, r3, [r5, #12]
    fb4a:	d02e      	beq.n	fbaa <__kernel_ram_size+0x692>
    fb4c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    fb50:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    fb52:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    fb54:	6223      	str	r3, [r4, #32]
	ticker->timeout_func = start->fp_timeout_func;
    fb56:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    fb5a:	6868      	ldr	r0, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    fb5c:	61a2      	str	r2, [r4, #24]
	ticker->context = start->context;
    fb5e:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    fb60:	83a7      	strh	r7, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    fb62:	eba0 070e 	sub.w	r7, r0, lr
	ticker->context = start->context;
    fb66:	e9c4 3203 	strd	r3, r2, [r4, #12]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    fb6a:	023a      	lsls	r2, r7, #8
	ticker->ticks_to_expire = start->ticks_first;
    fb6c:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    fb6e:	d40c      	bmi.n	fb8a <__kernel_ram_size+0x672>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fb70:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    fb74:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    fb76:	b18b      	cbz	r3, fb9c <__kernel_ram_size+0x684>
	ticker->ticks_to_expire = ticks_to_expire;
    fb78:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    fb7a:	2300      	movs	r3, #0
    fb7c:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    fb7e:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    fb80:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    fb84:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    fb86:	70e3      	strb	r3, [r4, #3]
}
    fb88:	e6af      	b.n	f8ea <__kernel_ram_size+0x3d2>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    fb8a:	ebae 0200 	sub.w	r2, lr, r0
    fb8e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    fb92:	4293      	cmp	r3, r2
    fb94:	d905      	bls.n	fba2 <__kernel_ram_size+0x68a>
			ticks_to_expire -= delta_current_start;
    fb96:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    fb98:	2b00      	cmp	r3, #0
    fb9a:	d1ed      	bne.n	fb78 <__kernel_ram_size+0x660>
		ticks_to_expire_minus -= ticks_to_expire;
    fb9c:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    fb9e:	2300      	movs	r3, #0
    fba0:	e7ea      	b.n	fb78 <__kernel_ram_size+0x660>
			    (delta_current_start - ticks_to_expire);
    fba2:	1ad3      	subs	r3, r2, r3
		ticks_to_expire_minus -= ticks_to_expire;
    fba4:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    fba6:	2300      	movs	r3, #0
    fba8:	e7e6      	b.n	fb78 <__kernel_ram_size+0x660>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    fbaa:	f04f 0701 	mov.w	r7, #1
    fbae:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    fbb2:	62a0      	str	r0, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    fbb4:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    fbb6:	6223      	str	r3, [r4, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    fbb8:	460f      	mov	r7, r1
    fbba:	e7cc      	b.n	fb56 <__kernel_ram_size+0x63e>
	ticker_new->next = current;
    fbbc:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    fbc0:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    fbc4:	e6cc      	b.n	f960 <__kernel_ram_size+0x448>
    fbc6:	f8db 3000 	ldr.w	r3, [fp]
    fbca:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
    fbcc:	f89b 701d 	ldrb.w	r7, [fp, #29]
    fbd0:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
    fbd2:	2300      	movs	r3, #0
    fbd4:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
    fbd6:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    fbda:	d010      	beq.n	fbfe <__kernel_ram_size+0x6e6>
    fbdc:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
    fbde:	fa0f f289 	sxth.w	r2, r9
    fbe2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    fbe6:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    fbea:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    fbec:	b117      	cbz	r7, fbf4 <__kernel_ram_size+0x6dc>
    fbee:	7a39      	ldrb	r1, [r7, #8]
    fbf0:	2901      	cmp	r1, #1
    fbf2:	d014      	beq.n	fc1e <__kernel_ram_size+0x706>
			ticker_id_head = ticker->next;
    fbf4:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
    fbf8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    fbfc:	d1ef      	bne.n	fbde <__kernel_ram_size+0x6c6>
	return rescheduled;
    fbfe:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    fc00:	2b00      	cmp	r3, #0
    fc02:	f43f ad8a 	beq.w	f71a <__kernel_ram_size+0x202>
	if (instance->ticker_id_head != ticker_id_old_head) {
    fc06:	9a06      	ldr	r2, [sp, #24]
    fc08:	42ba      	cmp	r2, r7
    fc0a:	f47f ad8a 	bne.w	f722 <__kernel_ram_size+0x20a>
	if (!pending) {
    fc0e:	9a08      	ldr	r2, [sp, #32]
    fc10:	2a00      	cmp	r2, #0
    fc12:	f000 817c 	beq.w	ff0e <__kernel_ram_size+0x9f6>
	instance->job_guard = 0U;
    fc16:	2300      	movs	r3, #0
    fc18:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    fc1c:	e58a      	b.n	f734 <__kernel_ram_size+0x21c>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    fc1e:	f89b 301c 	ldrb.w	r3, [fp, #28]
    fc22:	2bff      	cmp	r3, #255	; 0xff
    fc24:	d071      	beq.n	fd0a <__kernel_ram_size+0x7f2>
			instance->ticks_slot_previous > ticks_elapsed) {
    fc26:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    fc2a:	9b02      	ldr	r3, [sp, #8]
    fc2c:	4283      	cmp	r3, r0
    fc2e:	d26c      	bcs.n	fd0a <__kernel_ram_size+0x7f2>
			window_start_ticks = instance->ticks_slot_previous -
    fc30:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fc32:	e9d7 4300 	ldrd	r4, r3, [r7]
    fc36:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    fc38:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fc3c:	d26d      	bcs.n	fd1a <__kernel_ram_size+0x802>
		while (ticker_id_iter != TICKER_NULL &&
    fc3e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    fc42:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    fc46:	d068      	beq.n	fd1a <__kernel_ram_size+0x802>
		       ticks_start_offset + ticker->ticks_slot <=
    fc48:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    fc4a:	42ac      	cmp	r4, r5
    fc4c:	f04f 0300 	mov.w	r3, #0
    fc50:	d333      	bcc.n	fcba <__kernel_ram_size+0x7a2>
    fc52:	469e      	mov	lr, r3
    fc54:	9501      	str	r5, [sp, #4]
    fc56:	4661      	mov	r1, ip
    fc58:	9203      	str	r2, [sp, #12]
    fc5a:	e01d      	b.n	fc98 <__kernel_ram_size+0x780>
			if (node->ticks_to_expire >
    fc5c:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
    fc60:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
    fc64:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
    fc68:	4473      	add	r3, lr
			if (node->ticks_to_expire >
    fc6a:	d909      	bls.n	fc80 <__kernel_ram_size+0x768>
				window_end_ticks =
    fc6c:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
    fc6e:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
    fc70:	bf28      	it	cs
    fc72:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    fc74:	4293      	cmp	r3, r2
    fc76:	d903      	bls.n	fc80 <__kernel_ram_size+0x768>
			if (ticks_to_expire != 0U &&
    fc78:	1b5b      	subs	r3, r3, r5
    fc7a:	d001      	beq.n	fc80 <__kernel_ram_size+0x768>
    fc7c:	4283      	cmp	r3, r0
    fc7e:	d21b      	bcs.n	fcb8 <__kernel_ram_size+0x7a0>
			window_start_ticks  = node->ticks_to_expire +
    fc80:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    fc82:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
    fc84:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
    fc86:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
    fc88:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
    fc8a:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
    fc8e:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    fc90:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
    fc92:	d011      	beq.n	fcb8 <__kernel_ram_size+0x7a0>
    fc94:	4294      	cmp	r4, r2
    fc96:	d30f      	bcc.n	fcb8 <__kernel_ram_size+0x7a0>
			node = &nodes[ticker_id_iter];
    fc98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    fc9c:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    fca0:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
    fca4:	f1b8 0f00 	cmp.w	r8, #0
    fca8:	d0d8      	beq.n	fc5c <__kernel_ram_size+0x744>
    fcaa:	f898 8008 	ldrb.w	r8, [r8, #8]
    fcae:	f1b8 0f01 	cmp.w	r8, #1
    fcb2:	d1d3      	bne.n	fc5c <__kernel_ram_size+0x744>
				ticker_id_iter = node->next;
    fcb4:	7809      	ldrb	r1, [r1, #0]
				continue;
    fcb6:	e7e8      	b.n	fc8a <__kernel_ram_size+0x772>
    fcb8:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    fcba:	6093      	str	r3, [r2, #8]
    fcbc:	4664      	mov	r4, ip
    fcbe:	f04f 0eff 	mov.w	lr, #255	; 0xff
    fcc2:	e000      	b.n	fcc6 <__kernel_ram_size+0x7ae>
    fcc4:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    fcc6:	b221      	sxth	r1, r4
    fcc8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    fccc:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    fcd0:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    fcd2:	f8d8 5008 	ldr.w	r5, [r8, #8]
    fcd6:	429d      	cmp	r5, r3
    fcd8:	d24e      	bcs.n	fd78 <__kernel_ram_size+0x860>
				ticker->ticks_to_expire -=
    fcda:	1b5b      	subs	r3, r3, r5
    fcdc:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    fcde:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    fce0:	28ff      	cmp	r0, #255	; 0xff
    fce2:	46a6      	mov	lr, r4
    fce4:	d1ee      	bne.n	fcc4 <__kernel_ram_size+0x7ac>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    fce6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    fcea:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    fcec:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    fcf0:	5c73      	ldrb	r3, [r6, r1]
    fcf2:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    fcf4:	f806 9001 	strb.w	r9, [r6, r1]
    fcf8:	46e2      	mov	sl, ip
		ticker->lazy_current--;
    fcfa:	8bd3      	ldrh	r3, [r2, #30]
    fcfc:	3b01      	subs	r3, #1
    fcfe:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    fd00:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    fd04:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    fd06:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    fd08:	e765      	b.n	fbd6 <__kernel_ram_size+0x6be>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fd0a:	e9d7 4300 	ldrd	r4, r3, [r7]
    fd0e:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    fd10:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
    fd14:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    fd18:	d391      	bcc.n	fc3e <__kernel_ram_size+0x726>
		ticker->ticks_to_expire = ticks_to_expire;
    fd1a:	2300      	movs	r3, #0
    fd1c:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    fd1e:	e7ec      	b.n	fcfa <__kernel_ram_size+0x7e2>
					while (ticks_to_expire <
    fd20:	459a      	cmp	sl, r3
    fd22:	f67f aeb2 	bls.w	fa8a <__kernel_ram_size+0x572>
    fd26:	f100 0e01 	add.w	lr, r0, #1
    fd2a:	9409      	str	r4, [sp, #36]	; 0x24
    fd2c:	e00a      	b.n	fd44 <__kernel_ram_size+0x82c>
    fd2e:	bf00      	nop
    fd30:	7f172b59 	.word	0x7f172b59
    fd34:	ff172b5a 	.word	0xff172b5a
    fd38:	4607      	mov	r7, r0
						ticks_to_expire +=
    fd3a:	443b      	add	r3, r7
						lazy++;
    fd3c:	3101      	adds	r1, #1
					while (ticks_to_expire <
    fd3e:	459a      	cmp	sl, r3
						lazy++;
    fd40:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    fd42:	d911      	bls.n	fd68 <__kernel_ram_size+0x850>
	if ((ticker->remainder_current < BIT(31)) &&
    fd44:	4f81      	ldr	r7, [pc, #516]	; (ff4c <__kernel_ram_size+0xa34>)
    fd46:	4c82      	ldr	r4, [pc, #520]	; (ff50 <__kernel_ram_size+0xa38>)
	ticker->remainder_current += ticker->remainder_periodic;
    fd48:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    fd4a:	19d7      	adds	r7, r2, r7
    fd4c:	42a7      	cmp	r7, r4
    fd4e:	d8f3      	bhi.n	fd38 <__kernel_ram_size+0x820>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fd50:	4677      	mov	r7, lr
    fd52:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    fd56:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fd58:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    fd5c:	3101      	adds	r1, #1
					while (ticks_to_expire <
    fd5e:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    fd60:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    fd64:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    fd66:	d8ed      	bhi.n	fd44 <__kernel_ram_size+0x82c>
    fd68:	9804      	ldr	r0, [sp, #16]
    fd6a:	9c09      	ldr	r4, [sp, #36]	; 0x24
    fd6c:	4408      	add	r0, r1
    fd6e:	b281      	uxth	r1, r0
    fd70:	9104      	str	r1, [sp, #16]
    fd72:	6262      	str	r2, [r4, #36]	; 0x24
    fd74:	e689      	b.n	fa8a <__kernel_ram_size+0x572>
    fd76:	4770      	bx	lr
				node->ticks_to_expire -=
    fd78:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    fd7a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    fd7e:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    fd82:	d0ba      	beq.n	fcfa <__kernel_ram_size+0x7e2>
    fd84:	fa0f f18e 	sxth.w	r1, lr
    fd88:	e7ad      	b.n	fce6 <__kernel_ram_size+0x7ce>
	if (!pending) {
    fd8a:	9b08      	ldr	r3, [sp, #32]
    fd8c:	2b00      	cmp	r3, #0
    fd8e:	f000 80a6 	beq.w	fede <__kernel_ram_size+0x9c6>
	instance->job_guard = 0U;
    fd92:	2300      	movs	r3, #0
    fd94:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    fd98:	9b07      	ldr	r3, [sp, #28]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	f040 80c4 	bne.w	ff28 <__kernel_ram_size+0xa10>
    fda0:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
    fda4:	b16a      	cbz	r2, fdc2 <__kernel_ram_size+0x8aa>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    fda6:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    fdaa:	465b      	mov	r3, fp
    fdac:	2201      	movs	r2, #1
    fdae:	2103      	movs	r1, #3
    fdb0:	2004      	movs	r0, #4
    fdb2:	46a4      	mov	ip, r4
}
    fdb4:	b00f      	add	sp, #60	; 0x3c
    fdb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    fdba:	4760      	bx	ip
	instance->job_guard = 0U;
    fdbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fdbe:	f88b 301e 	strb.w	r3, [fp, #30]
}
    fdc2:	b00f      	add	sp, #60	; 0x3c
    fdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
    fdc8:	eba3 0309 	sub.w	r3, r3, r9
    fdcc:	60a3      	str	r3, [r4, #8]
			break;
    fdce:	f8db 3000 	ldr.w	r3, [fp]
    fdd2:	9303      	str	r3, [sp, #12]
    fdd4:	e560      	b.n	f898 <__kernel_ram_size+0x380>
	count_user = instance->count_user;
    fdd6:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    fdda:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    fdde:	1e5c      	subs	r4, r3, #1
    fde0:	b2e4      	uxtb	r4, r4
    fde2:	2b00      	cmp	r3, #0
    fde4:	f43f aca1 	beq.w	f72a <__kernel_ram_size+0x212>
		flag_compare_update = 1U;
    fde8:	2301      	movs	r3, #1
    fdea:	9307      	str	r3, [sp, #28]
    fdec:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    fdf0:	f04f 0900 	mov.w	r9, #0
		while (user->first != user->last) {
    fdf4:	7863      	ldrb	r3, [r4, #1]
    fdf6:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    fdf8:	6865      	ldr	r5, [r4, #4]
		while (user->first != user->last) {
    fdfa:	4299      	cmp	r1, r3
    fdfc:	d10c      	bne.n	fe18 <__kernel_ram_size+0x900>
    fdfe:	e060      	b.n	fec2 <__kernel_ram_size+0x9aa>
	switch (uop->op) {
    fe00:	2b01      	cmp	r3, #1
    fe02:	d05a      	beq.n	feba <__kernel_ram_size+0x9a2>
			first = user->first + 1;
    fe04:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    fe06:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    fe08:	3301      	adds	r3, #1
    fe0a:	b2db      	uxtb	r3, r3
				first = 0U;
    fe0c:	429a      	cmp	r2, r3
    fe0e:	bf08      	it	eq
    fe10:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    fe12:	4299      	cmp	r1, r3
			user->first = first;
    fe14:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    fe16:	d054      	beq.n	fec2 <__kernel_ram_size+0x9aa>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    fe18:	b21b      	sxth	r3, r3
    fe1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    fe1e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    fe22:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	switch (uop->op) {
    fe26:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
    fe2a:	2b02      	cmp	r3, #2
    fe2c:	d01b      	beq.n	fe66 <__kernel_ram_size+0x94e>
    fe2e:	2b03      	cmp	r3, #3
    fe30:	d1e6      	bne.n	fe00 <__kernel_ram_size+0x8e8>
		if (uop->id < instance->count_node) {
    fe32:	7853      	ldrb	r3, [r2, #1]
    fe34:	f89b 1008 	ldrb.w	r1, [fp, #8]
    fe38:	4299      	cmp	r1, r3
    fe3a:	d911      	bls.n	fe60 <__kernel_ram_size+0x948>
			node[uop->id].priority =
    fe3c:	f8db 1000 	ldr.w	r1, [fp]
    fe40:	7910      	ldrb	r0, [r2, #4]
    fe42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    fe46:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    fe4a:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    fe4e:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    fe52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    fe54:	b113      	cbz	r3, fe5c <__kernel_ram_size+0x944>
		fp_op_func(uop->status, uop->op_context);
    fe56:	6b11      	ldr	r1, [r2, #48]	; 0x30
    fe58:	6a90      	ldr	r0, [r2, #40]	; 0x28
    fe5a:	4798      	blx	r3
    fe5c:	78e1      	ldrb	r1, [r4, #3]
    fe5e:	e7d1      	b.n	fe04 <__kernel_ram_size+0x8ec>
			uop->status = TICKER_STATUS_FAILURE;
    fe60:	2301      	movs	r3, #1
    fe62:	6293      	str	r3, [r2, #40]	; 0x28
    fe64:	e7f5      	b.n	fe52 <__kernel_ram_size+0x93a>
		ticker_by_next_slot_get(instance,
    fe66:	e9d2 7001 	ldrd	r7, r0, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    fe6a:	f897 e000 	ldrb.w	lr, [r7]
		ticker_by_next_slot_get(instance,
    fe6e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
	node = instance->nodes;
    fe72:	f8db 1000 	ldr.w	r1, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    fe76:	f8db 8014 	ldr.w	r8, [fp, #20]
    fe7a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    fe7e:	d002      	beq.n	fe86 <__kernel_ram_size+0x96e>
    fe80:	6803      	ldr	r3, [r0, #0]
    fe82:	4543      	cmp	r3, r8
    fe84:	d024      	beq.n	fed0 <__kernel_ram_size+0x9b8>
		_ticker_id_head = instance->ticker_id_head;
    fe86:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    fe8a:	f8c0 8000 	str.w	r8, [r0]
		_ticks_to_expire = 0U;
    fe8e:	f04f 0e00 	mov.w	lr, #0
    fe92:	e00d      	b.n	feb0 <__kernel_ram_size+0x998>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    fe94:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    fe98:	eb01 1800 	add.w	r8, r1, r0, lsl #4
    fe9c:	0100      	lsls	r0, r0, #4
    fe9e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
    fea2:	f8d8 8018 	ldr.w	r8, [r8, #24]
    fea6:	44d6      	add	lr, sl
    fea8:	f1b8 0f00 	cmp.w	r8, #0
    feac:	d102      	bne.n	feb4 <__kernel_ram_size+0x99c>
		_ticker_id_head = ticker->next;
    feae:	5c0b      	ldrb	r3, [r1, r0]
	while ((_ticker_id_head != TICKER_NULL) &&
    feb0:	2bff      	cmp	r3, #255	; 0xff
    feb2:	d1ef      	bne.n	fe94 <__kernel_ram_size+0x97c>
	*ticker_id_head = _ticker_id_head;
    feb4:	703b      	strb	r3, [r7, #0]
	*ticks_to_expire = _ticks_to_expire;
    feb6:	f8cc e000 	str.w	lr, [ip]
		fp_op_func = uop->fp_op_func;
    feba:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    febc:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    fec0:	e7c8      	b.n	fe54 <__kernel_ram_size+0x93c>
	while (count_user--) {
    fec2:	42a6      	cmp	r6, r4
    fec4:	f1a4 0308 	sub.w	r3, r4, #8
    fec8:	f43f af63 	beq.w	fd92 <__kernel_ram_size+0x87a>
    fecc:	461c      	mov	r4, r3
    fece:	e791      	b.n	fdf4 <__kernel_ram_size+0x8dc>
		ticker = &node[_ticker_id_head];
    fed0:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
    fed4:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    fed6:	f8dc e000 	ldr.w	lr, [ip]
		_ticker_id_head = ticker->next;
    feda:	5ccb      	ldrb	r3, [r1, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    fedc:	e7e8      	b.n	feb0 <__kernel_ram_size+0x998>
	count_user = instance->count_user;
    fede:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    fee2:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    fee6:	1e5c      	subs	r4, r3, #1
    fee8:	b2e4      	uxtb	r4, r4
    feea:	2b00      	cmp	r3, #0
    feec:	f47f af7e 	bne.w	fdec <__kernel_ram_size+0x8d4>
    fef0:	e74f      	b.n	fd92 <__kernel_ram_size+0x87a>
		if (cntr_stop() == 0) {
    fef2:	f009 f9cb 	bl	1928c <cntr_stop>
    fef6:	2800      	cmp	r0, #0
    fef8:	f47f af52 	bne.w	fda0 <__kernel_ram_size+0x888>
			instance->ticks_slot_previous = 0U;
    fefc:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    ff00:	f009 f9ea 	bl	192d8 <cntr_cnt_get>
    ff04:	f89b 201f 	ldrb.w	r2, [fp, #31]
    ff08:	f8cb 0014 	str.w	r0, [fp, #20]
    ff0c:	e74a      	b.n	fda4 <__kernel_ram_size+0x88c>
	count_user = instance->count_user;
    ff0e:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    ff12:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    ff16:	1e54      	subs	r4, r2, #1
    ff18:	b2e4      	uxtb	r4, r4
    ff1a:	2a00      	cmp	r2, #0
    ff1c:	f47f af65 	bne.w	fdea <__kernel_ram_size+0x8d2>
	instance->job_guard = 0U;
    ff20:	9b08      	ldr	r3, [sp, #32]
    ff22:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    ff26:	e405      	b.n	f734 <__kernel_ram_size+0x21c>
    ff28:	f89b 701d 	ldrb.w	r7, [fp, #29]
    ff2c:	e402      	b.n	f734 <__kernel_ram_size+0x21c>
		ticks_current = cntr_cnt_get();
    ff2e:	f009 f9d3 	bl	192d8 <cntr_cnt_get>
    ff32:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    ff34:	f009 f99a 	bl	1926c <cntr_start>
    ff38:	f89b 701d 	ldrb.w	r7, [fp, #29]
    ff3c:	2800      	cmp	r0, #0
    ff3e:	f47f ac00 	bne.w	f742 <__kernel_ram_size+0x22a>
			instance->ticks_current = ticks_current;
    ff42:	f8cb 4014 	str.w	r4, [fp, #20]
    ff46:	f7ff bbfc 	b.w	f742 <__kernel_ram_size+0x22a>
    ff4a:	bf00      	nop
    ff4c:	ff172b5a 	.word	0xff172b5a
    ff50:	7f172b59 	.word	0x7f172b59

0000ff54 <ticker_init>:
{
    ff54:	b4f0      	push	{r4, r5, r6, r7}
    ff56:	9f04      	ldr	r7, [sp, #16]
    ff58:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ff5c:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    ff5e:	2800      	cmp	r0, #0
    ff60:	d13e      	bne.n	ffe0 <ticker_init+0x8c>
	instance->count_node = count_node;
    ff62:	f8df c084 	ldr.w	ip, [pc, #132]	; ffe8 <ticker_init+0x94>
	while (count_node--) {
    ff66:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    ff68:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    ff6c:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    ff70:	b2ed      	uxtb	r5, r5
    ff72:	b149      	cbz	r1, ff88 <ticker_init+0x34>
    ff74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    ff78:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    ff7c:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    ff7e:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    ff82:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    ff86:	d1f9      	bne.n	ff7c <ticker_init+0x28>
	while (count_user--) {
    ff88:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    ff8a:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    ff8e:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    ff92:	b2d2      	uxtb	r2, r2
    ff94:	b17b      	cbz	r3, ffb6 <ticker_init+0x62>
    ff96:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    ff9a:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    ff9c:	4611      	mov	r1, r2
    ff9e:	f812 3908 	ldrb.w	r3, [r2], #-8
    ffa2:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    ffa6:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    ffa8:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    ffaa:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    ffae:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    ffb0:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    ffb4:	d1f1      	bne.n	ff9a <ticker_init+0x46>
	if (count_op) {
    ffb6:	b99c      	cbnz	r4, ffe0 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    ffb8:	9a07      	ldr	r2, [sp, #28]
    ffba:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    ffbe:	9a08      	ldr	r2, [sp, #32]
    ffc0:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    ffc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    ffc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    ffca:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    ffce:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    ffd0:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    ffd4:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    ffd6:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    ffda:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    ffde:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    ffe0:	2001      	movs	r0, #1
}
    ffe2:	bcf0      	pop	{r4, r5, r6, r7}
    ffe4:	4770      	bx	lr
    ffe6:	bf00      	nop
    ffe8:	200017d8 	.word	0x200017d8

0000ffec <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
    ffec:	4b04      	ldr	r3, [pc, #16]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ffee:	222c      	movs	r2, #44	; 0x2c
    fff0:	fb02 3000 	mla	r0, r2, r0, r3
    fff4:	7a00      	ldrb	r0, [r0, #8]
}
    fff6:	3800      	subs	r0, #0
    fff8:	bf18      	it	ne
    fffa:	2001      	movne	r0, #1
    fffc:	4770      	bx	lr
    fffe:	bf00      	nop
   10000:	200017d8 	.word	0x200017d8

00010004 <ticker_trigger>:
	if (instance->sched_cb) {
   10004:	4b0a      	ldr	r3, [pc, #40]	; (10030 <ticker_trigger+0x2c>)
   10006:	222c      	movs	r2, #44	; 0x2c
   10008:	fb02 3200 	mla	r2, r2, r0, r3
{
   1000c:	b410      	push	{r4}
	if (instance->sched_cb) {
   1000e:	6a54      	ldr	r4, [r2, #36]	; 0x24
   10010:	b15c      	cbz	r4, 1002a <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   10012:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   10016:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1001a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   1001e:	46a4      	mov	ip, r4
   10020:	2201      	movs	r2, #1
}
   10022:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   10024:	2103      	movs	r1, #3
   10026:	2002      	movs	r0, #2
   10028:	4760      	bx	ip
}
   1002a:	bc10      	pop	{r4}
   1002c:	4770      	bx	lr
   1002e:	bf00      	nop
   10030:	200017d8 	.word	0x200017d8

00010034 <ticker_start_ext>:
{
   10034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   10038:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 100dc <ticker_start_ext+0xa8>
{
   1003c:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
   10040:	272c      	movs	r7, #44	; 0x2c
   10042:	fb07 8700 	mla	r7, r7, r0, r8
{
   10046:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10048:	687d      	ldr	r5, [r7, #4]
   1004a:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   1004e:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
   10052:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
   10056:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   1005a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   1005e:	1c75      	adds	r5, r6, #1
{
   10060:	4608      	mov	r0, r1
	last = user->last + 1;
   10062:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
   10064:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
   10068:	45a9      	cmp	r9, r5
   1006a:	bf98      	it	ls
   1006c:	2500      	movls	r5, #0
	if (last == user->first) {
   1006e:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10070:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
   10074:	d02f      	beq.n	100d6 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   10076:	f8dc 1004 	ldr.w	r1, [ip, #4]
   1007a:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   1007e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   10082:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   10086:	f04f 0904 	mov.w	r9, #4
   1008a:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   1008e:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10090:	9b08      	ldr	r3, [sp, #32]
   10092:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10094:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10096:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1009a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   1009c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1009e:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   100a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100a2:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   100a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   100a6:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   100a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   100aa:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   100ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   100ae:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   100b0:	2102      	movs	r1, #2
	user_op->op_context = op_context;
   100b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
   100b4:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
   100b6:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
   100ba:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   100bc:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
   100be:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   100c2:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   100c6:	4798      	blx	r3
   100c8:	4643      	mov	r3, r8
   100ca:	4649      	mov	r1, r9
   100cc:	2200      	movs	r2, #0
   100ce:	47a8      	blx	r5
	return user_op->status;
   100d0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   100d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   100d6:	2001      	movs	r0, #1
}
   100d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   100dc:	200017d8 	.word	0x200017d8

000100e0 <ticker_start>:
{
   100e0:	b530      	push	{r4, r5, lr}
   100e2:	b08b      	sub	sp, #44	; 0x2c
   100e4:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   100e8:	9500      	str	r5, [sp, #0]
{
   100ea:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   100ec:	9401      	str	r4, [sp, #4]
   100ee:	9502      	str	r5, [sp, #8]
{
   100f0:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
   100f4:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   100f6:	9403      	str	r4, [sp, #12]
   100f8:	9504      	str	r5, [sp, #16]
{
   100fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   100fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   100fe:	9405      	str	r4, [sp, #20]
   10100:	9506      	str	r5, [sp, #24]
{
   10102:	9c15      	ldr	r4, [sp, #84]	; 0x54
   10104:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
   10106:	9407      	str	r4, [sp, #28]
   10108:	2400      	movs	r4, #0
   1010a:	e9cd 5408 	strd	r5, r4, [sp, #32]
   1010e:	f7ff ff91 	bl	10034 <ticker_start_ext>
}
   10112:	b00b      	add	sp, #44	; 0x2c
   10114:	bd30      	pop	{r4, r5, pc}
   10116:	bf00      	nop

00010118 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
   10118:	f8df c098 	ldr.w	ip, [pc, #152]	; 101b4 <ticker_update+0x9c>
{
   1011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
   10120:	272c      	movs	r7, #44	; 0x2c
   10122:	fb07 c700 	mla	r7, r7, r0, ip
{
   10126:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   10128:	687d      	ldr	r5, [r7, #4]
{
   1012a:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   1012e:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
   10132:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   10134:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   10138:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
   1013c:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   1013e:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   10142:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   10146:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   1014a:	1c75      	adds	r5, r6, #1
   1014c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1014e:	45aa      	cmp	sl, r5
   10150:	bf98      	it	ls
   10152:	2500      	movls	r5, #0
	if (last == user->first) {
   10154:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
   10156:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
   1015a:	d028      	beq.n	101ae <ticker_update+0x96>
	user_op = &user->user_op[user->last];
   1015c:	f8d1 c004 	ldr.w	ip, [r1, #4]
   10160:	eb06 0446 	add.w	r4, r6, r6, lsl #1
   10164:	eb06 0684 	add.w	r6, r6, r4, lsl #2
   10168:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   1016c:	f04f 0905 	mov.w	r9, #5
   10170:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10174:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10176:	9b08      	ldr	r3, [sp, #32]
   10178:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   1017a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1017c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   1017e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10180:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   10182:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10184:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10186:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10188:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
   1018a:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
   1018c:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
   10190:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
   10192:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
   10196:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
   10198:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1019a:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   1019e:	4798      	blx	r3
   101a0:	4653      	mov	r3, sl
   101a2:	2200      	movs	r2, #0
   101a4:	2104      	movs	r1, #4
   101a6:	47a8      	blx	r5
	return user_op->status;
   101a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   101aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
   101ae:	2001      	movs	r0, #1
}
   101b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101b4:	200017d8 	.word	0x200017d8

000101b8 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
   101b8:	f8df c084 	ldr.w	ip, [pc, #132]	; 10240 <ticker_stop+0x88>
{
   101bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
   101c0:	272c      	movs	r7, #44	; 0x2c
   101c2:	fb07 c700 	mla	r7, r7, r0, ip
{
   101c6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   101c8:	687d      	ldr	r5, [r7, #4]
{
   101ca:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   101cc:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
   101d0:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
   101d4:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
   101d6:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   101da:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   101de:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
   101e2:	1c75      	adds	r5, r6, #1
   101e4:	b2ed      	uxtb	r5, r5
		last = 0U;
   101e6:	45a8      	cmp	r8, r5
   101e8:	bf98      	it	ls
   101ea:	2500      	movls	r5, #0
	if (last == user->first) {
   101ec:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
   101ee:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
   101f2:	d021      	beq.n	10238 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
   101f4:	f8d1 c004 	ldr.w	ip, [r1, #4]
   101f8:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
   101fc:	eb06 068e 	add.w	r6, r6, lr, lsl #2
   10200:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10204:	f04f 0e06 	mov.w	lr, #6
   10208:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
   1020c:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
   10210:	2602      	movs	r6, #2
	user_op->op_context = op_context;
   10212:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
   10214:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
   10218:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1021c:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
   10220:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   10222:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
   10226:	4798      	blx	r3
   10228:	4623      	mov	r3, r4
   1022a:	2200      	movs	r2, #0
   1022c:	2104      	movs	r1, #4
   1022e:	47a8      	blx	r5
	return user_op->status;
   10230:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
   10234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10238:	2001      	movs	r0, #1
}
   1023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1023e:	bf00      	nop
   10240:	200017d8 	.word	0x200017d8

00010244 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   10244:	f009 b848 	b.w	192d8 <cntr_cnt_get>

00010248 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10248:	1a40      	subs	r0, r0, r1
}
   1024a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1024e:	4770      	bx	lr

00010250 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   10250:	2801      	cmp	r0, #1
   10252:	d813      	bhi.n	1027c <ll_addr_get+0x2c>
{
   10254:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
   10256:	b948      	cbnz	r0, 1026c <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   10258:	b131      	cbz	r1, 10268 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   1025a:	4608      	mov	r0, r1
   1025c:	2206      	movs	r2, #6
   1025e:	4909      	ldr	r1, [pc, #36]	; (10284 <ll_addr_get+0x34>)
   10260:	f00e fdc7 	bl	1edf2 <memcpy>
	}

	return pub_addr;
   10264:	4807      	ldr	r0, [pc, #28]	; (10284 <ll_addr_get+0x34>)
}
   10266:	bd08      	pop	{r3, pc}
	return pub_addr;
   10268:	4806      	ldr	r0, [pc, #24]	; (10284 <ll_addr_get+0x34>)
}
   1026a:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   1026c:	b141      	cbz	r1, 10280 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   1026e:	4608      	mov	r0, r1
   10270:	2206      	movs	r2, #6
   10272:	4905      	ldr	r1, [pc, #20]	; (10288 <ll_addr_get+0x38>)
   10274:	f00e fdbd 	bl	1edf2 <memcpy>
		return rnd_addr;
   10278:	4803      	ldr	r0, [pc, #12]	; (10288 <ll_addr_get+0x38>)
}
   1027a:	bd08      	pop	{r3, pc}
		return NULL;
   1027c:	2000      	movs	r0, #0
}
   1027e:	4770      	bx	lr
		return rnd_addr;
   10280:	4801      	ldr	r0, [pc, #4]	; (10288 <ll_addr_get+0x38>)
}
   10282:	bd08      	pop	{r3, pc}
   10284:	20001804 	.word	0x20001804
   10288:	2000180c 	.word	0x2000180c

0001028c <ll_addr_set>:

uint32_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   1028c:	b570      	push	{r4, r5, r6, lr}
   1028e:	4606      	mov	r6, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
		uint32_t status = ull_adv_is_enabled(0);
   10290:	2000      	movs	r0, #0
{
   10292:	460d      	mov	r5, r1
		uint32_t status = ull_adv_is_enabled(0);
   10294:	f003 f838 	bl	13308 <ull_adv_is_enabled>
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if ((status & (ULL_ADV_ENABLED_BITMASK_ENABLED |
			       ULL_ADV_ENABLED_BITMASK_EXTENDED)) ==
		     ULL_ADV_ENABLED_BITMASK_ENABLED) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (status) {
   10298:	b968      	cbnz	r0, 102b6 <ll_addr_set+0x2a>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   1029a:	4604      	mov	r4, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   1029c:	4629      	mov	r1, r5
   1029e:	2206      	movs	r2, #6
	if (addr_type) {
   102a0:	b926      	cbnz	r6, 102ac <ll_addr_set+0x20>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   102a2:	4806      	ldr	r0, [pc, #24]	; (102bc <ll_addr_set+0x30>)
   102a4:	f00e fda5 	bl	1edf2 <memcpy>
	}

	return 0;
}
   102a8:	4620      	mov	r0, r4
   102aa:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   102ac:	4804      	ldr	r0, [pc, #16]	; (102c0 <ll_addr_set+0x34>)
   102ae:	f00e fda0 	bl	1edf2 <memcpy>
}
   102b2:	4620      	mov	r0, r4
   102b4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   102b6:	240c      	movs	r4, #12
}
   102b8:	4620      	mov	r0, r4
   102ba:	bd70      	pop	{r4, r5, r6, pc}
   102bc:	20001804 	.word	0x20001804
   102c0:	2000180c 	.word	0x2000180c

000102c4 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   102c4:	2802      	cmp	r0, #2
   102c6:	d001      	beq.n	102cc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   102c8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   102ca:	4770      	bx	lr
{
   102cc:	b538      	push	{r3, r4, r5, lr}
   102ce:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   102d0:	4608      	mov	r0, r1
   102d2:	461d      	mov	r5, r3
   102d4:	f003 fcaa 	bl	13c2c <ll_connected_get>
			if (!conn) {
   102d8:	b110      	cbz	r0, 102e0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   102da:	2000      	movs	r0, #0
   102dc:	7028      	strb	r0, [r5, #0]
}
   102de:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   102e0:	4620      	mov	r0, r4
}
   102e2:	bd38      	pop	{r3, r4, r5, pc}

000102e4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   102e4:	2300      	movs	r3, #0
   102e6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   102e8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   102ea:	4770      	bx	lr

000102ec <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(struct device *unused)
{
   102ec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   102ee:	4802      	ldr	r0, [pc, #8]	; (102f8 <hci_driver_init+0xc>)
   102f0:	f7f8 fa58 	bl	87a4 <bt_hci_driver_register>

	return 0;
}
   102f4:	2000      	movs	r0, #0
   102f6:	bd08      	pop	{r3, pc}
   102f8:	00022768 	.word	0x00022768

000102fc <recv_thread>:
{
   102fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   102fe:	4d37      	ldr	r5, [pc, #220]	; (103dc <recv_thread+0xe0>)
		LL_ASSERT(0);
   10300:	4f37      	ldr	r7, [pc, #220]	; (103e0 <recv_thread+0xe4>)
   10302:	4e38      	ldr	r6, [pc, #224]	; (103e4 <recv_thread+0xe8>)
{
   10304:	b083      	sub	sp, #12
   10306:	e015      	b.n	10334 <recv_thread+0x38>
	switch (class) {
   10308:	2b00      	cmp	r3, #0
   1030a:	d13c      	bne.n	10386 <recv_thread+0x8a>
		LL_ASSERT(0);
   1030c:	4836      	ldr	r0, [pc, #216]	; (103e8 <recv_thread+0xec>)
   1030e:	23cf      	movs	r3, #207	; 0xcf
   10310:	463a      	mov	r2, r7
   10312:	4631      	mov	r1, r6
   10314:	f00c fa55 	bl	1c7c2 <printk>
   10318:	4040      	eors	r0, r0
   1031a:	f380 8811 	msr	BASEPRI, r0
   1031e:	f04f 0003 	mov.w	r0, #3
   10322:	df02      	svc	2
	node_rx->hdr.next = NULL;
   10324:	9b01      	ldr	r3, [sp, #4]
   10326:	2200      	movs	r2, #0
   10328:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1032a:	a801      	add	r0, sp, #4
   1032c:	f002 f946 	bl	125bc <ll_rx_mem_release>
	z_impl_k_yield();
   10330:	f00b fc94 	bl	1bc5c <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   10334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1033c:	4628      	mov	r0, r5
   1033e:	f00b f97d 	bl	1b63c <z_impl_k_queue_get>
		if (node_rx && !buf) {
   10342:	2800      	cmp	r0, #0
   10344:	d0f4      	beq.n	10330 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   10346:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   10348:	9001      	str	r0, [sp, #4]
	switch (class) {
   1034a:	2b04      	cmp	r3, #4
   1034c:	d9dc      	bls.n	10308 <recv_thread+0xc>
   1034e:	2b05      	cmp	r3, #5
   10350:	d1dc      	bne.n	1030c <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   10352:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10356:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1035a:	2003      	movs	r0, #3
   1035c:	f7f8 ffc4 	bl	92e8 <bt_buf_get_rx>
   10360:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   10362:	4601      	mov	r1, r0
   10364:	9801      	ldr	r0, [sp, #4]
   10366:	f000 ff2d 	bl	111c4 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   1036a:	9b01      	ldr	r3, [sp, #4]
   1036c:	2200      	movs	r2, #0
   1036e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   10370:	a801      	add	r0, sp, #4
   10372:	f002 f923 	bl	125bc <ll_rx_mem_release>
		if (buf) {
   10376:	2c00      	cmp	r4, #0
   10378:	d0da      	beq.n	10330 <recv_thread+0x34>
			if (buf->len) {
   1037a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   1037c:	4620      	mov	r0, r4
			if (buf->len) {
   1037e:	b1db      	cbz	r3, 103b8 <recv_thread+0xbc>
				bt_recv(buf);
   10380:	f7f8 f94e 	bl	8620 <bt_recv>
   10384:	e7d4      	b.n	10330 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   10386:	2b02      	cmp	r3, #2
   10388:	d019      	beq.n	103be <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1038a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1038e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10392:	2001      	movs	r0, #1
   10394:	f7f8 ffa8 	bl	92e8 <bt_buf_get_rx>
   10398:	4604      	mov	r4, r0
		if (buf) {
   1039a:	9801      	ldr	r0, [sp, #4]
   1039c:	b1cc      	cbz	r4, 103d2 <recv_thread+0xd6>
			hci_evt_encode(node_rx, buf);
   1039e:	4621      	mov	r1, r4
   103a0:	f000 ff4a 	bl	11238 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   103a4:	9b01      	ldr	r3, [sp, #4]
   103a6:	2200      	movs	r2, #0
   103a8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   103aa:	a801      	add	r0, sp, #4
   103ac:	f002 f906 	bl	125bc <ll_rx_mem_release>
			if (buf->len) {
   103b0:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   103b2:	4620      	mov	r0, r4
			if (buf->len) {
   103b4:	2b00      	cmp	r3, #0
   103b6:	d1e3      	bne.n	10380 <recv_thread+0x84>
				net_buf_unref(buf);
   103b8:	f009 fe9a 	bl	1a0f0 <net_buf_unref>
   103bc:	e7b8      	b.n	10330 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   103be:	2200      	movs	r2, #0
   103c0:	2300      	movs	r3, #0
   103c2:	2101      	movs	r1, #1
   103c4:	2000      	movs	r0, #0
   103c6:	f7f8 ffc5 	bl	9354 <bt_buf_get_evt>
   103ca:	4604      	mov	r4, r0
		if (buf) {
   103cc:	9801      	ldr	r0, [sp, #4]
   103ce:	2c00      	cmp	r4, #0
   103d0:	d1e5      	bne.n	1039e <recv_thread+0xa2>
	node_rx->hdr.next = NULL;
   103d2:	6004      	str	r4, [r0, #0]
	ll_rx_mem_release((void **)&node_rx);
   103d4:	a801      	add	r0, sp, #4
   103d6:	f002 f8f1 	bl	125bc <ll_rx_mem_release>
		if (buf) {
   103da:	e7a9      	b.n	10330 <recv_thread+0x34>
   103dc:	200009b8 	.word	0x200009b8
   103e0:	000226a8 	.word	0x000226a8
   103e4:	000226e8 	.word	0x000226e8
   103e8:	00022678 	.word	0x00022678

000103ec <prio_recv_thread>:
{
   103ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   103f0:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 104a8 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
   103f4:	4f2b      	ldr	r7, [pc, #172]	; (104a4 <prio_recv_thread+0xb8>)
{
   103f6:	b082      	sub	sp, #8
   103f8:	e00c      	b.n	10414 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   103fa:	f7f8 ffab 	bl	9354 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   103fe:	4622      	mov	r2, r4
   10400:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   10404:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   10406:	f001 f98f 	bl	11728 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   1040a:	4620      	mov	r0, r4
   1040c:	f7f8 f9ac 	bl	8768 <bt_recv_prio>
	z_impl_k_yield();
   10410:	f00b fc24 	bl	1bc5c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   10414:	f10d 0102 	add.w	r1, sp, #2
   10418:	a801      	add	r0, sp, #4
   1041a:	f001 ff27 	bl	1226c <ll_rx_get>
   1041e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   10420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10428:	2100      	movs	r1, #0
   1042a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   1042c:	2c00      	cmp	r4, #0
   1042e:	d1e4      	bne.n	103fa <prio_recv_thread+0xe>
		if (node_rx) {
   10430:	9b01      	ldr	r3, [sp, #4]
   10432:	b193      	cbz	r3, 1045a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   10434:	f001 fff4 	bl	12420 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   10438:	9e01      	ldr	r6, [sp, #4]
   1043a:	4630      	mov	r0, r6
   1043c:	f001 f98c 	bl	11758 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   10440:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   10442:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   10444:	796b      	ldrb	r3, [r5, #5]
   10446:	2b03      	cmp	r3, #3
   10448:	d102      	bne.n	10450 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   1044a:	792b      	ldrb	r3, [r5, #4]
   1044c:	2b0b      	cmp	r3, #11
   1044e:	d00c      	beq.n	1046a <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   10450:	4629      	mov	r1, r5
   10452:	4638      	mov	r0, r7
   10454:	f010 fdfa 	bl	2104c <k_queue_append>
			continue;
   10458:	e7dc      	b.n	10414 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   1045a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1045e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10462:	4640      	mov	r0, r8
   10464:	f00b fc94 	bl	1bd90 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   10468:	e7d4      	b.n	10414 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1046a:	4621      	mov	r1, r4
   1046c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   10470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   10474:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   10476:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   10478:	f7f8 ff6c 	bl	9354 <bt_buf_get_evt>
   1047c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1047e:	4622      	mov	r2, r4
   10480:	f105 001c 	add.w	r0, r5, #28
   10484:	4631      	mov	r1, r6
   10486:	f000 fe85 	bl	11194 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   1048a:	4630      	mov	r0, r6
   1048c:	f000 fe92 	bl	111b4 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   10490:	4620      	mov	r0, r4
			if (buf) {
   10492:	b124      	cbz	r4, 1049e <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   10494:	f7f8 f968 	bl	8768 <bt_recv_prio>
					net_buf_unref(buf);
   10498:	4620      	mov	r0, r4
   1049a:	f009 fe29 	bl	1a0f0 <net_buf_unref>
   1049e:	9d01      	ldr	r5, [sp, #4]
   104a0:	e7d6      	b.n	10450 <prio_recv_thread+0x64>
   104a2:	bf00      	nop
   104a4:	200009b8 	.word	0x200009b8
   104a8:	20000988 	.word	0x20000988

000104ac <hci_driver_send>:
{
   104ac:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   104ae:	8983      	ldrh	r3, [r0, #12]
{
   104b0:	b083      	sub	sp, #12
	if (!buf->len) {
   104b2:	2b00      	cmp	r3, #0
   104b4:	d03a      	beq.n	1052c <hci_driver_send+0x80>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
   104b6:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   104b8:	4604      	mov	r4, r0
   104ba:	b31b      	cbz	r3, 10504 <hci_driver_send+0x58>
   104bc:	2b02      	cmp	r3, #2
   104be:	d00f      	beq.n	104e0 <hci_driver_send+0x34>
   104c0:	4921      	ldr	r1, [pc, #132]	; (10548 <hci_driver_send+0x9c>)
   104c2:	4a22      	ldr	r2, [pc, #136]	; (1054c <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   104c4:	4822      	ldr	r0, [pc, #136]	; (10550 <hci_driver_send+0xa4>)
   104c6:	1a52      	subs	r2, r2, r1
   104c8:	08d2      	lsrs	r2, r2, #3
   104ca:	0192      	lsls	r2, r2, #6
   104cc:	4619      	mov	r1, r3
   104ce:	f042 0201 	orr.w	r2, r2, #1
   104d2:	f00c fcd9 	bl	1ce88 <log_1>
		return -EINVAL;
   104d6:	f06f 0515 	mvn.w	r5, #21
}
   104da:	4628      	mov	r0, r5
   104dc:	b003      	add	sp, #12
   104de:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   104e0:	a901      	add	r1, sp, #4
   104e2:	f000 fdbf 	bl	11064 <hci_acl_handle>
	if (evt) {
   104e6:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   104e8:	4605      	mov	r5, r0
	if (evt) {
   104ea:	b113      	cbz	r3, 104f2 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   104ec:	4618      	mov	r0, r3
   104ee:	f7f8 f93b 	bl	8768 <bt_recv_prio>
	if (!err) {
   104f2:	2d00      	cmp	r5, #0
   104f4:	d1f1      	bne.n	104da <hci_driver_send+0x2e>
		net_buf_unref(buf);
   104f6:	4620      	mov	r0, r4
   104f8:	f009 fdfa 	bl	1a0f0 <net_buf_unref>
   104fc:	2500      	movs	r5, #0
}
   104fe:	4628      	mov	r0, r5
   10500:	b003      	add	sp, #12
   10502:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   10504:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   10506:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   10508:	f000 f9a4 	bl	10854 <hci_cmd_handle>
	if (evt) {
   1050c:	2800      	cmp	r0, #0
   1050e:	d0f2      	beq.n	104f6 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   10510:	f7f8 f92a 	bl	8768 <bt_recv_prio>
		if (node_rx) {
   10514:	9d01      	ldr	r5, [sp, #4]
   10516:	2d00      	cmp	r5, #0
   10518:	d0ed      	beq.n	104f6 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   1051a:	4628      	mov	r0, r5
   1051c:	f001 f91c 	bl	11758 <hci_get_class>
   10520:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   10522:	9901      	ldr	r1, [sp, #4]
   10524:	480b      	ldr	r0, [pc, #44]	; (10554 <hci_driver_send+0xa8>)
   10526:	f010 fd91 	bl	2104c <k_queue_append>
	if (!err) {
   1052a:	e7e4      	b.n	104f6 <hci_driver_send+0x4a>
   1052c:	4b06      	ldr	r3, [pc, #24]	; (10548 <hci_driver_send+0x9c>)
   1052e:	4907      	ldr	r1, [pc, #28]	; (1054c <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   10530:	4809      	ldr	r0, [pc, #36]	; (10558 <hci_driver_send+0xac>)
   10532:	1ac9      	subs	r1, r1, r3
   10534:	08c9      	lsrs	r1, r1, #3
   10536:	0189      	lsls	r1, r1, #6
   10538:	f041 0101 	orr.w	r1, r1, #1
   1053c:	f00c fc97 	bl	1ce6e <log_0>
		return -EINVAL;
   10540:	f06f 0515 	mvn.w	r5, #21
   10544:	e7c9      	b.n	104da <hci_driver_send+0x2e>
   10546:	bf00      	nop
   10548:	00021aac 	.word	0x00021aac
   1054c:	00021af4 	.word	0x00021af4
   10550:	00022700 	.word	0x00022700
   10554:	200009b8 	.word	0x200009b8
   10558:	000226ec 	.word	0x000226ec

0001055c <hci_driver_open>:
{
   1055c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   1055e:	4822      	ldr	r0, [pc, #136]	; (105e8 <hci_driver_open+0x8c>)
{
   10560:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   10562:	f001 fbbf 	bl	11ce4 <ll_init>
	if (err) {
   10566:	4604      	mov	r4, r0
   10568:	2800      	cmp	r0, #0
   1056a:	d12e      	bne.n	105ca <hci_driver_open+0x6e>
	hci_init(NULL);
   1056c:	f001 f90a 	bl	11784 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   10570:	2600      	movs	r6, #0
   10572:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10574:	f06f 0309 	mvn.w	r3, #9
   10578:	9303      	str	r3, [sp, #12]
   1057a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1057e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   10582:	4b1a      	ldr	r3, [pc, #104]	; (105ec <hci_driver_open+0x90>)
   10584:	491a      	ldr	r1, [pc, #104]	; (105f0 <hci_driver_open+0x94>)
   10586:	9404      	str	r4, [sp, #16]
   10588:	9400      	str	r4, [sp, #0]
   1058a:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1058e:	4819      	ldr	r0, [pc, #100]	; (105f4 <hci_driver_open+0x98>)
   10590:	f00b fc70 	bl	1be74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   10594:	4918      	ldr	r1, [pc, #96]	; (105f8 <hci_driver_open+0x9c>)
   10596:	4817      	ldr	r0, [pc, #92]	; (105f4 <hci_driver_open+0x98>)
   10598:	f010 fee3 	bl	21362 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1059c:	f06f 0307 	mvn.w	r3, #7
   105a0:	9303      	str	r3, [sp, #12]
   105a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   105a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   105aa:	4b14      	ldr	r3, [pc, #80]	; (105fc <hci_driver_open+0xa0>)
   105ac:	4914      	ldr	r1, [pc, #80]	; (10600 <hci_driver_open+0xa4>)
   105ae:	9404      	str	r4, [sp, #16]
   105b0:	9400      	str	r4, [sp, #0]
   105b2:	f640 0298 	movw	r2, #2200	; 0x898
   105b6:	4813      	ldr	r0, [pc, #76]	; (10604 <hci_driver_open+0xa8>)
   105b8:	f00b fc5c 	bl	1be74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   105bc:	4912      	ldr	r1, [pc, #72]	; (10608 <hci_driver_open+0xac>)
   105be:	4811      	ldr	r0, [pc, #68]	; (10604 <hci_driver_open+0xa8>)
   105c0:	f010 fecf 	bl	21362 <z_impl_k_thread_name_set>
}
   105c4:	4620      	mov	r0, r4
   105c6:	b008      	add	sp, #32
   105c8:	bdd0      	pop	{r4, r6, r7, pc}
   105ca:	4b10      	ldr	r3, [pc, #64]	; (1060c <hci_driver_open+0xb0>)
   105cc:	4a10      	ldr	r2, [pc, #64]	; (10610 <hci_driver_open+0xb4>)
		BT_ERR("LL initialization failed: %d", err);
   105ce:	4811      	ldr	r0, [pc, #68]	; (10614 <hci_driver_open+0xb8>)
   105d0:	1ad2      	subs	r2, r2, r3
   105d2:	08d2      	lsrs	r2, r2, #3
   105d4:	0192      	lsls	r2, r2, #6
   105d6:	f042 0201 	orr.w	r2, r2, #1
   105da:	4621      	mov	r1, r4
   105dc:	f00c fc54 	bl	1ce88 <log_1>
}
   105e0:	4620      	mov	r0, r4
   105e2:	b008      	add	sp, #32
   105e4:	bdd0      	pop	{r4, r6, r7, pc}
   105e6:	bf00      	nop
   105e8:	20000988 	.word	0x20000988
   105ec:	000103ed 	.word	0x000103ed
   105f0:	20003c40 	.word	0x20003c40
   105f4:	20001068 	.word	0x20001068
   105f8:	00022734 	.word	0x00022734
   105fc:	000102fd 	.word	0x000102fd
   10600:	20003e00 	.word	0x20003e00
   10604:	200010e8 	.word	0x200010e8
   10608:	00022740 	.word	0x00022740
   1060c:	00021aac 	.word	0x00021aac
   10610:	00021af4 	.word	0x00021af4
   10614:	00022714 	.word	0x00022714

00010618 <meta_evt>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
   10618:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1061a:	f100 0408 	add.w	r4, r0, #8
{
   1061e:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   10620:	4620      	mov	r0, r4
   10622:	2102      	movs	r1, #2
{
   10624:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   10626:	f010 fa9f 	bl	20b68 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
   1062a:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
   1062c:	223e      	movs	r2, #62	; 0x3e
   1062e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   10630:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
   10632:	2101      	movs	r1, #1
   10634:	4620      	mov	r0, r4
   10636:	f010 fa97 	bl	20b68 <net_buf_simple_add>
	me->subevent = subevt;
   1063a:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
   1063c:	4629      	mov	r1, r5
   1063e:	4620      	mov	r0, r4
}
   10640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
   10644:	f010 ba90 	b.w	20b68 <net_buf_simple_add>

00010648 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
   10648:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1064a:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
   1064e:	4604      	mov	r4, r0
   10650:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   10652:	4628      	mov	r0, r5
   10654:	2102      	movs	r1, #2
   10656:	f010 fa87 	bl	20b68 <net_buf_simple_add>
   1065a:	4603      	mov	r3, r0
	hdr->evt = evt;
   1065c:	2208      	movs	r2, #8
	hdr->len = len;
   1065e:	2104      	movs	r1, #4
	hdr->evt = evt;
   10660:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10662:	7059      	strb	r1, [r3, #1]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
		return;
	}

	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));
   10664:	4628      	mov	r0, r5
   10666:	f010 fa7f 	bl	20b68 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
   1066a:	fab4 f384 	clz	r3, r4
   1066e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   10670:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
   10672:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
   10674:	f8a0 6001 	strh.w	r6, [r0, #1]
}
   10678:	bd70      	pop	{r4, r5, r6, pc}
   1067a:	bf00      	nop

0001067c <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   1067c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10680:	4c17      	ldr	r4, [pc, #92]	; (106e0 <le_remote_feat_complete+0x64>)
   10682:	6866      	ldr	r6, [r4, #4]
   10684:	f04f 0900 	mov.w	r9, #0
   10688:	464c      	mov	r4, r9
   1068a:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
   1068e:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   10690:	ea54 0205 	orrs.w	r2, r4, r5
   10694:	d009      	beq.n	106aa <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   10696:	4a13      	ldr	r2, [pc, #76]	; (106e4 <le_remote_feat_complete+0x68>)
   10698:	6812      	ldr	r2, [r2, #0]
   1069a:	4606      	mov	r6, r0
   1069c:	4688      	mov	r8, r1
   1069e:	f002 0008 	and.w	r0, r2, #8
   106a2:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   106a4:	ea50 0201 	orrs.w	r2, r0, r1
   106a8:	d101      	bne.n	106ae <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   106aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
   106ae:	4618      	mov	r0, r3
   106b0:	220b      	movs	r2, #11
   106b2:	2104      	movs	r1, #4
   106b4:	f7ff ffb0 	bl	10618 <meta_evt>
	sep->status = status;
   106b8:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   106ba:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
   106be:	b93e      	cbnz	r6, 106d0 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
   106c0:	f108 0104 	add.w	r1, r8, #4
   106c4:	3003      	adds	r0, #3
}
   106c6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
   106ca:	2208      	movs	r2, #8
   106cc:	f00e bb91 	b.w	1edf2 <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   106d0:	4649      	mov	r1, r9
   106d2:	3003      	adds	r0, #3
}
   106d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   106d8:	2208      	movs	r2, #8
   106da:	f00e bbb5 	b.w	1ee48 <memset>
   106de:	bf00      	nop
   106e0:	20000190 	.word	0x20000190
   106e4:	20000198 	.word	0x20000198

000106e8 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   106e8:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   106ea:	f102 0408 	add.w	r4, r2, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
   106ee:	4605      	mov	r5, r0
   106f0:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   106f2:	4620      	mov	r0, r4
   106f4:	2102      	movs	r1, #2
   106f6:	f010 fa37 	bl	20b68 <net_buf_simple_add>
   106fa:	4603      	mov	r3, r0
	hdr->evt = evt;
   106fc:	2205      	movs	r2, #5
	hdr->len = len;
   106fe:	2104      	movs	r1, #4
	hdr->evt = evt;
   10700:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   10702:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   10704:	4620      	mov	r0, r4
   10706:	f010 fa2f 	bl	20b68 <net_buf_simple_add>
	ep->status = 0x00;
   1070a:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
   1070c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
   10710:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
   10712:	782b      	ldrb	r3, [r5, #0]
   10714:	70c3      	strb	r3, [r0, #3]
}
   10716:	bd70      	pop	{r4, r5, r6, pc}

00010718 <hci_cmd_complete>:
{
   10718:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1071a:	4b06      	ldr	r3, [pc, #24]	; (10734 <hci_cmd_complete+0x1c>)
{
   1071c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1071e:	8818      	ldrh	r0, [r3, #0]
{
   10720:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10722:	f00e fe29 	bl	1f378 <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
   10726:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   10728:	6028      	str	r0, [r5, #0]
}
   1072a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
   1072e:	3008      	adds	r0, #8
   10730:	f010 ba1a 	b.w	20b68 <net_buf_simple_add>
   10734:	20002ada 	.word	0x20002ada

00010738 <hci_vendor_cmd_handle_common>:
{
   10738:	b570      	push	{r4, r5, r6, lr}
   1073a:	1e43      	subs	r3, r0, #1
   1073c:	b086      	sub	sp, #24
   1073e:	4614      	mov	r4, r2
   10740:	2b09      	cmp	r3, #9
   10742:	d806      	bhi.n	10752 <hci_vendor_cmd_handle_common+0x1a>
   10744:	e8df f003 	tbb	[pc, r3]
   10748:	05382109 	.word	0x05382109
   1074c:	53054605 	.word	0x53054605
   10750:	7667      	.short	0x7667
	return 0;
   10752:	f06f 0015 	mvn.w	r0, #21
}
   10756:	b006      	add	sp, #24
   10758:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1075a:	4620      	mov	r0, r4
   1075c:	210d      	movs	r1, #13
   1075e:	f7ff ffdb 	bl	10718 <hci_cmd_complete>
   10762:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10764:	2202      	movs	r2, #2
	rp->status = 0x00;
   10766:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10768:	2403      	movs	r4, #3
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1076a:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1076c:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1076e:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
   10770:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10772:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10774:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   10776:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   10778:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   1077a:	7298      	strb	r0, [r3, #10]
   1077c:	72d8      	strb	r0, [r3, #11]
   1077e:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   10780:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   10782:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   10784:	719a      	strb	r2, [r3, #6]
}
   10786:	b006      	add	sp, #24
   10788:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   1078a:	4620      	mov	r0, r4
   1078c:	2141      	movs	r1, #65	; 0x41
   1078e:	f7ff ffc3 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10792:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10794:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10796:	4621      	mov	r1, r4
	rp->status = 0x00;
   10798:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1079c:	2240      	movs	r2, #64	; 0x40
   1079e:	f00e fb53 	bl	1ee48 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   107a2:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   107a4:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   107a6:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   107aa:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   107ae:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   107b0:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   107b2:	70ab      	strb	r3, [r5, #2]
}
   107b4:	b006      	add	sp, #24
   107b6:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   107b8:	4620      	mov	r0, r4
   107ba:	2109      	movs	r1, #9
   107bc:	f7ff ffac 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   107c0:	2400      	movs	r4, #0
   107c2:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   107c6:	4621      	mov	r1, r4
   107c8:	2208      	movs	r2, #8
   107ca:	f00e fb3d 	bl	1ee48 <memset>
	return 0;
   107ce:	4620      	mov	r0, r4
}
   107d0:	b006      	add	sp, #24
   107d2:	bd70      	pop	{r4, r5, r6, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   107d4:	6889      	ldr	r1, [r1, #8]
   107d6:	2000      	movs	r0, #0
   107d8:	f7ff fd58 	bl	1028c <ll_addr_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   107dc:	4620      	mov	r0, r4
   107de:	2101      	movs	r1, #1
   107e0:	f7ff ff9a 	bl	10718 <hci_cmd_complete>
   107e4:	4603      	mov	r3, r0
	ccst->status = 0x00;
   107e6:	2000      	movs	r0, #0
   107e8:	7018      	strb	r0, [r3, #0]
}
   107ea:	b006      	add	sp, #24
   107ec:	bd70      	pop	{r4, r5, r6, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   107ee:	4e18      	ldr	r6, [pc, #96]	; (10850 <hci_vendor_cmd_handle_common+0x118>)
   107f0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   107f2:	ad01      	add	r5, sp, #4
   107f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   107f6:	6833      	ldr	r3, [r6, #0]
   107f8:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
   107fa:	4620      	mov	r0, r4
   107fc:	2113      	movs	r1, #19
   107fe:	f7ff ff8b 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10802:	2400      	movs	r4, #0
   10804:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   10808:	2212      	movs	r2, #18
   1080a:	a901      	add	r1, sp, #4
   1080c:	f00e faf1 	bl	1edf2 <memcpy>
	return 0;
   10810:	4620      	mov	r0, r4
}
   10812:	b006      	add	sp, #24
   10814:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   10816:	4620      	mov	r0, r4
   10818:	2118      	movs	r1, #24
   1081a:	f7ff ff7d 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   1081e:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
   10820:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   10822:	2101      	movs	r1, #1
	rp->status = 0x00;
   10824:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   10828:	f009 faec 	bl	19e04 <hci_vendor_read_static_addr>
   1082c:	7068      	strb	r0, [r5, #1]
	return 0;
   1082e:	4620      	mov	r0, r4
}
   10830:	b006      	add	sp, #24
   10832:	bd70      	pop	{r4, r5, r6, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10834:	4620      	mov	r0, r4
   10836:	2121      	movs	r1, #33	; 0x21
   10838:	f7ff ff6e 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   1083c:	4601      	mov	r1, r0
   1083e:	2400      	movs	r4, #0
   10840:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   10844:	3001      	adds	r0, #1
   10846:	f009 fb4f 	bl	19ee8 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   1084a:	4620      	mov	r0, r4
}
   1084c:	b006      	add	sp, #24
   1084e:	bd70      	pop	{r4, r5, r6, pc}
   10850:	0002277c 	.word	0x0002277c

00010854 <hci_cmd_handle>:
{
   10854:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   10856:	8983      	ldrh	r3, [r0, #12]
{
   10858:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   1085a:	2500      	movs	r5, #0
	if (cmd->len < sizeof(*chdr)) {
   1085c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1085e:	9507      	str	r5, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   10860:	f240 80ba 	bls.w	109d8 <hci_cmd_handle+0x184>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
   10864:	4604      	mov	r4, r0
   10866:	2103      	movs	r1, #3
   10868:	3008      	adds	r0, #8
   1086a:	f010 f9a4 	bl	20bb6 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1086e:	89a2      	ldrh	r2, [r4, #12]
   10870:	7883      	ldrb	r3, [r0, #2]
   10872:	429a      	cmp	r2, r3
   10874:	f0c0 80e2 	bcc.w	10a3c <hci_cmd_handle+0x1e8>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   10878:	8801      	ldrh	r1, [r0, #0]
   1087a:	4d80      	ldr	r5, [pc, #512]	; (10a7c <hci_cmd_handle+0x228>)
	switch (BT_OGF(_opcode)) {
   1087c:	f5b1 5f10 	cmp.w	r1, #9216	; 0x2400
	_opcode = sys_le16_to_cpu(chdr->opcode);
   10880:	b288      	uxth	r0, r1
   10882:	8029      	strh	r1, [r5, #0]
	ocf = BT_OCF(_opcode);
   10884:	f3c1 0309 	ubfx	r3, r1, #0, #10
	switch (BT_OGF(_opcode)) {
   10888:	ea4f 2291 	mov.w	r2, r1, lsr #10
   1088c:	d26b      	bcs.n	10966 <hci_cmd_handle+0x112>
   1088e:	2a00      	cmp	r2, #0
   10890:	d073      	beq.n	1097a <hci_cmd_handle+0x126>
   10892:	3a01      	subs	r2, #1
   10894:	2a07      	cmp	r2, #7
   10896:	d870      	bhi.n	1097a <hci_cmd_handle+0x126>
   10898:	e8df f002 	tbb	[pc, r2]
   1089c:	57746f90 	.word	0x57746f90
   108a0:	046f6f6f 	.word	0x046f6f6f
	switch (ocf) {
   108a4:	3b01      	subs	r3, #1
   108a6:	2b4d      	cmp	r3, #77	; 0x4d
   108a8:	d867      	bhi.n	1097a <hci_cmd_handle+0x126>
   108aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   108ae:	019e      	.short	0x019e
   108b0:	017e0191 	.word	0x017e0191
   108b4:	01790066 	.word	0x01790066
   108b8:	02540165 	.word	0x02540165
   108bc:	02b8024e 	.word	0x02b8024e
   108c0:	006602b3 	.word	0x006602b3
   108c4:	00660066 	.word	0x00660066
   108c8:	02a70066 	.word	0x02a70066
   108cc:	0299029d 	.word	0x0299029d
   108d0:	026a0295 	.word	0x026a0295
   108d4:	02850066 	.word	0x02850066
   108d8:	0379027c 	.word	0x0379027c
   108dc:	0066036d 	.word	0x0066036d
   108e0:	035d0365 	.word	0x035d0365
   108e4:	00660347 	.word	0x00660347
   108e8:	00660066 	.word	0x00660066
   108ec:	032f033b 	.word	0x032f033b
   108f0:	03110327 	.word	0x03110327
   108f4:	00660301 	.word	0x00660301
   108f8:	02fa0066 	.word	0x02fa0066
   108fc:	02ec02f6 	.word	0x02ec02f6
   10900:	02cf02e0 	.word	0x02cf02e0
   10904:	023c02be 	.word	0x023c02be
   10908:	020f0230 	.word	0x020f0230
   1090c:	01d801e7 	.word	0x01d801e7
   10910:	006601ab 	.word	0x006601ab
   10914:	00660066 	.word	0x00660066
   10918:	00660066 	.word	0x00660066
   1091c:	00660066 	.word	0x00660066
   10920:	00660066 	.word	0x00660066
   10924:	00660066 	.word	0x00660066
   10928:	00660066 	.word	0x00660066
   1092c:	00660066 	.word	0x00660066
   10930:	00660066 	.word	0x00660066
   10934:	00660066 	.word	0x00660066
   10938:	00660066 	.word	0x00660066
   1093c:	00660066 	.word	0x00660066
   10940:	025d0066 	.word	0x025d0066
   10944:	00660066 	.word	0x00660066
   10948:	0249      	.short	0x0249
	switch (ocf) {
   1094a:	3b01      	subs	r3, #1
   1094c:	2b08      	cmp	r3, #8
   1094e:	d814      	bhi.n	1097a <hci_cmd_handle+0x126>
   10950:	e8df f013 	tbh	[pc, r3, lsl #1]
   10954:	00a000fb 	.word	0x00a000fb
   10958:	00130084 	.word	0x00130084
   1095c:	00130013 	.word	0x00130013
   10960:	00130013 	.word	0x00130013
   10964:	0078      	.short	0x0078
	switch (BT_OGF(_opcode)) {
   10966:	2a3f      	cmp	r2, #63	; 0x3f
   10968:	d107      	bne.n	1097a <hci_cmd_handle+0x126>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   1096a:	4621      	mov	r1, r4
   1096c:	4618      	mov	r0, r3
   1096e:	aa07      	add	r2, sp, #28
   10970:	f7ff fee2 	bl	10738 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   10974:	3016      	adds	r0, #22
   10976:	d15f      	bne.n	10a38 <hci_cmd_handle+0x1e4>
   10978:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
   1097a:	2101      	movs	r1, #1
   1097c:	f00e fd0e 	bl	1f39c <bt_hci_cmd_status_create>
}
   10980:	b00d      	add	sp, #52	; 0x34
   10982:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   10984:	2b63      	cmp	r3, #99	; 0x63
   10986:	f000 835a 	beq.w	1103e <hci_cmd_handle+0x7ea>
   1098a:	d842      	bhi.n	10a12 <hci_cmd_handle+0x1be>
   1098c:	2b03      	cmp	r3, #3
   1098e:	f000 8339 	beq.w	11004 <hci_cmd_handle+0x7b0>
   10992:	2b2d      	cmp	r3, #45	; 0x2d
   10994:	d12d      	bne.n	109f2 <hci_cmd_handle+0x19e>
		read_tx_power_level(cmd, evt);
   10996:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10998:	2104      	movs	r1, #4
   1099a:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   1099c:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
   1099e:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   109a0:	f7ff feba 	bl	10718 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
   109a4:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
   109a6:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   109a8:	1cc3      	adds	r3, r0, #3
   109aa:	4632      	mov	r2, r6
   109ac:	2002      	movs	r0, #2
   109ae:	f7ff fc89 	bl	102c4 <ll_tx_pwr_lvl_get>
	rp->status = status;
   109b2:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
   109b4:	9807      	ldr	r0, [sp, #28]
   109b6:	f8a4 5001 	strh.w	r5, [r4, #1]
}
   109ba:	e7e1      	b.n	10980 <hci_cmd_handle+0x12c>
	switch (ocf) {
   109bc:	2b06      	cmp	r3, #6
   109be:	f000 8303 	beq.w	10fc8 <hci_cmd_handle+0x774>
   109c2:	2b1d      	cmp	r3, #29
   109c4:	d1d9      	bne.n	1097a <hci_cmd_handle+0x126>
	handle = sys_le16_to_cpu(cmd->handle);
   109c6:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
   109c8:	8818      	ldrh	r0, [r3, #0]
   109ca:	f003 fa95 	bl	13ef8 <ll_version_ind_send>
   109ce:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   109d0:	8828      	ldrh	r0, [r5, #0]
   109d2:	f00e fce3 	bl	1f39c <bt_hci_cmd_status_create>
}
   109d6:	e7d3      	b.n	10980 <hci_cmd_handle+0x12c>
   109d8:	4929      	ldr	r1, [pc, #164]	; (10a80 <hci_cmd_handle+0x22c>)
   109da:	4b2a      	ldr	r3, [pc, #168]	; (10a84 <hci_cmd_handle+0x230>)
		BT_ERR("No HCI Command header");
   109dc:	482a      	ldr	r0, [pc, #168]	; (10a88 <hci_cmd_handle+0x234>)
   109de:	1ac9      	subs	r1, r1, r3
   109e0:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   109e2:	0189      	lsls	r1, r1, #6
   109e4:	f041 0101 	orr.w	r1, r1, #1
   109e8:	f00c fa41 	bl	1ce6e <log_0>
		return NULL;
   109ec:	4628      	mov	r0, r5
}
   109ee:	b00d      	add	sp, #52	; 0x34
   109f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   109f2:	2b01      	cmp	r3, #1
   109f4:	d1c1      	bne.n	1097a <hci_cmd_handle+0x126>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   109f6:	68a1      	ldr	r1, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
   109f8:	4a24      	ldr	r2, [pc, #144]	; (10a8c <hci_cmd_handle+0x238>)
   109fa:	6808      	ldr	r0, [r1, #0]
   109fc:	684c      	ldr	r4, [r1, #4]
   109fe:	6010      	str	r0, [r2, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10a00:	4619      	mov	r1, r3
   10a02:	a807      	add	r0, sp, #28
	event_mask = sys_get_le64(cmd->events);
   10a04:	6054      	str	r4, [r2, #4]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10a06:	f7ff fe87 	bl	10718 <hci_cmd_complete>
	ccst->status = 0x00;
   10a0a:	2300      	movs	r3, #0
   10a0c:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   10a0e:	9807      	ldr	r0, [sp, #28]
   10a10:	e7b6      	b.n	10980 <hci_cmd_handle+0x12c>
	switch (ocf) {
   10a12:	2b7b      	cmp	r3, #123	; 0x7b
   10a14:	f000 82e2 	beq.w	10fdc <hci_cmd_handle+0x788>
   10a18:	2b7c      	cmp	r3, #124	; 0x7c
   10a1a:	d1ae      	bne.n	1097a <hci_cmd_handle+0x126>
		write_auth_payload_timeout(cmd, evt);
   10a1c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10a1e:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   10a20:	8859      	ldrh	r1, [r3, #2]
   10a22:	4628      	mov	r0, r5
   10a24:	f003 fb86 	bl	14134 <ll_apto_set>
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10a28:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a2a:	2103      	movs	r1, #3
   10a2c:	a807      	add	r0, sp, #28
   10a2e:	f7ff fe73 	bl	10718 <hci_cmd_complete>
	rp->status = status;
   10a32:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   10a34:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
   10a38:	9807      	ldr	r0, [sp, #28]
   10a3a:	e7a1      	b.n	10980 <hci_cmd_handle+0x12c>
   10a3c:	4910      	ldr	r1, [pc, #64]	; (10a80 <hci_cmd_handle+0x22c>)
   10a3e:	4b11      	ldr	r3, [pc, #68]	; (10a84 <hci_cmd_handle+0x230>)
		BT_ERR("Invalid HCI CMD packet length");
   10a40:	4813      	ldr	r0, [pc, #76]	; (10a90 <hci_cmd_handle+0x23c>)
   10a42:	e7cc      	b.n	109de <hci_cmd_handle+0x18a>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a44:	2107      	movs	r1, #7
   10a46:	a807      	add	r0, sp, #28
   10a48:	f7ff fe66 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10a4c:	4601      	mov	r1, r0
   10a4e:	2000      	movs	r0, #0
   10a50:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   10a54:	f7ff fbfc 	bl	10250 <ll_addr_get>
	if (err == -EINVAL) {
   10a58:	9807      	ldr	r0, [sp, #28]
   10a5a:	e791      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a5c:	2109      	movs	r1, #9
   10a5e:	a807      	add	r0, sp, #28
   10a60:	f7ff fe5a 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10a64:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a66:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10a68:	2208      	movs	r2, #8
	rp->status = 0x00;
   10a6a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10a6e:	f00e f9eb 	bl	1ee48 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   10a72:	2360      	movs	r3, #96	; 0x60
   10a74:	9807      	ldr	r0, [sp, #28]
   10a76:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   10a78:	e782      	b.n	10980 <hci_cmd_handle+0x12c>
   10a7a:	bf00      	nop
   10a7c:	20002ada 	.word	0x20002ada
   10a80:	00021aec 	.word	0x00021aec
   10a84:	00021aac 	.word	0x00021aac
   10a88:	00022790 	.word	0x00022790
   10a8c:	20000190 	.word	0x20000190
   10a90:	000227a8 	.word	0x000227a8
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a94:	2141      	movs	r1, #65	; 0x41
   10a96:	a807      	add	r0, sp, #28
   10a98:	f7ff fe3e 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10a9c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10a9e:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10aa0:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   10aa2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   10aa6:	f00e f9cf 	bl	1ee48 <memset>
	rp->commands[14] |= BIT(3) | BIT(5);
   10aaa:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[0] |= BIT(5);
   10aac:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   10aae:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
   10ab0:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   10ab2:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
   10ab4:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10ab6:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
   10ab8:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   10abc:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   10ac0:	73e3      	strb	r3, [r4, #15]
	rp->commands[27] |= BIT(0) | BIT(1);
   10ac2:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[0] |= BIT(5);
   10ac4:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
   10ac8:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   10acc:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[15] |= BIT(1);
   10ad0:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[22] |= BIT(2);
   10ad4:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10ad8:	f062 0208 	orn	r2, r2, #8
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   10adc:	f063 0308 	orn	r3, r3, #8
	rp->commands[0] |= BIT(5);
   10ae0:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
   10ae2:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
   10ae4:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   10ae6:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
   10aea:	72e5      	strb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
   10aec:	7420      	strb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
   10aee:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   10af2:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[22] |= BIT(2);
   10af6:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   10af8:	76a2      	strb	r2, [r4, #26]
	rp->commands[35] |= BIT(3);
   10afa:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   10afe:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   10b02:	7723      	strb	r3, [r4, #28]
	rp->commands[38] |= BIT(7);
   10b04:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   10b08:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(0) | BIT(1);
   10b0c:	f06c 0c3c 	orn	ip, ip, #60	; 0x3c
	rp->commands[28] |= BIT(1) | BIT(2);
   10b10:	f047 070e 	orr.w	r7, r7, #14
	rp->commands[32] |= BIT(4) | BIT(5);
   10b14:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
   10b18:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   10b1c:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
   10b20:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   10b24:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(0) | BIT(1);
   10b28:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
   10b2c:	7767      	strb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
   10b2e:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
   10b32:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   10b36:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   10b3a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   10b3e:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   10b42:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
   10b46:	9807      	ldr	r0, [sp, #28]
   10b48:	e71a      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10b4a:	2109      	movs	r1, #9
   10b4c:	a807      	add	r0, sp, #28
   10b4e:	f7ff fde3 	bl	10718 <hci_cmd_complete>
   10b52:	4603      	mov	r3, r0
	rp->status = 0x00;
   10b54:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
   10b56:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   10b58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10b5c:	f06f 050e 	mvn.w	r5, #14
   10b60:	2405      	movs	r4, #5
	rp->status = 0x00;
   10b62:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   10b64:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
   10b66:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   10b68:	715d      	strb	r5, [r3, #5]
   10b6a:	9807      	ldr	r0, [sp, #28]
   10b6c:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
   10b6e:	709a      	strb	r2, [r3, #2]
   10b70:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   10b72:	71d9      	strb	r1, [r3, #7]
   10b74:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
   10b76:	e703      	b.n	10980 <hci_cmd_handle+0x12c>
		le_set_adv_param(cmd, evt);
   10b78:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   10b7a:	7ba5      	ldrb	r5, [r4, #14]
   10b7c:	79a3      	ldrb	r3, [r4, #6]
   10b7e:	7962      	ldrb	r2, [r4, #5]
   10b80:	7921      	ldrb	r1, [r4, #4]
   10b82:	8820      	ldrh	r0, [r4, #0]
   10b84:	9502      	str	r5, [sp, #8]
   10b86:	7b65      	ldrb	r5, [r4, #13]
   10b88:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   10b8a:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   10b8c:	9400      	str	r4, [sp, #0]
   10b8e:	f002 fa4f 	bl	13030 <ll_adv_params_set>
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   10b92:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10b94:	2101      	movs	r1, #1
   10b96:	a807      	add	r0, sp, #28
   10b98:	f7ff fdbe 	bl	10718 <hci_cmd_complete>
	ccst->status = status;
   10b9c:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   10b9e:	e74b      	b.n	10a38 <hci_cmd_handle+0x1e4>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   10ba0:	68a1      	ldr	r1, [r4, #8]
   10ba2:	2001      	movs	r0, #1
   10ba4:	f7ff fb72 	bl	1028c <ll_addr_set>
   10ba8:	e7f3      	b.n	10b92 <hci_cmd_handle+0x33e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10baa:	2109      	movs	r1, #9
   10bac:	a807      	add	r0, sp, #28
   10bae:	f7ff fdb3 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10bb2:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10bb4:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10bb6:	2208      	movs	r2, #8
	rp->status = 0x00;
   10bb8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   10bbc:	f00e f944 	bl	1ee48 <memset>
	dst[0] = val;
   10bc0:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   10bc2:	2241      	movs	r2, #65	; 0x41
	dst[2] = val >> 16;
   10bc4:	2301      	movs	r3, #1
	dst[0] = val;
   10bc6:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   10bc8:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   10bca:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
   10bcc:	9807      	ldr	r0, [sp, #28]
   10bce:	e6d7      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10bd0:	2104      	movs	r1, #4
   10bd2:	a807      	add	r0, sp, #28
   10bd4:	f7ff fda0 	bl	10718 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   10bd8:	2203      	movs	r2, #3
	rp->status = 0x00;
   10bda:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   10bdc:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
   10bde:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   10be0:	221b      	movs	r2, #27
   10be2:	7042      	strb	r2, [r0, #1]
   10be4:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   10be6:	9807      	ldr	r0, [sp, #28]
   10be8:	e6ca      	b.n	10980 <hci_cmd_handle+0x12c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   10bea:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
   10bec:	4bb7      	ldr	r3, [pc, #732]	; (10ecc <hci_cmd_handle+0x678>)
   10bee:	6811      	ldr	r1, [r2, #0]
   10bf0:	6852      	ldr	r2, [r2, #4]
   10bf2:	605a      	str	r2, [r3, #4]
   10bf4:	6019      	str	r1, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10bf6:	a807      	add	r0, sp, #28
   10bf8:	2101      	movs	r1, #1
   10bfa:	f7ff fd8d 	bl	10718 <hci_cmd_complete>
	ccst->status = 0x00;
   10bfe:	2300      	movs	r3, #0
   10c00:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   10c02:	e719      	b.n	10a38 <hci_cmd_handle+0x1e4>
		le_set_phy(cmd, evt);
   10c04:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   10c06:	7894      	ldrb	r4, [r2, #2]
   10c08:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   10c0a:	8817      	ldrh	r7, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   10c0c:	f8b2 6005 	ldrh.w	r6, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   10c10:	07e3      	lsls	r3, r4, #31
		cmd->tx_phys |= mask_phys;
   10c12:	bf48      	it	mi
   10c14:	f041 0103 	orrmi.w	r1, r1, #3
   10c18:	7913      	ldrb	r3, [r2, #4]
   10c1a:	bf48      	it	mi
   10c1c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   10c1e:	07a4      	lsls	r4, r4, #30
		cmd->rx_phys |= mask_phys;
   10c20:	bf44      	itt	mi
   10c22:	f043 0303 	orrmi.w	r3, r3, #3
   10c26:	7113      	strbmi	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   10c28:	ea43 0201 	orr.w	r2, r3, r1
   10c2c:	f032 0203 	bics.w	r2, r2, #3
   10c30:	f040 820c 	bne.w	1104c <hci_cmd_handle+0x7f8>
	if (!(cmd->tx_phys & 0x07) ||
   10c34:	074c      	lsls	r4, r1, #29
   10c36:	f000 8205 	beq.w	11044 <hci_cmd_handle+0x7f0>
   10c3a:	075a      	lsls	r2, r3, #29
   10c3c:	f000 8202 	beq.w	11044 <hci_cmd_handle+0x7f0>
	if (phy_opts & 0x03) {
   10c40:	f016 0203 	ands.w	r2, r6, #3
		phy_opts -= 1U;
   10c44:	bf1c      	itt	ne
   10c46:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		phy_opts &= 1;
   10c4a:	f006 0201 	andne.w	r2, r6, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   10c4e:	4638      	mov	r0, r7
   10c50:	f003 fa00 	bl	14054 <ll_phy_req_send>
   10c54:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10c56:	8828      	ldrh	r0, [r5, #0]
   10c58:	f00e fba0 	bl	1f39c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   10c5c:	e690      	b.n	10980 <hci_cmd_handle+0x12c>
		le_set_default_phy(cmd, evt);
   10c5e:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   10c60:	781a      	ldrb	r2, [r3, #0]
   10c62:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   10c64:	bf4a      	itet	mi
   10c66:	2007      	movmi	r0, #7
   10c68:	7858      	ldrbpl	r0, [r3, #1]
   10c6a:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   10c6c:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   10c6e:	bf4a      	itet	mi
   10c70:	2107      	movmi	r1, #7
   10c72:	7899      	ldrbpl	r1, [r3, #2]
   10c74:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   10c76:	f003 f9e3 	bl	14040 <ll_phy_default_set>
   10c7a:	e78a      	b.n	10b92 <hci_cmd_handle+0x33e>
	handle = sys_le16_to_cpu(cmd->handle);
   10c7c:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10c7e:	2105      	movs	r1, #5
   10c80:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   10c82:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10c84:	f7ff fd48 	bl	10718 <hci_cmd_complete>
   10c88:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   10c8a:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   10c8c:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   10c8e:	1ce1      	adds	r1, r4, #3
   10c90:	f003 f9b8 	bl	14004 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   10c94:	78e2      	ldrb	r2, [r4, #3]
   10c96:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
   10c98:	7020      	strb	r0, [r4, #0]
   10c9a:	2a00      	cmp	r2, #0
   10c9c:	fa92 f2a2 	rbit	r2, r2
   10ca0:	fab2 f282 	clz	r2, r2
   10ca4:	bf08      	it	eq
   10ca6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   10caa:	2b00      	cmp	r3, #0
   10cac:	fa93 f3a3 	rbit	r3, r3
   10cb0:	fab3 f383 	clz	r3, r3
   10cb4:	f102 0201 	add.w	r2, r2, #1
   10cb8:	bf08      	it	eq
   10cba:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   10cbe:	70e2      	strb	r2, [r4, #3]
   10cc0:	3301      	adds	r3, #1
   10cc2:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   10cc4:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   10cc8:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
   10cca:	e659      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ccc:	2109      	movs	r1, #9
   10cce:	a807      	add	r0, sp, #28
   10cd0:	f7ff fd22 	bl	10718 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   10cd4:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10cd6:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   10cd8:	f10d 021a 	add.w	r2, sp, #26
   10cdc:	f10d 0016 	add.w	r0, sp, #22
   10ce0:	a906      	add	r1, sp, #24
   10ce2:	f003 f985 	bl	13ff0 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10ce6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   10cea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   10cee:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10cf2:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   10cf6:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10cfa:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   10cfe:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   10d00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   10d04:	7022      	strb	r2, [r4, #0]
   10d06:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   10d08:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   10d0c:	e638      	b.n	10980 <hci_cmd_handle+0x12c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   10d0e:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
   10d10:	8818      	ldrh	r0, [r3, #0]
   10d12:	f005 ff75 	bl	16c00 <ll_rl_timeout_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10d16:	2101      	movs	r1, #1
   10d18:	a807      	add	r0, sp, #28
   10d1a:	f7ff fcfd 	bl	10718 <hci_cmd_complete>
	ccst->status = 0x00;
   10d1e:	2300      	movs	r3, #0
   10d20:	7003      	strb	r3, [r0, #0]
	if (err == -EINVAL) {
   10d22:	9807      	ldr	r0, [sp, #28]
   10d24:	e62c      	b.n	10980 <hci_cmd_handle+0x12c>
	uint8_t enable = cmd->enable;
   10d26:	68a3      	ldr	r3, [r4, #8]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10d28:	2101      	movs	r1, #1
   10d2a:	a807      	add	r0, sp, #28
	uint8_t enable = cmd->enable;
   10d2c:	781d      	ldrb	r5, [r3, #0]
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10d2e:	f7ff fcf3 	bl	10718 <hci_cmd_complete>
   10d32:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
   10d34:	4628      	mov	r0, r5
   10d36:	f005 ff4d 	bl	16bd4 <ll_rl_enable>
   10d3a:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10d3c:	9807      	ldr	r0, [sp, #28]
   10d3e:	e61f      	b.n	10980 <hci_cmd_handle+0x12c>
		le_set_privacy_mode(cmd, evt);
   10d40:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   10d42:	79c1      	ldrb	r1, [r0, #7]
   10d44:	f006 fb9e 	bl	17484 <ll_priv_mode_set>
   10d48:	e723      	b.n	10b92 <hci_cmd_handle+0x33e>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   10d4a:	68a1      	ldr	r1, [r4, #8]
   10d4c:	f811 0b01 	ldrb.w	r0, [r1], #1
   10d50:	f002 fb46 	bl	133e0 <ll_adv_data_set>
   10d54:	e71d      	b.n	10b92 <hci_cmd_handle+0x33e>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10d56:	2102      	movs	r1, #2
   10d58:	a807      	add	r0, sp, #28
   10d5a:	f7ff fcdd 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10d5e:	2300      	movs	r3, #0
   10d60:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   10d62:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
   10d64:	9807      	ldr	r0, [sp, #28]
   10d66:	e60b      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10d68:	2103      	movs	r1, #3
   10d6a:	a807      	add	r0, sp, #28
   10d6c:	f7ff fcd4 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10d70:	4601      	mov	r1, r0
   10d72:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   10d74:	3001      	adds	r0, #1
	rp->status = 0x00;
   10d76:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   10d7a:	f7ff fab3 	bl	102e4 <ll_tx_pwr_get>
	if (err == -EINVAL) {
   10d7e:	9807      	ldr	r0, [sp, #28]
   10d80:	e5fe      	b.n	10980 <hci_cmd_handle+0x12c>
		le_conn_update(cmd, evt);
   10d82:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   10d84:	8911      	ldrh	r1, [r2, #8]
   10d86:	8853      	ldrh	r3, [r2, #2]
   10d88:	8810      	ldrh	r0, [r2, #0]
   10d8a:	9102      	str	r1, [sp, #8]
   10d8c:	88d1      	ldrh	r1, [r2, #6]
   10d8e:	9101      	str	r1, [sp, #4]
   10d90:	8892      	ldrh	r2, [r2, #4]
   10d92:	9200      	str	r2, [sp, #0]
   10d94:	2200      	movs	r2, #0
   10d96:	4611      	mov	r1, r2
   10d98:	f002 ffd4 	bl	13d44 <ll_conn_update>
   10d9c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10d9e:	8828      	ldrh	r0, [r5, #0]
   10da0:	f00e fafc 	bl	1f39c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   10da4:	e5ec      	b.n	10980 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   10da6:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
   10da8:	8818      	ldrh	r0, [r3, #0]
   10daa:	f003 f889 	bl	13ec0 <ll_feature_req_send>
   10dae:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10db0:	8828      	ldrh	r0, [r5, #0]
   10db2:	f00e faf3 	bl	1f39c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   10db6:	e5e3      	b.n	10980 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   10db8:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10dba:	2108      	movs	r1, #8
   10dbc:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
   10dbe:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10dc0:	f7ff fcaa 	bl	10718 <hci_cmd_complete>
   10dc4:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   10dc6:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   10dc8:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
   10dca:	f003 f83f 	bl	13e4c <ll_chm_get>
	rp->status = status;
   10dce:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
   10dd0:	9807      	ldr	r0, [sp, #28]
   10dd2:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
   10dd6:	e5d3      	b.n	10980 <hci_cmd_handle+0x12c>
	status = ll_wl_remove(&cmd->addr);
   10dd8:	68a0      	ldr	r0, [r4, #8]
   10dda:	f005 fe3f 	bl	16a5c <ll_wl_remove>
   10dde:	e6d8      	b.n	10b92 <hci_cmd_handle+0x33e>
	status = ll_wl_add(&cmd->addr);
   10de0:	68a0      	ldr	r0, [r4, #8]
   10de2:	f006 f94d 	bl	17080 <ll_wl_add>
   10de6:	e6d4      	b.n	10b92 <hci_cmd_handle+0x33e>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10de8:	2101      	movs	r1, #1
   10dea:	a807      	add	r0, sp, #28
   10dec:	f7ff fc94 	bl	10718 <hci_cmd_complete>
   10df0:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
   10df2:	f005 fe09 	bl	16a08 <ll_wl_clear>
   10df6:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10df8:	9807      	ldr	r0, [sp, #28]
   10dfa:	e5c1      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10dfc:	2102      	movs	r1, #2
   10dfe:	a807      	add	r0, sp, #28
   10e00:	f7ff fc8a 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10e04:	2300      	movs	r3, #0
   10e06:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10e08:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   10e0a:	f005 fdfb 	bl	16a04 <ll_wl_size_get>
   10e0e:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
   10e10:	9807      	ldr	r0, [sp, #28]
   10e12:	e5b5      	b.n	10980 <hci_cmd_handle+0x12c>
	status = ll_adv_enable(cmd->enable);
   10e14:	68a3      	ldr	r3, [r4, #8]
   10e16:	7818      	ldrb	r0, [r3, #0]
   10e18:	f7ef fd86 	bl	928 <ll_adv_enable>
   10e1c:	e6b9      	b.n	10b92 <hci_cmd_handle+0x33e>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   10e1e:	68a1      	ldr	r1, [r4, #8]
   10e20:	f811 0b01 	ldrb.w	r0, [r1], #1
   10e24:	f002 fb26 	bl	13474 <ll_adv_scan_rsp_set>
   10e28:	e6b3      	b.n	10b92 <hci_cmd_handle+0x33e>
	memcpy(dst, src, sizeof(*dst));
   10e2a:	68a1      	ldr	r1, [r4, #8]
   10e2c:	2207      	movs	r2, #7
   10e2e:	a808      	add	r0, sp, #32
   10e30:	f00d ffdf 	bl	1edf2 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10e34:	2107      	movs	r1, #7
   10e36:	a807      	add	r0, sp, #28
   10e38:	f7ff fc6e 	bl	10718 <hci_cmd_complete>
   10e3c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   10e3e:	1c61      	adds	r1, r4, #1
   10e40:	a808      	add	r0, sp, #32
   10e42:	f006 fb03 	bl	1744c <ll_rl_lrpa_get>
   10e46:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10e48:	9807      	ldr	r0, [sp, #28]
   10e4a:	e599      	b.n	10980 <hci_cmd_handle+0x12c>
   10e4c:	68a1      	ldr	r1, [r4, #8]
   10e4e:	2207      	movs	r2, #7
   10e50:	a808      	add	r0, sp, #32
   10e52:	f00d ffce 	bl	1edf2 <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10e56:	2107      	movs	r1, #7
   10e58:	a807      	add	r0, sp, #28
   10e5a:	f7ff fc5d 	bl	10718 <hci_cmd_complete>
   10e5e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   10e60:	1c61      	adds	r1, r4, #1
   10e62:	a808      	add	r0, sp, #32
   10e64:	f006 fad0 	bl	17408 <ll_rl_crpa_get>
   10e68:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10e6a:	9807      	ldr	r0, [sp, #28]
   10e6c:	e588      	b.n	10980 <hci_cmd_handle+0x12c>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10e6e:	2102      	movs	r1, #2
   10e70:	a807      	add	r0, sp, #28
   10e72:	f7ff fc51 	bl	10718 <hci_cmd_complete>
   10e76:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   10e78:	f005 fe6a 	bl	16b50 <ll_rl_size_get>
	rp->status = 0x00;
   10e7c:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   10e7e:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   10e80:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
   10e82:	9807      	ldr	r0, [sp, #28]
   10e84:	e57c      	b.n	10980 <hci_cmd_handle+0x12c>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10e86:	2101      	movs	r1, #1
   10e88:	a807      	add	r0, sp, #28
   10e8a:	f7ff fc45 	bl	10718 <hci_cmd_complete>
   10e8e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
   10e90:	f005 fe60 	bl	16b54 <ll_rl_clear>
   10e94:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
   10e96:	9807      	ldr	r0, [sp, #28]
   10e98:	e572      	b.n	10980 <hci_cmd_handle+0x12c>
	status = ll_rl_remove(&cmd->peer_id_addr);
   10e9a:	68a0      	ldr	r0, [r4, #8]
   10e9c:	f006 fa10 	bl	172c0 <ll_rl_remove>
   10ea0:	e677      	b.n	10b92 <hci_cmd_handle+0x33e>
		le_add_dev_to_rl(cmd, evt);
   10ea2:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   10ea4:	f100 0217 	add.w	r2, r0, #23
   10ea8:	1dc1      	adds	r1, r0, #7
   10eaa:	f006 f949 	bl	17140 <ll_rl_add>
   10eae:	e670      	b.n	10b92 <hci_cmd_handle+0x33e>
		le_write_default_data_len(cmd, evt);
   10eb0:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   10eb2:	8859      	ldrh	r1, [r3, #2]
   10eb4:	8818      	ldrh	r0, [r3, #0]
   10eb6:	f003 f891 	bl	13fdc <ll_length_default_set>
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10eba:	2101      	movs	r1, #1
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   10ebc:	4604      	mov	r4, r0
	ccst = hci_cmd_complete(evt, sizeof(*ccst));
   10ebe:	a807      	add	r0, sp, #28
   10ec0:	f7ff fc2a 	bl	10718 <hci_cmd_complete>
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   10ec4:	7004      	strb	r4, [r0, #0]
	if (err == -EINVAL) {
   10ec6:	9807      	ldr	r0, [sp, #28]
   10ec8:	e55a      	b.n	10980 <hci_cmd_handle+0x12c>
   10eca:	bf00      	nop
   10ecc:	20000198 	.word	0x20000198
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10ed0:	2105      	movs	r1, #5
   10ed2:	a807      	add	r0, sp, #28
   10ed4:	f7ff fc20 	bl	10718 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   10ed8:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10eda:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   10edc:	f10d 001a 	add.w	r0, sp, #26
   10ee0:	f003 f870 	bl	13fc4 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   10ee4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   10ee8:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   10eec:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10eee:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   10ef2:	7022      	strb	r2, [r4, #0]
   10ef4:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   10ef6:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   10efa:	e541      	b.n	10980 <hci_cmd_handle+0x12c>
		le_set_data_len(cmd, evt);
   10efc:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10efe:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   10f00:	889a      	ldrh	r2, [r3, #4]
   10f02:	8859      	ldrh	r1, [r3, #2]
   10f04:	4628      	mov	r0, r5
   10f06:	f003 f813 	bl	13f30 <ll_length_req_send>
   10f0a:	e58d      	b.n	10a28 <hci_cmd_handle+0x1d4>
		le_conn_param_req_neg_reply(cmd, evt);
   10f0c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10f0e:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   10f10:	789a      	ldrb	r2, [r3, #2]
   10f12:	2300      	movs	r3, #0
   10f14:	e9cd 3301 	strd	r3, r3, [sp, #4]
   10f18:	4628      	mov	r0, r5
   10f1a:	9300      	str	r3, [sp, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10f1c:	2102      	movs	r1, #2
   10f1e:	f002 ff11 	bl	13d44 <ll_conn_update>
   10f22:	e581      	b.n	10a28 <hci_cmd_handle+0x1d4>
		le_conn_param_req_reply(cmd, evt);
   10f24:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10f26:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   10f28:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   10f2a:	8853      	ldrh	r3, [r2, #2]
   10f2c:	9102      	str	r1, [sp, #8]
   10f2e:	88d1      	ldrh	r1, [r2, #6]
   10f30:	9101      	str	r1, [sp, #4]
   10f32:	8892      	ldrh	r2, [r2, #4]
   10f34:	9200      	str	r2, [sp, #0]
   10f36:	4628      	mov	r0, r5
   10f38:	2200      	movs	r2, #0
   10f3a:	e7ef      	b.n	10f1c <hci_cmd_handle+0x6c8>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f3c:	2109      	movs	r1, #9
   10f3e:	a807      	add	r0, sp, #28
   10f40:	f7ff fbea 	bl	10718 <hci_cmd_complete>
	dst[0] = val;
   10f44:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   10f46:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   10f48:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   10f4a:	2230      	movs	r2, #48	; 0x30
   10f4c:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   10f4e:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   10f50:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
   10f52:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   10f54:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   10f56:	2201      	movs	r2, #1
   10f58:	7003      	strb	r3, [r0, #0]
   10f5a:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   10f5c:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   10f5e:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   10f60:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   10f62:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   10f64:	9807      	ldr	r0, [sp, #28]
   10f66:	e50b      	b.n	10980 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   10f68:	68a3      	ldr	r3, [r4, #8]
   10f6a:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   10f6c:	2200      	movs	r2, #0
   10f6e:	4628      	mov	r0, r5
   10f70:	2106      	movs	r1, #6
   10f72:	f005 fb93 	bl	1669c <ll_start_enc_req_send>
   10f76:	e557      	b.n	10a28 <hci_cmd_handle+0x1d4>
	handle = sys_le16_to_cpu(cmd->handle);
   10f78:	68a2      	ldr	r2, [r4, #8]
   10f7a:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   10f7e:	2100      	movs	r1, #0
   10f80:	4628      	mov	r0, r5
   10f82:	f005 fb8b 	bl	1669c <ll_start_enc_req_send>
   10f86:	e54f      	b.n	10a28 <hci_cmd_handle+0x1d4>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10f88:	2109      	movs	r1, #9
   10f8a:	a807      	add	r0, sp, #28
   10f8c:	f7ff fbc4 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10f90:	2300      	movs	r3, #0
   10f92:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   10f96:	2108      	movs	r1, #8
   10f98:	f006 fe1c 	bl	17bd4 <lll_csrand_get>
	if (err == -EINVAL) {
   10f9c:	9807      	ldr	r0, [sp, #28]
   10f9e:	e4ef      	b.n	10980 <hci_cmd_handle+0x12c>
		le_encrypt(cmd, evt);
   10fa0:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   10fa2:	aa08      	add	r2, sp, #32
   10fa4:	f100 0110 	add.w	r1, r0, #16
   10fa8:	2300      	movs	r3, #0
   10faa:	f008 f9cd 	bl	19348 <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fae:	2111      	movs	r1, #17
   10fb0:	a807      	add	r0, sp, #28
   10fb2:	f7ff fbb1 	bl	10718 <hci_cmd_complete>
	rp->status = 0x00;
   10fb6:	2300      	movs	r3, #0
   10fb8:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   10fbc:	a908      	add	r1, sp, #32
   10fbe:	2210      	movs	r2, #16
   10fc0:	f00d ff17 	bl	1edf2 <memcpy>
	if (err == -EINVAL) {
   10fc4:	9807      	ldr	r0, [sp, #28]
   10fc6:	e4db      	b.n	10980 <hci_cmd_handle+0x12c>
		disconnect(cmd, evt);
   10fc8:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   10fca:	7899      	ldrb	r1, [r3, #2]
   10fcc:	8818      	ldrh	r0, [r3, #0]
   10fce:	f002 ff5d 	bl	13e8c <ll_terminate_ind_send>
   10fd2:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   10fd4:	8828      	ldrh	r0, [r5, #0]
   10fd6:	f00e f9e1 	bl	1f39c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   10fda:	e4d1      	b.n	10980 <hci_cmd_handle+0x12c>
	handle = sys_le16_to_cpu(cmd->handle);
   10fdc:	68a3      	ldr	r3, [r4, #8]
   10fde:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   10fe0:	a908      	add	r1, sp, #32
   10fe2:	4628      	mov	r0, r5
   10fe4:	f003 f882 	bl	140ec <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fe8:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   10fea:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
   10fec:	a807      	add	r0, sp, #28
   10fee:	f7ff fb93 	bl	10718 <hci_cmd_complete>
	rp->status = status;
   10ff2:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   10ff4:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   10ff8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10ffc:	f8a0 3003 	strh.w	r3, [r0, #3]
   11000:	9807      	ldr	r0, [sp, #28]
}
   11002:	e4bd      	b.n	10980 <hci_cmd_handle+0x12c>
	event_mask = DEFAULT_EVENT_MASK;
   11004:	4913      	ldr	r1, [pc, #76]	; (11054 <hci_cmd_handle+0x800>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11006:	4a14      	ldr	r2, [pc, #80]	; (11058 <hci_cmd_handle+0x804>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11008:	4b14      	ldr	r3, [pc, #80]	; (1105c <hci_cmd_handle+0x808>)
	event_mask = DEFAULT_EVENT_MASK;
   1100a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1100e:	f641 75ff 	movw	r5, #8191	; 0x1fff
   11012:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   11016:	201f      	movs	r0, #31
   11018:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1101a:	2400      	movs	r4, #0
   1101c:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1101e:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11022:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
   11026:	f000 ffc1 	bl	11fac <ll_reset>
		ccst = hci_cmd_complete(evt, sizeof(*ccst));
   1102a:	2101      	movs	r1, #1
   1102c:	a807      	add	r0, sp, #28
   1102e:	f7ff fb73 	bl	10718 <hci_cmd_complete>
		ccst->status = 0x00;
   11032:	2300      	movs	r3, #0
	conn_count = 0U;
   11034:	4a0a      	ldr	r2, [pc, #40]	; (11060 <hci_cmd_handle+0x80c>)
		ccst->status = 0x00;
   11036:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   11038:	9807      	ldr	r0, [sp, #28]
   1103a:	6013      	str	r3, [r2, #0]
}
   1103c:	e4a0      	b.n	10980 <hci_cmd_handle+0x12c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1103e:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   11040:	4b05      	ldr	r3, [pc, #20]	; (11058 <hci_cmd_handle+0x804>)
   11042:	e5d4      	b.n	10bee <hci_cmd_handle+0x39a>
	return bt_hci_cmd_status_create(_opcode, status);
   11044:	2112      	movs	r1, #18
   11046:	f00e f9a9 	bl	1f39c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   1104a:	e499      	b.n	10980 <hci_cmd_handle+0x12c>
	return bt_hci_cmd_status_create(_opcode, status);
   1104c:	2111      	movs	r1, #17
   1104e:	f00e f9a5 	bl	1f39c <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
   11052:	e495      	b.n	10980 <hci_cmd_handle+0x12c>
   11054:	20000190 	.word	0x20000190
   11058:	20001168 	.word	0x20001168
   1105c:	20000198 	.word	0x20000198
   11060:	20001814 	.word	0x20001814

00011064 <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
   11064:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   11066:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   11068:	2b03      	cmp	r3, #3
{
   1106a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*evt = NULL;
   1106e:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   11070:	d942      	bls.n	110f8 <hci_acl_handle+0x94>
	acl = net_buf_pull_mem(buf, sizeof(*acl));
   11072:	4605      	mov	r5, r0
   11074:	460e      	mov	r6, r1
   11076:	3008      	adds	r0, #8
   11078:	2104      	movs	r1, #4
   1107a:	f00f fd9c 	bl	20bb6 <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1107e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   11080:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   11082:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
   11086:	42bb      	cmp	r3, r7
   11088:	d343      	bcc.n	11112 <hci_acl_handle+0xae>
	node_tx = ll_tx_mem_acquire();
   1108a:	f002 fde1 	bl	13c50 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1108e:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
   11092:	4604      	mov	r4, r0
   11094:	2800      	cmp	r0, #0
   11096:	d040      	beq.n	1111a <hci_acl_handle+0xb6>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   11098:	089a      	lsrs	r2, r3, #2
   1109a:	d102      	bne.n	110a2 <hci_acl_handle+0x3e>
	switch (bt_acl_flags_pb(flags)) {
   1109c:	b333      	cbz	r3, 110ec <hci_acl_handle+0x88>
   1109e:	2b01      	cmp	r3, #1
   110a0:	d003      	beq.n	110aa <hci_acl_handle+0x46>
		return -EINVAL;
   110a2:	f06f 0015 	mvn.w	r0, #21
}
   110a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   110aa:	7902      	ldrb	r2, [r0, #4]
   110ac:	f363 0201 	bfi	r2, r3, #0, #2
   110b0:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
   110b2:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   110b4:	68a9      	ldr	r1, [r5, #8]
   110b6:	463a      	mov	r2, r7
   110b8:	1de0      	adds	r0, r4, #7
   110ba:	f00d fe9a 	bl	1edf2 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   110be:	4621      	mov	r1, r4
   110c0:	f3c8 000b 	ubfx	r0, r8, #0, #12
   110c4:	f002 fdd0 	bl	13c68 <ll_tx_mem_enqueue>
   110c8:	2800      	cmp	r0, #0
   110ca:	d0ec      	beq.n	110a6 <hci_acl_handle+0x42>
   110cc:	4b2a      	ldr	r3, [pc, #168]	; (11178 <hci_acl_handle+0x114>)
   110ce:	492b      	ldr	r1, [pc, #172]	; (1117c <hci_acl_handle+0x118>)
		BT_ERR("Invalid Tx Enqueue");
   110d0:	482b      	ldr	r0, [pc, #172]	; (11180 <hci_acl_handle+0x11c>)
   110d2:	1ac9      	subs	r1, r1, r3
   110d4:	08c9      	lsrs	r1, r1, #3
   110d6:	0189      	lsls	r1, r1, #6
   110d8:	f041 0101 	orr.w	r1, r1, #1
   110dc:	f00b fec7 	bl	1ce6e <log_0>
		ll_tx_mem_release(node_tx);
   110e0:	4620      	mov	r0, r4
   110e2:	f002 fdbb 	bl	13c5c <ll_tx_mem_release>
		return -EINVAL;
   110e6:	f06f 0015 	mvn.w	r0, #21
   110ea:	e7dc      	b.n	110a6 <hci_acl_handle+0x42>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   110ec:	7903      	ldrb	r3, [r0, #4]
   110ee:	2202      	movs	r2, #2
   110f0:	f362 0301 	bfi	r3, r2, #0, #2
   110f4:	7103      	strb	r3, [r0, #4]
		break;
   110f6:	e7dc      	b.n	110b2 <hci_acl_handle+0x4e>
   110f8:	4920      	ldr	r1, [pc, #128]	; (1117c <hci_acl_handle+0x118>)
   110fa:	4b1f      	ldr	r3, [pc, #124]	; (11178 <hci_acl_handle+0x114>)
		BT_ERR("No HCI ACL header");
   110fc:	4821      	ldr	r0, [pc, #132]	; (11184 <hci_acl_handle+0x120>)
   110fe:	1ac9      	subs	r1, r1, r3
   11100:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   11102:	0189      	lsls	r1, r1, #6
   11104:	f041 0101 	orr.w	r1, r1, #1
   11108:	f00b feb1 	bl	1ce6e <log_0>
		return -EINVAL;
   1110c:	f06f 0015 	mvn.w	r0, #21
   11110:	e7c9      	b.n	110a6 <hci_acl_handle+0x42>
   11112:	491a      	ldr	r1, [pc, #104]	; (1117c <hci_acl_handle+0x118>)
   11114:	4b18      	ldr	r3, [pc, #96]	; (11178 <hci_acl_handle+0x114>)
		BT_ERR("Invalid HCI ACL packet length");
   11116:	481c      	ldr	r0, [pc, #112]	; (11188 <hci_acl_handle+0x124>)
   11118:	e7f1      	b.n	110fe <hci_acl_handle+0x9a>
   1111a:	4b17      	ldr	r3, [pc, #92]	; (11178 <hci_acl_handle+0x114>)
   1111c:	4917      	ldr	r1, [pc, #92]	; (1117c <hci_acl_handle+0x118>)
		BT_ERR("Tx Buffer Overflow");
   1111e:	481b      	ldr	r0, [pc, #108]	; (1118c <hci_acl_handle+0x128>)
   11120:	1ac9      	subs	r1, r1, r3
   11122:	08c9      	lsrs	r1, r1, #3
   11124:	0189      	lsls	r1, r1, #6
   11126:	f041 0101 	orr.w	r1, r1, #1
   1112a:	f00b fea0 	bl	1ce6e <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1112e:	4b18      	ldr	r3, [pc, #96]	; (11190 <hci_acl_handle+0x12c>)
   11130:	6819      	ldr	r1, [r3, #0]
   11132:	4623      	mov	r3, r4
   11134:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
   11138:	4313      	orrs	r3, r2
   1113a:	d102      	bne.n	11142 <hci_acl_handle+0xde>
		return -ENOBUFS;
   1113c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11140:	e7b1      	b.n	110a6 <hci_acl_handle+0x42>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1114a:	2001      	movs	r0, #1
   1114c:	f7f8 f8cc 	bl	92e8 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
   11150:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11152:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
   11154:	3008      	adds	r0, #8
   11156:	f00f fd07 	bl	20b68 <net_buf_simple_add>
	hdr->len = len;
   1115a:	2401      	movs	r4, #1
	hdr->evt = evt;
   1115c:	221a      	movs	r2, #26
   1115e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   11160:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
   11162:	6830      	ldr	r0, [r6, #0]
   11164:	4621      	mov	r1, r4
   11166:	3008      	adds	r0, #8
   11168:	f00f fcfe 	bl	20b68 <net_buf_simple_add>
   1116c:	4603      	mov	r3, r0
		return -ENOBUFS;
   1116e:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   11172:	701c      	strb	r4, [r3, #0]
   11174:	e797      	b.n	110a6 <hci_acl_handle+0x42>
   11176:	bf00      	nop
   11178:	00021aac 	.word	0x00021aac
   1117c:	00021aec 	.word	0x00021aec
   11180:	00022810 	.word	0x00022810
   11184:	000227c8 	.word	0x000227c8
   11188:	000227dc 	.word	0x000227dc
   1118c:	000227fc 	.word	0x000227fc
   11190:	20000190 	.word	0x20000190

00011194 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   11194:	4b06      	ldr	r3, [pc, #24]	; (111b0 <hci_disconn_complete_encode+0x1c>)
   11196:	681b      	ldr	r3, [r3, #0]
{
   11198:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1119a:	f003 0410 	and.w	r4, r3, #16
   1119e:	2500      	movs	r5, #0
   111a0:	ea54 0305 	orrs.w	r3, r4, r5
   111a4:	d101      	bne.n	111aa <hci_disconn_complete_encode+0x16>
}
   111a6:	bc30      	pop	{r4, r5}
   111a8:	4770      	bx	lr
   111aa:	bc30      	pop	{r4, r5}
   111ac:	f7ff ba9c 	b.w	106e8 <hci_disconn_complete_encode.part.0>
   111b0:	20000190 	.word	0x20000190

000111b4 <hci_disconn_complete_process>:
	conn_count--;
   111b4:	4a02      	ldr	r2, [pc, #8]	; (111c0 <hci_disconn_complete_process+0xc>)
   111b6:	6813      	ldr	r3, [r2, #0]
   111b8:	3b01      	subs	r3, #1
   111ba:	6013      	str	r3, [r2, #0]
}
   111bc:	4770      	bx	lr
   111be:	bf00      	nop
   111c0:	20001814 	.word	0x20001814

000111c4 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   111c4:	7f03      	ldrb	r3, [r0, #28]
   111c6:	f003 0303 	and.w	r3, r3, #3
   111ca:	3b01      	subs	r3, #1
   111cc:	2b01      	cmp	r3, #1
{
   111ce:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   111d0:	d90d      	bls.n	111ee <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   111d2:	4a16      	ldr	r2, [pc, #88]	; (1122c <hci_acl_encode+0x68>)
   111d4:	4916      	ldr	r1, [pc, #88]	; (11230 <hci_acl_encode+0x6c>)
   111d6:	4817      	ldr	r0, [pc, #92]	; (11234 <hci_acl_encode+0x70>)
   111d8:	f241 039f 	movw	r3, #4255	; 0x109f
   111dc:	f00b faf1 	bl	1c7c2 <printk>
   111e0:	4040      	eors	r0, r0
   111e2:	f380 8811 	msr	BASEPRI, r0
   111e6:	f04f 0003 	mov.w	r0, #3
   111ea:	df02      	svc	2
		break;
	}
}
   111ec:	bd70      	pop	{r4, r5, r6, pc}
   111ee:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   111f0:	f101 0508 	add.w	r5, r1, #8
   111f4:	4628      	mov	r0, r5
   111f6:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   111f8:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
   111fa:	f00f fcb5 	bl	20b68 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   111fe:	7f23      	ldrb	r3, [r4, #28]
   11200:	f003 0303 	and.w	r3, r3, #3
   11204:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   11206:	bf0c      	ite	eq
   11208:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1120c:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   11210:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   11212:	7f61      	ldrb	r1, [r4, #29]
   11214:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
   11216:	4628      	mov	r0, r5
   11218:	f00f fca6 	bl	20b68 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1121c:	7f62      	ldrb	r2, [r4, #29]
   1121e:	f104 011f 	add.w	r1, r4, #31
}
   11222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   11226:	f00d bde4 	b.w	1edf2 <memcpy>
   1122a:	bf00      	nop
   1122c:	00022824 	.word	0x00022824
   11230:	000226e8 	.word	0x000226e8
   11234:	00022678 	.word	0x00022678

00011238 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   11238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1123c:	7905      	ldrb	r5, [r0, #4]
   1123e:	88c7      	ldrh	r7, [r0, #6]
   11240:	2d02      	cmp	r5, #2
{
   11242:	4604      	mov	r4, r0
   11244:	b088      	sub	sp, #32
   11246:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   11248:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1124c:	d00c      	beq.n	11268 <hci_evt_encode+0x30>
	switch (node_rx->hdr.type) {
   1124e:	3d0a      	subs	r5, #10
   11250:	2d06      	cmp	r5, #6
   11252:	f200 825c 	bhi.w	1170e <hci_evt_encode+0x4d6>
   11256:	e8df f015 	tbh	[pc, r5, lsl #1]
   1125a:	005c      	.short	0x005c
   1125c:	00b000d2 	.word	0x00b000d2
   11260:	00df0110 	.word	0x00df0110
   11264:	002100f6 	.word	0x002100f6
	switch (pdu_data->llctrl.opcode) {
   11268:	7fe3      	ldrb	r3, [r4, #31]
   1126a:	3b03      	subs	r3, #3
   1126c:	2b12      	cmp	r3, #18
   1126e:	f200 811e 	bhi.w	114ae <hci_evt_encode+0x276>
   11272:	e8df f013 	tbh	[pc, r3, lsl #1]
   11276:	016a      	.short	0x016a
   11278:	011c011c 	.word	0x011c011c
   1127c:	01b30190 	.word	0x01b30190
   11280:	01c3011c 	.word	0x01c3011c
   11284:	011c011c 	.word	0x011c011c
   11288:	01ca011c 	.word	0x01ca011c
   1128c:	01d9011c 	.word	0x01d9011c
   11290:	011c011c 	.word	0x011c011c
   11294:	011c011c 	.word	0x011c011c
   11298:	012a012a 	.word	0x012a012a
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1129c:	4bc5      	ldr	r3, [pc, #788]	; (115b4 <hci_evt_encode+0x37c>)
   1129e:	6858      	ldr	r0, [r3, #4]
   112a0:	2100      	movs	r1, #0
   112a2:	460a      	mov	r2, r1
   112a4:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   112a8:	4313      	orrs	r3, r2
   112aa:	d007      	beq.n	112bc <hci_evt_encode+0x84>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   112ac:	4bc2      	ldr	r3, [pc, #776]	; (115b8 <hci_evt_encode+0x380>)
   112ae:	6818      	ldr	r0, [r3, #0]
   112b0:	460b      	mov	r3, r1
   112b2:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   112b6:	4313      	orrs	r3, r2
   112b8:	f040 8127 	bne.w	1150a <hci_evt_encode+0x2d2>
   112bc:	7f61      	ldrb	r1, [r4, #29]
   112be:	48bf      	ldr	r0, [pc, #764]	; (115bc <hci_evt_encode+0x384>)
   112c0:	4bbf      	ldr	r3, [pc, #764]	; (115c0 <hci_evt_encode+0x388>)
   112c2:	7fa2      	ldrb	r2, [r4, #30]
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   112c4:	7f25      	ldrb	r5, [r4, #28]
   112c6:	9704      	str	r7, [sp, #16]
   112c8:	2900      	cmp	r1, #0
   112ca:	eba3 0300 	sub.w	r3, r3, r0
   112ce:	fa91 f1a1 	rbit	r1, r1
   112d2:	fab1 f181 	clz	r1, r1
   112d6:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   112da:	bf08      	it	eq
   112dc:	f04f 31ff 	moveq.w	r1, #4294967295	; 0xffffffff
   112e0:	2a00      	cmp	r2, #0
   112e2:	fa92 f2a2 	rbit	r2, r2
   112e6:	fab2 f282 	clz	r2, r2
   112ea:	f101 0001 	add.w	r0, r1, #1
   112ee:	bf08      	it	eq
   112f0:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   112f4:	019b      	lsls	r3, r3, #6
   112f6:	1c54      	adds	r4, r2, #1
   112f8:	9006      	str	r0, [sp, #24]
   112fa:	f043 0302 	orr.w	r3, r3, #2
   112fe:	48b1      	ldr	r0, [pc, #708]	; (115c4 <hci_evt_encode+0x38c>)
   11300:	9407      	str	r4, [sp, #28]
   11302:	2204      	movs	r2, #4
   11304:	a904      	add	r1, sp, #16
   11306:	9505      	str	r5, [sp, #20]
   11308:	f00b fe07 	bl	1cf1a <log_n>
		encode_control(node_rx, pdu_data, buf);
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
	}
}
   1130c:	b008      	add	sp, #32
   1130e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t status = node_rx->status;
   11312:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
   11314:	2d00      	cmp	r5, #0
   11316:	f000 81a5 	beq.w	11664 <hci_evt_encode+0x42c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1131a:	4ba6      	ldr	r3, [pc, #664]	; (115b4 <hci_evt_encode+0x37c>)
   1131c:	6859      	ldr	r1, [r3, #4]
   1131e:	f04f 0800 	mov.w	r8, #0
   11322:	4642      	mov	r2, r8
   11324:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
   11328:	4313      	orrs	r3, r2
   1132a:	d0ef      	beq.n	1130c <hci_evt_encode+0xd4>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1132c:	4ba2      	ldr	r3, [pc, #648]	; (115b8 <hci_evt_encode+0x380>)
   1132e:	f8d3 c000 	ldr.w	ip, [r3]
   11332:	f240 2101 	movw	r1, #513	; 0x201
   11336:	ea0c 0201 	and.w	r2, ip, r1
   1133a:	4643      	mov	r3, r8
   1133c:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1133e:	f40c 7000 	and.w	r0, ip, #512	; 0x200
   11342:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   11344:	d0e2      	beq.n	1130c <hci_evt_encode+0xd4>
	if (!status) {
   11346:	2d00      	cmp	r5, #0
   11348:	f040 819f 	bne.w	1168a <hci_evt_encode+0x452>
		conn_count++;
   1134c:	4a9e      	ldr	r2, [pc, #632]	; (115c8 <hci_evt_encode+0x390>)
   1134e:	6813      	ldr	r3, [r2, #0]
   11350:	3301      	adds	r3, #1
   11352:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   11354:	ea50 0301 	orrs.w	r3, r0, r1
   11358:	f104 081f 	add.w	r8, r4, #31
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   1135c:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1135e:	f000 81a3 	beq.w	116a8 <hci_evt_encode+0x470>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   11362:	221e      	movs	r2, #30
   11364:	210a      	movs	r1, #10
   11366:	f7ff f957 	bl	10618 <meta_evt>
		leecc->status = 0x00;
   1136a:	7005      	strb	r5, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1136c:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = node_rx->role;
   11370:	7f63      	ldrb	r3, [r4, #29]
   11372:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
   11374:	7fa3      	ldrb	r3, [r4, #30]
   11376:	7103      	strb	r3, [r0, #4]
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   11378:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
   1137a:	4641      	mov	r1, r8
   1137c:	2206      	movs	r2, #6
   1137e:	3005      	adds	r0, #5
   11380:	f00d fd37 	bl	1edf2 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
   11384:	2206      	movs	r2, #6
   11386:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   1138a:	f106 000b 	add.w	r0, r6, #11
   1138e:	f00d fd30 	bl	1edf2 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
   11392:	2206      	movs	r2, #6
   11394:	f104 0125 	add.w	r1, r4, #37	; 0x25
   11398:	f106 0011 	add.w	r0, r6, #17
   1139c:	f00d fd29 	bl	1edf2 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   113a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   113a2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
   113a4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   113a6:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
   113aa:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   113ae:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
   113b2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   113b6:	7773      	strb	r3, [r6, #29]
		return;
   113b8:	e7a8      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   113ba:	4b7e      	ldr	r3, [pc, #504]	; (115b4 <hci_evt_encode+0x37c>)
   113bc:	6858      	ldr	r0, [r3, #4]
   113be:	2100      	movs	r1, #0
   113c0:	460a      	mov	r2, r1
   113c2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   113c6:	4313      	orrs	r3, r2
   113c8:	d0a0      	beq.n	1130c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   113ca:	4b7b      	ldr	r3, [pc, #492]	; (115b8 <hci_evt_encode+0x380>)
   113cc:	6818      	ldr	r0, [r3, #0]
   113ce:	460b      	mov	r3, r1
   113d0:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   113d4:	4313      	orrs	r3, r2
   113d6:	d099      	beq.n	1130c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
   113d8:	2209      	movs	r2, #9
   113da:	2103      	movs	r1, #3
   113dc:	4630      	mov	r0, r6
   113de:	f7ff f91b 	bl	10618 <meta_evt>
	sep->status = cu->status;
   113e2:	7f23      	ldrb	r3, [r4, #28]
   113e4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   113e6:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   113e8:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   113ea:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   113ec:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   113f0:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   113f4:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   113f8:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   113fc:	e786      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   113fe:	4b6d      	ldr	r3, [pc, #436]	; (115b4 <hci_evt_encode+0x37c>)
   11400:	6819      	ldr	r1, [r3, #0]
   11402:	2300      	movs	r3, #0
   11404:	f001 0210 	and.w	r2, r1, #16
   11408:	4313      	orrs	r3, r2
   1140a:	f43f af7f 	beq.w	1130c <hci_evt_encode+0xd4>
   1140e:	4632      	mov	r2, r6
   11410:	4639      	mov	r1, r7
   11412:	f7ff f969 	bl	106e8 <hci_disconn_complete_encode.part.0>
   11416:	e779      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   11418:	4b6c      	ldr	r3, [pc, #432]	; (115cc <hci_evt_encode+0x394>)
   1141a:	6819      	ldr	r1, [r3, #0]
   1141c:	2300      	movs	r3, #0
   1141e:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
   11422:	4313      	orrs	r3, r2
   11424:	f43f af72 	beq.w	1130c <hci_evt_encode+0xd4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   11428:	3608      	adds	r6, #8
   1142a:	2102      	movs	r1, #2
   1142c:	4630      	mov	r0, r6
   1142e:	f00f fb9b 	bl	20b68 <net_buf_simple_add>
   11432:	4603      	mov	r3, r0
	hdr->evt = evt;
   11434:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
   11436:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
   11438:	4630      	mov	r0, r6
	hdr->evt = evt;
   1143a:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   1143c:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   1143e:	f00f fb93 	bl	20b68 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   11442:	8007      	strh	r7, [r0, #0]
   11444:	e762      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11446:	4b5b      	ldr	r3, [pc, #364]	; (115b4 <hci_evt_encode+0x37c>)
   11448:	6858      	ldr	r0, [r3, #4]
   1144a:	2100      	movs	r1, #0
   1144c:	460a      	mov	r2, r1
   1144e:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11452:	4313      	orrs	r3, r2
   11454:	f43f af5a 	beq.w	1130c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   11458:	4b57      	ldr	r3, [pc, #348]	; (115b8 <hci_evt_encode+0x380>)
   1145a:	6818      	ldr	r0, [r3, #0]
   1145c:	460b      	mov	r3, r1
   1145e:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11462:	4313      	orrs	r3, r2
   11464:	f43f af52 	beq.w	1130c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
   11468:	4630      	mov	r0, r6
   1146a:	2203      	movs	r2, #3
   1146c:	2114      	movs	r1, #20
   1146e:	f7ff f8d3 	bl	10618 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11472:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   11474:	7f23      	ldrb	r3, [r4, #28]
   11476:	7083      	strb	r3, [r0, #2]
   11478:	e748      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   1147a:	4b4e      	ldr	r3, [pc, #312]	; (115b4 <hci_evt_encode+0x37c>)
   1147c:	6859      	ldr	r1, [r3, #4]
   1147e:	2400      	movs	r4, #0
   11480:	4622      	mov	r2, r4
   11482:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
   11486:	4313      	orrs	r3, r2
   11488:	f43f af40 	beq.w	1130c <hci_evt_encode+0xd4>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1148c:	3608      	adds	r6, #8
   1148e:	2102      	movs	r1, #2
   11490:	4630      	mov	r0, r6
   11492:	f00f fb69 	bl	20b68 <net_buf_simple_add>
   11496:	4603      	mov	r3, r0
	hdr->evt = evt;
   11498:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
   1149a:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
   1149c:	4630      	mov	r0, r6
	hdr->evt = evt;
   1149e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   114a0:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
   114a2:	f00f fb61 	bl	20b68 <net_buf_simple_add>
	ep->status = 0x00;
   114a6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   114a8:	f8a0 7001 	strh.w	r7, [r0, #1]
   114ac:	e72e      	b.n	1130c <hci_evt_encode+0xd4>
		LL_ASSERT(0);
   114ae:	f241 0373 	movw	r3, #4211	; 0x1073
   114b2:	4a47      	ldr	r2, [pc, #284]	; (115d0 <hci_evt_encode+0x398>)
   114b4:	4947      	ldr	r1, [pc, #284]	; (115d4 <hci_evt_encode+0x39c>)
   114b6:	4848      	ldr	r0, [pc, #288]	; (115d8 <hci_evt_encode+0x3a0>)
   114b8:	f00b f983 	bl	1c7c2 <printk>
   114bc:	4040      	eors	r0, r0
   114be:	f380 8811 	msr	BASEPRI, r0
   114c2:	f04f 0003 	mov.w	r0, #3
   114c6:	df02      	svc	2
}
   114c8:	e720      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114ca:	4b3a      	ldr	r3, [pc, #232]	; (115b4 <hci_evt_encode+0x37c>)
   114cc:	6858      	ldr	r0, [r3, #4]
   114ce:	2100      	movs	r1, #0
   114d0:	460a      	mov	r2, r1
   114d2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   114d6:	4313      	orrs	r3, r2
   114d8:	f43f af18 	beq.w	1130c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   114dc:	4b36      	ldr	r3, [pc, #216]	; (115b8 <hci_evt_encode+0x380>)
   114de:	6818      	ldr	r0, [r3, #0]
   114e0:	460b      	mov	r3, r1
   114e2:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   114e6:	4313      	orrs	r3, r2
   114e8:	f43f af10 	beq.w	1130c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
   114ec:	4630      	mov	r0, r6
   114ee:	220a      	movs	r2, #10
   114f0:	2107      	movs	r1, #7
   114f2:	f7ff f891 	bl	10618 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   114f6:	8007      	strh	r7, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   114f8:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   114fa:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   114fc:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   114fe:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   11500:	8c23      	ldrh	r3, [r4, #32]
   11502:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   11504:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   11506:	8103      	strh	r3, [r0, #8]
   11508:	e700      	b.n	1130c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
   1150a:	2205      	movs	r2, #5
   1150c:	4630      	mov	r0, r6
   1150e:	210c      	movs	r1, #12
   11510:	f7ff f882 	bl	10618 <meta_evt>
	sep->status = pu->status;
   11514:	7f23      	ldrb	r3, [r4, #28]
   11516:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11518:	f8a0 7001 	strh.w	r7, [r0, #1]
   1151c:	7f62      	ldrb	r2, [r4, #29]
   1151e:	2a00      	cmp	r2, #0
   11520:	fa92 f3a2 	rbit	r3, r2
   11524:	fab3 f383 	clz	r3, r3
   11528:	bf08      	it	eq
   1152a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1152e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   11530:	70c3      	strb	r3, [r0, #3]
   11532:	7fa2      	ldrb	r2, [r4, #30]
   11534:	fa92 f3a2 	rbit	r3, r2
   11538:	2a00      	cmp	r2, #0
   1153a:	fab3 f383 	clz	r3, r3
   1153e:	bf08      	it	eq
   11540:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   11544:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   11546:	7103      	strb	r3, [r0, #4]
   11548:	e6e0      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1154a:	4b1a      	ldr	r3, [pc, #104]	; (115b4 <hci_evt_encode+0x37c>)
   1154c:	6858      	ldr	r0, [r3, #4]
   1154e:	2100      	movs	r1, #0
   11550:	460a      	mov	r2, r1
   11552:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11556:	4313      	orrs	r3, r2
   11558:	f43f aed8 	beq.w	1130c <hci_evt_encode+0xd4>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   1155c:	4b16      	ldr	r3, [pc, #88]	; (115b8 <hci_evt_encode+0x380>)
   1155e:	6818      	ldr	r0, [r3, #0]
   11560:	460b      	mov	r3, r1
   11562:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11566:	4313      	orrs	r3, r2
   11568:	f43f aed0 	beq.w	1130c <hci_evt_encode+0xd4>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1156c:	4630      	mov	r0, r6
   1156e:	220c      	movs	r2, #12
   11570:	2105      	movs	r1, #5
   11572:	f7ff f851 	bl	10618 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   11576:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
   1157a:	4605      	mov	r5, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1157c:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   1157e:	f820 7b02 	strh.w	r7, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   11582:	f00d fc36 	bl	1edf2 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   11586:	f105 000a 	add.w	r0, r5, #10
   1158a:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1158e:	2202      	movs	r2, #2
   11590:	f00d fc2f 	bl	1edf2 <memcpy>
   11594:	e6ba      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   11596:	4b07      	ldr	r3, [pc, #28]	; (115b4 <hci_evt_encode+0x37c>)
   11598:	6819      	ldr	r1, [r3, #0]
   1159a:	2000      	movs	r0, #0
   1159c:	f001 0280 	and.w	r2, r1, #128	; 0x80
   115a0:	4603      	mov	r3, r0
   115a2:	4313      	orrs	r3, r2
   115a4:	f43f aeb2 	beq.w	1130c <hci_evt_encode+0xd4>
   115a8:	4632      	mov	r2, r6
   115aa:	4639      	mov	r1, r7
   115ac:	f7ff f84c 	bl	10648 <encrypt_change.part.0>
   115b0:	e6ac      	b.n	1130c <hci_evt_encode+0xd4>
   115b2:	bf00      	nop
   115b4:	20000190 	.word	0x20000190
   115b8:	20000198 	.word	0x20000198
   115bc:	00021aac 	.word	0x00021aac
   115c0:	00021aec 	.word	0x00021aec
   115c4:	00022860 	.word	0x00022860
   115c8:	20001814 	.word	0x20001814
   115cc:	20001168 	.word	0x20001168
   115d0:	00022824 	.word	0x00022824
   115d4:	000226e8 	.word	0x000226e8
   115d8:	00022678 	.word	0x00022678
		le_unknown_rsp(pdu_data, handle, buf);
   115dc:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   115e0:	290e      	cmp	r1, #14
   115e2:	f000 8081 	beq.w	116e8 <hci_evt_encode+0x4b0>
   115e6:	4b4b      	ldr	r3, [pc, #300]	; (11714 <hci_evt_encode+0x4dc>)
   115e8:	4a4b      	ldr	r2, [pc, #300]	; (11718 <hci_evt_encode+0x4e0>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   115ea:	484c      	ldr	r0, [pc, #304]	; (1171c <hci_evt_encode+0x4e4>)
   115ec:	1ad2      	subs	r2, r2, r3
   115ee:	08d2      	lsrs	r2, r2, #3
   115f0:	0192      	lsls	r2, r2, #6
   115f2:	f042 0202 	orr.w	r2, r2, #2
   115f6:	f00b fc47 	bl	1ce88 <log_1>
   115fa:	e687      	b.n	1130c <hci_evt_encode+0xd4>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   115fc:	460b      	mov	r3, r1
   115fe:	463a      	mov	r2, r7
   11600:	4601      	mov	r1, r0
   11602:	2000      	movs	r0, #0
   11604:	f7ff f83a 	bl	1067c <le_remote_feat_complete>
		break;
   11608:	e680      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1160a:	4b45      	ldr	r3, [pc, #276]	; (11720 <hci_evt_encode+0x4e8>)
   1160c:	6819      	ldr	r1, [r3, #0]
   1160e:	2300      	movs	r3, #0
   11610:	f001 0280 	and.w	r2, r1, #128	; 0x80
   11614:	4313      	orrs	r3, r2
   11616:	f43f ae79 	beq.w	1130c <hci_evt_encode+0xd4>
   1161a:	f894 0020 	ldrb.w	r0, [r4, #32]
   1161e:	4632      	mov	r2, r6
   11620:	4639      	mov	r1, r7
   11622:	f7ff f811 	bl	10648 <encrypt_change.part.0>
   11626:	e671      	b.n	1130c <hci_evt_encode+0xd4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11628:	4b3d      	ldr	r3, [pc, #244]	; (11720 <hci_evt_encode+0x4e8>)
   1162a:	6858      	ldr	r0, [r3, #4]
   1162c:	2100      	movs	r1, #0
   1162e:	460a      	mov	r2, r1
   11630:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
   11634:	4313      	orrs	r3, r2
   11636:	d01e      	beq.n	11676 <hci_evt_encode+0x43e>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   11638:	4b3a      	ldr	r3, [pc, #232]	; (11724 <hci_evt_encode+0x4ec>)
   1163a:	6818      	ldr	r0, [r3, #0]
   1163c:	460b      	mov	r3, r1
   1163e:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11642:	4313      	orrs	r3, r2
   11644:	d017      	beq.n	11676 <hci_evt_encode+0x43e>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
   11646:	4630      	mov	r0, r6
   11648:	220a      	movs	r2, #10
   1164a:	2106      	movs	r1, #6
   1164c:	f7fe ffe4 	bl	10618 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
   11650:	8007      	strh	r7, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   11652:	8c23      	ldrh	r3, [r4, #32]
   11654:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   11656:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   11658:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1165a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1165c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1165e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   11660:	8103      	strh	r3, [r0, #8]
   11662:	e653      	b.n	1130c <hci_evt_encode+0xd4>
		ll_rl_crpa_set(node_rx->peer_addr_type,
   11664:	7fa0      	ldrb	r0, [r4, #30]
   11666:	f104 0325 	add.w	r3, r4, #37	; 0x25
   1166a:	22ff      	movs	r2, #255	; 0xff
   1166c:	f104 011f 	add.w	r1, r4, #31
   11670:	f005 fea6 	bl	173c0 <ll_rl_crpa_set>
   11674:	e651      	b.n	1131a <hci_evt_encode+0xe2>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   11676:	2300      	movs	r3, #0
   11678:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1167c:	4638      	mov	r0, r7
   1167e:	9300      	str	r3, [sp, #0]
   11680:	221a      	movs	r2, #26
   11682:	2102      	movs	r1, #2
   11684:	f002 fb5e 	bl	13d44 <ll_conn_update>
		return;
   11688:	e640      	b.n	1130c <hci_evt_encode+0xd4>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1168a:	ea50 0301 	orrs.w	r3, r0, r1
   1168e:	d032      	beq.n	116f6 <hci_evt_encode+0x4be>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
   11690:	221e      	movs	r2, #30
   11692:	210a      	movs	r1, #10
   11694:	4630      	mov	r0, r6
   11696:	f7fe ffbf 	bl	10618 <meta_evt>
   1169a:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1169c:	4641      	mov	r1, r8
   1169e:	221e      	movs	r2, #30
   116a0:	f00d fbd2 	bl	1ee48 <memset>
			leecc->status = status;
   116a4:	7025      	strb	r5, [r4, #0]
			return;
   116a6:	e631      	b.n	1130c <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   116a8:	2212      	movs	r2, #18
   116aa:	2101      	movs	r1, #1
   116ac:	f7fe ffb4 	bl	10618 <meta_evt>
	lecc->status = 0x00;
   116b0:	7005      	strb	r5, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   116b2:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = node_rx->role;
   116b6:	7f63      	ldrb	r3, [r4, #29]
   116b8:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   116ba:	7fa3      	ldrb	r3, [r4, #30]
   116bc:	f003 0301 	and.w	r3, r3, #1
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   116c0:	4606      	mov	r6, r0
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
   116c2:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
   116c4:	4641      	mov	r1, r8
   116c6:	2206      	movs	r2, #6
   116c8:	3005      	adds	r0, #5
   116ca:	f00d fb92 	bl	1edf2 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   116ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   116d0:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
   116d2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   116d4:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
   116d8:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
   116dc:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
   116e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   116e4:	7473      	strb	r3, [r6, #17]
   116e6:	e611      	b.n	1130c <hci_evt_encode+0xd4>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   116e8:	4633      	mov	r3, r6
   116ea:	463a      	mov	r2, r7
   116ec:	2100      	movs	r1, #0
   116ee:	201a      	movs	r0, #26
   116f0:	f7fe ffc4 	bl	1067c <le_remote_feat_complete>
		break;
   116f4:	e60a      	b.n	1130c <hci_evt_encode+0xd4>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
   116f6:	2212      	movs	r2, #18
   116f8:	2101      	movs	r1, #1
   116fa:	4630      	mov	r0, r6
   116fc:	f7fe ff8c 	bl	10618 <meta_evt>
   11700:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   11702:	4641      	mov	r1, r8
   11704:	2212      	movs	r2, #18
   11706:	f00d fb9f 	bl	1ee48 <memset>
		lecc->status = status;
   1170a:	7025      	strb	r5, [r4, #0]
		return;
   1170c:	e5fe      	b.n	1130c <hci_evt_encode+0xd4>
		LL_ASSERT(0);
   1170e:	f640 73aa 	movw	r3, #4010	; 0xfaa
   11712:	e6ce      	b.n	114b2 <hci_evt_encode+0x27a>
   11714:	00021aac 	.word	0x00021aac
   11718:	00021aec 	.word	0x00021aec
   1171c:	0002288c 	.word	0x0002288c
   11720:	20000190 	.word	0x20000190
   11724:	20000198 	.word	0x20000198

00011728 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   11728:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
   1172a:	f100 0408 	add.w	r4, r0, #8
{
   1172e:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
   11730:	4620      	mov	r0, r4
   11732:	2102      	movs	r1, #2
{
   11734:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
   11736:	f00f fa17 	bl	20b68 <net_buf_simple_add>
   1173a:	4603      	mov	r3, r0
	hdr->evt = evt;
   1173c:	2213      	movs	r2, #19
	hdr->len = len;
   1173e:	2105      	movs	r1, #5
	hdr->evt = evt;
   11740:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
   11742:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
   11744:	4620      	mov	r0, r4
   11746:	f00f fa0f 	bl	20b68 <net_buf_simple_add>
	ep->num_handles = num_handles;
   1174a:	2301      	movs	r3, #1
   1174c:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1174e:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   11752:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   11756:	bd70      	pop	{r4, r5, r6, pc}

00011758 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   11758:	7903      	ldrb	r3, [r0, #4]
   1175a:	2b02      	cmp	r3, #2
   1175c:	d009      	beq.n	11772 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1175e:	2b0a      	cmp	r3, #10
   11760:	d005      	beq.n	1176e <hci_get_class+0x16>
   11762:	3b0b      	subs	r3, #11
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EXT */

		default:
			return HCI_CLASS_NONE;
   11764:	2b05      	cmp	r3, #5
   11766:	bf94      	ite	ls
   11768:	2003      	movls	r0, #3
   1176a:	2000      	movhi	r0, #0
   1176c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1176e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   11770:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   11772:	7f03      	ldrb	r3, [r0, #28]
   11774:	f003 0303 	and.w	r3, r3, #3
   11778:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
   1177a:	bf0c      	ite	eq
   1177c:	2004      	moveq	r0, #4
   1177e:	2005      	movne	r0, #5
   11780:	4770      	bx	lr
   11782:	bf00      	nop

00011784 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   11784:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   11786:	480b      	ldr	r0, [pc, #44]	; (117b4 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   11788:	490b      	ldr	r1, [pc, #44]	; (117b8 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1178a:	4a0c      	ldr	r2, [pc, #48]	; (117bc <hci_init+0x38>)
	conn_count = 0U;
   1178c:	4b0c      	ldr	r3, [pc, #48]	; (117c0 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
   1178e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   11792:	f641 75ff 	movw	r5, #8191	; 0x1fff
   11796:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1179a:	2400      	movs	r4, #0
   1179c:	2500      	movs	r5, #0
   1179e:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   117a2:	201f      	movs	r0, #31
   117a4:	2100      	movs	r1, #0
   117a6:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   117aa:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   117ac:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   117ae:	601a      	str	r2, [r3, #0]
}
   117b0:	4770      	bx	lr
   117b2:	bf00      	nop
   117b4:	20000190 	.word	0x20000190
   117b8:	20001168 	.word	0x20001168
   117bc:	20000198 	.word	0x20000198
   117c0:	20001814 	.word	0x20001814

000117c4 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   117c4:	f006 ba06 	b.w	17bd4 <lll_csrand_get>

000117c8 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   117c8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   117ca:	2300      	movs	r3, #0
   117cc:	f007 fdbc 	bl	19348 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   117d0:	2000      	movs	r0, #0
   117d2:	bd08      	pop	{r3, pc}

000117d4 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   117d4:	b510      	push	{r4, lr}
   117d6:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   117d8:	f006 fa1e 	bl	17c18 <lll_reset>
	LL_ASSERT(!err);
   117dc:	b950      	cbnz	r0, 117f4 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   117de:	f007 f817 	bl	18810 <lll_adv_reset>
	LL_ASSERT(!err);
   117e2:	b9c0      	cbnz	r0, 11816 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   117e4:	f007 f8cc 	bl	18980 <lll_conn_reset>
	LL_ASSERT(!err);
   117e8:	bb30      	cbnz	r0, 11838 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   117ea:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   117ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   117f0:	f00a baa8 	b.w	1bd44 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   117f4:	4a19      	ldr	r2, [pc, #100]	; (1185c <perform_lll_reset+0x88>)
   117f6:	491a      	ldr	r1, [pc, #104]	; (11860 <perform_lll_reset+0x8c>)
   117f8:	481a      	ldr	r0, [pc, #104]	; (11864 <perform_lll_reset+0x90>)
   117fa:	f44f 63a6 	mov.w	r3, #1328	; 0x530
   117fe:	f00a ffe0 	bl	1c7c2 <printk>
   11802:	4040      	eors	r0, r0
   11804:	f380 8811 	msr	BASEPRI, r0
   11808:	f04f 0003 	mov.w	r0, #3
   1180c:	df02      	svc	2
	err = lll_adv_reset();
   1180e:	f006 ffff 	bl	18810 <lll_adv_reset>
	LL_ASSERT(!err);
   11812:	2800      	cmp	r0, #0
   11814:	d0e6      	beq.n	117e4 <perform_lll_reset+0x10>
   11816:	4a11      	ldr	r2, [pc, #68]	; (1185c <perform_lll_reset+0x88>)
   11818:	4911      	ldr	r1, [pc, #68]	; (11860 <perform_lll_reset+0x8c>)
   1181a:	4812      	ldr	r0, [pc, #72]	; (11864 <perform_lll_reset+0x90>)
   1181c:	f240 5335 	movw	r3, #1333	; 0x535
   11820:	f00a ffcf 	bl	1c7c2 <printk>
   11824:	4040      	eors	r0, r0
   11826:	f380 8811 	msr	BASEPRI, r0
   1182a:	f04f 0003 	mov.w	r0, #3
   1182e:	df02      	svc	2
	err = lll_conn_reset();
   11830:	f007 f8a6 	bl	18980 <lll_conn_reset>
	LL_ASSERT(!err);
   11834:	2800      	cmp	r0, #0
   11836:	d0d8      	beq.n	117ea <perform_lll_reset+0x16>
   11838:	4a08      	ldr	r2, [pc, #32]	; (1185c <perform_lll_reset+0x88>)
   1183a:	4909      	ldr	r1, [pc, #36]	; (11860 <perform_lll_reset+0x8c>)
   1183c:	4809      	ldr	r0, [pc, #36]	; (11864 <perform_lll_reset+0x90>)
   1183e:	f240 5341 	movw	r3, #1345	; 0x541
   11842:	f00a ffbe 	bl	1c7c2 <printk>
   11846:	4040      	eors	r0, r0
   11848:	f380 8811 	msr	BASEPRI, r0
   1184c:	f04f 0003 	mov.w	r0, #3
   11850:	df02      	svc	2
   11852:	4620      	mov	r0, r4
}
   11854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11858:	f00a ba74 	b.w	1bd44 <z_impl_k_sem_give>
   1185c:	000228b8 	.word	0x000228b8
   11860:	000228f4 	.word	0x000228f4
   11864:	00022678 	.word	0x00022678

00011868 <disabled_cb>:
   11868:	f00a ba6c 	b.w	1bd44 <z_impl_k_sem_give>

0001186c <tx_cmplt_get>:
	}
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1186c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11870:	4f2f      	ldr	r7, [pc, #188]	; (11930 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   11872:	780b      	ldrb	r3, [r1, #0]
   11874:	783c      	ldrb	r4, [r7, #0]
{
   11876:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   11878:	7879      	ldrb	r1, [r7, #1]
   1187a:	4299      	cmp	r1, r3
   1187c:	bf9c      	itt	ls
   1187e:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   11880:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
   11882:	429a      	cmp	r2, r3
{
   11884:	4683      	mov	fp, r0
   11886:	4692      	mov	sl, r2
   11888:	d045      	beq.n	11916 <tx_cmplt_get+0xaa>
		return NULL;
	}

	i = *idx + 1;
   1188a:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1188c:	4e29      	ldr	r6, [pc, #164]	; (11934 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   1188e:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
   11890:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
   11894:	4291      	cmp	r1, r2
   11896:	bf08      	it	eq
   11898:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   1189a:	18f1      	adds	r1, r6, r3

	*idx = i;
   1189c:	702a      	strb	r2, [r5, #0]
   1189e:	d03a      	beq.n	11916 <tx_cmplt_get+0xaa>
		return 0;
	}

	*handle = tx->handle;
   118a0:	5af3      	ldrh	r3, [r6, r3]
   118a2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   118a4:	f04f 0800 	mov.w	r8, #0
   118a8:	f04f 0901 	mov.w	r9, #1
   118ac:	e022      	b.n	118f4 <tx_cmplt_get+0x88>
		struct node_tx *node_tx;
		struct pdu_data *p;

		node_tx = tx->node;
		p = (void *)node_tx->pdu;
		if (!node_tx || (node_tx == (void *)1) ||
   118ae:	b37b      	cbz	r3, 11910 <tx_cmplt_get+0xa4>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   118b0:	7903      	ldrb	r3, [r0, #4]
   118b2:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   118b6:	3b01      	subs	r3, #1
   118b8:	2b01      	cmp	r3, #1
   118ba:	d931      	bls.n	11920 <tx_cmplt_get+0xb4>
   118bc:	2302      	movs	r3, #2
   118be:	604b      	str	r3, [r1, #4]
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
			ll_tx_mem_release(node_tx);
   118c0:	f002 f9cc 	bl	13c5c <ll_tx_mem_release>
	if (*idx >= count) {
   118c4:	782b      	ldrb	r3, [r5, #0]
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   118c6:	7879      	ldrb	r1, [r7, #1]
   118c8:	7838      	ldrb	r0, [r7, #0]
   118ca:	4299      	cmp	r1, r3
   118cc:	bf9c      	itt	ls
   118ce:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
   118d0:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
   118d2:	459a      	cmp	sl, r3
   118d4:	d021      	beq.n	1191a <tx_cmplt_get+0xae>
	i = *idx + 1;
   118d6:	1c5c      	adds	r4, r3, #1
   118d8:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
   118da:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
   118de:	42a1      	cmp	r1, r4
   118e0:	bf08      	it	eq
   118e2:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   118e4:	18f1      	adds	r1, r6, r3
	*idx = i;
   118e6:	702c      	strb	r4, [r5, #0]
   118e8:	d017      	beq.n	1191a <tx_cmplt_get+0xae>
   118ea:	5af0      	ldrh	r0, [r6, r3]
   118ec:	f8bb 3000 	ldrh.w	r3, [fp]
   118f0:	4298      	cmp	r0, r3
   118f2:	d112      	bne.n	1191a <tx_cmplt_get+0xae>
		node_tx = tx->node;
   118f4:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   118f6:	2801      	cmp	r0, #1
   118f8:	f020 0303 	bic.w	r3, r0, #3
   118fc:	d8d7      	bhi.n	118ae <tx_cmplt_get+0x42>
			cmplt++;
   118fe:	f108 0801 	add.w	r8, r8, #1
   11902:	fa5f f888 	uxtb.w	r8, r8
   11906:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1190a:	2b00      	cmp	r3, #0
   1190c:	d0da      	beq.n	118c4 <tx_cmplt_get+0x58>
   1190e:	e7d7      	b.n	118c0 <tx_cmplt_get+0x54>
   11910:	2302      	movs	r3, #2
   11912:	604b      	str	r3, [r1, #4]
   11914:	e7d6      	b.n	118c4 <tx_cmplt_get+0x58>
		return 0;
   11916:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
   1191a:	4640      	mov	r0, r8
   1191c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   11920:	f108 0801 	add.w	r8, r8, #1
   11924:	fa5f f888 	uxtb.w	r8, r8
   11928:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
   1192c:	e7c8      	b.n	118c0 <tx_cmplt_get+0x54>
   1192e:	bf00      	nop
   11930:	200004f8 	.word	0x200004f8
   11934:	200004fc 	.word	0x200004fc

00011938 <rx_demux>:
		}
}
#endif /* CONFIG_BT_CONN */

static void rx_demux(void *param)
{
   11938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1193c:	4ca7      	ldr	r4, [pc, #668]	; (11bdc <rx_demux+0x2a4>)
	k_sem_give(sem_recv);
   1193e:	4ea8      	ldr	r6, [pc, #672]	; (11be0 <rx_demux+0x2a8>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   11940:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 11c04 <rx_demux+0x2cc>
{
   11944:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   11946:	e9d4 0100 	ldrd	r0, r1, [r4]
   1194a:	aa03      	add	r2, sp, #12
   1194c:	f7fd f924 	bl	eb98 <memq_peek>
		if (link) {
   11950:	4607      	mov	r7, r0
   11952:	2800      	cmp	r0, #0
   11954:	d040      	beq.n	119d8 <rx_demux+0xa0>
			LL_ASSERT(rx);
   11956:	9b03      	ldr	r3, [sp, #12]
   11958:	2b00      	cmp	r3, #0
   1195a:	f000 8130 	beq.w	11bbe <rx_demux+0x286>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1195e:	7818      	ldrb	r0, [r3, #0]
   11960:	aa04      	add	r2, sp, #16
   11962:	a902      	add	r1, sp, #8
   11964:	f004 fbda 	bl	1611c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   11968:	4605      	mov	r5, r0
   1196a:	2800      	cmp	r0, #0
   1196c:	d06a      	beq.n	11a44 <rx_demux+0x10c>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1196e:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
   11972:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   11976:	f891 9000 	ldrb.w	r9, [r1]
   1197a:	9205      	str	r2, [sp, #20]
   1197c:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   11980:	f10d 0814 	add.w	r8, sp, #20
   11984:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   11988:	f004 fbde 	bl	16148 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1198c:	4629      	mov	r1, r5
   1198e:	9a05      	ldr	r2, [sp, #20]
   11990:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   11994:	f004 fc20 	bl	161d8 <ull_conn_tx_ack>
   11998:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   1199a:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   1199c:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   1199e:	f004 fb97 	bl	160d0 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   119a2:	2001      	movs	r0, #1
   119a4:	f004 f84a 	bl	15a3c <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   119a8:	2101      	movs	r1, #1
   119aa:	4628      	mov	r0, r5
		if (conn) {
   119ac:	b10d      	cbz	r5, 119b2 <rx_demux+0x7a>
			ull_conn_tx_lll_enqueue(conn, 1);
   119ae:	f004 fa99 	bl	15ee4 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   119b2:	4642      	mov	r2, r8
   119b4:	4639      	mov	r1, r7
   119b6:	4648      	mov	r0, r9
   119b8:	f004 fbb0 	bl	1611c <ull_conn_ack_by_last_peek>
	} while (link);
   119bc:	4605      	mov	r5, r0
   119be:	2800      	cmp	r0, #0
   119c0:	d1e2      	bne.n	11988 <rx_demux+0x50>
	k_sem_give(sem_recv);
   119c2:	6830      	ldr	r0, [r6, #0]
   119c4:	f00a f9be 	bl	1bd44 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   119c8:	e9d4 0100 	ldrd	r0, r1, [r4]
   119cc:	aa03      	add	r2, sp, #12
   119ce:	f7fd f8e3 	bl	eb98 <memq_peek>
		if (link) {
   119d2:	4607      	mov	r7, r0
   119d4:	2800      	cmp	r0, #0
   119d6:	d1be      	bne.n	11956 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   119d8:	aa04      	add	r2, sp, #16
   119da:	a902      	add	r1, sp, #8
   119dc:	f10d 0007 	add.w	r0, sp, #7
   119e0:	f004 fb82 	bl	160e8 <ull_conn_ack_peek>
			if (link) {
   119e4:	4605      	mov	r5, r0
   119e6:	2800      	cmp	r0, #0
   119e8:	d06a      	beq.n	11ac0 <rx_demux+0x188>
				rx_demux_conn_tx_ack(ack_last, handle,
   119ea:	9a04      	ldr	r2, [sp, #16]
   119ec:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   119f0:	f89d 9007 	ldrb.w	r9, [sp, #7]
   119f4:	9205      	str	r2, [sp, #20]
   119f6:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   119fa:	f10d 0814 	add.w	r8, sp, #20
   119fe:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   11a02:	f004 fba1 	bl	16148 <ull_conn_ack_dequeue>
		conn = ull_conn_tx_ack(handle, link, node_tx);
   11a06:	4629      	mov	r1, r5
   11a08:	9a05      	ldr	r2, [sp, #20]
   11a0a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   11a0e:	f004 fbe3 	bl	161d8 <ull_conn_tx_ack>
   11a12:	4603      	mov	r3, r0
		ull_conn_link_tx_release(link);
   11a14:	4628      	mov	r0, r5
		conn = ull_conn_tx_ack(handle, link, node_tx);
   11a16:	461d      	mov	r5, r3
		ull_conn_link_tx_release(link);
   11a18:	f004 fb5a 	bl	160d0 <ull_conn_link_tx_release>
		ull_conn_tx_demux(1);
   11a1c:	2001      	movs	r0, #1
   11a1e:	f004 f80d 	bl	15a3c <ull_conn_tx_demux>
			ull_conn_tx_lll_enqueue(conn, 1);
   11a22:	2101      	movs	r1, #1
   11a24:	4628      	mov	r0, r5
		if (conn) {
   11a26:	b10d      	cbz	r5, 11a2c <rx_demux+0xf4>
			ull_conn_tx_lll_enqueue(conn, 1);
   11a28:	f004 fa5c 	bl	15ee4 <ull_conn_tx_lll_enqueue>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   11a2c:	4642      	mov	r2, r8
   11a2e:	4639      	mov	r1, r7
   11a30:	4648      	mov	r0, r9
   11a32:	f004 fb73 	bl	1611c <ull_conn_ack_by_last_peek>
	} while (link);
   11a36:	4605      	mov	r5, r0
   11a38:	2800      	cmp	r0, #0
   11a3a:	d1e2      	bne.n	11a02 <rx_demux+0xca>
	k_sem_give(sem_recv);
   11a3c:	6830      	ldr	r0, [r6, #0]
   11a3e:	f00a f981 	bl	1bd44 <z_impl_k_sem_give>
			if (nack) {
   11a42:	e7c1      	b.n	119c8 <rx_demux+0x90>
				nack = rx_demux_rx(link, rx);
   11a44:	9b03      	ldr	r3, [sp, #12]
   11a46:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   11a48:	791b      	ldrb	r3, [r3, #4]
   11a4a:	3b01      	subs	r3, #1
   11a4c:	2b0a      	cmp	r3, #10
   11a4e:	d807      	bhi.n	11a60 <rx_demux+0x128>
   11a50:	e8df f003 	tbb	[pc, r3]
   11a54:	06062f39 	.word	0x06062f39
   11a58:	06060606 	.word	0x06060606
   11a5c:	2506      	.short	0x2506
   11a5e:	14          	.byte	0x14
   11a5f:	00          	.byte	0x00
		LL_ASSERT(0);
   11a60:	4a60      	ldr	r2, [pc, #384]	; (11be4 <rx_demux+0x2ac>)
   11a62:	4961      	ldr	r1, [pc, #388]	; (11be8 <rx_demux+0x2b0>)
   11a64:	4861      	ldr	r0, [pc, #388]	; (11bec <rx_demux+0x2b4>)
   11a66:	f240 63e6 	movw	r3, #1766	; 0x6e6
   11a6a:	f00a feaa 	bl	1c7c2 <printk>
   11a6e:	4040      	eors	r0, r0
   11a70:	f380 8811 	msr	BASEPRI, r0
   11a74:	f04f 0003 	mov.w	r0, #3
   11a78:	df02      	svc	2
			if (nack) {
   11a7a:	e764      	b.n	11946 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11a7c:	4957      	ldr	r1, [pc, #348]	; (11bdc <rx_demux+0x2a4>)
   11a7e:	6860      	ldr	r0, [r4, #4]
   11a80:	2200      	movs	r2, #0
   11a82:	f7fd f891 	bl	eba8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11a86:	4b5a      	ldr	r3, [pc, #360]	; (11bf0 <rx_demux+0x2b8>)
		ll_rx_put(link, rx);
   11a88:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11a8a:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11a8c:	4a59      	ldr	r2, [pc, #356]	; (11bf4 <rx_demux+0x2bc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11a8e:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11a90:	4638      	mov	r0, r7
   11a92:	f7fd f879 	bl	eb88 <memq_enqueue>
	k_sem_give(sem_recv);
   11a96:	6830      	ldr	r0, [r6, #0]
   11a98:	f00a f954 	bl	1bd44 <z_impl_k_sem_give>
			if (nack) {
   11a9c:	e794      	b.n	119c8 <rx_demux+0x90>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11a9e:	494f      	ldr	r1, [pc, #316]	; (11bdc <rx_demux+0x2a4>)
   11aa0:	6860      	ldr	r0, [r4, #4]
   11aa2:	2200      	movs	r2, #0
   11aa4:	f7fd f880 	bl	eba8 <memq_dequeue>
		ull_conn_setup(link, rx);
   11aa8:	9905      	ldr	r1, [sp, #20]
   11aaa:	4638      	mov	r0, r7
   11aac:	f002 fbec 	bl	14288 <ull_conn_setup>
			if (nack) {
   11ab0:	e749      	b.n	11946 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   11ab2:	a905      	add	r1, sp, #20
   11ab4:	4638      	mov	r0, r7
   11ab6:	f002 fc09 	bl	142cc <ull_conn_rx>
		if (nack) {
   11aba:	2800      	cmp	r0, #0
   11abc:	f000 80c7 	beq.w	11c4e <rx_demux+0x316>
}
   11ac0:	b007      	add	sp, #28
   11ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11ac6:	4945      	ldr	r1, [pc, #276]	; (11bdc <rx_demux+0x2a4>)
   11ac8:	6860      	ldr	r0, [r4, #4]
   11aca:	2200      	movs	r2, #0
   11acc:	f7fd f86c 	bl	eba8 <memq_dequeue>
		rx_demux_event_done(link, rx);
   11ad0:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   11ad2:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   11ad6:	f8d5 a01c 	ldr.w	sl, [r5, #28]
	switch (done->extra.type) {
   11ada:	b17b      	cbz	r3, 11afc <rx_demux+0x1c4>
   11adc:	2b01      	cmp	r3, #1
   11ade:	f000 80b2 	beq.w	11c46 <rx_demux+0x30e>
		LL_ASSERT(0);
   11ae2:	4a40      	ldr	r2, [pc, #256]	; (11be4 <rx_demux+0x2ac>)
   11ae4:	4940      	ldr	r1, [pc, #256]	; (11be8 <rx_demux+0x2b0>)
   11ae6:	4841      	ldr	r0, [pc, #260]	; (11bec <rx_demux+0x2b4>)
   11ae8:	f240 731d 	movw	r3, #1821	; 0x71d
   11aec:	f00a fe69 	bl	1c7c2 <printk>
   11af0:	4040      	eors	r0, r0
   11af2:	f380 8811 	msr	BASEPRI, r0
   11af6:	f04f 0003 	mov.w	r0, #3
   11afa:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   11afc:	4a3e      	ldr	r2, [pc, #248]	; (11bf8 <rx_demux+0x2c0>)
   11afe:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   11b00:	f892 c001 	ldrb.w	ip, [r2, #1]
   11b04:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
   11b06:	1c4b      	adds	r3, r1, #1
   11b08:	b2db      	uxtb	r3, r3
		last = 0U;
   11b0a:	459c      	cmp	ip, r3
   11b0c:	bf08      	it	eq
   11b0e:	2300      	moveq	r3, #0
	if (last == first) {
   11b10:	4298      	cmp	r0, r3
	done->extra.type = 0U;
   11b12:	f04f 0c00 	mov.w	ip, #0
   11b16:	f885 c020 	strb.w	ip, [r5, #32]
   11b1a:	f000 80ac 	beq.w	11c76 <rx_demux+0x33e>
	done->hdr.link = link;
   11b1e:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11b20:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11b22:	fb00 2101 	mla	r1, r0, r1, r2
   11b26:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   11b28:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   11b2a:	4d34      	ldr	r5, [pc, #208]	; (11bfc <rx_demux+0x2c4>)
   11b2c:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
   11b2e:	78ea      	ldrb	r2, [r5, #3]
   11b30:	f895 c000 	ldrb.w	ip, [r5]
   11b34:	429a      	cmp	r2, r3
   11b36:	d02a      	beq.n	11b8e <rx_demux+0x256>
	return (void *)(fifo + first * size);
   11b38:	f105 0904 	add.w	r9, r5, #4
   11b3c:	fb03 9c0c 	mla	ip, r3, ip, r9
	while (next) {
   11b40:	f1bc 0f00 	cmp.w	ip, #0
   11b44:	d023      	beq.n	11b8e <rx_demux+0x256>
		uint8_t is_aborted = next->is_aborted;
   11b46:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
   11b4a:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
   11b4c:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   11b50:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
   11b54:	d558      	bpl.n	11c08 <rx_demux+0x2d0>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   11b56:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   11b58:	78ab      	ldrb	r3, [r5, #2]
   11b5a:	f895 c000 	ldrb.w	ip, [r5]
   11b5e:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   11b60:	429a      	cmp	r2, r3
   11b62:	d014      	beq.n	11b8e <rx_demux+0x256>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   11b64:	3301      	adds	r3, #1
   11b66:	b2db      	uxtb	r3, r3
	if (_first == count) {
   11b68:	4299      	cmp	r1, r3
   11b6a:	d065      	beq.n	11c38 <rx_demux+0x300>
	if (first == last) {
   11b6c:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   11b6e:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   11b70:	d00d      	beq.n	11b8e <rx_demux+0x256>
	return (void *)(fifo + first * size);
   11b72:	fb03 9c0c 	mla	ip, r3, ip, r9

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   11b76:	f1bc 0f00 	cmp.w	ip, #0
   11b7a:	d008      	beq.n	11b8e <rx_demux+0x256>
   11b7c:	2f00      	cmp	r7, #0
   11b7e:	d1e2      	bne.n	11b46 <rx_demux+0x20e>
   11b80:	f1b8 0f00 	cmp.w	r8, #0
   11b84:	d003      	beq.n	11b8e <rx_demux+0x256>
   11b86:	f89c 3020 	ldrb.w	r3, [ip, #32]
   11b8a:	07db      	lsls	r3, r3, #31
   11b8c:	d5db      	bpl.n	11b46 <rx_demux+0x20e>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   11b8e:	f1ba 0f00 	cmp.w	sl, #0
   11b92:	f43f aed8 	beq.w	11946 <rx_demux+0xe>
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_hdr->ref);
   11b96:	f89a 3000 	ldrb.w	r3, [sl]
   11b9a:	2b00      	cmp	r3, #0
   11b9c:	d079      	beq.n	11c92 <rx_demux+0x35a>
	return hdr->ref--;
   11b9e:	3b01      	subs	r3, #1
   11ba0:	b2db      	uxtb	r3, r3
   11ba2:	f88a 3000 	strb.w	r3, [sl]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   11ba6:	2b00      	cmp	r3, #0
   11ba8:	f47f aecd 	bne.w	11946 <rx_demux+0xe>
   11bac:	f8da 3004 	ldr.w	r3, [sl, #4]
   11bb0:	2b00      	cmp	r3, #0
   11bb2:	f43f aec8 	beq.w	11946 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   11bb6:	f8da 0008 	ldr.w	r0, [sl, #8]
   11bba:	4798      	blx	r3
			if (nack) {
   11bbc:	e6c3      	b.n	11946 <rx_demux+0xe>
			LL_ASSERT(rx);
   11bbe:	4a09      	ldr	r2, [pc, #36]	; (11be4 <rx_demux+0x2ac>)
   11bc0:	490f      	ldr	r1, [pc, #60]	; (11c00 <rx_demux+0x2c8>)
   11bc2:	480a      	ldr	r0, [pc, #40]	; (11bec <rx_demux+0x2b4>)
   11bc4:	f240 6332 	movw	r3, #1586	; 0x632
   11bc8:	f00a fdfb 	bl	1c7c2 <printk>
   11bcc:	4040      	eors	r0, r0
   11bce:	f380 8811 	msr	BASEPRI, r0
   11bd2:	f04f 0003 	mov.w	r0, #3
   11bd6:	df02      	svc	2
   11bd8:	9b03      	ldr	r3, [sp, #12]
   11bda:	e6c0      	b.n	1195e <rx_demux+0x26>
   11bdc:	20001ba8 	.word	0x20001ba8
   11be0:	20001bb0 	.word	0x20001bb0
   11be4:	000228b8 	.word	0x000228b8
   11be8:	000226e8 	.word	0x000226e8
   11bec:	00022678 	.word	0x00022678
   11bf0:	200004f8 	.word	0x200004f8
   11bf4:	20001ba4 	.word	0x20001ba4
   11bf8:	20000394 	.word	0x20000394
   11bfc:	200003d4 	.word	0x200003d4
   11c00:	000228fc 	.word	0x000228fc
   11c04:	2000055c 	.word	0x2000055c
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11c08:	465b      	mov	r3, fp
   11c0a:	463a      	mov	r2, r7
   11c0c:	4639      	mov	r1, r7
   11c0e:	2001      	movs	r0, #1
			mfy.param = next;
   11c10:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   11c14:	f7fd f82c 	bl	ec70 <mayfly_enqueue>
			LL_ASSERT(!ret);
   11c18:	2800      	cmp	r0, #0
   11c1a:	d09c      	beq.n	11b56 <rx_demux+0x21e>
   11c1c:	4a28      	ldr	r2, [pc, #160]	; (11cc0 <rx_demux+0x388>)
   11c1e:	4929      	ldr	r1, [pc, #164]	; (11cc4 <rx_demux+0x38c>)
   11c20:	4829      	ldr	r0, [pc, #164]	; (11cc8 <rx_demux+0x390>)
   11c22:	f240 7335 	movw	r3, #1845	; 0x735
   11c26:	f00a fdcc 	bl	1c7c2 <printk>
   11c2a:	4040      	eors	r0, r0
   11c2c:	f380 8811 	msr	BASEPRI, r0
   11c30:	f04f 0003 	mov.w	r0, #3
   11c34:	df02      	svc	2
   11c36:	e78e      	b.n	11b56 <rx_demux+0x21e>
	*first = _first; /* Write back read-index */
   11c38:	2300      	movs	r3, #0
   11c3a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   11c3c:	2a00      	cmp	r2, #0
   11c3e:	d0a6      	beq.n	11b8e <rx_demux+0x256>
	return (void *)(fifo + first * size);
   11c40:	f8df c09c 	ldr.w	ip, [pc, #156]	; 11ce0 <rx_demux+0x3a8>
   11c44:	e79a      	b.n	11b7c <rx_demux+0x244>
		ull_conn_done(done);
   11c46:	4628      	mov	r0, r5
   11c48:	f003 ffc6 	bl	15bd8 <ull_conn_done>
		break;
   11c4c:	e756      	b.n	11afc <rx_demux+0x1c4>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   11c4e:	491f      	ldr	r1, [pc, #124]	; (11ccc <rx_demux+0x394>)
   11c50:	4602      	mov	r2, r0
   11c52:	6860      	ldr	r0, [r4, #4]
   11c54:	f7fc ffa8 	bl	eba8 <memq_dequeue>
		if (rx) {
   11c58:	9905      	ldr	r1, [sp, #20]
   11c5a:	2900      	cmp	r1, #0
   11c5c:	f43f ae73 	beq.w	11946 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11c60:	4b1b      	ldr	r3, [pc, #108]	; (11cd0 <rx_demux+0x398>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11c62:	4a1c      	ldr	r2, [pc, #112]	; (11cd4 <rx_demux+0x39c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   11c64:	78db      	ldrb	r3, [r3, #3]
   11c66:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   11c68:	4638      	mov	r0, r7
   11c6a:	f7fc ff8d 	bl	eb88 <memq_enqueue>
	k_sem_give(sem_recv);
   11c6e:	6830      	ldr	r0, [r6, #0]
   11c70:	f00a f868 	bl	1bd44 <z_impl_k_sem_give>
			if (nack) {
   11c74:	e667      	b.n	11946 <rx_demux+0xe>
	LL_ASSERT(release == done);
   11c76:	4a12      	ldr	r2, [pc, #72]	; (11cc0 <rx_demux+0x388>)
   11c78:	4917      	ldr	r1, [pc, #92]	; (11cd8 <rx_demux+0x3a0>)
   11c7a:	4813      	ldr	r0, [pc, #76]	; (11cc8 <rx_demux+0x390>)
   11c7c:	f240 7324 	movw	r3, #1828	; 0x724
   11c80:	f00a fd9f 	bl	1c7c2 <printk>
   11c84:	4040      	eors	r0, r0
   11c86:	f380 8811 	msr	BASEPRI, r0
   11c8a:	f04f 0003 	mov.w	r0, #3
   11c8e:	df02      	svc	2
   11c90:	e74b      	b.n	11b2a <rx_demux+0x1f2>
	LL_ASSERT(ull_hdr->ref);
   11c92:	4a0b      	ldr	r2, [pc, #44]	; (11cc0 <rx_demux+0x388>)
   11c94:	4911      	ldr	r1, [pc, #68]	; (11cdc <rx_demux+0x3a4>)
   11c96:	480c      	ldr	r0, [pc, #48]	; (11cc8 <rx_demux+0x390>)
   11c98:	f240 7347 	movw	r3, #1863	; 0x747
   11c9c:	f00a fd91 	bl	1c7c2 <printk>
   11ca0:	4040      	eors	r0, r0
   11ca2:	f380 8811 	msr	BASEPRI, r0
   11ca6:	f04f 0003 	mov.w	r0, #3
   11caa:	df02      	svc	2
   11cac:	f89a 3000 	ldrb.w	r3, [sl]
   11cb0:	3b01      	subs	r3, #1
   11cb2:	b2db      	uxtb	r3, r3
   11cb4:	f88a 3000 	strb.w	r3, [sl]
	if (!ull_hdr->ref && ull_hdr->disabled_cb) {
   11cb8:	2b00      	cmp	r3, #0
   11cba:	f47f ae44 	bne.w	11946 <rx_demux+0xe>
   11cbe:	e775      	b.n	11bac <rx_demux+0x274>
   11cc0:	000228b8 	.word	0x000228b8
   11cc4:	00022900 	.word	0x00022900
   11cc8:	00022678 	.word	0x00022678
   11ccc:	20001ba8 	.word	0x20001ba8
   11cd0:	200004f8 	.word	0x200004f8
   11cd4:	20001ba4 	.word	0x20001ba4
   11cd8:	00022918 	.word	0x00022918
   11cdc:	00022908 	.word	0x00022908
   11ce0:	200003d8 	.word	0x200003d8

00011ce4 <ll_init>:
{
   11ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
   11ce8:	4b9a      	ldr	r3, [pc, #616]	; (11f54 <ll_init+0x270>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11cea:	4d9b      	ldr	r5, [pc, #620]	; (11f58 <ll_init+0x274>)
	sem_recv = sem_rx;
   11cec:	6018      	str	r0, [r3, #0]
{
   11cee:	b086      	sub	sp, #24
	cntr_init();
   11cf0:	f007 faae 	bl	19250 <cntr_init>
	mayfly_init();
   11cf4:	f7fc ff68 	bl	ebc8 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11cf8:	4898      	ldr	r0, [pc, #608]	; (11f5c <ll_init+0x278>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   11cfa:	4c99      	ldr	r4, [pc, #612]	; (11f60 <ll_init+0x27c>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11cfc:	4b99      	ldr	r3, [pc, #612]	; (11f64 <ll_init+0x280>)
   11cfe:	4a9a      	ldr	r2, [pc, #616]	; (11f68 <ll_init+0x284>)
   11d00:	9305      	str	r3, [sp, #20]
   11d02:	e9cd 0502 	strd	r0, r5, [sp, #8]
   11d06:	9204      	str	r2, [sp, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   11d08:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   11d0a:	2102      	movs	r1, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d0c:	220c      	movs	r2, #12
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   11d0e:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d10:	9201      	str	r2, [sp, #4]
   11d12:	9400      	str	r4, [sp, #0]
   11d14:	4a95      	ldr	r2, [pc, #596]	; (11f6c <ll_init+0x288>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   11d16:	7421      	strb	r1, [r4, #16]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   11d18:	7020      	strb	r0, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   11d1a:	7620      	strb	r0, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d1c:	2106      	movs	r1, #6
   11d1e:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   11d20:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   11d22:	f7fe f917 	bl	ff54 <ticker_init>
	LL_ASSERT(!err);
   11d26:	2800      	cmp	r0, #0
   11d28:	f040 80e5 	bne.w	11ef6 <ll_init+0x212>
	return z_impl_k_sem_init(sem, initial_count, limit);
   11d2c:	2201      	movs	r2, #1
   11d2e:	2100      	movs	r1, #0
   11d30:	488f      	ldr	r0, [pc, #572]	; (11f70 <ll_init+0x28c>)
   11d32:	f00f fafe 	bl	21332 <z_impl_k_sem_init>
	err = lll_init();
   11d36:	f005 ff1b 	bl	17b70 <lll_init>
	if (err) {
   11d3a:	4604      	mov	r4, r0
   11d3c:	b118      	cbz	r0, 11d46 <ll_init+0x62>
}
   11d3e:	4620      	mov	r0, r4
   11d40:	b006      	add	sp, #24
   11d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   11d46:	4b8b      	ldr	r3, [pc, #556]	; (11f74 <ll_init+0x290>)
		link = mem_acquire(&mem_link_done.free);
   11d48:	f8df 8230 	ldr.w	r8, [pc, #560]	; 11f7c <ll_init+0x298>
   11d4c:	4d8a      	ldr	r5, [pc, #552]	; (11f78 <ll_init+0x294>)
		rx = mem_acquire(&mem_done.free);
   11d4e:	4f89      	ldr	r7, [pc, #548]	; (11f74 <ll_init+0x290>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   11d50:	1d18      	adds	r0, r3, #4
   11d52:	2203      	movs	r2, #3
   11d54:	2134      	movs	r1, #52	; 0x34
   11d56:	f7fc fe85 	bl	ea64 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   11d5a:	4643      	mov	r3, r8
   11d5c:	2203      	movs	r2, #3
   11d5e:	1d18      	adds	r0, r3, #4
   11d60:	2108      	movs	r1, #8
   11d62:	f7fc fe7f 	bl	ea64 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   11d66:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   11d68:	786a      	ldrb	r2, [r5, #1]
   11d6a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   11d6c:	3401      	adds	r4, #1
   11d6e:	b2e4      	uxtb	r4, r4
		last = 0U;
   11d70:	42a2      	cmp	r2, r4
   11d72:	bf08      	it	eq
   11d74:	2400      	moveq	r4, #0
	if (last == first) {
   11d76:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   11d78:	4640      	mov	r0, r8
   11d7a:	d013      	beq.n	11da4 <ll_init+0xc0>
   11d7c:	f7fc fea0 	bl	eac0 <mem_acquire>
   11d80:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   11d82:	4638      	mov	r0, r7
		if (!link) {
   11d84:	b176      	cbz	r6, 11da4 <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
   11d86:	f7fc fe9b 	bl	eac0 <mem_acquire>
		if (!rx) {
   11d8a:	b138      	cbz	r0, 11d9c <ll_init+0xb8>
		rx->link = link;
   11d8c:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11d8e:	78ea      	ldrb	r2, [r5, #3]
   11d90:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11d92:	fb02 5303 	mla	r3, r2, r3, r5
   11d96:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   11d98:	70ec      	strb	r4, [r5, #3]
}
   11d9a:	e7e5      	b.n	11d68 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
   11d9c:	4977      	ldr	r1, [pc, #476]	; (11f7c <ll_init+0x298>)
   11d9e:	4630      	mov	r0, r6
   11da0:	f7fc fea8 	bl	eaf4 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   11da4:	4b76      	ldr	r3, [pc, #472]	; (11f80 <ll_init+0x29c>)
   11da6:	2208      	movs	r2, #8
   11da8:	1d18      	adds	r0, r3, #4
   11daa:	2148      	movs	r1, #72	; 0x48
   11dac:	f7fc fe5a 	bl	ea64 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   11db0:	4b74      	ldr	r3, [pc, #464]	; (11f84 <ll_init+0x2a0>)
   11db2:	220a      	movs	r2, #10
   11db4:	1d18      	adds	r0, r3, #4
   11db6:	2108      	movs	r1, #8
   11db8:	f7fc fe54 	bl	ea64 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   11dbc:	4871      	ldr	r0, [pc, #452]	; (11f84 <ll_init+0x2a0>)
   11dbe:	f7fc fe7f 	bl	eac0 <mem_acquire>
	LL_ASSERT(link);
   11dc2:	4604      	mov	r4, r0
   11dc4:	2800      	cmp	r0, #0
   11dc6:	f000 80b2 	beq.w	11f2e <ll_init+0x24a>
	MEMQ_INIT(ull_rx, link);
   11dca:	4a6f      	ldr	r2, [pc, #444]	; (11f88 <ll_init+0x2a4>)
   11dcc:	4620      	mov	r0, r4
   11dce:	1f11      	subs	r1, r2, #4
   11dd0:	f7fc fecc 	bl	eb6c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   11dd4:	486b      	ldr	r0, [pc, #428]	; (11f84 <ll_init+0x2a0>)
   11dd6:	f7fc fe73 	bl	eac0 <mem_acquire>
	LL_ASSERT(link);
   11dda:	4604      	mov	r4, r0
   11ddc:	2800      	cmp	r0, #0
   11dde:	f000 8098 	beq.w	11f12 <ll_init+0x22e>
	MEMQ_INIT(ll_rx, link);
   11de2:	4a6a      	ldr	r2, [pc, #424]	; (11f8c <ll_init+0x2a8>)
	mem_link_rx.quota_pdu = RX_CNT;
   11de4:	4d6a      	ldr	r5, [pc, #424]	; (11f90 <ll_init+0x2ac>)
   11de6:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 11fa8 <ll_init+0x2c4>
		rx = mem_acquire(&mem_pdu_rx.free);
   11dea:	f8df 8194 	ldr.w	r8, [pc, #404]	; 11f80 <ll_init+0x29c>
	MEMQ_INIT(ll_rx, link);
   11dee:	4620      	mov	r0, r4
   11df0:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   11df2:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
   11df4:	f7fc feba 	bl	eb6c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   11df8:	2307      	movs	r3, #7
   11dfa:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
   11dfe:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
   11e02:	2700      	movs	r7, #0
	if (last == count) {
   11e04:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   11e08:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
   11e0c:	3401      	adds	r4, #1
   11e0e:	b2e4      	uxtb	r4, r4
		last = 0U;
   11e10:	42a2      	cmp	r2, r4
   11e12:	bf08      	it	eq
   11e14:	2400      	moveq	r4, #0
	if (last == first) {
   11e16:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   11e18:	4630      	mov	r0, r6
   11e1a:	d03c      	beq.n	11e96 <ll_init+0x1b2>
   11e1c:	f7fc fe50 	bl	eac0 <mem_acquire>
   11e20:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11e22:	4640      	mov	r0, r8
		if (!link) {
   11e24:	f1ba 0f00 	cmp.w	sl, #0
   11e28:	d035      	beq.n	11e96 <ll_init+0x1b2>
		rx = mem_acquire(&mem_pdu_rx.free);
   11e2a:	f7fc fe49 	bl	eac0 <mem_acquire>
		if (!rx) {
   11e2e:	b370      	cbz	r0, 11e8e <ll_init+0x1aa>
		link->mem = NULL;
   11e30:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   11e34:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11e38:	f899 1003 	ldrb.w	r1, [r9, #3]
   11e3c:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
   11e40:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11e42:	fb01 9202 	mla	r2, r1, r2, r9
   11e46:	3b01      	subs	r3, #1
   11e48:	b2db      	uxtb	r3, r3
   11e4a:	6050      	str	r0, [r2, #4]
   11e4c:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11e4e:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
   11e52:	2b00      	cmp	r3, #0
   11e54:	d1d6      	bne.n	11e04 <ll_init+0x120>
	err = lll_adv_init();
   11e56:	f006 fcd9 	bl	1880c <lll_adv_init>
	if (err) {
   11e5a:	4604      	mov	r4, r0
   11e5c:	2800      	cmp	r0, #0
   11e5e:	f47f af6e 	bne.w	11d3e <ll_init+0x5a>
	err = ull_adv_init();
   11e62:	f001 f98b 	bl	1317c <ull_adv_init>
	if (err) {
   11e66:	4604      	mov	r4, r0
   11e68:	2800      	cmp	r0, #0
   11e6a:	f47f af68 	bne.w	11d3e <ll_init+0x5a>
	err = lll_conn_init();
   11e6e:	f006 fd85 	bl	1897c <lll_conn_init>
	if (err) {
   11e72:	4604      	mov	r4, r0
   11e74:	2800      	cmp	r0, #0
   11e76:	f47f af62 	bne.w	11d3e <ll_init+0x5a>
	err = ull_conn_init();
   11e7a:	f002 f97d 	bl	14178 <ull_conn_init>
	if (err) {
   11e7e:	4604      	mov	r4, r0
   11e80:	2800      	cmp	r0, #0
   11e82:	f47f af5c 	bne.w	11d3e <ll_init+0x5a>
		ull_filter_reset(true);
   11e86:	2001      	movs	r0, #1
   11e88:	f005 fb2e 	bl	174e8 <ull_filter_reset>
	return  0;
   11e8c:	e757      	b.n	11d3e <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
   11e8e:	493d      	ldr	r1, [pc, #244]	; (11f84 <ll_init+0x2a0>)
   11e90:	4650      	mov	r0, sl
   11e92:	f7fc fe2f 	bl	eaf4 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   11e96:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11e98:	1e5f      	subs	r7, r3, #1
   11e9a:	b2ff      	uxtb	r7, r7
   11e9c:	2b00      	cmp	r3, #0
   11e9e:	d0da      	beq.n	11e56 <ll_init+0x172>
   11ea0:	4e3c      	ldr	r6, [pc, #240]	; (11f94 <ll_init+0x2b0>)
		link = mem_acquire(&mem_link_rx.free);
   11ea2:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 11f84 <ll_init+0x2a0>
   11ea6:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   11ea8:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 11f80 <ll_init+0x29c>
	if (last == count) {
   11eac:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11eae:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   11eb0:	3401      	adds	r4, #1
   11eb2:	b2e4      	uxtb	r4, r4
		last = 0U;
   11eb4:	42a2      	cmp	r2, r4
   11eb6:	bf08      	it	eq
   11eb8:	2400      	moveq	r4, #0
	if (last == first) {
   11eba:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   11ebc:	4648      	mov	r0, r9
   11ebe:	d0ca      	beq.n	11e56 <ll_init+0x172>
   11ec0:	f7fc fdfe 	bl	eac0 <mem_acquire>
   11ec4:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   11ec6:	4640      	mov	r0, r8
		if (!link) {
   11ec8:	f1ba 0f00 	cmp.w	sl, #0
   11ecc:	d0c3      	beq.n	11e56 <ll_init+0x172>
		rx = mem_acquire(&mem_pdu_rx.free);
   11ece:	f7fc fdf7 	bl	eac0 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11ed2:	3f01      	subs	r7, #1
   11ed4:	b2ff      	uxtb	r7, r7
		if (!rx) {
   11ed6:	2800      	cmp	r0, #0
   11ed8:	d037      	beq.n	11f4a <ll_init+0x266>
		rx->link = link;
   11eda:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   11ede:	78f1      	ldrb	r1, [r6, #3]
   11ee0:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
   11ee2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   11ee4:	fb01 6202 	mla	r2, r1, r2, r6
   11ee8:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11eea:	2fff      	cmp	r7, #255	; 0xff
   11eec:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   11eee:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   11ef0:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   11ef2:	d1db      	bne.n	11eac <ll_init+0x1c8>
   11ef4:	e7af      	b.n	11e56 <ll_init+0x172>
	LL_ASSERT(!err);
   11ef6:	4a28      	ldr	r2, [pc, #160]	; (11f98 <ll_init+0x2b4>)
   11ef8:	4928      	ldr	r1, [pc, #160]	; (11f9c <ll_init+0x2b8>)
   11efa:	4829      	ldr	r0, [pc, #164]	; (11fa0 <ll_init+0x2bc>)
   11efc:	f44f 739d 	mov.w	r3, #314	; 0x13a
   11f00:	f00a fc5f 	bl	1c7c2 <printk>
   11f04:	4040      	eors	r0, r0
   11f06:	f380 8811 	msr	BASEPRI, r0
   11f0a:	f04f 0003 	mov.w	r0, #3
   11f0e:	df02      	svc	2
   11f10:	e70c      	b.n	11d2c <ll_init+0x48>
	LL_ASSERT(link);
   11f12:	4a21      	ldr	r2, [pc, #132]	; (11f98 <ll_init+0x2b4>)
   11f14:	4923      	ldr	r1, [pc, #140]	; (11fa4 <ll_init+0x2c0>)
   11f16:	4822      	ldr	r0, [pc, #136]	; (11fa0 <ll_init+0x2bc>)
   11f18:	f240 531e 	movw	r3, #1310	; 0x51e
   11f1c:	f00a fc51 	bl	1c7c2 <printk>
   11f20:	4040      	eors	r0, r0
   11f22:	f380 8811 	msr	BASEPRI, r0
   11f26:	f04f 0003 	mov.w	r0, #3
   11f2a:	df02      	svc	2
   11f2c:	e759      	b.n	11de2 <ll_init+0xfe>
	LL_ASSERT(link);
   11f2e:	4a1a      	ldr	r2, [pc, #104]	; (11f98 <ll_init+0x2b4>)
   11f30:	491c      	ldr	r1, [pc, #112]	; (11fa4 <ll_init+0x2c0>)
   11f32:	481b      	ldr	r0, [pc, #108]	; (11fa0 <ll_init+0x2bc>)
   11f34:	f240 5317 	movw	r3, #1303	; 0x517
   11f38:	f00a fc43 	bl	1c7c2 <printk>
   11f3c:	4040      	eors	r0, r0
   11f3e:	f380 8811 	msr	BASEPRI, r0
   11f42:	f04f 0003 	mov.w	r0, #3
   11f46:	df02      	svc	2
   11f48:	e73f      	b.n	11dca <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
   11f4a:	490e      	ldr	r1, [pc, #56]	; (11f84 <ll_init+0x2a0>)
   11f4c:	4650      	mov	r0, sl
   11f4e:	f7fc fdd1 	bl	eaf4 <mem_release>
			break;
   11f52:	e780      	b.n	11e56 <ll_init+0x172>
   11f54:	20001bb0 	.word	0x20001bb0
   11f58:	00019cb9 	.word	0x00019cb9
   11f5c:	20001cec 	.word	0x20001cec
   11f60:	20001f5c 	.word	0x20001f5c
   11f64:	00019dfd 	.word	0x00019dfd
   11f68:	00019d1d 	.word	0x00019d1d
   11f6c:	20001bcc 	.word	0x20001bcc
   11f70:	20001bb4 	.word	0x20001bb4
   11f74:	20001848 	.word	0x20001848
   11f78:	20000394 	.word	0x20000394
   11f7c:	200018e8 	.word	0x200018e8
   11f80:	2000195c 	.word	0x2000195c
   11f84:	20001908 	.word	0x20001908
   11f88:	20001bac 	.word	0x20001bac
   11f8c:	20001ba4 	.word	0x20001ba4
   11f90:	20001904 	.word	0x20001904
   11f94:	200003bc 	.word	0x200003bc
   11f98:	000228b8 	.word	0x000228b8
   11f9c:	000228f4 	.word	0x000228f4
   11fa0:	00022678 	.word	0x00022678
   11fa4:	00022b74 	.word	0x00022b74
   11fa8:	200003a8 	.word	0x200003a8

00011fac <ll_reset>:
{
   11fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb0:	b087      	sub	sp, #28
	err = ull_adv_reset();
   11fb2:	f001 f8e5 	bl	13180 <ull_adv_reset>
	LL_ASSERT(!err);
   11fb6:	2800      	cmp	r0, #0
   11fb8:	f040 80e4 	bne.w	12184 <ll_reset+0x1d8>
	err = ull_conn_reset();
   11fbc:	f002 f8de 	bl	1417c <ull_conn_reset>
	LL_ASSERT(!err);
   11fc0:	2800      	cmp	r0, #0
   11fc2:	f040 80f1 	bne.w	121a8 <ll_reset+0x1fc>
	MFIFO_INIT(tx_ack);
   11fc6:	4b97      	ldr	r3, [pc, #604]	; (12224 <ll_reset+0x278>)
	MFIFO_INIT(done);
   11fc8:	4e97      	ldr	r6, [pc, #604]	; (12228 <ll_reset+0x27c>)
	MFIFO_INIT(pdu_rx_free);
   11fca:	4f98      	ldr	r7, [pc, #608]	; (1222c <ll_reset+0x280>)
	MFIFO_INIT(ll_pdu_rx_free);
   11fcc:	4d98      	ldr	r5, [pc, #608]	; (12230 <ll_reset+0x284>)
	MFIFO_INIT(tx_ack);
   11fce:	2400      	movs	r4, #0
   11fd0:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   11fd2:	4620      	mov	r0, r4
   11fd4:	f005 fa88 	bl	174e8 <ull_filter_reset>
	MFIFO_INIT(prep);
   11fd8:	4b96      	ldr	r3, [pc, #600]	; (12234 <ll_reset+0x288>)
	MFIFO_INIT(done);
   11fda:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
   11fdc:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
   11fde:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   11fe0:	806c      	strh	r4, [r5, #2]
   11fe2:	2201      	movs	r2, #1
   11fe4:	4621      	mov	r1, r4
   11fe6:	4668      	mov	r0, sp
   11fe8:	f00f f9a3 	bl	21332 <z_impl_k_sem_init>
		mfy.param = &sem;
   11fec:	4b92      	ldr	r3, [pc, #584]	; (12238 <ll_reset+0x28c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   11fee:	4622      	mov	r2, r4
   11ff0:	4621      	mov	r1, r4
   11ff2:	2003      	movs	r0, #3
		mfy.param = &sem;
   11ff4:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   11ff8:	f7fc fe3a 	bl	ec70 <mayfly_enqueue>
		LL_ASSERT(!retval);
   11ffc:	2800      	cmp	r0, #0
   11ffe:	f040 80e1 	bne.w	121c4 <ll_reset+0x218>
	return z_impl_k_sem_take(sem, timeout);
   12002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1200a:	4668      	mov	r0, sp
   1200c:	f009 fec0 	bl	1bd90 <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   12010:	4b8a      	ldr	r3, [pc, #552]	; (1223c <ll_reset+0x290>)
		link = mem_acquire(&mem_link_done.free);
   12012:	f8df 922c 	ldr.w	r9, [pc, #556]	; 12240 <ll_reset+0x294>
		rx = mem_acquire(&mem_done.free);
   12016:	f8df 8224 	ldr.w	r8, [pc, #548]	; 1223c <ll_reset+0x290>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1201a:	1d18      	adds	r0, r3, #4
   1201c:	2203      	movs	r2, #3
   1201e:	2134      	movs	r1, #52	; 0x34
   12020:	f7fc fd20 	bl	ea64 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   12024:	464b      	mov	r3, r9
   12026:	2203      	movs	r2, #3
   12028:	1d18      	adds	r0, r3, #4
   1202a:	2108      	movs	r1, #8
   1202c:	f7fc fd1a 	bl	ea64 <mem_init>
static inline void done_alloc(void)
   12030:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   12032:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   12034:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
   12036:	3401      	adds	r4, #1
   12038:	b2e4      	uxtb	r4, r4
		last = 0U;
   1203a:	42a2      	cmp	r2, r4
   1203c:	bf08      	it	eq
   1203e:	2400      	moveq	r4, #0
	if (last == first) {
   12040:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   12042:	4648      	mov	r0, r9
   12044:	d016      	beq.n	12074 <ll_reset+0xc8>
   12046:	f7fc fd3b 	bl	eac0 <mem_acquire>
   1204a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
   1204c:	4640      	mov	r0, r8
		if (!link) {
   1204e:	f1ba 0f00 	cmp.w	sl, #0
   12052:	d00f      	beq.n	12074 <ll_reset+0xc8>
		rx = mem_acquire(&mem_done.free);
   12054:	f7fc fd34 	bl	eac0 <mem_acquire>
		if (!rx) {
   12058:	b140      	cbz	r0, 1206c <ll_reset+0xc0>
		rx->link = link;
   1205a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1205e:	78f2      	ldrb	r2, [r6, #3]
   12060:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12062:	fb02 6303 	mla	r3, r2, r3, r6
   12066:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   12068:	70f4      	strb	r4, [r6, #3]
}
   1206a:	e7e2      	b.n	12032 <ll_reset+0x86>
			mem_release(link, &mem_link_done.free);
   1206c:	4974      	ldr	r1, [pc, #464]	; (12240 <ll_reset+0x294>)
   1206e:	4650      	mov	r0, sl
   12070:	f7fc fd40 	bl	eaf4 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   12074:	4b73      	ldr	r3, [pc, #460]	; (12244 <ll_reset+0x298>)
   12076:	2208      	movs	r2, #8
   12078:	1d18      	adds	r0, r3, #4
   1207a:	2148      	movs	r1, #72	; 0x48
   1207c:	f7fc fcf2 	bl	ea64 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   12080:	4b71      	ldr	r3, [pc, #452]	; (12248 <ll_reset+0x29c>)
   12082:	220a      	movs	r2, #10
   12084:	1d18      	adds	r0, r3, #4
   12086:	2108      	movs	r1, #8
   12088:	f7fc fcec 	bl	ea64 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1208c:	486e      	ldr	r0, [pc, #440]	; (12248 <ll_reset+0x29c>)
   1208e:	f7fc fd17 	bl	eac0 <mem_acquire>
	LL_ASSERT(link);
   12092:	4604      	mov	r4, r0
   12094:	2800      	cmp	r0, #0
   12096:	f000 80b1 	beq.w	121fc <ll_reset+0x250>
	MEMQ_INIT(ull_rx, link);
   1209a:	4a6c      	ldr	r2, [pc, #432]	; (1224c <ll_reset+0x2a0>)
   1209c:	4620      	mov	r0, r4
   1209e:	1f11      	subs	r1, r2, #4
   120a0:	f7fc fd64 	bl	eb6c <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   120a4:	4868      	ldr	r0, [pc, #416]	; (12248 <ll_reset+0x29c>)
   120a6:	f7fc fd0b 	bl	eac0 <mem_acquire>
	LL_ASSERT(link);
   120aa:	4604      	mov	r4, r0
   120ac:	2800      	cmp	r0, #0
   120ae:	f000 8097 	beq.w	121e0 <ll_reset+0x234>
	MEMQ_INIT(ll_rx, link);
   120b2:	4a67      	ldr	r2, [pc, #412]	; (12250 <ll_reset+0x2a4>)
	mem_link_rx.quota_pdu = RX_CNT;
   120b4:	4e67      	ldr	r6, [pc, #412]	; (12254 <ll_reset+0x2a8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   120b6:	f8df a18c 	ldr.w	sl, [pc, #396]	; 12244 <ll_reset+0x298>
	MEMQ_INIT(ll_rx, link);
   120ba:	4620      	mov	r0, r4
   120bc:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
   120be:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
   120c0:	f7fc fd54 	bl	eb6c <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   120c4:	2307      	movs	r3, #7
   120c6:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
   120ca:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
   120cc:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   120d0:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   120d2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   120d4:	3401      	adds	r4, #1
   120d6:	b2e4      	uxtb	r4, r4
		last = 0U;
   120d8:	42a2      	cmp	r2, r4
   120da:	bf08      	it	eq
   120dc:	2400      	moveq	r4, #0
	if (last == first) {
   120de:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   120e0:	4640      	mov	r0, r8
   120e2:	d020      	beq.n	12126 <ll_reset+0x17a>
   120e4:	f7fc fcec 	bl	eac0 <mem_acquire>
   120e8:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   120ea:	4650      	mov	r0, sl
		if (!link) {
   120ec:	f1bb 0f00 	cmp.w	fp, #0
   120f0:	d019      	beq.n	12126 <ll_reset+0x17a>
		rx = mem_acquire(&mem_pdu_rx.free);
   120f2:	f7fc fce5 	bl	eac0 <mem_acquire>
		if (!rx) {
   120f6:	b190      	cbz	r0, 1211e <ll_reset+0x172>
		link->mem = NULL;
   120f8:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
   120fc:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12100:	78e9      	ldrb	r1, [r5, #3]
   12102:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   12104:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12106:	fb01 5202 	mla	r2, r1, r2, r5
   1210a:	3b01      	subs	r3, #1
   1210c:	b2db      	uxtb	r3, r3
   1210e:	6050      	str	r0, [r2, #4]
   12110:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12112:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   12114:	2b00      	cmp	r3, #0
   12116:	d1db      	bne.n	120d0 <ll_reset+0x124>
}
   12118:	b007      	add	sp, #28
   1211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   1211e:	494a      	ldr	r1, [pc, #296]	; (12248 <ll_reset+0x29c>)
   12120:	4658      	mov	r0, fp
   12122:	f7fc fce7 	bl	eaf4 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   12126:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12128:	1e5d      	subs	r5, r3, #1
   1212a:	b2ed      	uxtb	r5, r5
   1212c:	2b00      	cmp	r3, #0
   1212e:	d0f3      	beq.n	12118 <ll_reset+0x16c>
   12130:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
   12132:	f8df 9114 	ldr.w	r9, [pc, #276]	; 12248 <ll_reset+0x29c>
		rx = mem_acquire(&mem_pdu_rx.free);
   12136:	f8df 810c 	ldr.w	r8, [pc, #268]	; 12244 <ll_reset+0x298>
	if (last == count) {
   1213a:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1213c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1213e:	3401      	adds	r4, #1
   12140:	b2e4      	uxtb	r4, r4
		last = 0U;
   12142:	42a2      	cmp	r2, r4
   12144:	bf08      	it	eq
   12146:	2400      	moveq	r4, #0
	if (last == first) {
   12148:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1214a:	4648      	mov	r0, r9
   1214c:	d0e4      	beq.n	12118 <ll_reset+0x16c>
   1214e:	f7fc fcb7 	bl	eac0 <mem_acquire>
   12152:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12154:	4640      	mov	r0, r8
		if (!link) {
   12156:	f1ba 0f00 	cmp.w	sl, #0
   1215a:	d0dd      	beq.n	12118 <ll_reset+0x16c>
		rx = mem_acquire(&mem_pdu_rx.free);
   1215c:	f7fc fcb0 	bl	eac0 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12160:	3d01      	subs	r5, #1
   12162:	b2ed      	uxtb	r5, r5
		if (!rx) {
   12164:	2800      	cmp	r0, #0
   12166:	d057      	beq.n	12218 <ll_reset+0x26c>
		rx->link = link;
   12168:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1216c:	78f9      	ldrb	r1, [r7, #3]
   1216e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   12170:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12172:	fb01 7202 	mla	r2, r1, r2, r7
   12176:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12178:	2dff      	cmp	r5, #255	; 0xff
   1217a:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   1217c:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1217e:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12180:	d1db      	bne.n	1213a <ll_reset+0x18e>
   12182:	e7c9      	b.n	12118 <ll_reset+0x16c>
	LL_ASSERT(!err);
   12184:	4a34      	ldr	r2, [pc, #208]	; (12258 <ll_reset+0x2ac>)
   12186:	4935      	ldr	r1, [pc, #212]	; (1225c <ll_reset+0x2b0>)
   12188:	4835      	ldr	r0, [pc, #212]	; (12260 <ll_reset+0x2b4>)
   1218a:	f44f 73c4 	mov.w	r3, #392	; 0x188
   1218e:	f00a fb18 	bl	1c7c2 <printk>
   12192:	4040      	eors	r0, r0
   12194:	f380 8811 	msr	BASEPRI, r0
   12198:	f04f 0003 	mov.w	r0, #3
   1219c:	df02      	svc	2
	err = ull_conn_reset();
   1219e:	f001 ffed 	bl	1417c <ull_conn_reset>
	LL_ASSERT(!err);
   121a2:	2800      	cmp	r0, #0
   121a4:	f43f af0f 	beq.w	11fc6 <ll_reset+0x1a>
   121a8:	4a2b      	ldr	r2, [pc, #172]	; (12258 <ll_reset+0x2ac>)
   121aa:	492c      	ldr	r1, [pc, #176]	; (1225c <ll_reset+0x2b0>)
   121ac:	482c      	ldr	r0, [pc, #176]	; (12260 <ll_reset+0x2b4>)
   121ae:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   121b2:	f00a fb06 	bl	1c7c2 <printk>
   121b6:	4040      	eors	r0, r0
   121b8:	f380 8811 	msr	BASEPRI, r0
   121bc:	f04f 0003 	mov.w	r0, #3
   121c0:	df02      	svc	2
   121c2:	e700      	b.n	11fc6 <ll_reset+0x1a>
		LL_ASSERT(!retval);
   121c4:	4a24      	ldr	r2, [pc, #144]	; (12258 <ll_reset+0x2ac>)
   121c6:	4927      	ldr	r1, [pc, #156]	; (12264 <ll_reset+0x2b8>)
   121c8:	4825      	ldr	r0, [pc, #148]	; (12260 <ll_reset+0x2b4>)
   121ca:	f44f 73ed 	mov.w	r3, #474	; 0x1da
   121ce:	f00a faf8 	bl	1c7c2 <printk>
   121d2:	4040      	eors	r0, r0
   121d4:	f380 8811 	msr	BASEPRI, r0
   121d8:	f04f 0003 	mov.w	r0, #3
   121dc:	df02      	svc	2
   121de:	e710      	b.n	12002 <ll_reset+0x56>
	LL_ASSERT(link);
   121e0:	4a1d      	ldr	r2, [pc, #116]	; (12258 <ll_reset+0x2ac>)
   121e2:	4921      	ldr	r1, [pc, #132]	; (12268 <ll_reset+0x2bc>)
   121e4:	481e      	ldr	r0, [pc, #120]	; (12260 <ll_reset+0x2b4>)
   121e6:	f240 531e 	movw	r3, #1310	; 0x51e
   121ea:	f00a faea 	bl	1c7c2 <printk>
   121ee:	4040      	eors	r0, r0
   121f0:	f380 8811 	msr	BASEPRI, r0
   121f4:	f04f 0003 	mov.w	r0, #3
   121f8:	df02      	svc	2
   121fa:	e75a      	b.n	120b2 <ll_reset+0x106>
	LL_ASSERT(link);
   121fc:	4a16      	ldr	r2, [pc, #88]	; (12258 <ll_reset+0x2ac>)
   121fe:	491a      	ldr	r1, [pc, #104]	; (12268 <ll_reset+0x2bc>)
   12200:	4817      	ldr	r0, [pc, #92]	; (12260 <ll_reset+0x2b4>)
   12202:	f240 5317 	movw	r3, #1303	; 0x517
   12206:	f00a fadc 	bl	1c7c2 <printk>
   1220a:	4040      	eors	r0, r0
   1220c:	f380 8811 	msr	BASEPRI, r0
   12210:	f04f 0003 	mov.w	r0, #3
   12214:	df02      	svc	2
   12216:	e740      	b.n	1209a <ll_reset+0xee>
			mem_release(link, &mem_link_rx.free);
   12218:	490b      	ldr	r1, [pc, #44]	; (12248 <ll_reset+0x29c>)
   1221a:	4650      	mov	r0, sl
   1221c:	f7fc fc6a 	bl	eaf4 <mem_release>
			break;
   12220:	e77a      	b.n	12118 <ll_reset+0x16c>
   12222:	bf00      	nop
   12224:	200004f8 	.word	0x200004f8
   12228:	20000394 	.word	0x20000394
   1222c:	200003bc 	.word	0x200003bc
   12230:	200003a8 	.word	0x200003a8
   12234:	200003d4 	.word	0x200003d4
   12238:	2000051c 	.word	0x2000051c
   1223c:	20001848 	.word	0x20001848
   12240:	200018e8 	.word	0x200018e8
   12244:	2000195c 	.word	0x2000195c
   12248:	20001908 	.word	0x20001908
   1224c:	20001bac 	.word	0x20001bac
   12250:	20001ba4 	.word	0x20001ba4
   12254:	20001904 	.word	0x20001904
   12258:	000228b8 	.word	0x000228b8
   1225c:	000228f4 	.word	0x000228f4
   12260:	00022678 	.word	0x00022678
   12264:	00022928 	.word	0x00022928
   12268:	00022b74 	.word	0x00022b74

0001226c <ll_rx_get>:
{
   1226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12270:	b085      	sub	sp, #20
   12272:	e9cd 0100 	strd	r0, r1, [sp]
   12276:	4c5f      	ldr	r4, [pc, #380]	; (123f4 <ll_rx_get+0x188>)
				mem_release(link, &mem_link_rx.free);
   12278:	4d5f      	ldr	r5, [pc, #380]	; (123f8 <ll_rx_get+0x18c>)
   1227a:	f8df 9184 	ldr.w	r9, [pc, #388]	; 12400 <ll_rx_get+0x194>
	*node_rx = NULL;
   1227e:	9a00      	ldr	r2, [sp, #0]
   12280:	2300      	movs	r3, #0
   12282:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   12284:	e9d9 0100 	ldrd	r0, r1, [r9]
   12288:	aa03      	add	r2, sp, #12
   1228a:	f7fc fc85 	bl	eb98 <memq_peek>
	if (link) {
   1228e:	4607      	mov	r7, r0
   12290:	2800      	cmp	r0, #0
   12292:	f000 80a4 	beq.w	123de <ll_rx_get+0x172>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   12296:	9b03      	ldr	r3, [sp, #12]
   12298:	4958      	ldr	r1, [pc, #352]	; (123fc <ll_rx_get+0x190>)
   1229a:	781a      	ldrb	r2, [r3, #0]
   1229c:	9801      	ldr	r0, [sp, #4]
   1229e:	f7ff fae5 	bl	1186c <tx_cmplt_get>
		if (!cmplt) {
   122a2:	4603      	mov	r3, r0
   122a4:	2800      	cmp	r0, #0
   122a6:	f040 8091 	bne.w	123cc <ll_rx_get+0x160>
			f = mfifo_tx_ack.f;
   122aa:	78a2      	ldrb	r2, [r4, #2]
   122ac:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   122b0:	78e2      	ldrb	r2, [r4, #3]
   122b2:	f10d 0109 	add.w	r1, sp, #9
   122b6:	f10d 000a 	add.w	r0, sp, #10
   122ba:	461e      	mov	r6, r3
   122bc:	f7ff fad6 	bl	1186c <tx_cmplt_get>
   122c0:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
   122c4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
   122c8:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
   122ca:	d1f1      	bne.n	122b0 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
   122cc:	9b03      	ldr	r3, [sp, #12]
   122ce:	7919      	ldrb	r1, [r3, #4]
   122d0:	2903      	cmp	r1, #3
   122d2:	d178      	bne.n	123c6 <ll_rx_get+0x15a>
				(void)memq_dequeue(memq_ll_rx.tail,
   122d4:	494a      	ldr	r1, [pc, #296]	; (12400 <ll_rx_get+0x194>)
   122d6:	f8d9 0004 	ldr.w	r0, [r9, #4]
   122da:	f7fc fc65 	bl	eba8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   122de:	4949      	ldr	r1, [pc, #292]	; (12404 <ll_rx_get+0x198>)
   122e0:	4638      	mov	r0, r7
   122e2:	f7fc fc07 	bl	eaf4 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   122e6:	782b      	ldrb	r3, [r5, #0]
   122e8:	2b06      	cmp	r3, #6
   122ea:	d85d      	bhi.n	123a8 <ll_rx_get+0x13c>
	mem_link_rx.quota_pdu += delta;
   122ec:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   122ee:	4946      	ldr	r1, [pc, #280]	; (12408 <ll_rx_get+0x19c>)
   122f0:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   122f2:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   122f4:	f7fc fbfe 	bl	eaf4 <mem_release>
	while (mem_link_rx.quota_pdu &&
   122f8:	782b      	ldrb	r3, [r5, #0]
   122fa:	2b00      	cmp	r3, #0
   122fc:	d0bf      	beq.n	1227e <ll_rx_get+0x12>
   122fe:	4f43      	ldr	r7, [pc, #268]	; (1240c <ll_rx_get+0x1a0>)
		link = mem_acquire(&mem_link_rx.free);
   12300:	f8df 8100 	ldr.w	r8, [pc, #256]	; 12404 <ll_rx_get+0x198>
   12304:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12306:	f8df a100 	ldr.w	sl, [pc, #256]	; 12408 <ll_rx_get+0x19c>
	if (last == count) {
   1230a:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1230c:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1230e:	3601      	adds	r6, #1
   12310:	b2f6      	uxtb	r6, r6
		last = 0U;
   12312:	42b2      	cmp	r2, r6
   12314:	bf08      	it	eq
   12316:	2600      	moveq	r6, #0
	if (last == first) {
   12318:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
   1231a:	4640      	mov	r0, r8
   1231c:	d01f      	beq.n	1235e <ll_rx_get+0xf2>
   1231e:	f7fc fbcf 	bl	eac0 <mem_acquire>
   12322:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12324:	4650      	mov	r0, sl
		if (!link) {
   12326:	f1bb 0f00 	cmp.w	fp, #0
   1232a:	d018      	beq.n	1235e <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
   1232c:	f7fc fbc8 	bl	eac0 <mem_acquire>
		if (!rx) {
   12330:	b188      	cbz	r0, 12356 <ll_rx_get+0xea>
		link->mem = NULL;
   12332:	2300      	movs	r3, #0
   12334:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
   12338:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1233c:	78f9      	ldrb	r1, [r7, #3]
   1233e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   12340:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   12342:	fb01 7202 	mla	r2, r1, r2, r7
   12346:	3b01      	subs	r3, #1
   12348:	b2db      	uxtb	r3, r3
   1234a:	6050      	str	r0, [r2, #4]
   1234c:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1234e:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
   12350:	2b00      	cmp	r3, #0
   12352:	d1da      	bne.n	1230a <ll_rx_get+0x9e>
   12354:	e793      	b.n	1227e <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
   12356:	492b      	ldr	r1, [pc, #172]	; (12404 <ll_rx_get+0x198>)
   12358:	4658      	mov	r0, fp
   1235a:	f7fc fbcb 	bl	eaf4 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1235e:	782b      	ldrb	r3, [r5, #0]
   12360:	2b00      	cmp	r3, #0
   12362:	d08c      	beq.n	1227e <ll_rx_get+0x12>
   12364:	4f2a      	ldr	r7, [pc, #168]	; (12410 <ll_rx_get+0x1a4>)
	last = last + 1;
   12366:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
   12368:	787a      	ldrb	r2, [r7, #1]
   1236a:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
   1236c:	3601      	adds	r6, #1
   1236e:	b2f6      	uxtb	r6, r6
		last = 0U;
   12370:	42b2      	cmp	r2, r6
   12372:	bf08      	it	eq
   12374:	2600      	moveq	r6, #0
	if (last == first) {
   12376:	429e      	cmp	r6, r3
   12378:	d081      	beq.n	1227e <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
   1237a:	4822      	ldr	r0, [pc, #136]	; (12404 <ll_rx_get+0x198>)
   1237c:	f7fc fba0 	bl	eac0 <mem_acquire>
		if (!link) {
   12380:	4680      	mov	r8, r0
   12382:	2800      	cmp	r0, #0
   12384:	f43f af7b 	beq.w	1227e <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
   12388:	481f      	ldr	r0, [pc, #124]	; (12408 <ll_rx_get+0x19c>)
   1238a:	f7fc fb99 	bl	eac0 <mem_acquire>
		if (!rx) {
   1238e:	b308      	cbz	r0, 123d4 <ll_rx_get+0x168>
		rx->link = link;
   12390:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12394:	78f9      	ldrb	r1, [r7, #3]
   12396:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
   12398:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1239a:	fb01 7202 	mla	r2, r1, r2, r7
   1239e:	3b01      	subs	r3, #1
   123a0:	6050      	str	r0, [r2, #4]
   123a2:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   123a4:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   123a6:	e76a      	b.n	1227e <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   123a8:	4a1a      	ldr	r2, [pc, #104]	; (12414 <ll_rx_get+0x1a8>)
   123aa:	491b      	ldr	r1, [pc, #108]	; (12418 <ll_rx_get+0x1ac>)
   123ac:	481b      	ldr	r0, [pc, #108]	; (1241c <ll_rx_get+0x1b0>)
   123ae:	f240 33c5 	movw	r3, #965	; 0x3c5
   123b2:	f00a fa06 	bl	1c7c2 <printk>
   123b6:	4040      	eors	r0, r0
   123b8:	f380 8811 	msr	BASEPRI, r0
   123bc:	f04f 0003 	mov.w	r0, #3
   123c0:	df02      	svc	2
   123c2:	782b      	ldrb	r3, [r5, #0]
   123c4:	e792      	b.n	122ec <ll_rx_get+0x80>
			*node_rx = rx;
   123c6:	9900      	ldr	r1, [sp, #0]
   123c8:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   123ca:	4613      	mov	r3, r2
}
   123cc:	4618      	mov	r0, r3
   123ce:	b005      	add	sp, #20
   123d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   123d4:	490b      	ldr	r1, [pc, #44]	; (12404 <ll_rx_get+0x198>)
   123d6:	4640      	mov	r0, r8
   123d8:	f7fc fb8c 	bl	eaf4 <mem_release>
			break;
   123dc:	e74f      	b.n	1227e <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   123de:	78e2      	ldrb	r2, [r4, #3]
   123e0:	4906      	ldr	r1, [pc, #24]	; (123fc <ll_rx_get+0x190>)
   123e2:	9801      	ldr	r0, [sp, #4]
   123e4:	f7ff fa42 	bl	1186c <tx_cmplt_get>
   123e8:	4603      	mov	r3, r0
}
   123ea:	4618      	mov	r0, r3
   123ec:	b005      	add	sp, #20
   123ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f2:	bf00      	nop
   123f4:	200004f8 	.word	0x200004f8
   123f8:	20001904 	.word	0x20001904
   123fc:	200004fa 	.word	0x200004fa
   12400:	20001ba0 	.word	0x20001ba0
   12404:	20001908 	.word	0x20001908
   12408:	2000195c 	.word	0x2000195c
   1240c:	200003a8 	.word	0x200003a8
   12410:	200003bc 	.word	0x200003bc
   12414:	000228b8 	.word	0x000228b8
   12418:	00022930 	.word	0x00022930
   1241c:	00022678 	.word	0x00022678

00012420 <ll_rx_dequeue>:
{
   12420:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   12422:	495c      	ldr	r1, [pc, #368]	; (12594 <ll_rx_dequeue+0x174>)
{
   12424:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   12426:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   12428:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1242a:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1242c:	aa01      	add	r2, sp, #4
   1242e:	f7fc fbbb 	bl	eba8 <memq_dequeue>
	LL_ASSERT(link);
   12432:	4604      	mov	r4, r0
   12434:	2800      	cmp	r0, #0
   12436:	d052      	beq.n	124de <ll_rx_dequeue+0xbe>
	mem_release(link, &mem_link_rx.free);
   12438:	4957      	ldr	r1, [pc, #348]	; (12598 <ll_rx_dequeue+0x178>)
   1243a:	4620      	mov	r0, r4
   1243c:	f7fc fb5a 	bl	eaf4 <mem_release>
	switch (rx->type) {
   12440:	9a01      	ldr	r2, [sp, #4]
   12442:	7913      	ldrb	r3, [r2, #4]
   12444:	2b10      	cmp	r3, #16
   12446:	d80e      	bhi.n	12466 <ll_rx_dequeue+0x46>
   12448:	e8df f003 	tbb	[pc, r3]
   1244c:	0d090d09 	.word	0x0d090d09
   12450:	0d0d0d0d 	.word	0x0d0d0d0d
   12454:	091c0d0d 	.word	0x091c0d0d
   12458:	09090909 	.word	0x09090909
   1245c:	09          	.byte	0x09
   1245d:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1245e:	2b00      	cmp	r3, #0
   12460:	d04b      	beq.n	124fa <ll_rx_dequeue+0xda>
}
   12462:	b002      	add	sp, #8
   12464:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
   12466:	4a4d      	ldr	r2, [pc, #308]	; (1259c <ll_rx_dequeue+0x17c>)
   12468:	494d      	ldr	r1, [pc, #308]	; (125a0 <ll_rx_dequeue+0x180>)
   1246a:	484e      	ldr	r0, [pc, #312]	; (125a4 <ll_rx_dequeue+0x184>)
   1246c:	f240 3303 	movw	r3, #771	; 0x303
   12470:	f00a f9a7 	bl	1c7c2 <printk>
   12474:	4040      	eors	r0, r0
   12476:	f380 8811 	msr	BASEPRI, r0
   1247a:	f04f 0003 	mov.w	r0, #3
   1247e:	df02      	svc	2
}
   12480:	b002      	add	sp, #8
   12482:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   12484:	7f13      	ldrb	r3, [r2, #28]
   12486:	2b3c      	cmp	r3, #60	; 0x3c
   12488:	d046      	beq.n	12518 <ll_rx_dequeue+0xf8>
   1248a:	7f53      	ldrb	r3, [r2, #29]
   1248c:	b1cb      	cbz	r3, 124c2 <ll_rx_dequeue+0xa2>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1248e:	6893      	ldr	r3, [r2, #8]
   12490:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   12492:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
   12496:	b128      	cbz	r0, 124a4 <ll_rx_dequeue+0x84>
					adv->node_rx_cc_free = NULL;
   12498:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   1249a:	4943      	ldr	r1, [pc, #268]	; (125a8 <ll_rx_dequeue+0x188>)
					adv->node_rx_cc_free = NULL;
   1249c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					mem_release(rx_free, &mem_pdu_rx.free);
   124a0:	f7fc fb28 	bl	eaf4 <mem_release>
			adv->is_enabled = 0U;
   124a4:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   124a8:	f36f 0300 	bfc	r3, #0, #1
   124ac:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
			      ull_adv_is_enabled(0));
   124b0:	2000      	movs	r0, #0
   124b2:	f000 ff29 	bl	13308 <ull_adv_is_enabled>
			if (!bm) {
   124b6:	2800      	cmp	r0, #0
   124b8:	d1d3      	bne.n	12462 <ll_rx_dequeue+0x42>
				ull_filter_adv_scan_state_cb(0);
   124ba:	f004 fbab 	bl	16c14 <ull_filter_adv_scan_state_cb>
}
   124be:	b002      	add	sp, #8
   124c0:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   124c2:	4a36      	ldr	r2, [pc, #216]	; (1259c <ll_rx_dequeue+0x17c>)
   124c4:	4936      	ldr	r1, [pc, #216]	; (125a0 <ll_rx_dequeue+0x180>)
   124c6:	4837      	ldr	r0, [pc, #220]	; (125a4 <ll_rx_dequeue+0x184>)
   124c8:	f44f 732c 	mov.w	r3, #688	; 0x2b0
   124cc:	f00a f979 	bl	1c7c2 <printk>
   124d0:	4040      	eors	r0, r0
   124d2:	f380 8811 	msr	BASEPRI, r0
   124d6:	f04f 0003 	mov.w	r0, #3
   124da:	df02      	svc	2
   124dc:	e7e8      	b.n	124b0 <ll_rx_dequeue+0x90>
	LL_ASSERT(link);
   124de:	4a2f      	ldr	r2, [pc, #188]	; (1259c <ll_rx_dequeue+0x17c>)
   124e0:	4932      	ldr	r1, [pc, #200]	; (125ac <ll_rx_dequeue+0x18c>)
   124e2:	4830      	ldr	r0, [pc, #192]	; (125a4 <ll_rx_dequeue+0x184>)
   124e4:	f44f 730e 	mov.w	r3, #568	; 0x238
   124e8:	f00a f96b 	bl	1c7c2 <printk>
   124ec:	4040      	eors	r0, r0
   124ee:	f380 8811 	msr	BASEPRI, r0
   124f2:	f04f 0003 	mov.w	r0, #3
   124f6:	df02      	svc	2
   124f8:	e79e      	b.n	12438 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   124fa:	4a28      	ldr	r2, [pc, #160]	; (1259c <ll_rx_dequeue+0x17c>)
   124fc:	492c      	ldr	r1, [pc, #176]	; (125b0 <ll_rx_dequeue+0x190>)
   124fe:	4829      	ldr	r0, [pc, #164]	; (125a4 <ll_rx_dequeue+0x184>)
   12500:	f240 23ff 	movw	r3, #767	; 0x2ff
   12504:	f00a f95d 	bl	1c7c2 <printk>
   12508:	4040      	eors	r0, r0
   1250a:	f380 8811 	msr	BASEPRI, r0
   1250e:	f04f 0003 	mov.w	r0, #3
   12512:	df02      	svc	2
}
   12514:	b002      	add	sp, #8
   12516:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
   12518:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   1251a:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1251c:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   1251e:	b1ed      	cbz	r5, 1255c <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
   12520:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   12522:	2200      	movs	r2, #0
   12524:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   12526:	b163      	cbz	r3, 12542 <ll_rx_dequeue+0x122>
   12528:	4a1c      	ldr	r2, [pc, #112]	; (1259c <ll_rx_dequeue+0x17c>)
   1252a:	4922      	ldr	r1, [pc, #136]	; (125b4 <ll_rx_dequeue+0x194>)
   1252c:	481d      	ldr	r0, [pc, #116]	; (125a4 <ll_rx_dequeue+0x184>)
   1252e:	f240 2391 	movw	r3, #657	; 0x291
   12532:	f00a f946 	bl	1c7c2 <printk>
   12536:	4040      	eors	r0, r0
   12538:	f380 8811 	msr	BASEPRI, r0
   1253c:	f04f 0003 	mov.w	r0, #3
   12540:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   12542:	f105 0150 	add.w	r1, r5, #80	; 0x50
   12546:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   1254a:	f7fc fb13 	bl	eb74 <memq_deinit>
				LL_ASSERT(link);
   1254e:	4606      	mov	r6, r0
   12550:	b190      	cbz	r0, 12578 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
   12552:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   12554:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   12556:	f001 fb53 	bl	13c00 <ll_conn_release>
   1255a:	e7a3      	b.n	124a4 <ll_rx_dequeue+0x84>
				LL_ASSERT(conn_lll);
   1255c:	4a0f      	ldr	r2, [pc, #60]	; (1259c <ll_rx_dequeue+0x17c>)
   1255e:	4916      	ldr	r1, [pc, #88]	; (125b8 <ll_rx_dequeue+0x198>)
   12560:	4810      	ldr	r0, [pc, #64]	; (125a4 <ll_rx_dequeue+0x184>)
   12562:	f240 238e 	movw	r3, #654	; 0x28e
   12566:	f00a f92c 	bl	1c7c2 <printk>
   1256a:	4040      	eors	r0, r0
   1256c:	f380 8811 	msr	BASEPRI, r0
   12570:	f04f 0003 	mov.w	r0, #3
   12574:	df02      	svc	2
   12576:	e7d3      	b.n	12520 <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
   12578:	4a08      	ldr	r2, [pc, #32]	; (1259c <ll_rx_dequeue+0x17c>)
   1257a:	490c      	ldr	r1, [pc, #48]	; (125ac <ll_rx_dequeue+0x18c>)
   1257c:	4809      	ldr	r0, [pc, #36]	; (125a4 <ll_rx_dequeue+0x184>)
   1257e:	f44f 7325 	mov.w	r3, #660	; 0x294
   12582:	f00a f91e 	bl	1c7c2 <printk>
   12586:	4040      	eors	r0, r0
   12588:	f380 8811 	msr	BASEPRI, r0
   1258c:	f04f 0003 	mov.w	r0, #3
   12590:	df02      	svc	2
   12592:	e7de      	b.n	12552 <ll_rx_dequeue+0x132>
   12594:	20001ba0 	.word	0x20001ba0
   12598:	20001908 	.word	0x20001908
   1259c:	000228b8 	.word	0x000228b8
   125a0:	000226e8 	.word	0x000226e8
   125a4:	00022678 	.word	0x00022678
   125a8:	2000195c 	.word	0x2000195c
   125ac:	00022b74 	.word	0x00022b74
   125b0:	00022988 	.word	0x00022988
   125b4:	00022970 	.word	0x00022970
   125b8:	00022964 	.word	0x00022964

000125bc <ll_rx_mem_release>:
{
   125bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
   125c0:	6804      	ldr	r4, [r0, #0]
	while (rx) {
   125c2:	4e85      	ldr	r6, [pc, #532]	; (127d8 <ll_rx_mem_release+0x21c>)
{
   125c4:	4681      	mov	r9, r0
	while (rx) {
   125c6:	2c00      	cmp	r4, #0
   125c8:	d040      	beq.n	1264c <ll_rx_mem_release+0x90>
			LL_ASSERT(0);
   125ca:	f8df 8238 	ldr.w	r8, [pc, #568]	; 12804 <ll_rx_mem_release+0x248>
   125ce:	f8df a238 	ldr.w	sl, [pc, #568]	; 12808 <ll_rx_mem_release+0x24c>
   125d2:	4f82      	ldr	r7, [pc, #520]	; (127dc <ll_rx_mem_release+0x220>)
		rx = rx->next;
   125d4:	4625      	mov	r5, r4
   125d6:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   125d8:	792b      	ldrb	r3, [r5, #4]
   125da:	2b10      	cmp	r3, #16
   125dc:	d868      	bhi.n	126b0 <ll_rx_mem_release+0xf4>
   125de:	e8df f003 	tbb	[pc, r3]
   125e2:	671c      	.short	0x671c
   125e4:	6767671c 	.word	0x6767671c
   125e8:	67676767 	.word	0x67676767
   125ec:	1c1c7709 	.word	0x1c1c7709
   125f0:	1c1c      	.short	0x1c1c
   125f2:	1c          	.byte	0x1c
   125f3:	00          	.byte	0x00
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   125f4:	7f2b      	ldrb	r3, [r5, #28]
   125f6:	2b3c      	cmp	r3, #60	; 0x3c
   125f8:	f000 80d1 	beq.w	1279e <ll_rx_mem_release+0x1e2>
				LL_ASSERT(!cc->status);
   125fc:	b1db      	cbz	r3, 12636 <ll_rx_mem_release+0x7a>
   125fe:	4978      	ldr	r1, [pc, #480]	; (127e0 <ll_rx_mem_release+0x224>)
   12600:	f240 335b 	movw	r3, #859	; 0x35b
   12604:	4642      	mov	r2, r8
   12606:	4638      	mov	r0, r7
   12608:	f00a f8db 	bl	1c7c2 <printk>
   1260c:	4040      	eors	r0, r0
   1260e:	f380 8811 	msr	BASEPRI, r0
   12612:	f04f 0003 	mov.w	r0, #3
   12616:	df02      	svc	2
   12618:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1261a:	b963      	cbnz	r3, 12636 <ll_rx_mem_release+0x7a>
   1261c:	4971      	ldr	r1, [pc, #452]	; (127e4 <ll_rx_mem_release+0x228>)
   1261e:	f240 339f 	movw	r3, #927	; 0x39f
   12622:	4642      	mov	r2, r8
   12624:	4638      	mov	r0, r7
   12626:	f00a f8cc 	bl	1c7c2 <printk>
   1262a:	4040      	eors	r0, r0
   1262c:	f380 8811 	msr	BASEPRI, r0
   12630:	f04f 0003 	mov.w	r0, #3
   12634:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   12636:	7833      	ldrb	r3, [r6, #0]
   12638:	2b06      	cmp	r3, #6
   1263a:	d86e      	bhi.n	1271a <ll_rx_mem_release+0x15e>
	mem_link_rx.quota_pdu += delta;
   1263c:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   1263e:	496a      	ldr	r1, [pc, #424]	; (127e8 <ll_rx_mem_release+0x22c>)
	mem_link_rx.quota_pdu += delta;
   12640:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
   12642:	4628      	mov	r0, r5
   12644:	f7fc fa56 	bl	eaf4 <mem_release>
	while (rx) {
   12648:	2c00      	cmp	r4, #0
   1264a:	d1c3      	bne.n	125d4 <ll_rx_mem_release+0x18>
	*node_rx = rx;
   1264c:	2700      	movs	r7, #0
   1264e:	f8c9 7000 	str.w	r7, [r9]
	while (mem_link_rx.quota_pdu &&
   12652:	7833      	ldrb	r3, [r6, #0]
   12654:	b353      	cbz	r3, 126ac <ll_rx_mem_release+0xf0>
   12656:	4d65      	ldr	r5, [pc, #404]	; (127ec <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
   12658:	f8df 819c 	ldr.w	r8, [pc, #412]	; 127f8 <ll_rx_mem_release+0x23c>
   1265c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1265e:	f8df 9188 	ldr.w	r9, [pc, #392]	; 127e8 <ll_rx_mem_release+0x22c>
	if (last == count) {
   12662:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   12664:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   12666:	3401      	adds	r4, #1
   12668:	b2e4      	uxtb	r4, r4
		last = 0U;
   1266a:	42a2      	cmp	r2, r4
   1266c:	bf08      	it	eq
   1266e:	2400      	moveq	r4, #0
	if (last == first) {
   12670:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12672:	4640      	mov	r0, r8
   12674:	d064      	beq.n	12740 <ll_rx_mem_release+0x184>
   12676:	f7fc fa23 	bl	eac0 <mem_acquire>
   1267a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1267c:	4648      	mov	r0, r9
		if (!link) {
   1267e:	f1ba 0f00 	cmp.w	sl, #0
   12682:	d05d      	beq.n	12740 <ll_rx_mem_release+0x184>
		rx = mem_acquire(&mem_pdu_rx.free);
   12684:	f7fc fa1c 	bl	eac0 <mem_acquire>
		if (!rx) {
   12688:	2800      	cmp	r0, #0
   1268a:	d055      	beq.n	12738 <ll_rx_mem_release+0x17c>
		link->mem = NULL;
   1268c:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
   12690:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12694:	78e9      	ldrb	r1, [r5, #3]
   12696:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   12698:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1269a:	fb01 5202 	mla	r2, r1, r2, r5
   1269e:	3b01      	subs	r3, #1
   126a0:	b2db      	uxtb	r3, r3
   126a2:	6050      	str	r0, [r2, #4]
   126a4:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   126a6:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
   126a8:	2b00      	cmp	r3, #0
   126aa:	d1da      	bne.n	12662 <ll_rx_mem_release+0xa6>
}
   126ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
   126b0:	f240 33b9 	movw	r3, #953	; 0x3b9
   126b4:	4642      	mov	r2, r8
   126b6:	4651      	mov	r1, sl
   126b8:	4638      	mov	r0, r7
   126ba:	f00a f882 	bl	1c7c2 <printk>
   126be:	4040      	eors	r0, r0
   126c0:	f380 8811 	msr	BASEPRI, r0
   126c4:	f04f 0003 	mov.w	r0, #3
   126c8:	df02      	svc	2
	while (rx) {
   126ca:	2c00      	cmp	r4, #0
   126cc:	d182      	bne.n	125d4 <ll_rx_mem_release+0x18>
   126ce:	e7bd      	b.n	1264c <ll_rx_mem_release+0x90>
			conn = ll_conn_get(rx_free->handle);
   126d0:	88e8      	ldrh	r0, [r5, #6]
   126d2:	f001 faa3 	bl	13c1c <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   126d6:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   126d8:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   126da:	b163      	cbz	r3, 126f6 <ll_rx_mem_release+0x13a>
   126dc:	4944      	ldr	r1, [pc, #272]	; (127f0 <ll_rx_mem_release+0x234>)
   126de:	f44f 736b 	mov.w	r3, #940	; 0x3ac
   126e2:	4642      	mov	r2, r8
   126e4:	4638      	mov	r0, r7
   126e6:	f00a f86c 	bl	1c7c2 <printk>
   126ea:	4040      	eors	r0, r0
   126ec:	f380 8811 	msr	BASEPRI, r0
   126f0:	f04f 0003 	mov.w	r0, #3
   126f4:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   126f6:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   126fa:	f105 0068 	add.w	r0, r5, #104	; 0x68
   126fe:	f7fc fa39 	bl	eb74 <memq_deinit>
			LL_ASSERT(link);
   12702:	4683      	mov	fp, r0
   12704:	2800      	cmp	r0, #0
   12706:	d052      	beq.n	127ae <ll_rx_mem_release+0x1f2>
			conn->lll.link_tx_free = link;
   12708:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
   1270c:	4628      	mov	r0, r5
   1270e:	f001 fa77 	bl	13c00 <ll_conn_release>
	while (rx) {
   12712:	2c00      	cmp	r4, #0
   12714:	f47f af5e 	bne.w	125d4 <ll_rx_mem_release+0x18>
   12718:	e798      	b.n	1264c <ll_rx_mem_release+0x90>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1271a:	4936      	ldr	r1, [pc, #216]	; (127f4 <ll_rx_mem_release+0x238>)
   1271c:	f240 33c5 	movw	r3, #965	; 0x3c5
   12720:	4642      	mov	r2, r8
   12722:	4638      	mov	r0, r7
   12724:	f00a f84d 	bl	1c7c2 <printk>
   12728:	4040      	eors	r0, r0
   1272a:	f380 8811 	msr	BASEPRI, r0
   1272e:	f04f 0003 	mov.w	r0, #3
   12732:	df02      	svc	2
   12734:	7833      	ldrb	r3, [r6, #0]
   12736:	e781      	b.n	1263c <ll_rx_mem_release+0x80>
			mem_release(link, &mem_link_rx.free);
   12738:	492f      	ldr	r1, [pc, #188]	; (127f8 <ll_rx_mem_release+0x23c>)
   1273a:	4650      	mov	r0, sl
   1273c:	f7fc f9da 	bl	eaf4 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
   12740:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12742:	1e5f      	subs	r7, r3, #1
   12744:	b2ff      	uxtb	r7, r7
   12746:	2b00      	cmp	r3, #0
   12748:	d0b0      	beq.n	126ac <ll_rx_mem_release+0xf0>
   1274a:	4d2c      	ldr	r5, [pc, #176]	; (127fc <ll_rx_mem_release+0x240>)
		link = mem_acquire(&mem_link_rx.free);
   1274c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 127f8 <ll_rx_mem_release+0x23c>
   12750:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   12752:	f8df 9094 	ldr.w	r9, [pc, #148]	; 127e8 <ll_rx_mem_release+0x22c>
	if (last == count) {
   12756:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12758:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1275a:	3401      	adds	r4, #1
   1275c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1275e:	42a2      	cmp	r2, r4
   12760:	bf08      	it	eq
   12762:	2400      	moveq	r4, #0
	if (last == first) {
   12764:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   12766:	4640      	mov	r0, r8
   12768:	d0a0      	beq.n	126ac <ll_rx_mem_release+0xf0>
   1276a:	f7fc f9a9 	bl	eac0 <mem_acquire>
   1276e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   12770:	4648      	mov	r0, r9
		if (!link) {
   12772:	f1ba 0f00 	cmp.w	sl, #0
   12776:	d099      	beq.n	126ac <ll_rx_mem_release+0xf0>
		rx = mem_acquire(&mem_pdu_rx.free);
   12778:	f7fc f9a2 	bl	eac0 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1277c:	3f01      	subs	r7, #1
   1277e:	b2ff      	uxtb	r7, r7
		if (!rx) {
   12780:	b318      	cbz	r0, 127ca <ll_rx_mem_release+0x20e>
		rx->link = link;
   12782:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   12786:	78e9      	ldrb	r1, [r5, #3]
   12788:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
   1278a:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1278c:	fb01 5202 	mla	r2, r1, r2, r5
   12790:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   12792:	2fff      	cmp	r7, #255	; 0xff
   12794:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
   12796:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   12798:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1279a:	d1dc      	bne.n	12756 <ll_rx_mem_release+0x19a>
   1279c:	e786      	b.n	126ac <ll_rx_mem_release+0xf0>
				mem_release(rx_free, &mem_pdu_rx.free);
   1279e:	4912      	ldr	r1, [pc, #72]	; (127e8 <ll_rx_mem_release+0x22c>)
   127a0:	4628      	mov	r0, r5
   127a2:	f7fc f9a7 	bl	eaf4 <mem_release>
	while (rx) {
   127a6:	2c00      	cmp	r4, #0
   127a8:	f47f af14 	bne.w	125d4 <ll_rx_mem_release+0x18>
   127ac:	e74e      	b.n	1264c <ll_rx_mem_release+0x90>
			LL_ASSERT(link);
   127ae:	4914      	ldr	r1, [pc, #80]	; (12800 <ll_rx_mem_release+0x244>)
   127b0:	f240 33af 	movw	r3, #943	; 0x3af
   127b4:	4642      	mov	r2, r8
   127b6:	4638      	mov	r0, r7
   127b8:	f00a f803 	bl	1c7c2 <printk>
   127bc:	4040      	eors	r0, r0
   127be:	f380 8811 	msr	BASEPRI, r0
   127c2:	f04f 0003 	mov.w	r0, #3
   127c6:	df02      	svc	2
   127c8:	e79e      	b.n	12708 <ll_rx_mem_release+0x14c>
			mem_release(link, &mem_link_rx.free);
   127ca:	4650      	mov	r0, sl
   127cc:	490a      	ldr	r1, [pc, #40]	; (127f8 <ll_rx_mem_release+0x23c>)
}
   127ce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
   127d2:	f7fc b98f 	b.w	eaf4 <mem_release>
   127d6:	bf00      	nop
   127d8:	20001904 	.word	0x20001904
   127dc:	00022678 	.word	0x00022678
   127e0:	000229a8 	.word	0x000229a8
   127e4:	000229b4 	.word	0x000229b4
   127e8:	2000195c 	.word	0x2000195c
   127ec:	200003a8 	.word	0x200003a8
   127f0:	000229d8 	.word	0x000229d8
   127f4:	00022930 	.word	0x00022930
   127f8:	20001908 	.word	0x20001908
   127fc:	200003bc 	.word	0x200003bc
   12800:	00022b74 	.word	0x00022b74
   12804:	000228b8 	.word	0x000228b8
   12808:	000226e8 	.word	0x000226e8

0001280c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1280c:	4801      	ldr	r0, [pc, #4]	; (12814 <ll_rx_link_alloc+0x8>)
   1280e:	f7fc b957 	b.w	eac0 <mem_acquire>
   12812:	bf00      	nop
   12814:	20001908 	.word	0x20001908

00012818 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   12818:	4901      	ldr	r1, [pc, #4]	; (12820 <ll_rx_link_release+0x8>)
   1281a:	f7fc b96b 	b.w	eaf4 <mem_release>
   1281e:	bf00      	nop
   12820:	20001908 	.word	0x20001908

00012824 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   12824:	4801      	ldr	r0, [pc, #4]	; (1282c <ll_rx_alloc+0x8>)
   12826:	f7fc b94b 	b.w	eac0 <mem_acquire>
   1282a:	bf00      	nop
   1282c:	2000195c 	.word	0x2000195c

00012830 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   12830:	4901      	ldr	r1, [pc, #4]	; (12838 <ll_rx_release+0x8>)
   12832:	f7fc b95f 	b.w	eaf4 <mem_release>
   12836:	bf00      	nop
   12838:	2000195c 	.word	0x2000195c

0001283c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1283c:	4b02      	ldr	r3, [pc, #8]	; (12848 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1283e:	4a03      	ldr	r2, [pc, #12]	; (1284c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   12840:	78db      	ldrb	r3, [r3, #3]
   12842:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   12844:	f7fc b9a0 	b.w	eb88 <memq_enqueue>
   12848:	200004f8 	.word	0x200004f8
   1284c:	20001ba4 	.word	0x20001ba4

00012850 <ll_rx_sched>:
	k_sem_give(sem_recv);
   12850:	4b01      	ldr	r3, [pc, #4]	; (12858 <ll_rx_sched+0x8>)
   12852:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   12854:	f009 ba76 	b.w	1bd44 <z_impl_k_sem_give>
   12858:	20001bb0 	.word	0x20001bb0

0001285c <ll_pdu_rx_alloc_peek>:
{
   1285c:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1285e:	4b0d      	ldr	r3, [pc, #52]	; (12894 <ll_pdu_rx_alloc_peek+0x38>)
   12860:	789a      	ldrb	r2, [r3, #2]
   12862:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   12864:	42a2      	cmp	r2, r4
   12866:	d809      	bhi.n	1287c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   12868:	1aa1      	subs	r1, r4, r2
   1286a:	b2c9      	uxtb	r1, r1
   1286c:	4288      	cmp	r0, r1
   1286e:	d802      	bhi.n	12876 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   12870:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   12872:	7819      	ldrb	r1, [r3, #0]
   12874:	d109      	bne.n	1288a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   12876:	2000      	movs	r0, #0
}
   12878:	bc10      	pop	{r4}
   1287a:	4770      	bx	lr
		return count - first + last;
   1287c:	7859      	ldrb	r1, [r3, #1]
   1287e:	1a89      	subs	r1, r1, r2
   12880:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   12882:	b2c9      	uxtb	r1, r1
   12884:	4288      	cmp	r0, r1
   12886:	d8f6      	bhi.n	12876 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   12888:	7819      	ldrb	r1, [r3, #0]
}
   1288a:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   1288c:	fb02 3301 	mla	r3, r2, r1, r3
   12890:	6858      	ldr	r0, [r3, #4]
   12892:	4770      	bx	lr
   12894:	200003a8 	.word	0x200003a8

00012898 <ll_pdu_rx_alloc>:
{
   12898:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1289a:	4b0a      	ldr	r3, [pc, #40]	; (128c4 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1289c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1289e:	78da      	ldrb	r2, [r3, #3]
   128a0:	7818      	ldrb	r0, [r3, #0]
   128a2:	785c      	ldrb	r4, [r3, #1]
   128a4:	428a      	cmp	r2, r1
   128a6:	d00a      	beq.n	128be <ll_pdu_rx_alloc+0x26>
	_first += 1U;
   128a8:	1c4a      	adds	r2, r1, #1
   128aa:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   128ac:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   128b0:	4294      	cmp	r4, r2
   128b2:	bf08      	it	eq
   128b4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   128b6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   128b8:	709a      	strb	r2, [r3, #2]
}
   128ba:	bc10      	pop	{r4}
   128bc:	4770      	bx	lr
		return NULL;
   128be:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   128c0:	e7fb      	b.n	128ba <ll_pdu_rx_alloc+0x22>
   128c2:	bf00      	nop
   128c4:	200003a8 	.word	0x200003a8

000128c8 <ll_tx_ack_put>:
{
   128c8:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   128ca:	4a13      	ldr	r2, [pc, #76]	; (12918 <ll_tx_ack_put+0x50>)
   128cc:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   128ce:	7855      	ldrb	r5, [r2, #1]
   128d0:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   128d2:	1c73      	adds	r3, r6, #1
   128d4:	b2db      	uxtb	r3, r3
		last = 0U;
   128d6:	429d      	cmp	r5, r3
   128d8:	bf08      	it	eq
   128da:	2300      	moveq	r3, #0
	if (last == first) {
   128dc:	429c      	cmp	r4, r3
   128de:	d00a      	beq.n	128f6 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   128e0:	4615      	mov	r5, r2
   128e2:	f815 4b04 	ldrb.w	r4, [r5], #4
   128e6:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
   128ea:	192e      	adds	r6, r5, r4
   128ec:	d003      	beq.n	128f6 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
   128ee:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   128f0:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
   128f2:	6071      	str	r1, [r6, #4]
}
   128f4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
   128f6:	4a09      	ldr	r2, [pc, #36]	; (1291c <ll_tx_ack_put+0x54>)
   128f8:	4909      	ldr	r1, [pc, #36]	; (12920 <ll_tx_ack_put+0x58>)
   128fa:	480a      	ldr	r0, [pc, #40]	; (12924 <ll_tx_ack_put+0x5c>)
   128fc:	f240 430f 	movw	r3, #1039	; 0x40f
   12900:	f009 ff5f 	bl	1c7c2 <printk>
   12904:	4040      	eors	r0, r0
   12906:	f380 8811 	msr	BASEPRI, r0
   1290a:	f04f 0003 	mov.w	r0, #3
   1290e:	df02      	svc	2
	tx->handle = handle;
   12910:	2300      	movs	r3, #0
   12912:	801b      	strh	r3, [r3, #0]
   12914:	deff      	udf	#255	; 0xff
   12916:	bf00      	nop
   12918:	200004f8 	.word	0x200004f8
   1291c:	000228b8 	.word	0x000228b8
   12920:	00022b68 	.word	0x00022b68
   12924:	00022678 	.word	0x00022678

00012928 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   12928:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1292a:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1292c:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1292e:	700b      	strb	r3, [r1, #0]
}
   12930:	4770      	bx	lr
   12932:	bf00      	nop

00012934 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   12934:	2200      	movs	r2, #0
{
   12936:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   12938:	4611      	mov	r1, r2
   1293a:	4b0a      	ldr	r3, [pc, #40]	; (12964 <ll_radio_state_abort+0x30>)
   1293c:	2001      	movs	r0, #1
   1293e:	f7fc f997 	bl	ec70 <mayfly_enqueue>
	LL_ASSERT(!ret);
   12942:	b900      	cbnz	r0, 12946 <ll_radio_state_abort+0x12>
}
   12944:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   12946:	4a08      	ldr	r2, [pc, #32]	; (12968 <ll_radio_state_abort+0x34>)
   12948:	4908      	ldr	r1, [pc, #32]	; (1296c <ll_radio_state_abort+0x38>)
   1294a:	4809      	ldr	r0, [pc, #36]	; (12970 <ll_radio_state_abort+0x3c>)
   1294c:	f240 4327 	movw	r3, #1063	; 0x427
   12950:	f009 ff37 	bl	1c7c2 <printk>
   12954:	4040      	eors	r0, r0
   12956:	f380 8811 	msr	BASEPRI, r0
   1295a:	f04f 0003 	mov.w	r0, #3
   1295e:	df02      	svc	2
}
   12960:	bd08      	pop	{r3, pc}
   12962:	bf00      	nop
   12964:	2000052c 	.word	0x2000052c
   12968:	000228b8 	.word	0x000228b8
   1296c:	00022900 	.word	0x00022900
   12970:	00022678 	.word	0x00022678

00012974 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   12974:	6008      	str	r0, [r1, #0]
   12976:	4801      	ldr	r0, [pc, #4]	; (1297c <ull_ticker_status_give+0x8>)
   12978:	f009 b9e4 	b.w	1bd44 <z_impl_k_sem_give>
   1297c:	20001bb4 	.word	0x20001bb4

00012980 <ull_ticker_status_take>:
{
   12980:	b510      	push	{r4, lr}
   12982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12986:	460c      	mov	r4, r1
   12988:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return z_impl_k_sem_take(sem, timeout);
   1298c:	4802      	ldr	r0, [pc, #8]	; (12998 <ull_ticker_status_take+0x18>)
   1298e:	f009 f9ff 	bl	1bd90 <z_impl_k_sem_take>
	return *ret_cb;
   12992:	6820      	ldr	r0, [r4, #0]
}
   12994:	bd10      	pop	{r4, pc}
   12996:	bf00      	nop
   12998:	20001bb4 	.word	0x20001bb4

0001299c <ull_disable_mark>:
	if (!*m) {
   1299c:	4a04      	ldr	r2, [pc, #16]	; (129b0 <ull_disable_mark+0x14>)
   1299e:	6813      	ldr	r3, [r2, #0]
   129a0:	b10b      	cbz	r3, 129a6 <ull_disable_mark+0xa>
}
   129a2:	4618      	mov	r0, r3
   129a4:	4770      	bx	lr
		*m = param;
   129a6:	4603      	mov	r3, r0
   129a8:	6010      	str	r0, [r2, #0]
}
   129aa:	4618      	mov	r0, r3
   129ac:	4770      	bx	lr
   129ae:	bf00      	nop
   129b0:	20001840 	.word	0x20001840

000129b4 <ull_disable_unmark>:
	if (*m && *m == param) {
   129b4:	4a04      	ldr	r2, [pc, #16]	; (129c8 <ull_disable_unmark+0x14>)
   129b6:	6813      	ldr	r3, [r2, #0]
   129b8:	b123      	cbz	r3, 129c4 <ull_disable_unmark+0x10>
   129ba:	4298      	cmp	r0, r3
		*m = NULL;
   129bc:	bf06      	itte	eq
   129be:	2100      	moveq	r1, #0
   129c0:	6011      	streq	r1, [r2, #0]
	return NULL;
   129c2:	2300      	movne	r3, #0
}
   129c4:	4618      	mov	r0, r3
   129c6:	4770      	bx	lr
   129c8:	20001840 	.word	0x20001840

000129cc <ull_disable_mark_get>:
	return mark_get(mark_disable);
   129cc:	4b01      	ldr	r3, [pc, #4]	; (129d4 <ull_disable_mark_get+0x8>)
}
   129ce:	6818      	ldr	r0, [r3, #0]
   129d0:	4770      	bx	lr
   129d2:	bf00      	nop
   129d4:	20001840 	.word	0x20001840

000129d8 <ull_update_mark>:
	if (!*m) {
   129d8:	4a04      	ldr	r2, [pc, #16]	; (129ec <ull_update_mark+0x14>)
   129da:	6813      	ldr	r3, [r2, #0]
   129dc:	b10b      	cbz	r3, 129e2 <ull_update_mark+0xa>
}
   129de:	4618      	mov	r0, r3
   129e0:	4770      	bx	lr
		*m = param;
   129e2:	4603      	mov	r3, r0
   129e4:	6010      	str	r0, [r2, #0]
}
   129e6:	4618      	mov	r0, r3
   129e8:	4770      	bx	lr
   129ea:	bf00      	nop
   129ec:	20001844 	.word	0x20001844

000129f0 <ull_update_unmark>:
	if (*m && *m == param) {
   129f0:	4a04      	ldr	r2, [pc, #16]	; (12a04 <ull_update_unmark+0x14>)
   129f2:	6813      	ldr	r3, [r2, #0]
   129f4:	b123      	cbz	r3, 12a00 <ull_update_unmark+0x10>
   129f6:	4298      	cmp	r0, r3
		*m = NULL;
   129f8:	bf06      	itte	eq
   129fa:	2100      	moveq	r1, #0
   129fc:	6011      	streq	r1, [r2, #0]
	return NULL;
   129fe:	2300      	movne	r3, #0
}
   12a00:	4618      	mov	r0, r3
   12a02:	4770      	bx	lr
   12a04:	20001844 	.word	0x20001844

00012a08 <ull_update_mark_get>:
	return mark_get(mark_update);
   12a08:	4b01      	ldr	r3, [pc, #4]	; (12a10 <ull_update_mark_get+0x8>)
}
   12a0a:	6818      	ldr	r0, [r3, #0]
   12a0c:	4770      	bx	lr
   12a0e:	bf00      	nop
   12a10:	20001844 	.word	0x20001844

00012a14 <ull_disable>:
{
   12a14:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   12a16:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   12a18:	f115 0f10 	cmn.w	r5, #16
{
   12a1c:	b087      	sub	sp, #28
	if (!hdr) {
   12a1e:	d00b      	beq.n	12a38 <ull_disable+0x24>
	compiler_barrier();
   12a20:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   12a22:	2201      	movs	r2, #1
   12a24:	4668      	mov	r0, sp
   12a26:	2100      	movs	r1, #0
   12a28:	f00e fc83 	bl	21332 <z_impl_k_sem_init>
	if (!hdr->ref) {
   12a2c:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   12a2e:	4a13      	ldr	r2, [pc, #76]	; (12a7c <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   12a30:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   12a34:	616a      	str	r2, [r5, #20]
	if (!hdr->ref) {
   12a36:	b913      	cbnz	r3, 12a3e <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   12a38:	2000      	movs	r0, #0
}
   12a3a:	b007      	add	sp, #28
   12a3c:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   12a3e:	4b10      	ldr	r3, [pc, #64]	; (12a80 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   12a40:	2200      	movs	r2, #0
   12a42:	4611      	mov	r1, r2
   12a44:	2003      	movs	r0, #3
	mfy.param = lll;
   12a46:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   12a48:	f7fc f912 	bl	ec70 <mayfly_enqueue>
	LL_ASSERT(!ret);
   12a4c:	b940      	cbnz	r0, 12a60 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   12a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12a56:	4668      	mov	r0, sp
   12a58:	f009 f99a 	bl	1bd90 <z_impl_k_sem_take>
}
   12a5c:	b007      	add	sp, #28
   12a5e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   12a60:	4a08      	ldr	r2, [pc, #32]	; (12a84 <ull_disable+0x70>)
   12a62:	4909      	ldr	r1, [pc, #36]	; (12a88 <ull_disable+0x74>)
   12a64:	4809      	ldr	r0, [pc, #36]	; (12a8c <ull_disable+0x78>)
   12a66:	f240 437a 	movw	r3, #1146	; 0x47a
   12a6a:	f009 feaa 	bl	1c7c2 <printk>
   12a6e:	4040      	eors	r0, r0
   12a70:	f380 8811 	msr	BASEPRI, r0
   12a74:	f04f 0003 	mov.w	r0, #3
   12a78:	df02      	svc	2
   12a7a:	e7e8      	b.n	12a4e <ull_disable+0x3a>
   12a7c:	00011869 	.word	0x00011869
   12a80:	2000053c 	.word	0x2000053c
   12a84:	000228b8 	.word	0x000228b8
   12a88:	00022900 	.word	0x00022900
   12a8c:	00022678 	.word	0x00022678

00012a90 <ull_pdu_rx_alloc_peek>:
{
   12a90:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   12a92:	4b0d      	ldr	r3, [pc, #52]	; (12ac8 <ull_pdu_rx_alloc_peek+0x38>)
   12a94:	789a      	ldrb	r2, [r3, #2]
   12a96:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
   12a98:	42a2      	cmp	r2, r4
   12a9a:	d809      	bhi.n	12ab0 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   12a9c:	1aa1      	subs	r1, r4, r2
   12a9e:	b2c9      	uxtb	r1, r1
   12aa0:	4288      	cmp	r0, r1
   12aa2:	d802      	bhi.n	12aaa <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
   12aa4:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   12aa6:	7819      	ldrb	r1, [r3, #0]
   12aa8:	d109      	bne.n	12abe <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   12aaa:	2000      	movs	r0, #0
}
   12aac:	bc10      	pop	{r4}
   12aae:	4770      	bx	lr
		return count - first + last;
   12ab0:	7859      	ldrb	r1, [r3, #1]
   12ab2:	1a89      	subs	r1, r1, r2
   12ab4:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   12ab6:	b2c9      	uxtb	r1, r1
   12ab8:	4288      	cmp	r0, r1
   12aba:	d8f6      	bhi.n	12aaa <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   12abc:	7819      	ldrb	r1, [r3, #0]
}
   12abe:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
   12ac0:	fb02 3301 	mla	r3, r2, r1, r3
   12ac4:	6858      	ldr	r0, [r3, #4]
   12ac6:	4770      	bx	lr
   12ac8:	200003bc 	.word	0x200003bc

00012acc <ull_pdu_rx_alloc>:
{
   12acc:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
   12ace:	4b0a      	ldr	r3, [pc, #40]	; (12af8 <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   12ad0:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   12ad2:	78da      	ldrb	r2, [r3, #3]
   12ad4:	7818      	ldrb	r0, [r3, #0]
   12ad6:	785c      	ldrb	r4, [r3, #1]
   12ad8:	428a      	cmp	r2, r1
   12ada:	d00a      	beq.n	12af2 <ull_pdu_rx_alloc+0x26>
	_first += 1U;
   12adc:	1c4a      	adds	r2, r1, #1
   12ade:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   12ae0:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   12ae4:	4294      	cmp	r4, r2
   12ae6:	bf08      	it	eq
   12ae8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   12aea:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   12aec:	709a      	strb	r2, [r3, #2]
}
   12aee:	bc10      	pop	{r4}
   12af0:	4770      	bx	lr
		return NULL;
   12af2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
   12af4:	e7fb      	b.n	12aee <ull_pdu_rx_alloc+0x22>
   12af6:	bf00      	nop
   12af8:	200003bc 	.word	0x200003bc

00012afc <ull_rx_put>:
{
   12afc:	b538      	push	{r3, r4, r5, lr}
   12afe:	460c      	mov	r4, r1
   12b00:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12b02:	f003 faeb 	bl	160dc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12b06:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12b08:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12b0a:	4a03      	ldr	r2, [pc, #12]	; (12b18 <ull_rx_put+0x1c>)
   12b0c:	4628      	mov	r0, r5
}
   12b0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12b12:	f7fc b839 	b.w	eb88 <memq_enqueue>
   12b16:	bf00      	nop
   12b18:	20001bac 	.word	0x20001bac

00012b1c <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   12b1c:	2201      	movs	r2, #1
   12b1e:	4b02      	ldr	r3, [pc, #8]	; (12b28 <ull_rx_sched+0xc>)
   12b20:	4611      	mov	r1, r2
   12b22:	2000      	movs	r0, #0
   12b24:	f7fc b8a4 	b.w	ec70 <mayfly_enqueue>
   12b28:	2000054c 	.word	0x2000054c

00012b2c <ull_prepare_enqueue>:
{
   12b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12b30:	4e19      	ldr	r6, [pc, #100]	; (12b98 <ull_prepare_enqueue+0x6c>)
{
   12b32:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   12b36:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
   12b38:	7877      	ldrb	r7, [r6, #1]
   12b3a:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
   12b3e:	1c65      	adds	r5, r4, #1
   12b40:	b2ed      	uxtb	r5, r5
		last = 0U;
   12b42:	42af      	cmp	r7, r5
   12b44:	bf08      	it	eq
   12b46:	2500      	moveq	r5, #0
	if (last == first) {
   12b48:	45ac      	cmp	ip, r5
   12b4a:	d021      	beq.n	12b90 <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12b4c:	4699      	mov	r9, r3
   12b4e:	4633      	mov	r3, r6
   12b50:	460f      	mov	r7, r1
   12b52:	4611      	mov	r1, r2
   12b54:	f813 2b04 	ldrb.w	r2, [r3], #4
   12b58:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
   12b5c:	b1c4      	cbz	r4, 12b90 <ull_prepare_enqueue+0x64>
   12b5e:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   12b60:	2210      	movs	r2, #16
   12b62:	4620      	mov	r0, r4
   12b64:	f00c f945 	bl	1edf2 <memcpy>
	e->is_resume = is_resume;
   12b68:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
   12b6c:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
   12b70:	f00a 0a01 	and.w	sl, sl, #1
   12b74:	f022 0303 	bic.w	r3, r2, #3
   12b78:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
   12b7c:	9a08      	ldr	r2, [sp, #32]
   12b7e:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
   12b80:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
   12b84:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
   12b86:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   12b8a:	2000      	movs	r0, #0
}
   12b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   12b90:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   12b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   12b98:	200003d4 	.word	0x200003d4

00012b9c <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   12b9c:	4b05      	ldr	r3, [pc, #20]	; (12bb4 <ull_prepare_dequeue_get+0x18>)
   12b9e:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   12ba0:	78d9      	ldrb	r1, [r3, #3]
   12ba2:	7818      	ldrb	r0, [r3, #0]
   12ba4:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
   12ba6:	bf1a      	itte	ne
   12ba8:	3304      	addne	r3, #4
   12baa:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
   12bae:	2000      	moveq	r0, #0
}
   12bb0:	4770      	bx	lr
   12bb2:	bf00      	nop
   12bb4:	200003d4 	.word	0x200003d4

00012bb8 <ull_prepare_dequeue_iter>:
{
   12bb8:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   12bba:	4b0c      	ldr	r3, [pc, #48]	; (12bec <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
   12bbc:	7802      	ldrb	r2, [r0, #0]
   12bbe:	785c      	ldrb	r4, [r3, #1]
   12bc0:	78dd      	ldrb	r5, [r3, #3]
   12bc2:	7819      	ldrb	r1, [r3, #0]
   12bc4:	4294      	cmp	r4, r2
   12bc6:	bf9c      	itt	ls
   12bc8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   12bca:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   12bcc:	4295      	cmp	r5, r2
   12bce:	d00a      	beq.n	12be6 <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
   12bd0:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
   12bd2:	4d07      	ldr	r5, [pc, #28]	; (12bf0 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
   12bd4:	b2db      	uxtb	r3, r3
		i = 0U;
   12bd6:	429c      	cmp	r4, r3
   12bd8:	bf08      	it	eq
   12bda:	2300      	moveq	r3, #0
	*idx = i;
   12bdc:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   12bde:	fb02 5001 	mla	r0, r2, r1, r5
}
   12be2:	bc30      	pop	{r4, r5}
   12be4:	4770      	bx	lr
		return NULL;
   12be6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   12be8:	e7fb      	b.n	12be2 <ull_prepare_dequeue_iter+0x2a>
   12bea:	bf00      	nop
   12bec:	200003d4 	.word	0x200003d4
   12bf0:	200003d8 	.word	0x200003d8

00012bf4 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   12bf4:	4b06      	ldr	r3, [pc, #24]	; (12c10 <ull_event_done_extra_get+0x1c>)
   12bf6:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
   12bf8:	78d8      	ldrb	r0, [r3, #3]
   12bfa:	781a      	ldrb	r2, [r3, #0]
   12bfc:	4288      	cmp	r0, r1
   12bfe:	d005      	beq.n	12c0c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   12c00:	fb01 3302 	mla	r3, r1, r2, r3
   12c04:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   12c06:	b110      	cbz	r0, 12c0e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   12c08:	3020      	adds	r0, #32
   12c0a:	4770      	bx	lr
		return NULL;
   12c0c:	2000      	movs	r0, #0
}
   12c0e:	4770      	bx	lr
   12c10:	20000394 	.word	0x20000394

00012c14 <ull_event_done>:
{
   12c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
   12c16:	4a14      	ldr	r2, [pc, #80]	; (12c68 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   12c18:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   12c1a:	78d4      	ldrb	r4, [r2, #3]
   12c1c:	7811      	ldrb	r1, [r2, #0]
   12c1e:	7855      	ldrb	r5, [r2, #1]
   12c20:	429c      	cmp	r4, r3
   12c22:	d01f      	beq.n	12c64 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   12c24:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   12c28:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   12c2a:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   12c2c:	b2db      	uxtb	r3, r3
		_first = 0U;
   12c2e:	429d      	cmp	r5, r3
   12c30:	bf08      	it	eq
   12c32:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   12c34:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   12c36:	b19c      	cbz	r4, 12c60 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   12c38:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
   12c3a:	2600      	movs	r6, #0
	link = evdone->hdr.link;
   12c3c:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
   12c3e:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   12c40:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
   12c42:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12c44:	f003 fa4a 	bl	160dc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12c48:	4a08      	ldr	r2, [pc, #32]	; (12c6c <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   12c4a:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   12c4c:	4621      	mov	r1, r4
   12c4e:	4638      	mov	r0, r7
   12c50:	f7fb ff9a 	bl	eb88 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   12c54:	4b06      	ldr	r3, [pc, #24]	; (12c70 <ull_event_done+0x5c>)
   12c56:	4630      	mov	r0, r6
   12c58:	462a      	mov	r2, r5
   12c5a:	4629      	mov	r1, r5
   12c5c:	f7fc f808 	bl	ec70 <mayfly_enqueue>
}
   12c60:	4620      	mov	r0, r4
   12c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   12c64:	2400      	movs	r4, #0
   12c66:	e7fb      	b.n	12c60 <ull_event_done+0x4c>
   12c68:	20000394 	.word	0x20000394
   12c6c:	20001bac 	.word	0x20001bac
   12c70:	2000054c 	.word	0x2000054c

00012c74 <disabled_cb>:
{
   12c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   12c76:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   12c78:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
{
   12c7c:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   12c7e:	b1ef      	cbz	r7, 12cbc <disabled_cb+0x48>
	LL_ASSERT(adv->node_rx_cc_free);
   12c80:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
   12c84:	2300      	movs	r3, #0
   12c86:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   12c8a:	b36c      	cbz	r4, 12ce8 <disabled_cb+0x74>
	adv->node_rx_cc_free = NULL;
   12c8c:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
   12c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12c92:	220a      	movs	r2, #10
	adv->node_rx_cc_free = NULL;
   12c94:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   12c98:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   12c9c:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
   12c9e:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   12ca0:	221e      	movs	r2, #30
   12ca2:	f00c f8d1 	bl	1ee48 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   12ca6:	233c      	movs	r3, #60	; 0x3c
	ftr->param = param;
   12ca8:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   12caa:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   12cac:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
   12cae:	4621      	mov	r1, r4
   12cb0:	f7ff fdc4 	bl	1283c <ll_rx_put>
}
   12cb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   12cb8:	f7ff bdca 	b.w	12850 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   12cbc:	4a12      	ldr	r2, [pc, #72]	; (12d08 <disabled_cb+0x94>)
   12cbe:	4913      	ldr	r1, [pc, #76]	; (12d0c <disabled_cb+0x98>)
   12cc0:	4813      	ldr	r0, [pc, #76]	; (12d10 <disabled_cb+0x9c>)
   12cc2:	f240 635c 	movw	r3, #1628	; 0x65c
   12cc6:	f009 fd7c 	bl	1c7c2 <printk>
   12cca:	4040      	eors	r0, r0
   12ccc:	f380 8811 	msr	BASEPRI, r0
   12cd0:	f04f 0003 	mov.w	r0, #3
   12cd4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   12cd6:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   12cda:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
	adv->link_cc_free = NULL;
   12cde:	2300      	movs	r3, #0
   12ce0:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
   12ce4:	2c00      	cmp	r4, #0
   12ce6:	d1d1      	bne.n	12c8c <disabled_cb+0x18>
   12ce8:	4a07      	ldr	r2, [pc, #28]	; (12d08 <disabled_cb+0x94>)
   12cea:	490a      	ldr	r1, [pc, #40]	; (12d14 <disabled_cb+0xa0>)
   12cec:	4808      	ldr	r0, [pc, #32]	; (12d10 <disabled_cb+0x9c>)
   12cee:	f44f 63cc 	mov.w	r3, #1632	; 0x660
   12cf2:	f009 fd66 	bl	1c7c2 <printk>
   12cf6:	4040      	eors	r0, r0
   12cf8:	f380 8811 	msr	BASEPRI, r0
   12cfc:	f04f 0003 	mov.w	r0, #3
   12d00:	df02      	svc	2
   12d02:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
   12d06:	e7c1      	b.n	12c8c <disabled_cb+0x18>
   12d08:	000229fc 	.word	0x000229fc
   12d0c:	00022a3c 	.word	0x00022a3c
   12d10:	00022678 	.word	0x00022678
   12d14:	00022a50 	.word	0x00022a50

00012d18 <ticker_cb>:
{
   12d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d1c:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   12d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12d22:	4295      	cmp	r5, r2
{
   12d24:	b08a      	sub	sp, #40	; 0x28
   12d26:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   12d28:	d018      	beq.n	12d5c <ticker_cb+0x44>
	return ++hdr->ref;
   12d2a:	7c1b      	ldrb	r3, [r3, #16]
   12d2c:	3301      	adds	r3, #1
   12d2e:	b2db      	uxtb	r3, r3
   12d30:	4680      	mov	r8, r0
   12d32:	460f      	mov	r7, r1
   12d34:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   12d36:	2b00      	cmp	r3, #0
   12d38:	d061      	beq.n	12dfe <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
   12d3a:	4e38      	ldr	r6, [pc, #224]	; (12e1c <ticker_cb+0x104>)
		mfy.param = &p;
   12d3c:	4b38      	ldr	r3, [pc, #224]	; (12e20 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
   12d3e:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12d42:	2200      	movs	r2, #0
	lll = &adv->lll;
   12d44:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12d48:	4611      	mov	r1, r2
   12d4a:	2001      	movs	r0, #1
		mfy.param = &p;
   12d4c:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
   12d4e:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   12d50:	8135      	strh	r5, [r6, #8]
		p.param = lll;
   12d52:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   12d56:	f7fb ff8b 	bl	ec70 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12d5a:	b938      	cbnz	r0, 12d6c <ticker_cb+0x54>
	if (!lll->is_hdcd)
   12d5c:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   12d60:	f015 0501 	ands.w	r5, r5, #1
   12d64:	d014      	beq.n	12d90 <ticker_cb+0x78>
}
   12d66:	b00a      	add	sp, #40	; 0x28
   12d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   12d6c:	4a2d      	ldr	r2, [pc, #180]	; (12e24 <ticker_cb+0x10c>)
   12d6e:	492e      	ldr	r1, [pc, #184]	; (12e28 <ticker_cb+0x110>)
   12d70:	482e      	ldr	r0, [pc, #184]	; (12e2c <ticker_cb+0x114>)
   12d72:	f240 53cc 	movw	r3, #1484	; 0x5cc
   12d76:	f009 fd24 	bl	1c7c2 <printk>
   12d7a:	4040      	eors	r0, r0
   12d7c:	f380 8811 	msr	BASEPRI, r0
   12d80:	f04f 0003 	mov.w	r0, #3
   12d84:	df02      	svc	2
	if (!lll->is_hdcd)
   12d86:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
   12d8a:	f015 0501 	ands.w	r5, r5, #1
   12d8e:	d1ea      	bne.n	12d66 <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   12d90:	2104      	movs	r1, #4
   12d92:	a809      	add	r0, sp, #36	; 0x24
   12d94:	f004 ff3e 	bl	17c14 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12d98:	9809      	ldr	r0, [sp, #36]	; 0x24
   12d9a:	4925      	ldr	r1, [pc, #148]	; (12e30 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12d9c:	4a25      	ldr	r2, [pc, #148]	; (12e34 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12d9e:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12da0:	fba1 3100 	umull	r3, r1, r1, r0
   12da4:	1a43      	subs	r3, r0, r1
   12da6:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12daa:	1aa2      	subs	r2, r4, r2
   12dac:	4c22      	ldr	r4, [pc, #136]	; (12e38 <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12dae:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12db0:	f240 1147 	movw	r1, #327	; 0x147
   12db4:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12db6:	0952      	lsrs	r2, r2, #5
		random_delay %= ULL_ADV_RANDOM_DELAY;
   12db8:	fb01 0313 	mls	r3, r1, r3, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12dbc:	fba4 1202 	umull	r1, r2, r4, r2
				    (TICKER_ID_ADV_BASE +
   12dc0:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12dc2:	491e      	ldr	r1, [pc, #120]	; (12e3c <ticker_cb+0x124>)
   12dc4:	9105      	str	r1, [sp, #20]
		random_delay += 1;
   12dc6:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12dc8:	e9cd 5502 	strd	r5, r5, [sp, #8]
   12dcc:	e9cd 5500 	strd	r5, r5, [sp]
   12dd0:	4628      	mov	r0, r5
   12dd2:	b2d2      	uxtb	r2, r2
   12dd4:	2101      	movs	r1, #1
		random_delay += 1;
   12dd6:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12dd8:	f7fd f99e 	bl	10118 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12ddc:	f030 0302 	bics.w	r3, r0, #2
   12de0:	d0c1      	beq.n	12d66 <ticker_cb+0x4e>
   12de2:	4a10      	ldr	r2, [pc, #64]	; (12e24 <ticker_cb+0x10c>)
   12de4:	4916      	ldr	r1, [pc, #88]	; (12e40 <ticker_cb+0x128>)
   12de6:	4811      	ldr	r0, [pc, #68]	; (12e2c <ticker_cb+0x114>)
   12de8:	f240 53e2 	movw	r3, #1506	; 0x5e2
   12dec:	f009 fce9 	bl	1c7c2 <printk>
   12df0:	4040      	eors	r0, r0
   12df2:	f380 8811 	msr	BASEPRI, r0
   12df6:	f04f 0003 	mov.w	r0, #3
   12dfa:	df02      	svc	2
}
   12dfc:	e7b3      	b.n	12d66 <ticker_cb+0x4e>
		LL_ASSERT(ref);
   12dfe:	4a09      	ldr	r2, [pc, #36]	; (12e24 <ticker_cb+0x10c>)
   12e00:	4910      	ldr	r1, [pc, #64]	; (12e44 <ticker_cb+0x12c>)
   12e02:	480a      	ldr	r0, [pc, #40]	; (12e2c <ticker_cb+0x114>)
   12e04:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
   12e08:	f009 fcdb 	bl	1c7c2 <printk>
   12e0c:	4040      	eors	r0, r0
   12e0e:	f380 8811 	msr	BASEPRI, r0
   12e12:	f04f 0003 	mov.w	r0, #3
   12e16:	df02      	svc	2
   12e18:	e78f      	b.n	12d3a <ticker_cb+0x22>
   12e1a:	bf00      	nop
   12e1c:	20002078 	.word	0x20002078
   12e20:	2000056c 	.word	0x2000056c
   12e24:	000229fc 	.word	0x000229fc
   12e28:	00022900 	.word	0x00022900
   12e2c:	00022678 	.word	0x00022678
   12e30:	90d4f121 	.word	0x90d4f121
   12e34:	20001f8c 	.word	0x20001f8c
   12e38:	24924929 	.word	0x24924929
   12e3c:	00012ee9 	.word	0x00012ee9
   12e40:	00022a6c 	.word	0x00022a6c
   12e44:	00022a68 	.word	0x00022a68

00012e48 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   12e48:	2800      	cmp	r0, #0
   12e4a:	d130      	bne.n	12eae <ticker_op_stop_cb+0x66>
{
   12e4c:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
   12e4e:	4d1f      	ldr	r5, [pc, #124]	; (12ecc <ticker_op_stop_cb+0x84>)
	if (hdr->ref) {
   12e50:	7c0a      	ldrb	r2, [r1, #16]
	mfy.param = &adv->lll;
   12e52:	f101 031c 	add.w	r3, r1, #28
   12e56:	460c      	mov	r4, r1
   12e58:	60ab      	str	r3, [r5, #8]
	if (hdr->ref) {
   12e5a:	b1e2      	cbz	r2, 12e96 <ticker_op_stop_cb+0x4e>
		LL_ASSERT(!hdr->disabled_cb);
   12e5c:	694a      	ldr	r2, [r1, #20]
   12e5e:	b16a      	cbz	r2, 12e7c <ticker_op_stop_cb+0x34>
   12e60:	4a1b      	ldr	r2, [pc, #108]	; (12ed0 <ticker_op_stop_cb+0x88>)
   12e62:	491c      	ldr	r1, [pc, #112]	; (12ed4 <ticker_op_stop_cb+0x8c>)
   12e64:	481c      	ldr	r0, [pc, #112]	; (12ed8 <ticker_op_stop_cb+0x90>)
   12e66:	f240 6342 	movw	r3, #1602	; 0x642
   12e6a:	f009 fcaa 	bl	1c7c2 <printk>
   12e6e:	4040      	eors	r0, r0
   12e70:	f380 8811 	msr	BASEPRI, r0
   12e74:	f04f 0003 	mov.w	r0, #3
   12e78:	df02      	svc	2
   12e7a:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   12e7c:	4917      	ldr	r1, [pc, #92]	; (12edc <ticker_op_stop_cb+0x94>)
		mfy.fp = lll_disable;
   12e7e:	4818      	ldr	r0, [pc, #96]	; (12ee0 <ticker_op_stop_cb+0x98>)
		hdr->disabled_param = mfy.param;
   12e80:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12e82:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   12e84:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   12e86:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12e88:	4b10      	ldr	r3, [pc, #64]	; (12ecc <ticker_op_stop_cb+0x84>)
   12e8a:	4611      	mov	r1, r2
   12e8c:	2002      	movs	r0, #2
   12e8e:	f7fb feef 	bl	ec70 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12e92:	b968      	cbnz	r0, 12eb0 <ticker_op_stop_cb+0x68>
}
   12e94:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   12e96:	4b11      	ldr	r3, [pc, #68]	; (12edc <ticker_op_stop_cb+0x94>)
   12e98:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   12e9a:	2101      	movs	r1, #1
   12e9c:	462b      	mov	r3, r5
   12e9e:	2002      	movs	r0, #2
   12ea0:	f7fb fee6 	bl	ec70 <mayfly_enqueue>
		LL_ASSERT(!ret);
   12ea4:	2800      	cmp	r0, #0
   12ea6:	d0f5      	beq.n	12e94 <ticker_op_stop_cb+0x4c>
   12ea8:	f240 634e 	movw	r3, #1614	; 0x64e
   12eac:	e002      	b.n	12eb4 <ticker_op_stop_cb+0x6c>
   12eae:	4770      	bx	lr
		LL_ASSERT(!ret);
   12eb0:	f240 6349 	movw	r3, #1609	; 0x649
		LL_ASSERT(!ret);
   12eb4:	4a06      	ldr	r2, [pc, #24]	; (12ed0 <ticker_op_stop_cb+0x88>)
   12eb6:	490b      	ldr	r1, [pc, #44]	; (12ee4 <ticker_op_stop_cb+0x9c>)
   12eb8:	4807      	ldr	r0, [pc, #28]	; (12ed8 <ticker_op_stop_cb+0x90>)
   12eba:	f009 fc82 	bl	1c7c2 <printk>
   12ebe:	4040      	eors	r0, r0
   12ec0:	f380 8811 	msr	BASEPRI, r0
   12ec4:	f04f 0003 	mov.w	r0, #3
   12ec8:	df02      	svc	2
}
   12eca:	bd38      	pop	{r3, r4, r5, pc}
   12ecc:	2000057c 	.word	0x2000057c
   12ed0:	000229fc 	.word	0x000229fc
   12ed4:	00022a88 	.word	0x00022a88
   12ed8:	00022678 	.word	0x00022678
   12edc:	00012c75 	.word	0x00012c75
   12ee0:	00017c81 	.word	0x00017c81
   12ee4:	00022900 	.word	0x00022900

00012ee8 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12ee8:	b900      	cbnz	r0, 12eec <ticker_op_update_cb+0x4>
   12eea:	4770      	bx	lr
{
   12eec:	b510      	push	{r4, lr}
   12eee:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   12ef0:	f7ff fd6c 	bl	129cc <ull_disable_mark_get>
   12ef4:	4284      	cmp	r4, r0
   12ef6:	d00c      	beq.n	12f12 <ticker_op_update_cb+0x2a>
   12ef8:	4a06      	ldr	r2, [pc, #24]	; (12f14 <ticker_op_update_cb+0x2c>)
   12efa:	4907      	ldr	r1, [pc, #28]	; (12f18 <ticker_op_update_cb+0x30>)
   12efc:	4807      	ldr	r0, [pc, #28]	; (12f1c <ticker_op_update_cb+0x34>)
   12efe:	f240 6303 	movw	r3, #1539	; 0x603
   12f02:	f009 fc5e 	bl	1c7c2 <printk>
   12f06:	4040      	eors	r0, r0
   12f08:	f380 8811 	msr	BASEPRI, r0
   12f0c:	f04f 0003 	mov.w	r0, #3
   12f10:	df02      	svc	2
}
   12f12:	bd10      	pop	{r4, pc}
   12f14:	000229fc 	.word	0x000229fc
   12f18:	00022a9c 	.word	0x00022a9c
   12f1c:	00022678 	.word	0x00022678

00012f20 <ticker_stop_cb>:
{
   12f20:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12f22:	4c19      	ldr	r4, [pc, #100]	; (12f88 <ticker_stop_cb+0x68>)
   12f24:	4a19      	ldr	r2, [pc, #100]	; (12f8c <ticker_stop_cb+0x6c>)
   12f26:	1b1c      	subs	r4, r3, r4
   12f28:	0964      	lsrs	r4, r4, #5
{
   12f2a:	461d      	mov	r5, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   12f2c:	fba2 3404 	umull	r3, r4, r2, r4
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   12f30:	f014 0fff 	tst.w	r4, #255	; 0xff
{
   12f34:	b083      	sub	sp, #12
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   12f36:	d119      	bne.n	12f6c <ticker_stop_cb+0x4c>
			  TICKER_ID_ADV_BASE + handle,
   12f38:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   12f3a:	4b15      	ldr	r3, [pc, #84]	; (12f90 <ticker_stop_cb+0x70>)
   12f3c:	9500      	str	r5, [sp, #0]
   12f3e:	b2d2      	uxtb	r2, r2
   12f40:	2101      	movs	r1, #1
   12f42:	2000      	movs	r0, #0
   12f44:	f7fd f938 	bl	101b8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   12f48:	f030 0302 	bics.w	r3, r0, #2
   12f4c:	d00c      	beq.n	12f68 <ticker_stop_cb+0x48>
   12f4e:	4a11      	ldr	r2, [pc, #68]	; (12f94 <ticker_stop_cb+0x74>)
   12f50:	4911      	ldr	r1, [pc, #68]	; (12f98 <ticker_stop_cb+0x78>)
   12f52:	4812      	ldr	r0, [pc, #72]	; (12f9c <ticker_stop_cb+0x7c>)
   12f54:	f240 6324 	movw	r3, #1572	; 0x624
   12f58:	f009 fc33 	bl	1c7c2 <printk>
   12f5c:	4040      	eors	r0, r0
   12f5e:	f380 8811 	msr	BASEPRI, r0
   12f62:	f04f 0003 	mov.w	r0, #3
   12f66:	df02      	svc	2
}
   12f68:	b003      	add	sp, #12
   12f6a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   12f6c:	4a09      	ldr	r2, [pc, #36]	; (12f94 <ticker_stop_cb+0x74>)
   12f6e:	490c      	ldr	r1, [pc, #48]	; (12fa0 <ticker_stop_cb+0x80>)
   12f70:	480a      	ldr	r0, [pc, #40]	; (12f9c <ticker_stop_cb+0x7c>)
   12f72:	f240 631f 	movw	r3, #1567	; 0x61f
   12f76:	f009 fc24 	bl	1c7c2 <printk>
   12f7a:	4040      	eors	r0, r0
   12f7c:	f380 8811 	msr	BASEPRI, r0
   12f80:	f04f 0003 	mov.w	r0, #3
   12f84:	df02      	svc	2
   12f86:	e7d7      	b.n	12f38 <ticker_stop_cb+0x18>
   12f88:	20001f8c 	.word	0x20001f8c
   12f8c:	24924929 	.word	0x24924929
   12f90:	00012e49 	.word	0x00012e49
   12f94:	000229fc 	.word	0x000229fc
   12f98:	00022a6c 	.word	0x00022a6c
   12f9c:	00022678 	.word	0x00022678
   12fa0:	00022acc 	.word	0x00022acc

00012fa4 <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   12fa4:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   12fa6:	4c1d      	ldr	r4, [pc, #116]	; (1301c <conn_release.constprop.0+0x78>)
   12fa8:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
   12faa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   12fac:	b163      	cbz	r3, 12fc8 <conn_release.constprop.0+0x24>
   12fae:	4a1c      	ldr	r2, [pc, #112]	; (13020 <conn_release.constprop.0+0x7c>)
   12fb0:	491c      	ldr	r1, [pc, #112]	; (13024 <conn_release.constprop.0+0x80>)
   12fb2:	481d      	ldr	r0, [pc, #116]	; (13028 <conn_release.constprop.0+0x84>)
   12fb4:	f240 6377 	movw	r3, #1655	; 0x677
   12fb8:	f009 fc03 	bl	1c7c2 <printk>
   12fbc:	4040      	eors	r0, r0
   12fbe:	f380 8811 	msr	BASEPRI, r0
   12fc2:	f04f 0003 	mov.w	r0, #3
   12fc6:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   12fc8:	f105 0150 	add.w	r1, r5, #80	; 0x50
   12fcc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   12fd0:	f7fb fdd0 	bl	eb74 <memq_deinit>
	LL_ASSERT(link);
   12fd4:	4606      	mov	r6, r0
   12fd6:	b190      	cbz	r0, 12ffe <conn_release.constprop.0+0x5a>
	ll_conn_release(lll->hdr.parent);
   12fd8:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   12fda:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   12fdc:	f000 fe10 	bl	13c00 <ll_conn_release>
	adv->lll.conn = NULL;
   12fe0:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   12fe2:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->lll.conn = NULL;
   12fe6:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   12fe8:	f7ff fc22 	bl	12830 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   12fec:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	adv->node_rx_cc_free = NULL;
   12ff0:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	ll_rx_link_release(adv->link_cc_free);
   12ff4:	f7ff fc10 	bl	12818 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   12ff8:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
}
   12ffc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   12ffe:	4a08      	ldr	r2, [pc, #32]	; (13020 <conn_release.constprop.0+0x7c>)
   13000:	490a      	ldr	r1, [pc, #40]	; (1302c <conn_release.constprop.0+0x88>)
   13002:	4809      	ldr	r0, [pc, #36]	; (13028 <conn_release.constprop.0+0x84>)
   13004:	f240 6379 	movw	r3, #1657	; 0x679
   13008:	f009 fbdb 	bl	1c7c2 <printk>
   1300c:	4040      	eors	r0, r0
   1300e:	f380 8811 	msr	BASEPRI, r0
   13012:	f04f 0003 	mov.w	r0, #3
   13016:	df02      	svc	2
   13018:	e7de      	b.n	12fd8 <conn_release.constprop.0+0x34>
   1301a:	bf00      	nop
   1301c:	20001f8c 	.word	0x20001f8c
   13020:	000229fc 	.word	0x000229fc
   13024:	00022ad8 	.word	0x00022ad8
   13028:	00022678 	.word	0x00022678
   1302c:	00022b74 	.word	0x00022b74

00013030 <ll_adv_params_set>:
{
   13030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13034:	4d4e      	ldr	r5, [pc, #312]	; (13170 <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   13036:	4c4f      	ldr	r4, [pc, #316]	; (13174 <ll_adv_params_set+0x144>)
{
   13038:	4684      	mov	ip, r0
	if (!adv || adv->is_enabled) {
   1303a:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
{
   1303e:	468a      	mov	sl, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13040:	e895 0003 	ldmia.w	r5, {r0, r1}
{
   13044:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   13046:	f016 0601 	ands.w	r6, r6, #1
{
   1304a:	4699      	mov	r9, r3
   1304c:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
   13050:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   13054:	9000      	str	r0, [sp, #0]
   13056:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   1305a:	d172      	bne.n	13142 <ll_adv_params_set+0x112>
   1305c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   13060:	8d20      	ldrh	r0, [r4, #40]	; 0x28
   13062:	f8df e114 	ldr.w	lr, [pc, #276]	; 13178 <ll_adv_params_set+0x148>
   13066:	4615      	mov	r5, r2
   13068:	2727      	movs	r7, #39	; 0x27
   1306a:	222d      	movs	r2, #45	; 0x2d
   1306c:	fb17 2701 	smlabb	r7, r7, r1, r2
	pdu->type = pdu_adv_type[adv_type];
   13070:	aa02      	add	r2, sp, #8
   13072:	4452      	add	r2, sl
		adv->interval = 0;
   13074:	f1ba 0f01 	cmp.w	sl, #1
	adv->lll.chan_map = chan_map;
   13078:	f008 0107 	and.w	r1, r8, #7
	pdu->type = pdu_adv_type[adv_type];
   1307c:	f812 ac08 	ldrb.w	sl, [r2, #-8]
   13080:	5de2      	ldrb	r2, [r4, r7]
	adv->lll.chan_map = chan_map;
   13082:	ea4f 0141 	mov.w	r1, r1, lsl #1
   13086:	f003 0303 	and.w	r3, r3, #3
		adv->interval = 0;
   1308a:	bf08      	it	eq
   1308c:	f04f 0c00 	moveq.w	ip, #0
	pdu->type = pdu_adv_type[adv_type];
   13090:	f00a 080f 	and.w	r8, sl, #15
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   13094:	f01a 0f0e 	tst.w	sl, #14
	adv->lll.chan_map = chan_map;
   13098:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
	pdu->type = pdu_adv_type[adv_type];
   1309c:	f022 021f 	bic.w	r2, r2, #31
	adv->own_addr_type = own_addr_type;
   130a0:	f894 10d6 	ldrb.w	r1, [r4, #214]	; 0xd6
   130a4:	f8a4 c0d4 	strh.w	ip, [r4, #212]	; 0xd4
	adv->lll.filter_policy = filter_policy;
   130a8:	ea48 0202 	orr.w	r2, r8, r2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   130ac:	bf0c      	ite	eq
   130ae:	f04f 0c01 	moveq.w	ip, #1
   130b2:	f04f 0c00 	movne.w	ip, #0
	adv->lll.chan_map = chan_map;
   130b6:	ea00 000e 	and.w	r0, r0, lr
	adv->own_addr_type = own_addr_type;
   130ba:	f365 0142 	bfi	r1, r5, #1, #2
   130be:	f36c 1245 	bfi	r2, ip, #5, #1
	adv->lll.chan_map = chan_map;
   130c2:	4303      	orrs	r3, r0
   130c4:	8523      	strh	r3, [r4, #40]	; 0x28
   130c6:	55e2      	strb	r2, [r4, r7]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   130c8:	074a      	lsls	r2, r1, #29
   130ca:	eb04 0807 	add.w	r8, r4, r7
   130ce:	b2cb      	uxtb	r3, r1
	adv->own_addr_type = own_addr_type;
   130d0:	f884 10d6 	strb.w	r1, [r4, #214]	; 0xd6
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   130d4:	d509      	bpl.n	130ea <ll_adv_params_set+0xba>
		adv->id_addr_type = direct_addr_type;
   130d6:	f369 03c3 	bfi	r3, r9, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   130da:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
   130dc:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   130e0:	2206      	movs	r2, #6
   130e2:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
   130e6:	f00b fe84 	bl	1edf2 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   130ea:	5de2      	ldrb	r2, [r4, r7]
   130ec:	f002 030f 	and.w	r3, r2, #15
   130f0:	2b01      	cmp	r3, #1
   130f2:	f005 0101 	and.w	r1, r5, #1
   130f6:	d029      	beq.n	1314c <ll_adv_params_set+0x11c>
	} else if (pdu->len == 0) {
   130f8:	f898 3001 	ldrb.w	r3, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   130fc:	f361 1286 	bfi	r2, r1, #6, #1
	} else if (pdu->len == 0) {
   13100:	b1c3      	cbz	r3, 13134 <ll_adv_params_set+0x104>
		pdu->rx_addr = 0;
   13102:	f36f 12c7 	bfc	r2, #7, #1
   13106:	55e2      	strb	r2, [r4, r7]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13108:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1310c:	01ad      	lsls	r5, r5, #6
   1310e:	2327      	movs	r3, #39	; 0x27
   13110:	227d      	movs	r2, #125	; 0x7d
   13112:	fb13 2301 	smlabb	r3, r3, r1, r2
   13116:	f005 0540 	and.w	r5, r5, #64	; 0x40
   1311a:	f045 0504 	orr.w	r5, r5, #4
   1311e:	54e5      	strb	r5, [r4, r3]
   13120:	441c      	add	r4, r3
	if (pdu->len == 0) {
   13122:	7863      	ldrb	r3, [r4, #1]
   13124:	b913      	cbnz	r3, 1312c <ll_adv_params_set+0xfc>
		pdu->len = BDADDR_SIZE;
   13126:	2206      	movs	r2, #6
	return 0;
   13128:	461e      	mov	r6, r3
		pdu->len = BDADDR_SIZE;
   1312a:	7062      	strb	r2, [r4, #1]
}
   1312c:	4630      	mov	r0, r6
   1312e:	b002      	add	sp, #8
   13130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->rx_addr = 0;
   13134:	f363 12c7 	bfi	r2, r3, #7, #1
		pdu->len = BDADDR_SIZE;
   13138:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
   1313a:	55e2      	strb	r2, [r4, r7]
		pdu->len = BDADDR_SIZE;
   1313c:	f888 3001 	strb.w	r3, [r8, #1]
   13140:	e7e2      	b.n	13108 <ll_adv_params_set+0xd8>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13142:	260c      	movs	r6, #12
}
   13144:	4630      	mov	r0, r6
   13146:	b002      	add	sp, #8
   13148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   1314c:	f361 1286 	bfi	r2, r1, #6, #1
		pdu->rx_addr = direct_addr_type;
   13150:	4694      	mov	ip, r2
   13152:	f369 1cc7 	bfi	ip, r9, #7, #1
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   13156:	990a      	ldr	r1, [sp, #40]	; 0x28
		pdu->rx_addr = direct_addr_type;
   13158:	f804 c007 	strb.w	ip, [r4, r7]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1315c:	2206      	movs	r2, #6
   1315e:	f108 0008 	add.w	r0, r8, #8
   13162:	f00b fe46 	bl	1edf2 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   13166:	230c      	movs	r3, #12
   13168:	f888 3001 	strb.w	r3, [r8, #1]
   1316c:	e7cc      	b.n	13108 <ll_adv_params_set+0xd8>
   1316e:	bf00      	nop
   13170:	00021c98 	.word	0x00021c98
   13174:	20001f8c 	.word	0x20001f8c
   13178:	fffffcf1 	.word	0xfffffcf1

0001317c <ull_adv_init>:
}
   1317c:	2000      	movs	r0, #0
   1317e:	4770      	bx	lr

00013180 <ull_adv_reset>:
{
   13180:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
   13182:	4c46      	ldr	r4, [pc, #280]	; (1329c <ull_adv_reset+0x11c>)
   13184:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   13188:	07da      	lsls	r2, r3, #31
{
   1318a:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
   1318c:	d544      	bpl.n	13218 <ull_adv_reset+0x98>
	mark = ull_disable_mark(adv);
   1318e:	4620      	mov	r0, r4
   13190:	f7ff fc04 	bl	1299c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   13194:	4284      	cmp	r4, r0
   13196:	d00c      	beq.n	131b2 <ull_adv_reset+0x32>
   13198:	4a41      	ldr	r2, [pc, #260]	; (132a0 <ull_adv_reset+0x120>)
   1319a:	4942      	ldr	r1, [pc, #264]	; (132a4 <ull_adv_reset+0x124>)
   1319c:	4842      	ldr	r0, [pc, #264]	; (132a8 <ull_adv_reset+0x128>)
   1319e:	f240 63cc 	movw	r3, #1740	; 0x6cc
   131a2:	f009 fb0e 	bl	1c7c2 <printk>
   131a6:	4040      	eors	r0, r0
   131a8:	f380 8811 	msr	BASEPRI, r0
   131ac:	f04f 0003 	mov.w	r0, #3
   131b0:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   131b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   131b6:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   131b8:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   131ba:	d430      	bmi.n	1321e <ull_adv_reset+0x9e>
	ret_cb = TICKER_STATUS_BUSY;
   131bc:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   131be:	2103      	movs	r1, #3
   131c0:	4b3a      	ldr	r3, [pc, #232]	; (132ac <ull_adv_reset+0x12c>)
   131c2:	9500      	str	r5, [sp, #0]
   131c4:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   131c6:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   131c8:	f7fc fff6 	bl	101b8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   131cc:	4629      	mov	r1, r5
   131ce:	f7ff fbd7 	bl	12980 <ull_ticker_status_take>
	if (ret) {
   131d2:	2800      	cmp	r0, #0
   131d4:	d14c      	bne.n	13270 <ull_adv_reset+0xf0>
	ret = ull_disable(&adv->lll);
   131d6:	4836      	ldr	r0, [pc, #216]	; (132b0 <ull_adv_reset+0x130>)
   131d8:	f7ff fc1c 	bl	12a14 <ull_disable>
	LL_ASSERT(!ret);
   131dc:	2800      	cmp	r0, #0
   131de:	d134      	bne.n	1324a <ull_adv_reset+0xca>
	mark = ull_disable_unmark(adv);
   131e0:	482e      	ldr	r0, [pc, #184]	; (1329c <ull_adv_reset+0x11c>)
   131e2:	f7ff fbe7 	bl	129b4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   131e6:	4284      	cmp	r4, r0
   131e8:	d00c      	beq.n	13204 <ull_adv_reset+0x84>
   131ea:	4a2d      	ldr	r2, [pc, #180]	; (132a0 <ull_adv_reset+0x120>)
   131ec:	492d      	ldr	r1, [pc, #180]	; (132a4 <ull_adv_reset+0x124>)
   131ee:	482e      	ldr	r0, [pc, #184]	; (132a8 <ull_adv_reset+0x128>)
   131f0:	f240 63ee 	movw	r3, #1774	; 0x6ee
   131f4:	f009 fae5 	bl	1c7c2 <printk>
   131f8:	4040      	eors	r0, r0
   131fa:	f380 8811 	msr	BASEPRI, r0
   131fe:	f04f 0003 	mov.w	r0, #3
   13202:	df02      	svc	2
	if (adv->lll.conn) {
   13204:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13206:	b10b      	cbz	r3, 1320c <ull_adv_reset+0x8c>
		conn_release(adv);
   13208:	f7ff fecc 	bl	12fa4 <conn_release.constprop.0>
	adv->is_enabled = 0U;
   1320c:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
   13210:	f36f 0300 	bfc	r3, #0, #1
   13214:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
}
   13218:	2000      	movs	r0, #0
   1321a:	b005      	add	sp, #20
   1321c:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
   1321e:	2202      	movs	r2, #2
   13220:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   13222:	2103      	movs	r1, #3
   13224:	4b21      	ldr	r3, [pc, #132]	; (132ac <ull_adv_reset+0x12c>)
   13226:	9500      	str	r5, [sp, #0]
   13228:	2201      	movs	r2, #1
   1322a:	2000      	movs	r0, #0
   1322c:	f7fc ffc4 	bl	101b8 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   13230:	4629      	mov	r1, r5
   13232:	f7ff fba5 	bl	12980 <ull_ticker_status_take>
		if (ret) {
   13236:	2800      	cmp	r0, #0
   13238:	d0c0      	beq.n	131bc <ull_adv_reset+0x3c>
			mark = ull_disable_mark(adv);
   1323a:	4818      	ldr	r0, [pc, #96]	; (1329c <ull_adv_reset+0x11c>)
   1323c:	f7ff fbae 	bl	1299c <ull_disable_mark>
			LL_ASSERT(mark == adv);
   13240:	4284      	cmp	r4, r0
   13242:	d0e9      	beq.n	13218 <ull_adv_reset+0x98>
   13244:	f240 63d7 	movw	r3, #1751	; 0x6d7
   13248:	e019      	b.n	1327e <ull_adv_reset+0xfe>
	LL_ASSERT(!ret);
   1324a:	4a15      	ldr	r2, [pc, #84]	; (132a0 <ull_adv_reset+0x120>)
   1324c:	4919      	ldr	r1, [pc, #100]	; (132b4 <ull_adv_reset+0x134>)
   1324e:	4816      	ldr	r0, [pc, #88]	; (132a8 <ull_adv_reset+0x128>)
   13250:	f240 63eb 	movw	r3, #1771	; 0x6eb
   13254:	f009 fab5 	bl	1c7c2 <printk>
   13258:	4040      	eors	r0, r0
   1325a:	f380 8811 	msr	BASEPRI, r0
   1325e:	f04f 0003 	mov.w	r0, #3
   13262:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   13264:	480d      	ldr	r0, [pc, #52]	; (1329c <ull_adv_reset+0x11c>)
   13266:	f7ff fba5 	bl	129b4 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1326a:	4284      	cmp	r4, r0
   1326c:	d1bd      	bne.n	131ea <ull_adv_reset+0x6a>
   1326e:	e7c9      	b.n	13204 <ull_adv_reset+0x84>
		mark = ull_disable_mark(adv);
   13270:	480a      	ldr	r0, [pc, #40]	; (1329c <ull_adv_reset+0x11c>)
   13272:	f7ff fb93 	bl	1299c <ull_disable_mark>
		LL_ASSERT(mark == adv);
   13276:	4284      	cmp	r4, r0
   13278:	d0ce      	beq.n	13218 <ull_adv_reset+0x98>
   1327a:	f240 63e5 	movw	r3, #1765	; 0x6e5
   1327e:	4a08      	ldr	r2, [pc, #32]	; (132a0 <ull_adv_reset+0x120>)
   13280:	4908      	ldr	r1, [pc, #32]	; (132a4 <ull_adv_reset+0x124>)
   13282:	4809      	ldr	r0, [pc, #36]	; (132a8 <ull_adv_reset+0x128>)
   13284:	f009 fa9d 	bl	1c7c2 <printk>
   13288:	4040      	eors	r0, r0
   1328a:	f380 8811 	msr	BASEPRI, r0
   1328e:	f04f 0003 	mov.w	r0, #3
   13292:	df02      	svc	2
}
   13294:	2000      	movs	r0, #0
   13296:	b005      	add	sp, #20
   13298:	bd30      	pop	{r4, r5, pc}
   1329a:	bf00      	nop
   1329c:	20001f8c 	.word	0x20001f8c
   132a0:	000229fc 	.word	0x000229fc
   132a4:	00022aec 	.word	0x00022aec
   132a8:	00022678 	.word	0x00022678
   132ac:	00012975 	.word	0x00012975
   132b0:	20001fa8 	.word	0x20001fa8
   132b4:	00022900 	.word	0x00022900

000132b8 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   132b8:	4a03      	ldr	r2, [pc, #12]	; (132c8 <ull_adv_handle_get+0x10>)
   132ba:	4b04      	ldr	r3, [pc, #16]	; (132cc <ull_adv_handle_get+0x14>)
   132bc:	1a80      	subs	r0, r0, r2
   132be:	0940      	lsrs	r0, r0, #5
   132c0:	fba3 3000 	umull	r3, r0, r3, r0
}
   132c4:	b280      	uxth	r0, r0
   132c6:	4770      	bx	lr
   132c8:	20001f8c 	.word	0x20001f8c
   132cc:	24924929 	.word	0x24924929

000132d0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   132d0:	4a04      	ldr	r2, [pc, #16]	; (132e4 <ull_adv_lll_handle_get+0x14>)
   132d2:	6800      	ldr	r0, [r0, #0]
   132d4:	4b04      	ldr	r3, [pc, #16]	; (132e8 <ull_adv_lll_handle_get+0x18>)
   132d6:	1a80      	subs	r0, r0, r2
   132d8:	0940      	lsrs	r0, r0, #5
   132da:	fba3 3000 	umull	r3, r0, r3, r0
}
   132de:	b280      	uxth	r0, r0
   132e0:	4770      	bx	lr
   132e2:	bf00      	nop
   132e4:	20001f8c 	.word	0x20001f8c
   132e8:	24924929 	.word	0x24924929

000132ec <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   132ec:	b938      	cbnz	r0, 132fe <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   132ee:	4805      	ldr	r0, [pc, #20]	; (13304 <ull_adv_is_enabled_get+0x18>)
   132f0:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
	return &ll_adv[handle];
   132f4:	f013 0f01 	tst.w	r3, #1
   132f8:	bf08      	it	eq
   132fa:	2000      	moveq	r0, #0
   132fc:	4770      	bx	lr
		return NULL;
   132fe:	2000      	movs	r0, #0
}
   13300:	4770      	bx	lr
   13302:	bf00      	nop
   13304:	20001f8c 	.word	0x20001f8c

00013308 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   13308:	b928      	cbnz	r0, 13316 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1330a:	4b04      	ldr	r3, [pc, #16]	; (1331c <ull_adv_is_enabled+0x14>)
   1330c:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   13310:	f000 0001 	and.w	r0, r0, #1
   13314:	4770      	bx	lr
		return 0;
   13316:	2000      	movs	r0, #0
}
   13318:	4770      	bx	lr
   1331a:	bf00      	nop
   1331c:	20001f8c 	.word	0x20001f8c

00013320 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   13320:	b950      	cbnz	r0, 13338 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   13322:	4b06      	ldr	r3, [pc, #24]	; (1333c <ull_adv_filter_pol_get+0x1c>)
   13324:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
   13328:	f010 0001 	ands.w	r0, r0, #1
   1332c:	d005      	beq.n	1333a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1332e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   13332:	f000 0003 	and.w	r0, r0, #3
   13336:	4770      	bx	lr
		return 0;
   13338:	2000      	movs	r0, #0
}
   1333a:	4770      	bx	lr
   1333c:	20001f8c 	.word	0x20001f8c

00013340 <ull_adv_data_set>:
{
   13340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   13344:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
   13348:	f100 0e1c 	add.w	lr, r0, #28
   1334c:	4604      	mov	r4, r0
   1334e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
   13352:	ebc5 00c0 	rsb	r0, r5, r0, lsl #3
   13356:	f100 0c11 	add.w	ip, r0, #17
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1335a:	f81e 300c 	ldrb.w	r3, [lr, ip]
   1335e:	f003 080f 	and.w	r8, r3, #15
   13362:	f1b8 0f01 	cmp.w	r8, #1
   13366:	44e6      	add	lr, ip
   13368:	d02b      	beq.n	133c2 <ull_adv_data_set+0x82>
   1336a:	4617      	mov	r7, r2
	if (pdu->first == pdu->last) {
   1336c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
   13370:	42aa      	cmp	r2, r5
   13372:	460e      	mov	r6, r1
   13374:	d028      	beq.n	133c8 <ull_adv_data_set+0x88>
   13376:	1c82      	adds	r2, r0, #2
		pdu->chan_sel = prev->chan_sel;
   13378:	f3c3 1c40 	ubfx	ip, r3, #5, #1
	pdu->type = prev->type;
   1337c:	f3c3 0003 	ubfx	r0, r3, #0, #4
   13380:	ea40 104c 	orr.w	r0, r0, ip, lsl #5
	pdu->tx_addr = prev->tx_addr;
   13384:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	pdu->type = prev->type;
   13388:	ea40 108c 	orr.w	r0, r0, ip, lsl #6
   1338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
	return (void *)pdu->pdu[last];
   13390:	f104 0c2b 	add.w	ip, r4, #43	; 0x2b
   13394:	eb0c 0802 	add.w	r8, ip, r2
   13398:	4303      	orrs	r3, r0
   1339a:	f80c 3002 	strb.w	r3, [ip, r2]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1339e:	f10e 0102 	add.w	r1, lr, #2
   133a2:	2206      	movs	r2, #6
   133a4:	f108 0002 	add.w	r0, r8, #2
   133a8:	f00b fd23 	bl	1edf2 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   133ac:	4632      	mov	r2, r6
   133ae:	4639      	mov	r1, r7
   133b0:	f108 0008 	add.w	r0, r8, #8
	pdu->len = BDADDR_SIZE + len;
   133b4:	3606      	adds	r6, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   133b6:	f00b fd1c 	bl	1edf2 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   133ba:	f888 6001 	strb.w	r6, [r8, #1]
	pdu->last = idx;
   133be:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   133c2:	2000      	movs	r0, #0
   133c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
   133c8:	3501      	adds	r5, #1
   133ca:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   133cc:	2d02      	cmp	r5, #2
   133ce:	d004      	beq.n	133da <ull_adv_data_set+0x9a>
   133d0:	2027      	movs	r0, #39	; 0x27
   133d2:	2202      	movs	r2, #2
   133d4:	fb10 2205 	smlabb	r2, r0, r5, r2
   133d8:	e7ce      	b.n	13378 <ull_adv_data_set+0x38>
   133da:	462a      	mov	r2, r5
			last = 0U;
   133dc:	2500      	movs	r5, #0
   133de:	e7cb      	b.n	13378 <ull_adv_data_set+0x38>

000133e0 <ll_adv_data_set>:
{
   133e0:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   133e2:	4601      	mov	r1, r0
   133e4:	4801      	ldr	r0, [pc, #4]	; (133ec <ll_adv_data_set+0xc>)
   133e6:	f7ff bfab 	b.w	13340 <ull_adv_data_set>
   133ea:	bf00      	nop
   133ec:	20001f8c 	.word	0x20001f8c

000133f0 <ull_scan_rsp_set>:
{
   133f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   133f4:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	if (pdu->first == pdu->last) {
   133f8:	f890 e07b 	ldrb.w	lr, [r0, #123]	; 0x7b
   133fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   13400:	4605      	mov	r5, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13402:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
   13406:	f103 0061 	add.w	r0, r3, #97	; 0x61
   1340a:	f105 0c1c 	add.w	ip, r5, #28
	if (pdu->first == pdu->last) {
   1340e:	45a6      	cmp	lr, r4
   13410:	460e      	mov	r6, r1
   13412:	4617      	mov	r7, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   13414:	eb0c 0100 	add.w	r1, ip, r0
	if (pdu->first == pdu->last) {
   13418:	d020      	beq.n	1345c <ull_scan_rsp_set+0x6c>
   1341a:	3302      	adds	r3, #2
	pdu->tx_addr = prev->tx_addr;
   1341c:	f81c 0000 	ldrb.w	r0, [ip, r0]
   13420:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return (void *)pdu->pdu[last];
   13424:	f105 027b 	add.w	r2, r5, #123	; 0x7b
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   13428:	0180      	lsls	r0, r0, #6
   1342a:	eb02 0803 	add.w	r8, r2, r3
   1342e:	f040 0004 	orr.w	r0, r0, #4
   13432:	54d0      	strb	r0, [r2, r3]
	pdu->len = BDADDR_SIZE + len;
   13434:	1db3      	adds	r3, r6, #6
   13436:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1343a:	3102      	adds	r1, #2
   1343c:	f108 0002 	add.w	r0, r8, #2
   13440:	2206      	movs	r2, #6
   13442:	f00b fcd6 	bl	1edf2 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   13446:	4632      	mov	r2, r6
   13448:	4639      	mov	r1, r7
   1344a:	f108 0008 	add.w	r0, r8, #8
   1344e:	f00b fcd0 	bl	1edf2 <memcpy>
	pdu->last = idx;
   13452:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
   13456:	2000      	movs	r0, #0
   13458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = pdu->last + 1;
   1345c:	3401      	adds	r4, #1
   1345e:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
   13460:	2c02      	cmp	r4, #2
   13462:	d004      	beq.n	1346e <ull_scan_rsp_set+0x7e>
   13464:	2227      	movs	r2, #39	; 0x27
   13466:	2302      	movs	r3, #2
   13468:	fb12 3304 	smlabb	r3, r2, r4, r3
   1346c:	e7d6      	b.n	1341c <ull_scan_rsp_set+0x2c>
   1346e:	4623      	mov	r3, r4
			last = 0U;
   13470:	2400      	movs	r4, #0
   13472:	e7d3      	b.n	1341c <ull_scan_rsp_set+0x2c>

00013474 <ll_adv_scan_rsp_set>:
{
   13474:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   13476:	4601      	mov	r1, r0
   13478:	4801      	ldr	r0, [pc, #4]	; (13480 <ll_adv_scan_rsp_set+0xc>)
   1347a:	f7ff bfb9 	b.w	133f0 <ull_scan_rsp_set>
   1347e:	bf00      	nop
   13480:	20001f8c 	.word	0x20001f8c

00013484 <tx_ull_dequeue>:
{
   13484:	b410      	push	{r4}
   13486:	e9d0 246c 	ldrd	r2, r4, [r0, #432]	; 0x1b0
   1348a:	4603      	mov	r3, r0
   1348c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1348e:	b164      	cbz	r4, 134aa <tx_ull_dequeue+0x26>
	if (conn->tx_head == conn->tx_ctrl) {
   13490:	4294      	cmp	r4, r2
   13492:	d027      	beq.n	134e4 <tx_ull_dequeue+0x60>
		if (conn->tx_head == conn->tx_data) {
   13494:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   13498:	4291      	cmp	r1, r2
   1349a:	d018      	beq.n	134ce <tx_ull_dequeue+0x4a>
		conn->tx_head = conn->tx_head->next;
   1349c:	6812      	ldr	r2, [r2, #0]
   1349e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
   134a2:	2300      	movs	r3, #0
}
   134a4:	bc10      	pop	{r4}
		tx->next = NULL;
   134a6:	6003      	str	r3, [r0, #0]
}
   134a8:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   134aa:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   134ae:	4291      	cmp	r1, r2
   134b0:	d023      	beq.n	134fa <tx_ull_dequeue+0x76>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   134b2:	7911      	ldrb	r1, [r2, #4]
   134b4:	f001 0103 	and.w	r1, r1, #3
   134b8:	2903      	cmp	r1, #3
   134ba:	d00d      	beq.n	134d8 <tx_ull_dequeue+0x54>
		conn->tx_head = conn->tx_head->next;
   134bc:	6812      	ldr	r2, [r2, #0]
   134be:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
   134c2:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   134c4:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
   134c8:	bc10      	pop	{r4}
		tx->next = tx;
   134ca:	6000      	str	r0, [r0, #0]
}
   134cc:	4770      	bx	lr
   134ce:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   134d0:	6809      	ldr	r1, [r1, #0]
   134d2:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
   134d6:	e7e1      	b.n	1349c <tx_ull_dequeue+0x18>
		    ((pdu_data_tx->llctrl.opcode !=
   134d8:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   134da:	2903      	cmp	r1, #3
   134dc:	d0de      	beq.n	1349c <tx_ull_dequeue+0x18>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   134de:	290a      	cmp	r1, #10
   134e0:	d1ec      	bne.n	134bc <tx_ull_dequeue+0x38>
   134e2:	e7db      	b.n	1349c <tx_ull_dequeue+0x18>
   134e4:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
   134e8:	6812      	ldr	r2, [r2, #0]
   134ea:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   134ee:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   134f0:	bf18      	it	ne
   134f2:	f8c3 21b4 	strne.w	r2, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   134f6:	d1e7      	bne.n	134c8 <tx_ull_dequeue+0x44>
   134f8:	e7e3      	b.n	134c2 <tx_ull_dequeue+0x3e>
	if (conn->tx_head == conn->tx_ctrl) {
   134fa:	2a00      	cmp	r2, #0
   134fc:	d1e8      	bne.n	134d0 <tx_ull_dequeue+0x4c>
   134fe:	f8d3 11b8 	ldr.w	r1, [r3, #440]	; 0x1b8
   13502:	4614      	mov	r4, r2
   13504:	e7f0      	b.n	134e8 <tx_ull_dequeue+0x64>
   13506:	bf00      	nop

00013508 <ticker_update_latency_cancel_op_cb>:
{
   13508:	b510      	push	{r4, lr}
   1350a:	460c      	mov	r4, r1
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1350c:	b930      	cbnz	r0, 1351c <ticker_update_latency_cancel_op_cb+0x14>
	conn->slave.latency_cancel = 0U;
   1350e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   13512:	f36f 0341 	bfc	r3, #1, #1
   13516:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1351a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   1351c:	4a09      	ldr	r2, [pc, #36]	; (13544 <ticker_update_latency_cancel_op_cb+0x3c>)
   1351e:	490a      	ldr	r1, [pc, #40]	; (13548 <ticker_update_latency_cancel_op_cb+0x40>)
   13520:	480a      	ldr	r0, [pc, #40]	; (1354c <ticker_update_latency_cancel_op_cb+0x44>)
   13522:	f44f 63c9 	mov.w	r3, #1608	; 0x648
   13526:	f009 f94c 	bl	1c7c2 <printk>
   1352a:	4040      	eors	r0, r0
   1352c:	f380 8811 	msr	BASEPRI, r0
   13530:	f04f 0003 	mov.w	r0, #3
   13534:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   13536:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1353a:	f36f 0341 	bfc	r3, #1, #1
   1353e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   13542:	bd10      	pop	{r4, pc}
   13544:	00022b08 	.word	0x00022b08
   13548:	00022b48 	.word	0x00022b48
   1354c:	00022678 	.word	0x00022678

00013550 <ctrl_tx_pause_enqueue>:
{
   13550:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   13552:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
   13556:	4604      	mov	r4, r0
   13558:	460d      	mov	r5, r1
	if (
   1355a:	b11b      	cbz	r3, 13564 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   1355c:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
   13560:	0788      	lsls	r0, r1, #30
   13562:	d50d      	bpl.n	13580 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
   13564:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   13568:	b301      	cbz	r1, 135ac <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
   1356a:	bb4a      	cbnz	r2, 135c0 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
   1356c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   13570:	681a      	ldr	r2, [r3, #0]
   13572:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   13574:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   13576:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
   1357a:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   1357c:	b19b      	cbz	r3, 135a6 <ctrl_tx_pause_enqueue+0x56>
}
   1357e:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   13580:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   13584:	07c9      	lsls	r1, r1, #31
   13586:	d4ed      	bmi.n	13564 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   13588:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   1358c:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   1358e:	bf04      	itt	eq
   13590:	6819      	ldreq	r1, [r3, #0]
   13592:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13596:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   1359a:	b1f9      	cbz	r1, 135dc <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
   1359c:	2a00      	cmp	r2, #0
   1359e:	d0e5      	beq.n	1356c <ctrl_tx_pause_enqueue+0x1c>
   135a0:	f240 735a 	movw	r3, #1882	; 0x75a
   135a4:	e00e      	b.n	135c4 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
   135a6:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   135aa:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   135ac:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   135ae:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
   135b2:	2a00      	cmp	r2, #0
   135b4:	d1e2      	bne.n	1357c <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
   135b6:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
   135ba:	2b00      	cmp	r3, #0
   135bc:	d1df      	bne.n	1357e <ctrl_tx_pause_enqueue+0x2e>
   135be:	e7f2      	b.n	135a6 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
   135c0:	f240 736c 	movw	r3, #1900	; 0x76c
   135c4:	4a0b      	ldr	r2, [pc, #44]	; (135f4 <ctrl_tx_pause_enqueue+0xa4>)
   135c6:	490c      	ldr	r1, [pc, #48]	; (135f8 <ctrl_tx_pause_enqueue+0xa8>)
   135c8:	480c      	ldr	r0, [pc, #48]	; (135fc <ctrl_tx_pause_enqueue+0xac>)
   135ca:	f009 f8fa 	bl	1c7c2 <printk>
   135ce:	4040      	eors	r0, r0
   135d0:	f380 8811 	msr	BASEPRI, r0
   135d4:	f04f 0003 	mov.w	r0, #3
   135d8:	df02      	svc	2
   135da:	e7c7      	b.n	1356c <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
   135dc:	6819      	ldr	r1, [r3, #0]
   135de:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   135e0:	601d      	str	r5, [r3, #0]
			if (!pause) {
   135e2:	2a00      	cmp	r2, #0
   135e4:	d1c9      	bne.n	1357a <ctrl_tx_pause_enqueue+0x2a>
				conn->tx_ctrl_last = tx;
   135e6:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   135ea:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
   135ec:	2b00      	cmp	r3, #0
   135ee:	d1c6      	bne.n	1357e <ctrl_tx_pause_enqueue+0x2e>
   135f0:	e7d9      	b.n	135a6 <ctrl_tx_pause_enqueue+0x56>
   135f2:	bf00      	nop
   135f4:	00022b08 	.word	0x00022b08
   135f8:	00022b5c 	.word	0x00022b5c
   135fc:	00022678 	.word	0x00022678

00013600 <init_reset>:
{
   13600:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   13602:	4813      	ldr	r0, [pc, #76]	; (13650 <init_reset+0x50>)
   13604:	4b13      	ldr	r3, [pc, #76]	; (13654 <init_reset+0x54>)
   13606:	2201      	movs	r2, #1
   13608:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1360c:	f7fb fa2a 	bl	ea64 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   13610:	4b11      	ldr	r3, [pc, #68]	; (13658 <init_reset+0x58>)
   13612:	2203      	movs	r2, #3
   13614:	1d18      	adds	r0, r3, #4
   13616:	2124      	movs	r1, #36	; 0x24
   13618:	f7fb fa24 	bl	ea64 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1361c:	4b0f      	ldr	r3, [pc, #60]	; (1365c <init_reset+0x5c>)
   1361e:	2204      	movs	r2, #4
   13620:	1898      	adds	r0, r3, r2
   13622:	2120      	movs	r1, #32
   13624:	f7fb fa1e 	bl	ea64 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   13628:	4b0d      	ldr	r3, [pc, #52]	; (13660 <init_reset+0x60>)
   1362a:	2207      	movs	r2, #7
   1362c:	1d18      	adds	r0, r3, #4
   1362e:	2108      	movs	r1, #8
   13630:	f7fb fa18 	bl	ea64 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   13634:	4b0b      	ldr	r3, [pc, #44]	; (13664 <init_reset+0x64>)
	default_phy_tx |= BIT(1);
   13636:	490c      	ldr	r1, [pc, #48]	; (13668 <init_reset+0x68>)
	default_phy_rx |= BIT(1);
   13638:	4a0c      	ldr	r2, [pc, #48]	; (1366c <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1363a:	480d      	ldr	r0, [pc, #52]	; (13670 <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1363c:	251b      	movs	r5, #27
   1363e:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(1);
   13640:	2303      	movs	r3, #3
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   13642:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(1);
   13646:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(1);
   13648:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1364a:	8004      	strh	r4, [r0, #0]
}
   1364c:	2000      	movs	r0, #0
   1364e:	bd38      	pop	{r3, r4, r5, pc}
   13650:	2000208c 	.word	0x2000208c
   13654:	20002088 	.word	0x20002088
   13658:	20002260 	.word	0x20002260
   1365c:	200022d0 	.word	0x200022d0
   13660:	20002354 	.word	0x20002354
   13664:	20002adc 	.word	0x20002adc
   13668:	2000307d 	.word	0x2000307d
   1366c:	2000307c 	.word	0x2000307c
   13670:	20002ade 	.word	0x20002ade

00013674 <tx_lll_flush>:
{
   13674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   13678:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1367c:	4935      	ldr	r1, [pc, #212]	; (13754 <tx_lll_flush+0xe0>)
{
   1367e:	b083      	sub	sp, #12
   13680:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   13682:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   13686:	4640      	mov	r0, r8
   13688:	f7fb fa50 	bl	eb2c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1368c:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   13690:	4629      	mov	r1, r5
   13692:	f005 fcbb 	bl	1900c <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   13696:	6d28      	ldr	r0, [r5, #80]	; 0x50
   13698:	4631      	mov	r1, r6
   1369a:	aa01      	add	r2, sp, #4
   1369c:	f7fb fa84 	bl	eba8 <memq_dequeue>
	while (link) {
   136a0:	b340      	cbz	r0, 136f4 <tx_lll_flush+0x80>
   136a2:	4c2d      	ldr	r4, [pc, #180]	; (13758 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
   136a4:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   136a8:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   136ac:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   136ae:	f894 c001 	ldrb.w	ip, [r4, #1]
   136b2:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   136b4:	1c4b      	adds	r3, r1, #1
   136b6:	b2db      	uxtb	r3, r3
		last = 0U;
   136b8:	459c      	cmp	ip, r3
   136ba:	bf08      	it	eq
   136bc:	2300      	moveq	r3, #0
	if (last == first) {
   136be:	429a      	cmp	r2, r3
   136c0:	d038      	beq.n	13734 <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   136c2:	7822      	ldrb	r2, [r4, #0]
   136c4:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   136c8:	eb19 0e02 	adds.w	lr, r9, r2
   136cc:	d032      	beq.n	13734 <tx_lll_flush+0xc0>
		lll_tx->node = tx;
   136ce:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
   136d2:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   136d6:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
   136da:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   136de:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   136e0:	6001      	str	r1, [r0, #0]
		tx->next = link;
   136e2:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   136e6:	4631      	mov	r1, r6
   136e8:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   136ea:	70e3      	strb	r3, [r4, #3]
   136ec:	f7fb fa5c 	bl	eba8 <memq_dequeue>
	while (link) {
   136f0:	2800      	cmp	r0, #0
   136f2:	d1db      	bne.n	136ac <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   136f4:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
   136f8:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
   136fc:	b150      	cbz	r0, 13714 <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
   136fe:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   13700:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   13702:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
   13706:	f7ff f9f9 	bl	12afc <ull_rx_put>
	ull_rx_sched();
   1370a:	f7ff fa07 	bl	12b1c <ull_rx_sched>
}
   1370e:	b003      	add	sp, #12
   13710:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   13714:	4a11      	ldr	r2, [pc, #68]	; (1375c <tx_lll_flush+0xe8>)
   13716:	4912      	ldr	r1, [pc, #72]	; (13760 <tx_lll_flush+0xec>)
   13718:	4812      	ldr	r0, [pc, #72]	; (13764 <tx_lll_flush+0xf0>)
   1371a:	f240 63ff 	movw	r3, #1791	; 0x6ff
   1371e:	f009 f850 	bl	1c7c2 <printk>
   13722:	4040      	eors	r0, r0
   13724:	f380 8811 	msr	BASEPRI, r0
   13728:	f04f 0003 	mov.w	r0, #3
   1372c:	df02      	svc	2
   1372e:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
   13732:	e7e4      	b.n	136fe <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
   13734:	4a09      	ldr	r2, [pc, #36]	; (1375c <tx_lll_flush+0xe8>)
   13736:	490c      	ldr	r1, [pc, #48]	; (13768 <tx_lll_flush+0xf4>)
   13738:	480a      	ldr	r0, [pc, #40]	; (13764 <tx_lll_flush+0xf0>)
   1373a:	f240 63eb 	movw	r3, #1771	; 0x6eb
   1373e:	f009 f840 	bl	1c7c2 <printk>
   13742:	4040      	eors	r0, r0
   13744:	f380 8811 	msr	BASEPRI, r0
   13748:	f04f 0003 	mov.w	r0, #3
   1374c:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1374e:	2300      	movs	r3, #0
   13750:	801b      	strh	r3, [r3, #0]
   13752:	deff      	udf	#255	; 0xff
   13754:	2000208c 	.word	0x2000208c
   13758:	2000058c 	.word	0x2000058c
   1375c:	00022b08 	.word	0x00022b08
   13760:	00022b6c 	.word	0x00022b6c
   13764:	00022678 	.word	0x00022678
   13768:	00022b64 	.word	0x00022b64

0001376c <ticker_start_conn_op_cb>:
{
   1376c:	b510      	push	{r4, lr}
   1376e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13770:	b990      	cbnz	r0, 13798 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
   13772:	4620      	mov	r0, r4
   13774:	f7ff f93c 	bl	129f0 <ull_update_unmark>
	LL_ASSERT(p == param);
   13778:	4284      	cmp	r4, r0
   1377a:	d00c      	beq.n	13796 <ticker_start_conn_op_cb+0x2a>
   1377c:	4a0d      	ldr	r2, [pc, #52]	; (137b4 <ticker_start_conn_op_cb+0x48>)
   1377e:	490e      	ldr	r1, [pc, #56]	; (137b8 <ticker_start_conn_op_cb+0x4c>)
   13780:	480e      	ldr	r0, [pc, #56]	; (137bc <ticker_start_conn_op_cb+0x50>)
   13782:	f44f 63cd 	mov.w	r3, #1640	; 0x668
   13786:	f009 f81c 	bl	1c7c2 <printk>
   1378a:	4040      	eors	r0, r0
   1378c:	f380 8811 	msr	BASEPRI, r0
   13790:	f04f 0003 	mov.w	r0, #3
   13794:	df02      	svc	2
}
   13796:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13798:	4a06      	ldr	r2, [pc, #24]	; (137b4 <ticker_start_conn_op_cb+0x48>)
   1379a:	4909      	ldr	r1, [pc, #36]	; (137c0 <ticker_start_conn_op_cb+0x54>)
   1379c:	4807      	ldr	r0, [pc, #28]	; (137bc <ticker_start_conn_op_cb+0x50>)
   1379e:	f240 6364 	movw	r3, #1636	; 0x664
   137a2:	f009 f80e 	bl	1c7c2 <printk>
   137a6:	4040      	eors	r0, r0
   137a8:	f380 8811 	msr	BASEPRI, r0
   137ac:	f04f 0003 	mov.w	r0, #3
   137b0:	df02      	svc	2
   137b2:	e7de      	b.n	13772 <ticker_start_conn_op_cb+0x6>
   137b4:	00022b08 	.word	0x00022b08
   137b8:	00022b88 	.word	0x00022b88
   137bc:	00022678 	.word	0x00022678
   137c0:	00022b7c 	.word	0x00022b7c

000137c4 <ticker_stop_conn_op_cb>:
{
   137c4:	b510      	push	{r4, lr}
   137c6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   137c8:	b990      	cbnz	r0, 137f0 <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
   137ca:	4620      	mov	r0, r4
   137cc:	f7ff f904 	bl	129d8 <ull_update_mark>
	LL_ASSERT(p == param);
   137d0:	4284      	cmp	r4, r0
   137d2:	d00c      	beq.n	137ee <ticker_stop_conn_op_cb+0x2a>
   137d4:	4a0d      	ldr	r2, [pc, #52]	; (1380c <ticker_stop_conn_op_cb+0x48>)
   137d6:	490e      	ldr	r1, [pc, #56]	; (13810 <ticker_stop_conn_op_cb+0x4c>)
   137d8:	480e      	ldr	r0, [pc, #56]	; (13814 <ticker_stop_conn_op_cb+0x50>)
   137da:	f240 635f 	movw	r3, #1631	; 0x65f
   137de:	f008 fff0 	bl	1c7c2 <printk>
   137e2:	4040      	eors	r0, r0
   137e4:	f380 8811 	msr	BASEPRI, r0
   137e8:	f04f 0003 	mov.w	r0, #3
   137ec:	df02      	svc	2
}
   137ee:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   137f0:	4a06      	ldr	r2, [pc, #24]	; (1380c <ticker_stop_conn_op_cb+0x48>)
   137f2:	4909      	ldr	r1, [pc, #36]	; (13818 <ticker_stop_conn_op_cb+0x54>)
   137f4:	4807      	ldr	r0, [pc, #28]	; (13814 <ticker_stop_conn_op_cb+0x50>)
   137f6:	f240 635b 	movw	r3, #1627	; 0x65b
   137fa:	f008 ffe2 	bl	1c7c2 <printk>
   137fe:	4040      	eors	r0, r0
   13800:	f380 8811 	msr	BASEPRI, r0
   13804:	f04f 0003 	mov.w	r0, #3
   13808:	df02      	svc	2
   1380a:	e7de      	b.n	137ca <ticker_stop_conn_op_cb+0x6>
   1380c:	00022b08 	.word	0x00022b08
   13810:	00022b88 	.word	0x00022b88
   13814:	00022678 	.word	0x00022678
   13818:	00022b7c 	.word	0x00022b7c

0001381c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1381c:	b900      	cbnz	r0, 13820 <ticker_update_conn_op_cb+0x4>
   1381e:	4770      	bx	lr
{
   13820:	b510      	push	{r4, lr}
   13822:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   13824:	f7ff f8f0 	bl	12a08 <ull_update_mark_get>
   13828:	4284      	cmp	r4, r0
   1382a:	d010      	beq.n	1384e <ticker_update_conn_op_cb+0x32>
   1382c:	f7ff f8ce 	bl	129cc <ull_disable_mark_get>
   13830:	4284      	cmp	r4, r0
   13832:	d00c      	beq.n	1384e <ticker_update_conn_op_cb+0x32>
   13834:	4a06      	ldr	r2, [pc, #24]	; (13850 <ticker_update_conn_op_cb+0x34>)
   13836:	4907      	ldr	r1, [pc, #28]	; (13854 <ticker_update_conn_op_cb+0x38>)
   13838:	4807      	ldr	r0, [pc, #28]	; (13858 <ticker_update_conn_op_cb+0x3c>)
   1383a:	f240 6354 	movw	r3, #1620	; 0x654
   1383e:	f008 ffc0 	bl	1c7c2 <printk>
   13842:	4040      	eors	r0, r0
   13844:	f380 8811 	msr	BASEPRI, r0
   13848:	f04f 0003 	mov.w	r0, #3
   1384c:	df02      	svc	2
}
   1384e:	bd10      	pop	{r4, pc}
   13850:	00022b08 	.word	0x00022b08
   13854:	00022b94 	.word	0x00022b94
   13858:	00022678 	.word	0x00022678

0001385c <ticker_op_stop_cb>:
{
   1385c:	b510      	push	{r4, lr}
   1385e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13860:	b9b0      	cbnz	r0, 13890 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   13862:	4b12      	ldr	r3, [pc, #72]	; (138ac <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   13864:	2200      	movs	r2, #0
   13866:	4611      	mov	r1, r2
   13868:	2002      	movs	r0, #2
	mfy.param = param;
   1386a:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1386c:	f7fb fa00 	bl	ec70 <mayfly_enqueue>
	LL_ASSERT(!retval);
   13870:	b900      	cbnz	r0, 13874 <ticker_op_stop_cb+0x18>
}
   13872:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   13874:	4a0e      	ldr	r2, [pc, #56]	; (138b0 <ticker_op_stop_cb+0x54>)
   13876:	490f      	ldr	r1, [pc, #60]	; (138b4 <ticker_op_stop_cb+0x58>)
   13878:	480f      	ldr	r0, [pc, #60]	; (138b8 <ticker_op_stop_cb+0x5c>)
   1387a:	f44f 63cf 	mov.w	r3, #1656	; 0x678
   1387e:	f008 ffa0 	bl	1c7c2 <printk>
   13882:	4040      	eors	r0, r0
   13884:	f380 8811 	msr	BASEPRI, r0
   13888:	f04f 0003 	mov.w	r0, #3
   1388c:	df02      	svc	2
}
   1388e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   13890:	4a07      	ldr	r2, [pc, #28]	; (138b0 <ticker_op_stop_cb+0x54>)
   13892:	490a      	ldr	r1, [pc, #40]	; (138bc <ticker_op_stop_cb+0x60>)
   13894:	4808      	ldr	r0, [pc, #32]	; (138b8 <ticker_op_stop_cb+0x5c>)
   13896:	f240 6371 	movw	r3, #1649	; 0x671
   1389a:	f008 ff92 	bl	1c7c2 <printk>
   1389e:	4040      	eors	r0, r0
   138a0:	f380 8811 	msr	BASEPRI, r0
   138a4:	f04f 0003 	mov.w	r0, #3
   138a8:	df02      	svc	2
   138aa:	e7da      	b.n	13862 <ticker_op_stop_cb+0x6>
   138ac:	200005f4 	.word	0x200005f4
   138b0:	00022b08 	.word	0x00022b08
   138b4:	00022928 	.word	0x00022928
   138b8:	00022678 	.word	0x00022678
   138bc:	00022b7c 	.word	0x00022b7c

000138c0 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   138c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   138c4:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   138c6:	4826      	ldr	r0, [pc, #152]	; (13960 <reject_ext_ind_send.isra.0+0xa0>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   138c8:	460e      	mov	r6, r1
   138ca:	4690      	mov	r8, r2
   138cc:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   138ce:	f7fb f8f7 	bl	eac0 <mem_acquire>
	if (!tx) {
   138d2:	2800      	cmp	r0, #0
   138d4:	d041      	beq.n	1395a <reject_ext_ind_send.isra.0+0x9a>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   138d6:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   138d8:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   138da:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   138dc:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   138e0:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   138e4:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   138e6:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   138e8:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   138ea:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   138ec:	71c1      	strb	r1, [r0, #7]
	if (
   138ee:	b11a      	cbz	r2, 138f8 <reject_ext_ind_send.isra.0+0x38>
	    !conn->llcp_enc.pause_tx &&
   138f0:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   138f4:	0799      	lsls	r1, r3, #30
   138f6:	d510      	bpl.n	1391a <reject_ext_ind_send.isra.0+0x5a>
		if (!conn->tx_ctrl) {
   138f8:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   138fc:	b33b      	cbz	r3, 1394e <reject_ext_ind_send.isra.0+0x8e>
	tx->next = conn->tx_ctrl_last->next;
   138fe:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   13902:	681a      	ldr	r2, [r3, #0]
   13904:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13906:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   13908:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   1390c:	6802      	ldr	r2, [r0, #0]
	if (!tx->next) {
   1390e:	b1da      	cbz	r2, 13948 <reject_ext_ind_send.isra.0+0x88>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13910:	2303      	movs	r3, #3
   13912:	7033      	strb	r3, [r6, #0]

	return 0;
   13914:	2000      	movs	r0, #0
}
   13916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   1391a:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   1391e:	07db      	lsls	r3, r3, #31
   13920:	d4ea      	bmi.n	138f8 <reject_ext_ind_send.isra.0+0x38>
		if (conn->tx_head == conn->tx_data) {
   13922:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   13926:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   13928:	bf04      	itt	eq
   1392a:	6813      	ldreq	r3, [r2, #0]
   1392c:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13930:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   13934:	2b00      	cmp	r3, #0
   13936:	d1e2      	bne.n	138fe <reject_ext_ind_send.isra.0+0x3e>
			tx->next = conn->tx_head->next;
   13938:	6813      	ldr	r3, [r2, #0]
   1393a:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1393c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   1393e:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   13940:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   13944:	2a00      	cmp	r2, #0
   13946:	d1e3      	bne.n	13910 <reject_ext_ind_send.isra.0+0x50>
		conn->tx_data_last = tx;
   13948:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   1394c:	e7e0      	b.n	13910 <reject_ext_ind_send.isra.0+0x50>
			tx->next = conn->tx_head;
   1394e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   13950:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   13954:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   13958:	e7d9      	b.n	1390e <reject_ext_ind_send.isra.0+0x4e>
		return -ENOBUFS;
   1395a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1395e:	e7da      	b.n	13916 <reject_ext_ind_send.isra.0+0x56>
   13960:	200022d0 	.word	0x200022d0

00013964 <start_enc_rsp_send>:
{
   13964:	b570      	push	{r4, r5, r6, lr}
   13966:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   13968:	b179      	cbz	r1, 1398a <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   1396a:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1396e:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   13970:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13974:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   13976:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1397a:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1397e:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13980:	704e      	strb	r6, [r1, #1]
	return 0;
   13982:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13984:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13986:	70cd      	strb	r5, [r1, #3]
}
   13988:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1398a:	4826      	ldr	r0, [pc, #152]	; (13a24 <start_enc_rsp_send+0xc0>)
   1398c:	f7fb f898 	bl	eac0 <mem_acquire>
		if (!tx) {
   13990:	2800      	cmp	r0, #0
   13992:	d043      	beq.n	13a1c <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   13994:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13998:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   1399a:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1399e:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   139a0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   139a4:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   139a6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139aa:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   139ae:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139b0:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   139b2:	71c1      	strb	r1, [r0, #7]
	if (
   139b4:	b1e3      	cbz	r3, 139f0 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   139b6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   139ba:	0791      	lsls	r1, r2, #30
   139bc:	d418      	bmi.n	139f0 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   139be:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   139c2:	07d2      	lsls	r2, r2, #31
   139c4:	d414      	bmi.n	139f0 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   139c6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   139ca:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   139cc:	bf04      	itt	eq
   139ce:	681a      	ldreq	r2, [r3, #0]
   139d0:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   139d4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   139d8:	b1ca      	cbz	r2, 13a0e <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   139da:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   139de:	681a      	ldr	r2, [r3, #0]
   139e0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   139e2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   139e4:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   139e8:	6803      	ldr	r3, [r0, #0]
	if (!tx->next) {
   139ea:	b163      	cbz	r3, 13a06 <start_enc_rsp_send+0xa2>
	return 0;
   139ec:	2000      	movs	r0, #0
}
   139ee:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   139f0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   139f4:	2a00      	cmp	r2, #0
   139f6:	d1f0      	bne.n	139da <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   139f8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   139fa:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   139fe:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   13a02:	2b00      	cmp	r3, #0
   13a04:	d1f2      	bne.n	139ec <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   13a06:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   13a0a:	4618      	mov	r0, r3
}
   13a0c:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   13a0e:	681a      	ldr	r2, [r3, #0]
   13a10:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13a12:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   13a14:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13a16:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   13a1a:	e7e6      	b.n	139ea <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   13a1c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13a20:	bd70      	pop	{r4, r5, r6, pc}
   13a22:	bf00      	nop
   13a24:	200022d0 	.word	0x200022d0

00013a28 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   13a28:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   13a2c:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
   13a30:	079b      	lsls	r3, r3, #30
{
   13a32:	b570      	push	{r4, r5, r6, lr}
   13a34:	4604      	mov	r4, r0
   13a36:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   13a38:	d509      	bpl.n	13a4e <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   13a3a:	2a00      	cmp	r2, #0
   13a3c:	d03d      	beq.n	13aba <ctrl_tx_sec_enqueue+0x92>
			tx->next = conn->tx_ctrl_last->next;
   13a3e:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   13a42:	681a      	ldr	r2, [r3, #0]
   13a44:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   13a46:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   13a48:	682b      	ldr	r3, [r5, #0]
   13a4a:	b333      	cbz	r3, 13a9a <ctrl_tx_sec_enqueue+0x72>
}
   13a4c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->tx_head) {
   13a4e:	f8d0 11b0 	ldr.w	r1, [r0, #432]	; 0x1b0
   13a52:	b1e1      	cbz	r1, 13a8e <ctrl_tx_sec_enqueue+0x66>
			if ((conn->llcp_req != conn->llcp_ack) &&
   13a54:	f890 31ab 	ldrb.w	r3, [r0, #427]	; 0x1ab
   13a58:	f890 60e8 	ldrb.w	r6, [r0, #232]	; 0xe8
   13a5c:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   13a60:	4286      	cmp	r6, r0
   13a62:	f003 0301 	and.w	r3, r3, #1
   13a66:	d003      	beq.n	13a70 <ctrl_tx_sec_enqueue+0x48>
   13a68:	f894 00ea 	ldrb.w	r0, [r4, #234]	; 0xea
   13a6c:	2803      	cmp	r0, #3
   13a6e:	d02c      	beq.n	13aca <ctrl_tx_sec_enqueue+0xa2>
	    !conn->llcp_phy.pause_tx &&
   13a70:	b9b3      	cbnz	r3, 13aa0 <ctrl_tx_sec_enqueue+0x78>
		if (conn->tx_head == conn->tx_data) {
   13a72:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   13a76:	4299      	cmp	r1, r3
   13a78:	d045      	beq.n	13b06 <ctrl_tx_sec_enqueue+0xde>
		if (!conn->tx_ctrl) {
   13a7a:	b99a      	cbnz	r2, 13aa4 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head->next;
   13a7c:	680b      	ldr	r3, [r1, #0]
   13a7e:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   13a80:	600d      	str	r5, [r1, #0]
				conn->tx_ctrl_last = tx;
   13a82:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
   13a86:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   13a88:	2b00      	cmp	r3, #0
   13a8a:	d1df      	bne.n	13a4c <ctrl_tx_sec_enqueue+0x24>
   13a8c:	e005      	b.n	13a9a <ctrl_tx_sec_enqueue+0x72>
		if (!conn->tx_ctrl) {
   13a8e:	b94a      	cbnz	r2, 13aa4 <ctrl_tx_sec_enqueue+0x7c>
			tx->next = conn->tx_head;
   13a90:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   13a92:	e9c0 556c 	strd	r5, r5, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   13a96:	f8c0 51b8 	str.w	r5, [r0, #440]	; 0x1b8
			conn->tx_data_last = tx;
   13a9a:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   13a9e:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   13aa0:	2a00      	cmp	r2, #0
   13aa2:	d036      	beq.n	13b12 <ctrl_tx_sec_enqueue+0xea>
	tx->next = conn->tx_ctrl_last->next;
   13aa4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   13aa8:	681a      	ldr	r2, [r3, #0]
   13aaa:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   13aac:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   13aae:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
   13ab2:	682b      	ldr	r3, [r5, #0]
		if (!tx->next) {
   13ab4:	2b00      	cmp	r3, #0
   13ab6:	d1c9      	bne.n	13a4c <ctrl_tx_sec_enqueue+0x24>
   13ab8:	e7ef      	b.n	13a9a <ctrl_tx_sec_enqueue+0x72>
			tx->next = conn->tx_head;
   13aba:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   13abe:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   13ac0:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   13ac4:	2b00      	cmp	r3, #0
   13ac6:	d1c1      	bne.n	13a4c <ctrl_tx_sec_enqueue+0x24>
   13ac8:	e7e7      	b.n	13a9a <ctrl_tx_sec_enqueue+0x72>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   13aca:	7908      	ldrb	r0, [r1, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   13acc:	f000 0003 	and.w	r0, r0, #3
   13ad0:	2803      	cmp	r0, #3
   13ad2:	d1cd      	bne.n	13a70 <ctrl_tx_sec_enqueue+0x48>
			    ((pdu_data_tx->llctrl.opcode ==
   13ad4:	79c8      	ldrb	r0, [r1, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   13ad6:	2803      	cmp	r0, #3
   13ad8:	d001      	beq.n	13ade <ctrl_tx_sec_enqueue+0xb6>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   13ada:	280a      	cmp	r0, #10
   13adc:	d1c8      	bne.n	13a70 <ctrl_tx_sec_enqueue+0x48>
	    !conn->llcp_phy.pause_tx &&
   13ade:	b9f3      	cbnz	r3, 13b1e <ctrl_tx_sec_enqueue+0xf6>
		if (conn->tx_head == conn->tx_data) {
   13ae0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   13ae4:	428b      	cmp	r3, r1
   13ae6:	d022      	beq.n	13b2e <ctrl_tx_sec_enqueue+0x106>
		if (!conn->tx_ctrl) {
   13ae8:	b332      	cbz	r2, 13b38 <ctrl_tx_sec_enqueue+0x110>
			LL_ASSERT(!pause);
   13aea:	f240 735a 	movw	r3, #1882	; 0x75a
			LL_ASSERT(!pause);
   13aee:	4a14      	ldr	r2, [pc, #80]	; (13b40 <ctrl_tx_sec_enqueue+0x118>)
   13af0:	4914      	ldr	r1, [pc, #80]	; (13b44 <ctrl_tx_sec_enqueue+0x11c>)
   13af2:	4815      	ldr	r0, [pc, #84]	; (13b48 <ctrl_tx_sec_enqueue+0x120>)
   13af4:	f008 fe65 	bl	1c7c2 <printk>
   13af8:	4040      	eors	r0, r0
   13afa:	f380 8811 	msr	BASEPRI, r0
   13afe:	f04f 0003 	mov.w	r0, #3
   13b02:	df02      	svc	2
   13b04:	e7ce      	b.n	13aa4 <ctrl_tx_sec_enqueue+0x7c>
			conn->tx_data = conn->tx_data->next;
   13b06:	680b      	ldr	r3, [r1, #0]
   13b08:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13b0c:	2a00      	cmp	r2, #0
   13b0e:	d1c9      	bne.n	13aa4 <ctrl_tx_sec_enqueue+0x7c>
   13b10:	e7b4      	b.n	13a7c <ctrl_tx_sec_enqueue+0x54>
			tx->next = conn->tx_head;
   13b12:	6029      	str	r1, [r5, #0]
				conn->tx_ctrl = tx;
   13b14:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   13b18:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   13b1c:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   13b1e:	b112      	cbz	r2, 13b26 <ctrl_tx_sec_enqueue+0xfe>
			LL_ASSERT(!pause);
   13b20:	f240 736c 	movw	r3, #1900	; 0x76c
   13b24:	e7e3      	b.n	13aee <ctrl_tx_sec_enqueue+0xc6>
			tx->next = conn->tx_head;
   13b26:	6029      	str	r1, [r5, #0]
			conn->tx_head = tx;
   13b28:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   13b2c:	bd70      	pop	{r4, r5, r6, pc}
			conn->tx_data = conn->tx_data->next;
   13b2e:	680b      	ldr	r3, [r1, #0]
   13b30:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   13b34:	2a00      	cmp	r2, #0
   13b36:	d1d8      	bne.n	13aea <ctrl_tx_sec_enqueue+0xc2>
			tx->next = conn->tx_head->next;
   13b38:	680b      	ldr	r3, [r1, #0]
   13b3a:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
   13b3c:	600d      	str	r5, [r1, #0]
			if (!pause) {
   13b3e:	e783      	b.n	13a48 <ctrl_tx_sec_enqueue+0x20>
   13b40:	00022b08 	.word	0x00022b08
   13b44:	00022b5c 	.word	0x00022b5c
   13b48:	00022678 	.word	0x00022678

00013b4c <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   13b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13b4e:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13b50:	4825      	ldr	r0, [pc, #148]	; (13be8 <feature_rsp_send.isra.0+0x9c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   13b52:	460d      	mov	r5, r1
   13b54:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13b56:	f7fa ffb3 	bl	eac0 <mem_acquire>
	if (!tx) {
   13b5a:	2800      	cmp	r0, #0
   13b5c:	d040      	beq.n	13be0 <feature_rsp_send.isra.0+0x94>
	       (features[1] << 8) | (features[2] << 16);
   13b5e:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   13b60:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   13b62:	4a22      	ldr	r2, [pc, #136]	; (13bec <feature_rsp_send.isra.0+0xa0>)
   13b64:	4604      	mov	r4, r0
   13b66:	7978      	ldrb	r0, [r7, #5]
   13b68:	041b      	lsls	r3, r3, #16
   13b6a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   13b6e:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   13b70:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   13b74:	481e      	ldr	r0, [pc, #120]	; (13bf0 <feature_rsp_send.isra.0+0xa4>)
	       (features[1] << 8) | (features[2] << 16);
   13b76:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   13b78:	400b      	ands	r3, r1
   13b7a:	f3c3 0310 	ubfx	r3, r3, #0, #17
   13b7e:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   13b82:	79bb      	ldrb	r3, [r7, #6]
   13b84:	f897 c005 	ldrb.w	ip, [r7, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   13b88:	7939      	ldrb	r1, [r7, #4]
	conn->common.fex_valid = 1U;
   13b8a:	f896 70dc 	ldrb.w	r7, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   13b8e:	041b      	lsls	r3, r3, #16
   13b90:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   13b94:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13b96:	7921      	ldrb	r1, [r4, #4]
	       (features[1] << 8) | (features[2] << 16);
   13b98:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   13b9a:	f047 0201 	orr.w	r2, r7, #1
   13b9e:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   13ba2:	4018      	ands	r0, r3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13ba4:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13ba6:	f041 0303 	orr.w	r3, r1, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13baa:	2109      	movs	r1, #9
	conn->llcp_feature.features_peer =
   13bac:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   13bb0:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   13bb2:	7161      	strb	r1, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   13bb4:	71e1      	strb	r1, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   13bb6:	18a0      	adds	r0, r4, r2
   13bb8:	2100      	movs	r1, #0
   13bba:	f00b f945 	bl	1ee48 <memset>
	feat_result &= 0xFF;
   13bbe:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[2] = val >> 16;
   13bc2:	2201      	movs	r2, #1
   13bc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   13bc8:	2141      	movs	r1, #65	; 0x41
	dst[0] = val;
   13bca:	7223      	strb	r3, [r4, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   13bcc:	4630      	mov	r0, r6
	dst[1] = val >> 8;
   13bce:	7261      	strb	r1, [r4, #9]
	dst[2] = val >> 16;
   13bd0:	72a2      	strb	r2, [r4, #10]
   13bd2:	4621      	mov	r1, r4
   13bd4:	f7ff ff28 	bl	13a28 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   13bd8:	2303      	movs	r3, #3
   13bda:	702b      	strb	r3, [r5, #0]
	return 0;
   13bdc:	2000      	movs	r0, #0
}
   13bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   13be0:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13be6:	bf00      	nop
   13be8:	200022d0 	.word	0x200022d0
   13bec:	fffe30d0 	.word	0xfffe30d0
   13bf0:	0001ff7f 	.word	0x0001ff7f

00013bf4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   13bf4:	4801      	ldr	r0, [pc, #4]	; (13bfc <ll_conn_acquire+0x8>)
   13bf6:	f7fa bf63 	b.w	eac0 <mem_acquire>
   13bfa:	bf00      	nop
   13bfc:	20002088 	.word	0x20002088

00013c00 <ll_conn_release>:
	mem_release(conn, &conn_free);
   13c00:	4901      	ldr	r1, [pc, #4]	; (13c08 <ll_conn_release+0x8>)
   13c02:	f7fa bf77 	b.w	eaf4 <mem_release>
   13c06:	bf00      	nop
   13c08:	20002088 	.word	0x20002088

00013c0c <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   13c0c:	4902      	ldr	r1, [pc, #8]	; (13c18 <ll_conn_handle_get+0xc>)
   13c0e:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   13c12:	f7fa bf8b 	b.w	eb2c <mem_index_get>
   13c16:	bf00      	nop
   13c18:	2000208c 	.word	0x2000208c

00013c1c <ll_conn_get>:
{
   13c1c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c1e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13c22:	4801      	ldr	r0, [pc, #4]	; (13c28 <ll_conn_get+0xc>)
   13c24:	f7fa bf7e 	b.w	eb24 <mem_get>
   13c28:	2000208c 	.word	0x2000208c

00013c2c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13c2c:	b958      	cbnz	r0, 13c46 <ll_connected_get+0x1a>
{
   13c2e:	b508      	push	{r3, lr}
   13c30:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c32:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13c36:	4805      	ldr	r0, [pc, #20]	; (13c4c <ll_connected_get+0x20>)
   13c38:	f7fa ff74 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13c3c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13c3e:	b903      	cbnz	r3, 13c42 <ll_connected_get+0x16>
}
   13c40:	bd08      	pop	{r3, pc}
		return NULL;
   13c42:	2000      	movs	r0, #0
}
   13c44:	bd08      	pop	{r3, pc}
		return NULL;
   13c46:	2000      	movs	r0, #0
}
   13c48:	4770      	bx	lr
   13c4a:	bf00      	nop
   13c4c:	2000208c 	.word	0x2000208c

00013c50 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   13c50:	4801      	ldr	r0, [pc, #4]	; (13c58 <ll_tx_mem_acquire+0x8>)
   13c52:	f7fa bf35 	b.w	eac0 <mem_acquire>
   13c56:	bf00      	nop
   13c58:	20002260 	.word	0x20002260

00013c5c <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   13c5c:	4901      	ldr	r1, [pc, #4]	; (13c64 <ll_tx_mem_release+0x8>)
   13c5e:	f7fa bf49 	b.w	eaf4 <mem_release>
   13c62:	bf00      	nop
   13c64:	20002260 	.word	0x20002260

00013c68 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13c68:	2800      	cmp	r0, #0
   13c6a:	d15b      	bne.n	13d24 <ll_tx_mem_enqueue+0xbc>
{
   13c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c6e:	4602      	mov	r2, r0
   13c70:	b089      	sub	sp, #36	; 0x24
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13c72:	482e      	ldr	r0, [pc, #184]	; (13d2c <ll_tx_mem_enqueue+0xc4>)
   13c74:	460c      	mov	r4, r1
   13c76:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13c7a:	f7fa ff53 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13c7e:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
   13c80:	b9e6      	cbnz	r6, 13cbc <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   13c82:	4a2b      	ldr	r2, [pc, #172]	; (13d30 <ll_tx_mem_enqueue+0xc8>)
   13c84:	78d7      	ldrb	r7, [r2, #3]
	if (last == count) {
   13c86:	7855      	ldrb	r5, [r2, #1]
   13c88:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   13c8a:	1c7b      	adds	r3, r7, #1
   13c8c:	b2db      	uxtb	r3, r3
		last = 0U;
   13c8e:	429d      	cmp	r5, r3
   13c90:	bf08      	it	eq
   13c92:	2300      	moveq	r3, #0
	if (last == first) {
   13c94:	4299      	cmp	r1, r3
   13c96:	d015      	beq.n	13cc4 <ll_tx_mem_enqueue+0x5c>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   13c98:	4615      	mov	r5, r2
   13c9a:	f815 1b04 	ldrb.w	r1, [r5], #4
   13c9e:	fb11 f107 	smulbb	r1, r1, r7
	if (!lll_tx) {
   13ca2:	186f      	adds	r7, r5, r1
   13ca4:	d00e      	beq.n	13cc4 <ll_tx_mem_enqueue+0x5c>
	if (conn->lll.role && conn->lll.latency_event &&
   13ca6:	f990 c03d 	ldrsb.w	ip, [r0, #61]	; 0x3d
	lll_tx->handle = handle;
   13caa:	526e      	strh	r6, [r5, r1]
	if (conn->lll.role && conn->lll.latency_event &&
   13cac:	f1bc 0f00 	cmp.w	ip, #0
	lll_tx->node = tx;
   13cb0:	607c      	str	r4, [r7, #4]
	*last = idx; /* Commit: Update write index */
   13cb2:	70d3      	strb	r3, [r2, #3]
	if (conn->lll.role && conn->lll.latency_event &&
   13cb4:	db0a      	blt.n	13ccc <ll_tx_mem_enqueue+0x64>
	return 0;
   13cb6:	2000      	movs	r0, #0
}
   13cb8:	b009      	add	sp, #36	; 0x24
   13cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EINVAL;
   13cbc:	f06f 0015 	mvn.w	r0, #21
}
   13cc0:	b009      	add	sp, #36	; 0x24
   13cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   13cc4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   13cc8:	b009      	add	sp, #36	; 0x24
   13cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (conn->lll.role && conn->lll.latency_event &&
   13ccc:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   13cce:	2b00      	cmp	r3, #0
   13cd0:	d0f1      	beq.n	13cb6 <ll_tx_mem_enqueue+0x4e>
	    !conn->slave.latency_cancel) {
   13cd2:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->lll.role && conn->lll.latency_event &&
   13cd6:	f013 0402 	ands.w	r4, r3, #2
   13cda:	d1ec      	bne.n	13cb6 <ll_tx_mem_enqueue+0x4e>
		conn->slave.latency_cancel = 1U;
   13cdc:	f043 0302 	orr.w	r3, r3, #2
   13ce0:	f880 30dc 	strb.w	r3, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   13ce4:	4913      	ldr	r1, [pc, #76]	; (13d34 <ll_tx_mem_enqueue+0xcc>)
   13ce6:	9006      	str	r0, [sp, #24]
   13ce8:	2301      	movs	r3, #1
   13cea:	2203      	movs	r2, #3
   13cec:	9105      	str	r1, [sp, #20]
   13cee:	9303      	str	r3, [sp, #12]
   13cf0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   13cf4:	4623      	mov	r3, r4
   13cf6:	9404      	str	r4, [sp, #16]
   13cf8:	9400      	str	r4, [sp, #0]
   13cfa:	4611      	mov	r1, r2
   13cfc:	4620      	mov	r0, r4
   13cfe:	f7fc fa0b 	bl	10118 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13d02:	f030 0302 	bics.w	r3, r0, #2
   13d06:	d0d6      	beq.n	13cb6 <ll_tx_mem_enqueue+0x4e>
   13d08:	4a0b      	ldr	r2, [pc, #44]	; (13d38 <ll_tx_mem_enqueue+0xd0>)
   13d0a:	490c      	ldr	r1, [pc, #48]	; (13d3c <ll_tx_mem_enqueue+0xd4>)
   13d0c:	480c      	ldr	r0, [pc, #48]	; (13d40 <ll_tx_mem_enqueue+0xd8>)
   13d0e:	23fd      	movs	r3, #253	; 0xfd
   13d10:	f008 fd57 	bl	1c7c2 <printk>
   13d14:	4040      	eors	r0, r0
   13d16:	f380 8811 	msr	BASEPRI, r0
   13d1a:	f04f 0003 	mov.w	r0, #3
   13d1e:	df02      	svc	2
	return 0;
   13d20:	4620      	mov	r0, r4
   13d22:	e7c9      	b.n	13cb8 <ll_tx_mem_enqueue+0x50>
		return -EINVAL;
   13d24:	f06f 0015 	mvn.w	r0, #21
}
   13d28:	4770      	bx	lr
   13d2a:	bf00      	nop
   13d2c:	2000208c 	.word	0x2000208c
   13d30:	200005d0 	.word	0x200005d0
   13d34:	00013509 	.word	0x00013509
   13d38:	00022b08 	.word	0x00022b08
   13d3c:	00022be8 	.word	0x00022be8
   13d40:	00022678 	.word	0x00022678

00013d44 <ll_conn_update>:
{
   13d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13d48:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   13d4c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   13d50:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   13d54:	bb40      	cbnz	r0, 13da8 <ll_conn_update+0x64>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13d56:	460c      	mov	r4, r1
   13d58:	4616      	mov	r6, r2
   13d5a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13d5e:	4602      	mov	r2, r0
   13d60:	4839      	ldr	r0, [pc, #228]	; (13e48 <ll_conn_update+0x104>)
   13d62:	461d      	mov	r5, r3
   13d64:	f7fa fede 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13d68:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13d6a:	b9eb      	cbnz	r3, 13da8 <ll_conn_update+0x64>
	if (!cmd) {
   13d6c:	b1fc      	cbz	r4, 13dae <ll_conn_update+0x6a>
		cmd--;
   13d6e:	3c01      	subs	r4, #1
		if (cmd) {
   13d70:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   13d74:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   13d78:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
   13d7c:	d04b      	beq.n	13e16 <ll_conn_update+0xd2>
			if ((conn->llcp_conn_param.req ==
   13d7e:	428a      	cmp	r2, r1
   13d80:	d012      	beq.n	13da8 <ll_conn_update+0x64>
			    (conn->llcp_conn_param.state !=
   13d82:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   13d86:	f002 0107 	and.w	r1, r2, #7
   13d8a:	2903      	cmp	r1, #3
   13d8c:	d10c      	bne.n	13da8 <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
   13d8e:	f004 0407 	and.w	r4, r4, #7
   13d92:	f044 0408 	orr.w	r4, r4, #8
   13d96:	f022 020f 	bic.w	r2, r2, #15
   13d9a:	4314      	orrs	r4, r2
   13d9c:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   13da0:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
   13da4:	4618      	mov	r0, r3
   13da6:	e000      	b.n	13daa <ll_conn_update+0x66>
		return BT_HCI_ERR_CMD_DISALLOWED;
   13da8:	200c      	movs	r0, #12
}
   13daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!conn->llcp_conn_param.disabled &&
   13dae:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   13db2:	06d9      	lsls	r1, r3, #27
   13db4:	d523      	bpl.n	13dfe <ll_conn_update+0xba>
		} else if (conn->lll.role) {
   13db6:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   13dba:	2b00      	cmp	r3, #0
   13dbc:	db42      	blt.n	13e44 <ll_conn_update+0x100>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   13dbe:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   13dc2:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   13dc6:	4293      	cmp	r3, r2
   13dc8:	d1ee      	bne.n	13da8 <ll_conn_update+0x64>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13dca:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   13dce:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   13dd2:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   13dd4:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13dd6:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   13dda:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13dde:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   13de2:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   13de4:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   13de8:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   13dec:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   13df0:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   13df4:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   13df8:	4618      	mov	r0, r3
}
   13dfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   13dfe:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   13e02:	07da      	lsls	r2, r3, #31
   13e04:	d503      	bpl.n	13e0e <ll_conn_update+0xca>
		     (conn->llcp_feature.features_conn &
   13e06:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   13e0a:	079b      	lsls	r3, r3, #30
   13e0c:	d5d3      	bpl.n	13db6 <ll_conn_update+0x72>
   13e0e:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   13e12:	f890 1171 	ldrb.w	r1, [r0, #369]	; 0x171
			if (conn->llcp_conn_param.req !=
   13e16:	428a      	cmp	r2, r1
   13e18:	d1c6      	bne.n	13da8 <ll_conn_update+0x64>
			conn->llcp_conn_param.state = cmd;
   13e1a:	f8b0 3172 	ldrh.w	r3, [r0, #370]	; 0x172
			conn->llcp_conn_param.interval_min = interval_min;
   13e1e:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   13e22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
			conn->llcp_conn_param.req++;
   13e26:	3201      	adds	r2, #1
			conn->llcp_conn_param.state = cmd;
   13e28:	f043 0308 	orr.w	r3, r3, #8
			conn->llcp_conn_param.req++;
   13e2c:	f880 2170 	strb.w	r2, [r0, #368]	; 0x170
			conn->llcp_conn_param.interval_max = interval_max;
   13e30:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.latency = latency;
   13e34:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   13e38:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   13e3c:	f8a0 3172 	strh.w	r3, [r0, #370]	; 0x172
	return 0;
   13e40:	2000      	movs	r0, #0
   13e42:	e7b2      	b.n	13daa <ll_conn_update+0x66>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13e44:	201a      	movs	r0, #26
   13e46:	e7b0      	b.n	13daa <ll_conn_update+0x66>
   13e48:	2000208c 	.word	0x2000208c

00013e4c <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13e4c:	b9d0      	cbnz	r0, 13e84 <ll_chm_get+0x38>
{
   13e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13e50:	4602      	mov	r2, r0
   13e52:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13e54:	480c      	ldr	r0, [pc, #48]	; (13e88 <ll_chm_get+0x3c>)
   13e56:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13e5a:	f7fa fe63 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13e5e:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13e60:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   13e62:	b96e      	cbnz	r6, 13e80 <ll_chm_get+0x34>
   13e64:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   13e68:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   13e6c:	2205      	movs	r2, #5
   13e6e:	4639      	mov	r1, r7
   13e70:	4628      	mov	r0, r5
   13e72:	f00a ffbe 	bl	1edf2 <memcpy>
	} while (conn->chm_updated);
   13e76:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   13e7a:	2800      	cmp	r0, #0
   13e7c:	d1f4      	bne.n	13e68 <ll_chm_get+0x1c>
}
   13e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13e80:	200c      	movs	r0, #12
}
   13e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13e84:	200c      	movs	r0, #12
}
   13e86:	4770      	bx	lr
   13e88:	2000208c 	.word	0x2000208c

00013e8c <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13e8c:	b9a0      	cbnz	r0, 13eb8 <ll_terminate_ind_send+0x2c>
{
   13e8e:	b510      	push	{r4, lr}
   13e90:	4602      	mov	r2, r0
   13e92:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13e94:	4809      	ldr	r0, [pc, #36]	; (13ebc <ll_terminate_ind_send+0x30>)
   13e96:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13e9a:	f7fa fe43 	bl	eb24 <mem_get>
   13e9e:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   13ea0:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   13ea2:	b938      	cbnz	r0, 13eb4 <ll_terminate_ind_send+0x28>
	conn->llcp_terminate.req++;
   13ea4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
	conn->llcp_terminate.reason_own = reason;
   13ea8:	f883 412e 	strb.w	r4, [r3, #302]	; 0x12e
	conn->llcp_terminate.req++;
   13eac:	3201      	adds	r2, #1
   13eae:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
}
   13eb2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13eb4:	200c      	movs	r0, #12
}
   13eb6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13eb8:	200c      	movs	r0, #12
}
   13eba:	4770      	bx	lr
   13ebc:	2000208c 	.word	0x2000208c

00013ec0 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13ec0:	b9a8      	cbnz	r0, 13eee <ll_feature_req_send+0x2e>
{
   13ec2:	b508      	push	{r3, lr}
   13ec4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13ec6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13eca:	480a      	ldr	r0, [pc, #40]	; (13ef4 <ll_feature_req_send+0x34>)
   13ecc:	f7fa fe2a 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13ed0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13ed2:	b953      	cbnz	r3, 13eea <ll_feature_req_send+0x2a>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   13ed4:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   13ed8:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   13edc:	428a      	cmp	r2, r1
   13ede:	d104      	bne.n	13eea <ll_feature_req_send+0x2a>
	conn->llcp_feature.req++;
   13ee0:	3201      	adds	r2, #1
   13ee2:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	return 0;
   13ee6:	4618      	mov	r0, r3
}
   13ee8:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13eea:	200c      	movs	r0, #12
}
   13eec:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13eee:	200c      	movs	r0, #12
}
   13ef0:	4770      	bx	lr
   13ef2:	bf00      	nop
   13ef4:	2000208c 	.word	0x2000208c

00013ef8 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13ef8:	b9a8      	cbnz	r0, 13f26 <ll_version_ind_send+0x2e>
{
   13efa:	b508      	push	{r3, lr}
   13efc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13efe:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13f02:	480a      	ldr	r0, [pc, #40]	; (13f2c <ll_version_ind_send+0x34>)
   13f04:	f7fa fe0e 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13f08:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13f0a:	b953      	cbnz	r3, 13f22 <ll_version_ind_send+0x2a>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   13f0c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   13f10:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   13f14:	428a      	cmp	r2, r1
   13f16:	d104      	bne.n	13f22 <ll_version_ind_send+0x2a>
	conn->llcp_version.req++;
   13f18:	3201      	adds	r2, #1
   13f1a:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	return 0;
   13f1e:	4618      	mov	r0, r3
}
   13f20:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13f22:	200c      	movs	r0, #12
}
   13f24:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13f26:	200c      	movs	r0, #12
}
   13f28:	4770      	bx	lr
   13f2a:	bf00      	nop
   13f2c:	2000208c 	.word	0x2000208c

00013f30 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   13f30:	2800      	cmp	r0, #0
   13f32:	d143      	bne.n	13fbc <ll_length_req_send+0x8c>
{
   13f34:	b538      	push	{r3, r4, r5, lr}
   13f36:	460d      	mov	r5, r1
   13f38:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   13f3a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   13f3e:	4602      	mov	r2, r0
   13f40:	481f      	ldr	r0, [pc, #124]	; (13fc0 <ll_length_req_send+0x90>)
   13f42:	f7fa fdef 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   13f46:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   13f48:	bb1b      	cbnz	r3, 13f92 <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   13f4a:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   13f4e:	071a      	lsls	r2, r3, #28
   13f50:	d421      	bmi.n	13f96 <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   13f52:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   13f56:	07d1      	lsls	r1, r2, #31
   13f58:	d503      	bpl.n	13f62 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   13f5a:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
   13f5e:	0692      	lsls	r2, r2, #26
   13f60:	d519      	bpl.n	13f96 <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   13f62:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   13f66:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   13f6a:	428a      	cmp	r2, r1
   13f6c:	d017      	beq.n	13f9e <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   13f6e:	f003 0307 	and.w	r3, r3, #7
   13f72:	2b03      	cmp	r3, #3
   13f74:	d004      	beq.n	13f80 <ll_length_req_send+0x50>
   13f76:	3303      	adds	r3, #3
   13f78:	f003 0307 	and.w	r3, r3, #7
   13f7c:	2b01      	cmp	r3, #1
   13f7e:	d80c      	bhi.n	13f9a <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   13f80:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   13f84:	b94b      	cbnz	r3, 13f9a <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   13f86:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   13f8a:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   13f8e:	4618      	mov	r0, r3
}
   13f90:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13f92:	2002      	movs	r0, #2
}
   13f94:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   13f96:	201a      	movs	r0, #26
}
   13f98:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   13f9a:	200c      	movs	r0, #12
}
   13f9c:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13f9e:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	conn->llcp_length.tx_octets = tx_octets;
   13fa2:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   13fa6:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13fa8:	f36f 0302 	bfc	r3, #0, #3
	conn->llcp_length.req++;
   13fac:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   13fb0:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   13fb4:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	return 0;
   13fb8:	2000      	movs	r0, #0
}
   13fba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13fbc:	2002      	movs	r0, #2
}
   13fbe:	4770      	bx	lr
   13fc0:	2000208c 	.word	0x2000208c

00013fc4 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   13fc4:	4a03      	ldr	r2, [pc, #12]	; (13fd4 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   13fc6:	4b04      	ldr	r3, [pc, #16]	; (13fd8 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   13fc8:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   13fca:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   13fcc:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   13fce:	800b      	strh	r3, [r1, #0]
}
   13fd0:	4770      	bx	lr
   13fd2:	bf00      	nop
   13fd4:	20002adc 	.word	0x20002adc
   13fd8:	20002ade 	.word	0x20002ade

00013fdc <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   13fdc:	4a02      	ldr	r2, [pc, #8]	; (13fe8 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   13fde:	4b03      	ldr	r3, [pc, #12]	; (13fec <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   13fe0:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   13fe2:	8019      	strh	r1, [r3, #0]
}
   13fe4:	2000      	movs	r0, #0
   13fe6:	4770      	bx	lr
   13fe8:	20002adc 	.word	0x20002adc
   13fec:	20002ade 	.word	0x20002ade

00013ff0 <ll_length_max_get>:
{
   13ff0:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13ff2:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   13ff4:	f44f 74a0 	mov.w	r4, #320	; 0x140
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13ff8:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   13ffa:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   13ffc:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   13ffe:	801c      	strh	r4, [r3, #0]
}
   14000:	bc30      	pop	{r4, r5}
   14002:	4770      	bx	lr

00014004 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14004:	b9c0      	cbnz	r0, 14038 <ll_phy_get+0x34>
{
   14006:	b538      	push	{r3, r4, r5, lr}
   14008:	460d      	mov	r5, r1
   1400a:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1400c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14010:	4602      	mov	r2, r0
   14012:	480a      	ldr	r0, [pc, #40]	; (1403c <ll_phy_get+0x38>)
   14014:	f7fa fd86 	bl	eb24 <mem_get>
   14018:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1401a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1401c:	b950      	cbnz	r0, 14034 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1401e:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   14022:	f3c2 0202 	ubfx	r2, r2, #0, #3
   14026:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   14028:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   1402c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14030:	7023      	strb	r3, [r4, #0]
}
   14032:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14034:	2002      	movs	r0, #2
}
   14036:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14038:	2002      	movs	r0, #2
}
   1403a:	4770      	bx	lr
   1403c:	2000208c 	.word	0x2000208c

00014040 <ll_phy_default_set>:
	default_phy_tx = tx;
   14040:	4a02      	ldr	r2, [pc, #8]	; (1404c <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   14042:	4b03      	ldr	r3, [pc, #12]	; (14050 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   14044:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   14046:	7019      	strb	r1, [r3, #0]
}
   14048:	2000      	movs	r0, #0
   1404a:	4770      	bx	lr
   1404c:	2000307d 	.word	0x2000307d
   14050:	2000307c 	.word	0x2000307c

00014054 <ll_phy_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14054:	2800      	cmp	r0, #0
   14056:	d144      	bne.n	140e2 <ll_phy_req_send+0x8e>
{
   14058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1405a:	460d      	mov	r5, r1
   1405c:	4616      	mov	r6, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1405e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14062:	4602      	mov	r2, r0
   14064:	4820      	ldr	r0, [pc, #128]	; (140e8 <ll_phy_req_send+0x94>)
   14066:	461f      	mov	r7, r3
   14068:	f7fa fd5c 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   1406c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1406e:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   14070:	bb9b      	cbnz	r3, 140da <ll_phy_req_send+0x86>
	if (conn->llcp_phy.disabled ||
   14072:	f890 01ab 	ldrb.w	r0, [r0, #427]	; 0x1ab
   14076:	f010 0008 	ands.w	r0, r0, #8
   1407a:	d130      	bne.n	140de <ll_phy_req_send+0x8a>
	    (conn->common.fex_valid &&
   1407c:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   14080:	07db      	lsls	r3, r3, #31
   14082:	d504      	bpl.n	1408e <ll_phy_req_send+0x3a>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   14084:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   14088:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1408c:	d027      	beq.n	140de <ll_phy_req_send+0x8a>
	if ((conn->llcp_req != conn->llcp_ack) ||
   1408e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   14092:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   14096:	429a      	cmp	r2, r3
   14098:	d11d      	bne.n	140d6 <ll_phy_req_send+0x82>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1409a:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   1409e:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   140a2:	429a      	cmp	r2, r3
   140a4:	d117      	bne.n	140d6 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   140a6:	f005 0507 	and.w	r5, r5, #7
   140aa:	00ab      	lsls	r3, r5, #2
   140ac:	f8b4 11aa 	ldrh.w	r1, [r4, #426]	; 0x1aa
   140b0:	f443 6580 	orr.w	r5, r3, #1024	; 0x400
   140b4:	f007 0307 	and.w	r3, r7, #7
   140b8:	ea45 1343 	orr.w	r3, r5, r3, lsl #5
   140bc:	f006 0601 	and.w	r6, r6, #1
   140c0:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   140c4:	f401 4179 	and.w	r1, r1, #63744	; 0xf900
	conn->llcp_phy.req++;
   140c8:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   140ca:	430b      	orrs	r3, r1
	conn->llcp_phy.req++;
   140cc:	f884 21a8 	strb.w	r2, [r4, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   140d0:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
}
   140d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   140d6:	200c      	movs	r0, #12
}
   140d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   140da:	2002      	movs	r0, #2
}
   140dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   140de:	201a      	movs	r0, #26
}
   140e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   140e2:	2002      	movs	r0, #2
}
   140e4:	4770      	bx	lr
   140e6:	bf00      	nop
   140e8:	2000208c 	.word	0x2000208c

000140ec <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   140ec:	b9d8      	cbnz	r0, 14126 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   140ee:	4602      	mov	r2, r0
{
   140f0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   140f2:	480e      	ldr	r0, [pc, #56]	; (1412c <ll_apto_get+0x40>)
   140f4:	460c      	mov	r4, r1
   140f6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   140fa:	f7fa fd13 	bl	eb24 <mem_get>
   140fe:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   14100:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   14102:	b970      	cbnz	r0, 14122 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   14104:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   14108:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   1410a:	4a09      	ldr	r2, [pc, #36]	; (14130 <ll_apto_get+0x44>)
   1410c:	fb03 f301 	mul.w	r3, r3, r1
   14110:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   14114:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   14118:	fba2 2303 	umull	r2, r3, r2, r3
   1411c:	099b      	lsrs	r3, r3, #6
   1411e:	8023      	strh	r3, [r4, #0]
}
   14120:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14122:	2002      	movs	r0, #2
}
   14124:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   14126:	2002      	movs	r0, #2
}
   14128:	4770      	bx	lr
   1412a:	bf00      	nop
   1412c:	2000208c 	.word	0x2000208c
   14130:	10624dd3 	.word	0x10624dd3

00014134 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   14134:	b9d8      	cbnz	r0, 1416e <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14136:	4602      	mov	r2, r0
{
   14138:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1413a:	480e      	ldr	r0, [pc, #56]	; (14174 <ll_apto_set+0x40>)
   1413c:	460d      	mov	r5, r1
   1413e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14142:	f7fa fcef 	bl	eb24 <mem_get>
   14146:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   14148:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1414a:	b970      	cbnz	r0, 1416a <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1414c:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   1414e:	f240 44e2 	movw	r4, #1250	; 0x4e2
   14152:	fb04 f403 	mul.w	r4, r4, r3
   14156:	f242 7310 	movw	r3, #10000	; 0x2710
   1415a:	fb03 4305 	mla	r3, r3, r5, r4
   1415e:	3b01      	subs	r3, #1
   14160:	fbb3 f3f4 	udiv	r3, r3, r4
   14164:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   14168:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1416a:	2002      	movs	r0, #2
}
   1416c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1416e:	2002      	movs	r0, #2
}
   14170:	4770      	bx	lr
   14172:	bf00      	nop
   14174:	2000208c 	.word	0x2000208c

00014178 <ull_conn_init>:
	err = init_reset();
   14178:	f7ff ba42 	b.w	13600 <init_reset>

0001417c <ull_conn_reset>:
{
   1417c:	b530      	push	{r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1417e:	2200      	movs	r2, #0
{
   14180:	b085      	sub	sp, #20
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14182:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   14186:	482b      	ldr	r0, [pc, #172]	; (14234 <ull_conn_reset+0xb8>)
   14188:	f7fa fccc 	bl	eb24 <mem_get>
   1418c:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   1418e:	f7fe fc05 	bl	1299c <ull_disable_mark>
	LL_ASSERT(mark == conn);
   14192:	4284      	cmp	r4, r0
   14194:	d00c      	beq.n	141b0 <ull_conn_reset+0x34>
   14196:	4a28      	ldr	r2, [pc, #160]	; (14238 <ull_conn_reset+0xbc>)
   14198:	4928      	ldr	r1, [pc, #160]	; (1423c <ull_conn_reset+0xc0>)
   1419a:	4829      	ldr	r0, [pc, #164]	; (14240 <ull_conn_reset+0xc4>)
   1419c:	f240 6385 	movw	r3, #1669	; 0x685
   141a0:	f008 fb0f 	bl	1c7c2 <printk>
   141a4:	4040      	eors	r0, r0
   141a6:	f380 8811 	msr	BASEPRI, r0
   141aa:	f04f 0003 	mov.w	r0, #3
   141ae:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   141b0:	ad03      	add	r5, sp, #12
   141b2:	2203      	movs	r2, #3
	ret_cb = TICKER_STATUS_BUSY;
   141b4:	2002      	movs	r0, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   141b6:	4611      	mov	r1, r2
	ret_cb = TICKER_STATUS_BUSY;
   141b8:	9003      	str	r0, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   141ba:	4b22      	ldr	r3, [pc, #136]	; (14244 <ull_conn_reset+0xc8>)
   141bc:	9500      	str	r5, [sp, #0]
   141be:	2000      	movs	r0, #0
   141c0:	f7fb fffa 	bl	101b8 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   141c4:	4629      	mov	r1, r5
   141c6:	f7fe fbdb 	bl	12980 <ull_ticker_status_take>
	if (!ret) {
   141ca:	b1f0      	cbz	r0, 1420a <ull_conn_reset+0x8e>
	conn->lll.link_tx_free = NULL;
   141cc:	2300      	movs	r3, #0
   141ce:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   141d0:	4620      	mov	r0, r4
   141d2:	f7fe fbef 	bl	129b4 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   141d6:	4284      	cmp	r4, r0
   141d8:	d00c      	beq.n	141f4 <ull_conn_reset+0x78>
   141da:	4a17      	ldr	r2, [pc, #92]	; (14238 <ull_conn_reset+0xbc>)
   141dc:	4917      	ldr	r1, [pc, #92]	; (1423c <ull_conn_reset+0xc0>)
   141de:	4818      	ldr	r0, [pc, #96]	; (14240 <ull_conn_reset+0xc4>)
   141e0:	f240 6394 	movw	r3, #1684	; 0x694
   141e4:	f008 faed 	bl	1c7c2 <printk>
   141e8:	4040      	eors	r0, r0
   141ea:	f380 8811 	msr	BASEPRI, r0
   141ee:	f04f 0003 	mov.w	r0, #3
   141f2:	df02      	svc	2
	MFIFO_INIT(conn_ack);
   141f4:	4914      	ldr	r1, [pc, #80]	; (14248 <ull_conn_reset+0xcc>)
	MFIFO_INIT(conn_tx);
   141f6:	4815      	ldr	r0, [pc, #84]	; (1424c <ull_conn_reset+0xd0>)
	conn_upd_curr = NULL;
   141f8:	4a15      	ldr	r2, [pc, #84]	; (14250 <ull_conn_reset+0xd4>)
	MFIFO_INIT(conn_tx);
   141fa:	2300      	movs	r3, #0
   141fc:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   141fe:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   14200:	6013      	str	r3, [r2, #0]
	err = init_reset();
   14202:	f7ff f9fd 	bl	13600 <init_reset>
}
   14206:	b005      	add	sp, #20
   14208:	bd30      	pop	{r4, r5, pc}
		ret = ull_disable(&conn->lll);
   1420a:	f104 001c 	add.w	r0, r4, #28
   1420e:	f7fe fc01 	bl	12a14 <ull_disable>
		LL_ASSERT(!ret);
   14212:	2800      	cmp	r0, #0
   14214:	d0da      	beq.n	141cc <ull_conn_reset+0x50>
   14216:	4a08      	ldr	r2, [pc, #32]	; (14238 <ull_conn_reset+0xbc>)
   14218:	490e      	ldr	r1, [pc, #56]	; (14254 <ull_conn_reset+0xd8>)
   1421a:	4809      	ldr	r0, [pc, #36]	; (14240 <ull_conn_reset+0xc4>)
   1421c:	f240 638e 	movw	r3, #1678	; 0x68e
   14220:	f008 facf 	bl	1c7c2 <printk>
   14224:	4040      	eors	r0, r0
   14226:	f380 8811 	msr	BASEPRI, r0
   1422a:	f04f 0003 	mov.w	r0, #3
   1422e:	df02      	svc	2
   14230:	e7cc      	b.n	141cc <ull_conn_reset+0x50>
   14232:	bf00      	nop
   14234:	2000208c 	.word	0x2000208c
   14238:	00022b08 	.word	0x00022b08
   1423c:	00022c18 	.word	0x00022c18
   14240:	00022678 	.word	0x00022678
   14244:	00012975 	.word	0x00012975
   14248:	2000058c 	.word	0x2000058c
   1424c:	200005d0 	.word	0x200005d0
   14250:	20002254 	.word	0x20002254
   14254:	00022900 	.word	0x00022900

00014258 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   14258:	4b01      	ldr	r3, [pc, #4]	; (14260 <ull_conn_default_tx_octets_get+0x8>)
}
   1425a:	8818      	ldrh	r0, [r3, #0]
   1425c:	4770      	bx	lr
   1425e:	bf00      	nop
   14260:	20002adc 	.word	0x20002adc

00014264 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   14264:	4b01      	ldr	r3, [pc, #4]	; (1426c <ull_conn_default_tx_time_get+0x8>)
}
   14266:	8818      	ldrh	r0, [r3, #0]
   14268:	4770      	bx	lr
   1426a:	bf00      	nop
   1426c:	20002ade 	.word	0x20002ade

00014270 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   14270:	4b01      	ldr	r3, [pc, #4]	; (14278 <ull_conn_default_phy_tx_get+0x8>)
}
   14272:	7818      	ldrb	r0, [r3, #0]
   14274:	4770      	bx	lr
   14276:	bf00      	nop
   14278:	2000307d 	.word	0x2000307d

0001427c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1427c:	4b01      	ldr	r3, [pc, #4]	; (14284 <ull_conn_default_phy_rx_get+0x8>)
}
   1427e:	7818      	ldrb	r0, [r3, #0]
   14280:	4770      	bx	lr
   14282:	bf00      	nop
   14284:	2000307c 	.word	0x2000307c

00014288 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   14288:	688b      	ldr	r3, [r1, #8]
   1428a:	689b      	ldr	r3, [r3, #8]
{
   1428c:	b510      	push	{r4, lr}
	switch (lll->role) {
   1428e:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   14292:	09e4      	lsrs	r4, r4, #7
   14294:	d10d      	bne.n	142b2 <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   14296:	4a0a      	ldr	r2, [pc, #40]	; (142c0 <ull_conn_setup+0x38>)
   14298:	490a      	ldr	r1, [pc, #40]	; (142c4 <ull_conn_setup+0x3c>)
   1429a:	480b      	ldr	r0, [pc, #44]	; (142c8 <ull_conn_setup+0x40>)
   1429c:	f240 23b2 	movw	r3, #690	; 0x2b2
   142a0:	f008 fa8f 	bl	1c7c2 <printk>
   142a4:	4040      	eors	r0, r0
   142a6:	f380 8811 	msr	BASEPRI, r0
   142aa:	f04f 0003 	mov.w	r0, #3
   142ae:	df02      	svc	2
}
   142b0:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   142b2:	460a      	mov	r2, r1
}
   142b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   142b8:	3208      	adds	r2, #8
   142ba:	f7ee bb89 	b.w	29d0 <ull_slave_setup>
   142be:	bf00      	nop
   142c0:	00022b08 	.word	0x00022b08
   142c4:	000226e8 	.word	0x000226e8
   142c8:	00022678 	.word	0x00022678

000142cc <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   142cc:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   142ce:	88da      	ldrh	r2, [r3, #6]
   142d0:	2a00      	cmp	r2, #0
   142d2:	d15e      	bne.n	14392 <ull_conn_rx+0xc6>
{
   142d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   142d8:	460c      	mov	r4, r1
   142da:	b085      	sub	sp, #20
   142dc:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   142de:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   142e2:	48b2      	ldr	r0, [pc, #712]	; (145ac <ull_conn_rx+0x2e0>)
   142e4:	f7fa fc1e 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   142e8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   142ea:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   142ec:	2b00      	cmp	r3, #0
   142ee:	f040 8094 	bne.w	1441a <ull_conn_rx+0x14e>
	pdu_rx = (void *)(*rx)->pdu;
   142f2:	6820      	ldr	r0, [r4, #0]
   142f4:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
	switch (pdu_rx->ll_id) {
   142f8:	7f02      	ldrb	r2, [r0, #28]
   142fa:	f002 0203 	and.w	r2, r2, #3
   142fe:	2a03      	cmp	r2, #3
	pdu_rx = (void *)(*rx)->pdu;
   14300:	4606      	mov	r6, r0
	switch (pdu_rx->ll_id) {
   14302:	f001 0c01 	and.w	ip, r1, #1
   14306:	d12b      	bne.n	14360 <ull_conn_rx+0x94>
			  struct pdu_data *pdu_rx, struct ll_conn *conn)
{
	int nack = 0;
	uint8_t opcode;

	opcode = pdu_rx->llctrl.opcode;
   14308:	f890 801f 	ldrb.w	r8, [r0, #31]

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1430c:	f1bc 0f00 	cmp.w	ip, #0
   14310:	f000 808a 	beq.w	14428 <ull_conn_rx+0x15c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14314:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14318:	2b00      	cmp	r3, #0
   1431a:	f001 0004 	and.w	r0, r1, #4
   1431e:	f2c0 862f 	blt.w	14f80 <ull_conn_rx+0xcb4>
	return (!conn->lll.role &&
   14322:	2800      	cmp	r0, #0
   14324:	f040 80e7 	bne.w	144f6 <ull_conn_rx+0x22a>
		((!conn->llcp_enc.refresh &&
   14328:	f1b8 0f02 	cmp.w	r8, #2
   1432c:	f000 8331 	beq.w	14992 <ull_conn_rx+0x6c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14330:	f1b8 0f05 	cmp.w	r8, #5
   14334:	f000 8535 	beq.w	14da2 <ull_conn_rx+0xad6>
   14338:	f1b8 0f06 	cmp.w	r8, #6
   1433c:	f000 869d 	beq.w	1507a <ull_conn_rx+0xdae>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14340:	f1b8 0f0d 	cmp.w	r8, #13
   14344:	f000 84c9 	beq.w	14cda <ull_conn_rx+0xa0e>
   14348:	f1b8 0f11 	cmp.w	r8, #17
   1434c:	f000 837b 	beq.w	14a46 <ull_conn_rx+0x77a>
		conn->llcp_terminate.reason_peer =
   14350:	233d      	movs	r3, #61	; 0x3d
   14352:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14356:	6823      	ldr	r3, [r4, #0]
   14358:	2203      	movs	r2, #3
   1435a:	711a      	strb	r2, [r3, #4]

		return 0;
   1435c:	2000      	movs	r0, #0
   1435e:	e00a      	b.n	14376 <ull_conn_rx+0xaa>
	switch (pdu_rx->ll_id) {
   14360:	b962      	cbnz	r2, 1437c <ull_conn_rx+0xb0>
		if (conn->llcp_enc.pause_rx) {
   14362:	f1bc 0f00 	cmp.w	ip, #0
   14366:	d003      	beq.n	14370 <ull_conn_rx+0xa4>
			conn->llcp_terminate.reason_peer =
   14368:	233d      	movs	r3, #61	; 0x3d
   1436a:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
   1436e:	6820      	ldr	r0, [r4, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14370:	2303      	movs	r3, #3
   14372:	7103      	strb	r3, [r0, #4]
	return 0;
   14374:	2000      	movs	r0, #0
}
   14376:	b005      	add	sp, #20
   14378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   1437c:	f1bc 0f00 	cmp.w	ip, #0
   14380:	d0f8      	beq.n	14374 <ull_conn_rx+0xa8>
			conn->llcp_terminate.reason_peer =
   14382:	223d      	movs	r2, #61	; 0x3d
   14384:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14388:	6822      	ldr	r2, [r4, #0]
   1438a:	2103      	movs	r1, #3
	return 0;
   1438c:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1438e:	7111      	strb	r1, [r2, #4]
   14390:	e7f1      	b.n	14376 <ull_conn_rx+0xaa>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14392:	2203      	movs	r2, #3
   14394:	711a      	strb	r2, [r3, #4]
		return 0;
   14396:	2000      	movs	r0, #0
}
   14398:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   1439a:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   1439e:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   143a0:	f043 0303 	orr.w	r3, r3, #3
   143a4:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   143a8:	d112      	bne.n	143d0 <ull_conn_rx+0x104>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   143aa:	f8b5 31aa 	ldrh.w	r3, [r5, #426]	; 0x1aa
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   143ae:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
					conn->llcp_phy.tx =
   143b2:	487f      	ldr	r0, [pc, #508]	; (145b0 <ull_conn_rx+0x2e4>)
   143b4:	4018      	ands	r0, r3
   143b6:	f001 0307 	and.w	r3, r1, #7
   143ba:	009b      	lsls	r3, r3, #2
   143bc:	f3c1 1102 	ubfx	r1, r1, #4, #3
   143c0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
					conn->llcp_phy.ack--;
   143c4:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   143c6:	4303      	orrs	r3, r0
					conn->llcp_phy.ack--;
   143c8:	f885 21a9 	strb.w	r2, [r5, #425]	; 0x1a9
					conn->llcp_phy.tx =
   143cc:	f8a5 31aa 	strh.w	r3, [r5, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   143d0:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   143d4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   143d8:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   143dc:	f3c2 0082 	ubfx	r0, r2, #2, #3
   143e0:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   143e2:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   143e6:	009b      	lsls	r3, r3, #2
   143e8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   143ec:	f002 0203 	and.w	r2, r2, #3
   143f0:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   143f2:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   143f6:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   143fa:	d002      	beq.n	14402 <ull_conn_rx+0x136>
   143fc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   14400:	d105      	bne.n	1440e <ull_conn_rx+0x142>
					conn->llcp_phy.tx = 0;
   14402:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   14406:	f003 0303 	and.w	r3, r3, #3
   1440a:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   1440e:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   14412:	f043 0301 	orr.w	r3, r3, #1
   14416:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1441a:	6823      	ldr	r3, [r4, #0]
   1441c:	2203      	movs	r2, #3
	int nack = 0;
   1441e:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14420:	711a      	strb	r2, [r3, #4]
}
   14422:	b005      	add	sp, #20
   14424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   14428:	f100 021c 	add.w	r2, r0, #28
	switch (opcode) {
   1442c:	f1b8 0f19 	cmp.w	r8, #25
   14430:	d81f      	bhi.n	14472 <ull_conn_rx+0x1a6>
   14432:	e8df f018 	tbh	[pc, r8, lsl #1]
   14436:	00c1      	.short	0x00c1
   14438:	02ae02ba 	.word	0x02ae02ba
   1443c:	04aa0466 	.word	0x04aa0466
   14440:	04e604b1 	.word	0x04e604b1
   14444:	02680278 	.word	0x02680278
   14448:	01e50233 	.word	0x01e50233
   1444c:	042204d5 	.word	0x042204d5
   14450:	03e30452 	.word	0x03e30452
   14454:	033d03ce 	.word	0x033d03ce
   14458:	02ef0308 	.word	0x02ef0308
   1445c:	008803e9 	.word	0x008803e9
   14460:	03f50088 	.word	0x03f50088
   14464:	016501a8 	.word	0x016501a8
   14468:	0130      	.short	0x0130
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1446a:	7f73      	ldrb	r3, [r6, #29]
   1446c:	2b01      	cmp	r3, #1
   1446e:	f000 84c0 	beq.w	14df2 <ull_conn_rx+0xb26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14472:	4850      	ldr	r0, [pc, #320]	; (145b4 <ull_conn_rx+0x2e8>)
   14474:	f7fa fb24 	bl	eac0 <mem_acquire>
	if (!tx) {
   14478:	2800      	cmp	r0, #0
   1447a:	f000 8682 	beq.w	15182 <ull_conn_rx+0xeb6>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1447e:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14480:	7901      	ldrb	r1, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   14482:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   14484:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   14488:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1448c:	f041 0203 	orr.w	r2, r1, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   14490:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14492:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   14494:	71c1      	strb	r1, [r0, #7]
	if (
   14496:	b303      	cbz	r3, 144da <ull_conn_rx+0x20e>
	    !conn->llcp_enc.pause_tx &&
   14498:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	    conn->tx_head &&
   1449c:	0791      	lsls	r1, r2, #30
   1449e:	d41c      	bmi.n	144da <ull_conn_rx+0x20e>
	    !conn->llcp_phy.pause_tx &&
   144a0:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
   144a4:	07d2      	lsls	r2, r2, #31
   144a6:	d418      	bmi.n	144da <ull_conn_rx+0x20e>
		if (conn->tx_head == conn->tx_data) {
   144a8:	f8d5 21bc 	ldr.w	r2, [r5, #444]	; 0x1bc
   144ac:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   144ae:	bf04      	itt	eq
   144b0:	681a      	ldreq	r2, [r3, #0]
   144b2:	f8c5 21bc 	streq.w	r2, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   144b6:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
   144ba:	b99a      	cbnz	r2, 144e4 <ull_conn_rx+0x218>
			tx->next = conn->tx_head->next;
   144bc:	681a      	ldr	r2, [r3, #0]
   144be:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   144c0:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   144c2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   144c4:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   144c8:	2b00      	cmp	r3, #0
   144ca:	f000 8583 	beq.w	14fd4 <ull_conn_rx+0xd08>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   144ce:	2303      	movs	r3, #3
	return 0;
   144d0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   144d2:	7133      	strb	r3, [r6, #4]
}
   144d4:	b005      	add	sp, #20
   144d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   144da:	f8d5 21b4 	ldr.w	r2, [r5, #436]	; 0x1b4
   144de:	2a00      	cmp	r2, #0
   144e0:	f000 857c 	beq.w	14fdc <ull_conn_rx+0xd10>
	tx->next = conn->tx_ctrl_last->next;
   144e4:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   144e8:	681a      	ldr	r2, [r3, #0]
   144ea:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   144ec:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   144ee:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   144f2:	6803      	ldr	r3, [r0, #0]
}
   144f4:	e7e8      	b.n	144c8 <ull_conn_rx+0x1fc>
		 (conn->llcp_enc.refresh &&
   144f6:	f1b8 0f02 	cmp.w	r8, #2
   144fa:	f000 824a 	beq.w	14992 <ull_conn_rx+0x6c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   144fe:	f1b8 0f0b 	cmp.w	r8, #11
   14502:	f000 8572 	beq.w	14fea <ull_conn_rx+0xd1e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14506:	f1b8 0f04 	cmp.w	r8, #4
   1450a:	f47f af11 	bne.w	14330 <ull_conn_rx+0x64>
		if (conn->lll.role ||
   1450e:	7f73      	ldrb	r3, [r6, #29]
   14510:	2b0d      	cmp	r3, #13
   14512:	d1ae      	bne.n	14472 <ull_conn_rx+0x1a6>
		memcpy(&conn->llcp.encryption.skd[8],
   14514:	2208      	movs	r2, #8
   14516:	f106 0120 	add.w	r1, r6, #32
   1451a:	f105 00f6 	add.w	r0, r5, #246	; 0xf6
   1451e:	f00a fc68 	bl	1edf2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   14522:	f106 0128 	add.w	r1, r6, #40	; 0x28
   14526:	2204      	movs	r2, #4
   14528:	f105 009c 	add.w	r0, r5, #156	; 0x9c
   1452c:	f00a fc61 	bl	1edf2 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   14530:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14534:	6822      	ldr	r2, [r4, #0]
		conn->llcp_enc.pause_rx = 1U;
   14536:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1453a:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   1453c:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
   14540:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14542:	7111      	strb	r1, [r2, #4]
		break;
   14544:	e717      	b.n	14376 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   14546:	7f43      	ldrb	r3, [r0, #29]
   14548:	2b09      	cmp	r3, #9
   1454a:	d192      	bne.n	14472 <ull_conn_rx+0x1a6>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1454c:	f1b8 0f14 	cmp.w	r8, #20
   14550:	f000 85a5 	beq.w	1509e <ull_conn_rx+0xdd2>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   14554:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   14558:	f895 1199 	ldrb.w	r1, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   1455c:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   14560:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   14564:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   14568:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1456c:	9200      	str	r2, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1456e:	4291      	cmp	r1, r2
   14570:	f001 8185 	beq.w	1587e <ull_conn_rx+0x15b2>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   14574:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
	struct node_tx *tx = NULL;
   14578:	2100      	movs	r1, #0
	       tx) ||
   1457a:	f002 0207 	and.w	r2, r2, #7
   1457e:	2a02      	cmp	r2, #2
   14580:	f000 85a3 	beq.w	150ca <ull_conn_rx+0xdfe>
   14584:	f896 801f 	ldrb.w	r8, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   14588:	f1b8 0f15 	cmp.w	r8, #21
   1458c:	f43f aef2 	beq.w	14374 <ull_conn_rx+0xa8>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14590:	4608      	mov	r0, r1
   14592:	4908      	ldr	r1, [pc, #32]	; (145b4 <ull_conn_rx+0x2e8>)
   14594:	f7fa faae 	bl	eaf4 <mem_release>
			if (conn->llcp_length.state ==
   14598:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
   1459c:	f003 0307 	and.w	r3, r3, #7
   145a0:	2b04      	cmp	r3, #4
   145a2:	f47f aee7 	bne.w	14374 <ull_conn_rx+0xa8>
				return -EBUSY;
   145a6:	f06f 000f 	mvn.w	r0, #15
   145aa:	e6e4      	b.n	14376 <ull_conn_rx+0xaa>
   145ac:	2000208c 	.word	0x2000208c
   145b0:	fffffb03 	.word	0xfffffb03
   145b4:	200022d0 	.word	0x200022d0
		if (!conn->lll.role ||
   145b8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   145bc:	2b00      	cmp	r3, #0
   145be:	f6bf af58 	bge.w	14472 <ull_conn_rx+0x1a6>
   145c2:	7f43      	ldrb	r3, [r0, #29]
   145c4:	2b0c      	cmp	r3, #12
   145c6:	f47f af54 	bne.w	14472 <ull_conn_rx+0x1a6>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   145ca:	f8b0 0029 	ldrh.w	r0, [r0, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   145ce:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   145d0:	1ac3      	subs	r3, r0, r3
   145d2:	041b      	lsls	r3, r3, #16
   145d4:	f101 800a 	bmi.w	155ec <ull_conn_rx+0x1320>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   145d8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   145dc:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   145e0:	1a9b      	subs	r3, r3, r2
   145e2:	f003 0303 	and.w	r3, r3, #3
   145e6:	2b02      	cmp	r3, #2
   145e8:	f001 8030 	beq.w	1564c <ull_conn_rx+0x1380>
	if (!conn_upd_curr) {
   145ec:	4be1      	ldr	r3, [pc, #900]	; (14974 <ull_conn_rx+0x6a8>)
   145ee:	681a      	ldr	r2, [r3, #0]
   145f0:	2a00      	cmp	r2, #0
   145f2:	f001 8051 	beq.w	15698 <ull_conn_rx+0x13cc>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   145f6:	f896 3020 	ldrb.w	r3, [r6, #32]
   145fa:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   145fe:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   14602:	f895 3106 	ldrb.w	r3, [r5, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   14606:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1460a:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   1460e:	f8c5 2110 	str.w	r2, [r5, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   14612:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   14616:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   1461a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   1461e:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   14622:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   14626:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   1462a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   1462e:	f8a5 210a 	strh.w	r2, [r5, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   14632:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   14636:	f895 2105 	ldrb.w	r2, [r5, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1463a:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1463e:	f8a5 00ec 	strh.w	r0, [r5, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   14642:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   14646:	f8d5 0100 	ldr.w	r0, [r5, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1464a:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   1464e:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   14650:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   14654:	f885 2105 	strb.w	r2, [r5, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   14658:	f885 3106 	strb.w	r3, [r5, #262]	; 0x106
	conn->llcp_cu.timeout =
   1465c:	f8a5 110c 	strh.w	r1, [r5, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   14660:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   14662:	6823      	ldr	r3, [r4, #0]
   14664:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   14666:	6823      	ldr	r3, [r4, #0]
   14668:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
   1466c:	2300      	movs	r3, #0
   1466e:	6023      	str	r3, [r4, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14670:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   14674:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   14678:	4293      	cmp	r3, r2
   1467a:	d007      	beq.n	1468c <ull_conn_rx+0x3c0>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1467c:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14680:	f003 0307 	and.w	r3, r3, #7
   14684:	2b04      	cmp	r3, #4
   14686:	d101      	bne.n	1468c <ull_conn_rx+0x3c0>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14688:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
		conn->procedure_expire = 0U;
   1468c:	2300      	movs	r3, #0
   1468e:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   14692:	4618      	mov	r0, r3
		break;
   14694:	e66f      	b.n	14376 <ull_conn_rx+0xaa>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   14696:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1469a:	2b00      	cmp	r3, #0
   1469c:	f6ff aee9 	blt.w	14472 <ull_conn_rx+0x1a6>
   146a0:	7f47      	ldrb	r7, [r0, #29]
   146a2:	2f03      	cmp	r7, #3
   146a4:	f47f aee5 	bne.w	14472 <ull_conn_rx+0x1a6>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   146a8:	f895 1064 	ldrb.w	r1, [r5, #100]	; 0x64
					 conn->lll.phy_rx))) {
   146ac:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   146b0:	f890 2020 	ldrb.w	r2, [r0, #32]
   146b4:	430b      	orrs	r3, r1
   146b6:	f003 0307 	and.w	r3, r3, #7
   146ba:	4213      	tst	r3, r2
   146bc:	f43f ae5a 	beq.w	14374 <ull_conn_rx+0xa8>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   146c0:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   146c4:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   146c8:	1a9b      	subs	r3, r3, r2
   146ca:	f003 0303 	and.w	r3, r3, #3
   146ce:	2b02      	cmp	r3, #2
   146d0:	f43f ae50 	beq.w	14374 <ull_conn_rx+0xa8>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   146d4:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   146d8:	f002 f82a 	bl	16730 <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   146dc:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   146e0:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
			conn->llcp_ack -= 2U;
   146e4:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   146e6:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   146e8:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   146ec:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   146f0:	6822      	ldr	r2, [r4, #0]
			conn->llcp.chan_map.initiate = 1U;
   146f2:	f043 0301 	orr.w	r3, r3, #1
   146f6:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	int nack = 0;
   146fa:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   146fc:	7117      	strb	r7, [r2, #4]

		break;
   146fe:	e63a      	b.n	14376 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   14700:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14704:	2b00      	cmp	r3, #0
   14706:	f6bf aeb4 	bge.w	14472 <ull_conn_rx+0x1a6>
   1470a:	7f43      	ldrb	r3, [r0, #29]
   1470c:	2b05      	cmp	r3, #5
   1470e:	f47f aeb0 	bne.w	14472 <ull_conn_rx+0x1a6>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   14712:	f890 1020 	ldrb.w	r1, [r0, #32]
   14716:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
   1471a:	ea41 0003 	orr.w	r0, r1, r3
   1471e:	f010 0007 	ands.w	r0, r0, #7
   14722:	f040 86c6 	bne.w	154b2 <ull_conn_rx+0x11e6>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14726:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
   1472a:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   1472e:	428b      	cmp	r3, r1
   14730:	f43f aecd 	beq.w	144ce <ull_conn_rx+0x202>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   14734:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14738:	f003 0303 	and.w	r3, r3, #3
   1473c:	2b02      	cmp	r3, #2
   1473e:	f47f aec6 	bne.w	144ce <ull_conn_rx+0x202>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14742:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   14746:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1474a:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   1474e:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14752:	4611      	mov	r1, r2
   14754:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   14758:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   1475c:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   14760:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14764:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   14768:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   1476c:	f43f ae0c 	beq.w	14388 <ull_conn_rx+0xbc>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14770:	6823      	ldr	r3, [r4, #0]
   14772:	2110      	movs	r1, #16
   14774:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   14776:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   14778:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   1477a:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   1477e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14782:	77b3      	strb	r3, [r6, #30]
		if (err) {
   14784:	e5f7      	b.n	14376 <ull_conn_rx+0xaa>
		if (conn->lll.role ||
   14786:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   1478a:	2b00      	cmp	r3, #0
   1478c:	f6ff ae71 	blt.w	14472 <ull_conn_rx+0x1a6>
   14790:	7f43      	ldrb	r3, [r0, #29]
   14792:	2b03      	cmp	r3, #3
   14794:	f47f ae6d 	bne.w	14472 <ull_conn_rx+0x1a6>
		if (!conn->lll.role &&
   14798:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   1479c:	f895 31a8 	ldrb.w	r3, [r5, #424]	; 0x1a8
   147a0:	429a      	cmp	r2, r3
   147a2:	f43f ae94 	beq.w	144ce <ull_conn_rx+0x202>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   147a6:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   147aa:	f001 0303 	and.w	r3, r1, #3
   147ae:	2b02      	cmp	r3, #2
   147b0:	f47f ae8d 	bne.w	144ce <ull_conn_rx+0x202>
			conn->llcp_phy.tx &= p->rx_phys;
   147b4:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
   147b8:	f890 2020 	ldrb.w	r2, [r0, #32]
			conn->llcp_phy.tx &= p->rx_phys;
   147bc:	f3c1 0082 	ubfx	r0, r1, #2, #3
   147c0:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   147c2:	009b      	lsls	r3, r3, #2
   147c4:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   147c8:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   147cc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   147d0:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   147d4:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   147d8:	d002      	beq.n	147e0 <ull_conn_rx+0x514>
   147da:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   147de:	d105      	bne.n	147ec <ull_conn_rx+0x520>
				conn->llcp_phy.tx = 0;
   147e0:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   147e4:	f003 0303 	and.w	r3, r3, #3
   147e8:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   147ec:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   147f0:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   147f2:	f043 0301 	orr.w	r3, r3, #1
   147f6:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   147fa:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   147fe:	e666      	b.n	144ce <ull_conn_rx+0x202>
		if (!conn->lll.role ||
   14800:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14804:	2b00      	cmp	r3, #0
   14806:	f6bf ae34 	bge.w	14472 <ull_conn_rx+0x1a6>
   1480a:	7f44      	ldrb	r4, [r0, #29]
   1480c:	2c01      	cmp	r4, #1
   1480e:	f47f ae30 	bne.w	14472 <ull_conn_rx+0x1a6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14812:	4859      	ldr	r0, [pc, #356]	; (14978 <ull_conn_rx+0x6ac>)
   14814:	f7fa f954 	bl	eac0 <mem_acquire>
		if (!tx) {
   14818:	4603      	mov	r3, r0
   1481a:	2800      	cmp	r0, #0
   1481c:	f000 84b1 	beq.w	15182 <ull_conn_rx+0xeb6>
	conn->llcp_enc.pause_rx = 1U;
   14820:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   14824:	f895 107e 	ldrb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   14828:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   1482c:	f36f 01c3 	bfc	r1, #3, #1
   14830:	f885 107e 	strb.w	r1, [r5, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   14834:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14838:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   1483a:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1483e:	7144      	strb	r4, [r0, #5]
	    conn->tx_head &&
   14840:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14844:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   14848:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1484a:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1484c:	71d8      	strb	r0, [r3, #7]
	if (
   1484e:	2a00      	cmp	r2, #0
   14850:	f000 8419 	beq.w	15086 <ull_conn_rx+0xdba>
	    !conn->llcp_enc.pause_tx &&
   14854:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
	    conn->tx_head &&
   14858:	0788      	lsls	r0, r1, #30
   1485a:	f100 8414 	bmi.w	15086 <ull_conn_rx+0xdba>
	    !conn->llcp_phy.pause_tx &&
   1485e:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
   14862:	07c9      	lsls	r1, r1, #31
   14864:	f100 840f 	bmi.w	15086 <ull_conn_rx+0xdba>
		if (conn->tx_head == conn->tx_data) {
   14868:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
   1486c:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1486e:	bf04      	itt	eq
   14870:	6811      	ldreq	r1, [r2, #0]
   14872:	f8c5 11bc 	streq.w	r1, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   14876:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
   1487a:	2900      	cmp	r1, #0
   1487c:	f001 8019 	beq.w	158b2 <ull_conn_rx+0x15e6>
	tx->next = conn->tx_ctrl_last->next;
   14880:	f8d5 21b8 	ldr.w	r2, [r5, #440]	; 0x1b8
   14884:	6811      	ldr	r1, [r2, #0]
   14886:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   14888:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   1488a:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
	if (!tx->next) {
   1488e:	681a      	ldr	r2, [r3, #0]
   14890:	2a00      	cmp	r2, #0
   14892:	f47f ae1c 	bne.w	144ce <ull_conn_rx+0x202>
		conn->tx_data_last = tx;
   14896:	f8c5 31c0 	str.w	r3, [r5, #448]	; 0x1c0
   1489a:	e618      	b.n	144ce <ull_conn_rx+0x202>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1489c:	7f43      	ldrb	r3, [r0, #29]
   1489e:	2b09      	cmp	r3, #9
   148a0:	f47f ade7 	bne.w	14472 <ull_conn_rx+0x1a6>
	       (features[1] << 8) | (features[2] << 16);
   148a4:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   148a8:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   148ac:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   148b0:	4932      	ldr	r1, [pc, #200]	; (1497c <ull_conn_rx+0x6b0>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   148b2:	4c33      	ldr	r4, [pc, #204]	; (14980 <ull_conn_rx+0x6b4>)
	       (features[1] << 8) | (features[2] << 16);
   148b4:	041b      	lsls	r3, r3, #16
   148b6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   148ba:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   148bc:	f8d5 211c 	ldr.w	r2, [r5, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   148c0:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   148c2:	4013      	ands	r3, r2
   148c4:	f3c3 0310 	ubfx	r3, r3, #0, #17
   148c8:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   148cc:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   148d0:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   148d4:	f896 2020 	ldrb.w	r2, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   148d8:	041b      	lsls	r3, r3, #16
   148da:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   148de:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   148e0:	f895 20dc 	ldrb.w	r2, [r5, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   148e4:	f895 0118 	ldrb.w	r0, [r5, #280]	; 0x118
   148e8:	f885 0119 	strb.w	r0, [r5, #281]	; 0x119
	       (features[1] << 8) | (features[2] << 16);
   148ec:	430b      	orrs	r3, r1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   148ee:	401c      	ands	r4, r3
	conn->common.fex_valid = 1U;
   148f0:	f042 0201 	orr.w	r2, r2, #1
	conn->procedure_expire = 0U;
   148f4:	2300      	movs	r3, #0
	conn->llcp_feature.features_peer =
   148f6:	f8c5 4120 	str.w	r4, [r5, #288]	; 0x120
	conn->common.fex_valid = 1U;
   148fa:	f885 20dc 	strb.w	r2, [r5, #220]	; 0xdc
	conn->procedure_expire = 0U;
   148fe:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   14902:	4618      	mov	r0, r3
}
   14904:	e537      	b.n	14376 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   14906:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   1490a:	2900      	cmp	r1, #0
   1490c:	f6bf adb1 	bge.w	14472 <ull_conn_rx+0x1a6>
		if (conn->lll.role ||
   14910:	7f71      	ldrb	r1, [r6, #29]
   14912:	2909      	cmp	r1, #9
   14914:	f47f adad 	bne.w	14472 <ull_conn_rx+0x1a6>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   14918:	1d31      	adds	r1, r6, #4
   1491a:	4628      	mov	r0, r5
}
   1491c:	b005      	add	sp, #20
   1491e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   14922:	f7ff b913 	b.w	13b4c <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   14926:	7f73      	ldrb	r3, [r6, #29]
   14928:	2b02      	cmp	r3, #2
   1492a:	f47f ada2 	bne.w	14472 <ull_conn_rx+0x1a6>
		} else if ((conn->llcp_conn_param.ack !=
   1492e:	f895 1171 	ldrb.w	r1, [r5, #369]	; 0x171
   14932:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   14936:	f896 2020 	ldrb.w	r2, [r6, #32]
   1493a:	4299      	cmp	r1, r3
   1493c:	d002      	beq.n	14944 <ull_conn_rx+0x678>
			    conn->llcp_conn_param.req) &&
   1493e:	2a0f      	cmp	r2, #15
   14940:	f000 84b1 	beq.w	152a6 <ull_conn_rx+0xfda>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   14944:	f895 3198 	ldrb.w	r3, [r5, #408]	; 0x198
   14948:	f895 1199 	ldrb.w	r1, [r5, #409]	; 0x199
   1494c:	4299      	cmp	r1, r3
   1494e:	d002      	beq.n	14956 <ull_conn_rx+0x68a>
   14950:	2a14      	cmp	r2, #20
   14952:	f000 8634 	beq.w	155be <ull_conn_rx+0x12f2>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   14956:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
   1495a:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   1495e:	428b      	cmp	r3, r1
   14960:	d002      	beq.n	14968 <ull_conn_rx+0x69c>
   14962:	2a16      	cmp	r2, #22
   14964:	f000 8676 	beq.w	15654 <ull_conn_rx+0x1388>
			switch (llctrl->unknown_rsp.type) {
   14968:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1496a:	bf04      	itt	eq
   1496c:	2303      	moveq	r3, #3
   1496e:	7133      	strbeq	r3, [r6, #4]
				break;
   14970:	e68c      	b.n	1468c <ull_conn_rx+0x3c0>
   14972:	bf00      	nop
   14974:	20002254 	.word	0x20002254
   14978:	200022d0 	.word	0x200022d0
   1497c:	fffe30d0 	.word	0xfffe30d0
   14980:	0001ff7f 	.word	0x0001ff7f
		((!conn->llcp_enc.refresh &&
   14984:	f1b8 0f07 	cmp.w	r8, #7
   14988:	d0cd      	beq.n	14926 <ull_conn_rx+0x65a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1498a:	f1b8 0f02 	cmp.w	r8, #2
   1498e:	f040 8306 	bne.w	14f9e <ull_conn_rx+0xcd2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   14992:	7f73      	ldrb	r3, [r6, #29]
   14994:	2b02      	cmp	r3, #2
   14996:	f47f ad6c 	bne.w	14472 <ull_conn_rx+0x1a6>
		terminate_ind_recv(conn, *rx, pdu_rx);
   1499a:	f896 3020 	ldrb.w	r3, [r6, #32]
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1499e:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   149a2:	2303      	movs	r3, #3
   149a4:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   149a6:	2000      	movs	r0, #0
}
   149a8:	e4e5      	b.n	14376 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   149aa:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   149ae:	2b00      	cmp	r3, #0
   149b0:	f6bf ad5f 	bge.w	14472 <ull_conn_rx+0x1a6>
   149b4:	7f43      	ldrb	r3, [r0, #29]
   149b6:	2b08      	cmp	r3, #8
   149b8:	f47f ad5b 	bne.w	14472 <ull_conn_rx+0x1a6>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   149bc:	f8b0 4025 	ldrh.w	r4, [r0, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   149c0:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   149c2:	1ae3      	subs	r3, r4, r3
   149c4:	041f      	lsls	r7, r3, #16
   149c6:	f100 8611 	bmi.w	155ec <ull_conn_rx+0x1320>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   149ca:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   149ce:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   149d2:	1a9b      	subs	r3, r3, r2
   149d4:	f003 0303 	and.w	r3, r3, #3
   149d8:	2b02      	cmp	r3, #2
   149da:	f000 8637 	beq.w	1564c <ull_conn_rx+0x1380>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   149de:	f100 0120 	add.w	r1, r0, #32
   149e2:	2205      	movs	r2, #5
   149e4:	f105 00ed 	add.w	r0, r5, #237	; 0xed
   149e8:	f00a fa03 	bl	1edf2 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   149ec:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   149f0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   149f4:	f8a5 40f2 	strh.w	r4, [r5, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   149f8:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   149fa:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   149fe:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14a00:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   14a02:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   14a06:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	conn->llcp_ack -= 2U;
   14a0a:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	int nack = 0;
   14a0e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14a10:	7131      	strb	r1, [r6, #4]
		if (err) {
   14a12:	e4b0      	b.n	14376 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   14a14:	7f44      	ldrb	r4, [r0, #29]
   14a16:	2c01      	cmp	r4, #1
   14a18:	f47f ad2b 	bne.w	14472 <ull_conn_rx+0x1a6>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14a1c:	48ee      	ldr	r0, [pc, #952]	; (14dd8 <ull_conn_rx+0xb0c>)
   14a1e:	f7fa f84f 	bl	eac0 <mem_acquire>
	if (!tx) {
   14a22:	4601      	mov	r1, r0
   14a24:	2800      	cmp	r0, #0
   14a26:	f000 83ac 	beq.w	15182 <ull_conn_rx+0xeb6>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a2a:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   14a2c:	7144      	strb	r4, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a2e:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   14a32:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   14a34:	4628      	mov	r0, r5
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   14a36:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   14a38:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   14a3a:	f7fe fff5 	bl	13a28 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14a3e:	2303      	movs	r3, #3
   14a40:	7133      	strb	r3, [r6, #4]
	return 0;
   14a42:	2000      	movs	r0, #0
   14a44:	e497      	b.n	14376 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   14a46:	7f73      	ldrb	r3, [r6, #29]
   14a48:	2b03      	cmp	r3, #3
   14a4a:	f47f ad12 	bne.w	14472 <ull_conn_rx+0x1a6>
	switch (rej_ext_ind->reject_opcode) {
   14a4e:	f896 3020 	ldrb.w	r3, [r6, #32]
   14a52:	3b03      	subs	r3, #3
   14a54:	2b13      	cmp	r3, #19
   14a56:	f63f ad3a 	bhi.w	144ce <ull_conn_rx+0x202>
   14a5a:	a201      	add	r2, pc, #4	; (adr r2, 14a60 <ull_conn_rx+0x794>)
   14a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14a60:	00014f03 	.word	0x00014f03
   14a64:	000144cf 	.word	0x000144cf
   14a68:	000144cf 	.word	0x000144cf
   14a6c:	000144cf 	.word	0x000144cf
   14a70:	000144cf 	.word	0x000144cf
   14a74:	000144cf 	.word	0x000144cf
   14a78:	000144cf 	.word	0x000144cf
   14a7c:	000144cf 	.word	0x000144cf
   14a80:	000144cf 	.word	0x000144cf
   14a84:	000144cf 	.word	0x000144cf
   14a88:	000144cf 	.word	0x000144cf
   14a8c:	000144cf 	.word	0x000144cf
   14a90:	00014e9d 	.word	0x00014e9d
   14a94:	000144cf 	.word	0x000144cf
   14a98:	000144cf 	.word	0x000144cf
   14a9c:	000144cf 	.word	0x000144cf
   14aa0:	000144cf 	.word	0x000144cf
   14aa4:	00014f43 	.word	0x00014f43
   14aa8:	000144cf 	.word	0x000144cf
   14aac:	00014e37 	.word	0x00014e37
		if (conn->lll.role ||
   14ab0:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14ab4:	2b00      	cmp	r3, #0
   14ab6:	f6ff acdc 	blt.w	14472 <ull_conn_rx+0x1a6>
   14aba:	7f43      	ldrb	r3, [r0, #29]
   14abc:	2b18      	cmp	r3, #24
   14abe:	f47f acd8 	bne.w	14472 <ull_conn_rx+0x1a6>
		if (!conn->lll.role &&
   14ac2:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   14ac6:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   14aca:	429a      	cmp	r2, r3
   14acc:	f43f acff 	beq.w	144ce <ull_conn_rx+0x202>
		    (conn->llcp_conn_param.state ==
   14ad0:	f895 3172 	ldrb.w	r3, [r5, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   14ad4:	f003 0307 	and.w	r3, r3, #7
   14ad8:	2b04      	cmp	r3, #4
   14ada:	f47f acf8 	bne.w	144ce <ull_conn_rx+0x202>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   14ade:	8c07      	ldrh	r7, [r0, #32]
			if ((interval_min < 6) ||
   14ae0:	2f05      	cmp	r7, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   14ae2:	b2ba      	uxth	r2, r7
			if ((interval_min < 6) ||
   14ae4:	f240 857a 	bls.w	155dc <ull_conn_rx+0x1310>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14ae8:	8c40      	ldrh	r0, [r0, #34]	; 0x22
			if ((interval_min < 6) ||
   14aea:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   14aee:	b283      	uxth	r3, r0
			if ((interval_min < 6) ||
   14af0:	f200 8574 	bhi.w	155dc <ull_conn_rx+0x1310>
			    (interval_max > 3200) ||
   14af4:	429a      	cmp	r2, r3
   14af6:	f200 8571 	bhi.w	155dc <ull_conn_rx+0x1310>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   14afa:	8cb1      	ldrh	r1, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   14afc:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   14b00:	fa1f fc81 	uxth.w	ip, r1
			    (interval_min > interval_max) ||
   14b04:	f080 856a 	bcs.w	155dc <ull_conn_rx+0x1310>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14b08:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
			    (latency > 499) ||
   14b0a:	f1a2 0e0a 	sub.w	lr, r2, #10
   14b0e:	fa1f fe8e 	uxth.w	lr, lr
   14b12:	f640 4976 	movw	r9, #3190	; 0xc76
   14b16:	45ce      	cmp	lr, r9
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   14b18:	fa1f f882 	uxth.w	r8, r2
			    (latency > 499) ||
   14b1c:	f200 855e 	bhi.w	155dc <ull_conn_rx+0x1310>
			     ((latency + 1) * interval_max)) ||
   14b20:	fb0c 3c03 	mla	ip, ip, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   14b24:	ebbc 0f88 	cmp.w	ip, r8, lsl #2
   14b28:	f080 8558 	bcs.w	155dc <ull_conn_rx+0x1310>
			     ((latency + 1) * interval_max)) ||
   14b2c:	f896 e028 	ldrb.w	lr, [r6, #40]	; 0x28
   14b30:	4573      	cmp	r3, lr
   14b32:	f0c0 8553 	bcc.w	155dc <ull_conn_rx+0x1310>
			conn->procedure_expire = 0U;
   14b36:	2300      	movs	r3, #0
			conn->llcp_conn_param.timeout =	timeout;
   14b38:	f8a5 217a 	strh.w	r2, [r5, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   14b3c:	f885 e17c 	strb.w	lr, [r5, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   14b40:	f8a5 7174 	strh.w	r7, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   14b44:	f8a5 0176 	strh.w	r0, [r5, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   14b48:	f8a5 1178 	strh.w	r1, [r5, #376]	; 0x178
			conn->procedure_expire = 0U;
   14b4c:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   14b50:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   14b54:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   14b58:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   14b5c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   14b60:	f8a5 317e 	strh.w	r3, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   14b64:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   14b68:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   14b6c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   14b70:	f8a5 3180 	strh.w	r3, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   14b74:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   14b78:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   14b7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   14b80:	f8a5 3182 	strh.w	r3, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   14b84:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   14b88:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   14b8c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   14b90:	f8a5 3184 	strh.w	r3, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   14b94:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   14b98:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   14b9c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   14ba0:	f8a5 3186 	strh.w	r3, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   14ba4:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   14ba8:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   14bac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   14bb0:	f8a5 3188 	strh.w	r3, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   14bb4:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   14bb8:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   14bbc:	6826      	ldr	r6, [r4, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   14bbe:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   14bc0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   14bc4:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   14bc8:	f8a5 318a 	strh.w	r3, [r5, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   14bcc:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14bd0:	e47d      	b.n	144ce <ull_conn_rx+0x202>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   14bd2:	7f43      	ldrb	r3, [r0, #29]
   14bd4:	2b18      	cmp	r3, #24
   14bd6:	f47f ac4c 	bne.w	14472 <ull_conn_rx+0x1a6>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   14bda:	4f80      	ldr	r7, [pc, #512]	; (14ddc <ull_conn_rx+0xb10>)
   14bdc:	683b      	ldr	r3, [r7, #0]
   14bde:	2b00      	cmp	r3, #0
   14be0:	f000 821e 	beq.w	15020 <ull_conn_rx+0xd54>
   14be4:	429d      	cmp	r5, r3
   14be6:	f000 821b 	beq.w	15020 <ull_conn_rx+0xd54>
			nack = reject_ext_ind_send(conn, *rx,
   14bea:	1d01      	adds	r1, r0, #4
   14bec:	2320      	movs	r3, #32
   14bee:	4628      	mov	r0, r5
   14bf0:	220f      	movs	r2, #15
}
   14bf2:	b005      	add	sp, #20
   14bf4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   14bf8:	f7fe be62 	b.w	138c0 <reject_ext_ind_send.isra.0>
		if (conn->lll.role ||
   14bfc:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   14c00:	2900      	cmp	r1, #0
   14c02:	f6bf ae85 	bge.w	14910 <ull_conn_rx+0x644>
   14c06:	e434      	b.n	14472 <ull_conn_rx+0x1a6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   14c08:	7f43      	ldrb	r3, [r0, #29]
   14c0a:	2b01      	cmp	r3, #1
   14c0c:	f47f ac31 	bne.w	14472 <ull_conn_rx+0x1a6>
		conn->procedure_expire = 0U;
   14c10:	2300      	movs	r3, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14c12:	2203      	movs	r2, #3
		conn->procedure_expire = 0U;
   14c14:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   14c18:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14c1a:	7132      	strb	r2, [r6, #4]
		break;
   14c1c:	f7ff bbab 	b.w	14376 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   14c20:	7f43      	ldrb	r3, [r0, #29]
   14c22:	2b03      	cmp	r3, #3
   14c24:	f47f ac25 	bne.w	14472 <ull_conn_rx+0x1a6>
		if (!conn->lll.role) {
   14c28:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14c2c:	2b00      	cmp	r3, #0
   14c2e:	f2c0 82ac 	blt.w	1518a <ull_conn_rx+0xebe>
			if ((conn->llcp_phy.ack !=
   14c32:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   14c36:	f895 11a8 	ldrb.w	r1, [r5, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   14c3a:	428a      	cmp	r2, r1
   14c3c:	d007      	beq.n	14c4e <ull_conn_rx+0x982>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   14c3e:	f895 31aa 	ldrb.w	r3, [r5, #426]	; 0x1aa
   14c42:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   14c46:	3b01      	subs	r3, #1
   14c48:	2b02      	cmp	r3, #2
   14c4a:	f240 84c2 	bls.w	155d2 <ull_conn_rx+0x1306>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   14c4e:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14c52:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   14c56:	1a1b      	subs	r3, r3, r0
   14c58:	f003 0303 	and.w	r3, r3, #3
   14c5c:	2b02      	cmp	r3, #2
   14c5e:	f000 8496 	beq.w	1558e <ull_conn_rx+0x12c2>
				     LLCP_ENCRYPTION)) ||
   14c62:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
   14c66:	f895 3171 	ldrb.w	r3, [r5, #369]	; 0x171
   14c6a:	4298      	cmp	r0, r3
   14c6c:	f43f ab95 	beq.w	1439a <ull_conn_rx+0xce>
				nack = reject_ext_ind_send(conn, *rx,
   14c70:	1d31      	adds	r1, r6, #4
   14c72:	4628      	mov	r0, r5
   14c74:	232a      	movs	r3, #42	; 0x2a
   14c76:	2216      	movs	r2, #22
   14c78:	e7bb      	b.n	14bf2 <ull_conn_rx+0x926>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   14c7a:	7f44      	ldrb	r4, [r0, #29]
   14c7c:	2c06      	cmp	r4, #6
   14c7e:	f47f abf8 	bne.w	14472 <ull_conn_rx+0x1a6>
	if (!conn->llcp_version.tx) {
   14c82:	f895 3126 	ldrb.w	r3, [r5, #294]	; 0x126
   14c86:	07df      	lsls	r7, r3, #31
   14c88:	f140 83ed 	bpl.w	15466 <ull_conn_rx+0x119a>
	} else if (!conn->llcp_version.rx) {
   14c8c:	f013 0302 	ands.w	r3, r3, #2
   14c90:	f47f ac1d 	bne.w	144ce <ull_conn_rx+0x202>
		conn->llcp_version.ack = conn->llcp_version.req;
   14c94:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
		conn->procedure_expire = 0U;
   14c98:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   14c9c:	f885 2125 	strb.w	r2, [r5, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
   14ca0:	f896 3020 	ldrb.w	r3, [r6, #32]
   14ca4:	f885 3127 	strb.w	r3, [r5, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   14ca8:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   14cac:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   14cb0:	f895 3126 	ldrb.w	r3, [r5, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   14cb4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14cb8:	f8a5 2128 	strh.w	r2, [r5, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
   14cbc:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   14cc0:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   14cc4:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   14cc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   14ccc:	f8a5 212a 	strh.w	r2, [r5, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
   14cd0:	f885 3126 	strb.w	r3, [r5, #294]	; 0x126
	return 0;
   14cd4:	2000      	movs	r0, #0
   14cd6:	f7ff bb4e 	b.w	14376 <ull_conn_rx+0xaa>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   14cda:	7f73      	ldrb	r3, [r6, #29]
   14cdc:	2b02      	cmp	r3, #2
   14cde:	f47f abc8 	bne.w	14472 <ull_conn_rx+0x1a6>
		conn->llcp_enc.pause_rx = 0U;
   14ce2:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
		conn->llcp_ack = conn->llcp_req;
   14ce6:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14cea:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_enc.pause_rx = 0U;
   14cee:	f022 0203 	bic.w	r2, r2, #3
		conn->procedure_expire = 0U;
   14cf2:	2300      	movs	r3, #0
		conn->llcp_enc.pause_rx = 0U;
   14cf4:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
		conn->procedure_expire = 0U;
   14cf8:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	int nack = 0;
   14cfc:	4618      	mov	r0, r3
		break;
   14cfe:	f7ff bb3a 	b.w	14376 <ull_conn_rx+0xaa>
		if (!conn->lll.role ||
   14d02:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14d06:	2b00      	cmp	r3, #0
   14d08:	f6bf abb3 	bge.w	14472 <ull_conn_rx+0x1a6>
   14d0c:	7f73      	ldrb	r3, [r6, #29]
   14d0e:	2b17      	cmp	r3, #23
   14d10:	f47f abaf 	bne.w	14472 <ull_conn_rx+0x1a6>
		memcpy(&conn->llcp_enc.rand[0],
   14d14:	2208      	movs	r2, #8
   14d16:	f106 0120 	add.w	r1, r6, #32
   14d1a:	f205 1055 	addw	r0, r5, #341	; 0x155
   14d1e:	f00a f868 	bl	1edf2 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   14d22:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   14d26:	f885 3153 	strb.w	r3, [r5, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   14d2a:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   14d2e:	f885 3154 	strb.w	r3, [r5, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14d32:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14d36:	6821      	ldr	r1, [r4, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14d38:	2201      	movs	r2, #1
   14d3a:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14d3e:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14d40:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14d44:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   14d46:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   14d4a:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_ack -= 2U;
   14d4e:	3b02      	subs	r3, #2
   14d50:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   14d54:	2208      	movs	r2, #8
   14d56:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   14d5a:	f105 00ee 	add.w	r0, r5, #238	; 0xee
   14d5e:	f00a f848 	bl	1edf2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   14d62:	2204      	movs	r2, #4
   14d64:	f106 0132 	add.w	r1, r6, #50	; 0x32
   14d68:	f105 0098 	add.w	r0, r5, #152	; 0x98
   14d6c:	f00a f841 	bl	1edf2 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   14d70:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   14d74:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
   14d78:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   14d7c:	f043 0301 	orr.w	r3, r3, #1
   14d80:	f885 3152 	strb.w	r3, [r5, #338]	; 0x152
	int nack = 0;
   14d84:	2000      	movs	r0, #0
		break;
   14d86:	f7ff baf6 	b.w	14376 <ull_conn_rx+0xaa>
		if (conn->lll.role ||
   14d8a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14d8e:	2b00      	cmp	r3, #0
   14d90:	f6bf abbd 	bge.w	1450e <ull_conn_rx+0x242>
   14d94:	f7ff bb6d 	b.w	14472 <ull_conn_rx+0x1a6>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   14d98:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14d9c:	2b00      	cmp	r3, #0
   14d9e:	f6ff ab68 	blt.w	14472 <ull_conn_rx+0x1a6>
   14da2:	f895 10e8 	ldrb.w	r1, [r5, #232]	; 0xe8
   14da6:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
   14daa:	4299      	cmp	r1, r3
   14dac:	f43f ab61 	beq.w	14472 <ull_conn_rx+0x1a6>
   14db0:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   14db4:	2b03      	cmp	r3, #3
   14db6:	f47f ab5c 	bne.w	14472 <ull_conn_rx+0x1a6>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   14dba:	7f71      	ldrb	r1, [r6, #29]
   14dbc:	2901      	cmp	r1, #1
   14dbe:	f47f ab58 	bne.w	14472 <ull_conn_rx+0x1a6>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14dc2:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
   14dc6:	f36f 0201 	bfc	r2, #0, #2
   14dca:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
	int nack = 0;
   14dce:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   14dd0:	7133      	strb	r3, [r6, #4]
		break;
   14dd2:	f7ff bad0 	b.w	14376 <ull_conn_rx+0xaa>
   14dd6:	bf00      	nop
   14dd8:	200022d0 	.word	0x200022d0
   14ddc:	20002254 	.word	0x20002254
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   14de0:	7f43      	ldrb	r3, [r0, #29]
   14de2:	2b01      	cmp	r3, #1
   14de4:	f47f ab45 	bne.w	14472 <ull_conn_rx+0x1a6>
	} else if (!conn->lll.role) {
   14de8:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14dec:	2b00      	cmp	r3, #0
   14dee:	f280 8100 	bge.w	14ff2 <ull_conn_rx+0xd26>
		conn->lll.enc_tx = 0;
   14df2:	f895 307e 	ldrb.w	r3, [r5, #126]	; 0x7e
   14df6:	f36f 1304 	bfc	r3, #4, #1
   14dfa:	f885 307e 	strb.w	r3, [r5, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   14dfe:	f7ff bb66 	b.w	144ce <ull_conn_rx+0x202>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   14e02:	7f43      	ldrb	r3, [r0, #29]
   14e04:	2b01      	cmp	r3, #1
   14e06:	f47f ab34 	bne.w	14472 <ull_conn_rx+0x1a6>
		if (conn->lll.role) {
   14e0a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   14e0e:	2b00      	cmp	r3, #0
   14e10:	f2c0 80cd 	blt.w	14fae <ull_conn_rx+0xce2>
			conn->llcp_enc.pause_rx = 0U;
   14e14:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
   14e18:	f021 0103 	bic.w	r1, r1, #3
   14e1c:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
   14e20:	074e      	lsls	r6, r1, #29
   14e22:	f57f ac33 	bpl.w	1468c <ull_conn_rx+0x3c0>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14e26:	6823      	ldr	r3, [r4, #0]
			conn->llcp_enc.refresh = 0U;
   14e28:	f36f 0182 	bfc	r1, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14e2c:	220d      	movs	r2, #13
			conn->llcp_enc.refresh = 0U;
   14e2e:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   14e32:	711a      	strb	r2, [r3, #4]
		conn->procedure_expire = 0U;
   14e34:	e42a      	b.n	1468c <ull_conn_rx+0x3c0>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   14e36:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
   14e3a:	f895 31a9 	ldrb.w	r3, [r5, #425]	; 0x1a9
   14e3e:	4283      	cmp	r3, r0
   14e40:	f43f ab45 	beq.w	144ce <ull_conn_rx+0x202>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   14e44:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14e48:	2a23      	cmp	r2, #35	; 0x23
   14e4a:	d012      	beq.n	14e72 <ull_conn_rx+0xba6>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14e4c:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   14e50:	f895 11ab 	ldrb.w	r1, [r5, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14e54:	f885 01a9 	strb.w	r0, [r5, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14e58:	f3c3 0002 	ubfx	r0, r3, #0, #3
   14e5c:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   14e60:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   14e64:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   14e66:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   14e6a:	f885 11ab 	strb.w	r1, [r5, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   14e6e:	f8a5 00cc 	strh.w	r0, [r5, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   14e72:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   14e76:	0759      	lsls	r1, r3, #29
   14e78:	f57f ab29 	bpl.w	144ce <ull_conn_rx+0x202>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14e7c:	2310      	movs	r3, #16
	p->status = rej_ext_ind->error_code;
   14e7e:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   14e80:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   14e82:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
   14e86:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14e8a:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   14e8c:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   14e90:	f3c3 0302 	ubfx	r3, r3, #0, #3
   14e94:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   14e96:	2000      	movs	r0, #0
   14e98:	f7ff ba6d 	b.w	14376 <ull_conn_rx+0xaa>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   14e9c:	f895 2171 	ldrb.w	r2, [r5, #369]	; 0x171
   14ea0:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   14ea4:	429a      	cmp	r2, r3
   14ea6:	f43f ab12 	beq.w	144ce <ull_conn_rx+0x202>
	if (!lll->role && (rej_ext_ind->error_code ==
   14eaa:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
   14eae:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14eb2:	2900      	cmp	r1, #0
   14eb4:	f2c0 84f4 	blt.w	158a0 <ull_conn_rx+0x15d4>
   14eb8:	2a1a      	cmp	r2, #26
   14eba:	f000 854e 	beq.w	1595a <ull_conn_rx+0x168e>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   14ebe:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   14ec2:	f002 0107 	and.w	r1, r2, #7
   14ec6:	2904      	cmp	r1, #4
   14ec8:	f000 84fa 	beq.w	158c0 <ull_conn_rx+0x15f4>
	if (!conn->llcp_conn_param.cmd) {
   14ecc:	0713      	lsls	r3, r2, #28
   14ece:	f57f aafe 	bpl.w	144ce <ull_conn_rx+0x202>
	cu->status = rej_ext_ind->error_code;
   14ed2:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   14ed6:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14ed8:	220c      	movs	r2, #12
   14eda:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   14edc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   14ede:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
	cu->latency = lll->latency;
   14ee2:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	cu->interval = lll->interval;
   14ee4:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   14ee6:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   14eea:	237d      	movs	r3, #125	; 0x7d
   14eec:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   14ef0:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   14ef2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   14ef6:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   14ef8:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   14efc:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   14efe:	f7ff ba3a 	b.w	14376 <ull_conn_rx+0xaa>
		if ((conn->llcp_ack != conn->llcp_req) &&
   14f02:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14f06:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
   14f0a:	429a      	cmp	r2, r3
   14f0c:	f43f aadf 	beq.w	144ce <ull_conn_rx+0x202>
   14f10:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   14f14:	2a03      	cmp	r2, #3
   14f16:	f47f aada 	bne.w	144ce <ull_conn_rx+0x202>
	conn->llcp_enc.pause_rx = 0U;
   14f1a:	f895 2152 	ldrb.w	r2, [r5, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   14f1e:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   14f22:	f022 0203 	bic.w	r2, r2, #3
	conn->procedure_expire = 0U;
   14f26:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   14f28:	f885 2152 	strb.w	r2, [r5, #338]	; 0x152
	conn->procedure_expire = 0U;
   14f2c:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   14f30:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   14f34:	f886 2020 	strb.w	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   14f38:	220d      	movs	r2, #13
	int nack = 0;
   14f3a:	4618      	mov	r0, r3
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   14f3c:	77f2      	strb	r2, [r6, #31]
	if (err) {
   14f3e:	f7ff ba1a 	b.w	14376 <ull_conn_rx+0xaa>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   14f42:	f895 2198 	ldrb.w	r2, [r5, #408]	; 0x198
   14f46:	f895 3199 	ldrb.w	r3, [r5, #409]	; 0x199
   14f4a:	4293      	cmp	r3, r2
   14f4c:	f43f aabf 	beq.w	144ce <ull_conn_rx+0x202>
	conn->procedure_expire = 0U;
   14f50:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14f52:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   14f54:	f885 2199 	strb.w	r2, [r5, #409]	; 0x199
	conn->procedure_expire = 0U;
   14f58:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   14f5c:	7771      	strb	r1, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   14f5e:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   14f62:	f8b5 705c 	ldrh.w	r7, [r5, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   14f66:	f8b5 4062 	ldrh.w	r4, [r5, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   14f6a:	f8b5 1060 	ldrh.w	r1, [r5, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   14f6e:	8432      	strh	r2, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14f70:	2215      	movs	r2, #21
	int nack = 0;
   14f72:	4618      	mov	r0, r3
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   14f74:	84b7      	strh	r7, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   14f76:	8474      	strh	r4, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   14f78:	84f1      	strh	r1, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   14f7a:	77f2      	strb	r2, [r6, #31]
	if (err) {
   14f7c:	f7ff b9fb 	b.w	14376 <ull_conn_rx+0xaa>
	       (conn->lll.role &&
   14f80:	2800      	cmp	r0, #0
   14f82:	f43f acff 	beq.w	14984 <ull_conn_rx+0x6b8>
		 (conn->llcp_enc.refresh &&
   14f86:	f1b8 0f02 	cmp.w	r8, #2
   14f8a:	f43f ad02 	beq.w	14992 <ull_conn_rx+0x6c6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14f8e:	f1b8 0f0b 	cmp.w	r8, #11
   14f92:	f43f aa6a 	beq.w	1446a <ull_conn_rx+0x19e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14f96:	f1b8 0f03 	cmp.w	r8, #3
   14f9a:	f43f aeb7 	beq.w	14d0c <ull_conn_rx+0xa40>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14f9e:	f1b8 0f06 	cmp.w	r8, #6
   14fa2:	f47f a9cd 	bne.w	14340 <ull_conn_rx+0x74>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   14fa6:	7f73      	ldrb	r3, [r6, #29]
   14fa8:	2b01      	cmp	r3, #1
   14faa:	f47f aa62 	bne.w	14472 <ull_conn_rx+0x1a6>
			if ((conn->llcp_req != conn->llcp_ack) &&
   14fae:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   14fb2:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
   14fb6:	4283      	cmp	r3, r0
   14fb8:	f000 83a5 	beq.w	15706 <ull_conn_rx+0x143a>
   14fbc:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   14fc0:	2b03      	cmp	r3, #3
   14fc2:	f47f aa56 	bne.w	14472 <ull_conn_rx+0x1a6>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   14fc6:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
   14fca:	f36f 0301 	bfc	r3, #0, #2
   14fce:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   14fd2:	e725      	b.n	14e20 <ull_conn_rx+0xb54>
		conn->tx_data_last = tx;
   14fd4:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   14fd8:	f7ff ba79 	b.w	144ce <ull_conn_rx+0x202>
			tx->next = conn->tx_head;
   14fdc:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   14fde:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   14fe2:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   14fe6:	f7ff ba6f 	b.w	144c8 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   14fea:	7f73      	ldrb	r3, [r6, #29]
   14fec:	2b01      	cmp	r3, #1
   14fee:	f47f aa40 	bne.w	14472 <ull_conn_rx+0x1a6>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14ff2:	48d3      	ldr	r0, [pc, #844]	; (15340 <ull_conn_rx+0x1074>)
   14ff4:	f7f9 fd64 	bl	eac0 <mem_acquire>
		if (!tx) {
   14ff8:	4603      	mov	r3, r0
   14ffa:	2800      	cmp	r0, #0
   14ffc:	f000 80c1 	beq.w	15182 <ull_conn_rx+0xeb6>
	conn->llcp_enc.pause_rx = 1U;
   15000:	f895 0152 	ldrb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   15004:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15008:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   1500a:	f040 0001 	orr.w	r0, r0, #1
   1500e:	f885 0152 	strb.w	r0, [r5, #338]	; 0x152
	conn->lll.enc_rx = 0;
   15012:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   15016:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   15018:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1501c:	7158      	strb	r0, [r3, #5]
   1501e:	e40f      	b.n	14840 <ull_conn_rx+0x574>
		if (!conn->lll.role) {
   15020:	f995 c03d 	ldrsb.w	ip, [r5, #61]	; 0x3d
   15024:	f895 0171 	ldrb.w	r0, [r5, #369]	; 0x171
   15028:	f895 2170 	ldrb.w	r2, [r5, #368]	; 0x170
   1502c:	9000      	str	r0, [sp, #0]
   1502e:	f1bc 0f00 	cmp.w	ip, #0
   15032:	f2c0 8121 	blt.w	15278 <ull_conn_rx+0xfac>
			if ((conn->llcp_conn_param.req !=
   15036:	4282      	cmp	r2, r0
   15038:	d009      	beq.n	1504e <ull_conn_rx+0xd82>
			    ((conn->llcp_conn_param.state ==
   1503a:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   1503e:	f012 0207 	ands.w	r2, r2, #7
   15042:	f000 82b6 	beq.w	155b2 <ull_conn_rx+0x12e6>
			      LLCP_CPR_STATE_REQ) ||
   15046:	3a04      	subs	r2, #4
   15048:	2a01      	cmp	r2, #1
   1504a:	f240 82b2 	bls.w	155b2 <ull_conn_rx+0x12e6>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1504e:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   15052:	f895 00e9 	ldrb.w	r0, [r5, #233]	; 0xe9
   15056:	1a12      	subs	r2, r2, r0
   15058:	f002 0203 	and.w	r2, r2, #3
   1505c:	2a02      	cmp	r2, #2
   1505e:	f000 8407 	beq.w	15870 <ull_conn_rx+0x15a4>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   15062:	f895 01a8 	ldrb.w	r0, [r5, #424]	; 0x1a8
   15066:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   1506a:	4290      	cmp	r0, r2
   1506c:	f000 8372 	beq.w	15754 <ull_conn_rx+0x1488>
				nack = reject_ext_ind_send(conn, *rx,
   15070:	1d31      	adds	r1, r6, #4
   15072:	4628      	mov	r0, r5
   15074:	232a      	movs	r3, #42	; 0x2a
   15076:	220f      	movs	r2, #15
   15078:	e5bb      	b.n	14bf2 <ull_conn_rx+0x926>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   1507a:	7f73      	ldrb	r3, [r6, #29]
   1507c:	2b01      	cmp	r3, #1
   1507e:	f43f aec9 	beq.w	14e14 <ull_conn_rx+0xb48>
   15082:	f7ff b9f6 	b.w	14472 <ull_conn_rx+0x1a6>
		if (!conn->tx_ctrl) {
   15086:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
   1508a:	2900      	cmp	r1, #0
   1508c:	f47f abf8 	bne.w	14880 <ull_conn_rx+0x5b4>
			tx->next = conn->tx_head;
   15090:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   15092:	e9c5 336c 	strd	r3, r3, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   15096:	f8c5 31b8 	str.w	r3, [r5, #440]	; 0x1b8
   1509a:	f7ff bbf8 	b.w	1488e <ull_conn_rx+0x5c2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1509e:	48a8      	ldr	r0, [pc, #672]	; (15340 <ull_conn_rx+0x1074>)
   150a0:	f7f9 fd0e 	bl	eac0 <mem_acquire>
		if (!tx) {
   150a4:	4601      	mov	r1, r0
   150a6:	2800      	cmp	r0, #0
   150a8:	d06b      	beq.n	15182 <ull_conn_rx+0xeb6>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   150aa:	f895 0198 	ldrb.w	r0, [r5, #408]	; 0x198
   150ae:	f895 2199 	ldrb.w	r2, [r5, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   150b2:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   150b6:	f8b5 905c 	ldrh.w	r9, [r5, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   150ba:	f8b5 a062 	ldrh.w	sl, [r5, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   150be:	f8b5 b060 	ldrh.w	fp, [r5, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   150c2:	9000      	str	r0, [sp, #0]
	if (/* Local idle, and Peer request then complete the Peer procedure
   150c4:	4290      	cmp	r0, r2
   150c6:	f040 84a4 	bne.w	15a12 <ull_conn_rx+0x1746>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   150ca:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   150cc:	2a1a      	cmp	r2, #26
   150ce:	f240 828b 	bls.w	155e8 <ull_conn_rx+0x131c>
			eff_tx_octets = MIN(max_rx_octets,
   150d2:	f8b5 00d6 	ldrh.w	r0, [r5, #214]	; 0xd6
   150d6:	4282      	cmp	r2, r0
   150d8:	bf28      	it	cs
   150da:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   150dc:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   150e0:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   150e4:	f8b6 c026 	ldrh.w	ip, [r6, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   150e8:	f1be 0f1b 	cmp.w	lr, #27
   150ec:	bf34      	ite	cc
   150ee:	469e      	movcc	lr, r3
   150f0:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   150f4:	f5b8 7fa4 	cmp.w	r8, #328	; 0x148
			eff_rx_octets = MIN(max_tx_octets,
   150f8:	4618      	mov	r0, r3
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   150fa:	bf34      	ite	cc
   150fc:	4658      	movcc	r0, fp
   150fe:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   15102:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   15106:	bf34      	ite	cc
   15108:	46d4      	movcc	ip, sl
   1510a:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   1510e:	459e      	cmp	lr, r3
   15110:	f000 8274 	beq.w	155fc <ull_conn_rx+0x1330>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   15114:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   15116:	f8a5 e19c 	strh.w	lr, [r5, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1511a:	3b01      	subs	r3, #1
   1511c:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   15120:	f8a5 219e 	strh.w	r2, [r5, #414]	; 0x19e
				conn->llcp_length.state =
   15124:	f895 319a 	ldrb.w	r3, [r5, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   15128:	f8a5 c1a0 	strh.w	ip, [r5, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   1512c:	f8a5 01a2 	strh.w	r0, [r5, #418]	; 0x1a2
			if (tx) {
   15130:	2900      	cmp	r1, #0
   15132:	f000 82f6 	beq.w	15722 <ull_conn_rx+0x1456>
				conn->llcp_length.state =
   15136:	2605      	movs	r6, #5
   15138:	f366 0302 	bfi	r3, r6, #0, #3
   1513c:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   15140:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   15144:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   15146:	6823      	ldr	r3, [r4, #0]
   15148:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   1514a:	6823      	ldr	r3, [r4, #0]
   1514c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
			*rx = NULL;
   15150:	2300      	movs	r3, #0
   15152:	6023      	str	r3, [r4, #0]
	if (tx) {
   15154:	2900      	cmp	r1, #0
   15156:	f43f a90d 	beq.w	14374 <ull_conn_rx+0xa8>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1515a:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1515c:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1515e:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15162:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15164:	2409      	movs	r4, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   15166:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   15168:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   1516c:	4628      	mov	r0, r5
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1516e:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15172:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   15174:	714c      	strb	r4, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15176:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   15178:	f7fe fc56 	bl	13a28 <ctrl_tx_sec_enqueue>
	return 0;
   1517c:	2000      	movs	r0, #0
}
   1517e:	f7ff b8fa 	b.w	14376 <ull_conn_rx+0xaa>
			return -ENOBUFS;
   15182:	f06f 0036 	mvn.w	r0, #54	; 0x36
   15186:	f7ff b8f6 	b.w	14376 <ull_conn_rx+0xaa>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1518a:	486d      	ldr	r0, [pc, #436]	; (15340 <ull_conn_rx+0x1074>)
   1518c:	f7f9 fc98 	bl	eac0 <mem_acquire>
	if (!tx) {
   15190:	4602      	mov	r2, r0
   15192:	2800      	cmp	r0, #0
   15194:	d0f5      	beq.n	15182 <ull_conn_rx+0xeb6>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   15196:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   1519a:	f895 e1a9 	ldrb.w	lr, [r5, #425]	; 0x1a9
   1519e:	f895 71a8 	ldrb.w	r7, [r5, #424]	; 0x1a8
   151a2:	f895 31ac 	ldrb.w	r3, [r5, #428]	; 0x1ac
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   151a6:	2002      	movs	r0, #2
   151a8:	f360 0101 	bfi	r1, r0, #0, #2
	if (conn->llcp_phy.ack ==
   151ac:	4577      	cmp	r7, lr
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   151ae:	f885 11aa 	strb.w	r1, [r5, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   151b2:	f3c3 0402 	ubfx	r4, r3, #0, #3
   151b6:	f003 0c07 	and.w	ip, r3, #7
   151ba:	f3c3 1002 	ubfx	r0, r3, #4, #3
   151be:	d113      	bne.n	151e8 <ull_conn_rx+0xf1c>
		conn->llcp_phy.tx =
   151c0:	b2c9      	uxtb	r1, r1
   151c2:	f36c 0184 	bfi	r1, ip, #2, #3
		conn->llcp_phy.cmd = 0U;
   151c6:	f895 c1ab 	ldrb.w	ip, [r5, #427]	; 0x1ab
		conn->procedure_expire =
   151ca:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
   151ce:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
		conn->llcp_phy.ack--;
   151d2:	3f01      	subs	r7, #1
		conn->llcp_phy.rx =
   151d4:	f360 1147 	bfi	r1, r0, #5, #3
		conn->llcp_phy.cmd = 0U;
   151d8:	f36f 0c82 	bfc	ip, #2, #1
		conn->llcp_phy.ack--;
   151dc:	f885 71a9 	strb.w	r7, [r5, #425]	; 0x1a9
		conn->llcp_phy.rx =
   151e0:	f885 11aa 	strb.w	r1, [r5, #426]	; 0x1aa
		conn->llcp_phy.cmd = 0U;
   151e4:	f885 c1ab 	strb.w	ip, [r5, #427]	; 0x1ab
	conn->llcp_phy.rx &= p->tx_phys;
   151e8:	f895 11aa 	ldrb.w	r1, [r5, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   151ec:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   151f0:	f896 7020 	ldrb.w	r7, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   151f4:	f3c1 0c82 	ubfx	ip, r1, #2, #3
   151f8:	ea03 030c 	and.w	r3, r3, ip
	conn->llcp_phy.rx &= p->tx_phys;
   151fc:	ea07 1751 	and.w	r7, r7, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   15200:	009b      	lsls	r3, r3, #2
   15202:	f001 0103 	and.w	r1, r1, #3
   15206:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   1520a:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1520c:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   1520e:	f885 31aa 	strb.w	r3, [r5, #426]	; 0x1aa
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15212:	7913      	ldrb	r3, [r2, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   15214:	7151      	strb	r1, [r2, #5]
	    conn->tx_head &&
   15216:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1521a:	7214      	strb	r4, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1521c:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   15220:	2417      	movs	r4, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   15222:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15224:	7113      	strb	r3, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   15226:	71d4      	strb	r4, [r2, #7]
	if (
   15228:	2900      	cmp	r1, #0
   1522a:	f000 81b7 	beq.w	1559c <ull_conn_rx+0x12d0>
	    !conn->llcp_enc.pause_tx &&
   1522e:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   15232:	079c      	lsls	r4, r3, #30
   15234:	f100 81b2 	bmi.w	1559c <ull_conn_rx+0x12d0>
	    !conn->llcp_phy.pause_tx &&
   15238:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   1523c:	07d8      	lsls	r0, r3, #31
   1523e:	f100 81ad 	bmi.w	1559c <ull_conn_rx+0x12d0>
		if (conn->tx_head == conn->tx_data) {
   15242:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   15246:	4299      	cmp	r1, r3
			conn->tx_data = conn->tx_data->next;
   15248:	bf04      	itt	eq
   1524a:	680b      	ldreq	r3, [r1, #0]
   1524c:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   15250:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   15254:	2b00      	cmp	r3, #0
   15256:	f000 83d6 	beq.w	15a06 <ull_conn_rx+0x173a>
	tx->next = conn->tx_ctrl_last->next;
   1525a:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   1525e:	6819      	ldr	r1, [r3, #0]
   15260:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   15262:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   15264:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
	if (!tx->next) {
   15268:	6813      	ldr	r3, [r2, #0]
   1526a:	2b00      	cmp	r3, #0
   1526c:	f47f a92f 	bne.w	144ce <ull_conn_rx+0x202>
		conn->tx_data_last = tx;
   15270:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15274:	f7ff b92b 	b.w	144ce <ull_conn_rx+0x202>
		} else if ((conn->llcp_conn_param.req ==
   15278:	9900      	ldr	r1, [sp, #0]
   1527a:	428a      	cmp	r2, r1
   1527c:	d06a      	beq.n	15354 <ull_conn_rx+0x1088>
			    conn->llcp_conn_param.ack) ||
   1527e:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   15282:	0790      	lsls	r0, r2, #30
   15284:	d066      	beq.n	15354 <ull_conn_rx+0x1088>
			LL_ASSERT(0);
   15286:	4a2f      	ldr	r2, [pc, #188]	; (15344 <ull_conn_rx+0x1078>)
   15288:	492f      	ldr	r1, [pc, #188]	; (15348 <ull_conn_rx+0x107c>)
   1528a:	4830      	ldr	r0, [pc, #192]	; (1534c <ull_conn_rx+0x1080>)
   1528c:	f241 6366 	movw	r3, #5734	; 0x1666
   15290:	f007 fa97 	bl	1c7c2 <printk>
   15294:	4040      	eors	r0, r0
   15296:	f380 8811 	msr	BASEPRI, r0
   1529a:	f04f 0003 	mov.w	r0, #3
   1529e:	df02      	svc	2
	int nack = 0;
   152a0:	2000      	movs	r0, #0
   152a2:	f7ff b868 	b.w	14376 <ull_conn_rx+0xaa>
			conn->llcp_conn_param.disabled = 1U;
   152a6:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
   152aa:	f995 103d 	ldrsb.w	r1, [r5, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   152ae:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   152b2:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   152b4:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			if (!conn->lll.role) {
   152b8:	f2c0 81f1 	blt.w	1569e <ull_conn_rx+0x13d2>
				LL_ASSERT(conn->llcp_cu.req ==
   152bc:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
   152c0:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
   152c4:	429a      	cmp	r2, r3
   152c6:	d00e      	beq.n	152e6 <ull_conn_rx+0x101a>
   152c8:	4a1e      	ldr	r2, [pc, #120]	; (15344 <ull_conn_rx+0x1078>)
   152ca:	4921      	ldr	r1, [pc, #132]	; (15350 <ull_conn_rx+0x1084>)
   152cc:	481f      	ldr	r0, [pc, #124]	; (1534c <ull_conn_rx+0x1080>)
   152ce:	f241 63ea 	movw	r3, #5866	; 0x16ea
   152d2:	f007 fa76 	bl	1c7c2 <printk>
   152d6:	4040      	eors	r0, r0
   152d8:	f380 8811 	msr	BASEPRI, r0
   152dc:	f04f 0003 	mov.w	r0, #3
   152e0:	df02      	svc	2
   152e2:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
				conn->llcp_conn_param.state =
   152e6:	f895 0172 	ldrb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.interval =
   152ea:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
   152ee:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
				conn->llcp_conn_param.state =
   152f2:	2205      	movs	r2, #5
   152f4:	f362 0002 	bfi	r0, r2, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   152f8:	f895 1106 	ldrb.w	r1, [r5, #262]	; 0x106
				conn->llcp_cu.latency =
   152fc:	f8b5 6178 	ldrh.w	r6, [r5, #376]	; 0x178
				conn->llcp_cu.ack--;
   15300:	3b01      	subs	r3, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   15302:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   15306:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1530a:	0092      	lsls	r2, r2, #2
				conn->llcp_cu.win_size = 1U;
   1530c:	2301      	movs	r3, #1
   1530e:	f885 3114 	strb.w	r3, [r5, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15312:	431a      	orrs	r2, r3
   15314:	f021 0307 	bic.w	r3, r1, #7
   15318:	431a      	orrs	r2, r3
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1531a:	6821      	ldr	r1, [r4, #0]
				conn->llcp_cu.timeout =
   1531c:	f8b5 417a 	ldrh.w	r4, [r5, #378]	; 0x17a
				conn->llcp_conn_param.state =
   15320:	f885 0172 	strb.w	r0, [r5, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15324:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
				conn->llcp_cu.win_offset_us = 0U;
   15328:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1532a:	2203      	movs	r2, #3
				conn->llcp_cu.win_offset_us = 0U;
   1532c:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
				conn->llcp_cu.latency =
   15330:	f8a5 610a 	strh.w	r6, [r5, #266]	; 0x10a
				conn->llcp_cu.timeout =
   15334:	f8a5 410c 	strh.w	r4, [r5, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15338:	710a      	strb	r2, [r1, #4]
				break;
   1533a:	f7ff b81c 	b.w	14376 <ull_conn_rx+0xaa>
   1533e:	bf00      	nop
   15340:	200022d0 	.word	0x200022d0
   15344:	00022b08 	.word	0x00022b08
   15348:	000226e8 	.word	0x000226e8
   1534c:	00022678 	.word	0x00022678
   15350:	00022c28 	.word	0x00022c28
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   15354:	f8b6 8020 	ldrh.w	r8, [r6, #32]
			if ((interval_min < 6) ||
   15358:	f1b8 0f05 	cmp.w	r8, #5
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1535c:	fa1f f288 	uxth.w	r2, r8
			if ((interval_min < 6) ||
   15360:	d97b      	bls.n	1545a <ull_conn_rx+0x118e>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   15362:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
			if ((interval_min < 6) ||
   15366:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1536a:	fa1f f18e 	uxth.w	r1, lr
			if ((interval_min < 6) ||
   1536e:	d874      	bhi.n	1545a <ull_conn_rx+0x118e>
			    (interval_max > 3200) ||
   15370:	428a      	cmp	r2, r1
   15372:	d872      	bhi.n	1545a <ull_conn_rx+0x118e>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   15374:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
			    (interval_min > interval_max) ||
   15378:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1537c:	fa1f fa8c 	uxth.w	sl, ip
			    (interval_min > interval_max) ||
   15380:	d26b      	bcs.n	1545a <ull_conn_rx+0x118e>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   15382:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
			    (latency > 499) ||
   15384:	f1a0 090a 	sub.w	r9, r0, #10
   15388:	fa1f f989 	uxth.w	r9, r9
   1538c:	f640 4b76 	movw	fp, #3190	; 0xc76
   15390:	45d9      	cmp	r9, fp
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   15392:	b282      	uxth	r2, r0
			    (latency > 499) ||
   15394:	d861      	bhi.n	1545a <ull_conn_rx+0x118e>
			     ((latency + 1) * interval_max)) ||
   15396:	fb0a 1901 	mla	r9, sl, r1, r1
			    (timeout < 10) || (timeout > 3200) ||
   1539a:	ebb9 0f82 	cmp.w	r9, r2, lsl #2
   1539e:	d25c      	bcs.n	1545a <ull_conn_rx+0x118e>
			     ((latency + 1) * interval_max)) ||
   153a0:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   153a4:	4559      	cmp	r1, fp
   153a6:	d358      	bcc.n	1545a <ull_conn_rx+0x118e>
			conn->llcp_conn_param.latency =	latency;
   153a8:	f8a5 c178 	strh.w	ip, [r5, #376]	; 0x178
			conn->llcp_conn_param.interval_min = interval_min;
   153ac:	f8a5 8174 	strh.w	r8, [r5, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   153b0:	f8a5 e176 	strh.w	lr, [r5, #374]	; 0x176
			conn->llcp_conn_param.timeout =	timeout;
   153b4:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
			conn->llcp_conn_param.preferred_periodicity =
   153b8:	f885 b17c 	strb.w	fp, [r5, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   153bc:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   153c0:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
			     lll->interval) ||
   153c4:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   153c8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   153cc:	f8a5 017e 	strh.w	r0, [r5, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   153d0:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   153d4:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   153d8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   153dc:	f8a5 0180 	strh.w	r0, [r5, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   153e0:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   153e4:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   153e8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   153ec:	f8a5 0182 	strh.w	r0, [r5, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   153f0:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   153f4:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   153f8:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   153fc:	f8a5 0184 	strh.w	r0, [r5, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   15400:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   15404:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   15408:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1540c:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   15410:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   15414:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   15418:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1541c:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   15420:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   15424:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   15428:	4561      	cmp	r1, ip
				sys_le16_to_cpu(cpr->offset5);
   1542a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   1542e:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   15432:	f000 8271 	beq.w	15918 <ull_conn_rx+0x164c>
				conn->llcp_conn_param.state =
   15436:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
   1543a:	2103      	movs	r1, #3
   1543c:	f361 0202 	bfi	r2, r1, #0, #3
   15440:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   15444:	9a00      	ldr	r2, [sp, #0]
   15446:	3a01      	subs	r2, #1
   15448:	f885 2171 	strb.w	r2, [r5, #369]	; 0x171
			if (!conn_upd_curr) {
   1544c:	2b00      	cmp	r3, #0
   1544e:	f47e af91 	bne.w	14374 <ull_conn_rx+0xa8>
				conn_upd_curr = conn;
   15452:	603d      	str	r5, [r7, #0]
	int nack = 0;
   15454:	4618      	mov	r0, r3
   15456:	f7fe bf8e 	b.w	14376 <ull_conn_rx+0xaa>
				nack = reject_ext_ind_send(conn, *rx,
   1545a:	1d31      	adds	r1, r6, #4
   1545c:	4628      	mov	r0, r5
   1545e:	231e      	movs	r3, #30
   15460:	220f      	movs	r2, #15
   15462:	f7ff bbc6 	b.w	14bf2 <ull_conn_rx+0x926>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15466:	48b6      	ldr	r0, [pc, #728]	; (15740 <ull_conn_rx+0x1474>)
   15468:	f7f9 fb2a 	bl	eac0 <mem_acquire>
		if (!tx) {
   1546c:	4601      	mov	r1, r0
   1546e:	2800      	cmp	r0, #0
   15470:	f43f ae87 	beq.w	15182 <ull_conn_rx+0xeb6>
		conn->llcp_version.tx = 1U;
   15474:	f895 2126 	ldrb.w	r2, [r5, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15478:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   1547a:	f042 0201 	orr.w	r2, r2, #1
   1547e:	f885 2126 	strb.w	r2, [r5, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   15482:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   15486:	220c      	movs	r2, #12
		pdu_tx->len =
   15488:	7144      	strb	r4, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1548a:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   1548c:	240b      	movs	r4, #11
		v->sub_version_number =
   1548e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   15492:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   15496:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   15498:	2205      	movs	r2, #5
   1549a:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   1549c:	72cb      	strb	r3, [r1, #11]
   1549e:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   154a0:	720c      	strb	r4, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   154a2:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   154a4:	4628      	mov	r0, r5
   154a6:	f7fe fabf 	bl	13a28 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   154aa:	2303      	movs	r3, #3
   154ac:	7133      	strb	r3, [r6, #4]
   154ae:	f7ff bbf7 	b.w	14ca0 <ull_conn_rx+0x9d4>
	instant = sys_le16_to_cpu(ind->instant);
   154b2:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   154b4:	8eea      	ldrh	r2, [r5, #54]	; 0x36
   154b6:	1a82      	subs	r2, r0, r2
   154b8:	0412      	lsls	r2, r2, #16
   154ba:	f100 8097 	bmi.w	155ec <ull_conn_rx+0x1320>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   154be:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
   154c2:	f895 c0e9 	ldrb.w	ip, [r5, #233]	; 0xe9
   154c6:	eba2 020c 	sub.w	r2, r2, ip
   154ca:	f002 0203 	and.w	r2, r2, #3
   154ce:	2a02      	cmp	r2, #2
   154d0:	f000 80bc 	beq.w	1564c <ull_conn_rx+0x1380>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   154d4:	f895 c1a8 	ldrb.w	ip, [r5, #424]	; 0x1a8
   154d8:	f895 21a9 	ldrb.w	r2, [r5, #425]	; 0x1a9
   154dc:	4562      	cmp	r2, ip
   154de:	d019      	beq.n	15514 <ull_conn_rx+0x1248>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   154e0:	f895 21aa 	ldrb.w	r2, [r5, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   154e4:	f002 0203 	and.w	r2, r2, #3
   154e8:	2a02      	cmp	r2, #2
   154ea:	d113      	bne.n	15514 <ull_conn_rx+0x1248>
		conn->llcp_phy.pause_tx = 0U;
   154ec:	f895 21ab 	ldrb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   154f0:	f895 60ec 	ldrb.w	r6, [r5, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   154f4:	f885 c1a9 	strb.w	ip, [r5, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   154f8:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   154fc:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   15500:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   15504:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   15508:	f885 21ab 	strb.w	r2, [r5, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1550c:	f885 60ec 	strb.w	r6, [r5, #236]	; 0xec
		conn->procedure_expire = 0U;
   15510:	f8a5 c0cc 	strh.w	ip, [r5, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   15514:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   15518:	f8a5 00ee 	strh.w	r0, [r5, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   1551c:	009b      	lsls	r3, r3, #2
   1551e:	f003 031c 	and.w	r3, r3, #28
   15522:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   15526:	f002 0202 	and.w	r2, r2, #2
   1552a:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   1552c:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   15530:	f885 30ec 	strb.w	r3, [r5, #236]	; 0xec
	link->mem = conn->llcp_rx;
   15534:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   15536:	6823      	ldr	r3, [r4, #0]
   15538:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   1553a:	6823      	ldr	r3, [r4, #0]
   1553c:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
	*rx = NULL;
   15540:	2300      	movs	r3, #0
   15542:	6023      	str	r3, [r4, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   15544:	f7fd f9a8 	bl	12898 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   15548:	4604      	mov	r4, r0
   1554a:	2800      	cmp	r0, #0
   1554c:	f000 819a 	beq.w	15884 <ull_conn_rx+0x15b8>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   15550:	6823      	ldr	r3, [r4, #0]
   15552:	f8d5 2100 	ldr.w	r2, [r5, #256]	; 0x100
   15556:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   15558:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   1555c:	f895 30ec 	ldrb.w	r3, [r5, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   15560:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
	conn->llcp_ack -= 2U;
   15564:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   15566:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   15568:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   1556c:	f885 20e9 	strb.w	r2, [r5, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   15570:	f885 10ea 	strb.w	r1, [r5, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   15574:	f43e aefe 	beq.w	14374 <ull_conn_rx+0xa8>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   15578:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
   1557c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15580:	f363 1206 	bfi	r2, r3, #4, #3
   15584:	f885 2064 	strb.w	r2, [r5, #100]	; 0x64
	int nack = 0;
   15588:	2000      	movs	r0, #0
   1558a:	f7fe bef4 	b.w	14376 <ull_conn_rx+0xaa>
				      0x03) == 0x02) &&
   1558e:	f895 30ea 	ldrb.w	r3, [r5, #234]	; 0xea
   15592:	2b03      	cmp	r3, #3
   15594:	f47f ab6c 	bne.w	14c70 <ull_conn_rx+0x9a4>
   15598:	f7ff bb63 	b.w	14c62 <ull_conn_rx+0x996>
		if (!conn->tx_ctrl) {
   1559c:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   155a0:	2b00      	cmp	r3, #0
   155a2:	f47f ae5a 	bne.w	1525a <ull_conn_rx+0xf8e>
			tx->next = conn->tx_head;
   155a6:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl = tx;
   155a8:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   155ac:	f8c5 21b8 	str.w	r2, [r5, #440]	; 0x1b8
   155b0:	e65a      	b.n	15268 <ull_conn_rx+0xf9c>
				nack = reject_ext_ind_send(conn, *rx,
   155b2:	1d31      	adds	r1, r6, #4
   155b4:	4628      	mov	r0, r5
   155b6:	2323      	movs	r3, #35	; 0x23
   155b8:	220f      	movs	r2, #15
   155ba:	f7ff bb1a 	b.w	14bf2 <ull_conn_rx+0x926>
			conn->llcp_length.disabled = 1U;
   155be:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   155c2:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
   155c6:	f042 0308 	orr.w	r3, r2, #8
   155ca:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   155ce:	f7ff b85d 	b.w	1468c <ull_conn_rx+0x3c0>
				nack = reject_ext_ind_send(conn, *rx,
   155d2:	1d01      	adds	r1, r0, #4
   155d4:	2323      	movs	r3, #35	; 0x23
   155d6:	4628      	mov	r0, r5
   155d8:	f7ff bb4d 	b.w	14c76 <ull_conn_rx+0x9aa>
				nack = reject_ext_ind_send(conn, *rx,
   155dc:	1d31      	adds	r1, r6, #4
   155de:	4628      	mov	r0, r5
   155e0:	231e      	movs	r3, #30
   155e2:	2210      	movs	r2, #16
   155e4:	f7ff bb05 	b.w	14bf2 <ull_conn_rx+0x926>
   155e8:	464a      	mov	r2, r9
   155ea:	e577      	b.n	150dc <ull_conn_rx+0xe10>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   155ec:	2303      	movs	r3, #3
   155ee:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   155f0:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   155f2:	f885 312f 	strb.w	r3, [r5, #303]	; 0x12f
	int nack = 0;
   155f6:	2000      	movs	r0, #0
   155f8:	f7fe bebd 	b.w	14376 <ull_conn_rx+0xaa>
			conn->llcp_length.ack = conn->llcp_length.req;
   155fc:	9b00      	ldr	r3, [sp, #0]
   155fe:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
			conn->procedure_expire = 0U;
   15602:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   15604:	454a      	cmp	r2, r9
			conn->procedure_expire = 0U;
   15606:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1560a:	f000 817b 	beq.w	15904 <ull_conn_rx+0x1638>
			conn->lll.max_rx_time = eff_rx_time;
   1560e:	f8a5 c062 	strh.w	ip, [r5, #98]	; 0x62
			if (tx) {
   15612:	2900      	cmp	r1, #0
   15614:	f000 8171 	beq.w	158fa <ull_conn_rx+0x162e>
				conn->llcp_length.state =
   15618:	f895 419a 	ldrb.w	r4, [r5, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   1561c:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   1561e:	f8a5 e19c 	strh.w	lr, [r5, #412]	; 0x19c
				conn->llcp_length.state =
   15622:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   15624:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   15626:	f367 0402 	bfi	r4, r7, #0, #3
				conn->llcp_length.ack =
   1562a:	f885 3199 	strb.w	r3, [r5, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   1562e:	f8a5 219e 	strh.w	r2, [r5, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   15632:	f8a5 c1a0 	strh.w	ip, [r5, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   15636:	f8a5 01a2 	strh.w	r0, [r5, #418]	; 0x1a2
				conn->llcp_length.state =
   1563a:	f885 419a 	strb.w	r4, [r5, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1563e:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   15642:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   15644:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   15648:	84f0      	strh	r0, [r6, #38]	; 0x26
   1564a:	e583      	b.n	15154 <ull_conn_rx+0xe88>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1564c:	2303      	movs	r3, #3
   1564e:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   15650:	232a      	movs	r3, #42	; 0x2a
   15652:	e7ce      	b.n	155f2 <ull_conn_rx+0x1326>
			conn->llcp_phy.pause_tx = 0U;
   15654:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   15658:	f895 2064 	ldrb.w	r2, [r5, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1565c:	f885 11a9 	strb.w	r1, [r5, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   15660:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   15664:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   15666:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1566a:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   1566e:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   15670:	f885 31ab 	strb.w	r3, [r5, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   15674:	f885 1064 	strb.w	r1, [r5, #100]	; 0x64
   15678:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   1567c:	d55b      	bpl.n	15736 <ull_conn_rx+0x146a>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1567e:	6821      	ldr	r1, [r4, #0]
				p->status = 0U;
   15680:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15682:	2010      	movs	r0, #16
   15684:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   15686:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   15688:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   1568a:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
   1568e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15692:	77b3      	strb	r3, [r6, #30]
   15694:	f7fe bffa 	b.w	1468c <ull_conn_rx+0x3c0>
		conn_upd_curr = conn;
   15698:	601d      	str	r5, [r3, #0]
   1569a:	f7fe bfac 	b.w	145f6 <ull_conn_rx+0x32a>
			LL_ASSERT(conn_upd_curr == conn);
   1569e:	4f29      	ldr	r7, [pc, #164]	; (15744 <ull_conn_rx+0x1478>)
   156a0:	683a      	ldr	r2, [r7, #0]
   156a2:	4295      	cmp	r5, r2
   156a4:	d00e      	beq.n	156c4 <ull_conn_rx+0x13f8>
   156a6:	4a28      	ldr	r2, [pc, #160]	; (15748 <ull_conn_rx+0x147c>)
   156a8:	4928      	ldr	r1, [pc, #160]	; (1574c <ull_conn_rx+0x1480>)
   156aa:	4829      	ldr	r0, [pc, #164]	; (15750 <ull_conn_rx+0x1484>)
   156ac:	f241 7302 	movw	r3, #5890	; 0x1702
   156b0:	f007 f887 	bl	1c7c2 <printk>
   156b4:	4040      	eors	r0, r0
   156b6:	f380 8811 	msr	BASEPRI, r0
   156ba:	f04f 0003 	mov.w	r0, #3
   156be:	df02      	svc	2
   156c0:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   156c4:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   156c8:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
	conn_upd_curr = NULL;
   156cc:	2300      	movs	r3, #0
   156ce:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   156d0:	f012 0308 	ands.w	r3, r2, #8
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   156d4:	6822      	ldr	r2, [r4, #0]
			if (!conn->llcp_conn_param.cmd) {
   156d6:	f43e ae58 	beq.w	1438a <ull_conn_rx+0xbe>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   156da:	210c      	movs	r1, #12
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   156dc:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   156de:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   156e0:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   156e2:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   156e4:	f8b5 20c6 	ldrh.w	r2, [r5, #198]	; 0xc6
			cu->latency = lll->latency;
   156e8:	8e29      	ldrh	r1, [r5, #48]	; 0x30
			cu->interval = lll->interval;
   156ea:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   156ec:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   156f0:	237d      	movs	r3, #125	; 0x7d
   156f2:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   156f6:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   156f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   156fc:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   15700:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   15702:	f7fe bfc3 	b.w	1468c <ull_conn_rx+0x3c0>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15706:	f895 20ec 	ldrb.w	r2, [r5, #236]	; 0xec
				conn->llcp_ack -= 2U;
   1570a:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1570c:	f36f 0201 	bfc	r2, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   15710:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   15712:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15716:	f885 20ec 	strb.w	r2, [r5, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   1571a:	f885 00ea 	strb.w	r0, [r5, #234]	; 0xea
				conn->llcp_ack -= 2U;
   1571e:	f7ff bb7f 	b.w	14e20 <ull_conn_rx+0xb54>
				conn->llcp_length.state =
   15722:	2604      	movs	r6, #4
   15724:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   15728:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   1572c:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
				conn->llcp_length.state =
   15730:	f885 319a 	strb.w	r3, [r5, #410]	; 0x19a
   15734:	e504      	b.n	15140 <ull_conn_rx+0xe74>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15736:	6823      	ldr	r3, [r4, #0]
   15738:	2203      	movs	r2, #3
   1573a:	711a      	strb	r2, [r3, #4]
   1573c:	f7fe bfa6 	b.w	1468c <ull_conn_rx+0x3c0>
   15740:	200022d0 	.word	0x200022d0
   15744:	20002254 	.word	0x20002254
   15748:	00022b08 	.word	0x00022b08
   1574c:	00022c50 	.word	0x00022c50
   15750:	00022678 	.word	0x00022678
				uint16_t interval_min =
   15754:	f8b6 8020 	ldrh.w	r8, [r6, #32]
				if ((interval_min < 6) ||
   15758:	f1b8 0f05 	cmp.w	r8, #5
				uint16_t interval_min =
   1575c:	fa1f f088 	uxth.w	r0, r8
				if ((interval_min < 6) ||
   15760:	f67f ae7b 	bls.w	1545a <ull_conn_rx+0x118e>
				uint16_t interval_max =
   15764:	f8b6 e022 	ldrh.w	lr, [r6, #34]	; 0x22
				if ((interval_min < 6) ||
   15768:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
				uint16_t interval_max =
   1576c:	fa1f f28e 	uxth.w	r2, lr
				if ((interval_min < 6) ||
   15770:	f63f ae73 	bhi.w	1545a <ull_conn_rx+0x118e>
				    (interval_max > 3200) ||
   15774:	4290      	cmp	r0, r2
   15776:	f63f ae70 	bhi.w	1545a <ull_conn_rx+0x118e>
				uint16_t latency =
   1577a:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
   1577e:	fa1f f08c 	uxth.w	r0, ip
				    (interval_min > interval_max) ||
   15782:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
				uint16_t latency =
   15786:	e9cd 0001 	strd	r0, r0, [sp, #4]
				    (interval_min > interval_max) ||
   1578a:	f4bf ae66 	bcs.w	1545a <ull_conn_rx+0x118e>
				uint16_t timeout =
   1578e:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   15790:	f8ad 000e 	strh.w	r0, [sp, #14]
				    (latency > 499) ||
   15794:	f1a0 090a 	sub.w	r9, r0, #10
   15798:	fa1f f989 	uxth.w	r9, r9
   1579c:	f640 4a76 	movw	sl, #3190	; 0xc76
   157a0:	45d1      	cmp	r9, sl
				uint16_t timeout =
   157a2:	fa1f fb80 	uxth.w	fp, r0
				    (latency > 499) ||
   157a6:	f63f ae58 	bhi.w	1545a <ull_conn_rx+0x118e>
				     ((latency + 1) * interval_max)) ||
   157aa:	9801      	ldr	r0, [sp, #4]
   157ac:	fb00 2902 	mla	r9, r0, r2, r2
				    (timeout > 3200) ||
   157b0:	ebb9 0f8b 	cmp.w	r9, fp, lsl #2
   157b4:	f4bf ae51 	bcs.w	1545a <ull_conn_rx+0x118e>
				     ((latency + 1) * interval_max)) ||
   157b8:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   157bc:	4552      	cmp	r2, sl
   157be:	f4ff ae4c 	bcc.w	1545a <ull_conn_rx+0x118e>
				conn->llcp_conn_param.timeout =	timeout;
   157c2:	f8bd 000e 	ldrh.w	r0, [sp, #14]
				conn->llcp_conn_param.latency =	latency;
   157c6:	f8a5 c178 	strh.w	ip, [r5, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
   157ca:	f8a5 8174 	strh.w	r8, [r5, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   157ce:	f8a5 e176 	strh.w	lr, [r5, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
   157d2:	f8a5 017a 	strh.w	r0, [r5, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   157d6:	f885 a17c 	strb.w	sl, [r5, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   157da:	f896 e02a 	ldrb.w	lr, [r6, #42]	; 0x2a
   157de:	f896 0029 	ldrb.w	r0, [r6, #41]	; 0x29
				     lll->interval) ||
   157e2:	f8b5 c02e 	ldrh.w	ip, [r5, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   157e6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   157ea:	f8a5 017e 	strh.w	r0, [r5, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   157ee:	f896 e02c 	ldrb.w	lr, [r6, #44]	; 0x2c
   157f2:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
   157f6:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset0 =
   157fa:	f8a5 0180 	strh.w	r0, [r5, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   157fe:	f896 e02e 	ldrb.w	lr, [r6, #46]	; 0x2e
   15802:	f896 002d 	ldrb.w	r0, [r6, #45]	; 0x2d
   15806:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset1 =
   1580a:	f8a5 0182 	strh.w	r0, [r5, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   1580e:	f896 e030 	ldrb.w	lr, [r6, #48]	; 0x30
   15812:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
   15816:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset2 =
   1581a:	f8a5 0184 	strh.w	r0, [r5, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   1581e:	f896 e032 	ldrb.w	lr, [r6, #50]	; 0x32
   15822:	f896 0031 	ldrb.w	r0, [r6, #49]	; 0x31
   15826:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset3 =
   1582a:	f8a5 0186 	strh.w	r0, [r5, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   1582e:	f896 0033 	ldrb.w	r0, [r6, #51]	; 0x33
   15832:	f896 e034 	ldrb.w	lr, [r6, #52]	; 0x34
   15836:	ea40 200e 	orr.w	r0, r0, lr, lsl #8
				conn->llcp_conn_param.offset4 =
   1583a:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   1583e:	f896 0035 	ldrb.w	r0, [r6, #53]	; 0x35
   15842:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   15846:	4562      	cmp	r2, ip
					sys_le16_to_cpu(cpr->offset5);
   15848:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   1584c:	f8a5 018a 	strh.w	r0, [r5, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
   15850:	f000 80c2 	beq.w	159d8 <ull_conn_rx+0x170c>
					if (conn->llcp_enc.pause_tx) {
   15854:	078e      	lsls	r6, r1, #30
						conn->llcp_conn_param.state =
   15856:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   1585a:	f57f adee 	bpl.w	1543a <ull_conn_rx+0x116e>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1585e:	6821      	ldr	r1, [r4, #0]
						conn->llcp_conn_param.state =
   15860:	2002      	movs	r0, #2
   15862:	f360 0202 	bfi	r2, r0, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15866:	2003      	movs	r0, #3
						conn->llcp_conn_param.state =
   15868:	f885 2172 	strb.w	r2, [r5, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1586c:	7108      	strb	r0, [r1, #4]
   1586e:	e5e9      	b.n	15444 <ull_conn_rx+0x1178>
				      0x03) == 0x02) &&
   15870:	f895 20ea 	ldrb.w	r2, [r5, #234]	; 0xea
   15874:	2a03      	cmp	r2, #3
   15876:	f47f abfb 	bne.w	15070 <ull_conn_rx+0xda4>
   1587a:	f7ff bbf2 	b.w	15062 <ull_conn_rx+0xd96>
	struct node_tx *tx = NULL;
   1587e:	2100      	movs	r1, #0
   15880:	f7fe be82 	b.w	14588 <ull_conn_rx+0x2bc>
	LL_ASSERT(rx_dle);
   15884:	4a67      	ldr	r2, [pc, #412]	; (15a24 <ull_conn_rx+0x1758>)
   15886:	4968      	ldr	r1, [pc, #416]	; (15a28 <ull_conn_rx+0x175c>)
   15888:	4868      	ldr	r0, [pc, #416]	; (15a2c <ull_conn_rx+0x1760>)
   1588a:	f241 3325 	movw	r3, #4901	; 0x1325
   1588e:	f006 ff98 	bl	1c7c2 <printk>
   15892:	4040      	eors	r0, r0
   15894:	f380 8811 	msr	BASEPRI, r0
   15898:	f04f 0003 	mov.w	r0, #3
   1589c:	df02      	svc	2
   1589e:	e657      	b.n	15550 <ull_conn_rx+0x1284>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   158a0:	2a23      	cmp	r2, #35	; 0x23
   158a2:	f43f ab0c 	beq.w	14ebe <ull_conn_rx+0xbf2>
			conn->slave.ticks_to_offset =
   158a6:	f8d5 2194 	ldr.w	r2, [r5, #404]	; 0x194
   158aa:	f8c5 20e4 	str.w	r2, [r5, #228]	; 0xe4
   158ae:	f7ff bb06 	b.w	14ebe <ull_conn_rx+0xbf2>
			tx->next = conn->tx_head->next;
   158b2:	6811      	ldr	r1, [r2, #0]
   158b4:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   158b6:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   158b8:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   158bc:	f7fe bfe7 	b.w	1488e <ull_conn_rx+0x5c2>
		LL_ASSERT(conn_upd_curr == conn);
   158c0:	4f5b      	ldr	r7, [pc, #364]	; (15a30 <ull_conn_rx+0x1764>)
   158c2:	6839      	ldr	r1, [r7, #0]
   158c4:	428d      	cmp	r5, r1
   158c6:	d010      	beq.n	158ea <ull_conn_rx+0x161e>
   158c8:	4a56      	ldr	r2, [pc, #344]	; (15a24 <ull_conn_rx+0x1758>)
   158ca:	495a      	ldr	r1, [pc, #360]	; (15a34 <ull_conn_rx+0x1768>)
   158cc:	4857      	ldr	r0, [pc, #348]	; (15a2c <ull_conn_rx+0x1760>)
   158ce:	f241 03ad 	movw	r3, #4269	; 0x10ad
   158d2:	f006 ff76 	bl	1c7c2 <printk>
   158d6:	4040      	eors	r0, r0
   158d8:	f380 8811 	msr	BASEPRI, r0
   158dc:	f04f 0003 	mov.w	r0, #3
   158e0:	df02      	svc	2
   158e2:	f895 3170 	ldrb.w	r3, [r5, #368]	; 0x170
   158e6:	f895 2172 	ldrb.w	r2, [r5, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   158ea:	f885 3171 	strb.w	r3, [r5, #369]	; 0x171
	conn_upd_curr = NULL;
   158ee:	2300      	movs	r3, #0
   158f0:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   158f2:	f8a5 30cc 	strh.w	r3, [r5, #204]	; 0xcc
   158f6:	f7ff bae9 	b.w	14ecc <ull_conn_rx+0xc00>
				conn->lll.max_tx_octets = eff_tx_octets;
   158fa:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   158fe:	f8a5 0060 	strh.w	r0, [r5, #96]	; 0x60
   15902:	e69c      	b.n	1563e <ull_conn_rx+0x1372>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   15904:	4558      	cmp	r0, fp
   15906:	f47f ae82 	bne.w	1560e <ull_conn_rx+0x1342>
			    eff_rx_time == conn->lll.max_rx_time &&
   1590a:	45d4      	cmp	ip, sl
   1590c:	f47f ae7f 	bne.w	1560e <ull_conn_rx+0x1342>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15910:	6823      	ldr	r3, [r4, #0]
   15912:	2403      	movs	r4, #3
   15914:	711c      	strb	r4, [r3, #4]
				goto send_length_resp;
   15916:	e41d      	b.n	15154 <ull_conn_rx+0xe88>
			     lll->interval) ||
   15918:	8e28      	ldrh	r0, [r5, #48]	; 0x30
   1591a:	4550      	cmp	r0, sl
   1591c:	f47f ad8b 	bne.w	15436 <ull_conn_rx+0x116a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   15920:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15924:	fb00 f101 	mul.w	r1, r0, r1
   15928:	f242 7010 	movw	r0, #10000	; 0x2710
   1592c:	fb00 1202 	mla	r2, r0, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   15930:	f8b5 00c6 	ldrh.w	r0, [r5, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   15934:	3a01      	subs	r2, #1
   15936:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1593a:	b292      	uxth	r2, r2
   1593c:	4290      	cmp	r0, r2
   1593e:	f47f ad7a 	bne.w	15436 <ull_conn_rx+0x116a>
				conn->llcp_conn_param.state =
   15942:	f8b5 2172 	ldrh.w	r2, [r5, #370]	; 0x172
   15946:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1594a:	f042 0201 	orr.w	r2, r2, #1
   1594e:	f8a5 2172 	strh.w	r2, [r5, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15952:	6822      	ldr	r2, [r4, #0]
   15954:	2103      	movs	r1, #3
   15956:	7111      	strb	r1, [r2, #4]
   15958:	e574      	b.n	15444 <ull_conn_rx+0x1178>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1595a:	f895 2104 	ldrb.w	r2, [r5, #260]	; 0x104
   1595e:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
   15962:	429a      	cmp	r2, r3
   15964:	d00e      	beq.n	15984 <ull_conn_rx+0x16b8>
   15966:	4a2f      	ldr	r2, [pc, #188]	; (15a24 <ull_conn_rx+0x1758>)
   15968:	4933      	ldr	r1, [pc, #204]	; (15a38 <ull_conn_rx+0x176c>)
   1596a:	4830      	ldr	r0, [pc, #192]	; (15a2c <ull_conn_rx+0x1760>)
   1596c:	f241 0392 	movw	r3, #4242	; 0x1092
   15970:	f006 ff27 	bl	1c7c2 <printk>
   15974:	4040      	eors	r0, r0
   15976:	f380 8811 	msr	BASEPRI, r0
   1597a:	f04f 0003 	mov.w	r0, #3
   1597e:	df02      	svc	2
   15980:	f895 3105 	ldrb.w	r3, [r5, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15984:	f895 1172 	ldrb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   15988:	f8b5 2176 	ldrh.w	r2, [r5, #374]	; 0x176
   1598c:	f8a5 2108 	strh.w	r2, [r5, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   15990:	2205      	movs	r2, #5
   15992:	f362 0102 	bfi	r1, r2, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15996:	f895 0106 	ldrb.w	r0, [r5, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1599a:	f885 1172 	strb.w	r1, [r5, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1599e:	f3c1 02c0 	ubfx	r2, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   159a2:	0092      	lsls	r2, r2, #2
   159a4:	f020 0007 	bic.w	r0, r0, #7
		conn->llcp_cu.ack--;
   159a8:	3b01      	subs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   159aa:	f042 0201 	orr.w	r2, r2, #1
   159ae:	4302      	orrs	r2, r0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   159b0:	f8b5 1178 	ldrh.w	r1, [r5, #376]	; 0x178
		conn->llcp_cu.ack--;
   159b4:	f885 3105 	strb.w	r3, [r5, #261]	; 0x105
		conn->llcp_cu.win_size = 1U;
   159b8:	2401      	movs	r4, #1
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   159ba:	f8b5 317a 	ldrh.w	r3, [r5, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   159be:	f885 2106 	strb.w	r2, [r5, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   159c2:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   159c4:	f885 4114 	strb.w	r4, [r5, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   159c8:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   159cc:	f8a5 110a 	strh.w	r1, [r5, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   159d0:	f8a5 310c 	strh.w	r3, [r5, #268]	; 0x10c
	if (err) {
   159d4:	f7fe bd7b 	b.w	144ce <ull_conn_rx+0x202>
				     lll->interval) ||
   159d8:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
   159da:	9802      	ldr	r0, [sp, #8]
   159dc:	4282      	cmp	r2, r0
   159de:	f47f af39 	bne.w	15854 <ull_conn_rx+0x1588>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   159e2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   159e6:	fb02 f00c 	mul.w	r0, r2, ip
   159ea:	f242 7210 	movw	r2, #10000	; 0x2710
				     lll->latency) ||
   159ee:	f8b5 60c6 	ldrh.w	r6, [r5, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   159f2:	fb02 020b 	mla	r2, r2, fp, r0
   159f6:	3a01      	subs	r2, #1
   159f8:	fbb2 f2f0 	udiv	r2, r2, r0
				     lll->latency) ||
   159fc:	b292      	uxth	r2, r2
   159fe:	4296      	cmp	r6, r2
   15a00:	f47f af28 	bne.w	15854 <ull_conn_rx+0x1588>
   15a04:	e79d      	b.n	15942 <ull_conn_rx+0x1676>
			tx->next = conn->tx_head->next;
   15a06:	680b      	ldr	r3, [r1, #0]
   15a08:	6013      	str	r3, [r2, #0]
			conn->tx_head->next = tx;
   15a0a:	600a      	str	r2, [r1, #0]
				conn->tx_ctrl_last = tx;
   15a0c:	e9c5 226d 	strd	r2, r2, [r5, #436]	; 0x1b4
   15a10:	e42a      	b.n	15268 <ull_conn_rx+0xf9c>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   15a12:	f895 219a 	ldrb.w	r2, [r5, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   15a16:	f012 0f06 	tst.w	r2, #6
   15a1a:	f43f ab56 	beq.w	150ca <ull_conn_rx+0xdfe>
   15a1e:	f7fe bdac 	b.w	1457a <ull_conn_rx+0x2ae>
   15a22:	bf00      	nop
   15a24:	00022b08 	.word	0x00022b08
   15a28:	00022c68 	.word	0x00022c68
   15a2c:	00022678 	.word	0x00022678
   15a30:	20002254 	.word	0x20002254
   15a34:	00022c50 	.word	0x00022c50
   15a38:	00022c28 	.word	0x00022c28

00015a3c <ull_conn_tx_demux>:
{
   15a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a40:	4f24      	ldr	r7, [pc, #144]	; (15ad4 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15a42:	4e25      	ldr	r6, [pc, #148]	; (15ad8 <ull_conn_tx_demux+0x9c>)
   15a44:	78fa      	ldrb	r2, [r7, #3]
{
   15a46:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   15a48:	1d3d      	adds	r5, r7, #4
   15a4a:	e021      	b.n	15a90 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15a4c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   15a50:	4630      	mov	r0, r6
   15a52:	f7f9 f867 	bl	eb24 <mem_get>
	if (conn->lll.handle != handle) {
   15a56:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   15a58:	bb32      	cbnz	r2, 15aa8 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   15a5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   15a5e:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
   15a62:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   15a64:	b369      	cbz	r1, 15ac2 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   15a66:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   15a6a:	b102      	cbz	r2, 15a6e <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   15a6c:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   15a6e:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   15a72:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   15a74:	78bb      	ldrb	r3, [r7, #2]
   15a76:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   15a78:	429a      	cmp	r2, r3
   15a7a:	d005      	beq.n	15a88 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   15a7c:	3301      	adds	r3, #1
   15a7e:	b2db      	uxtb	r3, r3
		_first = 0U;
   15a80:	4299      	cmp	r1, r3
   15a82:	bf08      	it	eq
   15a84:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   15a86:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   15a88:	3c01      	subs	r4, #1
   15a8a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15a8e:	d016      	beq.n	15abe <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   15a90:	78bb      	ldrb	r3, [r7, #2]
   15a92:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   15a94:	4293      	cmp	r3, r2
   15a96:	d012      	beq.n	15abe <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   15a98:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   15a9c:	eb15 0803 	adds.w	r8, r5, r3
   15aa0:	d00d      	beq.n	15abe <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   15aa2:	5aea      	ldrh	r2, [r5, r3]
   15aa4:	2a00      	cmp	r2, #0
   15aa6:	d0d1      	beq.n	15a4c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   15aa8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   15aac:	790b      	ldrb	r3, [r1, #4]
   15aae:	f36f 0301 	bfc	r3, #0, #2
   15ab2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   15ab4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   15ab8:	f7fc ff06 	bl	128c8 <ll_tx_ack_put>
   15abc:	e7d9      	b.n	15a72 <ull_conn_tx_demux+0x36>
}
   15abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   15ac2:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   15ac6:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   15aca:	2a00      	cmp	r2, #0
   15acc:	d1cb      	bne.n	15a66 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   15ace:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   15ad2:	e7cc      	b.n	15a6e <ull_conn_tx_demux+0x32>
   15ad4:	200005d0 	.word	0x200005d0
   15ad8:	2000208c 	.word	0x2000208c

00015adc <conn_cleanup>:
{
   15adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   15ae0:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   15ae4:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   15ae6:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15aea:	230b      	movs	r3, #11
{
   15aec:	b083      	sub	sp, #12
   15aee:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   15af0:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   15af4:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
   15af8:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   15afc:	b144      	cbz	r4, 15b10 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15afe:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   15b00:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   15b02:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   15b04:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   15b06:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   15b08:	f7fc fe98 	bl	1283c <ll_rx_put>
	while (rx) {
   15b0c:	2c00      	cmp	r4, #0
   15b0e:	d1f7      	bne.n	15b00 <conn_cleanup+0x24>
	while (conn->tx_head) {
   15b10:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   15b14:	b381      	cbz	r1, 15b78 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   15b16:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 15bd0 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   15b1a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 15bc8 <conn_cleanup+0xec>
   15b1e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 15bd4 <conn_cleanup+0xf8>
   15b22:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   15b26:	e007      	b.n	15b38 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15b28:	4629      	mov	r1, r5
   15b2a:	4620      	mov	r0, r4
   15b2c:	463a      	mov	r2, r7
   15b2e:	f7f9 f82b 	bl	eb88 <memq_enqueue>
	while (conn->tx_head) {
   15b32:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   15b36:	b1f9      	cbz	r1, 15b78 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15b38:	4630      	mov	r0, r6
   15b3a:	f7fd fca3 	bl	13484 <tx_ull_dequeue>
   15b3e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   15b40:	4640      	mov	r0, r8
   15b42:	f7f8 ffbd 	bl	eac0 <mem_acquire>
		LL_ASSERT(link);
   15b46:	4604      	mov	r4, r0
   15b48:	2800      	cmp	r0, #0
   15b4a:	d1ed      	bne.n	15b28 <conn_cleanup+0x4c>
   15b4c:	481c      	ldr	r0, [pc, #112]	; (15bc0 <conn_cleanup+0xe4>)
   15b4e:	f240 63d3 	movw	r3, #1747	; 0x6d3
   15b52:	4652      	mov	r2, sl
   15b54:	4649      	mov	r1, r9
   15b56:	f006 fe34 	bl	1c7c2 <printk>
   15b5a:	4040      	eors	r0, r0
   15b5c:	f380 8811 	msr	BASEPRI, r0
   15b60:	f04f 0003 	mov.w	r0, #3
   15b64:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15b66:	4629      	mov	r1, r5
   15b68:	4620      	mov	r0, r4
   15b6a:	463a      	mov	r2, r7
   15b6c:	f7f9 f80c 	bl	eb88 <memq_enqueue>
	while (conn->tx_head) {
   15b70:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   15b74:	2900      	cmp	r1, #0
   15b76:	d1df      	bne.n	15b38 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   15b78:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15b7c:	4b11      	ldr	r3, [pc, #68]	; (15bc4 <conn_cleanup+0xe8>)
   15b7e:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   15b82:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   15b84:	b2d2      	uxtb	r2, r2
   15b86:	2101      	movs	r1, #1
   15b88:	2000      	movs	r0, #0
   15b8a:	f7fa fb15 	bl	101b8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15b8e:	f030 0302 	bics.w	r3, r0, #2
   15b92:	d00c      	beq.n	15bae <conn_cleanup+0xd2>
   15b94:	4a0c      	ldr	r2, [pc, #48]	; (15bc8 <conn_cleanup+0xec>)
   15b96:	490d      	ldr	r1, [pc, #52]	; (15bcc <conn_cleanup+0xf0>)
   15b98:	4809      	ldr	r0, [pc, #36]	; (15bc0 <conn_cleanup+0xe4>)
   15b9a:	f44f 63d8 	mov.w	r3, #1728	; 0x6c0
   15b9e:	f006 fe10 	bl	1c7c2 <printk>
   15ba2:	4040      	eors	r0, r0
   15ba4:	f380 8811 	msr	BASEPRI, r0
   15ba8:	f04f 0003 	mov.w	r0, #3
   15bac:	df02      	svc	2
	lll->handle = 0xFFFF;
   15bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   15bb2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   15bb4:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   15bb6:	b003      	add	sp, #12
   15bb8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   15bbc:	f7ff bf3e 	b.w	15a3c <ull_conn_tx_demux>
   15bc0:	00022678 	.word	0x00022678
   15bc4:	0001385d 	.word	0x0001385d
   15bc8:	00022b08 	.word	0x00022b08
   15bcc:	00022be8 	.word	0x00022be8
   15bd0:	20002354 	.word	0x20002354
   15bd4:	00022b74 	.word	0x00022b74

00015bd8 <ull_conn_done>:
{
   15bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   15bdc:	69c6      	ldr	r6, [r0, #28]
	if (lll->handle == 0xFFFF) {
   15bde:	8bb2      	ldrh	r2, [r6, #28]
   15be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15be4:	429a      	cmp	r2, r3
{
   15be6:	b08b      	sub	sp, #44	; 0x2c
	if (lll->handle == 0xFFFF) {
   15be8:	f000 8091 	beq.w	15d0e <ull_conn_done+0x136>
	switch (done->extra.mic_state) {
   15bec:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   15bf0:	68f4      	ldr	r4, [r6, #12]
	switch (done->extra.mic_state) {
   15bf2:	2b01      	cmp	r3, #1
   15bf4:	4605      	mov	r5, r0
   15bf6:	f000 80f9 	beq.w	15dec <ull_conn_done+0x214>
   15bfa:	2b02      	cmp	r3, #2
   15bfc:	f000 80fc 	beq.w	15df8 <ull_conn_done+0x220>
   15c00:	2b00      	cmp	r3, #0
   15c02:	f000 8103 	beq.w	15e0c <ull_conn_done+0x234>
	reason_peer = conn->llcp_terminate.reason_peer;
   15c06:	f894 712f 	ldrb.w	r7, [r4, #303]	; 0x12f
	if (reason_peer && (
   15c0a:	2f00      	cmp	r7, #0
   15c0c:	f040 80f7 	bne.w	15dfe <ull_conn_done+0x226>
	latency_event = lll->latency_event;
   15c10:	f8b6 9024 	ldrh.w	r9, [r6, #36]	; 0x24
	if (done->extra.trx_cnt) {
   15c14:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   15c16:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   15c18:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   15c1c:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   15c1e:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   15c22:	2b00      	cmp	r3, #0
   15c24:	d076      	beq.n	15d14 <ull_conn_done+0x13c>
		} else if (lll->role) {
   15c26:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   15c2a:	2b00      	cmp	r3, #0
   15c2c:	f2c0 8111 	blt.w	15e52 <ull_conn_done+0x27a>
	if (done->extra.crc_valid) {
   15c30:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   15c34:	2200      	movs	r2, #0
   15c36:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   15c3a:	2b00      	cmp	r3, #0
   15c3c:	f000 809e 	beq.w	15d7c <ull_conn_done+0x1a4>
		conn->supervision_expire = 0U;
   15c40:	2300      	movs	r3, #0
   15c42:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   15c46:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   15c4a:	b133      	cbz	r3, 15c5a <ull_conn_done+0x82>
		if (conn->procedure_expire > elapsed_event) {
   15c4c:	4543      	cmp	r3, r8
   15c4e:	f240 8116 	bls.w	15e7e <ull_conn_done+0x2a6>
			conn->procedure_expire -= elapsed_event;
   15c52:	eba3 0308 	sub.w	r3, r3, r8
   15c56:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   15c5a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15c5e:	b133      	cbz	r3, 15c6e <ull_conn_done+0x96>
		if (conn->apto_expire > elapsed_event) {
   15c60:	4543      	cmp	r3, r8
   15c62:	f240 80ad 	bls.w	15dc0 <ull_conn_done+0x1e8>
			conn->apto_expire -= elapsed_event;
   15c66:	eba3 0308 	sub.w	r3, r3, r8
   15c6a:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   15c6e:	f8b4 20d0 	ldrh.w	r2, [r4, #208]	; 0xd0
   15c72:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15c76:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   15c7a:	b15a      	cbz	r2, 15c94 <ull_conn_done+0xbc>
		if (conn->appto_expire > elapsed_event) {
   15c7c:	4542      	cmp	r2, r8
   15c7e:	f200 8089 	bhi.w	15d94 <ull_conn_done+0x1bc>
			if ((conn->procedure_expire == 0U) &&
   15c82:	f8b4 20cc 	ldrh.w	r2, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   15c86:	2000      	movs	r0, #0
   15c88:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   15c8c:	b912      	cbnz	r2, 15c94 <ull_conn_done+0xbc>
   15c8e:	428b      	cmp	r3, r1
   15c90:	f000 80fe 	beq.w	15e90 <ull_conn_done+0x2b8>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15c94:	1a5b      	subs	r3, r3, r1
   15c96:	f003 0303 	and.w	r3, r3, #3
   15c9a:	2b02      	cmp	r3, #2
   15c9c:	f000 8084 	beq.w	15da8 <ull_conn_done+0x1d0>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   15ca0:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   15ca4:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   15ca8:	429a      	cmp	r2, r3
   15caa:	f000 80d0 	beq.w	15e4e <ull_conn_done+0x276>
		lll->latency_event = 0;
   15cae:	2200      	movs	r2, #0
   15cb0:	84b2      	strh	r2, [r6, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   15cb2:	e9dd 4308 	ldrd	r4, r3, [sp, #32]
   15cb6:	b90f      	cbnz	r7, 15cbc <ull_conn_done+0xe4>
   15cb8:	454a      	cmp	r2, r9
   15cba:	d07c      	beq.n	15db6 <ull_conn_done+0x1de>
		lazy = lll->latency_event + 1;
   15cbc:	3201      	adds	r2, #1
   15cbe:	b291      	uxth	r1, r2
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   15cc0:	b90b      	cbnz	r3, 15cc6 <ull_conn_done+0xee>
   15cc2:	2c00      	cmp	r4, #0
   15cc4:	d063      	beq.n	15d8e <ull_conn_done+0x1b6>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   15cc6:	7f32      	ldrb	r2, [r6, #28]
		struct ll_conn *conn = lll->hdr.parent;
   15cc8:	68f5      	ldr	r5, [r6, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15cca:	4e82      	ldr	r6, [pc, #520]	; (15ed4 <ull_conn_done+0x2fc>)
   15ccc:	9103      	str	r1, [sp, #12]
   15cce:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   15cd0:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   15cd2:	e9cd 0001 	strd	r0, r0, [sp, #4]
   15cd6:	9506      	str	r5, [sp, #24]
   15cd8:	b2d2      	uxtb	r2, r2
   15cda:	9704      	str	r7, [sp, #16]
   15cdc:	9400      	str	r4, [sp, #0]
   15cde:	9605      	str	r6, [sp, #20]
   15ce0:	2101      	movs	r1, #1
   15ce2:	f7fa fa19 	bl	10118 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15ce6:	f030 0302 	bics.w	r3, r0, #2
   15cea:	d010      	beq.n	15d0e <ull_conn_done+0x136>
   15cec:	f7fc fe6e 	bl	129cc <ull_disable_mark_get>
   15cf0:	4285      	cmp	r5, r0
   15cf2:	d00c      	beq.n	15d0e <ull_conn_done+0x136>
   15cf4:	4a78      	ldr	r2, [pc, #480]	; (15ed8 <ull_conn_done+0x300>)
   15cf6:	4979      	ldr	r1, [pc, #484]	; (15edc <ull_conn_done+0x304>)
   15cf8:	4879      	ldr	r0, [pc, #484]	; (15ee0 <ull_conn_done+0x308>)
   15cfa:	f240 43d2 	movw	r3, #1234	; 0x4d2
   15cfe:	f006 fd60 	bl	1c7c2 <printk>
   15d02:	4040      	eors	r0, r0
   15d04:	f380 8811 	msr	BASEPRI, r0
   15d08:	f04f 0003 	mov.w	r0, #3
   15d0c:	df02      	svc	2
}
   15d0e:	b00b      	add	sp, #44	; 0x2c
   15d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   15d14:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   15d18:	2b00      	cmp	r3, #0
   15d1a:	d191      	bne.n	15c40 <ull_conn_done+0x68>
	else if (conn->connect_expire) {
   15d1c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15d20:	b363      	cbz	r3, 15d7c <ull_conn_done+0x1a4>
		if (conn->connect_expire > elapsed_event) {
   15d22:	4543      	cmp	r3, r8
   15d24:	f240 80bb 	bls.w	15e9e <ull_conn_done+0x2c6>
			conn->connect_expire -= elapsed_event;
   15d28:	eba3 0308 	sub.w	r3, r3, r8
   15d2c:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   15d30:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   15d34:	2b00      	cmp	r3, #0
   15d36:	d086      	beq.n	15c46 <ull_conn_done+0x6e>
		if (conn->supervision_expire > elapsed_event) {
   15d38:	4598      	cmp	r8, r3
   15d3a:	f080 809b 	bcs.w	15e74 <ull_conn_done+0x29c>
			conn->supervision_expire -= elapsed_event;
   15d3e:	eba3 0308 	sub.w	r3, r3, r8
   15d42:	b29b      	uxth	r3, r3
			lll->latency_event = 0;
   15d44:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   15d46:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   15d48:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0;
   15d4c:	84b2      	strh	r2, [r6, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   15d4e:	d97c      	bls.n	15e4a <ull_conn_done+0x272>
			else if (lll->role) {
   15d50:	f996 302d 	ldrsb.w	r3, [r6, #45]	; 0x2d
   15d54:	4293      	cmp	r3, r2
   15d56:	f6bf af76 	bge.w	15c46 <ull_conn_done+0x6e>
				if (latency_event) {
   15d5a:	f1b9 0f00 	cmp.w	r9, #0
   15d5e:	d174      	bne.n	15e4a <ull_conn_done+0x272>
					force = conn->slave.force & 0x01;
   15d60:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1;
   15d64:	085a      	lsrs	r2, r3, #1
					if (force) {
   15d66:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   15d6a:	bf17      	itett	ne
   15d6c:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1;
   15d70:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   15d74:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   15d78:	461f      	movne	r7, r3
   15d7a:	e764      	b.n	15c46 <ull_conn_done+0x6e>
		if (!conn->supervision_expire) {
   15d7c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15d80:	2b00      	cmp	r3, #0
   15d82:	d1d9      	bne.n	15d38 <ull_conn_done+0x160>
			conn->supervision_expire = conn->supervision_reload;
   15d84:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15d88:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   15d8c:	e7d2      	b.n	15d34 <ull_conn_done+0x15c>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   15d8e:	b349      	cbz	r1, 15de4 <ull_conn_done+0x20c>
   15d90:	4623      	mov	r3, r4
   15d92:	e798      	b.n	15cc6 <ull_conn_done+0xee>
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15d94:	1a5b      	subs	r3, r3, r1
   15d96:	f003 0303 	and.w	r3, r3, #3
			conn->appto_expire -= elapsed_event;
   15d9a:	eba2 0808 	sub.w	r8, r2, r8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15d9e:	2b02      	cmp	r3, #2
			conn->appto_expire -= elapsed_event;
   15da0:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15da4:	f47f af7c 	bne.w	15ca0 <ull_conn_done+0xc8>
   15da8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15dac:	3b01      	subs	r3, #1
   15dae:	2b01      	cmp	r3, #1
   15db0:	f63f af76 	bhi.w	15ca0 <ull_conn_done+0xc8>
   15db4:	e77b      	b.n	15cae <ull_conn_done+0xd6>
	if ((ticks_drift_plus != 0U) || (ticks_drift_minus != 0U) ||
   15db6:	b90b      	cbnz	r3, 15dbc <ull_conn_done+0x1e4>
   15db8:	2c00      	cmp	r4, #0
   15dba:	d0a8      	beq.n	15d0e <ull_conn_done+0x136>
	lazy = 0U;
   15dbc:	4639      	mov	r1, r7
   15dbe:	e782      	b.n	15cc6 <ull_conn_done+0xee>
			rx = ll_pdu_rx_alloc();
   15dc0:	f7fc fd6a 	bl	12898 <ll_pdu_rx_alloc>
			if (rx) {
   15dc4:	4601      	mov	r1, r0
   15dc6:	2800      	cmp	r0, #0
   15dc8:	d05e      	beq.n	15e88 <ull_conn_done+0x2b0>
				conn->apto_expire = 0U;
   15dca:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   15dcc:	8bb2      	ldrh	r2, [r6, #28]
				conn->apto_expire = 0U;
   15dce:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   15dd2:	230e      	movs	r3, #14
				rx->handle = lll->handle;
   15dd4:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   15dd6:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   15dd8:	6800      	ldr	r0, [r0, #0]
   15dda:	f7fc fd2f 	bl	1283c <ll_rx_put>
				ll_rx_sched();
   15dde:	f7fc fd37 	bl	12850 <ll_rx_sched>
   15de2:	e744      	b.n	15c6e <ull_conn_done+0x96>
	    (lazy != 0U) || (force != 0U)) {
   15de4:	2f00      	cmp	r7, #0
   15de6:	d092      	beq.n	15d0e <ull_conn_done+0x136>
   15de8:	4623      	mov	r3, r4
   15dea:	e76c      	b.n	15cc6 <ull_conn_done+0xee>
		conn->appto_expire = conn->apto_expire = 0U;
   15dec:	2300      	movs	r3, #0
   15dee:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   15df2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   15df6:	e706      	b.n	15c06 <ull_conn_done+0x2e>
		conn->llcp_terminate.reason_peer =
   15df8:	273d      	movs	r7, #61	; 0x3d
   15dfa:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   15dfe:	4639      	mov	r1, r7
   15e00:	4620      	mov	r0, r4
   15e02:	f7ff fe6b 	bl	15adc <conn_cleanup>
}
   15e06:	b00b      	add	sp, #44	; 0x2c
   15e08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   15e0c:	f896 306e 	ldrb.w	r3, [r6, #110]	; 0x6e
   15e10:	0719      	lsls	r1, r3, #28
   15e12:	d404      	bmi.n	15e1e <ull_conn_done+0x246>
   15e14:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   15e18:	07da      	lsls	r2, r3, #31
   15e1a:	f57f aef4 	bpl.w	15c06 <ull_conn_done+0x2e>
					    (lll->latency + 6)) ?
   15e1e:	8c33      	ldrh	r3, [r6, #32]
			appto_reload_new = (conn->apto_reload >
   15e20:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   15e24:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   15e26:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   15e28:	bfc4      	itt	gt
   15e2a:	1ad3      	subgt	r3, r2, r3
   15e2c:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   15e2e:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   15e32:	bfcc      	ite	gt
   15e34:	b29b      	uxthgt	r3, r3
   15e36:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   15e38:	4299      	cmp	r1, r3
   15e3a:	d015      	beq.n	15e68 <ull_conn_done+0x290>
				conn->appto_reload = appto_reload_new;
   15e3c:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   15e40:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   15e44:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   15e48:	e6dd      	b.n	15c06 <ull_conn_done+0x2e>
				force = 1U;
   15e4a:	2701      	movs	r7, #1
   15e4c:	e6fb      	b.n	15c46 <ull_conn_done+0x6e>
   15e4e:	8cb2      	ldrh	r2, [r6, #36]	; 0x24
   15e50:	e72f      	b.n	15cb2 <ull_conn_done+0xda>
			ull_slave_done(done, &ticks_drift_plus,
   15e52:	aa08      	add	r2, sp, #32
   15e54:	a909      	add	r1, sp, #36	; 0x24
   15e56:	4628      	mov	r0, r5
   15e58:	f7ec ffb6 	bl	2dc8 <ull_slave_done>
			if (!conn->tx_head) {
   15e5c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15e60:	b313      	cbz	r3, 15ea8 <ull_conn_done+0x2d0>
				lll->latency_event = 0;
   15e62:	2300      	movs	r3, #0
   15e64:	84b3      	strh	r3, [r6, #36]	; 0x24
   15e66:	e6e3      	b.n	15c30 <ull_conn_done+0x58>
			if (conn->apto_expire == 0U) {
   15e68:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   15e6c:	2900      	cmp	r1, #0
   15e6e:	f47f aeca 	bne.w	15c06 <ull_conn_done+0x2e>
   15e72:	e7e5      	b.n	15e40 <ull_conn_done+0x268>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   15e74:	4620      	mov	r0, r4
   15e76:	2108      	movs	r1, #8
   15e78:	f7ff fe30 	bl	15adc <conn_cleanup>
			return;
   15e7c:	e747      	b.n	15d0e <ull_conn_done+0x136>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   15e7e:	4620      	mov	r0, r4
   15e80:	2122      	movs	r1, #34	; 0x22
   15e82:	f7ff fe2b 	bl	15adc <conn_cleanup>
			return;
   15e86:	e742      	b.n	15d0e <ull_conn_done+0x136>
				conn->apto_expire = 1U;
   15e88:	2301      	movs	r3, #1
   15e8a:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   15e8e:	e6ee      	b.n	15c6e <ull_conn_done+0x96>
				conn->llcp_ack -= 2U;
   15e90:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   15e92:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   15e94:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   15e98:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   15e9c:	e700      	b.n	15ca0 <ull_conn_done+0xc8>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   15e9e:	4620      	mov	r0, r4
   15ea0:	213e      	movs	r1, #62	; 0x3e
   15ea2:	f7ff fe1b 	bl	15adc <conn_cleanup>
			return;
   15ea6:	e732      	b.n	15d0e <ull_conn_done+0x136>
				ull_conn_tx_demux(UINT8_MAX);
   15ea8:	20ff      	movs	r0, #255	; 0xff
   15eaa:	f7ff fdc7 	bl	15a3c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   15eae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d1d5      	bne.n	15e62 <ull_conn_done+0x28a>
   15eb6:	e9d6 0116 	ldrd	r0, r1, [r6, #88]	; 0x58
   15eba:	463a      	mov	r2, r7
   15ebc:	f7f8 fe6c 	bl	eb98 <memq_peek>
   15ec0:	2800      	cmp	r0, #0
   15ec2:	d1ce      	bne.n	15e62 <ull_conn_done+0x28a>
			} else if (lll->slave.latency_enabled) {
   15ec4:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   15ec8:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   15eca:	bf44      	itt	mi
   15ecc:	8c33      	ldrhmi	r3, [r6, #32]
   15ece:	84b3      	strhmi	r3, [r6, #36]	; 0x24
   15ed0:	e6ae      	b.n	15c30 <ull_conn_done+0x58>
   15ed2:	bf00      	nop
   15ed4:	0001381d 	.word	0x0001381d
   15ed8:	00022b08 	.word	0x00022b08
   15edc:	00022ca0 	.word	0x00022ca0
   15ee0:	00022678 	.word	0x00022678

00015ee4 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   15ee4:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   15ee8:	2b00      	cmp	r3, #0
   15eea:	f000 80e7 	beq.w	160bc <ull_conn_tx_lll_enqueue+0x1d8>
   15eee:	3901      	subs	r1, #1
{
   15ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   15ef4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 160c4 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   15ef8:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 160c8 <ull_conn_tx_lll_enqueue+0x1e4>
   15efc:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 160cc <ull_conn_tx_lll_enqueue+0x1e8>
   15f00:	4604      	mov	r4, r0
   15f02:	b2cd      	uxtb	r5, r1
   15f04:	e012      	b.n	15f2c <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   15f06:	4640      	mov	r0, r8
   15f08:	f7f8 fdda 	bl	eac0 <mem_acquire>
		LL_ASSERT(link);
   15f0c:	4607      	mov	r7, r0
   15f0e:	2800      	cmp	r0, #0
   15f10:	d066      	beq.n	15fe0 <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   15f12:	4631      	mov	r1, r6
   15f14:	4638      	mov	r0, r7
   15f16:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   15f1a:	f7f8 fe35 	bl	eb88 <memq_enqueue>
	while (conn->tx_head &&
   15f1e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   15f22:	3d01      	subs	r5, #1
   15f24:	b2ed      	uxtb	r5, r5
   15f26:	2b00      	cmp	r3, #0
   15f28:	f000 8089 	beq.w	1603e <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   15f2c:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   15f30:	07d1      	lsls	r1, r2, #31
   15f32:	d403      	bmi.n	15f3c <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   15f34:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   15f38:	0792      	lsls	r2, r2, #30
   15f3a:	d566      	bpl.n	1600a <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   15f3c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   15f40:	4293      	cmp	r3, r2
   15f42:	d17c      	bne.n	1603e <ull_conn_tx_lll_enqueue+0x15a>
   15f44:	2dff      	cmp	r5, #255	; 0xff
   15f46:	d07a      	beq.n	1603e <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15f48:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   15f4c:	4620      	mov	r0, r4
   15f4e:	f7fd fa99 	bl	13484 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15f52:	7903      	ldrb	r3, [r0, #4]
   15f54:	f003 0303 	and.w	r3, r3, #3
   15f58:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   15f5a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   15f5c:	d1d3      	bne.n	15f06 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   15f5e:	79c3      	ldrb	r3, [r0, #7]
   15f60:	3b03      	subs	r3, #3
   15f62:	2b14      	cmp	r3, #20
   15f64:	d8cf      	bhi.n	15f06 <ull_conn_tx_lll_enqueue+0x22>
   15f66:	a201      	add	r2, pc, #4	; (adr r2, 15f6c <ull_conn_tx_lll_enqueue+0x88>)
   15f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15f6c:	00015fc9 	.word	0x00015fc9
   15f70:	00015fc9 	.word	0x00015fc9
   15f74:	00015f07 	.word	0x00015f07
   15f78:	00015f07 	.word	0x00015f07
   15f7c:	00015f07 	.word	0x00015f07
   15f80:	00015f07 	.word	0x00015f07
   15f84:	00015f07 	.word	0x00015f07
   15f88:	00015fc9 	.word	0x00015fc9
   15f8c:	00015fc1 	.word	0x00015fc1
   15f90:	00015f07 	.word	0x00015f07
   15f94:	00015f07 	.word	0x00015f07
   15f98:	00015f07 	.word	0x00015f07
   15f9c:	00015f07 	.word	0x00015f07
   15fa0:	00015f07 	.word	0x00015f07
   15fa4:	00015f07 	.word	0x00015f07
   15fa8:	00015f07 	.word	0x00015f07
   15fac:	00015f07 	.word	0x00015f07
   15fb0:	00015f07 	.word	0x00015f07
   15fb4:	00015f07 	.word	0x00015f07
   15fb8:	00015ffd 	.word	0x00015ffd
   15fbc:	00015ffd 	.word	0x00015ffd
		if (!conn->lll.role) {
   15fc0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   15fc4:	2b00      	cmp	r3, #0
   15fc6:	da9e      	bge.n	15f06 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   15fc8:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   15fcc:	f043 0302 	orr.w	r3, r3, #2
   15fd0:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   15fd4:	4640      	mov	r0, r8
   15fd6:	f7f8 fd73 	bl	eac0 <mem_acquire>
		LL_ASSERT(link);
   15fda:	4607      	mov	r7, r0
   15fdc:	2800      	cmp	r0, #0
   15fde:	d198      	bne.n	15f12 <ull_conn_tx_lll_enqueue+0x2e>
   15fe0:	4837      	ldr	r0, [pc, #220]	; (160c0 <ull_conn_tx_lll_enqueue+0x1dc>)
   15fe2:	f240 534e 	movw	r3, #1358	; 0x54e
   15fe6:	4652      	mov	r2, sl
   15fe8:	4649      	mov	r1, r9
   15fea:	f006 fbea 	bl	1c7c2 <printk>
   15fee:	4040      	eors	r0, r0
   15ff0:	f380 8811 	msr	BASEPRI, r0
   15ff4:	f04f 0003 	mov.w	r0, #3
   15ff8:	df02      	svc	2
   15ffa:	e78a      	b.n	15f12 <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   15ffc:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   16000:	f043 0301 	orr.w	r3, r3, #1
   16004:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   16008:	e77d      	b.n	15f06 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1600a:	791a      	ldrb	r2, [r3, #4]
   1600c:	f002 0203 	and.w	r2, r2, #3
   16010:	2a03      	cmp	r2, #3
   16012:	d197      	bne.n	15f44 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   16014:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   16016:	2a03      	cmp	r2, #3
   16018:	d001      	beq.n	1601e <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1601a:	2a0a      	cmp	r2, #10
   1601c:	d192      	bne.n	15f44 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1601e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   16022:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   16026:	428a      	cmp	r2, r1
   16028:	d00b      	beq.n	16042 <ull_conn_tx_lll_enqueue+0x15e>
   1602a:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1602e:	2a03      	cmp	r2, #3
   16030:	d088      	beq.n	15f44 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   16032:	681a      	ldr	r2, [r3, #0]
   16034:	b11a      	cbz	r2, 1603e <ull_conn_tx_lll_enqueue+0x15a>
   16036:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   1603a:	428a      	cmp	r2, r1
   1603c:	d02d      	beq.n	1609a <ull_conn_tx_lll_enqueue+0x1b6>
}
   1603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   16042:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   16046:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   1604a:	4288      	cmp	r0, r1
   1604c:	d1f1      	bne.n	16032 <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1604e:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   16052:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   16056:	4288      	cmp	r0, r1
   16058:	d1eb      	bne.n	16032 <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   1605a:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   1605e:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   16062:	4288      	cmp	r0, r1
   16064:	d1e5      	bne.n	16032 <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   16066:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   1606a:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   1606e:	4288      	cmp	r0, r1
   16070:	d1df      	bne.n	16032 <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   16072:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   16076:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   1607a:	4288      	cmp	r0, r1
   1607c:	d1d9      	bne.n	16032 <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1607e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   16082:	2101      	movs	r1, #1
   16084:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   16088:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   1608a:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   1608c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16090:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   16094:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   16098:	e754      	b.n	15f44 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   1609a:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   1609e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   160a2:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   160a6:	680a      	ldr	r2, [r1, #0]
   160a8:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   160aa:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   160ac:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   160b0:	2800      	cmp	r0, #0
   160b2:	f47f af47 	bne.w	15f44 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   160b6:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   160ba:	e743      	b.n	15f44 <ull_conn_tx_lll_enqueue+0x60>
   160bc:	4770      	bx	lr
   160be:	bf00      	nop
   160c0:	00022678 	.word	0x00022678
   160c4:	20002354 	.word	0x20002354
   160c8:	00022b08 	.word	0x00022b08
   160cc:	00022b74 	.word	0x00022b74

000160d0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   160d0:	4901      	ldr	r1, [pc, #4]	; (160d8 <ull_conn_link_tx_release+0x8>)
   160d2:	f7f8 bd0f 	b.w	eaf4 <mem_release>
   160d6:	bf00      	nop
   160d8:	20002354 	.word	0x20002354

000160dc <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   160dc:	4b01      	ldr	r3, [pc, #4]	; (160e4 <ull_conn_ack_last_idx_get+0x8>)
}
   160de:	78d8      	ldrb	r0, [r3, #3]
   160e0:	4770      	bx	lr
   160e2:	bf00      	nop
   160e4:	2000058c 	.word	0x2000058c

000160e8 <ull_conn_ack_peek>:
{
   160e8:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   160ea:	4b0b      	ldr	r3, [pc, #44]	; (16118 <ull_conn_ack_peek+0x30>)
   160ec:	789c      	ldrb	r4, [r3, #2]
   160ee:	78de      	ldrb	r6, [r3, #3]
   160f0:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   160f2:	42b4      	cmp	r4, r6
   160f4:	d00d      	beq.n	16112 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   160f6:	3304      	adds	r3, #4
   160f8:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   160fc:	4605      	mov	r5, r0
   160fe:	1918      	adds	r0, r3, r4
   16100:	d005      	beq.n	1610e <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   16102:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   16104:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   16106:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   16108:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1610a:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1610c:	6818      	ldr	r0, [r3, #0]
}
   1610e:	bcf0      	pop	{r4, r5, r6, r7}
   16110:	4770      	bx	lr
		return NULL;
   16112:	2000      	movs	r0, #0
   16114:	e7fb      	b.n	1610e <ull_conn_ack_peek+0x26>
   16116:	bf00      	nop
   16118:	2000058c 	.word	0x2000058c

0001611c <ull_conn_ack_by_last_peek>:
{
   1611c:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1611e:	4b09      	ldr	r3, [pc, #36]	; (16144 <ull_conn_ack_by_last_peek+0x28>)
   16120:	789c      	ldrb	r4, [r3, #2]
   16122:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   16124:	4284      	cmp	r4, r0
   16126:	d00b      	beq.n	16140 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   16128:	3304      	adds	r3, #4
   1612a:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   1612e:	1918      	adds	r0, r3, r4
   16130:	d004      	beq.n	1613c <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   16132:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   16134:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   16136:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   16138:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   1613a:	6818      	ldr	r0, [r3, #0]
}
   1613c:	bc30      	pop	{r4, r5}
   1613e:	4770      	bx	lr
		return NULL;
   16140:	2000      	movs	r0, #0
   16142:	e7fb      	b.n	1613c <ull_conn_ack_by_last_peek+0x20>
   16144:	2000058c 	.word	0x2000058c

00016148 <ull_conn_ack_dequeue>:
{
   16148:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   1614a:	4b0a      	ldr	r3, [pc, #40]	; (16174 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   1614c:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1614e:	78da      	ldrb	r2, [r3, #3]
   16150:	7818      	ldrb	r0, [r3, #0]
   16152:	785c      	ldrb	r4, [r3, #1]
   16154:	428a      	cmp	r2, r1
   16156:	d00a      	beq.n	1616e <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   16158:	1c4a      	adds	r2, r1, #1
   1615a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1615c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   16160:	4294      	cmp	r4, r2
   16162:	bf08      	it	eq
   16164:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   16166:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   16168:	709a      	strb	r2, [r3, #2]
}
   1616a:	bc10      	pop	{r4}
   1616c:	4770      	bx	lr
		return NULL;
   1616e:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   16170:	e7fb      	b.n	1616a <ull_conn_ack_dequeue+0x22>
   16172:	bf00      	nop
   16174:	2000058c 	.word	0x2000058c

00016178 <ull_conn_lll_ack_enqueue>:
{
   16178:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1617a:	4a13      	ldr	r2, [pc, #76]	; (161c8 <ull_conn_lll_ack_enqueue+0x50>)
   1617c:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   1617e:	7855      	ldrb	r5, [r2, #1]
   16180:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   16182:	1c73      	adds	r3, r6, #1
   16184:	b2db      	uxtb	r3, r3
		last = 0U;
   16186:	429d      	cmp	r5, r3
   16188:	bf08      	it	eq
   1618a:	2300      	moveq	r3, #0
	if (last == first) {
   1618c:	429c      	cmp	r4, r3
   1618e:	d00a      	beq.n	161a6 <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   16190:	4615      	mov	r5, r2
   16192:	f815 4b04 	ldrb.w	r4, [r5], #4
   16196:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   1619a:	192e      	adds	r6, r5, r4
   1619c:	d003      	beq.n	161a6 <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   1619e:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   161a0:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   161a2:	6071      	str	r1, [r6, #4]
}
   161a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   161a6:	4a09      	ldr	r2, [pc, #36]	; (161cc <ull_conn_lll_ack_enqueue+0x54>)
   161a8:	4909      	ldr	r1, [pc, #36]	; (161d0 <ull_conn_lll_ack_enqueue+0x58>)
   161aa:	480a      	ldr	r0, [pc, #40]	; (161d4 <ull_conn_lll_ack_enqueue+0x5c>)
   161ac:	f240 538c 	movw	r3, #1420	; 0x58c
   161b0:	f006 fb07 	bl	1c7c2 <printk>
   161b4:	4040      	eors	r0, r0
   161b6:	f380 8811 	msr	BASEPRI, r0
   161ba:	f04f 0003 	mov.w	r0, #3
   161be:	df02      	svc	2
	lll_tx->handle = handle;
   161c0:	2300      	movs	r3, #0
   161c2:	801b      	strh	r3, [r3, #0]
   161c4:	deff      	udf	#255	; 0xff
   161c6:	bf00      	nop
   161c8:	2000058c 	.word	0x2000058c
   161cc:	00022b08 	.word	0x00022b08
   161d0:	00022b64 	.word	0x00022b64
   161d4:	00022678 	.word	0x00022678

000161d8 <ull_conn_tx_ack>:
{
   161d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   161da:	7953      	ldrb	r3, [r2, #5]
{
   161dc:	b083      	sub	sp, #12
   161de:	4614      	mov	r4, r2
   161e0:	4605      	mov	r5, r0
   161e2:	460f      	mov	r7, r1
	LL_ASSERT(pdu_tx->len);
   161e4:	2b00      	cmp	r3, #0
   161e6:	d033      	beq.n	16250 <ull_conn_tx_ack+0x78>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   161e8:	7923      	ldrb	r3, [r4, #4]
   161ea:	f003 0203 	and.w	r2, r3, #3
   161ee:	2a03      	cmp	r2, #3
   161f0:	d016      	beq.n	16220 <ull_conn_tx_ack+0x48>
	} else if (handle != 0xFFFF) {
   161f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   161f6:	4295      	cmp	r5, r2
   161f8:	d10a      	bne.n	16210 <ull_conn_tx_ack+0x38>
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   161fa:	f36f 0301 	bfc	r3, #0, #2
   161fe:	7123      	strb	r3, [r4, #4]
	struct ll_conn *conn = NULL;
   16200:	2600      	movs	r6, #0
	ll_tx_ack_put(handle, tx);
   16202:	4621      	mov	r1, r4
   16204:	4628      	mov	r0, r5
   16206:	f7fc fb5f 	bl	128c8 <ll_tx_ack_put>
}
   1620a:	4630      	mov	r0, r6
   1620c:	b003      	add	sp, #12
   1620e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16210:	48c4      	ldr	r0, [pc, #784]	; (16524 <ull_conn_tx_ack+0x34c>)
   16212:	462a      	mov	r2, r5
   16214:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16218:	f7f8 fc84 	bl	eb24 <mem_get>
   1621c:	4606      	mov	r6, r0
   1621e:	e7f0      	b.n	16202 <ull_conn_tx_ack+0x2a>
		if (handle != 0xFFFF) {
   16220:	f64f 73ff 	movw	r3, #65535	; 0xffff
   16224:	429d      	cmp	r5, r3
   16226:	d121      	bne.n	1626c <ull_conn_tx_ack+0x94>
	struct ll_conn *conn = NULL;
   16228:	2600      	movs	r6, #0
		if (link->next == (void *)tx) {
   1622a:	6838      	ldr	r0, [r7, #0]
   1622c:	4284      	cmp	r4, r0
   1622e:	d045      	beq.n	162bc <ull_conn_tx_ack+0xe4>
			LL_ASSERT(!link->next);
   16230:	2800      	cmp	r0, #0
   16232:	d0e6      	beq.n	16202 <ull_conn_tx_ack+0x2a>
   16234:	4abc      	ldr	r2, [pc, #752]	; (16528 <ull_conn_tx_ack+0x350>)
   16236:	49bd      	ldr	r1, [pc, #756]	; (1652c <ull_conn_tx_ack+0x354>)
   16238:	48bd      	ldr	r0, [pc, #756]	; (16530 <ull_conn_tx_ack+0x358>)
   1623a:	f240 53ae 	movw	r3, #1454	; 0x5ae
   1623e:	f006 fac0 	bl	1c7c2 <printk>
   16242:	4040      	eors	r0, r0
   16244:	f380 8811 	msr	BASEPRI, r0
   16248:	f04f 0003 	mov.w	r0, #3
   1624c:	df02      	svc	2
   1624e:	e7d8      	b.n	16202 <ull_conn_tx_ack+0x2a>
	LL_ASSERT(pdu_tx->len);
   16250:	4ab5      	ldr	r2, [pc, #724]	; (16528 <ull_conn_tx_ack+0x350>)
   16252:	49b8      	ldr	r1, [pc, #736]	; (16534 <ull_conn_tx_ack+0x35c>)
   16254:	48b6      	ldr	r0, [pc, #728]	; (16530 <ull_conn_tx_ack+0x358>)
   16256:	f240 539b 	movw	r3, #1435	; 0x59b
   1625a:	f006 fab2 	bl	1c7c2 <printk>
   1625e:	4040      	eors	r0, r0
   16260:	f380 8811 	msr	BASEPRI, r0
   16264:	f04f 0003 	mov.w	r0, #3
   16268:	df02      	svc	2
   1626a:	e7bd      	b.n	161e8 <ull_conn_tx_ack+0x10>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1626c:	48ad      	ldr	r0, [pc, #692]	; (16524 <ull_conn_tx_ack+0x34c>)
   1626e:	462a      	mov	r2, r5
   16270:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   16274:	f7f8 fc56 	bl	eb24 <mem_get>
   16278:	79e3      	ldrb	r3, [r4, #7]
   1627a:	3b02      	subs	r3, #2
   1627c:	4606      	mov	r6, r0
	switch (pdu_tx->llctrl.opcode) {
   1627e:	2b16      	cmp	r3, #22
   16280:	d818      	bhi.n	162b4 <ull_conn_tx_ack+0xdc>
   16282:	e8df f013 	tbh	[pc, r3, lsl #1]
   16286:	011e      	.short	0x011e
   16288:	00460102 	.word	0x00460102
   1628c:	00170017 	.word	0x00170017
   16290:	00170017 	.word	0x00170017
   16294:	00f10017 	.word	0x00f10017
   16298:	0017005a 	.word	0x0017005a
   1629c:	00170050 	.word	0x00170050
   162a0:	00170017 	.word	0x00170017
   162a4:	0017004d 	.word	0x0017004d
   162a8:	00d80017 	.word	0x00d80017
   162ac:	001f00b0 	.word	0x001f00b0
   162b0:	00e00026 	.word	0x00e00026
		if (link->next == (void *)tx) {
   162b4:	6838      	ldr	r0, [r7, #0]
   162b6:	42a0      	cmp	r0, r4
   162b8:	d1ba      	bne.n	16230 <ull_conn_tx_ack+0x58>
   162ba:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   162bc:	499e      	ldr	r1, [pc, #632]	; (16538 <ull_conn_tx_ack+0x360>)
   162be:	f7f8 fc19 	bl	eaf4 <mem_release>
			return conn;
   162c2:	e7a2      	b.n	1620a <ull_conn_tx_ack+0x32>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   162c4:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   162c8:	2202      	movs	r2, #2
   162ca:	f362 0301 	bfi	r3, r2, #0, #2
   162ce:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   162d2:	f996 303d 	ldrsb.w	r3, [r6, #61]	; 0x3d
   162d6:	2b00      	cmp	r3, #0
   162d8:	da14      	bge.n	16304 <ull_conn_tx_ack+0x12c>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   162da:	4998      	ldr	r1, [pc, #608]	; (1653c <ull_conn_tx_ack+0x364>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   162dc:	f896 2064 	ldrb.w	r2, [r6, #100]	; 0x64
   162e0:	f896 31aa 	ldrb.w	r3, [r6, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   162e4:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   162e6:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   162ea:	f10d 0c08 	add.w	ip, sp, #8
   162ee:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   162f2:	f003 0307 	and.w	r3, r3, #7
   162f6:	4463      	add	r3, ip
   162f8:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   162fc:	f363 1206 	bfi	r2, r3, #4, #3
   16300:	f886 2064 	strb.w	r2, [r6, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16304:	f896 31ab 	ldrb.w	r3, [r6, #427]	; 0x1ab
   16308:	f36f 0300 	bfc	r3, #0, #1
   1630c:	f886 31ab 	strb.w	r3, [r6, #427]	; 0x1ab
		break;
   16310:	e78b      	b.n	1622a <ull_conn_tx_ack+0x52>
			conn->llcp_enc.pause_tx = 1U;
   16312:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
   16316:	f043 0302 	orr.w	r3, r3, #2
   1631a:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
   1631e:	e784      	b.n	1622a <ull_conn_tx_ack+0x52>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   16320:	7a23      	ldrb	r3, [r4, #8]
   16322:	2b03      	cmp	r3, #3
   16324:	d181      	bne.n	1622a <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_rx = 0U;
   16326:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
   1632a:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   1632c:	f023 0303 	bic.w	r3, r3, #3
   16330:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = 0U;
   16334:	f8a6 20cc 	strh.w	r2, [r6, #204]	; 0xcc
		break;
   16338:	e777      	b.n	1622a <ull_conn_tx_ack+0x52>
		if (!conn->lll.role) {
   1633a:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   1633e:	2b00      	cmp	r3, #0
   16340:	dbe7      	blt.n	16312 <ull_conn_tx_ack+0x13a>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16342:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   16344:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16346:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1634a:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1634c:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   1634e:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16350:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   16352:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   16354:	f200 1155 	addw	r1, r0, #341	; 0x155
   16358:	18a0      	adds	r0, r4, r2
   1635a:	f008 fd4a 	bl	1edf2 <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1635e:	f896 3153 	ldrb.w	r3, [r6, #339]	; 0x153
   16362:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   16364:	f896 3154 	ldrb.w	r3, [r6, #340]	; 0x154
   16368:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   1636a:	210c      	movs	r1, #12
   1636c:	f104 0012 	add.w	r0, r4, #18
   16370:	f001 fc3c 	bl	17bec <lll_csrand_isr_get>
	    conn->tx_head &&
   16374:	f8d6 31b0 	ldr.w	r3, [r6, #432]	; 0x1b0
	if (
   16378:	2b00      	cmp	r3, #0
   1637a:	f000 80ac 	beq.w	164d6 <ull_conn_tx_ack+0x2fe>
	    !conn->llcp_enc.pause_tx &&
   1637e:	f896 2152 	ldrb.w	r2, [r6, #338]	; 0x152
	    conn->tx_head &&
   16382:	0791      	lsls	r1, r2, #30
   16384:	f100 80a7 	bmi.w	164d6 <ull_conn_tx_ack+0x2fe>
	    !conn->llcp_phy.pause_tx &&
   16388:	f896 21ab 	ldrb.w	r2, [r6, #427]	; 0x1ab
   1638c:	07d2      	lsls	r2, r2, #31
   1638e:	f100 80a2 	bmi.w	164d6 <ull_conn_tx_ack+0x2fe>
		if (conn->tx_head == conn->tx_data) {
   16392:	f8d6 21bc 	ldr.w	r2, [r6, #444]	; 0x1bc
   16396:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16398:	bf04      	itt	eq
   1639a:	681a      	ldreq	r2, [r3, #0]
   1639c:	f8c6 21bc 	streq.w	r2, [r6, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   163a0:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
   163a4:	2a00      	cmp	r2, #0
   163a6:	f000 80b5 	beq.w	16514 <ull_conn_tx_ack+0x33c>
	tx->next = conn->tx_ctrl_last->next;
   163aa:	f8d6 31b8 	ldr.w	r3, [r6, #440]	; 0x1b8
   163ae:	681a      	ldr	r2, [r3, #0]
   163b0:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   163b2:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   163b4:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
   163b8:	6823      	ldr	r3, [r4, #0]
	if (!tx->next) {
   163ba:	683a      	ldr	r2, [r7, #0]
   163bc:	2b00      	cmp	r3, #0
   163be:	f000 8087 	beq.w	164d0 <ull_conn_tx_ack+0x2f8>
		if (link->next == (void *)tx) {
   163c2:	2a00      	cmp	r2, #0
   163c4:	f47f af21 	bne.w	1620a <ull_conn_tx_ack+0x32>
			LL_ASSERT(link->next);
   163c8:	4a57      	ldr	r2, [pc, #348]	; (16528 <ull_conn_tx_ack+0x350>)
   163ca:	495d      	ldr	r1, [pc, #372]	; (16540 <ull_conn_tx_ack+0x368>)
   163cc:	4858      	ldr	r0, [pc, #352]	; (16530 <ull_conn_tx_ack+0x358>)
   163ce:	f240 53a7 	movw	r3, #1447	; 0x5a7
   163d2:	f006 f9f6 	bl	1c7c2 <printk>
   163d6:	4040      	eors	r0, r0
   163d8:	f380 8811 	msr	BASEPRI, r0
   163dc:	f04f 0003 	mov.w	r0, #3
   163e0:	df02      	svc	2
   163e2:	2000      	movs	r0, #0
   163e4:	e76a      	b.n	162bc <ull_conn_tx_ack+0xe4>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   163e6:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   163ea:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   163ee:	428b      	cmp	r3, r1
   163f0:	f43f af1b 	beq.w	1622a <ull_conn_tx_ack+0x52>
			switch (conn->llcp_length.state) {
   163f4:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   163f8:	f002 0307 	and.w	r3, r2, #7
   163fc:	2b03      	cmp	r3, #3
   163fe:	d005      	beq.n	1640c <ull_conn_tx_ack+0x234>
   16400:	3303      	adds	r3, #3
   16402:	f003 0307 	and.w	r3, r3, #7
   16406:	2b01      	cmp	r3, #1
   16408:	f63f af54 	bhi.w	162b4 <ull_conn_tx_ack+0xdc>
				conn->lll.max_tx_octets =
   1640c:	f8b6 319e 	ldrh.w	r3, [r6, #414]	; 0x19e
   16410:	f8a6 305c 	strh.w	r3, [r6, #92]	; 0x5c
				if (conn->llcp_length.state ==
   16414:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   16418:	f8b6 01a2 	ldrh.w	r0, [r6, #418]	; 0x1a2
   1641c:	f8a6 0060 	strh.w	r0, [r6, #96]	; 0x60
				if (conn->llcp_length.state ==
   16420:	2b05      	cmp	r3, #5
   16422:	d071      	beq.n	16508 <ull_conn_tx_ack+0x330>
				if (!conn->llcp_length.cache.tx_octets) {
   16424:	f8b6 31a4 	ldrh.w	r3, [r6, #420]	; 0x1a4
   16428:	2b00      	cmp	r3, #0
   1642a:	d15f      	bne.n	164ec <ull_conn_tx_ack+0x314>
					conn->llcp_length.ack =
   1642c:	f886 1199 	strb.w	r1, [r6, #409]	; 0x199
					conn->procedure_expire = 0U;
   16430:	f8a6 30cc 	strh.w	r3, [r6, #204]	; 0xcc
					break;
   16434:	e6f9      	b.n	1622a <ull_conn_tx_ack+0x52>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   16436:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   1643a:	2202      	movs	r2, #2
   1643c:	f362 0302 	bfi	r3, r2, #0, #3
   16440:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   16444:	e6f1      	b.n	1622a <ull_conn_tx_ack+0x52>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16446:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   1644a:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1644e:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   16452:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16456:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1645a:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1645e:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16462:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   16466:	e6e0      	b.n	1622a <ull_conn_tx_ack+0x52>
		conn->llcp_enc.pause_tx = 1U;
   16468:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   1646c:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   16470:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   16474:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   16478:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   1647c:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   16480:	f043 0306 	orr.w	r3, r3, #6
   16484:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   16488:	e6cf      	b.n	1622a <ull_conn_tx_ack+0x52>
		memcpy(&conn->llcp.encryption.skd[0],
   1648a:	2208      	movs	r2, #8
   1648c:	f104 0112 	add.w	r1, r4, #18
   16490:	30ee      	adds	r0, #238	; 0xee
   16492:	f008 fcae 	bl	1edf2 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   16496:	2204      	movs	r2, #4
   16498:	f104 011a 	add.w	r1, r4, #26
   1649c:	f106 0098 	add.w	r0, r6, #152	; 0x98
   164a0:	f008 fca7 	bl	1edf2 <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   164a4:	f896 3152 	ldrb.w	r3, [r6, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   164a8:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   164ac:	f896 2150 	ldrb.w	r2, [r6, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   164b0:	f8a6 10cc 	strh.w	r1, [r6, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   164b4:	f043 0302 	orr.w	r3, r3, #2
   164b8:	f886 3152 	strb.w	r3, [r6, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   164bc:	f886 2151 	strb.w	r2, [r6, #337]	; 0x151
		break;
   164c0:	e6b3      	b.n	1622a <ull_conn_tx_ack+0x52>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   164c2:	7a21      	ldrb	r1, [r4, #8]
   164c4:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   164c6:	bf08      	it	eq
   164c8:	2116      	moveq	r1, #22
   164ca:	f7ff fb07 	bl	15adc <conn_cleanup>
	break;
   164ce:	e6ac      	b.n	1622a <ull_conn_tx_ack+0x52>
		conn->tx_data_last = tx;
   164d0:	f8c6 41c0 	str.w	r4, [r6, #448]	; 0x1c0
   164d4:	e775      	b.n	163c2 <ull_conn_tx_ack+0x1ea>
		if (!conn->tx_ctrl) {
   164d6:	f8d6 21b4 	ldr.w	r2, [r6, #436]	; 0x1b4
   164da:	2a00      	cmp	r2, #0
   164dc:	f47f af65 	bne.w	163aa <ull_conn_tx_ack+0x1d2>
			tx->next = conn->tx_head;
   164e0:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   164e2:	e9c6 446c 	strd	r4, r4, [r6, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   164e6:	f8c6 41b8 	str.w	r4, [r6, #440]	; 0x1b8
   164ea:	e766      	b.n	163ba <ull_conn_tx_ack+0x1e2>
				conn->llcp_length.cache.tx_octets = 0;
   164ec:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   164ee:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   164f2:	f8a6 319e 	strh.w	r3, [r6, #414]	; 0x19e
				conn->llcp_length.tx_time =
   164f6:	f8b6 31a6 	ldrh.w	r3, [r6, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   164fa:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   164fe:	f8a6 11a4 	strh.w	r1, [r6, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   16502:	f8a6 31a2 	strh.w	r3, [r6, #418]	; 0x1a2
				break;
   16506:	e690      	b.n	1622a <ull_conn_tx_ack+0x52>
					conn->llcp_length.state =
   16508:	2304      	movs	r3, #4
   1650a:	f363 0202 	bfi	r2, r3, #0, #3
   1650e:	f886 219a 	strb.w	r2, [r6, #410]	; 0x19a
					break;
   16512:	e68a      	b.n	1622a <ull_conn_tx_ack+0x52>
			tx->next = conn->tx_head->next;
   16514:	681a      	ldr	r2, [r3, #0]
   16516:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   16518:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   1651a:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   1651c:	e9c6 446d 	strd	r4, r4, [r6, #436]	; 0x1b4
   16520:	e74b      	b.n	163ba <ull_conn_tx_ack+0x1e2>
   16522:	bf00      	nop
   16524:	2000208c 	.word	0x2000208c
   16528:	00022b08 	.word	0x00022b08
   1652c:	00022d08 	.word	0x00022d08
   16530:	00022678 	.word	0x00022678
   16534:	00022cfc 	.word	0x00022cfc
   16538:	200022d0 	.word	0x200022d0
   1653c:	00022d20 	.word	0x00022d20
   16540:	00022d14 	.word	0x00022d14

00016544 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   16544:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   16548:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   1654c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   16550:	2a02      	cmp	r2, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16552:	bf14      	ite	ne
   16554:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   16556:	089b      	lsreq	r3, r3, #2
	if (lll->enc_tx) {
   16558:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   1655c:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   16560:	bf14      	ite	ne
   16562:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   16564:	3b0b      	subeq	r3, #11
   16566:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   16568:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   1656a:	bf44      	itt	mi
   1656c:	3b04      	submi	r3, #4
   1656e:	b29b      	uxthmi	r3, r3
}
   16570:	4298      	cmp	r0, r3
   16572:	bf28      	it	cs
   16574:	4618      	movcs	r0, r3
   16576:	4770      	bx	lr

00016578 <ticker_op_cb>:

static void ticker_op_cb(uint32_t status, void *param)
{
	ARG_UNUSED(param);

	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   16578:	b900      	cbnz	r0, 1657c <ticker_op_cb+0x4>
   1657a:	4770      	bx	lr
{
   1657c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1657e:	4a07      	ldr	r2, [pc, #28]	; (1659c <ticker_op_cb+0x24>)
   16580:	4907      	ldr	r1, [pc, #28]	; (165a0 <ticker_op_cb+0x28>)
   16582:	4808      	ldr	r0, [pc, #32]	; (165a4 <ticker_op_cb+0x2c>)
   16584:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   16588:	f006 f91b 	bl	1c7c2 <printk>
   1658c:	4040      	eors	r0, r0
   1658e:	f380 8811 	msr	BASEPRI, r0
   16592:	f04f 0003 	mov.w	r0, #3
   16596:	df02      	svc	2
}
   16598:	bd08      	pop	{r3, pc}
   1659a:	bf00      	nop
   1659c:	00022d40 	.word	0x00022d40
   165a0:	00022b7c 	.word	0x00022b7c
   165a4:	00022678 	.word	0x00022678

000165a8 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   165a8:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   165aa:	4a07      	ldr	r2, [pc, #28]	; (165c8 <ticker_op_stop_adv_cb.part.0+0x20>)
   165ac:	4907      	ldr	r1, [pc, #28]	; (165cc <ticker_op_stop_adv_cb.part.0+0x24>)
   165ae:	4808      	ldr	r0, [pc, #32]	; (165d0 <ticker_op_stop_adv_cb.part.0+0x28>)
   165b0:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   165b4:	f006 f905 	bl	1c7c2 <printk>
   165b8:	4040      	eors	r0, r0
   165ba:	f380 8811 	msr	BASEPRI, r0
   165be:	f04f 0003 	mov.w	r0, #3
   165c2:	df02      	svc	2
}
   165c4:	bd08      	pop	{r3, pc}
   165c6:	bf00      	nop
   165c8:	00022d40 	.word	0x00022d40
   165cc:	00022d84 	.word	0x00022d84
   165d0:	00022678 	.word	0x00022678

000165d4 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   165d4:	2801      	cmp	r0, #1
   165d6:	d000      	beq.n	165da <ticker_op_stop_adv_cb+0x6>
   165d8:	4770      	bx	lr
{
   165da:	b510      	push	{r4, lr}
   165dc:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   165de:	f7fc f9f5 	bl	129cc <ull_disable_mark_get>
   165e2:	4284      	cmp	r4, r0
   165e4:	d003      	beq.n	165ee <ticker_op_stop_adv_cb+0x1a>
}
   165e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   165ea:	f7ff bfdd 	b.w	165a8 <ticker_op_stop_adv_cb.part.0>
   165ee:	bd10      	pop	{r4, pc}

000165f0 <ull_slave_ticker_cb>:
{
   165f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   165f4:	4605      	mov	r5, r0
   165f6:	4688      	mov	r8, r1
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   165f8:	4618      	mov	r0, r3
   165fa:	4629      	mov	r1, r5
{
   165fc:	461c      	mov	r4, r3
   165fe:	4617      	mov	r7, r2
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   16600:	f7ea fc8a 	bl	f18 <ull_conn_llcp>
		if (ret) {
   16604:	2800      	cmp	r0, #0
   16606:	d13a      	bne.n	1667e <ull_slave_ticker_cb+0x8e>
   16608:	7c23      	ldrb	r3, [r4, #16]
   1660a:	3301      	adds	r3, #1
   1660c:	b2db      	uxtb	r3, r3
   1660e:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   16610:	b33b      	cbz	r3, 16662 <ull_slave_ticker_cb+0x72>
	p.ticks_at_expire = ticks_at_expire;
   16612:	4e1c      	ldr	r6, [pc, #112]	; (16684 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   16614:	4b1c      	ldr	r3, [pc, #112]	; (16688 <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   16616:	6035      	str	r5, [r6, #0]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16618:	2200      	movs	r2, #0
	p.param = &conn->lll;
   1661a:	f104 0c1c 	add.w	ip, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1661e:	4611      	mov	r1, r2
   16620:	2001      	movs	r0, #1
	mfy.param = &p;
   16622:	609e      	str	r6, [r3, #8]
	p.remainder = remainder;
   16624:	f8c6 8004 	str.w	r8, [r6, #4]
	p.lazy = lazy;
   16628:	8137      	strh	r7, [r6, #8]
	p.param = &conn->lll;
   1662a:	f8c6 c00c 	str.w	ip, [r6, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1662e:	f7f8 fb1f 	bl	ec70 <mayfly_enqueue>
	LL_ASSERT(!err);
   16632:	b940      	cbnz	r0, 16646 <ull_slave_ticker_cb+0x56>
	ull_conn_tx_demux(UINT8_MAX);
   16634:	20ff      	movs	r0, #255	; 0xff
   16636:	f7ff fa01 	bl	15a3c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   1663a:	4620      	mov	r0, r4
   1663c:	21ff      	movs	r1, #255	; 0xff
}
   1663e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   16642:	f7ff bc4f 	b.w	15ee4 <ull_conn_tx_lll_enqueue>
	LL_ASSERT(!err);
   16646:	4a11      	ldr	r2, [pc, #68]	; (1668c <ull_slave_ticker_cb+0x9c>)
   16648:	4911      	ldr	r1, [pc, #68]	; (16690 <ull_slave_ticker_cb+0xa0>)
   1664a:	4812      	ldr	r0, [pc, #72]	; (16694 <ull_slave_ticker_cb+0xa4>)
   1664c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
   16650:	f006 f8b7 	bl	1c7c2 <printk>
   16654:	4040      	eors	r0, r0
   16656:	f380 8811 	msr	BASEPRI, r0
   1665a:	f04f 0003 	mov.w	r0, #3
   1665e:	df02      	svc	2
   16660:	e7e8      	b.n	16634 <ull_slave_ticker_cb+0x44>
	LL_ASSERT(ref);
   16662:	4a0a      	ldr	r2, [pc, #40]	; (1668c <ull_slave_ticker_cb+0x9c>)
   16664:	490c      	ldr	r1, [pc, #48]	; (16698 <ull_slave_ticker_cb+0xa8>)
   16666:	480b      	ldr	r0, [pc, #44]	; (16694 <ull_slave_ticker_cb+0xa4>)
   16668:	f44f 73c7 	mov.w	r3, #398	; 0x18e
   1666c:	f006 f8a9 	bl	1c7c2 <printk>
   16670:	4040      	eors	r0, r0
   16672:	f380 8811 	msr	BASEPRI, r0
   16676:	f04f 0003 	mov.w	r0, #3
   1667a:	df02      	svc	2
   1667c:	e7c9      	b.n	16612 <ull_slave_ticker_cb+0x22>
}
   1667e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16682:	bf00      	nop
   16684:	20002398 	.word	0x20002398
   16688:	20000604 	.word	0x20000604
   1668c:	00022d40 	.word	0x00022d40
   16690:	000228f4 	.word	0x000228f4
   16694:	00022678 	.word	0x00022678
   16698:	00022a68 	.word	0x00022a68

0001669c <ll_start_enc_req_send>:
{
   1669c:	b570      	push	{r4, r5, r6, lr}
   1669e:	460e      	mov	r6, r1
   166a0:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   166a2:	f7fd fac3 	bl	13c2c <ll_connected_get>
	if (!conn) {
   166a6:	2800      	cmp	r0, #0
   166a8:	d040      	beq.n	1672c <ll_start_enc_req_send+0x90>
	if (error_code) {
   166aa:	4604      	mov	r4, r0
   166ac:	b95e      	cbnz	r6, 166c6 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   166ae:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   166b2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   166b6:	429a      	cmp	r2, r3
   166b8:	d003      	beq.n	166c2 <ll_start_enc_req_send+0x26>
   166ba:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   166be:	2b03      	cmp	r3, #3
   166c0:	d026      	beq.n	16710 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   166c2:	200c      	movs	r0, #12
}
   166c4:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   166c6:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   166ca:	f010 0004 	ands.w	r0, r0, #4
   166ce:	d112      	bne.n	166f6 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   166d0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   166d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   166d8:	429a      	cmp	r2, r3
   166da:	d0f2      	beq.n	166c2 <ll_start_enc_req_send+0x26>
   166dc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   166e0:	2b03      	cmp	r3, #3
   166e2:	d1ee      	bne.n	166c2 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   166e4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   166e8:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   166ec:	f360 0301 	bfi	r3, r0, #0, #2
   166f0:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   166f4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   166f6:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   166fa:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
   166fe:	4293      	cmp	r3, r2
   16700:	d1df      	bne.n	166c2 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   16702:	3301      	adds	r3, #1
   16704:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   16708:	f884 612e 	strb.w	r6, [r4, #302]	; 0x12e
	return 0;
   1670c:	2000      	movs	r0, #0
}
   1670e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   16710:	4629      	mov	r1, r5
   16712:	2210      	movs	r2, #16
   16714:	f200 105d 	addw	r0, r0, #349	; 0x15d
   16718:	f008 fb6b 	bl	1edf2 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1671c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   16720:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   16724:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16726:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   1672a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1672c:	2002      	movs	r0, #2
}
   1672e:	bd70      	pop	{r4, r5, r6, pc}

00016730 <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   16730:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   16732:	4903      	ldr	r1, [pc, #12]	; (16740 <ull_chan_map_get+0x10>)
   16734:	2205      	movs	r2, #5
   16736:	f008 fb5c 	bl	1edf2 <memcpy>

	return count;
   1673a:	4b02      	ldr	r3, [pc, #8]	; (16744 <ull_chan_map_get+0x14>)
}
   1673c:	7818      	ldrb	r0, [r3, #0]
   1673e:	bd08      	pop	{r3, pc}
   16740:	20000614 	.word	0x20000614
   16744:	2000084e 	.word	0x2000084e

00016748 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   16748:	b470      	push	{r4, r5, r6}
   1674a:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1674c:	7800      	ldrb	r0, [r0, #0]
   1674e:	4c1b      	ldr	r4, [pc, #108]	; (167bc <lll_chan_sel_1+0x74>)
   16750:	fb02 1101 	mla	r1, r2, r1, r1
   16754:	180a      	adds	r2, r1, r0
   16756:	fb84 0102 	smull	r0, r1, r4, r2
   1675a:	4411      	add	r1, r2
   1675c:	1149      	asrs	r1, r1, #5
   1675e:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   16762:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   16766:	1a51      	subs	r1, r2, r1
   16768:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1676a:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   1676c:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1676e:	5c9c      	ldrb	r4, [r3, r2]
{
   16770:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16774:	f001 0107 	and.w	r1, r1, #7
   16778:	410c      	asrs	r4, r1
   1677a:	f014 0401 	ands.w	r4, r4, #1
   1677e:	d11b      	bne.n	167b8 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   16780:	fbb0 f2f5 	udiv	r2, r0, r5
   16784:	fb05 0212 	mls	r2, r5, r2, r0
   16788:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   1678a:	1e5d      	subs	r5, r3, #1
   1678c:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1678e:	f104 0108 	add.w	r1, r4, #8
   16792:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   16796:	4620      	mov	r0, r4
   16798:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   1679a:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   1679e:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   167a2:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   167a6:	d002      	beq.n	167ae <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   167a8:	b132      	cbz	r2, 167b8 <lll_chan_sel_1+0x70>
				chan_index--;
   167aa:	3a01      	subs	r2, #1
   167ac:	b2d2      	uxtb	r2, r2
			chan_next++;
   167ae:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   167b0:	4284      	cmp	r4, r0
   167b2:	d1f2      	bne.n	1679a <lll_chan_sel_1+0x52>
	while (byte_count--) {
   167b4:	42b5      	cmp	r5, r6
   167b6:	d1ea      	bne.n	1678e <lll_chan_sel_1+0x46>
}
   167b8:	bc70      	pop	{r4, r5, r6}
   167ba:	4770      	bx	lr
   167bc:	dd67c8a7 	.word	0xdd67c8a7

000167c0 <lll_chan_sel_2>:
{
   167c0:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   167c2:	4f2f      	ldr	r7, [pc, #188]	; (16880 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   167c4:	4e2f      	ldr	r6, [pc, #188]	; (16884 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   167c6:	ea80 0501 	eor.w	r5, r0, r1
   167ca:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   167cc:	0a28      	lsrs	r0, r5, #8
   167ce:	b2ed      	uxtb	r5, r5
   167d0:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   167d4:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   167d8:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   167dc:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   167e0:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   167e4:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   167e8:	ea4c 0c0e 	orr.w	ip, ip, lr
   167ec:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   167ee:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   167f2:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   167f6:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   167fa:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   167fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   16802:	f3c0 4007 	ubfx	r0, r0, #16, #8
   16806:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1680a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   1680e:	3c01      	subs	r4, #1
   16810:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   16812:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   16816:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   16818:	d1d8      	bne.n	167cc <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   1681a:	481b      	ldr	r0, [pc, #108]	; (16888 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1681c:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   1681e:	fba0 5001 	umull	r5, r0, r0, r1
   16822:	1a0d      	subs	r5, r1, r0
   16824:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   16828:	0940      	lsrs	r0, r0, #5
   1682a:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   1682e:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   16832:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16834:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   16838:	f000 0607 	and.w	r6, r0, #7
   1683c:	5d55      	ldrb	r5, [r2, r5]
   1683e:	4135      	asrs	r5, r6
   16840:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   16842:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   16844:	d41a      	bmi.n	1687c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   16846:	fb01 f303 	mul.w	r3, r1, r3
   1684a:	1e56      	subs	r6, r2, #1
   1684c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   16850:	3204      	adds	r2, #4
		bite = *chan_map;
   16852:	f104 0508 	add.w	r5, r4, #8
   16856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1685a:	4620      	mov	r0, r4
   1685c:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1685e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   16862:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   16866:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1686a:	d002      	beq.n	16872 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1686c:	b133      	cbz	r3, 1687c <lll_chan_sel_2+0xbc>
				chan_index--;
   1686e:	3b01      	subs	r3, #1
   16870:	b2db      	uxtb	r3, r3
			chan_next++;
   16872:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   16874:	42a0      	cmp	r0, r4
   16876:	d1f2      	bne.n	1685e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   16878:	42b2      	cmp	r2, r6
   1687a:	d1ea      	bne.n	16852 <lll_chan_sel_2+0x92>
}
   1687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1687e:	bf00      	nop
   16880:	00022110 	.word	0x00022110
   16884:	00088440 	.word	0x00088440
   16888:	bacf914d 	.word	0xbacf914d

0001688c <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   1688c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16890:	4688      	mov	r8, r1
	int i;

	if (free) {
   16892:	4615      	mov	r5, r2
   16894:	b10a      	cbz	r2, 1689a <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   16896:	23ff      	movs	r3, #255	; 0xff
   16898:	7013      	strb	r3, [r2, #0]
   1689a:	4e17      	ldr	r6, [pc, #92]	; (168f8 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1689c:	f000 0701 	and.w	r7, r0, #1
   168a0:	f106 0902 	add.w	r9, r6, #2
{
   168a4:	2400      	movs	r4, #0
   168a6:	e004      	b.n	168b2 <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   168a8:	42ba      	cmp	r2, r7
   168aa:	d014      	beq.n	168d6 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   168ac:	3401      	adds	r4, #1
   168ae:	2c08      	cmp	r4, #8
   168b0:	d00e      	beq.n	168d0 <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   168b2:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   168b6:	07d9      	lsls	r1, r3, #31
   168b8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   168bc:	d4f4      	bmi.n	168a8 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   168be:	2d00      	cmp	r5, #0
   168c0:	d0f4      	beq.n	168ac <wl_find+0x20>
   168c2:	782b      	ldrb	r3, [r5, #0]
   168c4:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   168c6:	bf08      	it	eq
   168c8:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   168ca:	3401      	adds	r4, #1
   168cc:	2c08      	cmp	r4, #8
   168ce:	d1f0      	bne.n	168b2 <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   168d0:	20ff      	movs	r0, #255	; 0xff
}
   168d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   168d6:	2206      	movs	r2, #6
   168d8:	4641      	mov	r1, r8
   168da:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   168de:	f008 fa78 	bl	1edd2 <memcmp>
   168e2:	b130      	cbz	r0, 168f2 <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   168e4:	2d00      	cmp	r5, #0
   168e6:	d0e1      	beq.n	168ac <wl_find+0x20>
   168e8:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   168ec:	07db      	lsls	r3, r3, #31
   168ee:	d4dd      	bmi.n	168ac <wl_find+0x20>
   168f0:	e7e7      	b.n	168c2 <wl_find+0x36>
			return i;
   168f2:	b2e0      	uxtb	r0, r4
   168f4:	e7ed      	b.n	168d2 <wl_find+0x46>
   168f6:	bf00      	nop
   168f8:	200025d8 	.word	0x200025d8

000168fc <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   168fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16900:	4f21      	ldr	r7, [pc, #132]	; (16988 <wl_update+0x8c>)
   16902:	4d22      	ldr	r5, [pc, #136]	; (1698c <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16904:	f8df 9088 	ldr.w	r9, [pc, #136]	; 16990 <wl_update+0x94>
   16908:	f8df a088 	ldr.w	sl, [pc, #136]	; 16994 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1690c:	f1a7 0802 	sub.w	r8, r7, #2
   16910:	f1a5 0b02 	sub.w	fp, r5, #2
{
   16914:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   16916:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   1691a:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   1691c:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16920:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   16922:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16926:	4629      	mov	r1, r5
   16928:	f107 0706 	add.w	r7, r7, #6
   1692c:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   16930:	d022      	beq.n	16978 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   16932:	f899 3000 	ldrb.w	r3, [r9]
   16936:	b163      	cbz	r3, 16952 <wl_update+0x56>
		j = wl[i].rl_idx;
   16938:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1693c:	2b07      	cmp	r3, #7
   1693e:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   16942:	d806      	bhi.n	16952 <wl_update+0x56>
   16944:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   16948:	f013 0f04 	tst.w	r3, #4
   1694c:	d001      	beq.n	16952 <wl_update+0x56>
   1694e:	06db      	lsls	r3, r3, #27
   16950:	d512      	bpl.n	16978 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   16952:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16956:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1695a:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1695e:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   16962:	40a3      	lsls	r3, r4
   16964:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   16968:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1696c:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   16970:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   16974:	f008 fa3d 	bl	1edf2 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   16978:	3401      	adds	r4, #1
   1697a:	2c08      	cmp	r4, #8
   1697c:	f105 0508 	add.w	r5, r5, #8
   16980:	d1c9      	bne.n	16916 <wl_update+0x1a>
}
   16982:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16986:	bf00      	nop
   16988:	2000261a 	.word	0x2000261a
   1698c:	200025da 	.word	0x200025da
   16990:	2000307f 	.word	0x2000307f
   16994:	20002460 	.word	0x20002460

00016998 <rl_update>:
{
   16998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1699c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 16a00 <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   169a0:	4d16      	ldr	r5, [pc, #88]	; (169fc <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   169a2:	f108 0701 	add.w	r7, r8, #1
   169a6:	1cae      	adds	r6, r5, #2
{
   169a8:	2400      	movs	r4, #0
   169aa:	e002      	b.n	169b2 <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   169ac:	3401      	adds	r4, #1
   169ae:	2c08      	cmp	r4, #8
   169b0:	d021      	beq.n	169f6 <rl_update+0x5e>
		if (rl[i].taken) {
   169b2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   169b6:	00d9      	lsls	r1, r3, #3
   169b8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   169bc:	07da      	lsls	r2, r3, #31
   169be:	d5f5      	bpl.n	169ac <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   169c0:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   169c2:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   169c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   169ca:	f04f 0e01 	mov.w	lr, #1
   169ce:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   169d2:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   169d4:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   169d8:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   169da:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   169de:	4439      	add	r1, r7
   169e0:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   169e4:	2206      	movs	r2, #6
   169e6:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   169e8:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   169ea:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   169ee:	f008 fa00 	bl	1edf2 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   169f2:	2c08      	cmp	r4, #8
   169f4:	d1dd      	bne.n	169b2 <rl_update+0x1a>
}
   169f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   169fa:	bf00      	nop
   169fc:	200025a0 	.word	0x200025a0
   16a00:	20002460 	.word	0x20002460

00016a04 <ll_wl_size_get>:
}
   16a04:	2008      	movs	r0, #8
   16a06:	4770      	bx	lr

00016a08 <ll_wl_clear>:
{
   16a08:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   16a0a:	2000      	movs	r0, #0
   16a0c:	f7fc fc88 	bl	13320 <ull_adv_filter_pol_get>
   16a10:	b9d8      	cbnz	r0, 16a4a <ll_wl_clear+0x42>
   16a12:	4a0f      	ldr	r2, [pc, #60]	; (16a50 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   16a14:	4c0f      	ldr	r4, [pc, #60]	; (16a54 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   16a16:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   16a1a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   16a1c:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   16a1e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   16a22:	d805      	bhi.n	16a30 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   16a24:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   16a28:	f36f 1345 	bfc	r3, #5, #1
   16a2c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   16a30:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   16a34:	f36f 0300 	bfc	r3, #0, #1
   16a38:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   16a3c:	3001      	adds	r0, #1
   16a3e:	2808      	cmp	r0, #8
   16a40:	d1e9      	bne.n	16a16 <ll_wl_clear+0xe>
	wl_anon = 0U;
   16a42:	4b05      	ldr	r3, [pc, #20]	; (16a58 <ll_wl_clear+0x50>)
   16a44:	2000      	movs	r0, #0
   16a46:	7018      	strb	r0, [r3, #0]
}
   16a48:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16a4a:	200c      	movs	r0, #12
}
   16a4c:	bd10      	pop	{r4, pc}
   16a4e:	bf00      	nop
   16a50:	200025d8 	.word	0x200025d8
   16a54:	20002460 	.word	0x20002460
   16a58:	20003080 	.word	0x20003080

00016a5c <ll_wl_remove>:
{
   16a5c:	b538      	push	{r3, r4, r5, lr}
   16a5e:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   16a60:	2000      	movs	r0, #0
   16a62:	f7fc fc5d 	bl	13320 <ull_adv_filter_pol_get>
   16a66:	bb30      	cbnz	r0, 16ab6 <ll_wl_remove+0x5a>
   16a68:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   16a6a:	7828      	ldrb	r0, [r5, #0]
   16a6c:	28ff      	cmp	r0, #255	; 0xff
   16a6e:	d01e      	beq.n	16aae <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   16a70:	1c69      	adds	r1, r5, #1
   16a72:	4622      	mov	r2, r4
   16a74:	f7ff ff0a 	bl	1688c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   16a78:	2807      	cmp	r0, #7
   16a7a:	d901      	bls.n	16a80 <ll_wl_remove+0x24>
   16a7c:	2002      	movs	r0, #2
}
   16a7e:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   16a80:	4a0e      	ldr	r2, [pc, #56]	; (16abc <ll_wl_remove+0x60>)
   16a82:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   16a86:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   16a88:	2b07      	cmp	r3, #7
   16a8a:	d808      	bhi.n	16a9e <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   16a8c:	490c      	ldr	r1, [pc, #48]	; (16ac0 <ll_wl_remove+0x64>)
   16a8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   16a92:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   16a96:	f364 1545 	bfi	r5, r4, #5, #1
   16a9a:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   16a9e:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   16aa2:	f36f 0300 	bfc	r3, #0, #1
   16aa6:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   16aaa:	2000      	movs	r0, #0
}
   16aac:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   16aae:	4b05      	ldr	r3, [pc, #20]	; (16ac4 <ll_wl_remove+0x68>)
   16ab0:	701c      	strb	r4, [r3, #0]
		return 0;
   16ab2:	4620      	mov	r0, r4
}
   16ab4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16ab6:	200c      	movs	r0, #12
}
   16ab8:	bd38      	pop	{r3, r4, r5, pc}
   16aba:	bf00      	nop
   16abc:	200025d8 	.word	0x200025d8
   16ac0:	20002460 	.word	0x20002460
   16ac4:	20003080 	.word	0x20003080

00016ac8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16ac8:	2807      	cmp	r0, #7
{
   16aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ace:	4604      	mov	r4, r0
   16ad0:	460d      	mov	r5, r1
   16ad2:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16ad4:	d817      	bhi.n	16b06 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   16ad6:	4e19      	ldr	r6, [pc, #100]	; (16b3c <ll_rl_id_addr_get+0x74>)
   16ad8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16adc:	00a7      	lsls	r7, r4, #2
   16ade:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   16ae2:	07db      	lsls	r3, r3, #31
   16ae4:	d51c      	bpl.n	16b20 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   16ae6:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16ae8:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   16aea:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   16aee:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16af2:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   16af6:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16af8:	4640      	mov	r0, r8
   16afa:	3101      	adds	r1, #1
}
   16afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   16b00:	2206      	movs	r2, #6
   16b02:	f008 b976 	b.w	1edf2 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   16b06:	4a0e      	ldr	r2, [pc, #56]	; (16b40 <ll_rl_id_addr_get+0x78>)
   16b08:	490e      	ldr	r1, [pc, #56]	; (16b44 <ll_rl_id_addr_get+0x7c>)
   16b0a:	480f      	ldr	r0, [pc, #60]	; (16b48 <ll_rl_id_addr_get+0x80>)
   16b0c:	23e7      	movs	r3, #231	; 0xe7
   16b0e:	f005 fe58 	bl	1c7c2 <printk>
   16b12:	4040      	eors	r0, r0
   16b14:	f380 8811 	msr	BASEPRI, r0
   16b18:	f04f 0003 	mov.w	r0, #3
   16b1c:	df02      	svc	2
   16b1e:	e7da      	b.n	16ad6 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   16b20:	4a07      	ldr	r2, [pc, #28]	; (16b40 <ll_rl_id_addr_get+0x78>)
   16b22:	490a      	ldr	r1, [pc, #40]	; (16b4c <ll_rl_id_addr_get+0x84>)
   16b24:	4808      	ldr	r0, [pc, #32]	; (16b48 <ll_rl_id_addr_get+0x80>)
   16b26:	23e8      	movs	r3, #232	; 0xe8
   16b28:	f005 fe4b 	bl	1c7c2 <printk>
   16b2c:	4040      	eors	r0, r0
   16b2e:	f380 8811 	msr	BASEPRI, r0
   16b32:	f04f 0003 	mov.w	r0, #3
   16b36:	df02      	svc	2
   16b38:	e7d5      	b.n	16ae6 <ll_rl_id_addr_get+0x1e>
   16b3a:	bf00      	nop
   16b3c:	20002460 	.word	0x20002460
   16b40:	00022ddc 	.word	0x00022ddc
   16b44:	00022e20 	.word	0x00022e20
   16b48:	00022678 	.word	0x00022678
   16b4c:	00022e2c 	.word	0x00022e2c

00016b50 <ll_rl_size_get>:
   16b50:	2008      	movs	r0, #8
   16b52:	4770      	bx	lr

00016b54 <ll_rl_clear>:
{
   16b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16b56:	2000      	movs	r0, #0
   16b58:	f7fc fbd6 	bl	13308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16b5c:	bb98      	cbnz	r0, 16bc6 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   16b5e:	4b1b      	ldr	r3, [pc, #108]	; (16bcc <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   16b60:	491b      	ldr	r1, [pc, #108]	; (16bd0 <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   16b62:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   16b66:	f893 c000 	ldrb.w	ip, [r3]
   16b6a:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   16b6e:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   16b72:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   16b76:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   16b7a:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   16b7c:	f360 0200 	bfi	r2, r0, #0, #1
   16b80:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   16b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   16b88:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   16b8c:	f360 0c00 	bfi	ip, r0, #0, #1
   16b90:	f360 0700 	bfi	r7, r0, #0, #1
   16b94:	f360 0600 	bfi	r6, r0, #0, #1
   16b98:	f360 0500 	bfi	r5, r0, #0, #1
   16b9c:	f360 0400 	bfi	r4, r0, #0, #1
   16ba0:	f360 0100 	bfi	r1, r0, #0, #1
   16ba4:	f360 0200 	bfi	r2, r0, #0, #1
   16ba8:	f883 c000 	strb.w	ip, [r3]
   16bac:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   16bb0:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   16bb4:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   16bb8:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   16bbc:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   16bc0:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   16bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16bc6:	200c      	movs	r0, #12
}
   16bc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16bca:	bf00      	nop
   16bcc:	20002460 	.word	0x20002460
   16bd0:	2000307e 	.word	0x2000307e

00016bd4 <ll_rl_enable>:
{
   16bd4:	b510      	push	{r4, lr}
   16bd6:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   16bd8:	2000      	movs	r0, #0
   16bda:	f7fc fb95 	bl	13308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   16bde:	b958      	cbnz	r0, 16bf8 <ll_rl_enable+0x24>
	switch (enable) {
   16be0:	b134      	cbz	r4, 16bf0 <ll_rl_enable+0x1c>
   16be2:	2c01      	cmp	r4, #1
   16be4:	d001      	beq.n	16bea <ll_rl_enable+0x16>
   16be6:	2012      	movs	r0, #18
}
   16be8:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   16bea:	4b04      	ldr	r3, [pc, #16]	; (16bfc <ll_rl_enable+0x28>)
   16bec:	701c      	strb	r4, [r3, #0]
}
   16bee:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   16bf0:	4b02      	ldr	r3, [pc, #8]	; (16bfc <ll_rl_enable+0x28>)
   16bf2:	701c      	strb	r4, [r3, #0]
	return 0;
   16bf4:	4620      	mov	r0, r4
}
   16bf6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16bf8:	200c      	movs	r0, #12
}
   16bfa:	bd10      	pop	{r4, pc}
   16bfc:	2000307f 	.word	0x2000307f

00016c00 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   16c00:	4a03      	ldr	r2, [pc, #12]	; (16c10 <ll_rl_timeout_set+0x10>)
   16c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   16c06:	fb03 f300 	mul.w	r3, r3, r0
   16c0a:	6013      	str	r3, [r2, #0]
}
   16c0c:	4770      	bx	lr
   16c0e:	bf00      	nop
   16c10:	200025d4 	.word	0x200025d4

00016c14 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   16c14:	b1b0      	cbz	r0, 16c44 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16c16:	4b0d      	ldr	r3, [pc, #52]	; (16c4c <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   16c18:	681a      	ldr	r2, [r3, #0]
{
   16c1a:	b510      	push	{r4, lr}
   16c1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16c20:	f240 30e7 	movw	r0, #999	; 0x3e7
   16c24:	2100      	movs	r1, #0
   16c26:	fbe3 0102 	umlal	r0, r1, r3, r2
   16c2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16c2e:	2300      	movs	r3, #0
   16c30:	f7e9 fa56 	bl	e0 <__aeabi_uldivmod>
}
   16c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16c38:	4602      	mov	r2, r0
   16c3a:	460b      	mov	r3, r1
   16c3c:	4804      	ldr	r0, [pc, #16]	; (16c50 <ull_filter_adv_scan_state_cb+0x3c>)
   16c3e:	4905      	ldr	r1, [pc, #20]	; (16c54 <ull_filter_adv_scan_state_cb+0x40>)
   16c40:	f005 b9c8 	b.w	1bfd4 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   16c44:	4803      	ldr	r0, [pc, #12]	; (16c54 <ull_filter_adv_scan_state_cb+0x40>)
   16c46:	f00a bbff 	b.w	21448 <k_delayed_work_cancel>
   16c4a:	bf00      	nop
   16c4c:	200025d4 	.word	0x200025d4
   16c50:	200012a8 	.word	0x200012a8
   16c54:	20001178 	.word	0x20001178

00016c58 <ull_filter_adv_update>:
{
   16c58:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   16c5a:	4b09      	ldr	r3, [pc, #36]	; (16c80 <ull_filter_adv_update+0x28>)
   16c5c:	2200      	movs	r2, #0
   16c5e:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   16c60:	b930      	cbnz	r0, 16c70 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   16c62:	4b08      	ldr	r3, [pc, #32]	; (16c84 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   16c64:	4a08      	ldr	r2, [pc, #32]	; (16c88 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   16c66:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   16c68:	2100      	movs	r1, #0
   16c6a:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   16c6c:	b91b      	cbnz	r3, 16c76 <ull_filter_adv_update+0x1e>
}
   16c6e:	bd08      	pop	{r3, pc}
		wl_update();
   16c70:	f7ff fe44 	bl	168fc <wl_update>
   16c74:	e7f5      	b.n	16c62 <ull_filter_adv_update+0xa>
}
   16c76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   16c7a:	f7ff be8d 	b.w	16998 <rl_update>
   16c7e:	bf00      	nop
   16c80:	20002618 	.word	0x20002618
   16c84:	2000307f 	.word	0x2000307f
   16c88:	200025a0 	.word	0x200025a0

00016c8c <ull_filter_adv_pdu_update>:
{
   16c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx = adv->lll.rl_idx;
   16c90:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16c94:	2f07      	cmp	r7, #7
{
   16c96:	4605      	mov	r5, r0
   16c98:	460c      	mov	r4, r1
   16c9a:	f101 0602 	add.w	r6, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   16c9e:	d845      	bhi.n	16d2c <ull_filter_adv_pdu_update+0xa0>
   16ca0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 16d94 <ull_filter_adv_pdu_update+0x108>
   16ca4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   16ca8:	ea4f 0987 	mov.w	r9, r7, lsl #2
   16cac:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   16cb0:	0719      	lsls	r1, r3, #28
   16cb2:	d529      	bpl.n	16d08 <ull_filter_adv_pdu_update+0x7c>
		LL_ASSERT(rl[idx].rpas_ready);
   16cb4:	079a      	lsls	r2, r3, #30
   16cb6:	d559      	bpl.n	16d6c <ull_filter_adv_pdu_update+0xe0>
		pdu->tx_addr = 1;
   16cb8:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16cba:	eb09 0307 	add.w	r3, r9, r7
   16cbe:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
		pdu->tx_addr = 1;
   16cc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16cc6:	6a59      	ldr	r1, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
   16cc8:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   16cca:	4630      	mov	r0, r6
   16ccc:	2206      	movs	r2, #6
   16cce:	f008 f890 	bl	1edf2 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16cd2:	7823      	ldrb	r3, [r4, #0]
   16cd4:	f003 030f 	and.w	r3, r3, #15
   16cd8:	2b01      	cmp	r3, #1
   16cda:	d125      	bne.n	16d28 <ull_filter_adv_pdu_update+0x9c>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   16cdc:	44b9      	add	r9, r7
   16cde:	f104 0008 	add.w	r0, r4, #8
   16ce2:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   16ce6:	075b      	lsls	r3, r3, #29
   16ce8:	d433      	bmi.n	16d52 <ull_filter_adv_pdu_update+0xc6>
			pdu->rx_addr = adv->id_addr_type;
   16cea:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
   16cee:	7822      	ldrb	r2, [r4, #0]
   16cf0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   16cf4:	f363 12c7 	bfi	r2, r3, #7, #1
   16cf8:	7022      	strb	r2, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16cfa:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   16cfe:	2206      	movs	r2, #6
}
   16d00:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16d04:	f008 b875 	b.w	1edf2 <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   16d08:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   16d0c:	7823      	ldrb	r3, [r4, #0]
   16d0e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16d12:	f360 1386 	bfi	r3, r0, #6, #1
   16d16:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   16d18:	4631      	mov	r1, r6
   16d1a:	f7f9 fa99 	bl	10250 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16d1e:	7823      	ldrb	r3, [r4, #0]
   16d20:	f003 030f 	and.w	r3, r3, #15
   16d24:	2b01      	cmp	r3, #1
   16d26:	d0d9      	beq.n	16cdc <ull_filter_adv_pdu_update+0x50>
}
   16d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   16d2c:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   16d30:	780b      	ldrb	r3, [r1, #0]
   16d32:	f3c0 0040 	ubfx	r0, r0, #1, #1
   16d36:	f360 1386 	bfi	r3, r0, #6, #1
   16d3a:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   16d3c:	4631      	mov	r1, r6
   16d3e:	f7f9 fa87 	bl	10250 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16d42:	7823      	ldrb	r3, [r4, #0]
   16d44:	f003 030f 	and.w	r3, r3, #15
   16d48:	2b01      	cmp	r3, #1
   16d4a:	d1ed      	bne.n	16d28 <ull_filter_adv_pdu_update+0x9c>
   16d4c:	f104 0008 	add.w	r0, r4, #8
   16d50:	e7cb      	b.n	16cea <ull_filter_adv_pdu_update+0x5e>
			pdu->rx_addr = 1;
   16d52:	7823      	ldrb	r3, [r4, #0]
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   16d54:	2128      	movs	r1, #40	; 0x28
			pdu->rx_addr = 1;
   16d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   16d5a:	fb01 8107 	mla	r1, r1, r7, r8
			pdu->rx_addr = 1;
   16d5e:	7023      	strb	r3, [r4, #0]
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16d60:	311e      	adds	r1, #30
}
   16d62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   16d66:	2206      	movs	r2, #6
   16d68:	f008 b843 	b.w	1edf2 <memcpy>
		LL_ASSERT(rl[idx].rpas_ready);
   16d6c:	4a06      	ldr	r2, [pc, #24]	; (16d88 <ull_filter_adv_pdu_update+0xfc>)
   16d6e:	4907      	ldr	r1, [pc, #28]	; (16d8c <ull_filter_adv_pdu_update+0x100>)
   16d70:	4807      	ldr	r0, [pc, #28]	; (16d90 <ull_filter_adv_pdu_update+0x104>)
   16d72:	f240 234a 	movw	r3, #586	; 0x24a
   16d76:	f005 fd24 	bl	1c7c2 <printk>
   16d7a:	4040      	eors	r0, r0
   16d7c:	f380 8811 	msr	BASEPRI, r0
   16d80:	f04f 0003 	mov.w	r0, #3
   16d84:	df02      	svc	2
   16d86:	e797      	b.n	16cb8 <ull_filter_adv_pdu_update+0x2c>
   16d88:	00022ddc 	.word	0x00022ddc
   16d8c:	00022e40 	.word	0x00022e40
   16d90:	00022678 	.word	0x00022678
   16d94:	20002460 	.word	0x20002460

00016d98 <ull_filter_rpa_update>:
{
   16d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d9c:	4682      	mov	sl, r0
   16d9e:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   16da0:	f00a fbab 	bl	214fa <z_impl_k_uptime_ticks>
   16da4:	014b      	lsls	r3, r1, #5
   16da6:	0142      	lsls	r2, r0, #5
   16da8:	ebb2 0800 	subs.w	r8, r2, r0
   16dac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   16db0:	eb63 0301 	sbc.w	r3, r3, r1
   16db4:	009b      	lsls	r3, r3, #2
   16db6:	ea4f 0288 	mov.w	r2, r8, lsl #2
   16dba:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   16dbe:	eb12 0800 	adds.w	r8, r2, r0
   16dc2:	eb43 0101 	adc.w	r1, r3, r1
   16dc6:	00c9      	lsls	r1, r1, #3
   16dc8:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   16dcc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   16dd0:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   16dd4:	0bce      	lsrs	r6, r1, #15
   16dd6:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   16dda:	9601      	str	r6, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   16ddc:	f1ba 0f00 	cmp.w	sl, #0
   16de0:	d117      	bne.n	16e12 <ull_filter_rpa_update+0x7a>
   16de2:	4b71      	ldr	r3, [pc, #452]	; (16fa8 <ull_filter_rpa_update+0x210>)
   16de4:	e9d3 0100 	ldrd	r0, r1, [r3]
   16de8:	1c4c      	adds	r4, r1, #1
   16dea:	bf08      	it	eq
   16dec:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   16df0:	d00f      	beq.n	16e12 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   16df2:	4b6e      	ldr	r3, [pc, #440]	; (16fac <ull_filter_rpa_update+0x214>)
   16df4:	681a      	ldr	r2, [r3, #0]
   16df6:	ebb8 0400 	subs.w	r4, r8, r0
   16dfa:	eb66 0501 	sbc.w	r5, r6, r1
   16dfe:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   16e00:	4294      	cmp	r4, r2
   16e02:	eb75 0303 	sbcs.w	r3, r5, r3
   16e06:	bfac      	ite	ge
   16e08:	f04f 0901 	movge.w	r9, #1
   16e0c:	f04f 0900 	movlt.w	r9, #0
   16e10:	e001      	b.n	16e16 <ull_filter_rpa_update+0x7e>
   16e12:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16e16:	4e66      	ldr	r6, [pc, #408]	; (16fb0 <ull_filter_rpa_update+0x218>)
				LL_ASSERT(!err);
   16e18:	f8df b1a8 	ldr.w	fp, [pc, #424]	; 16fc4 <ull_filter_rpa_update+0x22c>
   16e1c:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   16e20:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   16e22:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   16e26:	00a5      	lsls	r5, r4, #2
   16e28:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16e2c:	07da      	lsls	r2, r3, #31
   16e2e:	d515      	bpl.n	16e5c <ull_filter_rpa_update+0xc4>
   16e30:	f1b9 0f00 	cmp.w	r9, #0
   16e34:	d101      	bne.n	16e3a <ull_filter_rpa_update+0xa2>
   16e36:	0798      	lsls	r0, r3, #30
   16e38:	d410      	bmi.n	16e5c <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   16e3a:	192b      	adds	r3, r5, r4
   16e3c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16e40:	0759      	lsls	r1, r3, #29
   16e42:	d434      	bmi.n	16eae <ull_filter_rpa_update+0x116>
			if (rl[i].lirk) {
   16e44:	192b      	adds	r3, r5, r4
   16e46:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   16e4a:	071a      	lsls	r2, r3, #28
   16e4c:	d419      	bmi.n	16e82 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   16e4e:	4425      	add	r5, r4
   16e50:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   16e54:	f043 0302 	orr.w	r3, r3, #2
   16e58:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   16e5c:	3401      	adds	r4, #1
   16e5e:	2c08      	cmp	r4, #8
   16e60:	f106 0628 	add.w	r6, r6, #40	; 0x28
   16e64:	d1dd      	bne.n	16e22 <ull_filter_rpa_update+0x8a>
	if (all) {
   16e66:	f1b9 0f00 	cmp.w	r9, #0
   16e6a:	d004      	beq.n	16e76 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   16e6c:	4b4e      	ldr	r3, [pc, #312]	; (16fa8 <ull_filter_rpa_update+0x210>)
   16e6e:	9a01      	ldr	r2, [sp, #4]
   16e70:	f8c3 8000 	str.w	r8, [r3]
   16e74:	605a      	str	r2, [r3, #4]
	if (timeout) {
   16e76:	f1ba 0f00 	cmp.w	sl, #0
   16e7a:	d13c      	bne.n	16ef6 <ull_filter_rpa_update+0x15e>
}
   16e7c:	b007      	add	sp, #28
   16e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   16e82:	a902      	add	r1, sp, #8
   16e84:	f1a6 001d 	sub.w	r0, r6, #29
   16e88:	f008 f836 	bl	1eef8 <bt_rpa_create>
				LL_ASSERT(!err);
   16e8c:	2800      	cmp	r0, #0
   16e8e:	d170      	bne.n	16f72 <ull_filter_rpa_update+0x1da>
				rl[i].local_rpa = &rpa;
   16e90:	4a48      	ldr	r2, [pc, #288]	; (16fb4 <ull_filter_rpa_update+0x21c>)
   16e92:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   16e96:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   16e9a:	a902      	add	r1, sp, #8
   16e9c:	4618      	mov	r0, r3
   16e9e:	2206      	movs	r2, #6
   16ea0:	6031      	str	r1, [r6, #0]
   16ea2:	9300      	str	r3, [sp, #0]
   16ea4:	f007 ffa5 	bl	1edf2 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   16ea8:	9b00      	ldr	r3, [sp, #0]
   16eaa:	6033      	str	r3, [r6, #0]
   16eac:	e7cf      	b.n	16e4e <ull_filter_rpa_update+0xb6>
	psrc += length - 1;
   16eae:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   16eb2:	4a41      	ldr	r2, [pc, #260]	; (16fb8 <ull_filter_rpa_update+0x220>)
   16eb4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   16eb8:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   16eba:	f10d 0307 	add.w	r3, sp, #7
   16ebe:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   16ec2:	f812 1901 	ldrb.w	r1, [r2], #-1
   16ec6:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   16eca:	4283      	cmp	r3, r0
   16ecc:	d1f9      	bne.n	16ec2 <ull_filter_rpa_update+0x12a>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   16ece:	1fb1      	subs	r1, r6, #6
   16ed0:	a802      	add	r0, sp, #8
   16ed2:	f008 f811 	bl	1eef8 <bt_rpa_create>
				LL_ASSERT(!err);
   16ed6:	2800      	cmp	r0, #0
   16ed8:	d0b4      	beq.n	16e44 <ull_filter_rpa_update+0xac>
   16eda:	4938      	ldr	r1, [pc, #224]	; (16fbc <ull_filter_rpa_update+0x224>)
   16edc:	4838      	ldr	r0, [pc, #224]	; (16fc0 <ull_filter_rpa_update+0x228>)
   16ede:	f44f 7305 	mov.w	r3, #532	; 0x214
   16ee2:	465a      	mov	r2, fp
   16ee4:	f005 fc6d 	bl	1c7c2 <printk>
   16ee8:	4040      	eors	r0, r0
   16eea:	f380 8811 	msr	BASEPRI, r0
   16eee:	f04f 0003 	mov.w	r0, #3
   16ef2:	df02      	svc	2
   16ef4:	e7a6      	b.n	16e44 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   16ef6:	2000      	movs	r0, #0
   16ef8:	f7fc f9f8 	bl	132ec <ull_adv_is_enabled_get>
		if (adv) {
   16efc:	4604      	mov	r4, r0
   16efe:	2800      	cmp	r0, #0
   16f00:	d0bc      	beq.n	16e7c <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   16f02:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   16f06:	075b      	lsls	r3, r3, #29
   16f08:	d5b8      	bpl.n	16e7c <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   16f0a:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   16f0e:	2b07      	cmp	r3, #7
   16f10:	d8b4      	bhi.n	16e7c <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16f12:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
	if (pdu->first == pdu->last) {
   16f16:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
   16f1a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   16f1e:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16f22:	f102 0311 	add.w	r3, r2, #17
   16f26:	301c      	adds	r0, #28
	if (pdu->first == pdu->last) {
   16f28:	42a9      	cmp	r1, r5
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   16f2a:	eb00 0603 	add.w	r6, r0, r3
	if (pdu->first == pdu->last) {
   16f2e:	d02e      	beq.n	16f8e <ull_filter_rpa_update+0x1f6>
   16f30:	3202      	adds	r2, #2
	return (void *)pdu->pdu[last];
   16f32:	f104 012b 	add.w	r1, r4, #43	; 0x2b
		pdu->chan_sel = prev->chan_sel;
   16f36:	5cc3      	ldrb	r3, [r0, r3]
	pdu->type = prev->type;
   16f38:	5c88      	ldrb	r0, [r1, r2]
		pdu->chan_sel = prev->chan_sel;
   16f3a:	f3c3 1740 	ubfx	r7, r3, #5, #1
	pdu->type = prev->type;
   16f3e:	f3c3 0303 	ubfx	r3, r3, #0, #4
   16f42:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   16f46:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   16f4a:	4303      	orrs	r3, r0
   16f4c:	188f      	adds	r7, r1, r2
   16f4e:	548b      	strb	r3, [r1, r2]
	ull_filter_adv_pdu_update(adv, pdu);
   16f50:	4620      	mov	r0, r4
   16f52:	4639      	mov	r1, r7
   16f54:	f7ff fe9a 	bl	16c8c <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   16f58:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   16f5a:	f107 0008 	add.w	r0, r7, #8
   16f5e:	3a06      	subs	r2, #6
   16f60:	f106 0108 	add.w	r1, r6, #8
   16f64:	f007 ff45 	bl	1edf2 <memcpy>
	pdu->len = prev->len;
   16f68:	7873      	ldrb	r3, [r6, #1]
   16f6a:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   16f6c:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   16f70:	e784      	b.n	16e7c <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   16f72:	4912      	ldr	r1, [pc, #72]	; (16fbc <ull_filter_rpa_update+0x224>)
   16f74:	4812      	ldr	r0, [pc, #72]	; (16fc0 <ull_filter_rpa_update+0x228>)
   16f76:	f240 2321 	movw	r3, #545	; 0x221
   16f7a:	465a      	mov	r2, fp
   16f7c:	f005 fc21 	bl	1c7c2 <printk>
   16f80:	4040      	eors	r0, r0
   16f82:	f380 8811 	msr	BASEPRI, r0
   16f86:	f04f 0003 	mov.w	r0, #3
   16f8a:	df02      	svc	2
   16f8c:	e780      	b.n	16e90 <ull_filter_rpa_update+0xf8>
		last = pdu->last + 1;
   16f8e:	3501      	adds	r5, #1
   16f90:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   16f92:	2d02      	cmp	r5, #2
   16f94:	d004      	beq.n	16fa0 <ull_filter_rpa_update+0x208>
   16f96:	2127      	movs	r1, #39	; 0x27
   16f98:	2202      	movs	r2, #2
   16f9a:	fb11 2205 	smlabb	r2, r1, r5, r2
   16f9e:	e7c8      	b.n	16f32 <ull_filter_rpa_update+0x19a>
   16fa0:	462a      	mov	r2, r5
			last = 0U;
   16fa2:	2500      	movs	r5, #0
   16fa4:	e7c5      	b.n	16f32 <ull_filter_rpa_update+0x19a>
   16fa6:	bf00      	nop
   16fa8:	20001170 	.word	0x20001170
   16fac:	200025d4 	.word	0x200025d4
   16fb0:	20002484 	.word	0x20002484
   16fb4:	200023a8 	.word	0x200023a8
   16fb8:	200023e0 	.word	0x200023e0
   16fbc:	000228f4 	.word	0x000228f4
   16fc0:	00022678 	.word	0x00022678
   16fc4:	00022ddc 	.word	0x00022ddc

00016fc8 <rpa_timeout>:
{
   16fc8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   16fca:	2001      	movs	r0, #1
   16fcc:	f7ff fee4 	bl	16d98 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   16fd0:	4b0a      	ldr	r3, [pc, #40]	; (16ffc <rpa_timeout+0x34>)
   16fd2:	681a      	ldr	r2, [r3, #0]
   16fd4:	f240 30e7 	movw	r0, #999	; 0x3e7
   16fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16fdc:	2100      	movs	r1, #0
   16fde:	fbe3 0102 	umlal	r0, r1, r3, r2
   16fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16fe6:	2300      	movs	r3, #0
   16fe8:	f7e9 f87a 	bl	e0 <__aeabi_uldivmod>
}
   16fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16ff0:	4602      	mov	r2, r0
   16ff2:	460b      	mov	r3, r1
   16ff4:	4802      	ldr	r0, [pc, #8]	; (17000 <rpa_timeout+0x38>)
   16ff6:	4903      	ldr	r1, [pc, #12]	; (17004 <rpa_timeout+0x3c>)
   16ff8:	f004 bfec 	b.w	1bfd4 <k_delayed_work_submit_to_queue>
   16ffc:	200025d4 	.word	0x200025d4
   17000:	200012a8 	.word	0x200012a8
   17004:	20001178 	.word	0x20001178

00017008 <ull_filter_rl_find>:
{
   17008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1700c:	468b      	mov	fp, r1
	if (free) {
   1700e:	4616      	mov	r6, r2
   17010:	b10a      	cbz	r2, 17016 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   17012:	23ff      	movs	r3, #255	; 0xff
   17014:	7013      	strb	r3, [r2, #0]
   17016:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1707c <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1701a:	f000 0901 	and.w	r9, r0, #1
   1701e:	f108 0a01 	add.w	sl, r8, #1
{
   17022:	2400      	movs	r4, #0
   17024:	e004      	b.n	17030 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   17026:	454a      	cmp	r2, r9
   17028:	d019      	beq.n	1705e <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1702a:	3401      	adds	r4, #1
   1702c:	2c08      	cmp	r4, #8
   1702e:	d012      	beq.n	17056 <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   17030:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   17034:	00e8      	lsls	r0, r5, #3
   17036:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1703a:	07d9      	lsls	r1, r3, #31
   1703c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   17040:	b2e7      	uxtb	r7, r4
   17042:	d4f0      	bmi.n	17026 <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   17044:	2e00      	cmp	r6, #0
   17046:	d0f0      	beq.n	1702a <ull_filter_rl_find+0x22>
   17048:	7833      	ldrb	r3, [r6, #0]
   1704a:	3401      	adds	r4, #1
   1704c:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1704e:	bf08      	it	eq
   17050:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   17052:	2c08      	cmp	r4, #8
   17054:	d1ec      	bne.n	17030 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   17056:	27ff      	movs	r7, #255	; 0xff
}
   17058:	4638      	mov	r0, r7
   1705a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1705e:	4450      	add	r0, sl
   17060:	2206      	movs	r2, #6
   17062:	4659      	mov	r1, fp
   17064:	f007 feb5 	bl	1edd2 <memcmp>
   17068:	2800      	cmp	r0, #0
   1706a:	d0f5      	beq.n	17058 <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1706c:	2e00      	cmp	r6, #0
   1706e:	d0dc      	beq.n	1702a <ull_filter_rl_find+0x22>
   17070:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   17074:	07db      	lsls	r3, r3, #31
   17076:	d4d8      	bmi.n	1702a <ull_filter_rl_find+0x22>
   17078:	e7e6      	b.n	17048 <ull_filter_rl_find+0x40>
   1707a:	bf00      	nop
   1707c:	20002460 	.word	0x20002460

00017080 <ll_wl_add>:
{
   17080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17084:	4605      	mov	r5, r0
   17086:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   17088:	2000      	movs	r0, #0
   1708a:	f7fc f949 	bl	13320 <ull_adv_filter_pol_get>
   1708e:	2800      	cmp	r0, #0
   17090:	d13b      	bne.n	1710a <ll_wl_add+0x8a>
   17092:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   17094:	7828      	ldrb	r0, [r5, #0]
   17096:	28ff      	cmp	r0, #255	; 0xff
   17098:	d030      	beq.n	170fc <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   1709a:	f105 0801 	add.w	r8, r5, #1
   1709e:	4641      	mov	r1, r8
   170a0:	f10d 0207 	add.w	r2, sp, #7
   170a4:	f7ff fbf2 	bl	1688c <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   170a8:	2807      	cmp	r0, #7
   170aa:	d923      	bls.n	170f4 <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   170ac:	f89d 6007 	ldrb.w	r6, [sp, #7]
   170b0:	2e07      	cmp	r6, #7
   170b2:	d83b      	bhi.n	1712c <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   170b4:	4f1f      	ldr	r7, [pc, #124]	; (17134 <ll_wl_add+0xb4>)
   170b6:	782a      	ldrb	r2, [r5, #0]
   170b8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   170bc:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   170c0:	f362 0341 	bfi	r3, r2, #1, #1
   170c4:	4641      	mov	r1, r8
   170c6:	2206      	movs	r2, #6
   170c8:	3002      	adds	r0, #2
   170ca:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   170ce:	f007 fe90 	bl	1edf2 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   170d2:	7828      	ldrb	r0, [r5, #0]
   170d4:	4622      	mov	r2, r4
   170d6:	4641      	mov	r1, r8
   170d8:	f7ff ff96 	bl	17008 <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   170dc:	2807      	cmp	r0, #7
   170de:	d918      	bls.n	17112 <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   170e0:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   170e4:	22ff      	movs	r2, #255	; 0xff
   170e6:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   170e8:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   170ec:	f043 0301 	orr.w	r3, r3, #1
   170f0:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   170f4:	2000      	movs	r0, #0
}
   170f6:	b002      	add	sp, #8
   170f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   170fc:	4b0e      	ldr	r3, [pc, #56]	; (17138 <ll_wl_add+0xb8>)
   170fe:	2201      	movs	r2, #1
		return 0;
   17100:	4620      	mov	r0, r4
		wl_anon = 1U;
   17102:	701a      	strb	r2, [r3, #0]
}
   17104:	b002      	add	sp, #8
   17106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1710a:	200c      	movs	r0, #12
}
   1710c:	b002      	add	sp, #8
   1710e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   17112:	490a      	ldr	r1, [pc, #40]	; (1713c <ll_wl_add+0xbc>)
   17114:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   17118:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   1711c:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   17120:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   17122:	f043 0320 	orr.w	r3, r3, #32
   17126:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   1712a:	e7dd      	b.n	170e8 <ll_wl_add+0x68>
   1712c:	2007      	movs	r0, #7
}
   1712e:	b002      	add	sp, #8
   17130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17134:	200025d8 	.word	0x200025d8
   17138:	20003080 	.word	0x20003080
   1713c:	20002460 	.word	0x20002460

00017140 <ll_rl_add>:
{
   17140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17144:	4606      	mov	r6, r0
   17146:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17148:	2000      	movs	r0, #0
{
   1714a:	460d      	mov	r5, r1
   1714c:	4690      	mov	r8, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1714e:	f7fc f8db 	bl	13308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   17152:	2800      	cmp	r0, #0
   17154:	f040 8085 	bne.w	17262 <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   17158:	46b1      	mov	r9, r6
   1715a:	f10d 020f 	add.w	r2, sp, #15
   1715e:	f819 0b01 	ldrb.w	r0, [r9], #1
   17162:	4649      	mov	r1, r9
   17164:	f7ff ff50 	bl	17008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   17168:	2807      	cmp	r0, #7
   1716a:	f240 808b 	bls.w	17284 <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   1716e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   17172:	2f07      	cmp	r7, #7
   17174:	d879      	bhi.n	1726a <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   17176:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   1717a:	4c4c      	ldr	r4, [pc, #304]	; (172ac <ll_rl_add+0x16c>)
   1717c:	00db      	lsls	r3, r3, #3
   1717e:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   17180:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   17184:	2206      	movs	r2, #6
   17186:	4649      	mov	r1, r9
   17188:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1718a:	9301      	str	r3, [sp, #4]
   1718c:	f007 fe31 	bl	1edf2 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   17190:	7831      	ldrb	r1, [r6, #0]
   17192:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   17196:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   1719a:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1719e:	4628      	mov	r0, r5
   171a0:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   171a2:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   171a6:	f7f7 fcd5 	bl	eb54 <mem_nz>
   171aa:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   171ae:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   171b0:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   171b4:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   171b6:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   171ba:	f7f7 fccb 	bl	eb54 <mem_nz>
   171be:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   171c2:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   171c4:	f000 0001 	and.w	r0, r0, #1
   171c8:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   171cc:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   171d0:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   171d4:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   171d8:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   171dc:	d01a      	beq.n	17214 <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   171de:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 172b8 <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   171e2:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 172bc <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   171e6:	f89e 1000 	ldrb.w	r1, [lr]
   171ea:	4a31      	ldr	r2, [pc, #196]	; (172b0 <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   171ec:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   171f0:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   171f4:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   171f8:	3101      	adds	r1, #1
	psrc += length - 1;
   171fa:	f105 020f 	add.w	r2, r5, #15
   171fe:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   17202:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   17206:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   17208:	f812 1901 	ldrb.w	r1, [r2], #-1
   1720c:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   17210:	42aa      	cmp	r2, r5
   17212:	d1f9      	bne.n	17208 <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   17214:	2800      	cmp	r0, #0
   17216:	d139      	bne.n	1728c <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   17218:	f103 0018 	add.w	r0, r3, #24
   1721c:	2206      	movs	r2, #6
   1721e:	2100      	movs	r1, #0
   17220:	4420      	add	r0, r4
   17222:	f007 fe11 	bl	1ee48 <memset>
	rl[i].dev = 0U;
   17226:	eb0b 0307 	add.w	r3, fp, r7
   1722a:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   1722c:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   17230:	f023 0312 	bic.w	r3, r3, #18
   17234:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   17236:	4649      	mov	r1, r9
   17238:	7830      	ldrb	r0, [r6, #0]
   1723a:	2200      	movs	r2, #0
   1723c:	f7ff fb26 	bl	1688c <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   17240:	2807      	cmp	r0, #7
   17242:	d916      	bls.n	17272 <ll_rl_add+0x132>
		rl[i].wl = 0U;
   17244:	5d63      	ldrb	r3, [r4, r5]
   17246:	f36f 1345 	bfc	r3, #5, #1
   1724a:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   1724c:	445f      	add	r7, fp
	return 0;
   1724e:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   17250:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   17254:	f043 0301 	orr.w	r3, r3, #1
   17258:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   1725c:	b005      	add	sp, #20
   1725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17262:	200c      	movs	r0, #12
}
   17264:	b005      	add	sp, #20
   17266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1726a:	2007      	movs	r0, #7
}
   1726c:	b005      	add	sp, #20
   1726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   17272:	4a10      	ldr	r2, [pc, #64]	; (172b4 <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   17274:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   17276:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   1727a:	f043 0320 	orr.w	r3, r3, #32
   1727e:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   17280:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   17282:	e7e3      	b.n	1724c <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   17284:	2012      	movs	r0, #18
}
   17286:	b005      	add	sp, #20
   17288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1728c:	1dd8      	adds	r0, r3, #7
   1728e:	4641      	mov	r1, r8
   17290:	2210      	movs	r2, #16
   17292:	4420      	add	r0, r4
   17294:	9301      	str	r3, [sp, #4]
   17296:	f007 fdac 	bl	1edf2 <memcpy>
		rl[i].local_rpa = NULL;
   1729a:	eb0b 0207 	add.w	r2, fp, r7
   1729e:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   172a2:	2100      	movs	r1, #0
   172a4:	9b01      	ldr	r3, [sp, #4]
   172a6:	6251      	str	r1, [r2, #36]	; 0x24
   172a8:	e7b6      	b.n	17218 <ll_rl_add+0xd8>
   172aa:	bf00      	nop
   172ac:	20002460 	.word	0x20002460
   172b0:	200023e0 	.word	0x200023e0
   172b4:	200025d8 	.word	0x200025d8
   172b8:	2000307e 	.word	0x2000307e
   172bc:	200023d8 	.word	0x200023d8

000172c0 <ll_rl_remove>:
{
   172c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172c4:	4606      	mov	r6, r0
   172c6:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   172c8:	2000      	movs	r0, #0
   172ca:	f7fc f81d 	bl	13308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   172ce:	2800      	cmp	r0, #0
   172d0:	d13e      	bne.n	17350 <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   172d2:	4637      	mov	r7, r6
   172d4:	4602      	mov	r2, r0
   172d6:	4604      	mov	r4, r0
   172d8:	f817 0b01 	ldrb.w	r0, [r7], #1
   172dc:	4639      	mov	r1, r7
   172de:	f7ff fe93 	bl	17008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   172e2:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   172e4:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   172e6:	d903      	bls.n	172f0 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   172e8:	2002      	movs	r0, #2
}
   172ea:	b003      	add	sp, #12
   172ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   172f0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 173b8 <ll_rl_remove+0xf8>
   172f4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   172f8:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   172fc:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   17300:	075b      	lsls	r3, r3, #29
   17302:	ea4f 0980 	mov.w	r9, r0, lsl #2
   17306:	d50c      	bpl.n	17322 <ll_rl_remove+0x62>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   17308:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 173bc <ll_rl_remove+0xfc>
   1730c:	f89a 2000 	ldrb.w	r2, [sl]
   17310:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   17312:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   17316:	d01f      	beq.n	17358 <ll_rl_remove+0x98>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   17318:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   1731a:	455b      	cmp	r3, fp
   1731c:	d11e      	bne.n	1735c <ll_rl_remove+0x9c>
			peer_irk_count--;
   1731e:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   17322:	7830      	ldrb	r0, [r6, #0]
   17324:	4639      	mov	r1, r7
   17326:	2200      	movs	r2, #0
   17328:	f7ff fab0 	bl	1688c <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1732c:	2807      	cmp	r0, #7
   1732e:	d804      	bhi.n	1733a <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   17330:	4b1e      	ldr	r3, [pc, #120]	; (173ac <ll_rl_remove+0xec>)
   17332:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   17336:	23ff      	movs	r3, #255	; 0xff
   17338:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   1733a:	444d      	add	r5, r9
		return 0;
   1733c:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   1733e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   17342:	f36f 0300 	bfc	r3, #0, #1
   17346:	f808 3035 	strb.w	r3, [r8, r5, lsl #3]
}
   1734a:	b003      	add	sp, #12
   1734c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   17350:	200c      	movs	r0, #12
}
   17352:	b003      	add	sp, #12
   17354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17358:	465a      	mov	r2, fp
   1735a:	e7e0      	b.n	1731e <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   1735c:	4814      	ldr	r0, [pc, #80]	; (173b0 <ll_rl_remove+0xf0>)
   1735e:	9301      	str	r3, [sp, #4]
   17360:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   17364:	2210      	movs	r2, #16
   17366:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   1736a:	f007 fd42 	bl	1edf2 <memcpy>
   1736e:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   17370:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   17374:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   17378:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   1737c:	f012 0f01 	tst.w	r2, #1
   17380:	b2e0      	uxtb	r0, r4
   17382:	f104 0401 	add.w	r4, r4, #1
   17386:	d004      	beq.n	17392 <ll_rl_remove+0xd2>
   17388:	0752      	lsls	r2, r2, #29
   1738a:	d502      	bpl.n	17392 <ll_rl_remove+0xd2>
   1738c:	7dca      	ldrb	r2, [r1, #23]
   1738e:	455a      	cmp	r2, fp
   17390:	d005      	beq.n	1739e <ll_rl_remove+0xde>
				for (k = 0U;
   17392:	2c08      	cmp	r4, #8
   17394:	d1ec      	bne.n	17370 <ll_rl_remove+0xb0>
   17396:	f89a 2000 	ldrb.w	r2, [sl]
   1739a:	3a01      	subs	r2, #1
   1739c:	e7bf      	b.n	1731e <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   1739e:	4c05      	ldr	r4, [pc, #20]	; (173b4 <ll_rl_remove+0xf4>)
   173a0:	f89a 2000 	ldrb.w	r2, [sl]
   173a4:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   173a6:	75cb      	strb	r3, [r1, #23]
						break;
   173a8:	3a01      	subs	r2, #1
   173aa:	e7b8      	b.n	1731e <ll_rl_remove+0x5e>
   173ac:	200025d8 	.word	0x200025d8
   173b0:	200023e0 	.word	0x200023e0
   173b4:	200023d8 	.word	0x200023d8
   173b8:	20002460 	.word	0x20002460
   173bc:	2000307e 	.word	0x2000307e

000173c0 <ll_rl_crpa_set>:
{
   173c0:	b538      	push	{r3, r4, r5, lr}
   173c2:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   173c4:	795b      	ldrb	r3, [r3, #5]
   173c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   173ca:	2b40      	cmp	r3, #64	; 0x40
   173cc:	d000      	beq.n	173d0 <ll_rl_crpa_set+0x10>
}
   173ce:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   173d0:	b119      	cbz	r1, 173da <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   173d2:	2200      	movs	r2, #0
   173d4:	f7ff fe18 	bl	17008 <ull_filter_rl_find>
   173d8:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   173da:	2a07      	cmp	r2, #7
   173dc:	d8f7      	bhi.n	173ce <ll_rl_crpa_set+0xe>
   173de:	4b09      	ldr	r3, [pc, #36]	; (17404 <ll_rl_crpa_set+0x44>)
   173e0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   173e4:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   173e8:	07c9      	lsls	r1, r1, #31
   173ea:	d5f0      	bpl.n	173ce <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   173ec:	2118      	movs	r1, #24
   173ee:	2028      	movs	r0, #40	; 0x28
   173f0:	fb10 1002 	smlabb	r0, r0, r2, r1
   173f4:	4418      	add	r0, r3
   173f6:	4621      	mov	r1, r4
   173f8:	2206      	movs	r2, #6
}
   173fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   173fe:	f007 bcf8 	b.w	1edf2 <memcpy>
   17402:	bf00      	nop
   17404:	20002460 	.word	0x20002460

00017408 <ll_rl_crpa_get>:
{
   17408:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1740a:	4603      	mov	r3, r0
{
   1740c:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1740e:	f813 0b01 	ldrb.w	r0, [r3], #1
   17412:	2200      	movs	r2, #0
   17414:	4619      	mov	r1, r3
   17416:	f7ff fdf7 	bl	17008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1741a:	2807      	cmp	r0, #7
   1741c:	d901      	bls.n	17422 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1741e:	2002      	movs	r0, #2
}
   17420:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   17422:	4c09      	ldr	r4, [pc, #36]	; (17448 <ll_rl_crpa_get+0x40>)
   17424:	2328      	movs	r3, #40	; 0x28
   17426:	2218      	movs	r2, #24
   17428:	fb13 2000 	smlabb	r0, r3, r0, r2
   1742c:	4404      	add	r4, r0
   1742e:	4620      	mov	r0, r4
   17430:	2106      	movs	r1, #6
   17432:	f7f7 fb8f 	bl	eb54 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   17436:	2800      	cmp	r0, #0
   17438:	d0f1      	beq.n	1741e <ll_rl_crpa_get+0x16>
   1743a:	4621      	mov	r1, r4
   1743c:	4628      	mov	r0, r5
   1743e:	2206      	movs	r2, #6
   17440:	f007 fcd7 	bl	1edf2 <memcpy>
		return 0;
   17444:	2000      	movs	r0, #0
}
   17446:	bd38      	pop	{r3, r4, r5, pc}
   17448:	20002460 	.word	0x20002460

0001744c <ll_rl_lrpa_get>:
{
   1744c:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1744e:	4603      	mov	r3, r0
{
   17450:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17452:	f813 0b01 	ldrb.w	r0, [r3], #1
   17456:	2200      	movs	r2, #0
   17458:	4619      	mov	r1, r3
   1745a:	f7ff fdd5 	bl	17008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1745e:	2807      	cmp	r0, #7
   17460:	d901      	bls.n	17466 <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   17462:	2002      	movs	r0, #2
}
   17464:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   17466:	4b06      	ldr	r3, [pc, #24]	; (17480 <ll_rl_lrpa_get+0x34>)
   17468:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1746c:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   17470:	2206      	movs	r2, #6
   17472:	6a59      	ldr	r1, [r3, #36]	; 0x24
   17474:	4620      	mov	r0, r4
   17476:	f007 fcbc 	bl	1edf2 <memcpy>
		return 0;
   1747a:	2000      	movs	r0, #0
}
   1747c:	bd10      	pop	{r4, pc}
   1747e:	bf00      	nop
   17480:	20002460 	.word	0x20002460

00017484 <ll_priv_mode_set>:
{
   17484:	b570      	push	{r4, r5, r6, lr}
   17486:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   17488:	2000      	movs	r0, #0
{
   1748a:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1748c:	f7fb ff3c 	bl	13308 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   17490:	b968      	cbnz	r0, 174ae <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   17492:	4629      	mov	r1, r5
   17494:	4602      	mov	r2, r0
   17496:	4604      	mov	r4, r0
   17498:	f811 0b01 	ldrb.w	r0, [r1], #1
   1749c:	f7ff fdb4 	bl	17008 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   174a0:	2807      	cmp	r0, #7
   174a2:	d81c      	bhi.n	174de <ll_priv_mode_set+0x5a>
		switch (mode) {
   174a4:	b186      	cbz	r6, 174c8 <ll_priv_mode_set+0x44>
   174a6:	2e01      	cmp	r6, #1
   174a8:	d003      	beq.n	174b2 <ll_priv_mode_set+0x2e>
   174aa:	2012      	movs	r0, #18
}
   174ac:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   174ae:	200c      	movs	r0, #12
}
   174b0:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   174b2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   174b6:	490b      	ldr	r1, [pc, #44]	; (174e4 <ll_priv_mode_set+0x60>)
   174b8:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   174bc:	f042 0210 	orr.w	r2, r2, #16
   174c0:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   174c4:	4620      	mov	r0, r4
}
   174c6:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   174c8:	4b06      	ldr	r3, [pc, #24]	; (174e4 <ll_priv_mode_set+0x60>)
   174ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   174ce:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   174d2:	f366 1204 	bfi	r2, r6, #4, #1
   174d6:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   174da:	4630      	mov	r0, r6
}
   174dc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   174de:	2002      	movs	r0, #2
}
   174e0:	bd70      	pop	{r4, r5, r6, pc}
   174e2:	bf00      	nop
   174e4:	20002460 	.word	0x20002460

000174e8 <ull_filter_reset>:
	wl_anon = 0U;
   174e8:	4a31      	ldr	r2, [pc, #196]	; (175b0 <ull_filter_reset+0xc8>)
   174ea:	4932      	ldr	r1, [pc, #200]	; (175b4 <ull_filter_reset+0xcc>)
{
   174ec:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   174ee:	2300      	movs	r3, #0
   174f0:	4c31      	ldr	r4, [pc, #196]	; (175b8 <ull_filter_reset+0xd0>)
   174f2:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   174f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   174f8:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   174fa:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   174fc:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   17500:	d805      	bhi.n	1750e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   17502:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   17506:	f36f 1245 	bfc	r2, #5, #1
   1750a:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   1750e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   17512:	f36f 0200 	bfc	r2, #0, #1
   17516:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1751a:	3301      	adds	r3, #1
   1751c:	2b08      	cmp	r3, #8
   1751e:	d1e9      	bne.n	174f4 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   17520:	780f      	ldrb	r7, [r1, #0]
   17522:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   17526:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   1752a:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   1752e:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   17532:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   17534:	f363 0700 	bfi	r7, r3, #0, #1
   17538:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   1753a:	4f20      	ldr	r7, [pc, #128]	; (175bc <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   1753c:	f363 0500 	bfi	r5, r3, #0, #1
   17540:	f363 0400 	bfi	r4, r3, #0, #1
   17544:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   17548:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   1754a:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   1754e:	4f1c      	ldr	r7, [pc, #112]	; (175c0 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   17550:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   17554:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   17558:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   1755c:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   17560:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   17564:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   17566:	f363 0600 	bfi	r6, r3, #0, #1
   1756a:	f363 0500 	bfi	r5, r3, #0, #1
   1756e:	f363 0400 	bfi	r4, r3, #0, #1
   17572:	f363 0200 	bfi	r2, r3, #0, #1
   17576:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   1757a:	4b12      	ldr	r3, [pc, #72]	; (175c4 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1757c:	4e12      	ldr	r6, [pc, #72]	; (175c8 <ull_filter_reset+0xe0>)
   1757e:	4f13      	ldr	r7, [pc, #76]	; (175cc <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   17580:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   17584:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   17588:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1758c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   17590:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   17594:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   17598:	6037      	str	r7, [r6, #0]
	if (init) {
   1759a:	b120      	cbz	r0, 175a6 <ull_filter_reset+0xbe>
}
   1759c:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1759e:	490c      	ldr	r1, [pc, #48]	; (175d0 <ull_filter_reset+0xe8>)
   175a0:	480c      	ldr	r0, [pc, #48]	; (175d4 <ull_filter_reset+0xec>)
   175a2:	f009 bf49 	b.w	21438 <k_delayed_work_init>
}
   175a6:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   175a8:	480a      	ldr	r0, [pc, #40]	; (175d4 <ull_filter_reset+0xec>)
   175aa:	f009 bf4d 	b.w	21448 <k_delayed_work_cancel>
   175ae:	bf00      	nop
   175b0:	20003080 	.word	0x20003080
   175b4:	20002460 	.word	0x20002460
   175b8:	200025d8 	.word	0x200025d8
   175bc:	2000307f 	.word	0x2000307f
   175c0:	2000307e 	.word	0x2000307e
   175c4:	20001170 	.word	0x20001170
   175c8:	200025d4 	.word	0x200025d4
   175cc:	000dbba0 	.word	0x000dbba0
   175d0:	00016fc9 	.word	0x00016fc9
   175d4:	20001178 	.word	0x20001178

000175d8 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   175d8:	2807      	cmp	r0, #7
   175da:	d807      	bhi.n	175ec <ull_filter_lll_lrpa_used+0x14>
   175dc:	4b04      	ldr	r3, [pc, #16]	; (175f0 <ull_filter_lll_lrpa_used+0x18>)
   175de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   175e2:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   175e6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   175ea:	4770      	bx	lr
   175ec:	2000      	movs	r0, #0
}
   175ee:	4770      	bx	lr
   175f0:	20002460 	.word	0x20002460

000175f4 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   175f4:	4b02      	ldr	r3, [pc, #8]	; (17600 <ull_filter_lll_irks_get+0xc>)
   175f6:	781b      	ldrb	r3, [r3, #0]
   175f8:	7003      	strb	r3, [r0, #0]
}
   175fa:	4802      	ldr	r0, [pc, #8]	; (17604 <ull_filter_lll_irks_get+0x10>)
   175fc:	4770      	bx	lr
   175fe:	bf00      	nop
   17600:	2000307e 	.word	0x2000307e
   17604:	200023e0 	.word	0x200023e0

00017608 <ull_filter_lll_rl_irk_idx>:
{
   17608:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1760a:	4b20      	ldr	r3, [pc, #128]	; (1768c <ull_filter_lll_rl_irk_idx+0x84>)
   1760c:	781b      	ldrb	r3, [r3, #0]
   1760e:	4283      	cmp	r3, r0
{
   17610:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   17612:	d90c      	bls.n	1762e <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   17614:	4b1e      	ldr	r3, [pc, #120]	; (17690 <ull_filter_lll_rl_irk_idx+0x88>)
   17616:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   17618:	2c07      	cmp	r4, #7
   1761a:	d819      	bhi.n	17650 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1761c:	4b1d      	ldr	r3, [pc, #116]	; (17694 <ull_filter_lll_rl_irk_idx+0x8c>)
   1761e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   17622:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   17626:	07db      	lsls	r3, r3, #31
   17628:	d520      	bpl.n	1766c <ull_filter_lll_rl_irk_idx+0x64>
}
   1762a:	4620      	mov	r0, r4
   1762c:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1762e:	4a1a      	ldr	r2, [pc, #104]	; (17698 <ull_filter_lll_rl_irk_idx+0x90>)
   17630:	491a      	ldr	r1, [pc, #104]	; (1769c <ull_filter_lll_rl_irk_idx+0x94>)
   17632:	481b      	ldr	r0, [pc, #108]	; (176a0 <ull_filter_lll_rl_irk_idx+0x98>)
   17634:	f240 23c5 	movw	r3, #709	; 0x2c5
   17638:	f005 f8c3 	bl	1c7c2 <printk>
   1763c:	4040      	eors	r0, r0
   1763e:	f380 8811 	msr	BASEPRI, r0
   17642:	f04f 0003 	mov.w	r0, #3
   17646:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   17648:	4b11      	ldr	r3, [pc, #68]	; (17690 <ull_filter_lll_rl_irk_idx+0x88>)
   1764a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1764c:	2c07      	cmp	r4, #7
   1764e:	d9e5      	bls.n	1761c <ull_filter_lll_rl_irk_idx+0x14>
   17650:	4a11      	ldr	r2, [pc, #68]	; (17698 <ull_filter_lll_rl_irk_idx+0x90>)
   17652:	4914      	ldr	r1, [pc, #80]	; (176a4 <ull_filter_lll_rl_irk_idx+0x9c>)
   17654:	4812      	ldr	r0, [pc, #72]	; (176a0 <ull_filter_lll_rl_irk_idx+0x98>)
   17656:	f240 23c7 	movw	r3, #711	; 0x2c7
   1765a:	f005 f8b2 	bl	1c7c2 <printk>
   1765e:	4040      	eors	r0, r0
   17660:	f380 8811 	msr	BASEPRI, r0
   17664:	f04f 0003 	mov.w	r0, #3
   17668:	df02      	svc	2
   1766a:	e7d7      	b.n	1761c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1766c:	4a0a      	ldr	r2, [pc, #40]	; (17698 <ull_filter_lll_rl_irk_idx+0x90>)
   1766e:	490e      	ldr	r1, [pc, #56]	; (176a8 <ull_filter_lll_rl_irk_idx+0xa0>)
   17670:	480b      	ldr	r0, [pc, #44]	; (176a0 <ull_filter_lll_rl_irk_idx+0x98>)
   17672:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   17676:	f005 f8a4 	bl	1c7c2 <printk>
   1767a:	4040      	eors	r0, r0
   1767c:	f380 8811 	msr	BASEPRI, r0
   17680:	f04f 0003 	mov.w	r0, #3
   17684:	df02      	svc	2
}
   17686:	4620      	mov	r0, r4
   17688:	bd10      	pop	{r4, pc}
   1768a:	bf00      	nop
   1768c:	2000307e 	.word	0x2000307e
   17690:	200023d8 	.word	0x200023d8
   17694:	20002460 	.word	0x20002460
   17698:	00022ddc 	.word	0x00022ddc
   1769c:	00022fc0 	.word	0x00022fc0
   176a0:	00022678 	.word	0x00022678
   176a4:	00022fe0 	.word	0x00022fe0
   176a8:	00022fb4 	.word	0x00022fb4

000176ac <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   176ac:	2807      	cmp	r0, #7
   176ae:	d823      	bhi.n	176f8 <ull_filter_lll_irk_whitelisted+0x4c>
{
   176b0:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   176b2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   176b6:	4e11      	ldr	r6, [pc, #68]	; (176fc <ull_filter_lll_irk_whitelisted+0x50>)
   176b8:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   176bc:	07db      	lsls	r3, r3, #31
   176be:	4604      	mov	r4, r0
   176c0:	ea4f 0580 	mov.w	r5, r0, lsl #2
   176c4:	d505      	bpl.n	176d2 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   176c6:	442c      	add	r4, r5
   176c8:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   176cc:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   176d0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   176d2:	4a0b      	ldr	r2, [pc, #44]	; (17700 <ull_filter_lll_irk_whitelisted+0x54>)
   176d4:	490b      	ldr	r1, [pc, #44]	; (17704 <ull_filter_lll_irk_whitelisted+0x58>)
   176d6:	480c      	ldr	r0, [pc, #48]	; (17708 <ull_filter_lll_irk_whitelisted+0x5c>)
   176d8:	f240 23d3 	movw	r3, #723	; 0x2d3
   176dc:	f005 f871 	bl	1c7c2 <printk>
   176e0:	4040      	eors	r0, r0
   176e2:	f380 8811 	msr	BASEPRI, r0
   176e6:	f04f 0003 	mov.w	r0, #3
   176ea:	df02      	svc	2
	return rl[rl_idx].wl;
   176ec:	442c      	add	r4, r5
   176ee:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   176f2:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   176f6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   176f8:	2000      	movs	r0, #0
}
   176fa:	4770      	bx	lr
   176fc:	20002460 	.word	0x20002460
   17700:	00022ddc 	.word	0x00022ddc
   17704:	00022e2c 	.word	0x00022e2c
   17708:	00022678 	.word	0x00022678

0001770c <ull_filter_lll_get>:
		return &wl_filter;
   1770c:	4a03      	ldr	r2, [pc, #12]	; (1771c <ull_filter_lll_get+0x10>)
   1770e:	4b04      	ldr	r3, [pc, #16]	; (17720 <ull_filter_lll_get+0x14>)
}
   17710:	2800      	cmp	r0, #0
   17712:	bf0c      	ite	eq
   17714:	4610      	moveq	r0, r2
   17716:	4618      	movne	r0, r3
   17718:	4770      	bx	lr
   1771a:	bf00      	nop
   1771c:	200025a0 	.word	0x200025a0
   17720:	20002618 	.word	0x20002618

00017724 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   17724:	4b1c      	ldr	r3, [pc, #112]	; (17798 <ull_filter_lll_rl_addr_allowed+0x74>)
   17726:	781b      	ldrb	r3, [r3, #0]
   17728:	b1fb      	cbz	r3, 1776a <ull_filter_lll_rl_addr_allowed+0x46>
   1772a:	7813      	ldrb	r3, [r2, #0]
   1772c:	2bff      	cmp	r3, #255	; 0xff
   1772e:	d11c      	bne.n	1776a <ull_filter_lll_rl_addr_allowed+0x46>
{
   17730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17734:	4d19      	ldr	r5, [pc, #100]	; (1779c <ull_filter_lll_rl_addr_allowed+0x78>)
   17736:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   17738:	2300      	movs	r3, #0
   1773a:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1773c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   17740:	fa5f fe83 	uxtb.w	lr, r3
   17744:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   17748:	f014 0001 	ands.w	r0, r4, #1
   1774c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   17750:	d003      	beq.n	1775a <ull_filter_lll_rl_addr_allowed+0x36>
   17752:	f3c4 1480 	ubfx	r4, r4, #6, #1
   17756:	42b4      	cmp	r4, r6
   17758:	d009      	beq.n	1776e <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1775a:	3301      	adds	r3, #1
   1775c:	2b08      	cmp	r3, #8
   1775e:	f105 0528 	add.w	r5, r5, #40	; 0x28
   17762:	d1eb      	bne.n	1773c <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   17764:	2001      	movs	r0, #1
}
   17766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   1776a:	2001      	movs	r0, #1
}
   1776c:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1776e:	1fac      	subs	r4, r5, #6
   17770:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   17774:	f814 af01 	ldrb.w	sl, [r4, #1]!
   17778:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1777c:	45ca      	cmp	sl, r9
   1777e:	d1ec      	bne.n	1775a <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   17780:	42ac      	cmp	r4, r5
   17782:	d1f7      	bne.n	17774 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   17784:	4463      	add	r3, ip
				*rl_idx = i;
   17786:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   1778a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1778e:	075a      	lsls	r2, r3, #29
   17790:	d5e9      	bpl.n	17766 <ull_filter_lll_rl_addr_allowed+0x42>
   17792:	f3c3 1000 	ubfx	r0, r3, #4, #1
   17796:	e7e6      	b.n	17766 <ull_filter_lll_rl_addr_allowed+0x42>
   17798:	2000307f 	.word	0x2000307f
   1779c:	20002466 	.word	0x20002466

000177a0 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   177a0:	4b02      	ldr	r3, [pc, #8]	; (177ac <ull_filter_lll_rl_enabled+0xc>)
   177a2:	7818      	ldrb	r0, [r3, #0]
}
   177a4:	3800      	subs	r0, #0
   177a6:	bf18      	it	ne
   177a8:	2001      	movne	r0, #1
   177aa:	4770      	bx	lr
   177ac:	2000307f 	.word	0x2000307f

000177b0 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   177b0:	4668      	mov	r0, sp
   177b2:	f020 0107 	bic.w	r1, r0, #7
   177b6:	468d      	mov	sp, r1
   177b8:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   177ba:	f001 fe4b 	bl	19454 <isr_radio>

	ISR_DIRECT_PM();
   177be:	f7ee fa7b 	bl	5cb8 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   177c2:	f7ee fd73 	bl	62ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   177c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   177ca:	4685      	mov	sp, r0
   177cc:	4770      	bx	lr
   177ce:	bf00      	nop

000177d0 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   177d0:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   177d2:	4b09      	ldr	r3, [pc, #36]	; (177f8 <rtc0_nrf5_isr+0x28>)
   177d4:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   177d8:	b93a      	cbnz	r2, 177ea <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   177da:	2001      	movs	r0, #1
   177dc:	f7f7 fa9c 	bl	ed18 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   177e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   177e4:	2002      	movs	r0, #2
   177e6:	f7f7 ba97 	b.w	ed18 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   177ea:	2000      	movs	r0, #0
   177ec:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   177f0:	f7f8 fc08 	bl	10004 <ticker_trigger>
   177f4:	e7f1      	b.n	177da <rtc0_nrf5_isr+0xa>
   177f6:	bf00      	nop
   177f8:	4000b000 	.word	0x4000b000

000177fc <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   177fc:	2000      	movs	r0, #0
   177fe:	f7f7 ba8b 	b.w	ed18 <mayfly_run>
   17802:	bf00      	nop

00017804 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   17804:	f001 bf24 	b.w	19650 <radio_status_reset>

00017808 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17808:	2801      	cmp	r0, #1
   1780a:	d800      	bhi.n	1780e <ticker_stop_op_cb+0x6>
   1780c:	4770      	bx	lr
{
   1780e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17810:	4a06      	ldr	r2, [pc, #24]	; (1782c <ticker_stop_op_cb+0x24>)
   17812:	4907      	ldr	r1, [pc, #28]	; (17830 <ticker_stop_op_cb+0x28>)
   17814:	4807      	ldr	r0, [pc, #28]	; (17834 <ticker_stop_op_cb+0x2c>)
   17816:	f44f 731b 	mov.w	r3, #620	; 0x26c
   1781a:	f004 ffd2 	bl	1c7c2 <printk>
   1781e:	4040      	eors	r0, r0
   17820:	f380 8811 	msr	BASEPRI, r0
   17824:	f04f 0003 	mov.w	r0, #3
   17828:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1782a:	bd08      	pop	{r3, pc}
   1782c:	00022ffc 	.word	0x00022ffc
   17830:	00023044 	.word	0x00023044
   17834:	00022678 	.word	0x00022678

00017838 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17838:	2801      	cmp	r0, #1
   1783a:	d800      	bhi.n	1783e <ticker_start_op_cb+0x6>
   1783c:	4770      	bx	lr
{
   1783e:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   17840:	4a06      	ldr	r2, [pc, #24]	; (1785c <ticker_start_op_cb+0x24>)
   17842:	4907      	ldr	r1, [pc, #28]	; (17860 <ticker_start_op_cb+0x28>)
   17844:	4807      	ldr	r0, [pc, #28]	; (17864 <ticker_start_op_cb+0x2c>)
   17846:	f240 2377 	movw	r3, #631	; 0x277
   1784a:	f004 ffba 	bl	1c7c2 <printk>
   1784e:	4040      	eors	r0, r0
   17850:	f380 8811 	msr	BASEPRI, r0
   17854:	f04f 0003 	mov.w	r0, #3
   17858:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1785a:	bd08      	pop	{r3, pc}
   1785c:	00022ffc 	.word	0x00022ffc
   17860:	00023044 	.word	0x00023044
   17864:	00022678 	.word	0x00022678

00017868 <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   17868:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1786a:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1786c:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   1786e:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17870:	4c15      	ldr	r4, [pc, #84]	; (178c8 <preempt_ticker_start.isra.0+0x60>)
   17872:	4916      	ldr	r1, [pc, #88]	; (178cc <preempt_ticker_start.isra.0+0x64>)
   17874:	9208      	str	r2, [sp, #32]
   17876:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1787a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1787e:	9206      	str	r2, [sp, #24]
   17880:	9407      	str	r4, [sp, #28]
   17882:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   17884:	e9d3 5400 	ldrd	r5, r4, [r3]
   17888:	6899      	ldr	r1, [r3, #8]
   1788a:	42a5      	cmp	r5, r4
   1788c:	bf2c      	ite	cs
   1788e:	ebc1 0105 	rsbcs	r1, r1, r5
   17892:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   17896:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   17898:	9100      	str	r1, [sp, #0]
   1789a:	4610      	mov	r0, r2
   1789c:	4611      	mov	r1, r2
   1789e:	f7f8 fc1f 	bl	100e0 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   178a2:	2802      	cmp	r0, #2
   178a4:	d801      	bhi.n	178aa <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   178a6:	b00b      	add	sp, #44	; 0x2c
   178a8:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   178aa:	4a09      	ldr	r2, [pc, #36]	; (178d0 <preempt_ticker_start.isra.0+0x68>)
   178ac:	4909      	ldr	r1, [pc, #36]	; (178d4 <preempt_ticker_start.isra.0+0x6c>)
   178ae:	480a      	ldr	r0, [pc, #40]	; (178d8 <preempt_ticker_start.isra.0+0x70>)
   178b0:	f240 2395 	movw	r3, #661	; 0x295
   178b4:	f004 ff85 	bl	1c7c2 <printk>
   178b8:	4040      	eors	r0, r0
   178ba:	f380 8811 	msr	BASEPRI, r0
   178be:	f04f 0003 	mov.w	r0, #3
   178c2:	df02      	svc	2
}
   178c4:	b00b      	add	sp, #44	; 0x2c
   178c6:	bd30      	pop	{r4, r5, pc}
   178c8:	00017839 	.word	0x00017839
   178cc:	00017b31 	.word	0x00017b31
   178d0:	00022ffc 	.word	0x00022ffc
   178d4:	00023064 	.word	0x00023064
   178d8:	00022678 	.word	0x00022678

000178dc <prepare>:
{
   178dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   178e0:	b085      	sub	sp, #20
   178e2:	4604      	mov	r4, r0
	uint8_t idx = UINT8_MAX;
   178e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   178e8:	f10d 000f 	add.w	r0, sp, #15
{
   178ec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   178f0:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	uint8_t idx = UINT8_MAX;
   178f4:	f88d c00f 	strb.w	ip, [sp, #15]
{
   178f8:	460d      	mov	r5, r1
   178fa:	4616      	mov	r6, r2
   178fc:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   178fe:	f7fb f95b 	bl	12bb8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   17902:	b918      	cbnz	r0, 1790c <prepare+0x30>
   17904:	e01e      	b.n	17944 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   17906:	f7fb f957 	bl	12bb8 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1790a:	b1d8      	cbz	r0, 17944 <prepare+0x68>
   1790c:	f890 3020 	ldrb.w	r3, [r0, #32]
   17910:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   17912:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   17916:	d1f6      	bne.n	17906 <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   17918:	4b2d      	ldr	r3, [pc, #180]	; (179d0 <prepare+0xf4>)
   1791a:	689a      	ldr	r2, [r3, #8]
   1791c:	b9aa      	cbnz	r2, 1794a <prepare+0x6e>
   1791e:	f1b9 0f00 	cmp.w	r9, #0
   17922:	d036      	beq.n	17992 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   17924:	2201      	movs	r2, #1
   17926:	9201      	str	r2, [sp, #4]
   17928:	9700      	str	r7, [sp, #0]
   1792a:	4633      	mov	r3, r6
   1792c:	4629      	mov	r1, r5
   1792e:	4620      	mov	r0, r4
   17930:	4642      	mov	r2, r8
   17932:	f7fb f8fb 	bl	12b2c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   17936:	b9d8      	cbnz	r0, 17970 <prepare+0x94>
		return -EINPROGRESS;
   17938:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1793c:	4620      	mov	r0, r4
   1793e:	b005      	add	sp, #20
   17940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   17944:	4b22      	ldr	r3, [pc, #136]	; (179d0 <prepare+0xf4>)
   17946:	689a      	ldr	r2, [r3, #8]
   17948:	b31a      	cbz	r2, 17992 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1794a:	e9cd 7900 	strd	r7, r9, [sp]
   1794e:	4633      	mov	r3, r6
   17950:	4629      	mov	r1, r5
   17952:	4620      	mov	r0, r4
   17954:	4642      	mov	r2, r8
   17956:	f7fb f8e9 	bl	12b2c <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1795a:	b948      	cbnz	r0, 17970 <prepare+0x94>
		if (is_resume) {
   1795c:	f1b9 0f00 	cmp.w	r9, #0
   17960:	d1ea      	bne.n	17938 <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   17962:	f8d8 100c 	ldr.w	r1, [r8, #12]
   17966:	f8d8 0000 	ldr.w	r0, [r8]
   1796a:	f7ff ff7d 	bl	17868 <preempt_ticker_start.isra.0>
   1796e:	e7e3      	b.n	17938 <prepare+0x5c>
		LL_ASSERT(!err);
   17970:	4a18      	ldr	r2, [pc, #96]	; (179d4 <prepare+0xf8>)
   17972:	4919      	ldr	r1, [pc, #100]	; (179d8 <prepare+0xfc>)
   17974:	4819      	ldr	r0, [pc, #100]	; (179dc <prepare+0x100>)
   17976:	f240 2311 	movw	r3, #529	; 0x211
   1797a:	f004 ff22 	bl	1c7c2 <printk>
   1797e:	4040      	eors	r0, r0
   17980:	f380 8811 	msr	BASEPRI, r0
   17984:	f04f 0003 	mov.w	r0, #3
   17988:	df02      	svc	2
		if (is_resume) {
   1798a:	f1b9 0f00 	cmp.w	r9, #0
   1798e:	d1d3      	bne.n	17938 <prepare+0x5c>
   17990:	e7e7      	b.n	17962 <prepare+0x86>
	event.curr.param = prepare_param->param;
   17992:	f8d8 200c 	ldr.w	r2, [r8, #12]
   17996:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   17998:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1799c:	4640      	mov	r0, r8
   1799e:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   179a0:	2200      	movs	r2, #0
   179a2:	4b0f      	ldr	r3, [pc, #60]	; (179e0 <prepare+0x104>)
   179a4:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   179a6:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   179a8:	4611      	mov	r1, r2
   179aa:	4610      	mov	r0, r2
   179ac:	f7f8 fc04 	bl	101b8 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   179b0:	2802      	cmp	r0, #2
   179b2:	d9c3      	bls.n	1793c <prepare+0x60>
   179b4:	4a07      	ldr	r2, [pc, #28]	; (179d4 <prepare+0xf8>)
   179b6:	490b      	ldr	r1, [pc, #44]	; (179e4 <prepare+0x108>)
   179b8:	4808      	ldr	r0, [pc, #32]	; (179dc <prepare+0x100>)
   179ba:	f240 234b 	movw	r3, #587	; 0x24b
   179be:	f004 ff00 	bl	1c7c2 <printk>
   179c2:	4040      	eors	r0, r0
   179c4:	f380 8811 	msr	BASEPRI, r0
   179c8:	f04f 0003 	mov.w	r0, #3
   179cc:	df02      	svc	2
   179ce:	e7b5      	b.n	1793c <prepare+0x60>
   179d0:	20002650 	.word	0x20002650
   179d4:	00022ffc 	.word	0x00022ffc
   179d8:	000228f4 	.word	0x000228f4
   179dc:	00022678 	.word	0x00022678
   179e0:	00017809 	.word	0x00017809
   179e4:	00023064 	.word	0x00023064

000179e8 <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   179e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll_prepare_cb_t resume_cb;
	uint8_t idx = UINT8_MAX;
	int resume_prio;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   179ea:	4e4c      	ldr	r6, [pc, #304]	; (17b1c <preempt+0x134>)
{
   179ec:	b08b      	sub	sp, #44	; 0x2c
	struct lll_event *next = ull_prepare_dequeue_get();
   179ee:	f7fb f8d5 	bl	12b9c <ull_prepare_dequeue_get>
	if (!event.curr.abort_cb || !event.curr.param) {
   179f2:	68b3      	ldr	r3, [r6, #8]
	uint8_t idx = UINT8_MAX;
   179f4:	22ff      	movs	r2, #255	; 0xff
   179f6:	f88d 200e 	strb.w	r2, [sp, #14]
	if (!event.curr.abort_cb || !event.curr.param) {
   179fa:	b19b      	cbz	r3, 17a24 <preempt+0x3c>
   179fc:	6833      	ldr	r3, [r6, #0]
   179fe:	b18b      	cbz	r3, 17a24 <preempt+0x3c>
		return;
	}

	next = ull_prepare_dequeue_iter(&idx);
   17a00:	f10d 000e 	add.w	r0, sp, #14
   17a04:	f7fb f8d8 	bl	12bb8 <ull_prepare_dequeue_iter>
	if (!next) {
   17a08:	4604      	mov	r4, r0
   17a0a:	b158      	cbz	r0, 17a24 <preempt+0x3c>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   17a0c:	f894 3020 	ldrb.w	r3, [r4, #32]
   17a10:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   17a14:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   17a18:	d006      	beq.n	17a28 <preempt+0x40>
		next = ull_prepare_dequeue_iter(&idx);
   17a1a:	f7fb f8cd 	bl	12bb8 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   17a1e:	4604      	mov	r4, r0
   17a20:	2800      	cmp	r0, #0
   17a22:	d1f3      	bne.n	17a0c <preempt+0x24>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   17a24:	b00b      	add	sp, #44	; 0x2c
   17a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   17a28:	ab05      	add	r3, sp, #20
   17a2a:	e9d6 2700 	ldrd	r2, r7, [r6]
   17a2e:	69e1      	ldr	r1, [r4, #28]
   17a30:	68e0      	ldr	r0, [r4, #12]
   17a32:	9300      	str	r3, [sp, #0]
   17a34:	ab04      	add	r3, sp, #16
   17a36:	47b8      	blx	r7
	if (!ret) {
   17a38:	4607      	mov	r7, r0
   17a3a:	2800      	cmp	r0, #0
   17a3c:	d062      	beq.n	17b04 <preempt+0x11c>
	event.curr.abort_cb(NULL, event.curr.param);
   17a3e:	68b3      	ldr	r3, [r6, #8]
   17a40:	6831      	ldr	r1, [r6, #0]
   17a42:	4628      	mov	r0, r5
   17a44:	4798      	blx	r3
	if (ret == -EAGAIN) {
   17a46:	f117 0f0b 	cmn.w	r7, #11
   17a4a:	d01a      	beq.n	17a82 <preempt+0x9a>
		LL_ASSERT(ret == -ECANCELED);
   17a4c:	3748      	adds	r7, #72	; 0x48
   17a4e:	d011      	beq.n	17a74 <preempt+0x8c>
   17a50:	4a33      	ldr	r2, [pc, #204]	; (17b20 <preempt+0x138>)
   17a52:	4934      	ldr	r1, [pc, #208]	; (17b24 <preempt+0x13c>)
   17a54:	4834      	ldr	r0, [pc, #208]	; (17b28 <preempt+0x140>)
   17a56:	f240 23df 	movw	r3, #735	; 0x2df
   17a5a:	f004 feb2 	bl	1c7c2 <printk>
   17a5e:	4040      	eors	r0, r0
   17a60:	f380 8811 	msr	BASEPRI, r0
   17a64:	f04f 0003 	mov.w	r0, #3
   17a68:	df02      	svc	2
   17a6a:	e003      	b.n	17a74 <preempt+0x8c>
	} while (next->is_aborted || next->is_resume);
   17a6c:	f890 3020 	ldrb.w	r3, [r0, #32]
   17a70:	079b      	lsls	r3, r3, #30
   17a72:	d041      	beq.n	17af8 <preempt+0x110>
		next = ull_prepare_dequeue_iter(&idx);
   17a74:	f10d 000e 	add.w	r0, sp, #14
   17a78:	f7fb f89e 	bl	12bb8 <ull_prepare_dequeue_iter>
		if (!next) {
   17a7c:	2800      	cmp	r0, #0
   17a7e:	d1f5      	bne.n	17a6c <preempt+0x84>
   17a80:	e7d0      	b.n	17a24 <preempt+0x3c>
		uint8_t iter_idx = UINT8_MAX;
   17a82:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   17a84:	f10d 000f 	add.w	r0, sp, #15
		uint8_t iter_idx = UINT8_MAX;
   17a88:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   17a8c:	f7fb f894 	bl	12bb8 <ull_prepare_dequeue_iter>
		while (iter) {
   17a90:	bb48      	cbnz	r0, 17ae6 <preempt+0xfe>
	prepare_param.param = event.curr.param;
   17a92:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   17a94:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17a96:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   17a98:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17a9a:	2301      	movs	r3, #1
	event.curr.param = NULL;
   17a9c:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17a9e:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   17aa0:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   17aa2:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   17aa6:	9b04      	ldr	r3, [sp, #16]
   17aa8:	aa06      	add	r2, sp, #24
   17aaa:	f7fb f83f 	bl	12b2c <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   17aae:	2800      	cmp	r0, #0
   17ab0:	d0e0      	beq.n	17a74 <preempt+0x8c>
   17ab2:	4a1b      	ldr	r2, [pc, #108]	; (17b20 <preempt+0x138>)
   17ab4:	491d      	ldr	r1, [pc, #116]	; (17b2c <preempt+0x144>)
   17ab6:	481c      	ldr	r0, [pc, #112]	; (17b28 <preempt+0x140>)
   17ab8:	f240 23dd 	movw	r3, #733	; 0x2dd
   17abc:	f004 fe81 	bl	1c7c2 <printk>
   17ac0:	4040      	eors	r0, r0
   17ac2:	f380 8811 	msr	BASEPRI, r0
   17ac6:	f04f 0003 	mov.w	r0, #3
   17aca:	df02      	svc	2
   17acc:	e7d2      	b.n	17a74 <preempt+0x8c>
				iter->is_aborted = 1;
   17ace:	f043 0302 	orr.w	r3, r3, #2
   17ad2:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   17ad6:	6983      	ldr	r3, [r0, #24]
   17ad8:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   17ada:	f10d 000f 	add.w	r0, sp, #15
   17ade:	f7fb f86b 	bl	12bb8 <ull_prepare_dequeue_iter>
		while (iter) {
   17ae2:	2800      	cmp	r0, #0
   17ae4:	d0d5      	beq.n	17a92 <preempt+0xaa>
			if (!iter->is_aborted &&
   17ae6:	f890 3020 	ldrb.w	r3, [r0, #32]
   17aea:	079a      	lsls	r2, r3, #30
   17aec:	d4f5      	bmi.n	17ada <preempt+0xf2>
			    event.curr.param == iter->prepare_param.param) {
   17aee:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   17af0:	6831      	ldr	r1, [r6, #0]
   17af2:	4291      	cmp	r1, r2
   17af4:	d1f1      	bne.n	17ada <preempt+0xf2>
   17af6:	e7ea      	b.n	17ace <preempt+0xe6>
	preempt_ticker_start(&next->prepare_param);
   17af8:	68c1      	ldr	r1, [r0, #12]
   17afa:	6800      	ldr	r0, [r0, #0]
   17afc:	f7ff feb4 	bl	17868 <preempt_ticker_start.isra.0>
}
   17b00:	b00b      	add	sp, #44	; 0x2c
   17b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   17b04:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17b08:	69a2      	ldr	r2, [r4, #24]
   17b0a:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   17b0c:	f043 0302 	orr.w	r3, r3, #2
   17b10:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   17b14:	4620      	mov	r0, r4
   17b16:	4790      	blx	r2
		goto preempt_next;
   17b18:	e7ac      	b.n	17a74 <preempt+0x8c>
   17b1a:	bf00      	nop
   17b1c:	20002650 	.word	0x20002650
   17b20:	00022ffc 	.word	0x00022ffc
   17b24:	0002308c 	.word	0x0002308c
   17b28:	00022678 	.word	0x00022678
   17b2c:	00022900 	.word	0x00022900

00017b30 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17b30:	2200      	movs	r2, #0
{
   17b32:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   17b34:	4611      	mov	r1, r2
   17b36:	4b0a      	ldr	r3, [pc, #40]	; (17b60 <preempt_ticker_cb+0x30>)
   17b38:	2001      	movs	r0, #1
   17b3a:	f7f7 f899 	bl	ec70 <mayfly_enqueue>
	LL_ASSERT(!ret);
   17b3e:	b900      	cbnz	r0, 17b42 <preempt_ticker_cb+0x12>
}
   17b40:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   17b42:	4a08      	ldr	r2, [pc, #32]	; (17b64 <preempt_ticker_cb+0x34>)
   17b44:	4908      	ldr	r1, [pc, #32]	; (17b68 <preempt_ticker_cb+0x38>)
   17b46:	4809      	ldr	r0, [pc, #36]	; (17b6c <preempt_ticker_cb+0x3c>)
   17b48:	f240 23a3 	movw	r3, #675	; 0x2a3
   17b4c:	f004 fe39 	bl	1c7c2 <printk>
   17b50:	4040      	eors	r0, r0
   17b52:	f380 8811 	msr	BASEPRI, r0
   17b56:	f04f 0003 	mov.w	r0, #3
   17b5a:	df02      	svc	2
}
   17b5c:	bd08      	pop	{r3, pc}
   17b5e:	bf00      	nop
   17b60:	2000061c 	.word	0x2000061c
   17b64:	00022ffc 	.word	0x00022ffc
   17b68:	00022900 	.word	0x00022900
   17b6c:	00022678 	.word	0x00022678

00017b70 <lll_init>:
{
   17b70:	b510      	push	{r4, lr}
   17b72:	4815      	ldr	r0, [pc, #84]	; (17bc8 <lll_init+0x58>)
   17b74:	f003 fa8a 	bl	1b08c <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   17b78:	4b14      	ldr	r3, [pc, #80]	; (17bcc <lll_init+0x5c>)
   17b7a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   17b7c:	b300      	cbz	r0, 17bc0 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   17b7e:	4b14      	ldr	r3, [pc, #80]	; (17bd0 <lll_init+0x60>)
   17b80:	2400      	movs	r4, #0
   17b82:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   17b84:	f000 fa22 	bl	17fcc <lll_clock_init>
	if (err < 0) {
   17b88:	2800      	cmp	r0, #0
   17b8a:	db18      	blt.n	17bbe <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   17b8c:	4622      	mov	r2, r4
   17b8e:	4621      	mov	r1, r4
   17b90:	2001      	movs	r0, #1
   17b92:	f7ee f879 	bl	5c88 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   17b96:	4622      	mov	r2, r4
   17b98:	4621      	mov	r1, r4
   17b9a:	200b      	movs	r0, #11
   17b9c:	f7ee f874 	bl	5c88 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   17ba0:	4622      	mov	r2, r4
   17ba2:	4621      	mov	r1, r4
   17ba4:	2018      	movs	r0, #24
   17ba6:	f7ee f86f 	bl	5c88 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   17baa:	2001      	movs	r0, #1
   17bac:	f7ee f83a 	bl	5c24 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   17bb0:	200b      	movs	r0, #11
   17bb2:	f7ee f837 	bl	5c24 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   17bb6:	2018      	movs	r0, #24
   17bb8:	f7ee f834 	bl	5c24 <arch_irq_enable>
	return 0;
   17bbc:	4620      	mov	r0, r4
}
   17bbe:	bd10      	pop	{r4, pc}
		return -ENODEV;
   17bc0:	f06f 0012 	mvn.w	r0, #18
}
   17bc4:	bd10      	pop	{r4, pc}
   17bc6:	bf00      	nop
   17bc8:	00023098 	.word	0x00023098
   17bcc:	2000264c 	.word	0x2000264c
   17bd0:	20002650 	.word	0x20002650

00017bd4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   17bd4:	4a04      	ldr	r2, [pc, #16]	; (17be8 <lll_csrand_get+0x14>)
{
   17bd6:	b410      	push	{r4}
   17bd8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   17bda:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   17bdc:	6884      	ldr	r4, [r0, #8]
   17bde:	b28a      	uxth	r2, r1
   17be0:	4619      	mov	r1, r3
   17be2:	6823      	ldr	r3, [r4, #0]
}
   17be4:	bc10      	pop	{r4}
   17be6:	4718      	bx	r3
   17be8:	2000264c 	.word	0x2000264c

00017bec <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   17bec:	4b08      	ldr	r3, [pc, #32]	; (17c10 <lll_csrand_isr_get+0x24>)
   17bee:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->driver_api;

	if (unlikely(!api->get_entropy_isr)) {
   17bf0:	689a      	ldr	r2, [r3, #8]
{
   17bf2:	b410      	push	{r4}
   17bf4:	6854      	ldr	r4, [r2, #4]
   17bf6:	b134      	cbz	r4, 17c06 <lll_csrand_isr_get+0x1a>
   17bf8:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   17bfa:	46a4      	mov	ip, r4
   17bfc:	4601      	mov	r1, r0
}
   17bfe:	bc10      	pop	{r4}
   17c00:	4618      	mov	r0, r3
   17c02:	2300      	movs	r3, #0
   17c04:	4760      	bx	ip
   17c06:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17c0a:	bc10      	pop	{r4}
   17c0c:	4770      	bx	lr
   17c0e:	bf00      	nop
   17c10:	2000264c 	.word	0x2000264c

00017c14 <lll_rand_isr_get>:
   17c14:	f7ff bfea 	b.w	17bec <lll_csrand_isr_get>

00017c18 <lll_reset>:
}
   17c18:	2000      	movs	r0, #0
   17c1a:	4770      	bx	lr

00017c1c <lll_prepare>:
{
   17c1c:	b510      	push	{r4, lr}
   17c1e:	b082      	sub	sp, #8
   17c20:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   17c22:	9400      	str	r4, [sp, #0]
   17c24:	2400      	movs	r4, #0
   17c26:	9401      	str	r4, [sp, #4]
   17c28:	f7ff fe58 	bl	178dc <prepare>
}
   17c2c:	b002      	add	sp, #8
   17c2e:	bd10      	pop	{r4, pc}

00017c30 <lll_resume>:
{
   17c30:	b510      	push	{r4, lr}
   17c32:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   17c34:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   17c36:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   17c3a:	69c3      	ldr	r3, [r0, #28]
   17c3c:	6902      	ldr	r2, [r0, #16]
   17c3e:	f004 0401 	and.w	r4, r4, #1
   17c42:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   17c46:	9401      	str	r4, [sp, #4]
   17c48:	f7ff fe48 	bl	178dc <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17c4c:	b108      	cbz	r0, 17c52 <lll_resume+0x22>
   17c4e:	3044      	adds	r0, #68	; 0x44
   17c50:	d101      	bne.n	17c56 <lll_resume+0x26>
}
   17c52:	b002      	add	sp, #8
   17c54:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   17c56:	4a07      	ldr	r2, [pc, #28]	; (17c74 <lll_resume+0x44>)
   17c58:	4907      	ldr	r1, [pc, #28]	; (17c78 <lll_resume+0x48>)
   17c5a:	4808      	ldr	r0, [pc, #32]	; (17c7c <lll_resume+0x4c>)
   17c5c:	23e4      	movs	r3, #228	; 0xe4
   17c5e:	f004 fdb0 	bl	1c7c2 <printk>
   17c62:	4040      	eors	r0, r0
   17c64:	f380 8811 	msr	BASEPRI, r0
   17c68:	f04f 0003 	mov.w	r0, #3
   17c6c:	df02      	svc	2
}
   17c6e:	b002      	add	sp, #8
   17c70:	bd10      	pop	{r4, pc}
   17c72:	bf00      	nop
   17c74:	00022ffc 	.word	0x00022ffc
   17c78:	0002309c 	.word	0x0002309c
   17c7c:	00022678 	.word	0x00022678

00017c80 <lll_disable>:
{
   17c80:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   17c82:	4604      	mov	r4, r0
{
   17c84:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   17c86:	2800      	cmp	r0, #0
   17c88:	d035      	beq.n	17cf6 <lll_disable+0x76>
   17c8a:	4b26      	ldr	r3, [pc, #152]	; (17d24 <lll_disable+0xa4>)
   17c8c:	681a      	ldr	r2, [r3, #0]
   17c8e:	4282      	cmp	r2, r0
   17c90:	d02b      	beq.n	17cea <lll_disable+0x6a>
		uint8_t idx = UINT8_MAX;
   17c92:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   17c94:	f10d 0007 	add.w	r0, sp, #7
		uint8_t idx = UINT8_MAX;
   17c98:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   17c9c:	f7fa ff8c 	bl	12bb8 <ull_prepare_dequeue_iter>
		while (next) {
   17ca0:	4603      	mov	r3, r0
   17ca2:	b940      	cbnz	r0, 17cb6 <lll_disable+0x36>
   17ca4:	e01f      	b.n	17ce6 <lll_disable+0x66>
			    (!param || (param == next->prepare_param.param))) {
   17ca6:	4294      	cmp	r4, r2
   17ca8:	d00e      	beq.n	17cc8 <lll_disable+0x48>
			next = ull_prepare_dequeue_iter(&idx);
   17caa:	f10d 0007 	add.w	r0, sp, #7
   17cae:	f7fa ff83 	bl	12bb8 <ull_prepare_dequeue_iter>
		while (next) {
   17cb2:	4603      	mov	r3, r0
   17cb4:	b1b8      	cbz	r0, 17ce6 <lll_disable+0x66>
			if (!next->is_aborted &&
   17cb6:	f893 2020 	ldrb.w	r2, [r3, #32]
   17cba:	0792      	lsls	r2, r2, #30
   17cbc:	d4f5      	bmi.n	17caa <lll_disable+0x2a>
				next->is_aborted = 1;
   17cbe:	68da      	ldr	r2, [r3, #12]
				next->abort_cb(&next->prepare_param,
   17cc0:	4618      	mov	r0, r3
   17cc2:	4611      	mov	r1, r2
			if (!next->is_aborted &&
   17cc4:	2c00      	cmp	r4, #0
   17cc6:	d1ee      	bne.n	17ca6 <lll_disable+0x26>
				next->is_aborted = 1;
   17cc8:	f893 2020 	ldrb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   17ccc:	699d      	ldr	r5, [r3, #24]
				next->is_aborted = 1;
   17cce:	f042 0202 	orr.w	r2, r2, #2
   17cd2:	f883 2020 	strb.w	r2, [r3, #32]
				next->abort_cb(&next->prepare_param,
   17cd6:	47a8      	blx	r5
			next = ull_prepare_dequeue_iter(&idx);
   17cd8:	f10d 0007 	add.w	r0, sp, #7
   17cdc:	f7fa ff6c 	bl	12bb8 <ull_prepare_dequeue_iter>
		while (next) {
   17ce0:	4603      	mov	r3, r0
   17ce2:	2800      	cmp	r0, #0
   17ce4:	d1e7      	bne.n	17cb6 <lll_disable+0x36>
}
   17ce6:	b003      	add	sp, #12
   17ce8:	bd30      	pop	{r4, r5, pc}
		if (event.curr.abort_cb && event.curr.param) {
   17cea:	689b      	ldr	r3, [r3, #8]
   17cec:	b16b      	cbz	r3, 17d0a <lll_disable+0x8a>
   17cee:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   17cf0:	2000      	movs	r0, #0
   17cf2:	4798      	blx	r3
   17cf4:	e7cd      	b.n	17c92 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   17cf6:	4a0b      	ldr	r2, [pc, #44]	; (17d24 <lll_disable+0xa4>)
   17cf8:	6893      	ldr	r3, [r2, #8]
   17cfa:	2b00      	cmp	r3, #0
   17cfc:	d0c9      	beq.n	17c92 <lll_disable+0x12>
   17cfe:	6811      	ldr	r1, [r2, #0]
   17d00:	2900      	cmp	r1, #0
   17d02:	d0c6      	beq.n	17c92 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   17d04:	2000      	movs	r0, #0
   17d06:	4798      	blx	r3
   17d08:	e7c3      	b.n	17c92 <lll_disable+0x12>
			LL_ASSERT(!param);
   17d0a:	4a07      	ldr	r2, [pc, #28]	; (17d28 <lll_disable+0xa8>)
   17d0c:	4907      	ldr	r1, [pc, #28]	; (17d2c <lll_disable+0xac>)
   17d0e:	4808      	ldr	r0, [pc, #32]	; (17d30 <lll_disable+0xb0>)
   17d10:	23ee      	movs	r3, #238	; 0xee
   17d12:	f004 fd56 	bl	1c7c2 <printk>
   17d16:	4040      	eors	r0, r0
   17d18:	f380 8811 	msr	BASEPRI, r0
   17d1c:	f04f 0003 	mov.w	r0, #3
   17d20:	df02      	svc	2
   17d22:	e7b6      	b.n	17c92 <lll_disable+0x12>
   17d24:	20002650 	.word	0x20002650
   17d28:	00022ffc 	.word	0x00022ffc
   17d2c:	000230b0 	.word	0x000230b0
   17d30:	00022678 	.word	0x00022678

00017d34 <lll_prepare_done>:
}
   17d34:	2000      	movs	r0, #0
   17d36:	4770      	bx	lr

00017d38 <lll_done>:
{
   17d38:	b510      	push	{r4, lr}
   17d3a:	4604      	mov	r4, r0
	struct lll_event *next = ull_prepare_dequeue_get();
   17d3c:	f7fa ff2e 	bl	12b9c <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   17d40:	b13c      	cbz	r4, 17d52 <lll_done+0x1a>
   17d42:	b320      	cbz	r0, 17d8e <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   17d44:	6820      	ldr	r0, [r4, #0]
   17d46:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   17d48:	f7fa ff64 	bl	12c14 <ull_event_done>
	LL_ASSERT(evdone);
   17d4c:	b180      	cbz	r0, 17d70 <lll_done+0x38>
}
   17d4e:	2000      	movs	r0, #0
   17d50:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   17d52:	4c1d      	ldr	r4, [pc, #116]	; (17dc8 <lll_done+0x90>)
   17d54:	68a3      	ldr	r3, [r4, #8]
   17d56:	b343      	cbz	r3, 17daa <lll_done+0x72>
		param = event.curr.param;
   17d58:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   17d5a:	2300      	movs	r3, #0
   17d5c:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   17d5e:	6023      	str	r3, [r4, #0]
		if (param) {
   17d60:	2800      	cmp	r0, #0
   17d62:	d0f1      	beq.n	17d48 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   17d64:	6800      	ldr	r0, [r0, #0]
   17d66:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   17d68:	f7fa ff54 	bl	12c14 <ull_event_done>
	LL_ASSERT(evdone);
   17d6c:	2800      	cmp	r0, #0
   17d6e:	d1ee      	bne.n	17d4e <lll_done+0x16>
   17d70:	4a16      	ldr	r2, [pc, #88]	; (17dcc <lll_done+0x94>)
   17d72:	4917      	ldr	r1, [pc, #92]	; (17dd0 <lll_done+0x98>)
   17d74:	4817      	ldr	r0, [pc, #92]	; (17dd4 <lll_done+0x9c>)
   17d76:	f44f 739e 	mov.w	r3, #316	; 0x13c
   17d7a:	f004 fd22 	bl	1c7c2 <printk>
   17d7e:	4040      	eors	r0, r0
   17d80:	f380 8811 	msr	BASEPRI, r0
   17d84:	f04f 0003 	mov.w	r0, #3
   17d88:	df02      	svc	2
}
   17d8a:	2000      	movs	r0, #0
   17d8c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   17d8e:	4a0f      	ldr	r2, [pc, #60]	; (17dcc <lll_done+0x94>)
   17d90:	4911      	ldr	r1, [pc, #68]	; (17dd8 <lll_done+0xa0>)
   17d92:	4810      	ldr	r0, [pc, #64]	; (17dd4 <lll_done+0x9c>)
   17d94:	f240 131f 	movw	r3, #287	; 0x11f
   17d98:	f004 fd13 	bl	1c7c2 <printk>
   17d9c:	4040      	eors	r0, r0
   17d9e:	f380 8811 	msr	BASEPRI, r0
   17da2:	f04f 0003 	mov.w	r0, #3
   17da6:	df02      	svc	2
   17da8:	e7cc      	b.n	17d44 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   17daa:	4a08      	ldr	r2, [pc, #32]	; (17dcc <lll_done+0x94>)
   17dac:	490b      	ldr	r1, [pc, #44]	; (17ddc <lll_done+0xa4>)
   17dae:	4809      	ldr	r0, [pc, #36]	; (17dd4 <lll_done+0x9c>)
   17db0:	f44f 7392 	mov.w	r3, #292	; 0x124
   17db4:	f004 fd05 	bl	1c7c2 <printk>
   17db8:	4040      	eors	r0, r0
   17dba:	f380 8811 	msr	BASEPRI, r0
   17dbe:	f04f 0003 	mov.w	r0, #3
   17dc2:	df02      	svc	2
   17dc4:	e7c8      	b.n	17d58 <lll_done+0x20>
   17dc6:	bf00      	nop
   17dc8:	20002650 	.word	0x20002650
   17dcc:	00022ffc 	.word	0x00022ffc
   17dd0:	000230dc 	.word	0x000230dc
   17dd4:	00022678 	.word	0x00022678
   17dd8:	000230b8 	.word	0x000230b8
   17ddc:	000230c8 	.word	0x000230c8

00017de0 <lll_is_abort_cb>:
}
   17de0:	f06f 0047 	mvn.w	r0, #71	; 0x47
   17de4:	4770      	bx	lr
   17de6:	bf00      	nop

00017de8 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   17de8:	e9d0 2300 	ldrd	r2, r3, [r0]
   17dec:	2a00      	cmp	r2, #0
   17dee:	db04      	blt.n	17dfa <lll_evt_offset_get+0x12>
		return MAX(evt->ticks_active_to_start,
   17df0:	429a      	cmp	r2, r3
   17df2:	bf38      	it	cc
   17df4:	461a      	movcc	r2, r3
   17df6:	4610      	mov	r0, r2
}
   17df8:	4770      	bx	lr
		return MAX(evt->ticks_active_to_start,
   17dfa:	6880      	ldr	r0, [r0, #8]
   17dfc:	4298      	cmp	r0, r3
   17dfe:	bf38      	it	cc
   17e00:	4618      	movcc	r0, r3
   17e02:	4770      	bx	lr

00017e04 <lll_preempt_calc>:
{
   17e04:	b510      	push	{r4, lr}
   17e06:	4614      	mov	r4, r2
	uint32_t ticks_now = ticker_ticks_now_get();
   17e08:	f7f8 fa1c 	bl	10244 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   17e0c:	4621      	mov	r1, r4
   17e0e:	f7f8 fa1b 	bl	10248 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   17e12:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   17e14:	0203      	lsls	r3, r0, #8
   17e16:	d404      	bmi.n	17e22 <lll_preempt_calc+0x1e>
   17e18:	2809      	cmp	r0, #9
   17e1a:	bf94      	ite	ls
   17e1c:	2000      	movls	r0, #0
   17e1e:	2001      	movhi	r0, #1
}
   17e20:	bd10      	pop	{r4, pc}
	return 0;
   17e22:	2000      	movs	r0, #0
}
   17e24:	bd10      	pop	{r4, pc}
   17e26:	bf00      	nop

00017e28 <lll_chan_set>:
	switch (chan) {
   17e28:	2826      	cmp	r0, #38	; 0x26
{
   17e2a:	b510      	push	{r4, lr}
   17e2c:	4604      	mov	r4, r0
	switch (chan) {
   17e2e:	d01c      	beq.n	17e6a <lll_chan_set+0x42>
   17e30:	2827      	cmp	r0, #39	; 0x27
   17e32:	d012      	beq.n	17e5a <lll_chan_set+0x32>
   17e34:	2825      	cmp	r0, #37	; 0x25
   17e36:	d008      	beq.n	17e4a <lll_chan_set+0x22>
		if (chan < 11) {
   17e38:	280a      	cmp	r0, #10
   17e3a:	d91e      	bls.n	17e7a <lll_chan_set+0x52>
		} else if (chan < 40) {
   17e3c:	2827      	cmp	r0, #39	; 0x27
   17e3e:	d821      	bhi.n	17e84 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   17e40:	3003      	adds	r0, #3
   17e42:	0040      	lsls	r0, r0, #1
   17e44:	f001 fb70 	bl	19528 <radio_freq_chan_set>
   17e48:	e002      	b.n	17e50 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   17e4a:	2002      	movs	r0, #2
   17e4c:	f001 fb6c 	bl	19528 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17e50:	4620      	mov	r0, r4
}
   17e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17e56:	f001 bb6d 	b.w	19534 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   17e5a:	2050      	movs	r0, #80	; 0x50
   17e5c:	f001 fb64 	bl	19528 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17e60:	4620      	mov	r0, r4
}
   17e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17e66:	f001 bb65 	b.w	19534 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   17e6a:	201a      	movs	r0, #26
   17e6c:	f001 fb5c 	bl	19528 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   17e70:	4620      	mov	r0, r4
}
   17e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   17e76:	f001 bb5d 	b.w	19534 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   17e7a:	3002      	adds	r0, #2
   17e7c:	0040      	lsls	r0, r0, #1
   17e7e:	f001 fb53 	bl	19528 <radio_freq_chan_set>
   17e82:	e7e5      	b.n	17e50 <lll_chan_set+0x28>
			LL_ASSERT(0);
   17e84:	4a06      	ldr	r2, [pc, #24]	; (17ea0 <lll_chan_set+0x78>)
   17e86:	4907      	ldr	r1, [pc, #28]	; (17ea4 <lll_chan_set+0x7c>)
   17e88:	4807      	ldr	r0, [pc, #28]	; (17ea8 <lll_chan_set+0x80>)
   17e8a:	f44f 73c3 	mov.w	r3, #390	; 0x186
   17e8e:	f004 fc98 	bl	1c7c2 <printk>
   17e92:	4040      	eors	r0, r0
   17e94:	f380 8811 	msr	BASEPRI, r0
   17e98:	f04f 0003 	mov.w	r0, #3
   17e9c:	df02      	svc	2
   17e9e:	e7d7      	b.n	17e50 <lll_chan_set+0x28>
   17ea0:	00022ffc 	.word	0x00022ffc
   17ea4:	000226e8 	.word	0x000226e8
   17ea8:	00022678 	.word	0x00022678

00017eac <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   17eac:	f001 bbaa 	b.w	19604 <radio_rx_ready_delay_get>

00017eb0 <lll_isr_tx_status_reset>:
{
   17eb0:	b508      	push	{r3, lr}
	radio_status_reset();
   17eb2:	f001 fbcd 	bl	19650 <radio_status_reset>
}
   17eb6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   17eba:	f001 bc8d 	b.w	197d8 <radio_tmr_status_reset>
   17ebe:	bf00      	nop

00017ec0 <lll_isr_rx_status_reset>:
{
   17ec0:	b508      	push	{r3, lr}
	radio_status_reset();
   17ec2:	f001 fbc5 	bl	19650 <radio_status_reset>
	radio_tmr_status_reset();
   17ec6:	f001 fc87 	bl	197d8 <radio_tmr_status_reset>
}
   17eca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17ece:	f001 bc33 	b.w	19738 <radio_rssi_status_reset>
   17ed2:	bf00      	nop

00017ed4 <lll_isr_status_reset>:
{
   17ed4:	b508      	push	{r3, lr}
	radio_status_reset();
   17ed6:	f001 fbbb 	bl	19650 <radio_status_reset>
	radio_tmr_status_reset();
   17eda:	f001 fc7d 	bl	197d8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   17ede:	f001 fc63 	bl	197a8 <radio_filter_status_reset>
	radio_ar_status_reset();
   17ee2:	f001 fe43 	bl	19b6c <radio_ar_status_reset>
}
   17ee6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   17eea:	f001 bc25 	b.w	19738 <radio_rssi_status_reset>
   17eee:	bf00      	nop

00017ef0 <lll_isr_cleanup>:
{
   17ef0:	b508      	push	{r3, lr}
   17ef2:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   17ef4:	4815      	ldr	r0, [pc, #84]	; (17f4c <lll_isr_cleanup+0x5c>)
   17ef6:	f001 fabd 	bl	19474 <radio_isr_set>
	if (!radio_is_idle()) {
   17efa:	f001 fbc9 	bl	19690 <radio_is_idle>
   17efe:	b150      	cbz	r0, 17f16 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   17f00:	f001 fd0c 	bl	1991c <radio_tmr_stop>
	err = lll_hfclock_off();
   17f04:	f000 f894 	bl	18030 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17f08:	2800      	cmp	r0, #0
   17f0a:	db0c      	blt.n	17f26 <lll_isr_cleanup+0x36>
}
   17f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17f10:	2000      	movs	r0, #0
   17f12:	f7ff bf11 	b.w	17d38 <lll_done>
		radio_disable();
   17f16:	f001 fb83 	bl	19620 <radio_disable>
	radio_tmr_stop();
   17f1a:	f001 fcff 	bl	1991c <radio_tmr_stop>
	err = lll_hfclock_off();
   17f1e:	f000 f887 	bl	18030 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17f22:	2800      	cmp	r0, #0
   17f24:	daf2      	bge.n	17f0c <lll_isr_cleanup+0x1c>
   17f26:	4a0a      	ldr	r2, [pc, #40]	; (17f50 <lll_isr_cleanup+0x60>)
   17f28:	490a      	ldr	r1, [pc, #40]	; (17f54 <lll_isr_cleanup+0x64>)
   17f2a:	480b      	ldr	r0, [pc, #44]	; (17f58 <lll_isr_cleanup+0x68>)
   17f2c:	f240 13e9 	movw	r3, #489	; 0x1e9
   17f30:	f004 fc47 	bl	1c7c2 <printk>
   17f34:	4040      	eors	r0, r0
   17f36:	f380 8811 	msr	BASEPRI, r0
   17f3a:	f04f 0003 	mov.w	r0, #3
   17f3e:	df02      	svc	2
	lll_done(NULL);
   17f40:	2000      	movs	r0, #0
}
   17f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   17f46:	f7ff bef7 	b.w	17d38 <lll_done>
   17f4a:	bf00      	nop
   17f4c:	00017805 	.word	0x00017805
   17f50:	00022ffc 	.word	0x00022ffc
   17f54:	000230e4 	.word	0x000230e4
   17f58:	00022678 	.word	0x00022678

00017f5c <lll_isr_abort>:
{
   17f5c:	b510      	push	{r4, lr}
   17f5e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   17f60:	f7ff ffb8 	bl	17ed4 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   17f64:	4620      	mov	r0, r4
}
   17f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   17f6a:	f7ff bfc1 	b.w	17ef0 <lll_isr_cleanup>
   17f6e:	bf00      	nop

00017f70 <clock_ready>:
	z_impl_k_sem_give(sem);
   17f70:	f101 0010 	add.w	r0, r1, #16
   17f74:	f003 bee6 	b.w	1bd44 <z_impl_k_sem_give>

00017f78 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   17f78:	b530      	push	{r4, r5, lr}
   17f7a:	4604      	mov	r4, r0
   17f7c:	b08b      	sub	sp, #44	; 0x2c
   17f7e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   17f80:	2201      	movs	r2, #1
   17f82:	2100      	movs	r1, #0
   17f84:	a804      	add	r0, sp, #16
   17f86:	f009 f9d4 	bl	21332 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   17f8a:	2300      	movs	r3, #0
   17f8c:	4a0e      	ldr	r2, [pc, #56]	; (17fc8 <blocking_on+0x50>)
   17f8e:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   17f90:	4620      	mov	r0, r4
   17f92:	2303      	movs	r3, #3
   17f94:	4669      	mov	r1, sp
   17f96:	9201      	str	r2, [sp, #4]
   17f98:	9302      	str	r3, [sp, #8]
   17f9a:	f004 fc78 	bl	1c88e <onoff_request>
	if (err < 0) {
   17f9e:	2800      	cmp	r0, #0
   17fa0:	db10      	blt.n	17fc4 <blocking_on+0x4c>
   17fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   17fa6:	f240 30e7 	movw	r0, #999	; 0x3e7
   17faa:	2100      	movs	r1, #0
   17fac:	fbe3 0105 	umlal	r0, r1, r3, r5
   17fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17fb4:	2300      	movs	r3, #0
   17fb6:	f7e8 f893 	bl	e0 <__aeabi_uldivmod>
   17fba:	4602      	mov	r2, r0
   17fbc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   17fbe:	a804      	add	r0, sp, #16
   17fc0:	f003 fee6 	bl	1bd90 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   17fc4:	b00b      	add	sp, #44	; 0x2c
   17fc6:	bd30      	pop	{r4, r5, pc}
   17fc8:	00017f71 	.word	0x00017f71

00017fcc <lll_clock_init>:

int lll_clock_init(void)
{
   17fcc:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17fce:	2001      	movs	r0, #1
   17fd0:	f7ed fa6a 	bl	54a8 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   17fd4:	4904      	ldr	r1, [pc, #16]	; (17fe8 <lll_clock_init+0x1c>)
   17fd6:	2401      	movs	r4, #1
   17fd8:	2300      	movs	r3, #0
   17fda:	608c      	str	r4, [r1, #8]
   17fdc:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   17fde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17fe2:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   17fe4:	f004 bc53 	b.w	1c88e <onoff_request>
   17fe8:	20002668 	.word	0x20002668

00017fec <lll_clock_wait>:

int lll_clock_wait(void)
{
   17fec:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   17fee:	2001      	movs	r0, #1
   17ff0:	f7ed fa5a 	bl	54a8 <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   17ff4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   17ff8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   17ffc:	f7ff bfbc 	b.w	17f78 <blocking_on>

00018000 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   18000:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   18002:	4b0a      	ldr	r3, [pc, #40]	; (1802c <lll_hfclock_on+0x2c>)
   18004:	f3bf 8f5b 	dmb	ish
   18008:	e853 2f00 	ldrex	r2, [r3]
   1800c:	1c51      	adds	r1, r2, #1
   1800e:	e843 1000 	strex	r0, r1, [r3]
   18012:	2800      	cmp	r0, #0
   18014:	d1f8      	bne.n	18008 <lll_hfclock_on+0x8>
   18016:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1801a:	2a00      	cmp	r2, #0
   1801c:	dd01      	ble.n	18022 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1801e:	2000      	movs	r0, #0
   18020:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   18022:	f7ed fa4b 	bl	54bc <z_nrf_clock_bt_ctlr_hf_request>
}
   18026:	2000      	movs	r0, #0
   18028:	bd08      	pop	{r3, pc}
   1802a:	bf00      	nop
   1802c:	20002664 	.word	0x20002664

00018030 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   18030:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   18032:	4b0d      	ldr	r3, [pc, #52]	; (18068 <lll_hfclock_off+0x38>)
   18034:	681a      	ldr	r2, [r3, #0]
   18036:	2a00      	cmp	r2, #0
   18038:	dd12      	ble.n	18060 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1803a:	f3bf 8f5b 	dmb	ish
   1803e:	e853 2f00 	ldrex	r2, [r3]
   18042:	1e51      	subs	r1, r2, #1
   18044:	e843 1000 	strex	r0, r1, [r3]
   18048:	2800      	cmp	r0, #0
   1804a:	d1f8      	bne.n	1803e <lll_hfclock_off+0xe>
   1804c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   18050:	2a01      	cmp	r2, #1
   18052:	dd01      	ble.n	18058 <lll_hfclock_off+0x28>
		return 0;
   18054:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   18056:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   18058:	f7ed fa46 	bl	54e8 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1805c:	2000      	movs	r0, #0
}
   1805e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   18060:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   18064:	bd08      	pop	{r3, pc}
   18066:	bf00      	nop
   18068:	20002664 	.word	0x20002664

0001806c <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1806c:	b510      	push	{r4, lr}
   1806e:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   18070:	f7ff ff30 	bl	17ed4 <lll_isr_status_reset>

	radio_filter_disable();
   18074:	f001 fb8e 	bl	19794 <radio_filter_disable>

	lll_isr_cleanup(param);
   18078:	4620      	mov	r0, r4
}
   1807a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1807e:	f7ff bf37 	b.w	17ef0 <lll_isr_cleanup>
   18082:	bf00      	nop

00018084 <isr_tx>:
{
   18084:	b530      	push	{r4, r5, lr}
   18086:	b083      	sub	sp, #12
   18088:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1808a:	f7ff ff11 	bl	17eb0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1808e:	2096      	movs	r0, #150	; 0x96
   18090:	f001 fbb2 	bl	197f8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   18094:	2300      	movs	r3, #0
   18096:	461a      	mov	r2, r3
   18098:	4619      	mov	r1, r3
   1809a:	4618      	mov	r0, r3
   1809c:	f001 fb32 	bl	19704 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   180a0:	f001 fb1a 	bl	196d8 <radio_pkt_scratch_get>
   180a4:	f001 faa0 	bl	195e8 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   180a8:	f001 fade 	bl	19668 <radio_is_ready>
   180ac:	b9d8      	cbnz	r0, 180e6 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   180ae:	481d      	ldr	r0, [pc, #116]	; (18124 <isr_tx+0xa0>)
   180b0:	4621      	mov	r1, r4
   180b2:	f001 f9df 	bl	19474 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   180b6:	f7ff fb73 	bl	177a0 <ull_filter_lll_rl_enabled>
   180ba:	bb48      	cbnz	r0, 18110 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   180bc:	f001 fc8a 	bl	199d4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   180c0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   180c2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   180c4:	4608      	mov	r0, r1
   180c6:	f001 fa9f 	bl	19608 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   180ca:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   180cc:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   180ce:	4608      	mov	r0, r1
   180d0:	f001 fa96 	bl	19600 <radio_tx_chain_delay_get>
   180d4:	442c      	add	r4, r5
   180d6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   180d8:	1a20      	subs	r0, r4, r0
   180da:	f001 fc33 	bl	19944 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   180de:	f001 fc6b 	bl	199b8 <radio_tmr_end_capture>
}
   180e2:	b003      	add	sp, #12
   180e4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   180e6:	4a10      	ldr	r2, [pc, #64]	; (18128 <isr_tx+0xa4>)
   180e8:	4910      	ldr	r1, [pc, #64]	; (1812c <isr_tx+0xa8>)
   180ea:	4811      	ldr	r0, [pc, #68]	; (18130 <isr_tx+0xac>)
   180ec:	f240 1351 	movw	r3, #337	; 0x151
   180f0:	f004 fb67 	bl	1c7c2 <printk>
   180f4:	4040      	eors	r0, r0
   180f6:	f380 8811 	msr	BASEPRI, r0
   180fa:	f04f 0003 	mov.w	r0, #3
   180fe:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   18100:	4808      	ldr	r0, [pc, #32]	; (18124 <isr_tx+0xa0>)
   18102:	4621      	mov	r1, r4
   18104:	f001 f9b6 	bl	19474 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   18108:	f7ff fb4a 	bl	177a0 <ull_filter_lll_rl_enabled>
   1810c:	2800      	cmp	r0, #0
   1810e:	d0d5      	beq.n	180bc <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   18110:	f10d 0007 	add.w	r0, sp, #7
   18114:	f7ff fa6e 	bl	175f4 <ull_filter_lll_irks_get>
   18118:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   1811a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1811e:	f001 fceb 	bl	19af8 <radio_ar_configure>
   18122:	e7cb      	b.n	180bc <isr_tx+0x38>
   18124:	000184c1 	.word	0x000184c1
   18128:	00023110 	.word	0x00023110
   1812c:	0002315c 	.word	0x0002315c
   18130:	00022678 	.word	0x00022678

00018134 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t upd = 0U;
	uint8_t chan;

	chan = find_lsb_set(lll->chan_map_curr);
   18134:	7b03      	ldrb	r3, [r0, #12]
   18136:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   1813a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1813e:	2b00      	cmp	r3, #0
   18140:	4604      	mov	r4, r0
   18142:	fa93 f0a3 	rbit	r0, r3
   18146:	fab0 f080 	clz	r0, r0
   1814a:	bf08      	it	eq
   1814c:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   18150:	1c45      	adds	r5, r0, #1
   18152:	d051      	beq.n	181f8 <chan_prepare+0xc4>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   18154:	7b22      	ldrb	r2, [r4, #12]
   18156:	1e59      	subs	r1, r3, #1
   18158:	400b      	ands	r3, r1
   1815a:	f363 1206 	bfi	r2, r3, #4, #3
   1815e:	7322      	strb	r2, [r4, #12]

	lll_chan_set(36 + chan);
   18160:	f105 0024 	add.w	r0, r5, #36	; 0x24
   18164:	f7ff fe60 	bl	17e28 <lll_chan_set>
static inline struct pdu_adv *lll_adv_pdu_latest_get(struct lll_adv_pdu *pdu,
						     uint8_t *is_modified)
{
	uint8_t first;

	first = pdu->first;
   18168:	7be3      	ldrb	r3, [r4, #15]
	if (first != pdu->last) {
   1816a:	7c22      	ldrb	r2, [r4, #16]
   1816c:	4293      	cmp	r3, r2
   1816e:	d03d      	beq.n	181ec <chan_prepare+0xb8>
		first += 1U;
   18170:	3301      	adds	r3, #1
   18172:	b2da      	uxtb	r2, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   18174:	2a02      	cmp	r2, #2
   18176:	d036      	beq.n	181e6 <chan_prepare+0xb2>
   18178:	2327      	movs	r3, #39	; 0x27
   1817a:	2502      	movs	r5, #2
   1817c:	fb13 5502 	smlabb	r5, r3, r2, r5
			first = 0U;
		}
		pdu->first = first;
   18180:	73e2      	strb	r2, [r4, #15]
		*is_modified = 1U;
   18182:	2701      	movs	r7, #1
	}

	return (void *)pdu->pdu[first];
   18184:	f104 080f 	add.w	r8, r4, #15
   18188:	eb08 0605 	add.w	r6, r8, r5

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1818c:	4630      	mov	r0, r6
   1818e:	f001 fa31 	bl	195f4 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   18192:	f818 3005 	ldrb.w	r3, [r8, r5]
   18196:	f003 030f 	and.w	r3, r3, #15
   1819a:	2b02      	cmp	r3, #2
   1819c:	d044      	beq.n	18228 <chan_prepare+0xf4>
	first = pdu->first;
   1819e:	4620      	mov	r0, r4
	if (first != pdu->last) {
   181a0:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
	first = pdu->first;
   181a4:	f810 3f5f 	ldrb.w	r3, [r0, #95]!
	if (first != pdu->last) {
   181a8:	429a      	cmp	r2, r3
   181aa:	d036      	beq.n	1821a <chan_prepare+0xe6>
		first += 1U;
   181ac:	3301      	adds	r3, #1
   181ae:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   181b0:	2b02      	cmp	r3, #2
   181b2:	d042      	beq.n	1823a <chan_prepare+0x106>
   181b4:	2227      	movs	r2, #39	; 0x27
   181b6:	2102      	movs	r1, #2
   181b8:	fb12 1203 	smlabb	r2, r2, r3, r1
		pdu->first = first;
   181bc:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
	return (void *)pdu->pdu[first];
   181c0:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
			/* Copy the address from the adv packet we will send
			 * into the scan response.
			 */
			memcpy(&scan_pdu->scan_rsp.addr[0],
   181c2:	3002      	adds	r0, #2
   181c4:	2206      	movs	r2, #6
   181c6:	1cb1      	adds	r1, r6, #2
   181c8:	f006 fe13 	bl	1edf2 <memcpy>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   181cc:	4621      	mov	r1, r4
   181ce:	481c      	ldr	r0, [pc, #112]	; (18240 <chan_prepare+0x10c>)
   181d0:	f001 f950 	bl	19474 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   181d4:	2096      	movs	r0, #150	; 0x96
   181d6:	f001 fb0f 	bl	197f8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   181da:	2000      	movs	r0, #0
   181dc:	f001 fa84 	bl	196e8 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   181e0:	4630      	mov	r0, r6
   181e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   181e6:	4615      	mov	r5, r2
			first = 0U;
   181e8:	2200      	movs	r2, #0
   181ea:	e7c9      	b.n	18180 <chan_prepare+0x4c>
   181ec:	2527      	movs	r5, #39	; 0x27
   181ee:	2202      	movs	r2, #2
   181f0:	fb15 2503 	smlabb	r5, r5, r3, r2
	uint8_t upd = 0U;
   181f4:	2700      	movs	r7, #0
   181f6:	e7c5      	b.n	18184 <chan_prepare+0x50>
	LL_ASSERT(chan);
   181f8:	4a12      	ldr	r2, [pc, #72]	; (18244 <chan_prepare+0x110>)
   181fa:	4913      	ldr	r1, [pc, #76]	; (18248 <chan_prepare+0x114>)
   181fc:	4813      	ldr	r0, [pc, #76]	; (1824c <chan_prepare+0x118>)
   181fe:	f240 234a 	movw	r3, #586	; 0x24a
   18202:	f004 fade 	bl	1c7c2 <printk>
   18206:	4040      	eors	r0, r0
   18208:	f380 8811 	msr	BASEPRI, r0
   1820c:	f04f 0003 	mov.w	r0, #3
   18210:	df02      	svc	2
   18212:	7b23      	ldrb	r3, [r4, #12]
   18214:	f3c3 1302 	ubfx	r3, r3, #4, #3
   18218:	e79c      	b.n	18154 <chan_prepare+0x20>
		if (upd) {
   1821a:	2f00      	cmp	r7, #0
   1821c:	d0d6      	beq.n	181cc <chan_prepare+0x98>
	return (void *)pdu->pdu[first];
   1821e:	2327      	movs	r3, #39	; 0x27
   18220:	fb03 0002 	mla	r0, r3, r2, r0
   18224:	3002      	adds	r0, #2
   18226:	e7cc      	b.n	181c2 <chan_prepare+0x8e>
		radio_isr_set(isr_done, lll);
   18228:	4809      	ldr	r0, [pc, #36]	; (18250 <chan_prepare+0x11c>)
   1822a:	4621      	mov	r1, r4
   1822c:	f001 f922 	bl	19474 <radio_isr_set>
		radio_switch_complete_and_disable();
   18230:	f001 fa74 	bl	1971c <radio_switch_complete_and_disable>
}
   18234:	4630      	mov	r0, r6
   18236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1823a:	461a      	mov	r2, r3
			first = 0U;
   1823c:	2300      	movs	r3, #0
   1823e:	e7bd      	b.n	181bc <chan_prepare+0x88>
   18240:	00018085 	.word	0x00018085
   18244:	00023110 	.word	0x00023110
   18248:	00022dd4 	.word	0x00022dd4
   1824c:	00022678 	.word	0x00022678
   18250:	0001847d 	.word	0x0001847d

00018254 <prepare_cb>:
{
   18254:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_adv *lll = prepare_param->param;
   18256:	68c5      	ldr	r5, [r0, #12]
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   18258:	4b43      	ldr	r3, [pc, #268]	; (18368 <prepare_cb+0x114>)

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1825a:	792c      	ldrb	r4, [r5, #4]
{
   1825c:	b083      	sub	sp, #12
	if (lll_is_stop(lll)) {
   1825e:	f014 0401 	ands.w	r4, r4, #1
	uint32_t aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   18262:	9301      	str	r3, [sp, #4]
	if (lll_is_stop(lll)) {
   18264:	d153      	bne.n	1830e <prepare_cb+0xba>
	radio_reset();
   18266:	4606      	mov	r6, r0
   18268:	f001 f924 	bl	194b4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1826c:	4620      	mov	r0, r4
   1826e:	f001 f955 	bl	1951c <radio_tx_power_set>
	radio_phy_set(0, 0);
   18272:	4621      	mov	r1, r4
   18274:	4620      	mov	r0, r4
   18276:	f001 f941 	bl	194fc <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   1827a:	4622      	mov	r2, r4
   1827c:	2125      	movs	r1, #37	; 0x25
   1827e:	2008      	movs	r0, #8
   18280:	f001 f984 	bl	1958c <radio_pkt_configure>
	radio_aa_set((uint8_t *)&aa);
   18284:	a801      	add	r0, sp, #4
   18286:	f001 f967 	bl	19558 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1828a:	4938      	ldr	r1, [pc, #224]	; (1836c <prepare_cb+0x118>)
   1828c:	f240 605b 	movw	r0, #1627	; 0x65b
   18290:	f001 fa08 	bl	196a4 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   18294:	7b2b      	ldrb	r3, [r5, #12]
   18296:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1829a:	f362 1306 	bfi	r3, r2, #4, #3
   1829e:	732b      	strb	r3, [r5, #12]
	pdu = chan_prepare(lll);
   182a0:	4628      	mov	r0, r5
   182a2:	f7ff ff47 	bl	18134 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   182a6:	f7ff fa7b 	bl	177a0 <ull_filter_lll_rl_enabled>
   182aa:	bb18      	cbnz	r0, 182f4 <prepare_cb+0xa0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   182ac:	7b6b      	ldrb	r3, [r5, #13]
   182ae:	079b      	lsls	r3, r3, #30
   182b0:	d14b      	bne.n	1834a <prepare_cb+0xf6>
	evt = HDR_LLL2EVT(lll);
   182b2:	682f      	ldr	r7, [r5, #0]
	ticks_at_event = prepare_param->ticks_at_expire;
   182b4:	6834      	ldr	r4, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   182b6:	4638      	mov	r0, r7
   182b8:	f7ff fd96 	bl	17de8 <lll_evt_offset_get>
   182bc:	4404      	add	r4, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   182be:	6872      	ldr	r2, [r6, #4]
   182c0:	f104 0109 	add.w	r1, r4, #9
   182c4:	2001      	movs	r0, #1
   182c6:	f001 faa3 	bl	19810 <radio_tmr_start>
	radio_tmr_end_capture();
   182ca:	f001 fb75 	bl	199b8 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   182ce:	4628      	mov	r0, r5
   182d0:	f7fa fffe 	bl	132d0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   182d4:	1c81      	adds	r1, r0, #2
   182d6:	4622      	mov	r2, r4
   182d8:	b2c9      	uxtb	r1, r1
   182da:	4638      	mov	r0, r7
   182dc:	f7ff fd92 	bl	17e04 <lll_preempt_calc>
   182e0:	b1f8      	cbz	r0, 18322 <prepare_cb+0xce>
		radio_isr_set(isr_abort, lll);
   182e2:	4823      	ldr	r0, [pc, #140]	; (18370 <prepare_cb+0x11c>)
   182e4:	4629      	mov	r1, r5
   182e6:	f001 f8c5 	bl	19474 <radio_isr_set>
		radio_disable();
   182ea:	f001 f999 	bl	19620 <radio_disable>
}
   182ee:	2000      	movs	r0, #0
   182f0:	b003      	add	sp, #12
   182f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   182f4:	7b68      	ldrb	r0, [r5, #13]
   182f6:	f010 0003 	ands.w	r0, r0, #3
   182fa:	bf18      	it	ne
   182fc:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   182fe:	f7ff fa05 	bl	1770c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   18302:	7841      	ldrb	r1, [r0, #1]
   18304:	1c82      	adds	r2, r0, #2
   18306:	7800      	ldrb	r0, [r0, #0]
   18308:	f001 fa28 	bl	1975c <radio_filter_configure>
   1830c:	e7d1      	b.n	182b2 <prepare_cb+0x5e>
		err = lll_hfclock_off();
   1830e:	f7ff fe8f 	bl	18030 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   18312:	2800      	cmp	r0, #0
   18314:	db1b      	blt.n	1834e <prepare_cb+0xfa>
		lll_done(NULL);
   18316:	2000      	movs	r0, #0
   18318:	f7ff fd0e 	bl	17d38 <lll_done>
}
   1831c:	2000      	movs	r0, #0
   1831e:	b003      	add	sp, #12
   18320:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = lll_prepare_done(lll);
   18322:	4628      	mov	r0, r5
   18324:	f7ff fd06 	bl	17d34 <lll_prepare_done>
		LL_ASSERT(!ret);
   18328:	2800      	cmp	r0, #0
   1832a:	d0e0      	beq.n	182ee <prepare_cb+0x9a>
   1832c:	4a11      	ldr	r2, [pc, #68]	; (18374 <prepare_cb+0x120>)
   1832e:	4912      	ldr	r1, [pc, #72]	; (18378 <prepare_cb+0x124>)
   18330:	4812      	ldr	r0, [pc, #72]	; (1837c <prepare_cb+0x128>)
   18332:	23eb      	movs	r3, #235	; 0xeb
   18334:	f004 fa45 	bl	1c7c2 <printk>
   18338:	4040      	eors	r0, r0
   1833a:	f380 8811 	msr	BASEPRI, r0
   1833e:	f04f 0003 	mov.w	r0, #3
   18342:	df02      	svc	2
}
   18344:	2000      	movs	r0, #0
   18346:	b003      	add	sp, #12
   18348:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   1834a:	2001      	movs	r0, #1
   1834c:	e7d7      	b.n	182fe <prepare_cb+0xaa>
		LL_ASSERT(err >= 0);
   1834e:	4a09      	ldr	r2, [pc, #36]	; (18374 <prepare_cb+0x120>)
   18350:	490b      	ldr	r1, [pc, #44]	; (18380 <prepare_cb+0x12c>)
   18352:	480a      	ldr	r0, [pc, #40]	; (1837c <prepare_cb+0x128>)
   18354:	238e      	movs	r3, #142	; 0x8e
   18356:	f004 fa34 	bl	1c7c2 <printk>
   1835a:	4040      	eors	r0, r0
   1835c:	f380 8811 	msr	BASEPRI, r0
   18360:	f04f 0003 	mov.w	r0, #3
   18364:	df02      	svc	2
   18366:	e7d6      	b.n	18316 <prepare_cb+0xc2>
   18368:	8e89bed6 	.word	0x8e89bed6
   1836c:	00555555 	.word	0x00555555
   18370:	0001806d 	.word	0x0001806d
   18374:	00023110 	.word	0x00023110
   18378:	00022900 	.word	0x00022900
   1837c:	00022678 	.word	0x00022678
   18380:	000230e4 	.word	0x000230e4

00018384 <resume_prepare_cb>:
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   18384:	68c3      	ldr	r3, [r0, #12]
{
   18386:	b570      	push	{r4, r5, r6, lr}
	struct evt_hdr *evt = HDR_LLL2EVT(p->param);
   18388:	681e      	ldr	r6, [r3, #0]
{
   1838a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1838c:	f7f7 ff5a 	bl	10244 <ticker_ticks_now_get>
   18390:	4605      	mov	r5, r0
   18392:	4630      	mov	r0, r6
   18394:	f7ff fd28 	bl	17de8 <lll_evt_offset_get>
	p->remainder = 0;
   18398:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1839a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1839c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   183a0:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   183a2:	4620      	mov	r0, r4
}
   183a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   183a8:	f7ff bf54 	b.w	18254 <prepare_cb>

000183ac <is_abort_cb>:
	if (next != curr) {
   183ac:	4282      	cmp	r2, r0
{
   183ae:	b508      	push	{r3, lr}
	if (next != curr) {
   183b0:	d011      	beq.n	183d6 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   183b2:	7b12      	ldrb	r2, [r2, #12]
   183b4:	07d2      	lsls	r2, r2, #31
   183b6:	d402      	bmi.n	183be <is_abort_cb+0x12>
			return -ECANCELED;
   183b8:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   183bc:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   183be:	4a14      	ldr	r2, [pc, #80]	; (18410 <is_abort_cb+0x64>)
   183c0:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   183c2:	9a02      	ldr	r2, [sp, #8]
   183c4:	2300      	movs	r3, #0
   183c6:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   183c8:	f7ff fe1a 	bl	18000 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   183cc:	2800      	cmp	r0, #0
   183ce:	db0f      	blt.n	183f0 <is_abort_cb+0x44>
   183d0:	f06f 000a 	mvn.w	r0, #10
}
   183d4:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   183d6:	7bd3      	ldrb	r3, [r2, #15]
   183d8:	2127      	movs	r1, #39	; 0x27
   183da:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   183de:	7c53      	ldrb	r3, [r2, #17]
   183e0:	f003 030f 	and.w	r3, r3, #15
   183e4:	2b01      	cmp	r3, #1
		return 0;
   183e6:	bf14      	ite	ne
   183e8:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   183ec:	2000      	moveq	r0, #0
}
   183ee:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   183f0:	4a08      	ldr	r2, [pc, #32]	; (18414 <is_abort_cb+0x68>)
   183f2:	4909      	ldr	r1, [pc, #36]	; (18418 <is_abort_cb+0x6c>)
   183f4:	4809      	ldr	r0, [pc, #36]	; (1841c <is_abort_cb+0x70>)
   183f6:	f240 1315 	movw	r3, #277	; 0x115
   183fa:	f004 f9e2 	bl	1c7c2 <printk>
   183fe:	4040      	eors	r0, r0
   18400:	f380 8811 	msr	BASEPRI, r0
   18404:	f04f 0003 	mov.w	r0, #3
   18408:	df02      	svc	2
   1840a:	f06f 000a 	mvn.w	r0, #10
}
   1840e:	bd08      	pop	{r3, pc}
   18410:	00018385 	.word	0x00018385
   18414:	00023110 	.word	0x00023110
   18418:	000230e4 	.word	0x000230e4
   1841c:	00022678 	.word	0x00022678

00018420 <abort_cb>:
{
   18420:	b510      	push	{r4, lr}
	if (!prepare_param) {
   18422:	b1d8      	cbz	r0, 1845c <abort_cb+0x3c>
	err = lll_hfclock_off();
   18424:	460c      	mov	r4, r1
   18426:	f7ff fe03 	bl	18030 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1842a:	2800      	cmp	r0, #0
   1842c:	db04      	blt.n	18438 <abort_cb+0x18>
	lll_done(param);
   1842e:	4620      	mov	r0, r4
}
   18430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18434:	f7ff bc80 	b.w	17d38 <lll_done>
	LL_ASSERT(err >= 0);
   18438:	4a0c      	ldr	r2, [pc, #48]	; (1846c <abort_cb+0x4c>)
   1843a:	490d      	ldr	r1, [pc, #52]	; (18470 <abort_cb+0x50>)
   1843c:	480d      	ldr	r0, [pc, #52]	; (18474 <abort_cb+0x54>)
   1843e:	f240 133b 	movw	r3, #315	; 0x13b
   18442:	f004 f9be 	bl	1c7c2 <printk>
   18446:	4040      	eors	r0, r0
   18448:	f380 8811 	msr	BASEPRI, r0
   1844c:	f04f 0003 	mov.w	r0, #3
   18450:	df02      	svc	2
	lll_done(param);
   18452:	4620      	mov	r0, r4
}
   18454:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   18458:	f7ff bc6e 	b.w	17d38 <lll_done>
		radio_isr_set(isr_abort, param);
   1845c:	4806      	ldr	r0, [pc, #24]	; (18478 <abort_cb+0x58>)
   1845e:	f001 f809 	bl	19474 <radio_isr_set>
}
   18462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   18466:	f001 b8db 	b.w	19620 <radio_disable>
   1846a:	bf00      	nop
   1846c:	00023110 	.word	0x00023110
   18470:	000230e4 	.word	0x000230e4
   18474:	00022678 	.word	0x00022678
   18478:	0001806d 	.word	0x0001806d

0001847c <isr_done>:
{
   1847c:	b510      	push	{r4, lr}
   1847e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   18480:	f7ff fd28 	bl	17ed4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   18484:	7b23      	ldrb	r3, [r4, #12]
   18486:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1848a:	2a01      	cmp	r2, #1
   1848c:	d105      	bne.n	1849a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1848e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   18492:	f362 1306 	bfi	r3, r2, #4, #3
   18496:	7323      	strb	r3, [r4, #12]
   18498:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   1849a:	f013 0f70 	tst.w	r3, #112	; 0x70
   1849e:	d106      	bne.n	184ae <isr_done+0x32>
	radio_filter_disable();
   184a0:	f001 f978 	bl	19794 <radio_filter_disable>
	lll_isr_cleanup(param);
   184a4:	4620      	mov	r0, r4
}
   184a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   184aa:	f7ff bd21 	b.w	17ef0 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   184ae:	4620      	mov	r0, r4
   184b0:	f7ff fe40 	bl	18134 <chan_prepare>
		radio_tx_enable();
   184b4:	f001 f8ae 	bl	19614 <radio_tx_enable>
}
   184b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   184bc:	f001 ba7c 	b.w	199b8 <radio_tmr_end_capture>

000184c0 <isr_rx>:
{
   184c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184c4:	b083      	sub	sp, #12
   184c6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   184c8:	f001 f8d8 	bl	1967c <radio_is_done>
	if (trx_done) {
   184cc:	f010 0fff 	tst.w	r0, #255	; 0xff
   184d0:	d10a      	bne.n	184e8 <isr_rx+0x28>
	lll_isr_status_reset();
   184d2:	f7ff fcff 	bl	17ed4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   184d6:	48c7      	ldr	r0, [pc, #796]	; (187f4 <isr_rx+0x334>)
   184d8:	4621      	mov	r1, r4
   184da:	f000 ffcb 	bl	19474 <radio_isr_set>
	radio_disable();
   184de:	f001 f89f 	bl	19620 <radio_disable>
}
   184e2:	b003      	add	sp, #12
   184e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   184e8:	f001 f8e8 	bl	196bc <radio_crc_is_valid>
   184ec:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   184ee:	f001 f963 	bl	197b8 <radio_filter_has_match>
   184f2:	4605      	mov	r5, r0
		devmatch_id = radio_filter_match_get();
   184f4:	f001 f96a 	bl	197cc <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   184f8:	f001 fb44 	bl	19b84 <radio_ar_has_match>
   184fc:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   184fe:	f001 fb2f 	bl	19b60 <radio_ar_match_get>
   18502:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   18504:	f001 f920 	bl	19748 <radio_rssi_is_ready>
	lll_isr_status_reset();
   18508:	f7ff fce4 	bl	17ed4 <lll_isr_status_reset>
	if (crc_ok) {
   1850c:	f017 0fff 	tst.w	r7, #255	; 0xff
   18510:	d0e1      	beq.n	184d6 <isr_rx+0x16>
{
	struct pdu_adv *pdu_rx, *pdu_adv;

#if defined(CONFIG_BT_CTLR_PRIVACY)
	/* An IRK match implies address resolution enabled */
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   18512:	f016 07ff 	ands.w	r7, r6, #255	; 0xff
   18516:	f040 8085 	bne.w	18624 <isr_rx+0x164>
   1851a:	20ff      	movs	r0, #255	; 0xff
   1851c:	f88d 0007 	strb.w	r0, [sp, #7]
				    FILTER_IDX_NONE;
#else
	uint8_t rl_idx = FILTER_IDX_NONE;
#endif /* CONFIG_BT_CTLR_PRIVACY */

	pdu_rx = (void *)radio_pkt_scratch_get();
   18520:	f001 f8da 	bl	196d8 <radio_pkt_scratch_get>
   18524:	4606      	mov	r6, r0
	pdu_adv = lll_adv_data_curr_get(lll);

	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18526:	7800      	ldrb	r0, [r0, #0]
   18528:	7be1      	ldrb	r1, [r4, #15]
   1852a:	f04f 0827 	mov.w	r8, #39	; 0x27
   1852e:	2211      	movs	r2, #17
   18530:	f000 030f 	and.w	r3, r0, #15
   18534:	fb18 2801 	smlabb	r8, r8, r1, r2
   18538:	2b03      	cmp	r3, #3
		devmatch_ok = radio_filter_has_match();
   1853a:	b2ed      	uxtb	r5, r5
   1853c:	eb04 0908 	add.w	r9, r4, r8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   18540:	f000 8083 	beq.w	1864a <isr_rx+0x18a>
					 CONFIG_BT_CTLR_GPIO_PA_OFFSET);
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN */
		return 0;

#if defined(CONFIG_BT_PERIPHERAL)
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   18544:	2b05      	cmp	r3, #5
   18546:	d1c6      	bne.n	184d6 <isr_rx+0x16>
   18548:	7873      	ldrb	r3, [r6, #1]
   1854a:	2b22      	cmp	r3, #34	; 0x22
   1854c:	d1c3      	bne.n	184d6 <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1854e:	f814 3008 	ldrb.w	r3, [r4, r8]
   18552:	f003 030f 	and.w	r3, r3, #15
   18556:	2b01      	cmp	r3, #1
   18558:	f000 80c7 	beq.w	186ea <isr_rx+0x22a>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   1855c:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1855e:	0799      	lsls	r1, r3, #30
   18560:	d565      	bpl.n	1862e <isr_rx+0x16e>
		(((lll->filter_policy & 0x02) != 0) &&
   18562:	2d00      	cmp	r5, #0
   18564:	f000 80b9 	beq.w	186da <isr_rx+0x21a>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   18568:	f814 3008 	ldrb.w	r3, [r4, r8]
   1856c:	7831      	ldrb	r1, [r6, #0]
   1856e:	f3c3 1280 	ubfx	r2, r3, #6, #1
   18572:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   18576:	d1ae      	bne.n	184d6 <isr_rx+0x16>
   18578:	f003 030f 	and.w	r3, r3, #15
   1857c:	2b01      	cmp	r3, #1
   1857e:	f109 0902 	add.w	r9, r9, #2
   18582:	f106 0508 	add.w	r5, r6, #8
   18586:	f000 80df 	beq.w	18748 <isr_rx+0x288>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   1858a:	4629      	mov	r1, r5
   1858c:	4648      	mov	r0, r9
   1858e:	2206      	movs	r2, #6
   18590:	f006 fc1f 	bl	1edd2 <memcmp>
			 BDADDR_SIZE)) ||
   18594:	fab0 f080 	clz	r0, r0
   18598:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1859a:	2800      	cmp	r0, #0
   1859c:	d09b      	beq.n	184d6 <isr_rx+0x16>
				   &rl_idx) &&
   1859e:	68a3      	ldr	r3, [r4, #8]
   185a0:	2b00      	cmp	r3, #0
   185a2:	d098      	beq.n	184d6 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   185a4:	2004      	movs	r0, #4
   185a6:	f7fa fa73 	bl	12a90 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   185aa:	2800      	cmp	r0, #0
   185ac:	d093      	beq.n	184d6 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   185ae:	4892      	ldr	r0, [pc, #584]	; (187f8 <isr_rx+0x338>)
   185b0:	4621      	mov	r1, r4
   185b2:	f000 ff5f 	bl	19474 <radio_isr_set>
		radio_disable();
   185b6:	f001 f833 	bl	19620 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   185ba:	f001 f855 	bl	19668 <radio_is_ready>
   185be:	2800      	cmp	r0, #0
   185c0:	d17d      	bne.n	186be <isr_rx+0x1fe>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   185c2:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   185c4:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   185c8:	07db      	lsls	r3, r3, #31
   185ca:	7122      	strb	r2, [r4, #4]
   185cc:	d469      	bmi.n	186a2 <isr_rx+0x1e2>
		rx = ull_pdu_rx_alloc();
   185ce:	f7fa fa7d 	bl	12acc <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   185d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   185d6:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   185d8:	220a      	movs	r2, #10
		rx->hdr.handle = 0xffff;
   185da:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   185dc:	4631      	mov	r1, r6
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   185de:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   185e0:	2224      	movs	r2, #36	; 0x24
   185e2:	301c      	adds	r0, #28
   185e4:	f006 fc05 	bl	1edf2 <memcpy>
		ftr->param = lll;
   185e8:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   185ea:	f001 f991 	bl	19910 <radio_tmr_start_get>
   185ee:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   185f0:	f001 f9ea 	bl	199c8 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   185f4:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   185f6:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   185f8:	4608      	mov	r0, r1
   185fa:	f001 f801 	bl	19600 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   185fe:	1a24      	subs	r4, r4, r0
   18600:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   18602:	2f00      	cmp	r7, #0
   18604:	d04b      	beq.n	1869e <isr_rx+0x1de>
   18606:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1860a:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1860c:	f7fa fa5e 	bl	12acc <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   18610:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   18612:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   18614:	6828      	ldr	r0, [r5, #0]
   18616:	f7fa fa71 	bl	12afc <ull_rx_put>
		ull_rx_sched();
   1861a:	f7fa fa7f 	bl	12b1c <ull_rx_sched>
}
   1861e:	b003      	add	sp, #12
   18620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   18624:	fa5f f088 	uxtb.w	r0, r8
   18628:	f7fe ffee 	bl	17608 <ull_filter_lll_rl_irk_idx>
   1862c:	e776      	b.n	1851c <isr_rx+0x5c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1862e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18632:	f10d 0207 	add.w	r2, sp, #7
   18636:	1cb1      	adds	r1, r6, #2
   18638:	f7ff f874 	bl	17724 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1863c:	2800      	cmp	r0, #0
   1863e:	d193      	bne.n	18568 <isr_rx+0xa8>
		(((lll->filter_policy & 0x02) != 0) &&
   18640:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   18642:	079a      	lsls	r2, r3, #30
   18644:	f57f af47 	bpl.w	184d6 <isr_rx+0x16>
   18648:	e78b      	b.n	18562 <isr_rx+0xa2>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1864a:	7873      	ldrb	r3, [r6, #1]
   1864c:	2b0c      	cmp	r3, #12
   1864e:	f47f af42 	bne.w	184d6 <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   18652:	f814 3008 	ldrb.w	r3, [r4, r8]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   18656:	f003 030f 	and.w	r3, r3, #15
   1865a:	2b01      	cmp	r3, #1
   1865c:	f43f af3b 	beq.w	184d6 <isr_rx+0x16>
	return ((((lll->filter_policy & 0x01) == 0) &&
   18660:	7b63      	ldrb	r3, [r4, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   18662:	07da      	lsls	r2, r3, #31
   18664:	d50d      	bpl.n	18682 <isr_rx+0x1c2>
		(((lll->filter_policy & 0x01) != 0) &&
   18666:	2d00      	cmp	r5, #0
   18668:	d077      	beq.n	1875a <isr_rx+0x29a>
	return (adv->tx_addr == sr->rx_addr) &&
   1866a:	f814 3008 	ldrb.w	r3, [r4, r8]
   1866e:	7830      	ldrb	r0, [r6, #0]
   18670:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18674:	ebb3 1fd0 	cmp.w	r3, r0, lsr #7
   18678:	f000 8089 	beq.w	1878e <isr_rx+0x2ce>
   1867c:	f000 030f 	and.w	r3, r0, #15
   18680:	e760      	b.n	18544 <isr_rx+0x84>
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   18682:	f3c0 1080 	ubfx	r0, r0, #6, #1
   18686:	f10d 0207 	add.w	r2, sp, #7
   1868a:	1cb1      	adds	r1, r6, #2
   1868c:	f7ff f84a 	bl	17724 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   18690:	2800      	cmp	r0, #0
   18692:	d1ea      	bne.n	1866a <isr_rx+0x1aa>
		(((lll->filter_policy & 0x01) != 0) &&
   18694:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   18696:	07db      	lsls	r3, r3, #31
   18698:	d4e5      	bmi.n	18666 <isr_rx+0x1a6>
   1869a:	7830      	ldrb	r0, [r6, #0]
   1869c:	e7ee      	b.n	1867c <isr_rx+0x1bc>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1869e:	23ff      	movs	r3, #255	; 0xff
   186a0:	e7b3      	b.n	1860a <isr_rx+0x14a>
		LL_ASSERT(!ret);
   186a2:	4a56      	ldr	r2, [pc, #344]	; (187fc <isr_rx+0x33c>)
   186a4:	4956      	ldr	r1, [pc, #344]	; (18800 <isr_rx+0x340>)
   186a6:	4857      	ldr	r0, [pc, #348]	; (18804 <isr_rx+0x344>)
   186a8:	f240 23d9 	movw	r3, #729	; 0x2d9
   186ac:	f004 f889 	bl	1c7c2 <printk>
   186b0:	4040      	eors	r0, r0
   186b2:	f380 8811 	msr	BASEPRI, r0
   186b6:	f04f 0003 	mov.w	r0, #3
   186ba:	df02      	svc	2
   186bc:	e787      	b.n	185ce <isr_rx+0x10e>
		LL_ASSERT(!radio_is_ready());
   186be:	4a4f      	ldr	r2, [pc, #316]	; (187fc <isr_rx+0x33c>)
   186c0:	4951      	ldr	r1, [pc, #324]	; (18808 <isr_rx+0x348>)
   186c2:	4850      	ldr	r0, [pc, #320]	; (18804 <isr_rx+0x344>)
   186c4:	f240 23cb 	movw	r3, #715	; 0x2cb
   186c8:	f004 f87b 	bl	1c7c2 <printk>
   186cc:	4040      	eors	r0, r0
   186ce:	f380 8811 	msr	BASEPRI, r0
   186d2:	f04f 0003 	mov.w	r0, #3
   186d6:	df02      	svc	2
   186d8:	e773      	b.n	185c2 <isr_rx+0x102>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   186da:	f89d 0007 	ldrb.w	r0, [sp, #7]
   186de:	f7fe ffe5 	bl	176ac <ull_filter_lll_irk_whitelisted>
   186e2:	2800      	cmp	r0, #0
   186e4:	f47f af40 	bne.w	18568 <isr_rx+0xa8>
   186e8:	e6f5      	b.n	184d6 <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   186ea:	1cb5      	adds	r5, r6, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   186ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
   186f0:	4629      	mov	r1, r5
   186f2:	f10d 0207 	add.w	r2, sp, #7
   186f6:	f7ff f815 	bl	17724 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   186fa:	2800      	cmp	r0, #0
   186fc:	f43f aeeb 	beq.w	184d6 <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   18700:	f814 3008 	ldrb.w	r3, [r4, r8]
   18704:	7831      	ldrb	r1, [r6, #0]
   18706:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1870a:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   1870e:	f47f aee2 	bne.w	184d6 <isr_rx+0x16>
   18712:	f003 030f 	and.w	r3, r3, #15
   18716:	2b01      	cmp	r3, #1
   18718:	f109 0b02 	add.w	fp, r9, #2
   1871c:	f106 0a08 	add.w	sl, r6, #8
   18720:	d060      	beq.n	187e4 <isr_rx+0x324>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   18722:	4651      	mov	r1, sl
   18724:	4658      	mov	r0, fp
   18726:	2206      	movs	r2, #6
   18728:	f006 fb53 	bl	1edd2 <memcmp>
			 BDADDR_SIZE)) ||
   1872c:	2800      	cmp	r0, #0
   1872e:	f47f aed2 	bne.w	184d6 <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   18732:	f89d 0007 	ldrb.w	r0, [sp, #7]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   18736:	28ff      	cmp	r0, #255	; 0xff
   18738:	d016      	beq.n	18768 <isr_rx+0x2a8>
   1873a:	7ba3      	ldrb	r3, [r4, #14]
   1873c:	2bff      	cmp	r3, #255	; 0xff
   1873e:	d013      	beq.n	18768 <isr_rx+0x2a8>
		return rl_idx == lll->rl_idx;
   18740:	1ac5      	subs	r5, r0, r3
   18742:	4268      	negs	r0, r5
   18744:	4168      	adcs	r0, r5
   18746:	e728      	b.n	1859a <isr_rx+0xda>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   18748:	2206      	movs	r2, #6
   1874a:	4629      	mov	r1, r5
   1874c:	4648      	mov	r0, r9
   1874e:	f006 fb40 	bl	1edd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18752:	2800      	cmp	r0, #0
   18754:	f43f af23 	beq.w	1859e <isr_rx+0xde>
   18758:	e717      	b.n	1858a <isr_rx+0xca>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1875a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1875e:	f7fe ffa5 	bl	176ac <ull_filter_lll_irk_whitelisted>
   18762:	2800      	cmp	r0, #0
   18764:	d181      	bne.n	1866a <isr_rx+0x1aa>
   18766:	e798      	b.n	1869a <isr_rx+0x1da>
	return (adv->rx_addr == ci->tx_addr) &&
   18768:	7833      	ldrb	r3, [r6, #0]
   1876a:	f814 2008 	ldrb.w	r2, [r4, r8]
   1876e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   18772:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   18776:	f47f aeae 	bne.w	184d6 <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   1877a:	4629      	mov	r1, r5
   1877c:	f109 0008 	add.w	r0, r9, #8
   18780:	2206      	movs	r2, #6
   18782:	f006 fb26 	bl	1edd2 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   18786:	fab0 f080 	clz	r0, r0
   1878a:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   1878c:	e705      	b.n	1859a <isr_rx+0xda>
		!memcmp(adv->adv_ind.addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1878e:	2206      	movs	r2, #6
   18790:	f106 0108 	add.w	r1, r6, #8
   18794:	f109 0002 	add.w	r0, r9, #2
   18798:	f006 fb1b 	bl	1edd2 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   1879c:	2800      	cmp	r0, #0
   1879e:	f47f af7c 	bne.w	1869a <isr_rx+0x1da>
		radio_isr_set(isr_done, lll);
   187a2:	4814      	ldr	r0, [pc, #80]	; (187f4 <isr_rx+0x334>)
   187a4:	4621      	mov	r1, r4
   187a6:	f000 fe65 	bl	19474 <radio_isr_set>
		radio_switch_complete_and_disable();
   187aa:	f000 ffb7 	bl	1971c <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   187ae:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   187b2:	2327      	movs	r3, #39	; 0x27
   187b4:	fb03 4000 	mla	r0, r3, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   187b8:	3061      	adds	r0, #97	; 0x61
   187ba:	f000 ff1b 	bl	195f4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   187be:	f000 ff53 	bl	19668 <radio_is_ready>
   187c2:	2800      	cmp	r0, #0
   187c4:	f43f ae8d 	beq.w	184e2 <isr_rx+0x22>
   187c8:	4a0c      	ldr	r2, [pc, #48]	; (187fc <isr_rx+0x33c>)
   187ca:	490f      	ldr	r1, [pc, #60]	; (18808 <isr_rx+0x348>)
   187cc:	480d      	ldr	r0, [pc, #52]	; (18804 <isr_rx+0x344>)
   187ce:	f240 238f 	movw	r3, #655	; 0x28f
   187d2:	f003 fff6 	bl	1c7c2 <printk>
   187d6:	4040      	eors	r0, r0
   187d8:	f380 8811 	msr	BASEPRI, r0
   187dc:	f04f 0003 	mov.w	r0, #3
   187e0:	df02      	svc	2
		if (!err) {
   187e2:	e67e      	b.n	184e2 <isr_rx+0x22>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   187e4:	2206      	movs	r2, #6
   187e6:	4651      	mov	r1, sl
   187e8:	4658      	mov	r0, fp
   187ea:	f006 faf2 	bl	1edd2 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   187ee:	2800      	cmp	r0, #0
   187f0:	d09f      	beq.n	18732 <isr_rx+0x272>
   187f2:	e796      	b.n	18722 <isr_rx+0x262>
   187f4:	0001847d 	.word	0x0001847d
   187f8:	0001806d 	.word	0x0001806d
   187fc:	00023110 	.word	0x00023110
   18800:	00022900 	.word	0x00022900
   18804:	00022678 	.word	0x00022678
   18808:	0002315c 	.word	0x0002315c

0001880c <lll_adv_init>:
}
   1880c:	2000      	movs	r0, #0
   1880e:	4770      	bx	lr

00018810 <lll_adv_reset>:
   18810:	2000      	movs	r0, #0
   18812:	4770      	bx	lr

00018814 <lll_adv_prepare>:
{
   18814:	b510      	push	{r4, lr}
   18816:	b082      	sub	sp, #8
   18818:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1881a:	f7ff fbf1 	bl	18000 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1881e:	2800      	cmp	r0, #0
   18820:	db19      	blt.n	18856 <lll_adv_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, p);
   18822:	4a13      	ldr	r2, [pc, #76]	; (18870 <lll_adv_prepare+0x5c>)
   18824:	4913      	ldr	r1, [pc, #76]	; (18874 <lll_adv_prepare+0x60>)
   18826:	4814      	ldr	r0, [pc, #80]	; (18878 <lll_adv_prepare+0x64>)
   18828:	9400      	str	r4, [sp, #0]
   1882a:	2300      	movs	r3, #0
   1882c:	f7ff f9f6 	bl	17c1c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   18830:	b108      	cbz	r0, 18836 <lll_adv_prepare+0x22>
   18832:	3044      	adds	r0, #68	; 0x44
   18834:	d101      	bne.n	1883a <lll_adv_prepare+0x26>
}
   18836:	b002      	add	sp, #8
   18838:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1883a:	4a10      	ldr	r2, [pc, #64]	; (1887c <lll_adv_prepare+0x68>)
   1883c:	4910      	ldr	r1, [pc, #64]	; (18880 <lll_adv_prepare+0x6c>)
   1883e:	4811      	ldr	r0, [pc, #68]	; (18884 <lll_adv_prepare+0x70>)
   18840:	2373      	movs	r3, #115	; 0x73
   18842:	f003 ffbe 	bl	1c7c2 <printk>
   18846:	4040      	eors	r0, r0
   18848:	f380 8811 	msr	BASEPRI, r0
   1884c:	f04f 0003 	mov.w	r0, #3
   18850:	df02      	svc	2
}
   18852:	b002      	add	sp, #8
   18854:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   18856:	4a09      	ldr	r2, [pc, #36]	; (1887c <lll_adv_prepare+0x68>)
   18858:	490b      	ldr	r1, [pc, #44]	; (18888 <lll_adv_prepare+0x74>)
   1885a:	480a      	ldr	r0, [pc, #40]	; (18884 <lll_adv_prepare+0x70>)
   1885c:	2370      	movs	r3, #112	; 0x70
   1885e:	f003 ffb0 	bl	1c7c2 <printk>
   18862:	4040      	eors	r0, r0
   18864:	f380 8811 	msr	BASEPRI, r0
   18868:	f04f 0003 	mov.w	r0, #3
   1886c:	df02      	svc	2
   1886e:	e7d8      	b.n	18822 <lll_adv_prepare+0xe>
   18870:	00018255 	.word	0x00018255
   18874:	00018421 	.word	0x00018421
   18878:	000183ad 	.word	0x000183ad
   1887c:	00023110 	.word	0x00023110
   18880:	00023170 	.word	0x00023170
   18884:	00022678 	.word	0x00022678
   18888:	000230e4 	.word	0x000230e4

0001888c <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1888c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1888e:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   18890:	f7ff fb20 	bl	17ed4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   18894:	f7fa f9ae 	bl	12bf4 <ull_event_done_extra_get>
	LL_ASSERT(e);
   18898:	4604      	mov	r4, r0
   1889a:	2800      	cmp	r0, #0
   1889c:	d033      	beq.n	18906 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1889e:	4b21      	ldr	r3, [pc, #132]	; (18924 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   188a0:	4921      	ldr	r1, [pc, #132]	; (18928 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   188a2:	4a22      	ldr	r2, [pc, #136]	; (1892c <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   188a4:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   188a6:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   188a8:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   188aa:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   188ac:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   188ae:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   188b0:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   188b2:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   188b4:	b11b      	cbz	r3, 188be <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   188b6:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   188ba:	2b00      	cmp	r3, #0
   188bc:	db04      	blt.n	188c8 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   188be:	4628      	mov	r0, r5
}
   188c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   188c4:	f7ff bb14 	b.w	17ef0 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   188c8:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   188cc:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   188d0:	2b02      	cmp	r3, #2
   188d2:	d016      	beq.n	18902 <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   188d4:	2b04      	cmp	r3, #4
   188d6:	bf14      	ite	ne
   188d8:	2728      	movne	r7, #40	; 0x28
   188da:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   188de:	f001 f85f 	bl	199a0 <radio_tmr_aa_restore>
   188e2:	4606      	mov	r6, r0
   188e4:	f001 f862 	bl	199ac <radio_tmr_ready_get>
			e->slave.window_widening_event_us =
   188e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   188ea:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   188ec:	2300      	movs	r3, #0
			e->slave.preamble_to_addr_us = preamble_to_addr_us;
   188ee:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->slave.start_to_address_actual_us =
   188f2:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   188f4:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   188f6:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   188f8:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   188fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   188fe:	f7ff baf7 	b.w	17ef0 <lll_isr_cleanup>
	switch (phy) {
   18902:	2718      	movs	r7, #24
   18904:	e7eb      	b.n	188de <isr_done+0x52>
	LL_ASSERT(e);
   18906:	4a0a      	ldr	r2, [pc, #40]	; (18930 <isr_done+0xa4>)
   18908:	490a      	ldr	r1, [pc, #40]	; (18934 <isr_done+0xa8>)
   1890a:	480b      	ldr	r0, [pc, #44]	; (18938 <isr_done+0xac>)
   1890c:	f240 2332 	movw	r3, #562	; 0x232
   18910:	f003 ff57 	bl	1c7c2 <printk>
   18914:	4040      	eors	r0, r0
   18916:	f380 8811 	msr	BASEPRI, r0
   1891a:	f04f 0003 	mov.w	r0, #3
   1891e:	df02      	svc	2
   18920:	e7bd      	b.n	1889e <isr_done+0x12>
   18922:	bf00      	nop
   18924:	20002ae0 	.word	0x20002ae0
   18928:	20003082 	.word	0x20003082
   1892c:	20003083 	.word	0x20003083
   18930:	00023194 	.word	0x00023194
   18934:	00022a4c 	.word	0x00022a4c
   18938:	00022678 	.word	0x00022678

0001893c <empty_tx_enqueue>:

	return 0;
}

static struct pdu_data *empty_tx_enqueue(struct lll_conn *lll)
{
   1893c:	b538      	push	{r3, r4, r5, lr}
	struct pdu_data *p;

	lll->empty = 1;
   1893e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   18942:	f043 0304 	orr.w	r3, r3, #4
   18946:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
{
   1894a:	4605      	mov	r5, r0

	p = (void *)radio_pkt_empty_get();
   1894c:	f000 fec0 	bl	196d0 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18950:	7803      	ldrb	r3, [r0, #0]
	p->len = 0;
   18952:	2200      	movs	r2, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18954:	2101      	movs	r1, #1
   18956:	f361 0301 	bfi	r3, r1, #0, #2
	p->len = 0;
   1895a:	7042      	strb	r2, [r0, #1]
	p = (void *)radio_pkt_empty_get();
   1895c:	4604      	mov	r4, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1895e:	7003      	strb	r3, [r0, #0]
	if (memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL)) {
   18960:	e9d5 0113 	ldrd	r0, r1, [r5, #76]	; 0x4c
   18964:	f7f6 f918 	bl	eb98 <memq_peek>
   18968:	7823      	ldrb	r3, [r4, #0]
   1896a:	3800      	subs	r0, #0
   1896c:	bf18      	it	ne
   1896e:	2001      	movne	r0, #1
   18970:	f360 1304 	bfi	r3, r0, #4, #1
   18974:	7023      	strb	r3, [r4, #0]
	} else {
		p->md = 0;
	}

	return p;
}
   18976:	4620      	mov	r0, r4
   18978:	bd38      	pop	{r3, r4, r5, pc}
   1897a:	bf00      	nop

0001897c <lll_conn_init>:
}
   1897c:	2000      	movs	r0, #0
   1897e:	4770      	bx	lr

00018980 <lll_conn_reset>:
   18980:	2000      	movs	r0, #0
   18982:	4770      	bx	lr

00018984 <lll_conn_ppm_local_get>:
}
   18984:	2014      	movs	r0, #20
   18986:	4770      	bx	lr

00018988 <lll_conn_ppm_get>:
	return sca_ppm_lut[sca];
   18988:	4b01      	ldr	r3, [pc, #4]	; (18990 <lll_conn_ppm_get+0x8>)
}
   1898a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1898e:	4770      	bx	lr
   18990:	0002321c 	.word	0x0002321c

00018994 <lll_conn_prepare_reset>:
	crc_expire = 0U;
   18994:	4805      	ldr	r0, [pc, #20]	; (189ac <lll_conn_prepare_reset+0x18>)
	crc_valid = 0U;
   18996:	4906      	ldr	r1, [pc, #24]	; (189b0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   18998:	4a06      	ldr	r2, [pc, #24]	; (189b4 <lll_conn_prepare_reset+0x20>)
{
   1899a:	b410      	push	{r4}
	trx_cnt = 0U;
   1899c:	2300      	movs	r3, #0
   1899e:	4c06      	ldr	r4, [pc, #24]	; (189b8 <lll_conn_prepare_reset+0x24>)
	crc_expire = 0U;
   189a0:	7003      	strb	r3, [r0, #0]
	crc_valid = 0U;
   189a2:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   189a4:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   189a6:	8023      	strh	r3, [r4, #0]
}
   189a8:	bc10      	pop	{r4}
   189aa:	4770      	bx	lr
   189ac:	20003081 	.word	0x20003081
   189b0:	20003082 	.word	0x20003082
   189b4:	20003083 	.word	0x20003083
   189b8:	20002ae0 	.word	0x20002ae0

000189bc <lll_conn_abort_cb>:
{
   189bc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   189be:	b1d0      	cbz	r0, 189f6 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   189c0:	460c      	mov	r4, r1
   189c2:	f7ff fb35 	bl	18030 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   189c6:	2800      	cmp	r0, #0
   189c8:	db04      	blt.n	189d4 <lll_conn_abort_cb+0x18>
	lll_done(param);
   189ca:	4620      	mov	r0, r4
}
   189cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   189d0:	f7ff b9b2 	b.w	17d38 <lll_done>
	LL_ASSERT(err >= 0);
   189d4:	4a0b      	ldr	r2, [pc, #44]	; (18a04 <lll_conn_abort_cb+0x48>)
   189d6:	490c      	ldr	r1, [pc, #48]	; (18a08 <lll_conn_abort_cb+0x4c>)
   189d8:	480c      	ldr	r0, [pc, #48]	; (18a0c <lll_conn_abort_cb+0x50>)
   189da:	237a      	movs	r3, #122	; 0x7a
   189dc:	f003 fef1 	bl	1c7c2 <printk>
   189e0:	4040      	eors	r0, r0
   189e2:	f380 8811 	msr	BASEPRI, r0
   189e6:	f04f 0003 	mov.w	r0, #3
   189ea:	df02      	svc	2
	lll_done(param);
   189ec:	4620      	mov	r0, r4
}
   189ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   189f2:	f7ff b9a1 	b.w	17d38 <lll_done>
		radio_isr_set(isr_done, param);
   189f6:	4806      	ldr	r0, [pc, #24]	; (18a10 <lll_conn_abort_cb+0x54>)
   189f8:	f000 fd3c 	bl	19474 <radio_isr_set>
}
   189fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   18a00:	f000 be0e 	b.w	19620 <radio_disable>
   18a04:	00023194 	.word	0x00023194
   18a08:	000230e4 	.word	0x000230e4
   18a0c:	00022678 	.word	0x00022678
   18a10:	0001888d 	.word	0x0001888d

00018a14 <lll_conn_rx_pkt_set>:
{
   18a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18a16:	4604      	mov	r4, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   18a18:	2001      	movs	r0, #1
   18a1a:	f7fa f839 	bl	12a90 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18a1e:	4606      	mov	r6, r0
   18a20:	b358      	cbz	r0, 18a7a <lll_conn_rx_pkt_set+0x66>
	phy = lll->phy_rx;
   18a22:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   18a26:	f8b4 7042 	ldrh.w	r7, [r4, #66]	; 0x42
	phy = lll->phy_rx;
   18a2a:	f005 0507 	and.w	r5, r5, #7
	radio_phy_set(phy, 0);
   18a2e:	4628      	mov	r0, r5
   18a30:	2100      	movs	r1, #0
   18a32:	f000 fd63 	bl	194fc <radio_phy_set>
	} else if (lll->enc_rx) {
   18a36:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18a3a:	006a      	lsls	r2, r5, #1
   18a3c:	071b      	lsls	r3, r3, #28
   18a3e:	f042 0201 	orr.w	r2, r2, #1
   18a42:	d510      	bpl.n	18a66 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   18a44:	1d39      	adds	r1, r7, #4
   18a46:	b2c9      	uxtb	r1, r1
   18a48:	2008      	movs	r0, #8
   18a4a:	f000 fd9f 	bl	1958c <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18a4e:	f000 fe47 	bl	196e0 <radio_pkt_decrypt_get>
   18a52:	4629      	mov	r1, r5
   18a54:	4602      	mov	r2, r0
   18a56:	f104 0063 	add.w	r0, r4, #99	; 0x63
   18a5a:	f000 ffc1 	bl	199e0 <radio_ccm_rx_pkt_set>
}
   18a5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   18a62:	f000 bdc1 	b.w	195e8 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   18a66:	b2f9      	uxtb	r1, r7
   18a68:	2008      	movs	r0, #8
   18a6a:	f000 fd8f 	bl	1958c <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   18a6e:	f106 001c 	add.w	r0, r6, #28
}
   18a72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   18a76:	f000 bdb7 	b.w	195e8 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   18a7a:	4a07      	ldr	r2, [pc, #28]	; (18a98 <lll_conn_rx_pkt_set+0x84>)
   18a7c:	4907      	ldr	r1, [pc, #28]	; (18a9c <lll_conn_rx_pkt_set+0x88>)
   18a7e:	4808      	ldr	r0, [pc, #32]	; (18aa0 <lll_conn_rx_pkt_set+0x8c>)
   18a80:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   18a84:	f003 fe9d 	bl	1c7c2 <printk>
   18a88:	4040      	eors	r0, r0
   18a8a:	f380 8811 	msr	BASEPRI, r0
   18a8e:	f04f 0003 	mov.w	r0, #3
   18a92:	df02      	svc	2
   18a94:	e7c5      	b.n	18a22 <lll_conn_rx_pkt_set+0xe>
   18a96:	bf00      	nop
   18a98:	00023194 	.word	0x00023194
   18a9c:	000231e0 	.word	0x000231e0
   18aa0:	00022678 	.word	0x00022678

00018aa4 <lll_conn_isr_tx>:
{
   18aa4:	b538      	push	{r3, r4, r5, lr}
   18aa6:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   18aa8:	f7ff fa02 	bl	17eb0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   18aac:	2096      	movs	r0, #150	; 0x96
   18aae:	f000 fea3 	bl	197f8 <radio_tmr_tifs_set>
				     lll->phy_flags);
   18ab2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   18ab6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   18aba:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   18abe:	f000 0007 	and.w	r0, r0, #7
   18ac2:	f002 0207 	and.w	r2, r2, #7
   18ac6:	2100      	movs	r1, #0
   18ac8:	f000 fe1c 	bl	19704 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   18acc:	4620      	mov	r0, r4
   18ace:	f7ff ffa1 	bl	18a14 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18ad2:	f000 fdc9 	bl	19668 <radio_is_ready>
   18ad6:	bb58      	cbnz	r0, 18b30 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   18ad8:	f000 ff7c 	bl	199d4 <radio_tmr_tifs_base_get>
   18adc:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18ade:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   18ae2:	2101      	movs	r1, #1
   18ae4:	f000 0007 	and.w	r0, r0, #7
   18ae8:	f000 fd8e 	bl	19608 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   18aec:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   18af0:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   18af4:	4405      	add	r5, r0
   18af6:	2b02      	cmp	r3, #2
   18af8:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   18afc:	d016      	beq.n	18b2c <lll_conn_isr_tx+0x88>
		return 376;
   18afe:	2b04      	cmp	r3, #4
   18b00:	bf14      	ite	ne
   18b02:	2328      	movne	r3, #40	; 0x28
   18b04:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18b08:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   18b0c:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   18b10:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   18b14:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   18b16:	f000 fd73 	bl	19600 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   18b1a:	1a28      	subs	r0, r5, r0
   18b1c:	f000 ff12 	bl	19944 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   18b20:	4621      	mov	r1, r4
   18b22:	480a      	ldr	r0, [pc, #40]	; (18b4c <lll_conn_isr_tx+0xa8>)
}
   18b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   18b28:	f000 bca4 	b.w	19474 <radio_isr_set>
	switch (phy) {
   18b2c:	2318      	movs	r3, #24
   18b2e:	e7eb      	b.n	18b08 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   18b30:	4a07      	ldr	r2, [pc, #28]	; (18b50 <lll_conn_isr_tx+0xac>)
   18b32:	4908      	ldr	r1, [pc, #32]	; (18b54 <lll_conn_isr_tx+0xb0>)
   18b34:	4808      	ldr	r0, [pc, #32]	; (18b58 <lll_conn_isr_tx+0xb4>)
   18b36:	f44f 73ba 	mov.w	r3, #372	; 0x174
   18b3a:	f003 fe42 	bl	1c7c2 <printk>
   18b3e:	4040      	eors	r0, r0
   18b40:	f380 8811 	msr	BASEPRI, r0
   18b44:	f04f 0003 	mov.w	r0, #3
   18b48:	df02      	svc	2
   18b4a:	e7c5      	b.n	18ad8 <lll_conn_isr_tx+0x34>
   18b4c:	00018c5d 	.word	0x00018c5d
   18b50:	00023194 	.word	0x00023194
   18b54:	0002315c 	.word	0x0002315c
   18b58:	00022678 	.word	0x00022678

00018b5c <lll_conn_tx_pkt_set>:
{
   18b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18b5e:	460f      	mov	r7, r1
	phy = lll->phy_tx;
   18b60:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   18b64:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   18b68:	f001 0407 	and.w	r4, r1, #7
{
   18b6c:	4605      	mov	r5, r0
	radio_phy_set(phy, flags);
   18b6e:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   18b72:	4620      	mov	r0, r4
   18b74:	f000 fcc2 	bl	194fc <radio_phy_set>
	} else if (lll->enc_tx) {
   18b78:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   18b7c:	0062      	lsls	r2, r4, #1
   18b7e:	06db      	lsls	r3, r3, #27
   18b80:	f042 0201 	orr.w	r2, r2, #1
   18b84:	b2f1      	uxtb	r1, r6
   18b86:	d50d      	bpl.n	18ba4 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   18b88:	3104      	adds	r1, #4
   18b8a:	b2c9      	uxtb	r1, r1
   18b8c:	2008      	movs	r0, #8
   18b8e:	f000 fcfd 	bl	1958c <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18b92:	4639      	mov	r1, r7
   18b94:	f105 0084 	add.w	r0, r5, #132	; 0x84
   18b98:	f000 ff58 	bl	19a4c <radio_ccm_tx_pkt_set>
}
   18b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   18ba0:	f000 bd28 	b.w	195f4 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   18ba4:	2008      	movs	r0, #8
   18ba6:	f000 fcf1 	bl	1958c <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   18baa:	4638      	mov	r0, r7
}
   18bac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   18bb0:	f000 bd20 	b.w	195f4 <radio_pkt_tx_set>

00018bb4 <lll_conn_pdu_tx_prep>:
{
   18bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (lll->empty) {
   18bb8:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
   18bbc:	075b      	lsls	r3, r3, #29
{
   18bbe:	b083      	sub	sp, #12
   18bc0:	4688      	mov	r8, r1
	if (lll->empty) {
   18bc2:	d43e      	bmi.n	18c42 <lll_conn_pdu_tx_prep+0x8e>
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   18bc4:	4604      	mov	r4, r0
   18bc6:	aa01      	add	r2, sp, #4
   18bc8:	e9d0 0113 	ldrd	r0, r1, [r0, #76]	; 0x4c
   18bcc:	f7f5 ffe4 	bl	eb98 <memq_peek>
	if (!link) {
   18bd0:	4681      	mov	r9, r0
   18bd2:	2800      	cmp	r0, #0
   18bd4:	d03c      	beq.n	18c50 <lll_conn_pdu_tx_prep+0x9c>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18bd6:	9f01      	ldr	r7, [sp, #4]
   18bd8:	f894 6061 	ldrb.w	r6, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   18bdc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   18be0:	3704      	adds	r7, #4
   18be2:	19bd      	adds	r5, r7, r6
		if (!lll->packet_tx_head_len) {
   18be4:	b913      	cbnz	r3, 18bec <lll_conn_pdu_tx_prep+0x38>
			lll->packet_tx_head_len = p->len;
   18be6:	786b      	ldrb	r3, [r5, #1]
   18be8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   18bec:	b126      	cbz	r6, 18bf8 <lll_conn_pdu_tx_prep+0x44>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   18bee:	5dba      	ldrb	r2, [r7, r6]
   18bf0:	2101      	movs	r1, #1
   18bf2:	f361 0201 	bfi	r2, r1, #0, #2
   18bf6:	55ba      	strb	r2, [r7, r6]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   18bf8:	1b9b      	subs	r3, r3, r6
   18bfa:	706b      	strb	r3, [r5, #1]
		p->md = 0;
   18bfc:	5dbb      	ldrb	r3, [r7, r6]
   18bfe:	f36f 1304 	bfc	r3, #4, #1
   18c02:	55bb      	strb	r3, [r7, r6]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   18c04:	4620      	mov	r0, r4
   18c06:	f7fd fc9d 	bl	16544 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   18c0a:	786b      	ldrb	r3, [r5, #1]
   18c0c:	4283      	cmp	r3, r0
   18c0e:	d904      	bls.n	18c1a <lll_conn_pdu_tx_prep+0x66>
			p->len = max_tx_octets;
   18c10:	7068      	strb	r0, [r5, #1]
			p->md = 1;
   18c12:	5dbb      	ldrb	r3, [r7, r6]
   18c14:	f043 0310 	orr.w	r3, r3, #16
   18c18:	55bb      	strb	r3, [r7, r6]
		if (link->next != lll->memq_tx.tail) {
   18c1a:	f8d9 2000 	ldr.w	r2, [r9]
   18c1e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   18c20:	429a      	cmp	r2, r3
   18c22:	d003      	beq.n	18c2c <lll_conn_pdu_tx_prep+0x78>
			p->md = 1;
   18c24:	5dbb      	ldrb	r3, [r7, r6]
   18c26:	f043 0310 	orr.w	r3, r3, #16
   18c2a:	55bb      	strb	r3, [r7, r6]
	p->rfu = 0U;
   18c2c:	782b      	ldrb	r3, [r5, #0]
	p->resv = 0U;
   18c2e:	2200      	movs	r2, #0
	p->rfu = 0U;
   18c30:	f36f 1347 	bfc	r3, #5, #3
   18c34:	702b      	strb	r3, [r5, #0]
	p->resv = 0U;
   18c36:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   18c38:	f8c8 5000 	str.w	r5, [r8]
}
   18c3c:	b003      	add	sp, #12
   18c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*pdu_data_tx = empty_tx_enqueue(lll);
   18c42:	f7ff fe7b 	bl	1893c <empty_tx_enqueue>
   18c46:	f8c8 0000 	str.w	r0, [r8]
}
   18c4a:	b003      	add	sp, #12
   18c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		p = empty_tx_enqueue(lll);
   18c50:	4620      	mov	r0, r4
   18c52:	f7ff fe73 	bl	1893c <empty_tx_enqueue>
   18c56:	4605      	mov	r5, r0
   18c58:	e7e8      	b.n	18c2c <lll_conn_pdu_tx_prep+0x78>
   18c5a:	bf00      	nop

00018c5c <lll_conn_isr_rx>:
{
   18c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18c60:	b082      	sub	sp, #8
   18c62:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   18c64:	f000 fd0a 	bl	1967c <radio_is_done>
	if (trx_done) {
   18c68:	f010 0fff 	tst.w	r0, #255	; 0xff
   18c6c:	d10a      	bne.n	18c84 <lll_conn_isr_rx+0x28>
	lll_isr_rx_status_reset();
   18c6e:	f7ff f927 	bl	17ec0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   18c72:	48bc      	ldr	r0, [pc, #752]	; (18f64 <lll_conn_isr_rx+0x308>)
   18c74:	4621      	mov	r1, r4
   18c76:	f000 fbfd 	bl	19474 <radio_isr_set>
		radio_disable();
   18c7a:	f000 fcd1 	bl	19620 <radio_disable>
}
   18c7e:	b002      	add	sp, #8
   18c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		crc_ok = radio_crc_is_valid();
   18c84:	f000 fd1a 	bl	196bc <radio_crc_is_valid>
   18c88:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   18c8a:	f000 fd5d 	bl	19748 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   18c8e:	f7ff f917 	bl	17ec0 <lll_isr_rx_status_reset>
	trx_cnt++;
   18c92:	4ab5      	ldr	r2, [pc, #724]	; (18f68 <lll_conn_isr_rx+0x30c>)
   18c94:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18c96:	2001      	movs	r0, #1
	trx_cnt++;
   18c98:	4403      	add	r3, r0
   18c9a:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   18c9c:	f7f9 fef8 	bl	12a90 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   18ca0:	4606      	mov	r6, r0
   18ca2:	2800      	cmp	r0, #0
   18ca4:	f000 80b0 	beq.w	18e08 <lll_conn_isr_rx+0x1ac>
	if (crc_ok) {
   18ca8:	2d00      	cmp	r5, #0
   18caa:	d15b      	bne.n	18d64 <lll_conn_isr_rx+0x108>
		if (crc_expire == 0U) {
   18cac:	4baf      	ldr	r3, [pc, #700]	; (18f6c <lll_conn_isr_rx+0x310>)
   18cae:	781f      	ldrb	r7, [r3, #0]
   18cb0:	2f00      	cmp	r7, #0
   18cb2:	f040 8098 	bne.w	18de6 <lll_conn_isr_rx+0x18a>
		crc_expire--;
   18cb6:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18cb8:	a901      	add	r1, sp, #4
   18cba:	4620      	mov	r0, r4
		crc_expire--;
   18cbc:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18cbe:	f7ff ff79 	bl	18bb4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   18cc2:	2096      	movs	r0, #150	; 0x96
   18cc4:	f000 fd98 	bl	197f8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   18cc8:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   18ccc:	f000 0007 	and.w	r0, r0, #7
   18cd0:	f000 fd0a 	bl	196e8 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   18cd4:	48a6      	ldr	r0, [pc, #664]	; (18f70 <lll_conn_isr_rx+0x314>)
   18cd6:	4621      	mov	r1, r4
   18cd8:	f000 fbcc 	bl	19474 <radio_isr_set>
		radio_tmr_end_capture();
   18cdc:	f000 fe6c 	bl	199b8 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   18ce0:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   18ce4:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   18ce6:	f3c2 0340 	ubfx	r3, r2, #1, #1
   18cea:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   18cec:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   18cf0:	009b      	lsls	r3, r3, #2
   18cf2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   18cf6:	f020 020c 	bic.w	r2, r0, #12
   18cfa:	4313      	orrs	r3, r2
   18cfc:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   18cfe:	4620      	mov	r0, r4
   18d00:	f7ff ff2c 	bl	18b5c <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   18d04:	f000 fcb0 	bl	19668 <radio_is_ready>
   18d08:	2800      	cmp	r0, #0
   18d0a:	f040 8099 	bne.w	18e40 <lll_conn_isr_rx+0x1e4>
	if (!radio_tmr_aa_restore()) {
   18d0e:	f000 fe47 	bl	199a0 <radio_tmr_aa_restore>
   18d12:	b1f0      	cbz	r0, 18d52 <lll_conn_isr_rx+0xf6>
	if (tx_release) {
   18d14:	b31d      	cbz	r5, 18d5e <lll_conn_isr_rx+0x102>
		LL_ASSERT(lll->handle != 0xFFFF);
   18d16:	8a20      	ldrh	r0, [r4, #16]
   18d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18d1c:	4298      	cmp	r0, r3
   18d1e:	f000 80a6 	beq.w	18e6e <lll_conn_isr_rx+0x212>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   18d22:	4629      	mov	r1, r5
   18d24:	f7fd fa28 	bl	16178 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   18d28:	b177      	cbz	r7, 18d48 <lll_conn_isr_rx+0xec>
		if (lll->enc_rx) {
   18d2a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18d2e:	071b      	lsls	r3, r3, #28
   18d30:	f100 8094 	bmi.w	18e5c <lll_conn_isr_rx+0x200>
		ull_pdu_rx_alloc();
   18d34:	f7f9 feca 	bl	12acc <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   18d38:	2302      	movs	r3, #2
   18d3a:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   18d3c:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18d3e:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   18d40:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   18d42:	4631      	mov	r1, r6
   18d44:	f7f9 feda 	bl	12afc <ull_rx_put>
		ull_rx_sched();
   18d48:	f7f9 fee8 	bl	12b1c <ull_rx_sched>
}
   18d4c:	b002      	add	sp, #8
   18d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   18d52:	f000 fe19 	bl	19988 <radio_tmr_aa_get>
   18d56:	f000 fe1d 	bl	19994 <radio_tmr_aa_save>
	if (tx_release) {
   18d5a:	2d00      	cmp	r5, #0
   18d5c:	d1db      	bne.n	18d16 <lll_conn_isr_rx+0xba>
	if (is_rx_enqueue) {
   18d5e:	2f00      	cmp	r7, #0
   18d60:	d1e3      	bne.n	18d2a <lll_conn_isr_rx+0xce>
   18d62:	e78c      	b.n	18c7e <lll_conn_isr_rx+0x22>
	if (lll->enc_rx) {
   18d64:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18d68:	071a      	lsls	r2, r3, #28
	pdu_data_rx = (void *)node_rx->pdu;
   18d6a:	f106 071c 	add.w	r7, r6, #28
	if (lll->enc_rx) {
   18d6e:	d45d      	bmi.n	18e2c <lll_conn_isr_rx+0x1d0>
	if (pdu_data_rx->nesn != lll->sn) {
   18d70:	7f32      	ldrb	r2, [r6, #28]
   18d72:	f003 0101 	and.w	r1, r3, #1
   18d76:	f3c2 0080 	ubfx	r0, r2, #2, #1
   18d7a:	4288      	cmp	r0, r1
   18d7c:	d054      	beq.n	18e28 <lll_conn_isr_rx+0x1cc>
		if (lll->role) {
   18d7e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
		lll->sn++;
   18d82:	f081 0101 	eor.w	r1, r1, #1
   18d86:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   18d8a:	2800      	cmp	r0, #0
		lll->sn++;
   18d8c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   18d90:	da05      	bge.n	18d9e <lll_conn_isr_rx+0x142>
			lll->slave.latency_enabled = 1;
   18d92:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   18d96:	f043 0301 	orr.w	r3, r3, #1
   18d9a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   18d9e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18da2:	075d      	lsls	r5, r3, #29
   18da4:	d572      	bpl.n	18e8c <lll_conn_isr_rx+0x230>
			lll->empty = 0;
   18da6:	f36f 0382 	bfc	r3, #2, #1
   18daa:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   18dae:	2500      	movs	r5, #0
   18db0:	b2db      	uxtb	r3, r3
	if ((pdu_data_rx->sn == lll->nesn) &&
   18db2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   18db6:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18dba:	429a      	cmp	r2, r3
   18dbc:	f000 808b 	beq.w	18ed6 <lll_conn_isr_rx+0x27a>
	uint8_t is_rx_enqueue = 0U;
   18dc0:	2700      	movs	r7, #0
		crc_expire = 0U;
   18dc2:	4a6a      	ldr	r2, [pc, #424]	; (18f6c <lll_conn_isr_rx+0x310>)
		crc_valid = 1U;
   18dc4:	4b6b      	ldr	r3, [pc, #428]	; (18f74 <lll_conn_isr_rx+0x318>)
		crc_expire = 0U;
   18dc6:	2100      	movs	r1, #0
   18dc8:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18dca:	4620      	mov	r0, r4
		crc_valid = 1U;
   18dcc:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18dce:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   18dd0:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18dd2:	f7ff feef 	bl	18bb4 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18dd6:	7f33      	ldrb	r3, [r6, #28]
   18dd8:	06da      	lsls	r2, r3, #27
   18dda:	f53f af72 	bmi.w	18cc2 <lll_conn_isr_rx+0x66>
				     (pdu_data_tx->len == 0));
   18dde:	9b01      	ldr	r3, [sp, #4]
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18de0:	785b      	ldrb	r3, [r3, #1]
   18de2:	b153      	cbz	r3, 18dfa <lll_conn_isr_rx+0x19e>
   18de4:	e76d      	b.n	18cc2 <lll_conn_isr_rx+0x66>
		crc_expire--;
   18de6:	3f01      	subs	r7, #1
   18de8:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18dea:	a901      	add	r1, sp, #4
   18dec:	4620      	mov	r0, r4
		crc_expire--;
   18dee:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   18df0:	f7ff fee0 	bl	18bb4 <lll_conn_pdu_tx_prep>
	is_done = is_crc_backoff || ((crc_ok) && (pdu_data_rx->md == 0) &&
   18df4:	2f00      	cmp	r7, #0
   18df6:	f040 80ff 	bne.w	18ff8 <lll_conn_isr_rx+0x39c>
		radio_isr_set(isr_done, param);
   18dfa:	485a      	ldr	r0, [pc, #360]	; (18f64 <lll_conn_isr_rx+0x308>)
   18dfc:	4621      	mov	r1, r4
   18dfe:	f000 fb39 	bl	19474 <radio_isr_set>
			radio_switch_complete_and_disable();
   18e02:	f000 fc8b 	bl	1971c <radio_switch_complete_and_disable>
   18e06:	e76b      	b.n	18ce0 <lll_conn_isr_rx+0x84>
	LL_ASSERT(node_rx);
   18e08:	4a5b      	ldr	r2, [pc, #364]	; (18f78 <lll_conn_isr_rx+0x31c>)
   18e0a:	495c      	ldr	r1, [pc, #368]	; (18f7c <lll_conn_isr_rx+0x320>)
   18e0c:	485c      	ldr	r0, [pc, #368]	; (18f80 <lll_conn_isr_rx+0x324>)
   18e0e:	23aa      	movs	r3, #170	; 0xaa
   18e10:	f003 fcd7 	bl	1c7c2 <printk>
   18e14:	4040      	eors	r0, r0
   18e16:	f380 8811 	msr	BASEPRI, r0
   18e1a:	f04f 0003 	mov.w	r0, #3
   18e1e:	df02      	svc	2
	if (crc_ok) {
   18e20:	2d00      	cmp	r5, #0
   18e22:	f43f af43 	beq.w	18cac <lll_conn_isr_rx+0x50>
   18e26:	e79d      	b.n	18d64 <lll_conn_isr_rx+0x108>
	struct node_tx *tx_release = NULL;
   18e28:	2500      	movs	r5, #0
   18e2a:	e7c2      	b.n	18db2 <lll_conn_isr_rx+0x156>
		pkt_decrypt = radio_pkt_decrypt_get();
   18e2c:	f000 fc58 	bl	196e0 <radio_pkt_decrypt_get>
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   18e30:	2203      	movs	r2, #3
		pkt_decrypt = radio_pkt_decrypt_get();
   18e32:	4601      	mov	r1, r0
		memcpy((void *)pdu_data_rx, (void *)pkt_decrypt,
   18e34:	4638      	mov	r0, r7
   18e36:	f005 ffdc 	bl	1edf2 <memcpy>
   18e3a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18e3e:	e797      	b.n	18d70 <lll_conn_isr_rx+0x114>
	LL_ASSERT(!radio_is_ready());
   18e40:	4a4d      	ldr	r2, [pc, #308]	; (18f78 <lll_conn_isr_rx+0x31c>)
   18e42:	4950      	ldr	r1, [pc, #320]	; (18f84 <lll_conn_isr_rx+0x328>)
   18e44:	484e      	ldr	r0, [pc, #312]	; (18f80 <lll_conn_isr_rx+0x324>)
   18e46:	f44f 738a 	mov.w	r3, #276	; 0x114
   18e4a:	f003 fcba 	bl	1c7c2 <printk>
   18e4e:	4040      	eors	r0, r0
   18e50:	f380 8811 	msr	BASEPRI, r0
   18e54:	f04f 0003 	mov.w	r0, #3
   18e58:	df02      	svc	2
   18e5a:	e758      	b.n	18d0e <lll_conn_isr_rx+0xb2>
			pkt_decrypt_data = (uint8_t *)radio_pkt_decrypt_get() +
   18e5c:	f000 fc40 	bl	196e0 <radio_pkt_decrypt_get>
			memcpy((void *)pdu_data_rx->lldata,
   18e60:	7f72      	ldrb	r2, [r6, #29]
   18e62:	1cc1      	adds	r1, r0, #3
   18e64:	f106 001f 	add.w	r0, r6, #31
   18e68:	f005 ffc3 	bl	1edf2 <memcpy>
   18e6c:	e762      	b.n	18d34 <lll_conn_isr_rx+0xd8>
		LL_ASSERT(lll->handle != 0xFFFF);
   18e6e:	4a42      	ldr	r2, [pc, #264]	; (18f78 <lll_conn_isr_rx+0x31c>)
   18e70:	4945      	ldr	r1, [pc, #276]	; (18f88 <lll_conn_isr_rx+0x32c>)
   18e72:	4843      	ldr	r0, [pc, #268]	; (18f80 <lll_conn_isr_rx+0x324>)
   18e74:	f240 1321 	movw	r3, #289	; 0x121
   18e78:	f003 fca3 	bl	1c7c2 <printk>
   18e7c:	4040      	eors	r0, r0
   18e7e:	f380 8811 	msr	BASEPRI, r0
   18e82:	f04f 0003 	mov.w	r0, #3
   18e86:	df02      	svc	2
   18e88:	8a20      	ldrh	r0, [r4, #16]
   18e8a:	e74a      	b.n	18d22 <lll_conn_isr_rx+0xc6>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   18e8c:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   18e90:	aa01      	add	r2, sp, #4
   18e92:	f7f5 fe81 	bl	eb98 <memq_peek>
		if (link) {
   18e96:	4680      	mov	r8, r0
   18e98:	b398      	cbz	r0, 18f02 <lll_conn_isr_rx+0x2a6>
					       lll->packet_tx_head_offset);
   18e9a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   18e9e:	9b01      	ldr	r3, [sp, #4]
   18ea0:	4413      	add	r3, r2
   18ea2:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   18ea4:	b151      	cbz	r1, 18ebc <lll_conn_isr_rx+0x260>
				if (lll->enc_tx) {
   18ea6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18eaa:	06d8      	lsls	r0, r3, #27
   18eac:	d506      	bpl.n	18ebc <lll_conn_isr_rx+0x260>
					lll->ccm_tx.counter++;
   18eae:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   18eb2:	3301      	adds	r3, #1
   18eb4:	f140 0000 	adc.w	r0, r0, #0
   18eb8:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   18ebc:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   18ec0:	440a      	add	r2, r1
   18ec2:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   18ec4:	429a      	cmp	r2, r3
   18ec6:	d221      	bcs.n	18f0c <lll_conn_isr_rx+0x2b0>
				lll->packet_tx_head_offset = offset;
   18ec8:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   18ecc:	7f32      	ldrb	r2, [r6, #28]
   18ece:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	struct node_tx *tx_release = NULL;
   18ed2:	2500      	movs	r5, #0
   18ed4:	e76d      	b.n	18db2 <lll_conn_isr_rx+0x156>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   18ed6:	2003      	movs	r0, #3
   18ed8:	f7f9 fdda 	bl	12a90 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   18edc:	2800      	cmp	r0, #0
   18ede:	f43f af6f 	beq.w	18dc0 <lll_conn_isr_rx+0x164>
		lll->nesn++;
   18ee2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18ee6:	f083 0302 	eor.w	r3, r3, #2
   18eea:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   18eee:	7f73      	ldrb	r3, [r6, #29]
   18ef0:	2b00      	cmp	r3, #0
   18ef2:	f43f af65 	beq.w	18dc0 <lll_conn_isr_rx+0x164>
			if (lll->enc_rx) {
   18ef6:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18efa:	0719      	lsls	r1, r3, #28
   18efc:	d419      	bmi.n	18f32 <lll_conn_isr_rx+0x2d6>
			*is_rx_enqueue = 1U;
   18efe:	2701      	movs	r7, #1
   18f00:	e75f      	b.n	18dc2 <lll_conn_isr_rx+0x166>
   18f02:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18f06:	7f32      	ldrb	r2, [r6, #28]
	struct node_tx *tx_release = NULL;
   18f08:	2500      	movs	r5, #0
   18f0a:	e752      	b.n	18db2 <lll_conn_isr_rx+0x156>
			} else if (offset == lll->packet_tx_head_len) {
   18f0c:	d1f9      	bne.n	18f02 <lll_conn_isr_rx+0x2a6>
				lll->packet_tx_head_len = 0;
   18f0e:	2200      	movs	r2, #0
   18f10:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   18f14:	6d20      	ldr	r0, [r4, #80]	; 0x50
   18f16:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   18f1a:	f7f5 fe45 	bl	eba8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   18f1e:	9d01      	ldr	r5, [sp, #4]
   18f20:	7f32      	ldrb	r2, [r6, #28]
   18f22:	682b      	ldr	r3, [r5, #0]
   18f24:	f8c8 3000 	str.w	r3, [r8]
				tx->next = link;
   18f28:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   18f2c:	f8c5 8000 	str.w	r8, [r5]
				*tx_release = tx;
   18f30:	e73f      	b.n	18db2 <lll_conn_isr_rx+0x156>
				done = radio_ccm_is_done();
   18f32:	f000 fdb5 	bl	19aa0 <radio_ccm_is_done>
				LL_ASSERT(done);
   18f36:	2800      	cmp	r0, #0
   18f38:	d050      	beq.n	18fdc <lll_conn_isr_rx+0x380>
				bool mic_failure = !radio_ccm_mic_is_valid();
   18f3a:	f000 fdd3 	bl	19ae4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   18f3e:	2800      	cmp	r0, #0
   18f40:	d13c      	bne.n	18fbc <lll_conn_isr_rx+0x360>
				    lll->ccm_rx.counter == 0 &&
   18f42:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   18f46:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   18f4a:	4313      	orrs	r3, r2
   18f4c:	d104      	bne.n	18f58 <lll_conn_isr_rx+0x2fc>
				    (pdu_data_rx->ll_id ==
   18f4e:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   18f50:	f003 0303 	and.w	r3, r3, #3
   18f54:	2b03      	cmp	r3, #3
   18f56:	d01b      	beq.n	18f90 <lll_conn_isr_rx+0x334>
					mic_state = LLL_CONN_MIC_FAIL;
   18f58:	4b0c      	ldr	r3, [pc, #48]	; (18f8c <lll_conn_isr_rx+0x330>)
   18f5a:	2202      	movs	r2, #2
   18f5c:	701a      	strb	r2, [r3, #0]
	uint8_t is_rx_enqueue = 0U;
   18f5e:	2700      	movs	r7, #0
   18f60:	e6d5      	b.n	18d0e <lll_conn_isr_rx+0xb2>
   18f62:	bf00      	nop
   18f64:	0001888d 	.word	0x0001888d
   18f68:	20002ae0 	.word	0x20002ae0
   18f6c:	20003081 	.word	0x20003081
   18f70:	00018aa5 	.word	0x00018aa5
   18f74:	20003082 	.word	0x20003082
   18f78:	00023194 	.word	0x00023194
   18f7c:	000231e0 	.word	0x000231e0
   18f80:	00022678 	.word	0x00022678
   18f84:	0002315c 	.word	0x0002315c
   18f88:	000231f0 	.word	0x000231f0
   18f8c:	20003083 	.word	0x20003083
						radio_pkt_scratch_get();
   18f90:	f000 fba2 	bl	196d8 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   18f94:	7842      	ldrb	r2, [r0, #1]
   18f96:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   18f98:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   18f9a:	d8dd      	bhi.n	18f58 <lll_conn_isr_rx+0x2fc>
						memcpy(pdu_data_rx,
   18f9c:	3203      	adds	r2, #3
   18f9e:	4638      	mov	r0, r7
   18fa0:	f005 ff27 	bl	1edf2 <memcpy>
						lll->ccm_rx.counter--;
   18fa4:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   18fa8:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   18fac:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   18fb0:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   18fb4:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   18fb8:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   18fbc:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   18fc0:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   18fc4:	490d      	ldr	r1, [pc, #52]	; (18ffc <lll_conn_isr_rx+0x3a0>)
				lll->ccm_rx.counter++;
   18fc6:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   18fc8:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   18fcc:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   18fd0:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   18fd2:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   18fd6:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   18fd8:	6042      	str	r2, [r0, #4]
		if (err) {
   18fda:	e6f2      	b.n	18dc2 <lll_conn_isr_rx+0x166>
				LL_ASSERT(done);
   18fdc:	4a08      	ldr	r2, [pc, #32]	; (19000 <lll_conn_isr_rx+0x3a4>)
   18fde:	4909      	ldr	r1, [pc, #36]	; (19004 <lll_conn_isr_rx+0x3a8>)
   18fe0:	4809      	ldr	r0, [pc, #36]	; (19008 <lll_conn_isr_rx+0x3ac>)
   18fe2:	f240 23c3 	movw	r3, #707	; 0x2c3
   18fe6:	f003 fbec 	bl	1c7c2 <printk>
   18fea:	4040      	eors	r0, r0
   18fec:	f380 8811 	msr	BASEPRI, r0
   18ff0:	f04f 0003 	mov.w	r0, #3
   18ff4:	df02      	svc	2
   18ff6:	e7a0      	b.n	18f3a <lll_conn_isr_rx+0x2de>
	uint8_t is_rx_enqueue = 0U;
   18ff8:	462f      	mov	r7, r5
   18ffa:	e662      	b.n	18cc2 <lll_conn_isr_rx+0x66>
   18ffc:	20003083 	.word	0x20003083
   19000:	00023194 	.word	0x00023194
   19004:	000231e8 	.word	0x000231e8
   19008:	00022678 	.word	0x00022678

0001900c <lll_conn_flush>:

void lll_conn_flush(uint16_t handle, struct lll_conn *lll)
{
	/* Nothing to be flushed */
}
   1900c:	4770      	bx	lr
   1900e:	bf00      	nop

00019010 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *prepare_param)
{
   19010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct lll_conn *lll = prepare_param->param;
   19014:	68c4      	ldr	r4, [r0, #12]
{
   19016:	b082      	sub	sp, #8
   19018:	4605      	mov	r5, r0
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1901a:	f7ff fcbb 	bl	18994 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1901e:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   19020:	8b66      	ldrh	r6, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   19022:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   19026:	1e48      	subs	r0, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   19028:	4431      	add	r1, r6
	lll->latency_prepare = 0;
   1902a:	2200      	movs	r2, #0
	lll->latency_event = lll->latency_prepare - 1;
   1902c:	b280      	uxth	r0, r0
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1902e:	8361      	strh	r1, [r4, #26]
	if (lll->data_chan_sel) {
   19030:	0659      	lsls	r1, r3, #25
	lll->latency_prepare = 0;
   19032:	82e2      	strh	r2, [r4, #22]
	lll->latency_event = lll->latency_prepare - 1;
   19034:	8320      	strh	r0, [r4, #24]
	if (lll->data_chan_sel) {
   19036:	f104 021c 	add.w	r2, r4, #28
   1903a:	f140 8089 	bpl.w	19150 <prepare_cb+0x140>
	event_counter = lll->event_counter + lll->latency_event;
   1903e:	4430      	add	r0, r6
#if defined(CONFIG_BT_CTLR_CHAN_SEL_2)
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   19040:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   19042:	b280      	uxth	r0, r0
   19044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   19048:	f7fd fbba 	bl	167c0 <lll_chan_sel_2>
   1904c:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1904e:	e9d4 610c 	ldrd	r6, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   19052:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   19054:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   19058:	4431      	add	r1, r6
		lll->slave.window_widening_event_us =
   1905a:	428a      	cmp	r2, r1
   1905c:	bf28      	it	cs
   1905e:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   19060:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   19062:	2600      	movs	r6, #0
		lll->slave.window_widening_event_us =
   19064:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   19066:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   19068:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1906a:	63a6      	str	r6, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   1906c:	f000 fa22 	bl	194b4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   19070:	4630      	mov	r0, r6
   19072:	f000 fa53 	bl	1951c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   19076:	4620      	mov	r0, r4
   19078:	f7ff fccc 	bl	18a14 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1907c:	f104 0008 	add.w	r0, r4, #8
   19080:	f000 fa6a 	bl	19558 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   19084:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   19086:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   19088:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1908a:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1908c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   19090:	4319      	orrs	r1, r3
   19092:	f240 605b 	movw	r0, #1627	; 0x65b
   19096:	f000 fb05 	bl	196a4 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1909a:	4638      	mov	r0, r7
   1909c:	f7fe fec4 	bl	17e28 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   190a0:	4621      	mov	r1, r4
   190a2:	4840      	ldr	r0, [pc, #256]	; (191a4 <prepare_cb+0x194>)
   190a4:	f000 f9e6 	bl	19474 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   190a8:	2096      	movs	r0, #150	; 0x96
   190aa:	f000 fba5 	bl	197f8 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   190ae:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   190b2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   190b6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   190ba:	4631      	mov	r1, r6
   190bc:	f002 0207 	and.w	r2, r2, #7
   190c0:	f000 0007 	and.w	r0, r0, #7
   190c4:	f000 fb1e 	bl	19704 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = prepare_param->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   190c8:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = prepare_param->ticks_at_expire;
   190cc:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   190ce:	4640      	mov	r0, r8
   190d0:	f7fe fe8a 	bl	17de8 <lll_evt_offset_get>
   190d4:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = prepare_param->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   190d6:	686a      	ldr	r2, [r5, #4]
   190d8:	f107 0109 	add.w	r1, r7, #9
   190dc:	4630      	mov	r0, r6
   190de:	f000 fb97 	bl	19810 <radio_tmr_start>
   190e2:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   190e4:	f000 fc3c 	bl	19960 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   190e8:	4630      	mov	r0, r6
   190ea:	f000 fc53 	bl	19994 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   190ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   190f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   190f2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   190f6:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   190f8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   190fc:	f000 0007 	and.w	r0, r0, #7
   19100:	2101      	movs	r1, #1
	hcto = remainder_us +
   19102:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19104:	f000 fa7e 	bl	19604 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   19108:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   1910c:	f002 0207 	and.w	r2, r2, #7
   19110:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   19112:	4405      	add	r5, r0
   19114:	d033      	beq.n	1917e <prepare_cb+0x16e>
		return 40;
   19116:	2a04      	cmp	r2, #4
   19118:	bf0c      	ite	eq
   1911a:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1911e:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19120:	4610      	mov	r0, r2
   19122:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   19124:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   19126:	f000 fa6f 	bl	19608 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1912a:	4428      	add	r0, r5
   1912c:	f000 fc0a 	bl	19944 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   19130:	7c21      	ldrb	r1, [r4, #16]
   19132:	3103      	adds	r1, #3
   19134:	463a      	mov	r2, r7
   19136:	4640      	mov	r0, r8
   19138:	b2c9      	uxtb	r1, r1
   1913a:	f7fe fe63 	bl	17e04 <lll_preempt_calc>
   1913e:	b9a0      	cbnz	r0, 1916a <prepare_cb+0x15a>
	} else
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */
	{
		uint32_t ret;

		ret = lll_prepare_done(lll);
   19140:	4620      	mov	r0, r4
   19142:	f7fe fdf7 	bl	17d34 <lll_prepare_done>
		LL_ASSERT(!ret);
   19146:	b9e0      	cbnz	r0, 19182 <prepare_cb+0x172>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   19148:	2000      	movs	r0, #0
   1914a:	b002      	add	sp, #8
   1914c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   19150:	f003 063f 	and.w	r6, r3, #63	; 0x3f
   19154:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   19158:	9600      	str	r6, [sp, #0]
   1915a:	4613      	mov	r3, r2
   1915c:	4602      	mov	r2, r0
   1915e:	f104 0023 	add.w	r0, r4, #35	; 0x23
   19162:	f7fd faf1 	bl	16748 <lll_chan_sel_1>
   19166:	4607      	mov	r7, r0
   19168:	e771      	b.n	1904e <prepare_cb+0x3e>
		radio_isr_set(lll_isr_abort, lll);
   1916a:	480f      	ldr	r0, [pc, #60]	; (191a8 <prepare_cb+0x198>)
   1916c:	4621      	mov	r1, r4
   1916e:	f000 f981 	bl	19474 <radio_isr_set>
		radio_disable();
   19172:	f000 fa55 	bl	19620 <radio_disable>
}
   19176:	2000      	movs	r0, #0
   19178:	b002      	add	sp, #8
   1917a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1917e:	2318      	movs	r3, #24
   19180:	e7ce      	b.n	19120 <prepare_cb+0x110>
		LL_ASSERT(!ret);
   19182:	4a0a      	ldr	r2, [pc, #40]	; (191ac <prepare_cb+0x19c>)
   19184:	490a      	ldr	r1, [pc, #40]	; (191b0 <prepare_cb+0x1a0>)
   19186:	480b      	ldr	r0, [pc, #44]	; (191b4 <prepare_cb+0x1a4>)
   19188:	23fe      	movs	r3, #254	; 0xfe
   1918a:	f003 fb1a 	bl	1c7c2 <printk>
   1918e:	4040      	eors	r0, r0
   19190:	f380 8811 	msr	BASEPRI, r0
   19194:	f04f 0003 	mov.w	r0, #3
   19198:	df02      	svc	2
}
   1919a:	2000      	movs	r0, #0
   1919c:	b002      	add	sp, #8
   1919e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   191a2:	bf00      	nop
   191a4:	00018c5d 	.word	0x00018c5d
   191a8:	00017f5d 	.word	0x00017f5d
   191ac:	0002322c 	.word	0x0002322c
   191b0:	00022900 	.word	0x00022900
   191b4:	00022678 	.word	0x00022678

000191b8 <lll_slave_prepare>:
{
   191b8:	b530      	push	{r4, r5, lr}
   191ba:	b083      	sub	sp, #12
	struct lll_conn *lll = p->param;
   191bc:	68c4      	ldr	r4, [r0, #12]
{
   191be:	4605      	mov	r5, r0
	err = lll_hfclock_on();
   191c0:	f7fe ff1e 	bl	18000 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   191c4:	2800      	cmp	r0, #0
   191c6:	db28      	blt.n	1921a <lll_slave_prepare+0x62>
	elapsed = p->lazy + 1;
   191c8:	892b      	ldrh	r3, [r5, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   191ca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	    lll->slave.window_widening_max_us) {
   191cc:	e9d4 200b 	ldrd	r2, r0, [r4, #44]	; 0x2c
	elapsed = p->lazy + 1;
   191d0:	3301      	adds	r3, #1
   191d2:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   191d4:	fb01 0103 	mla	r1, r1, r3, r0
	lll->latency_prepare += elapsed;
   191d8:	8ae0      	ldrh	r0, [r4, #22]
		lll->slave.window_widening_prepare_us =
   191da:	428a      	cmp	r2, r1
   191dc:	bf28      	it	cs
   191de:	460a      	movcs	r2, r1
	lll->latency_prepare += elapsed;
   191e0:	4403      	add	r3, r0
		lll->slave.window_widening_prepare_us =
   191e2:	6322      	str	r2, [r4, #48]	; 0x30
	lll->latency_prepare += elapsed;
   191e4:	82e3      	strh	r3, [r4, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   191e6:	4a13      	ldr	r2, [pc, #76]	; (19234 <lll_slave_prepare+0x7c>)
   191e8:	4913      	ldr	r1, [pc, #76]	; (19238 <lll_slave_prepare+0x80>)
   191ea:	4814      	ldr	r0, [pc, #80]	; (1923c <lll_slave_prepare+0x84>)
   191ec:	9500      	str	r5, [sp, #0]
   191ee:	2300      	movs	r3, #0
   191f0:	f7fe fd14 	bl	17c1c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   191f4:	b108      	cbz	r0, 191fa <lll_slave_prepare+0x42>
   191f6:	3044      	adds	r0, #68	; 0x44
   191f8:	d101      	bne.n	191fe <lll_slave_prepare+0x46>
}
   191fa:	b003      	add	sp, #12
   191fc:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   191fe:	4a10      	ldr	r2, [pc, #64]	; (19240 <lll_slave_prepare+0x88>)
   19200:	4910      	ldr	r1, [pc, #64]	; (19244 <lll_slave_prepare+0x8c>)
   19202:	4811      	ldr	r0, [pc, #68]	; (19248 <lll_slave_prepare+0x90>)
   19204:	235b      	movs	r3, #91	; 0x5b
   19206:	f003 fadc 	bl	1c7c2 <printk>
   1920a:	4040      	eors	r0, r0
   1920c:	f380 8811 	msr	BASEPRI, r0
   19210:	f04f 0003 	mov.w	r0, #3
   19214:	df02      	svc	2
}
   19216:	b003      	add	sp, #12
   19218:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(err >= 0);
   1921a:	4a09      	ldr	r2, [pc, #36]	; (19240 <lll_slave_prepare+0x88>)
   1921c:	490b      	ldr	r1, [pc, #44]	; (1924c <lll_slave_prepare+0x94>)
   1921e:	480a      	ldr	r0, [pc, #40]	; (19248 <lll_slave_prepare+0x90>)
   19220:	2348      	movs	r3, #72	; 0x48
   19222:	f003 face 	bl	1c7c2 <printk>
   19226:	4040      	eors	r0, r0
   19228:	f380 8811 	msr	BASEPRI, r0
   1922c:	f04f 0003 	mov.w	r0, #3
   19230:	df02      	svc	2
   19232:	e7c9      	b.n	191c8 <lll_slave_prepare+0x10>
   19234:	00019011 	.word	0x00019011
   19238:	000189bd 	.word	0x000189bd
   1923c:	00017de1 	.word	0x00017de1
   19240:	0002322c 	.word	0x0002322c
   19244:	00023170 	.word	0x00023170
   19248:	00022678 	.word	0x00022678
   1924c:	000230e4 	.word	0x000230e4

00019250 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   19250:	4b05      	ldr	r3, [pc, #20]	; (19268 <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   19252:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   19256:	2100      	movs	r1, #0
   19258:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1925c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   19260:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   19264:	4770      	bx	lr
   19266:	bf00      	nop
   19268:	4000b000 	.word	0x4000b000

0001926c <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1926c:	4b05      	ldr	r3, [pc, #20]	; (19284 <cntr_start+0x18>)
   1926e:	7818      	ldrb	r0, [r3, #0]
   19270:	1c42      	adds	r2, r0, #1
   19272:	701a      	strb	r2, [r3, #0]
   19274:	b918      	cbnz	r0, 1927e <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   19276:	4b04      	ldr	r3, [pc, #16]	; (19288 <cntr_start+0x1c>)
   19278:	2201      	movs	r2, #1
   1927a:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1927c:	4770      	bx	lr
		return 1;
   1927e:	2001      	movs	r0, #1
}
   19280:	4770      	bx	lr
   19282:	bf00      	nop
   19284:	20003084 	.word	0x20003084
   19288:	4000b000 	.word	0x4000b000

0001928c <cntr_stop>:

uint32_t cntr_stop(void)
{
   1928c:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1928e:	4c0d      	ldr	r4, [pc, #52]	; (192c4 <cntr_stop+0x38>)
   19290:	7820      	ldrb	r0, [r4, #0]
   19292:	b148      	cbz	r0, 192a8 <cntr_stop+0x1c>

	if (--_refcount) {
   19294:	3801      	subs	r0, #1
   19296:	b2c0      	uxtb	r0, r0
   19298:	7020      	strb	r0, [r4, #0]
   1929a:	b918      	cbnz	r0, 192a4 <cntr_stop+0x18>
   1929c:	4b0a      	ldr	r3, [pc, #40]	; (192c8 <cntr_stop+0x3c>)
   1929e:	2201      	movs	r2, #1
   192a0:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   192a2:	bd10      	pop	{r4, pc}
		return 1;
   192a4:	2001      	movs	r0, #1
}
   192a6:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   192a8:	4a08      	ldr	r2, [pc, #32]	; (192cc <cntr_stop+0x40>)
   192aa:	4909      	ldr	r1, [pc, #36]	; (192d0 <cntr_stop+0x44>)
   192ac:	4809      	ldr	r0, [pc, #36]	; (192d4 <cntr_stop+0x48>)
   192ae:	232e      	movs	r3, #46	; 0x2e
   192b0:	f003 fa87 	bl	1c7c2 <printk>
   192b4:	4040      	eors	r0, r0
   192b6:	f380 8811 	msr	BASEPRI, r0
   192ba:	f04f 0003 	mov.w	r0, #3
   192be:	df02      	svc	2
   192c0:	7820      	ldrb	r0, [r4, #0]
   192c2:	e7e7      	b.n	19294 <cntr_stop+0x8>
   192c4:	20003084 	.word	0x20003084
   192c8:	4000b004 	.word	0x4000b004
   192cc:	0002328c 	.word	0x0002328c
   192d0:	000232d8 	.word	0x000232d8
   192d4:	00022678 	.word	0x00022678

000192d8 <cntr_cnt_get>:
     return p_reg->COUNTER;
   192d8:	4b01      	ldr	r3, [pc, #4]	; (192e0 <cntr_cnt_get+0x8>)
   192da:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   192de:	4770      	bx	lr
   192e0:	4000b000 	.word	0x4000b000

000192e4 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   192e4:	4b02      	ldr	r3, [pc, #8]	; (192f0 <cntr_cmp_set+0xc>)
   192e6:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   192ea:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   192ee:	4770      	bx	lr
   192f0:	4000b000 	.word	0x4000b000

000192f4 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   192f4:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   192f6:	4b12      	ldr	r3, [pc, #72]	; (19340 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   192f8:	4d12      	ldr	r5, [pc, #72]	; (19344 <do_ecb+0x50>)
   192fa:	2601      	movs	r6, #1
   192fc:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   192fe:	2100      	movs	r1, #0
   19300:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   19302:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   19306:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1930a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   1930e:	601c      	str	r4, [r3, #0]
}
   19310:	e005      	b.n	1931e <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   19312:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   19316:	b932      	cbnz	r2, 19326 <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   19318:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1931c:	b11a      	cbz	r2, 19326 <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1931e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   19322:	2a00      	cmp	r2, #0
   19324:	d0f5      	beq.n	19312 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19326:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   19328:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1932c:	2a00      	cmp	r2, #0
   1932e:	d1e7      	bne.n	19300 <do_ecb+0xc>
   19330:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   19334:	2f00      	cmp	r7, #0
   19336:	d0e3      	beq.n	19300 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   19338:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   1933a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1933e:	4770      	bx	lr
   19340:	4000e000 	.word	0x4000e000
   19344:	4000e004 	.word	0x4000e004

00019348 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   19348:	b570      	push	{r4, r5, r6, lr}
   1934a:	b08c      	sub	sp, #48	; 0x30
   1934c:	460e      	mov	r6, r1
   1934e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19350:	4601      	mov	r1, r0
   19352:	2210      	movs	r2, #16
   19354:	4668      	mov	r0, sp
{
   19356:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   19358:	f7f5 fbee 	bl	eb38 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1935c:	2210      	movs	r2, #16
   1935e:	eb0d 0002 	add.w	r0, sp, r2
   19362:	4631      	mov	r1, r6
   19364:	f7f5 fbe8 	bl	eb38 <mem_rcopy>

	do_ecb(&ecb);
   19368:	4668      	mov	r0, sp
   1936a:	f7ff ffc3 	bl	192f4 <do_ecb>

	if (cipher_text_le) {
   1936e:	b125      	cbz	r5, 1937a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   19370:	4628      	mov	r0, r5
   19372:	2210      	movs	r2, #16
   19374:	a908      	add	r1, sp, #32
   19376:	f7f5 fbdf 	bl	eb38 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1937a:	b124      	cbz	r4, 19386 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1937c:	4620      	mov	r0, r4
   1937e:	2210      	movs	r2, #16
   19380:	a908      	add	r1, sp, #32
   19382:	f005 fd36 	bl	1edf2 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   19386:	b00c      	add	sp, #48	; 0x30
   19388:	bd70      	pop	{r4, r5, r6, pc}
   1938a:	bf00      	nop

0001938c <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   1938c:	b4f0      	push	{r4, r5, r6, r7}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1938e:	4e2a      	ldr	r6, [pc, #168]	; (19438 <sw_switch.isra.0+0xac>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19390:	f8df c0b8 	ldr.w	ip, [pc, #184]	; 1944c <sw_switch.isra.0+0xc0>
   19394:	7834      	ldrb	r4, [r6, #0]
   19396:	4b29      	ldr	r3, [pc, #164]	; (1943c <sw_switch.isra.0+0xb0>)
   19398:	f8cc 3560 	str.w	r3, [ip, #1376]	; 0x560
   1939c:	f104 030b 	add.w	r3, r4, #11
   193a0:	b2db      	uxtb	r3, r3
   193a2:	00db      	lsls	r3, r3, #3
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   193a4:	4f26      	ldr	r7, [pc, #152]	; (19440 <sw_switch.isra.0+0xb4>)
   193a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   193aa:	00e5      	lsls	r5, r4, #3
   193ac:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   193b0:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   193b4:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   193b8:	eb07 0784 	add.w	r7, r7, r4, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   193bc:	f8cc 5564 	str.w	r5, [ip, #1380]	; 0x564
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   193c0:	b225      	sxth	r5, r4

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   193c2:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   193c6:	b388      	cbz	r0, 1942c <sw_switch.isra.0+0xa0>

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	ARG_UNUSED(flags);

	switch (phy) {
   193c8:	f24a 274e 	movw	r7, #41550	; 0xa24e
   193cc:	f649 6c34 	movw	ip, #40500	; 0x9e34
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   193d0:	f242 40b8 	movw	r0, #9400	; 0x24b8
	switch (phy) {
   193d4:	2a02      	cmp	r2, #2
   193d6:	bf14      	ite	ne
   193d8:	463a      	movne	r2, r7
   193da:	4662      	moveq	r2, ip
		return HAL_RADIO_NRF52832_RX_CHAIN_DELAY_2M_NS;
   193dc:	f241 574a 	movw	r7, #5450	; 0x154a
   193e0:	2902      	cmp	r1, #2
   193e2:	bf14      	ite	ne
   193e4:	4601      	movne	r1, r0
   193e6:	4639      	moveq	r1, r7
		/* TX */

		/* Calculate delay with respect to current (RX) and next
		 * (TX) PHY. If RX PHY is LE Coded, assume S8 coding scheme.
		 */
		delay = HAL_RADIO_NS2US_ROUND(
   193e8:	4816      	ldr	r0, [pc, #88]	; (19444 <sw_switch.isra.0+0xb8>)

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   193ea:	4f17      	ldr	r7, [pc, #92]	; (19448 <sw_switch.isra.0+0xbc>)
   193ec:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
   193f0:	440a      	add	r2, r1
   193f2:	fba0 3202 	umull	r3, r2, r0, r2
   193f6:	0992      	lsrs	r2, r2, #6
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   193f8:	00ab      	lsls	r3, r5, #2
   193fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   193fe:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   19402:	3401      	adds	r4, #1
		SW_SWITCH_TIMER->CC[cc]) {
   19404:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
	if (delay <
   19408:	4291      	cmp	r1, r2
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1940a:	bf8a      	itet	hi
   1940c:	f8d3 1540 	ldrhi.w	r1, [r3, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   19410:	2201      	movls	r2, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   19412:	1a8a      	subhi	r2, r1, r2
   19414:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   19418:	4b0c      	ldr	r3, [pc, #48]	; (1944c <sw_switch.isra.0+0xc0>)
	sw_tifs_toggle &= 1;
   1941a:	f004 0401 	and.w	r4, r4, #1
   1941e:	f44f 6290 	mov.w	r2, #1152	; 0x480
   19422:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   19426:	7034      	strb	r4, [r6, #0]
}
   19428:	bcf0      	pop	{r4, r5, r6, r7}
   1942a:	4770      	bx	lr
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1942c:	4a08      	ldr	r2, [pc, #32]	; (19450 <sw_switch.isra.0+0xc4>)
   1942e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
		delay = HAL_RADIO_NS2US_CEIL(
   19432:	2229      	movs	r2, #41	; 0x29
{
	nrf_ppi_task_endpoint_setup(
		NRF_PPI,
		ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_TASK_RX);
}
   19434:	e7e0      	b.n	193f8 <sw_switch.isra.0+0x6c>
   19436:	bf00      	nop
   19438:	20003085 	.word	0x20003085
   1943c:	4000110c 	.word	0x4000110c
   19440:	40009140 	.word	0x40009140
   19444:	10624dd3 	.word	0x10624dd3
   19448:	40001000 	.word	0x40001000
   1944c:	4001f000 	.word	0x4001f000
   19450:	40001004 	.word	0x40001004

00019454 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   19454:	4b04      	ldr	r3, [pc, #16]	; (19468 <isr_radio+0x14>)
   19456:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1945a:	b123      	cbz	r3, 19466 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1945c:	4a03      	ldr	r2, [pc, #12]	; (1946c <isr_radio+0x18>)
   1945e:	4b04      	ldr	r3, [pc, #16]	; (19470 <isr_radio+0x1c>)
   19460:	6810      	ldr	r0, [r2, #0]
   19462:	681b      	ldr	r3, [r3, #0]
   19464:	4718      	bx	r3
}
   19466:	4770      	bx	lr
   19468:	40001000 	.word	0x40001000
   1946c:	20002998 	.word	0x20002998
   19470:	20002994 	.word	0x20002994

00019474 <radio_isr_set>:
{
   19474:	b538      	push	{r3, r4, r5, lr}
   19476:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   19478:	2001      	movs	r0, #1
{
   1947a:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1947c:	f7ec fbe2 	bl	5c44 <arch_irq_disable>
	isr_cb_param = param;
   19480:	4a08      	ldr	r2, [pc, #32]	; (194a4 <radio_isr_set+0x30>)
	isr_cb = cb;
   19482:	4809      	ldr	r0, [pc, #36]	; (194a8 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19484:	4b09      	ldr	r3, [pc, #36]	; (194ac <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19486:	490a      	ldr	r1, [pc, #40]	; (194b0 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   19488:	6015      	str	r5, [r2, #0]
   1948a:	2510      	movs	r5, #16
   1948c:	2202      	movs	r2, #2
	isr_cb = cb;
   1948e:	6004      	str	r4, [r0, #0]
   19490:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   19494:	2001      	movs	r0, #1
   19496:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   1949a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1949e:	f7ec bbc1 	b.w	5c24 <arch_irq_enable>
   194a2:	bf00      	nop
   194a4:	20002998 	.word	0x20002998
   194a8:	20002994 	.word	0x20002994
   194ac:	e000e100 	.word	0xe000e100
   194b0:	40001000 	.word	0x40001000

000194b4 <radio_reset>:
{
   194b4:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   194b6:	2001      	movs	r0, #1
   194b8:	f7ec fbc4 	bl	5c44 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   194bc:	4b0c      	ldr	r3, [pc, #48]	; (194f0 <radio_reset+0x3c>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   194be:	490d      	ldr	r1, [pc, #52]	; (194f4 <radio_reset+0x40>)
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   194c0:	4a0d      	ldr	r2, [pc, #52]	; (194f8 <radio_reset+0x44>)
   194c2:	2400      	movs	r4, #0
   194c4:	2001      	movs	r0, #1
   194c6:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
   194ca:	f8c3 0ffc 	str.w	r0, [r3, #4092]	; 0xffc
   194ce:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   194d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   194d4:	f023 0301 	bic.w	r3, r3, #1
   194d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   194dc:	f44f 6410 	mov.w	r4, #2304	; 0x900
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   194e0:	f44f 5090 	mov.w	r0, #4608	; 0x1200
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   194e4:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   194e6:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   194ea:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   194ee:	bd10      	pop	{r4, pc}
   194f0:	40001000 	.word	0x40001000
   194f4:	40001774 	.word	0x40001774
   194f8:	4001f000 	.word	0x4001f000

000194fc <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   194fc:	4b06      	ldr	r3, [pc, #24]	; (19518 <radio_phy_set+0x1c>)
	switch (phy) {
   194fe:	2802      	cmp	r0, #2
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   19500:	bf14      	ite	ne
   19502:	2203      	movne	r2, #3
   19504:	2204      	moveq	r2, #4
   19506:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1950a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1950e:	f042 0201 	orr.w	r2, r2, #1
   19512:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   19516:	4770      	bx	lr
   19518:	40001000 	.word	0x40001000

0001951c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1951c:	4b01      	ldr	r3, [pc, #4]	; (19524 <radio_tx_power_set+0x8>)
   1951e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   19522:	4770      	bx	lr
   19524:	40001000 	.word	0x40001000

00019528 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   19528:	4b01      	ldr	r3, [pc, #4]	; (19530 <radio_freq_chan_set+0x8>)
   1952a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1952e:	4770      	bx	lr
   19530:	40001000 	.word	0x40001000

00019534 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   19534:	4b07      	ldr	r3, [pc, #28]	; (19554 <radio_whiten_iv_set+0x20>)
   19536:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1953a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1953e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   19542:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   19546:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1954a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1954e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   19552:	4770      	bx	lr
   19554:	40001000 	.word	0x40001000

00019558 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   19558:	4a0b      	ldr	r2, [pc, #44]	; (19588 <radio_aa_set+0x30>)
   1955a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1955c:	2301      	movs	r3, #1
{
   1955e:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   19560:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   19564:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   19568:	78c3      	ldrb	r3, [r0, #3]
   1956a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1956e:	7843      	ldrb	r3, [r0, #1]
   19570:	7884      	ldrb	r4, [r0, #2]
   19572:	7801      	ldrb	r1, [r0, #0]
   19574:	041b      	lsls	r3, r3, #16
   19576:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   1957a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1957e:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   19580:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   19584:	4770      	bx	lr
   19586:	bf00      	nop
   19588:	40001000 	.word	0x40001000

0001958c <radio_pkt_configure>:
	switch (phy) {
   1958c:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19590:	2b02      	cmp	r3, #2
{
   19592:	b410      	push	{r4}
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   19594:	bf14      	ite	ne
   19596:	2400      	movne	r4, #0
   19598:	f04f 7480 	moveq.w	r4, #16777216	; 0x1000000
	if (dc) {
   1959c:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1959e:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   195a2:	bf48      	it	mi
   195a4:	f444 1480 	orrmi.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   195a8:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   195aa:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   195ae:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   195b0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   195b4:	4a0a      	ldr	r2, [pc, #40]	; (195e0 <radio_pkt_configure+0x54>)
}
   195b6:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   195b8:	4303      	orrs	r3, r0
   195ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   195be:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   195c2:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   195c6:	4807      	ldr	r0, [pc, #28]	; (195e4 <radio_pkt_configure+0x58>)
   195c8:	4018      	ands	r0, r3
   195ca:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   195ce:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   195d2:	4319      	orrs	r1, r3
   195d4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   195d8:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   195dc:	4770      	bx	lr
   195de:	bf00      	nop
   195e0:	40001000 	.word	0x40001000
   195e4:	fef80000 	.word	0xfef80000

000195e8 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   195e8:	4b01      	ldr	r3, [pc, #4]	; (195f0 <radio_pkt_rx_set+0x8>)
   195ea:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   195ee:	4770      	bx	lr
   195f0:	40001000 	.word	0x40001000

000195f4 <radio_pkt_tx_set>:
   195f4:	4b01      	ldr	r3, [pc, #4]	; (195fc <radio_pkt_tx_set+0x8>)
   195f6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   195fa:	4770      	bx	lr
   195fc:	40001000 	.word	0x40001000

00019600 <radio_tx_chain_delay_get>:
}
   19600:	2001      	movs	r0, #1
   19602:	4770      	bx	lr

00019604 <radio_rx_ready_delay_get>:
}
   19604:	2029      	movs	r0, #41	; 0x29
   19606:	4770      	bx	lr

00019608 <radio_rx_chain_delay_get>:
	switch (phy) {
   19608:	2802      	cmp	r0, #2
}
   1960a:	bf14      	ite	ne
   1960c:	200a      	movne	r0, #10
   1960e:	2006      	moveq	r0, #6
   19610:	4770      	bx	lr
   19612:	bf00      	nop

00019614 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19614:	4b01      	ldr	r3, [pc, #4]	; (1961c <radio_tx_enable+0x8>)
   19616:	2201      	movs	r2, #1
   19618:	601a      	str	r2, [r3, #0]
}
   1961a:	4770      	bx	lr
   1961c:	40001000 	.word	0x40001000

00019620 <radio_disable>:
{
   19620:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   19622:	4a08      	ldr	r2, [pc, #32]	; (19644 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   19624:	4808      	ldr	r0, [pc, #32]	; (19648 <radio_disable+0x28>)
   19626:	4909      	ldr	r1, [pc, #36]	; (1964c <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   19628:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1962a:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1962e:	2400      	movs	r4, #0
   19630:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   19634:	6053      	str	r3, [r2, #4]
   19636:	60d3      	str	r3, [r2, #12]
   19638:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   1963c:	bc30      	pop	{r4, r5}
   1963e:	600b      	str	r3, [r1, #0]
   19640:	4770      	bx	lr
   19642:	bf00      	nop
   19644:	4001f000 	.word	0x4001f000
   19648:	40001000 	.word	0x40001000
   1964c:	40001010 	.word	0x40001010

00019650 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   19650:	4b04      	ldr	r3, [pc, #16]	; (19664 <radio_status_reset+0x14>)
   19652:	2200      	movs	r2, #0
   19654:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   19658:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1965c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   19660:	4770      	bx	lr
   19662:	bf00      	nop
   19664:	40001000 	.word	0x40001000

00019668 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   19668:	4b03      	ldr	r3, [pc, #12]	; (19678 <radio_is_ready+0x10>)
   1966a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1966e:	3800      	subs	r0, #0
   19670:	bf18      	it	ne
   19672:	2001      	movne	r0, #1
   19674:	4770      	bx	lr
   19676:	bf00      	nop
   19678:	40001000 	.word	0x40001000

0001967c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1967c:	4b03      	ldr	r3, [pc, #12]	; (1968c <radio_is_done+0x10>)
   1967e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   19682:	3800      	subs	r0, #0
   19684:	bf18      	it	ne
   19686:	2001      	movne	r0, #1
   19688:	4770      	bx	lr
   1968a:	bf00      	nop
   1968c:	40001000 	.word	0x40001000

00019690 <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   19690:	4b03      	ldr	r3, [pc, #12]	; (196a0 <radio_is_idle+0x10>)
   19692:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   19696:	fab0 f080 	clz	r0, r0
   1969a:	0940      	lsrs	r0, r0, #5
   1969c:	4770      	bx	lr
   1969e:	bf00      	nop
   196a0:	40001000 	.word	0x40001000

000196a4 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   196a4:	4b04      	ldr	r3, [pc, #16]	; (196b8 <radio_crc_configure+0x14>)
   196a6:	f240 1203 	movw	r2, #259	; 0x103
   196aa:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   196ae:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   196b2:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   196b6:	4770      	bx	lr
   196b8:	40001000 	.word	0x40001000

000196bc <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   196bc:	4b03      	ldr	r3, [pc, #12]	; (196cc <radio_crc_is_valid+0x10>)
   196be:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   196c2:	3800      	subs	r0, #0
   196c4:	bf18      	it	ne
   196c6:	2001      	movne	r0, #1
   196c8:	4770      	bx	lr
   196ca:	bf00      	nop
   196cc:	40001000 	.word	0x40001000

000196d0 <radio_pkt_empty_get>:
}
   196d0:	4800      	ldr	r0, [pc, #0]	; (196d4 <radio_pkt_empty_get+0x4>)
   196d2:	4770      	bx	lr
   196d4:	2000288c 	.word	0x2000288c

000196d8 <radio_pkt_scratch_get>:
}
   196d8:	4800      	ldr	r0, [pc, #0]	; (196dc <radio_pkt_scratch_get+0x4>)
   196da:	4770      	bx	lr
   196dc:	20002890 	.word	0x20002890

000196e0 <radio_pkt_decrypt_get>:
}
   196e0:	4800      	ldr	r0, [pc, #0]	; (196e4 <radio_pkt_decrypt_get+0x4>)
   196e2:	4770      	bx	lr
   196e4:	20002788 	.word	0x20002788

000196e8 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   196e8:	4b05      	ldr	r3, [pc, #20]	; (19700 <radio_switch_complete_and_rx+0x18>)
{
   196ea:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   196ec:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   196ee:	2403      	movs	r4, #3
{
   196f0:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   196f2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   196f6:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   196f8:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   196fa:	f7ff be47 	b.w	1938c <sw_switch.isra.0>
   196fe:	bf00      	nop
   19700:	40001000 	.word	0x40001000

00019704 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19704:	4b04      	ldr	r3, [pc, #16]	; (19718 <radio_switch_complete_and_tx+0x14>)
{
   19706:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   19708:	2403      	movs	r4, #3
{
   1970a:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1970c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   19710:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19712:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   19714:	f7ff be3a 	b.w	1938c <sw_switch.isra.0>
   19718:	40001000 	.word	0x40001000

0001971c <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1971c:	4904      	ldr	r1, [pc, #16]	; (19730 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1971e:	4b05      	ldr	r3, [pc, #20]	; (19734 <radio_switch_complete_and_disable+0x18>)
   19720:	2003      	movs	r0, #3
   19722:	f44f 6290 	mov.w	r2, #1152	; 0x480
   19726:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1972a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1972e:	4770      	bx	lr
   19730:	40001000 	.word	0x40001000
   19734:	4001f000 	.word	0x4001f000

00019738 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   19738:	4b02      	ldr	r3, [pc, #8]	; (19744 <radio_rssi_status_reset+0xc>)
   1973a:	2200      	movs	r2, #0
   1973c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   19740:	4770      	bx	lr
   19742:	bf00      	nop
   19744:	40001000 	.word	0x40001000

00019748 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   19748:	4b03      	ldr	r3, [pc, #12]	; (19758 <radio_rssi_is_ready+0x10>)
   1974a:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1974e:	3800      	subs	r0, #0
   19750:	bf18      	it	ne
   19752:	2001      	movne	r0, #1
   19754:	4770      	bx	lr
   19756:	bf00      	nop
   19758:	40001000 	.word	0x40001000

0001975c <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1975c:	b430      	push	{r4, r5}
   1975e:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   19760:	00a3      	lsls	r3, r4, #2
   19762:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1976a:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1976c:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   19770:	3401      	adds	r4, #1
   19772:	8895      	ldrh	r5, [r2, #4]
   19774:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   19778:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1977a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1977e:	d1ef      	bne.n	19760 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19780:	4b03      	ldr	r3, [pc, #12]	; (19790 <radio_filter_configure+0x34>)
   19782:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   19786:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   19788:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1978c:	4770      	bx	lr
   1978e:	bf00      	nop
   19790:	40001000 	.word	0x40001000

00019794 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   19794:	4a03      	ldr	r2, [pc, #12]	; (197a4 <radio_filter_disable+0x10>)
   19796:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1979a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1979e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   197a2:	4770      	bx	lr
   197a4:	40001000 	.word	0x40001000

000197a8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   197a8:	4b02      	ldr	r3, [pc, #8]	; (197b4 <radio_filter_status_reset+0xc>)
   197aa:	2200      	movs	r2, #0
   197ac:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   197b0:	4770      	bx	lr
   197b2:	bf00      	nop
   197b4:	40001000 	.word	0x40001000

000197b8 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   197b8:	4b03      	ldr	r3, [pc, #12]	; (197c8 <radio_filter_has_match+0x10>)
   197ba:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   197be:	3800      	subs	r0, #0
   197c0:	bf18      	it	ne
   197c2:	2001      	movne	r0, #1
   197c4:	4770      	bx	lr
   197c6:	bf00      	nop
   197c8:	40001000 	.word	0x40001000

000197cc <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   197cc:	4b01      	ldr	r3, [pc, #4]	; (197d4 <radio_filter_match_get+0x8>)
   197ce:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   197d2:	4770      	bx	lr
   197d4:	40001000 	.word	0x40001000

000197d8 <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   197d8:	4904      	ldr	r1, [pc, #16]	; (197ec <radio_tmr_status_reset+0x14>)
   197da:	4b05      	ldr	r3, [pc, #20]	; (197f0 <radio_tmr_status_reset+0x18>)
   197dc:	4a05      	ldr	r2, [pc, #20]	; (197f4 <radio_tmr_status_reset+0x1c>)
   197de:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   197e2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   197e6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   197ea:	4770      	bx	lr
   197ec:	4000b000 	.word	0x4000b000
   197f0:	4001f000 	.word	0x4001f000
   197f4:	0e700060 	.word	0x0e700060

000197f8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   197f8:	4b03      	ldr	r3, [pc, #12]	; (19808 <radio_tmr_tifs_set+0x10>)
   197fa:	4a04      	ldr	r2, [pc, #16]	; (1980c <radio_tmr_tifs_set+0x14>)
   197fc:	781b      	ldrb	r3, [r3, #0]
   197fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   19802:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   19806:	4770      	bx	lr
   19808:	20003085 	.word	0x20003085
   1980c:	40009000 	.word	0x40009000

00019810 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   19810:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19812:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   19816:	4d31      	ldr	r5, [pc, #196]	; (198dc <radio_tmr_start+0xcc>)
   19818:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1981c:	42ab      	cmp	r3, r5
{
   1981e:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   19820:	d906      	bls.n	19830 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   19822:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   19826:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1982a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   1982e:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19830:	4d2b      	ldr	r5, [pc, #172]	; (198e0 <radio_tmr_start+0xd0>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   19832:	4b2c      	ldr	r3, [pc, #176]	; (198e4 <radio_tmr_start+0xd4>)
	remainder /= 1000000UL;
   19834:	482c      	ldr	r0, [pc, #176]	; (198e8 <radio_tmr_start+0xd8>)
   19836:	2601      	movs	r6, #1
   19838:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1983a:	2600      	movs	r6, #0
   1983c:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   19840:	4d2a      	ldr	r5, [pc, #168]	; (198ec <radio_tmr_start+0xdc>)
	remainder /= 1000000UL;
   19842:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   19846:	2604      	movs	r6, #4
   19848:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1984c:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1984e:	2602      	movs	r6, #2
   19850:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19854:	4a26      	ldr	r2, [pc, #152]	; (198f0 <radio_tmr_start+0xe0>)
    p_reg->CC[cc_channel] = cc_value;
   19856:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1985a:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1985e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   19862:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   19866:	4923      	ldr	r1, [pc, #140]	; (198f4 <radio_tmr_start+0xe4>)
   19868:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   1986c:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1986e:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   19872:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   19876:	b354      	cbz	r4, 198ce <radio_tmr_start+0xbe>
    p_reg->CHENCLR = mask;
   19878:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1987c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   19880:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   19884:	4b1a      	ldr	r3, [pc, #104]	; (198f0 <radio_tmr_start+0xe0>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   19886:	4a1c      	ldr	r2, [pc, #112]	; (198f8 <radio_tmr_start+0xe8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19888:	491c      	ldr	r1, [pc, #112]	; (198fc <radio_tmr_start+0xec>)
   1988a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1988e:	2500      	movs	r5, #0
   19890:	2401      	movs	r4, #1
	SW_SWITCH_TIMER->PRESCALER = 4;
   19892:	2604      	movs	r6, #4
   19894:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->MODE = 0;
   19896:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1989a:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1989e:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
   198a2:	6014      	str	r4, [r2, #0]
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198a4:	f502 32b0 	add.w	r2, r2, #90112	; 0x16000
    p_reg->CH[(uint32_t) channel].EEP = eep;
   198a8:	4f15      	ldr	r7, [pc, #84]	; (19900 <radio_tmr_start+0xf0>)
   198aa:	4e16      	ldr	r6, [pc, #88]	; (19904 <radio_tmr_start+0xf4>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198ac:	4d16      	ldr	r5, [pc, #88]	; (19908 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   198ae:	4c17      	ldr	r4, [pc, #92]	; (1990c <radio_tmr_start+0xfc>)
   198b0:	f8c3 7548 	str.w	r7, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198b4:	320c      	adds	r2, #12
   198b6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   198ba:	f8c3 6550 	str.w	r6, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198be:	f8c3 5554 	str.w	r5, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   198c2:	f8c3 4558 	str.w	r4, [r3, #1368]	; 0x558
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   198c6:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   198c8:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
   198cc:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   198ce:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   198d2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   198d6:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   198da:	e7d3      	b.n	19884 <radio_tmr_start+0x74>
   198dc:	7ff0bdbf 	.word	0x7ff0bdbf
   198e0:	4000800c 	.word	0x4000800c
   198e4:	40008000 	.word	0x40008000
   198e8:	431bde83 	.word	0x431bde83
   198ec:	4000b000 	.word	0x4000b000
   198f0:	4001f000 	.word	0x4001f000
   198f4:	4000b148 	.word	0x4000b148
   198f8:	40009000 	.word	0x40009000
   198fc:	4000900c 	.word	0x4000900c
   19900:	4000110c 	.word	0x4000110c
   19904:	40009140 	.word	0x40009140
   19908:	4001f004 	.word	0x4001f004
   1990c:	40009144 	.word	0x40009144

00019910 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   19910:	4b01      	ldr	r3, [pc, #4]	; (19918 <radio_tmr_start_get+0x8>)
   19912:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   19916:	4770      	bx	lr
   19918:	4000b000 	.word	0x4000b000

0001991c <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   1991c:	b410      	push	{r4}
   1991e:	4805      	ldr	r0, [pc, #20]	; (19934 <radio_tmr_stop+0x18>)
   19920:	4c05      	ldr	r4, [pc, #20]	; (19938 <radio_tmr_stop+0x1c>)
   19922:	4906      	ldr	r1, [pc, #24]	; (1993c <radio_tmr_stop+0x20>)
   19924:	4a06      	ldr	r2, [pc, #24]	; (19940 <radio_tmr_stop+0x24>)
   19926:	2301      	movs	r3, #1
   19928:	6023      	str	r3, [r4, #0]
   1992a:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1992c:	bc10      	pop	{r4}
   1992e:	600b      	str	r3, [r1, #0]
   19930:	6013      	str	r3, [r2, #0]
   19932:	4770      	bx	lr
   19934:	40008010 	.word	0x40008010
   19938:	40008004 	.word	0x40008004
   1993c:	40009004 	.word	0x40009004
   19940:	40009010 	.word	0x40009010

00019944 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   19944:	4904      	ldr	r1, [pc, #16]	; (19958 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   19946:	4b05      	ldr	r3, [pc, #20]	; (1995c <radio_tmr_hcto_configure+0x18>)
   19948:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1994c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   19950:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   19954:	4770      	bx	lr
   19956:	bf00      	nop
   19958:	40008000 	.word	0x40008000
   1995c:	4001f000 	.word	0x4001f000

00019960 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19960:	4b05      	ldr	r3, [pc, #20]	; (19978 <radio_tmr_aa_capture+0x18>)
   19962:	4806      	ldr	r0, [pc, #24]	; (1997c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   19964:	4906      	ldr	r1, [pc, #24]	; (19980 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   19966:	4a07      	ldr	r2, [pc, #28]	; (19984 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   19968:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1996c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   19970:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   19974:	4770      	bx	lr
   19976:	bf00      	nop
   19978:	4001f000 	.word	0x4001f000
   1997c:	40001100 	.word	0x40001100
   19980:	40008040 	.word	0x40008040
   19984:	04000040 	.word	0x04000040

00019988 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   19988:	4b01      	ldr	r3, [pc, #4]	; (19990 <radio_tmr_aa_get+0x8>)
   1998a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1998e:	4770      	bx	lr
   19990:	40008000 	.word	0x40008000

00019994 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   19994:	4b01      	ldr	r3, [pc, #4]	; (1999c <radio_tmr_aa_save+0x8>)
   19996:	6018      	str	r0, [r3, #0]
}
   19998:	4770      	bx	lr
   1999a:	bf00      	nop
   1999c:	2000299c 	.word	0x2000299c

000199a0 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   199a0:	4b01      	ldr	r3, [pc, #4]	; (199a8 <radio_tmr_aa_restore+0x8>)
}
   199a2:	6818      	ldr	r0, [r3, #0]
   199a4:	4770      	bx	lr
   199a6:	bf00      	nop
   199a8:	2000299c 	.word	0x2000299c

000199ac <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   199ac:	4b01      	ldr	r3, [pc, #4]	; (199b4 <radio_tmr_ready_get+0x8>)
   199ae:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   199b2:	4770      	bx	lr
   199b4:	40008000 	.word	0x40008000

000199b8 <radio_tmr_end_capture>:
   199b8:	4b02      	ldr	r3, [pc, #8]	; (199c4 <radio_tmr_end_capture+0xc>)
   199ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   199be:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   199c2:	4770      	bx	lr
   199c4:	4001f000 	.word	0x4001f000

000199c8 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   199c8:	4b01      	ldr	r3, [pc, #4]	; (199d0 <radio_tmr_end_get+0x8>)
   199ca:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   199ce:	4770      	bx	lr
   199d0:	40008000 	.word	0x40008000

000199d4 <radio_tmr_tifs_base_get>:
   199d4:	4b01      	ldr	r3, [pc, #4]	; (199dc <radio_tmr_tifs_base_get+0x8>)
   199d6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   199da:	4770      	bx	lr
   199dc:	40008000 	.word	0x40008000

000199e0 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   199e0:	b4f0      	push	{r4, r5, r6, r7}
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   199e2:	4c14      	ldr	r4, [pc, #80]	; (19a34 <radio_ccm_rx_pkt_set+0x54>)
   199e4:	4f14      	ldr	r7, [pc, #80]	; (19a38 <radio_ccm_rx_pkt_set+0x58>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   199e6:	4b15      	ldr	r3, [pc, #84]	; (19a3c <radio_ccm_rx_pkt_set+0x5c>)
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   199e8:	4d15      	ldr	r5, [pc, #84]	; (19a40 <radio_ccm_rx_pkt_set+0x60>)
   199ea:	4e16      	ldr	r6, [pc, #88]	; (19a44 <radio_ccm_rx_pkt_set+0x64>)
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   199ec:	2902      	cmp	r1, #2
   199ee:	bf14      	ite	ne
   199f0:	4621      	movne	r1, r4
   199f2:	4639      	moveq	r1, r7
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   199f4:	2400      	movs	r4, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   199f6:	2702      	movs	r7, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   199f8:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   199fc:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   19a00:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19a04:	4f10      	ldr	r7, [pc, #64]	; (19a48 <radio_ccm_rx_pkt_set+0x68>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19a06:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   19a0a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   19a0e:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   19a12:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19a16:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19a18:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19a1c:	4628      	mov	r0, r5
	NRF_CCM->SHORTS = 0;
   19a1e:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19a22:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19a26:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   19a2a:	f8c6 1504 	str.w	r1, [r6, #1284]	; 0x504
}
   19a2e:	bcf0      	pop	{r4, r5, r6, r7}
   19a30:	601a      	str	r2, [r3, #0]
   19a32:	4770      	bx	lr
   19a34:	01000001 	.word	0x01000001
   19a38:	01010001 	.word	0x01010001
   19a3c:	4000f000 	.word	0x4000f000
   19a40:	20002890 	.word	0x20002890
   19a44:	4001f000 	.word	0x4001f000
   19a48:	2000267c 	.word	0x2000267c

00019a4c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   19a4c:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19a4e:	4b10      	ldr	r3, [pc, #64]	; (19a90 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19a50:	4d10      	ldr	r5, [pc, #64]	; (19a94 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   19a52:	4e11      	ldr	r6, [pc, #68]	; (19a98 <radio_ccm_tx_pkt_set+0x4c>)
{
   19a54:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19a56:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19a58:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   19a5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   19a5e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   19a62:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   19a66:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19a6a:	4e0c      	ldr	r6, [pc, #48]	; (19a9c <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   19a6c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19a70:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   19a72:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   19a76:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   19a78:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   19a7c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   19a80:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   19a84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   19a88:	601c      	str	r4, [r3, #0]
}
   19a8a:	bc70      	pop	{r4, r5, r6}
   19a8c:	4770      	bx	lr
   19a8e:	bf00      	nop
   19a90:	4000f000 	.word	0x4000f000
   19a94:	20002890 	.word	0x20002890
   19a98:	01010000 	.word	0x01010000
   19a9c:	2000267c 	.word	0x2000267c

00019aa0 <radio_ccm_is_done>:
    return ((uint32_t)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   19aa0:	4a0e      	ldr	r2, [pc, #56]	; (19adc <radio_ccm_is_done+0x3c>)
   19aa2:	2302      	movs	r3, #2
   19aa4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19aa8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19aac:	b933      	cbnz	r3, 19abc <radio_ccm_is_done+0x1c>
		__WFE();
   19aae:	bf20      	wfe
		__SEV();
   19ab0:	bf40      	sev
		__WFE();
   19ab2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   19ab4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   19ab8:	2b00      	cmp	r3, #0
   19aba:	d0f8      	beq.n	19aae <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   19abc:	4b07      	ldr	r3, [pc, #28]	; (19adc <radio_ccm_is_done+0x3c>)
   19abe:	4a08      	ldr	r2, [pc, #32]	; (19ae0 <radio_ccm_is_done+0x40>)
   19ac0:	2002      	movs	r0, #2
   19ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   19ac6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   19aca:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   19ace:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   19ad2:	fab0 f080 	clz	r0, r0
   19ad6:	0940      	lsrs	r0, r0, #5
   19ad8:	4770      	bx	lr
   19ada:	bf00      	nop
   19adc:	4000f000 	.word	0x4000f000
   19ae0:	e000e100 	.word	0xe000e100

00019ae4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   19ae4:	4b03      	ldr	r3, [pc, #12]	; (19af4 <radio_ccm_mic_is_valid+0x10>)
   19ae6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19aea:	3800      	subs	r0, #0
   19aec:	bf18      	it	ne
   19aee:	2001      	movne	r0, #1
   19af0:	4770      	bx	lr
   19af2:	bf00      	nop
   19af4:	4000f000 	.word	0x4000f000

00019af8 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19af8:	4b15      	ldr	r3, [pc, #84]	; (19b50 <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   19afa:	4a16      	ldr	r2, [pc, #88]	; (19b54 <radio_ar_configure+0x5c>)
{
   19afc:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   19afe:	2403      	movs	r4, #3
   19b00:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   19b04:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   19b08:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   19b0c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   19b10:	4d11      	ldr	r5, [pc, #68]	; (19b58 <radio_ar_configure+0x60>)
   19b12:	4c12      	ldr	r4, [pc, #72]	; (19b5c <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   19b14:	3801      	subs	r0, #1
   19b16:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   19b1a:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   19b1c:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   19b1e:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   19b22:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   19b26:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   19b2a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   19b2e:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   19b32:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   19b36:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   19b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19b3e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19b42:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   19b46:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   19b4a:	bc30      	pop	{r4, r5}
   19b4c:	4770      	bx	lr
   19b4e:	bf00      	nop
   19b50:	4000f000 	.word	0x4000f000
   19b54:	40001000 	.word	0x40001000
   19b58:	20002678 	.word	0x20002678
   19b5c:	4001f000 	.word	0x4001f000

00019b60 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   19b60:	4b01      	ldr	r3, [pc, #4]	; (19b68 <radio_ar_match_get+0x8>)
   19b62:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   19b66:	4770      	bx	lr
   19b68:	4000f000 	.word	0x4000f000

00019b6c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19b6c:	4903      	ldr	r1, [pc, #12]	; (19b7c <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19b6e:	4a04      	ldr	r2, [pc, #16]	; (19b80 <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   19b70:	2300      	movs	r3, #0
   19b72:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   19b76:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   19b7a:	4770      	bx	lr
   19b7c:	40001000 	.word	0x40001000
   19b80:	4000f000 	.word	0x4000f000

00019b84 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   19b84:	4b08      	ldr	r3, [pc, #32]	; (19ba8 <radio_ar_has_match+0x24>)
   19b86:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   19b8a:	b160      	cbz	r0, 19ba6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   19b8c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   19b90:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   19b94:	b138      	cbz	r0, 19ba6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   19b96:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   19b9a:	b120      	cbz	r0, 19ba6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   19b9c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   19ba0:	fab0 f080 	clz	r0, r0
   19ba4:	0940      	lsrs	r0, r0, #5
}
   19ba6:	4770      	bx	lr
   19ba8:	40001000 	.word	0x40001000

00019bac <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19bac:	2902      	cmp	r1, #2
{
   19bae:	b510      	push	{r4, lr}
   19bb0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   19bb2:	d00b      	beq.n	19bcc <mayfly_enable_cb+0x20>
   19bb4:	4a0a      	ldr	r2, [pc, #40]	; (19be0 <mayfly_enable_cb+0x34>)
   19bb6:	490b      	ldr	r1, [pc, #44]	; (19be4 <mayfly_enable_cb+0x38>)
   19bb8:	480b      	ldr	r0, [pc, #44]	; (19be8 <mayfly_enable_cb+0x3c>)
   19bba:	231f      	movs	r3, #31
   19bbc:	f002 fe01 	bl	1c7c2 <printk>
   19bc0:	4040      	eors	r0, r0
   19bc2:	f380 8811 	msr	BASEPRI, r0
   19bc6:	f04f 0003 	mov.w	r0, #3
   19bca:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   19bcc:	200b      	movs	r0, #11
	if (enable) {
   19bce:	b11c      	cbz	r4, 19bd8 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   19bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   19bd4:	f7ec b826 	b.w	5c24 <arch_irq_enable>
}
   19bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   19bdc:	f7ec b832 	b.w	5c44 <arch_irq_disable>
   19be0:	00023308 	.word	0x00023308
   19be4:	00023358 	.word	0x00023358
   19be8:	00022678 	.word	0x00022678

00019bec <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19bec:	b129      	cbz	r1, 19bfa <mayfly_is_enabled+0xe>
   19bee:	3901      	subs	r1, #1
   19bf0:	2901      	cmp	r1, #1
   19bf2:	d805      	bhi.n	19c00 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   19bf4:	200b      	movs	r0, #11
   19bf6:	f7ec b839 	b.w	5c6c <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   19bfa:	2018      	movs	r0, #24
   19bfc:	f7ec b836 	b.w	5c6c <arch_irq_is_enabled>
{
   19c00:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   19c02:	4a07      	ldr	r2, [pc, #28]	; (19c20 <mayfly_is_enabled+0x34>)
   19c04:	4907      	ldr	r1, [pc, #28]	; (19c24 <mayfly_is_enabled+0x38>)
   19c06:	4808      	ldr	r0, [pc, #32]	; (19c28 <mayfly_is_enabled+0x3c>)
   19c08:	2337      	movs	r3, #55	; 0x37
   19c0a:	f002 fdda 	bl	1c7c2 <printk>
   19c0e:	4040      	eors	r0, r0
   19c10:	f380 8811 	msr	BASEPRI, r0
   19c14:	f04f 0003 	mov.w	r0, #3
   19c18:	df02      	svc	2
		break;
	}

	return 0;
}
   19c1a:	2000      	movs	r0, #0
   19c1c:	bd08      	pop	{r3, pc}
   19c1e:	bf00      	nop
   19c20:	00023308 	.word	0x00023308
   19c24:	000226e8 	.word	0x000226e8
   19c28:	00022678 	.word	0x00022678

00019c2c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19c2c:	4288      	cmp	r0, r1
   19c2e:	d013      	beq.n	19c58 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   19c30:	b928      	cbnz	r0, 19c3e <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   19c32:	1e48      	subs	r0, r1, #1
   19c34:	2801      	cmp	r0, #1
   19c36:	bf8c      	ite	hi
   19c38:	2000      	movhi	r0, #0
   19c3a:	2001      	movls	r0, #1
   19c3c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19c3e:	2801      	cmp	r0, #1
   19c40:	d106      	bne.n	19c50 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   19c42:	b159      	cbz	r1, 19c5c <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   19c44:	f1a1 0002 	sub.w	r0, r1, #2
   19c48:	fab0 f080 	clz	r0, r0
   19c4c:	0940      	lsrs	r0, r0, #5
   19c4e:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   19c50:	2802      	cmp	r0, #2
   19c52:	d004      	beq.n	19c5e <mayfly_prio_is_equal+0x32>
   19c54:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   19c56:	4770      	bx	lr
   19c58:	2001      	movs	r0, #1
   19c5a:	4770      	bx	lr
#endif
	       0;
}
   19c5c:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   19c5e:	2901      	cmp	r1, #1
   19c60:	bf8c      	ite	hi
   19c62:	2000      	movhi	r0, #0
   19c64:	2001      	movls	r0, #1
   19c66:	4770      	bx	lr

00019c68 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   19c68:	2901      	cmp	r1, #1
{
   19c6a:	b508      	push	{r3, lr}
	switch (callee_id) {
   19c6c:	d00f      	beq.n	19c8e <mayfly_pend+0x26>
   19c6e:	2902      	cmp	r1, #2
   19c70:	d00d      	beq.n	19c8e <mayfly_pend+0x26>
   19c72:	b191      	cbz	r1, 19c9a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   19c74:	4a0c      	ldr	r2, [pc, #48]	; (19ca8 <mayfly_pend+0x40>)
   19c76:	490d      	ldr	r1, [pc, #52]	; (19cac <mayfly_pend+0x44>)
   19c78:	480d      	ldr	r0, [pc, #52]	; (19cb0 <mayfly_pend+0x48>)
   19c7a:	2368      	movs	r3, #104	; 0x68
   19c7c:	f002 fda1 	bl	1c7c2 <printk>
   19c80:	4040      	eors	r0, r0
   19c82:	f380 8811 	msr	BASEPRI, r0
   19c86:	f04f 0003 	mov.w	r0, #3
   19c8a:	df02      	svc	2
		break;
	}
}
   19c8c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19c8e:	4b09      	ldr	r3, [pc, #36]	; (19cb4 <mayfly_pend+0x4c>)
   19c90:	f44f 6200 	mov.w	r2, #2048	; 0x800
   19c94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19c98:	bd08      	pop	{r3, pc}
   19c9a:	4b06      	ldr	r3, [pc, #24]	; (19cb4 <mayfly_pend+0x4c>)
   19c9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19ca0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19ca4:	bd08      	pop	{r3, pc}
   19ca6:	bf00      	nop
   19ca8:	00023308 	.word	0x00023308
   19cac:	000226e8 	.word	0x000226e8
   19cb0:	00022678 	.word	0x00022678
   19cb4:	e000e100 	.word	0xe000e100

00019cb8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19cb8:	2803      	cmp	r0, #3
{
   19cba:	b510      	push	{r4, lr}
   19cbc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19cbe:	d804      	bhi.n	19cca <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   19cc0:	4b11      	ldr	r3, [pc, #68]	; (19d08 <hal_ticker_instance0_caller_id_get+0x50>)
   19cc2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19cc4:	b18c      	cbz	r4, 19cea <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   19cc6:	4620      	mov	r0, r4
   19cc8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   19cca:	4a10      	ldr	r2, [pc, #64]	; (19d0c <hal_ticker_instance0_caller_id_get+0x54>)
   19ccc:	4910      	ldr	r1, [pc, #64]	; (19d10 <hal_ticker_instance0_caller_id_get+0x58>)
   19cce:	4811      	ldr	r0, [pc, #68]	; (19d14 <hal_ticker_instance0_caller_id_get+0x5c>)
   19cd0:	232b      	movs	r3, #43	; 0x2b
   19cd2:	f002 fd76 	bl	1c7c2 <printk>
   19cd6:	4040      	eors	r0, r0
   19cd8:	f380 8811 	msr	BASEPRI, r0
   19cdc:	f04f 0003 	mov.w	r0, #3
   19ce0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   19ce2:	4b09      	ldr	r3, [pc, #36]	; (19d08 <hal_ticker_instance0_caller_id_get+0x50>)
   19ce4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   19ce6:	2c00      	cmp	r4, #0
   19ce8:	d1ed      	bne.n	19cc6 <hal_ticker_instance0_caller_id_get+0xe>
   19cea:	4a08      	ldr	r2, [pc, #32]	; (19d0c <hal_ticker_instance0_caller_id_get+0x54>)
   19cec:	490a      	ldr	r1, [pc, #40]	; (19d18 <hal_ticker_instance0_caller_id_get+0x60>)
   19cee:	4809      	ldr	r0, [pc, #36]	; (19d14 <hal_ticker_instance0_caller_id_get+0x5c>)
   19cf0:	232e      	movs	r3, #46	; 0x2e
   19cf2:	f002 fd66 	bl	1c7c2 <printk>
   19cf6:	4040      	eors	r0, r0
   19cf8:	f380 8811 	msr	BASEPRI, r0
   19cfc:	f04f 0003 	mov.w	r0, #3
   19d00:	df02      	svc	2
}
   19d02:	4620      	mov	r0, r4
   19d04:	bd10      	pop	{r4, pc}
   19d06:	bf00      	nop
   19d08:	00023410 	.word	0x00023410
   19d0c:	0002337c 	.word	0x0002337c
   19d10:	000233cc 	.word	0x000233cc
   19d14:	00022678 	.word	0x00022678
   19d18:	000233ec 	.word	0x000233ec

00019d1c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   19d1c:	3801      	subs	r0, #1
{
   19d1e:	b510      	push	{r4, lr}
   19d20:	461c      	mov	r4, r3
   19d22:	2804      	cmp	r0, #4
   19d24:	d855      	bhi.n	19dd2 <hal_ticker_instance0_sched+0xb6>
   19d26:	e8df f000 	tbb	[pc, r0]
   19d2a:	1a12      	.short	0x1a12
   19d2c:	1e16      	.short	0x1e16
   19d2e:	03          	.byte	0x03
   19d2f:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   19d30:	2904      	cmp	r1, #4
   19d32:	d01e      	beq.n	19d72 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   19d34:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   19d36:	4a28      	ldr	r2, [pc, #160]	; (19dd8 <hal_ticker_instance0_sched+0xbc>)
   19d38:	4928      	ldr	r1, [pc, #160]	; (19ddc <hal_ticker_instance0_sched+0xc0>)
   19d3a:	4829      	ldr	r0, [pc, #164]	; (19de0 <hal_ticker_instance0_sched+0xc4>)
   19d3c:	f002 fd41 	bl	1c7c2 <printk>
   19d40:	4040      	eors	r0, r0
   19d42:	f380 8811 	msr	BASEPRI, r0
   19d46:	f04f 0003 	mov.w	r0, #3
   19d4a:	df02      	svc	2
		break;
	}
}
   19d4c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   19d4e:	2904      	cmp	r1, #4
   19d50:	d01f      	beq.n	19d92 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   19d52:	234e      	movs	r3, #78	; 0x4e
   19d54:	e7ef      	b.n	19d36 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19d56:	2904      	cmp	r1, #4
   19d58:	d013      	beq.n	19d82 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   19d5a:	237c      	movs	r3, #124	; 0x7c
   19d5c:	e7eb      	b.n	19d36 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19d5e:	2903      	cmp	r1, #3
   19d60:	d01f      	beq.n	19da2 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   19d62:	2365      	movs	r3, #101	; 0x65
   19d64:	e7e7      	b.n	19d36 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   19d66:	2903      	cmp	r1, #3
   19d68:	d02b      	beq.n	19dc2 <hal_ticker_instance0_sched+0xa6>
   19d6a:	2904      	cmp	r1, #4
   19d6c:	d021      	beq.n	19db2 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   19d6e:	23a2      	movs	r3, #162	; 0xa2
   19d70:	e7e1      	b.n	19d36 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   19d72:	4b1c      	ldr	r3, [pc, #112]	; (19de4 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19d74:	2102      	movs	r1, #2
			m.param = instance;
   19d76:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19d78:	2003      	movs	r0, #3
}
   19d7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   19d7e:	f7f4 bf77 	b.w	ec70 <mayfly_enqueue>
			m.param = instance;
   19d82:	4b19      	ldr	r3, [pc, #100]	; (19de8 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19d84:	2102      	movs	r1, #2
			m.param = instance;
   19d86:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19d88:	2001      	movs	r0, #1
}
   19d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   19d8e:	f7f4 bf6f 	b.w	ec70 <mayfly_enqueue>
			m.param = instance;
   19d92:	4b16      	ldr	r3, [pc, #88]	; (19dec <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19d94:	2102      	movs	r1, #2
			m.param = instance;
   19d96:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19d98:	2000      	movs	r0, #0
}
   19d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   19d9e:	f7f4 bf67 	b.w	ec70 <mayfly_enqueue>
			m.param = instance;
   19da2:	4b13      	ldr	r3, [pc, #76]	; (19df0 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19da4:	2101      	movs	r1, #1
			m.param = instance;
   19da6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19da8:	4608      	mov	r0, r1
}
   19daa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   19dae:	f7f4 bf5f 	b.w	ec70 <mayfly_enqueue>
			m.param = instance;
   19db2:	4b10      	ldr	r3, [pc, #64]	; (19df4 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19db4:	2102      	movs	r1, #2
			m.param = instance;
   19db6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19db8:	4608      	mov	r0, r1
}
   19dba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19dbe:	f7f4 bf57 	b.w	ec70 <mayfly_enqueue>
			m.param = instance;
   19dc2:	4b0d      	ldr	r3, [pc, #52]	; (19df8 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19dc4:	2101      	movs	r1, #1
			m.param = instance;
   19dc6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19dc8:	2002      	movs	r0, #2
}
   19dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   19dce:	f7f4 bf4f 	b.w	ec70 <mayfly_enqueue>
		LL_ASSERT(0);
   19dd2:	23c0      	movs	r3, #192	; 0xc0
   19dd4:	e7af      	b.n	19d36 <hal_ticker_instance0_sched+0x1a>
   19dd6:	bf00      	nop
   19dd8:	0002337c 	.word	0x0002337c
   19ddc:	000226e8 	.word	0x000226e8
   19de0:	00022678 	.word	0x00022678
   19de4:	2000067c 	.word	0x2000067c
   19de8:	2000064c 	.word	0x2000064c
   19dec:	2000062c 	.word	0x2000062c
   19df0:	2000063c 	.word	0x2000063c
   19df4:	2000066c 	.word	0x2000066c
   19df8:	2000065c 	.word	0x2000065c

00019dfc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   19dfc:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   19dfe:	2000      	movs	r0, #0
   19e00:	f7ff ba70 	b.w	192e4 <cntr_cmp_set>

00019e04 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19e04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19e08:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   19e0c:	3201      	adds	r2, #1
   19e0e:	d008      	beq.n	19e22 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19e14:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19e18:	f013 0301 	ands.w	r3, r3, #1
   19e1c:	d10f      	bne.n	19e3e <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   19e1e:	2000      	movs	r0, #0
   19e20:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19e22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   19e26:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19e2a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   19e2c:	4293      	cmp	r3, r2
   19e2e:	d0f6      	beq.n	19e1e <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   19e30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19e34:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   19e38:	f013 0301 	ands.w	r3, r3, #1
   19e3c:	d0ef      	beq.n	19e1e <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   19e3e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   19e42:	0c19      	lsrs	r1, r3, #16
{
   19e44:	b510      	push	{r4, lr}
	dst[0] = val;
   19e46:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   19e48:	0a0c      	lsrs	r4, r1, #8
   19e4a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19e4e:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   19e50:	70c4      	strb	r4, [r0, #3]
   19e52:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   19e54:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   19e58:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   19e5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   19e5e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   19e62:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e64:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   19e68:	3301      	adds	r3, #1
   19e6a:	d035      	beq.n	19ed8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19e6c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   19e70:	3301      	adds	r3, #1
   19e72:	d031      	beq.n	19ed8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19e74:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   19e78:	3301      	adds	r3, #1
   19e7a:	d02d      	beq.n	19ed8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   19e7c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   19e80:	3301      	adds	r3, #1
   19e82:	d029      	beq.n	19ed8 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   19e84:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   19e88:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   19e8a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19e8c:	0a0c      	lsrs	r4, r1, #8
   19e8e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19e92:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   19e94:	7244      	strb	r4, [r0, #9]
   19e96:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   19e98:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   19e9c:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   19e9e:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19ea0:	0a0c      	lsrs	r4, r1, #8
   19ea2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19ea6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   19ea8:	7344      	strb	r4, [r0, #13]
   19eaa:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   19eac:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   19eb0:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   19eb2:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   19eb4:	0a0c      	lsrs	r4, r1, #8
   19eb6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19eba:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   19ebc:	7444      	strb	r4, [r0, #17]
   19ebe:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   19ec0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   19ec4:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   19ec6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19ec8:	0a11      	lsrs	r1, r2, #8
   19eca:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19ece:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   19ed0:	7541      	strb	r1, [r0, #21]
   19ed2:	74c3      	strb	r3, [r0, #19]
		return 1;
   19ed4:	2001      	movs	r0, #1
}
   19ed6:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   19ed8:	2210      	movs	r2, #16
   19eda:	2100      	movs	r1, #0
   19edc:	3006      	adds	r0, #6
   19ede:	f004 ffb3 	bl	1ee48 <memset>
		return 1;
   19ee2:	2001      	movs	r0, #1
}
   19ee4:	bd10      	pop	{r4, pc}
   19ee6:	bf00      	nop

00019ee8 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   19ee8:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   19eea:	2210      	movs	r2, #16
{
   19eec:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   19eee:	2100      	movs	r1, #0
   19ef0:	f004 ffaa 	bl	1ee48 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19ef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19ef8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   19efc:	3201      	adds	r2, #1
   19efe:	d034      	beq.n	19f6a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19f00:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   19f04:	3201      	adds	r2, #1
   19f06:	d030      	beq.n	19f6a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19f08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   19f0c:	3201      	adds	r2, #1
   19f0e:	d02c      	beq.n	19f6a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   19f10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   19f14:	3201      	adds	r2, #1
   19f16:	d028      	beq.n	19f6a <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   19f18:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   19f1c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   19f1e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19f20:	0a08      	lsrs	r0, r1, #8
   19f22:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19f26:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   19f28:	70e0      	strb	r0, [r4, #3]
   19f2a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   19f2c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   19f30:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   19f32:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19f34:	0a08      	lsrs	r0, r1, #8
   19f36:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19f3a:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   19f3c:	71e0      	strb	r0, [r4, #7]
   19f3e:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   19f40:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   19f44:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   19f46:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   19f48:	0a08      	lsrs	r0, r1, #8
   19f4a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   19f4e:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   19f50:	7262      	strb	r2, [r4, #9]
   19f52:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   19f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   19f58:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   19f5a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   19f5c:	0a11      	lsrs	r1, r2, #8
   19f5e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   19f62:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   19f64:	73e1      	strb	r1, [r4, #15]
   19f66:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   19f68:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   19f6a:	4620      	mov	r0, r4
   19f6c:	2210      	movs	r2, #16
}
   19f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   19f72:	2100      	movs	r1, #0
   19f74:	f004 bf68 	b.w	1ee48 <memset>

00019f78 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   19f78:	4b02      	ldr	r3, [pc, #8]	; (19f84 <net_buf_pool_get+0xc>)
   19f7a:	2228      	movs	r2, #40	; 0x28
   19f7c:	fb02 3000 	mla	r0, r2, r0, r3
   19f80:	4770      	bx	lr
   19f82:	bf00      	nop
   19f84:	200009d0 	.word	0x200009d0

00019f88 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19f88:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   19f8a:	4a05      	ldr	r2, [pc, #20]	; (19fa0 <net_buf_id+0x18>)
   19f8c:	2128      	movs	r1, #40	; 0x28
   19f8e:	fb01 2303 	mla	r3, r1, r3, r2
   19f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19f94:	1ac0      	subs	r0, r0, r3
}
   19f96:	4b03      	ldr	r3, [pc, #12]	; (19fa4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   19f98:	10c0      	asrs	r0, r0, #3
}
   19f9a:	4358      	muls	r0, r3
   19f9c:	4770      	bx	lr
   19f9e:	bf00      	nop
   19fa0:	200009d0 	.word	0x200009d0
   19fa4:	aaaaaaab 	.word	0xaaaaaaab

00019fa8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   19fa8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19faa:	4a0a      	ldr	r2, [pc, #40]	; (19fd4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   19fac:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19fae:	2428      	movs	r4, #40	; 0x28
   19fb0:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   19fb4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   19fb6:	6a1b      	ldr	r3, [r3, #32]
   19fb8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   19fba:	6823      	ldr	r3, [r4, #0]
   19fbc:	429a      	cmp	r2, r3
   19fbe:	bf94      	ite	ls
   19fc0:	600a      	strls	r2, [r1, #0]
   19fc2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   19fc4:	f7ff ffe0 	bl	19f88 <net_buf_id>
   19fc8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   19fcc:	fb02 3000 	mla	r0, r2, r0, r3
   19fd0:	bd10      	pop	{r4, pc}
   19fd2:	bf00      	nop
   19fd4:	200009d0 	.word	0x200009d0

00019fd8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   19fd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19fdc:	4605      	mov	r5, r0
   19fde:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   19fe0:	4610      	mov	r0, r2
   19fe2:	4619      	mov	r1, r3
{
   19fe4:	4616      	mov	r6, r2
   19fe6:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   19fe8:	f007 fa89 	bl	214fe <z_timeout_end_calc>
   19fec:	4680      	mov	r8, r0
   19fee:	4689      	mov	r9, r1
	__asm__ volatile(
   19ff0:	f04f 0320 	mov.w	r3, #32
   19ff4:	f3ef 8a11 	mrs	sl, BASEPRI
   19ff8:	f383 8811 	msr	BASEPRI, r3
   19ffc:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a000:	8b6b      	ldrh	r3, [r5, #26]
   1a002:	2b00      	cmp	r3, #0
   1a004:	d054      	beq.n	1a0b0 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a006:	8b2a      	ldrh	r2, [r5, #24]
   1a008:	429a      	cmp	r2, r3
   1a00a:	d93d      	bls.n	1a088 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   1a00c:	2200      	movs	r2, #0
   1a00e:	2300      	movs	r3, #0
   1a010:	4628      	mov	r0, r5
   1a012:	f001 fb13 	bl	1b63c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1a016:	4604      	mov	r4, r0
   1a018:	2800      	cmp	r0, #0
   1a01a:	d035      	beq.n	1a088 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   1a01c:	f38a 8811 	msr	BASEPRI, sl
   1a020:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1a024:	9b01      	ldr	r3, [sp, #4]
   1a026:	2b00      	cmp	r3, #0
   1a028:	d052      	beq.n	1a0d0 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1a02a:	ea56 0307 	orrs.w	r3, r6, r7
   1a02e:	d010      	beq.n	1a052 <net_buf_alloc_len+0x7a>
   1a030:	1c7b      	adds	r3, r7, #1
   1a032:	bf08      	it	eq
   1a034:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1a038:	d00b      	beq.n	1a052 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1a03a:	f002 f93f 	bl	1c2bc <z_tick_get>
   1a03e:	ebb8 0600 	subs.w	r6, r8, r0
   1a042:	eb69 0701 	sbc.w	r7, r9, r1
   1a046:	2e00      	cmp	r6, #0
   1a048:	f177 0300 	sbcs.w	r3, r7, #0
   1a04c:	bfbc      	itt	lt
   1a04e:	2600      	movlt	r6, #0
   1a050:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a052:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1a054:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1a0e8 <net_buf_alloc_len+0x110>
   1a058:	2228      	movs	r2, #40	; 0x28
   1a05a:	fb02 8303 	mla	r3, r2, r3, r8
   1a05e:	a901      	add	r1, sp, #4
   1a060:	6a1b      	ldr	r3, [r3, #32]
   1a062:	681b      	ldr	r3, [r3, #0]
   1a064:	4632      	mov	r2, r6
   1a066:	681d      	ldr	r5, [r3, #0]
   1a068:	4620      	mov	r0, r4
   1a06a:	463b      	mov	r3, r7
   1a06c:	47a8      	blx	r5
   1a06e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1a070:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1a072:	bb70      	cbnz	r0, 1a0d2 <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   1a074:	79a0      	ldrb	r0, [r4, #6]
   1a076:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a07a:	4621      	mov	r1, r4
   1a07c:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1a080:	f006 ffe9 	bl	21056 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1a084:	462c      	mov	r4, r5
}
   1a086:	e01f      	b.n	1a0c8 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   1a088:	8b68      	ldrh	r0, [r5, #26]
   1a08a:	1e43      	subs	r3, r0, #1
   1a08c:	836b      	strh	r3, [r5, #26]
   1a08e:	f38a 8811 	msr	BASEPRI, sl
   1a092:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1a096:	8b2c      	ldrh	r4, [r5, #24]
   1a098:	1a24      	subs	r4, r4, r0
   1a09a:	6a68      	ldr	r0, [r5, #36]	; 0x24
   1a09c:	2318      	movs	r3, #24
   1a09e:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   1a0a2:	4811      	ldr	r0, [pc, #68]	; (1a0e8 <net_buf_alloc_len+0x110>)
   1a0a4:	4b11      	ldr	r3, [pc, #68]	; (1a0ec <net_buf_alloc_len+0x114>)
   1a0a6:	1a2d      	subs	r5, r5, r0
   1a0a8:	10ed      	asrs	r5, r5, #3
   1a0aa:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1a0ac:	71a5      	strb	r5, [r4, #6]
		goto success;
   1a0ae:	e7b9      	b.n	1a024 <net_buf_alloc_len+0x4c>
   1a0b0:	f38a 8811 	msr	BASEPRI, sl
   1a0b4:	f3bf 8f6f 	isb	sy
   1a0b8:	4632      	mov	r2, r6
   1a0ba:	463b      	mov	r3, r7
   1a0bc:	4628      	mov	r0, r5
   1a0be:	f001 fabd 	bl	1b63c <z_impl_k_queue_get>
	if (!buf) {
   1a0c2:	4604      	mov	r4, r0
   1a0c4:	2800      	cmp	r0, #0
   1a0c6:	d1ad      	bne.n	1a024 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   1a0c8:	4620      	mov	r0, r4
   1a0ca:	b002      	add	sp, #8
   1a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   1a0d0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1a0d2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1a0d4:	2201      	movs	r2, #1
	buf->frags = NULL;
   1a0d6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1a0d8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1a0da:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1a0dc:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1a0de:	6923      	ldr	r3, [r4, #16]
   1a0e0:	81e2      	strh	r2, [r4, #14]
   1a0e2:	60a3      	str	r3, [r4, #8]
	return buf;
   1a0e4:	e7f0      	b.n	1a0c8 <net_buf_alloc_len+0xf0>
   1a0e6:	bf00      	nop
   1a0e8:	200009d0 	.word	0x200009d0
   1a0ec:	cccccccd 	.word	0xcccccccd

0001a0f0 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0f4:	4d17      	ldr	r5, [pc, #92]	; (1a154 <net_buf_unref+0x64>)
   1a0f6:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1a0f8:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1a0fa:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1a0fc:	b90c      	cbnz	r4, 1a102 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1a0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1a102:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1a104:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1a108:	3b01      	subs	r3, #1
   1a10a:	b2db      	uxtb	r3, r3
   1a10c:	7123      	strb	r3, [r4, #4]
   1a10e:	2b00      	cmp	r3, #0
   1a110:	d1f5      	bne.n	1a0fe <net_buf_unref+0xe>
		if (buf->__buf) {
   1a112:	6921      	ldr	r1, [r4, #16]
   1a114:	b159      	cbz	r1, 1a12e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1a116:	7963      	ldrb	r3, [r4, #5]
   1a118:	079b      	lsls	r3, r3, #30
   1a11a:	d407      	bmi.n	1a12c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   1a11c:	79a3      	ldrb	r3, [r4, #6]
   1a11e:	fb07 5303 	mla	r3, r7, r3, r5
   1a122:	4620      	mov	r0, r4
   1a124:	6a1b      	ldr	r3, [r3, #32]
   1a126:	681b      	ldr	r3, [r3, #0]
   1a128:	689b      	ldr	r3, [r3, #8]
   1a12a:	4798      	blx	r3
			buf->__buf = NULL;
   1a12c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1a12e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1a130:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1a132:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1a136:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1a138:	69db      	ldr	r3, [r3, #28]
   1a13a:	b11b      	cbz	r3, 1a144 <net_buf_unref+0x54>
			pool->destroy(buf);
   1a13c:	4620      	mov	r0, r4
   1a13e:	4798      	blx	r3
{
   1a140:	4644      	mov	r4, r8
   1a142:	e7db      	b.n	1a0fc <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1a144:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a148:	4621      	mov	r1, r4
   1a14a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1a14e:	f006 ff82 	bl	21056 <k_queue_prepend>
}
   1a152:	e7f5      	b.n	1a140 <net_buf_unref+0x50>
   1a154:	200009d0 	.word	0x200009d0

0001a158 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(struct device *port)
{
   1a158:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1a15a:	4b09      	ldr	r3, [pc, #36]	; (1a180 <gpio_nrfx_init+0x28>)
   1a15c:	781a      	ldrb	r2, [r3, #0]
   1a15e:	b96a      	cbnz	r2, 1a17c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1a160:	2101      	movs	r1, #1
   1a162:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1a164:	2006      	movs	r0, #6
   1a166:	2105      	movs	r1, #5
   1a168:	f7eb fd8e 	bl	5c88 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1a16c:	2006      	movs	r0, #6
   1a16e:	f7eb fd59 	bl	5c24 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1a172:	4b04      	ldr	r3, [pc, #16]	; (1a184 <gpio_nrfx_init+0x2c>)
   1a174:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1a178:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1a17c:	2000      	movs	r0, #0
   1a17e:	bd08      	pop	{r3, pc}
   1a180:	20003086 	.word	0x20003086
   1a184:	40006000 	.word	0x40006000

0001a188 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a188:	4b2b      	ldr	r3, [pc, #172]	; (1a238 <gpio_nrfx_config+0xb0>)
{
   1a18a:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a18c:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a18e:	482b      	ldr	r0, [pc, #172]	; (1a23c <gpio_nrfx_config+0xb4>)
   1a190:	4013      	ands	r3, r2
   1a192:	4283      	cmp	r3, r0
   1a194:	d040      	beq.n	1a218 <gpio_nrfx_config+0x90>
   1a196:	d80d      	bhi.n	1a1b4 <gpio_nrfx_config+0x2c>
   1a198:	2b06      	cmp	r3, #6
   1a19a:	d015      	beq.n	1a1c8 <gpio_nrfx_config+0x40>
   1a19c:	d805      	bhi.n	1a1aa <gpio_nrfx_config+0x22>
   1a19e:	b19b      	cbz	r3, 1a1c8 <gpio_nrfx_config+0x40>
   1a1a0:	2b02      	cmp	r3, #2
   1a1a2:	d03b      	beq.n	1a21c <gpio_nrfx_config+0x94>
   1a1a4:	f06f 0015 	mvn.w	r0, #21
   1a1a8:	e035      	b.n	1a216 <gpio_nrfx_config+0x8e>
   1a1aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1a1ae:	d1f9      	bne.n	1a1a4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1a1b0:	2301      	movs	r3, #1
   1a1b2:	e009      	b.n	1a1c8 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1a1b4:	4822      	ldr	r0, [pc, #136]	; (1a240 <gpio_nrfx_config+0xb8>)
   1a1b6:	4283      	cmp	r3, r0
   1a1b8:	d032      	beq.n	1a220 <gpio_nrfx_config+0x98>
   1a1ba:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1a1be:	d031      	beq.n	1a224 <gpio_nrfx_config+0x9c>
   1a1c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1a1c4:	d1ee      	bne.n	1a1a4 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1a1c6:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1a1c8:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1a1ca:	bf54      	ite	pl
   1a1cc:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1a1d0:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a1d2:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1a1d6:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1a1d8:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1a1dc:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1a1e0:	d507      	bpl.n	1a1f2 <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a1e2:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1a1e6:	6877      	ldr	r7, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1a1e8:	d01e      	beq.n	1a228 <gpio_nrfx_config+0xa0>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1a1ea:	2201      	movs	r2, #1
   1a1ec:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1a1ee:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
   1a1f2:	7a32      	ldrb	r2, [r6, #8]
   1a1f4:	f001 011f 	and.w	r1, r1, #31
   1a1f8:	ea41 1142 	orr.w	r1, r1, r2, lsl #5
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a1fc:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
   1a200:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a204:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
   1a208:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1a20c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1a210:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
   1a214:	2000      	movs	r0, #0
}
   1a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1a218:	2307      	movs	r3, #7
   1a21a:	e7d5      	b.n	1a1c8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1a21c:	2304      	movs	r3, #4
   1a21e:	e7d3      	b.n	1a1c8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1a220:	2305      	movs	r3, #5
   1a222:	e7d1      	b.n	1a1c8 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1a224:	2303      	movs	r3, #3
   1a226:	e7cf      	b.n	1a1c8 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1a228:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1a22a:	bf42      	ittt	mi
   1a22c:	2201      	movmi	r2, #1
   1a22e:	408a      	lslmi	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   1a230:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1a234:	e7dd      	b.n	1a1f2 <gpio_nrfx_config+0x6a>
   1a236:	bf00      	nop
   1a238:	00f00006 	.word	0x00f00006
   1a23c:	00100006 	.word	0x00100006
   1a240:	00400002 	.word	0x00400002

0001a244 <gpio_nrfx_pin_interrupt_configure>:
{
   1a244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct gpio_nrfx_data *data = get_port_data(port);
   1a246:	68c4      	ldr	r4, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1a248:	6840      	ldr	r0, [r0, #4]
   1a24a:	7a00      	ldrb	r0, [r0, #8]
   1a24c:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1a250:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a254:	ea45 1540 	orr.w	r5, r5, r0, lsl #5
   1a258:	d10a      	bne.n	1a270 <gpio_nrfx_pin_interrupt_configure+0x2c>
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1a25a:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   1a25e:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
   1a262:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
   1a266:	07c7      	lsls	r7, r0, #31
   1a268:	d507      	bpl.n	1a27a <gpio_nrfx_pin_interrupt_configure+0x36>
		return -ENOTSUP;
   1a26a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a26e:	e0b4      	b.n	1a3da <gpio_nrfx_pin_interrupt_configure+0x196>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a270:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1a274:	68e0      	ldr	r0, [r4, #12]
   1a276:	f000 80b2 	beq.w	1a3de <gpio_nrfx_pin_interrupt_configure+0x19a>
   1a27a:	68e6      	ldr	r6, [r4, #12]
   1a27c:	2001      	movs	r0, #1
   1a27e:	4088      	lsls	r0, r1
   1a280:	4330      	orrs	r0, r6
   1a282:	6966      	ldr	r6, [r4, #20]
   1a284:	60e0      	str	r0, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a286:	2001      	movs	r0, #1
   1a288:	4088      	lsls	r0, r1
   1a28a:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   1a28e:	69a2      	ldr	r2, [r4, #24]
   1a290:	bf0c      	ite	eq
   1a292:	4306      	orreq	r6, r0
   1a294:	4386      	bicne	r6, r0
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1a296:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1a29a:	bf0c      	ite	eq
   1a29c:	4302      	orreq	r2, r0
   1a29e:	4382      	bicne	r2, r0
   1a2a0:	61a2      	str	r2, [r4, #24]
   1a2a2:	6922      	ldr	r2, [r4, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1a2a4:	6166      	str	r6, [r4, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1a2a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1a2aa:	bf0c      	ite	eq
   1a2ac:	4310      	orreq	r0, r2
   1a2ae:	ea22 0000 	bicne.w	r0, r2, r0
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1a2b2:	4a5b      	ldr	r2, [pc, #364]	; (1a420 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1a2b4:	6120      	str	r0, [r4, #16]
   1a2b6:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a2ba:	2300      	movs	r3, #0
   1a2bc:	b2c0      	uxtb	r0, r0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a2be:	f503 76a2 	add.w	r6, r3, #324	; 0x144
   1a2c2:	f852 6026 	ldr.w	r6, [r2, r6, lsl #2]
   1a2c6:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1a2ca:	42b5      	cmp	r5, r6
   1a2cc:	f040 808c 	bne.w	1a3e8 <gpio_nrfx_pin_interrupt_configure+0x1a4>
		    && (intenset & BIT(i))) {
   1a2d0:	fa20 f603 	lsr.w	r6, r0, r3
   1a2d4:	07f6      	lsls	r6, r6, #31
   1a2d6:	f140 8087 	bpl.w	1a3e8 <gpio_nrfx_pin_interrupt_configure+0x1a4>
			(void)atomic_and(mask, ~BIT(i));
   1a2da:	2001      	movs	r0, #1
   1a2dc:	4098      	lsls	r0, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a2de:	4e51      	ldr	r6, [pc, #324]	; (1a424 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1a2e0:	f3bf 8f5b 	dmb	ish
   1a2e4:	43c7      	mvns	r7, r0
   1a2e6:	e856 cf00 	ldrex	ip, [r6]
   1a2ea:	ea0c 0c07 	and.w	ip, ip, r7
   1a2ee:	e846 ce00 	strex	lr, ip, [r6]
   1a2f2:	f1be 0f00 	cmp.w	lr, #0
   1a2f6:	d1f6      	bne.n	1a2e6 <gpio_nrfx_pin_interrupt_configure+0xa2>
   1a2f8:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1a2fc:	009b      	lsls	r3, r3, #2
   1a2fe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a302:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1a306:	f8d3 6510 	ldr.w	r6, [r3, #1296]	; 0x510
   1a30a:	f026 0601 	bic.w	r6, r6, #1
   1a30e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1a312:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a316:	00aa      	lsls	r2, r5, #2
   1a318:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
	if (data->pin_int_en & BIT(pin)) {
   1a31c:	68e0      	ldr	r0, [r4, #12]
   1a31e:	f8d2 3700 	ldr.w	r3, [r2, #1792]	; 0x700
   1a322:	40c8      	lsrs	r0, r1
   1a324:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
   1a328:	f010 0001 	ands.w	r0, r0, #1
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a32c:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
   1a330:	d053      	beq.n	1a3da <gpio_nrfx_pin_interrupt_configure+0x196>
		if (data->trig_edge & BIT(pin)) {
   1a332:	6960      	ldr	r0, [r4, #20]
   1a334:	40c8      	lsrs	r0, r1
   1a336:	f010 0001 	ands.w	r0, r0, #1
   1a33a:	d060      	beq.n	1a3fe <gpio_nrfx_pin_interrupt_configure+0x1ba>
			if (data->double_edge & BIT(pin)) {
   1a33c:	69a3      	ldr	r3, [r4, #24]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a33e:	4a39      	ldr	r2, [pc, #228]	; (1a424 <gpio_nrfx_pin_interrupt_configure+0x1e0>)
   1a340:	40cb      	lsrs	r3, r1
   1a342:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1a344:	bf5f      	itttt	pl
   1a346:	6923      	ldrpl	r3, [r4, #16]
   1a348:	fa23 f101 	lsrpl.w	r1, r3, r1
   1a34c:	f001 0101 	andpl.w	r1, r1, #1
   1a350:	f1c1 0102 	rsbpl	r1, r1, #2
   1a354:	bf54      	ite	pl
   1a356:	b2c9      	uxtbpl	r1, r1
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1a358:	2103      	movmi	r1, #3
   1a35a:	2300      	movs	r3, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1a35c:	2601      	movs	r6, #1
   1a35e:	fa06 f403 	lsl.w	r4, r6, r3
   1a362:	f3bf 8f5b 	dmb	ish
   1a366:	e852 0f00 	ldrex	r0, [r2]
   1a36a:	ea40 0704 	orr.w	r7, r0, r4
   1a36e:	e842 7c00 	strex	ip, r7, [r2]
   1a372:	f1bc 0f00 	cmp.w	ip, #0
   1a376:	d1f6      	bne.n	1a366 <gpio_nrfx_pin_interrupt_configure+0x122>
   1a378:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1a37c:	40d8      	lsrs	r0, r3
   1a37e:	f010 0001 	ands.w	r0, r0, #1
   1a382:	d136      	bne.n	1a3f2 <gpio_nrfx_pin_interrupt_configure+0x1ae>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1a384:	009a      	lsls	r2, r3, #2
   1a386:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a38a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   1a38e:	3340      	adds	r3, #64	; 0x40
   1a390:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   1a394:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
   1a398:	f426 7640 	bic.w	r6, r6, #768	; 0x300
   1a39c:	009b      	lsls	r3, r3, #2
   1a39e:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a3a2:	022d      	lsls	r5, r5, #8
    return ((uint32_t)p_reg + event);
   1a3a4:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a3a6:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
   1a3aa:	f405 55f8 	and.w	r5, r5, #7936	; 0x1f00
    return ((uint32_t)p_reg + event);
   1a3ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1a3b2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1a3b6:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   1a3ba:	4335      	orrs	r5, r6
   1a3bc:	f8c2 5510 	str.w	r5, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a3c0:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1a3c2:	681b      	ldr	r3, [r3, #0]
   1a3c4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1a3c6:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1a3c8:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
   1a3cc:	f043 0301 	orr.w	r3, r3, #1
   1a3d0:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1a3d4:	4b12      	ldr	r3, [pc, #72]	; (1a420 <gpio_nrfx_pin_interrupt_configure+0x1dc>)
   1a3d6:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
}
   1a3da:	b003      	add	sp, #12
   1a3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1a3de:	2601      	movs	r6, #1
   1a3e0:	408e      	lsls	r6, r1
   1a3e2:	ea20 0006 	bic.w	r0, r0, r6
   1a3e6:	e74c      	b.n	1a282 <gpio_nrfx_pin_interrupt_configure+0x3e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a3e8:	3301      	adds	r3, #1
   1a3ea:	2b08      	cmp	r3, #8
   1a3ec:	f47f af67 	bne.w	1a2be <gpio_nrfx_pin_interrupt_configure+0x7a>
   1a3f0:	e791      	b.n	1a316 <gpio_nrfx_pin_interrupt_configure+0xd2>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1a3f2:	3301      	adds	r3, #1
   1a3f4:	2b08      	cmp	r3, #8
   1a3f6:	d1b2      	bne.n	1a35e <gpio_nrfx_pin_interrupt_configure+0x11a>
	return -ENODEV;
   1a3f8:	f06f 0012 	mvn.w	r0, #18
   1a3fc:	e7ed      	b.n	1a3da <gpio_nrfx_pin_interrupt_configure+0x196>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a3fe:	6923      	ldr	r3, [r4, #16]
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a400:	f8d2 5700 	ldr.w	r5, [r2, #1792]	; 0x700
   1a404:	fa23 f101 	lsr.w	r1, r3, r1
   1a408:	f001 0101 	and.w	r1, r1, #1
   1a40c:	f1c1 0103 	rsb	r1, r1, #3
   1a410:	f425 3340 	bic.w	r3, r5, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a414:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1a418:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
}
   1a41c:	e7dd      	b.n	1a3da <gpio_nrfx_pin_interrupt_configure+0x196>
   1a41e:	bf00      	nop
   1a420:	40006000 	.word	0x40006000
   1a424:	200029ec 	.word	0x200029ec

0001a428 <gpiote_event_handler>:
{
   1a428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a42a:	494e      	ldr	r1, [pc, #312]	; (1a564 <gpiote_event_handler+0x13c>)
   1a42c:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
   1a42e:	2d00      	cmp	r5, #0
   1a430:	d061      	beq.n	1a4f6 <gpiote_event_handler+0xce>
	struct gpio_nrfx_data *data = get_port_data(port);
   1a432:	4b4d      	ldr	r3, [pc, #308]	; (1a568 <gpiote_event_handler+0x140>)
   1a434:	68da      	ldr	r2, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1a436:	f8d3 c004 	ldr.w	ip, [r3, #4]
	uint32_t out = data->pin_int_en;
   1a43a:	68d3      	ldr	r3, [r2, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1a43c:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
   1a440:	4320      	orrs	r0, r4
   1a442:	ea23 0300 	bic.w	r3, r3, r0
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1a446:	f8dc 0004 	ldr.w	r0, [ip, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1a44a:	6912      	ldr	r2, [r2, #16]
    return p_reg->IN;
   1a44c:	f8d0 4510 	ldr.w	r4, [r0, #1296]	; 0x510
   1a450:	4054      	eors	r4, r2
	uint32_t out = pin_states & level_pins;
   1a452:	ea23 0404 	bic.w	r4, r3, r4
	uint32_t bit = 1U << pin;
   1a456:	2001      	movs	r0, #1
	uint32_t pin = 0U;
   1a458:	2600      	movs	r6, #0
	while (level_pins) {
   1a45a:	2b00      	cmp	r3, #0
   1a45c:	d135      	bne.n	1a4ca <gpiote_event_handler+0xa2>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a45e:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1a460:	680b      	ldr	r3, [r1, #0]
   1a462:	9300      	str	r3, [sp, #0]
    (void)dummy;
   1a464:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
   1a466:	4841      	ldr	r0, [pc, #260]	; (1a56c <gpiote_event_handler+0x144>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a468:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1a46a:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a46c:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
   1a46e:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
   1a472:	fa06 f103 	lsl.w	r1, r6, r3
   1a476:	4211      	tst	r1, r2
   1a478:	d013      	beq.n	1a4a2 <gpiote_event_handler+0x7a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a47a:	009a      	lsls	r2, r3, #2
   1a47c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   1a480:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
   1a484:	6811      	ldr	r1, [r2, #0]
   1a486:	b161      	cbz	r1, 1a4a2 <gpiote_event_handler+0x7a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a488:	f503 71a2 	add.w	r1, r3, #324	; 0x144
   1a48c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1a490:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
   1a492:	6812      	ldr	r2, [r2, #0]
   1a494:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1a496:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1a49a:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
   1a49e:	9a01      	ldr	r2, [sp, #4]
   1a4a0:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1a4a2:	3301      	adds	r3, #1
   1a4a4:	2b08      	cmp	r3, #8
   1a4a6:	d1e2      	bne.n	1a46e <gpiote_event_handler+0x46>
	if (fired_triggers[0]) {
   1a4a8:	bb3c      	cbnz	r4, 1a4fa <gpiote_event_handler+0xd2>
	if (port_event) {
   1a4aa:	b165      	cbz	r5, 1a4c6 <gpiote_event_handler+0x9e>
	const struct gpio_nrfx_data *data = get_port_data(port);
   1a4ac:	4b2e      	ldr	r3, [pc, #184]	; (1a568 <gpiote_event_handler+0x140>)
   1a4ae:	68d8      	ldr	r0, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1a4b0:	685e      	ldr	r6, [r3, #4]
	uint32_t out = data->pin_int_en;
   1a4b2:	68c1      	ldr	r1, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1a4b4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
   1a4b8:	4313      	orrs	r3, r2
   1a4ba:	ea21 0103 	bic.w	r1, r1, r3
	uint32_t bit = 1U << pin;
   1a4be:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   1a4c0:	2500      	movs	r5, #0
	while (level_pins) {
   1a4c2:	2900      	cmp	r1, #0
   1a4c4:	d131      	bne.n	1a52a <gpiote_event_handler+0x102>
}
   1a4c6:	b003      	add	sp, #12
   1a4c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (level_pins & bit) {
   1a4ca:	4203      	tst	r3, r0
   1a4cc:	d010      	beq.n	1a4f0 <gpiote_event_handler+0xc8>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a4ce:	f89c 7008 	ldrb.w	r7, [ip, #8]
   1a4d2:	f006 021f 	and.w	r2, r6, #31
   1a4d6:	ea42 1247 	orr.w	r2, r2, r7, lsl #5
   1a4da:	0092      	lsls	r2, r2, #2
   1a4dc:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
   1a4e0:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a4e4:	f8d2 7700 	ldr.w	r7, [r2, #1792]	; 0x700
   1a4e8:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a4ec:	f8c2 7700 	str.w	r7, [r2, #1792]	; 0x700
		++pin;
   1a4f0:	3601      	adds	r6, #1
		bit <<= 1;
   1a4f2:	0040      	lsls	r0, r0, #1
   1a4f4:	e7b1      	b.n	1a45a <gpiote_event_handler+0x32>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1a4f6:	462c      	mov	r4, r5
   1a4f8:	e7b5      	b.n	1a466 <gpiote_event_handler+0x3e>
	struct gpio_nrfx_data *data = get_port_data(port);
   1a4fa:	4f1b      	ldr	r7, [pc, #108]	; (1a568 <gpiote_event_handler+0x140>)
					struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a4fc:	68fb      	ldr	r3, [r7, #12]
   1a4fe:	6859      	ldr	r1, [r3, #4]
   1a500:	2900      	cmp	r1, #0
   1a502:	d0d2      	beq.n	1a4aa <gpiote_event_handler+0x82>
	return node->next;
   1a504:	680e      	ldr	r6, [r1, #0]
   1a506:	2e00      	cmp	r6, #0
   1a508:	bf38      	it	cc
   1a50a:	2600      	movcc	r6, #0
		if (cb->pin_mask & pins) {
   1a50c:	688a      	ldr	r2, [r1, #8]
   1a50e:	4022      	ands	r2, r4
   1a510:	d002      	beq.n	1a518 <gpiote_event_handler+0xf0>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1a512:	684b      	ldr	r3, [r1, #4]
   1a514:	4638      	mov	r0, r7
   1a516:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1a518:	2e00      	cmp	r6, #0
   1a51a:	d0c6      	beq.n	1a4aa <gpiote_event_handler+0x82>
   1a51c:	6833      	ldr	r3, [r6, #0]
   1a51e:	2b00      	cmp	r3, #0
   1a520:	bf38      	it	cc
   1a522:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a524:	4631      	mov	r1, r6
   1a526:	461e      	mov	r6, r3
   1a528:	e7f0      	b.n	1a50c <gpiote_event_handler+0xe4>
		if (level_pins & bit) {
   1a52a:	420c      	tst	r4, r1
   1a52c:	d017      	beq.n	1a55e <gpiote_event_handler+0x136>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1a52e:	7a32      	ldrb	r2, [r6, #8]
   1a530:	f005 031f 	and.w	r3, r5, #31
   1a534:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1a538:	009b      	lsls	r3, r3, #2
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1a53a:	6902      	ldr	r2, [r0, #16]
   1a53c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
   1a540:	40ea      	lsrs	r2, r5
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1a542:	f8d3 7700 	ldr.w	r7, [r3, #1792]	; 0x700
   1a546:	f002 0201 	and.w	r2, r2, #1
   1a54a:	f1c2 0203 	rsb	r2, r2, #3
   1a54e:	f427 3740 	bic.w	r7, r7, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1a552:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
   1a556:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
			level_pins &= ~bit;
   1a55a:	ea21 0104 	bic.w	r1, r1, r4
		++pin;
   1a55e:	3501      	adds	r5, #1
		bit <<= 1;
   1a560:	0064      	lsls	r4, r4, #1
   1a562:	e7ae      	b.n	1a4c2 <gpiote_event_handler+0x9a>
   1a564:	4000617c 	.word	0x4000617c
   1a568:	20000890 	.word	0x20000890
   1a56c:	40006000 	.word	0x40006000

0001a570 <flash_nrf_pages_layout>:
	*layout = &dev_layout;
   1a570:	4b02      	ldr	r3, [pc, #8]	; (1a57c <flash_nrf_pages_layout+0xc>)
   1a572:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1a574:	2301      	movs	r3, #1
   1a576:	6013      	str	r3, [r2, #0]
}
   1a578:	4770      	bx	lr
   1a57a:	bf00      	nop
   1a57c:	200029f0 	.word	0x200029f0

0001a580 <flash_nrf_get_parameters>:
}
   1a580:	4800      	ldr	r0, [pc, #0]	; (1a584 <flash_nrf_get_parameters+0x4>)
   1a582:	4770      	bx	lr
   1a584:	00023468 	.word	0x00023468

0001a588 <nrf_flash_init>:
{
   1a588:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a58a:	2201      	movs	r2, #1
   1a58c:	4611      	mov	r1, r2
   1a58e:	4808      	ldr	r0, [pc, #32]	; (1a5b0 <nrf_flash_init+0x28>)
   1a590:	f006 fecf 	bl	21332 <z_impl_k_sem_init>
   1a594:	2201      	movs	r2, #1
   1a596:	2100      	movs	r1, #0
   1a598:	4806      	ldr	r0, [pc, #24]	; (1a5b4 <nrf_flash_init+0x2c>)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1a59a:	4c07      	ldr	r4, [pc, #28]	; (1a5b8 <nrf_flash_init+0x30>)
   1a59c:	f006 fec9 	bl	21332 <z_impl_k_sem_init>
   1a5a0:	f006 fc26 	bl	20df0 <nrfx_nvmc_flash_page_count_get>
   1a5a4:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1a5a6:	f006 fc1f 	bl	20de8 <nrfx_nvmc_flash_page_size_get>
   1a5aa:	6060      	str	r0, [r4, #4]
}
   1a5ac:	2000      	movs	r0, #0
   1a5ae:	bd10      	pop	{r4, pc}
   1a5b0:	200029f8 	.word	0x200029f8
   1a5b4:	20002a10 	.word	0x20002a10
   1a5b8:	200029f0 	.word	0x200029f0

0001a5bc <time_slot_callback_work>:
{
   1a5bc:	b530      	push	{r4, r5, lr}
   1a5be:	461d      	mov	r5, r3
   1a5c0:	b085      	sub	sp, #20
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1a5c2:	e9d3 3000 	ldrd	r3, r0, [r3]
   1a5c6:	4798      	blx	r3
   1a5c8:	4604      	mov	r4, r0
   1a5ca:	b990      	cbnz	r0, 1a5f2 <time_slot_callback_work+0x36>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1a5cc:	f10d 010f 	add.w	r1, sp, #15
   1a5d0:	f10d 000e 	add.w	r0, sp, #14
   1a5d4:	f7f8 f9a8 	bl	12928 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1a5d8:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1a5dc:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1a5e0:	9400      	str	r4, [sp, #0]
   1a5e2:	4623      	mov	r3, r4
   1a5e4:	4621      	mov	r1, r4
   1a5e6:	f7f5 fde7 	bl	101b8 <ticker_stop>
		((struct flash_op_desc *)context)->result = 0;
   1a5ea:	60ac      	str	r4, [r5, #8]
	z_impl_k_sem_give(sem);
   1a5ec:	4802      	ldr	r0, [pc, #8]	; (1a5f8 <time_slot_callback_work+0x3c>)
   1a5ee:	f001 fba9 	bl	1bd44 <z_impl_k_sem_give>
}
   1a5f2:	b005      	add	sp, #20
   1a5f4:	bd30      	pop	{r4, r5, pc}
   1a5f6:	bf00      	nop
   1a5f8:	20002a10 	.word	0x20002a10

0001a5fc <flash_nrf_erase>:
{
   1a5fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5fe:	b08b      	sub	sp, #44	; 0x2c
   1a600:	460e      	mov	r6, r1
   1a602:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a604:	f006 fbf0 	bl	20de8 <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1a608:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1a60a:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1a60c:	4630      	mov	r0, r6
   1a60e:	f006 fb42 	bl	20c96 <is_regular_addr_valid>
   1a612:	2800      	cmp	r0, #0
   1a614:	d03f      	beq.n	1a696 <flash_nrf_erase+0x9a>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1a616:	fbb6 f3f7 	udiv	r3, r6, r7
   1a61a:	fb07 6313 	mls	r3, r7, r3, r6
   1a61e:	2b00      	cmp	r3, #0
   1a620:	d139      	bne.n	1a696 <flash_nrf_erase+0x9a>
   1a622:	fbb5 f4f7 	udiv	r4, r5, r7
   1a626:	fb07 5414 	mls	r4, r7, r4, r5
   1a62a:	bba4      	cbnz	r4, 1a696 <flash_nrf_erase+0x9a>
		if (!n_pages) {
   1a62c:	42af      	cmp	r7, r5
   1a62e:	d826      	bhi.n	1a67e <flash_nrf_erase+0x82>
	return z_impl_k_sem_take(sem, timeout);
   1a630:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a634:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a638:	4818      	ldr	r0, [pc, #96]	; (1a69c <flash_nrf_erase+0xa0>)
   1a63a:	f001 fba9 	bl	1bd90 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1a63e:	4620      	mov	r0, r4
   1a640:	f7f5 fcd4 	bl	ffec <ticker_is_initialized>
   1a644:	ab04      	add	r3, sp, #16
   1a646:	4601      	mov	r1, r0
   1a648:	b1e0      	cbz	r0, 1a684 <flash_nrf_erase+0x88>
	struct flash_context context = {
   1a64a:	2210      	movs	r2, #16
   1a64c:	4621      	mov	r1, r4
   1a64e:	4618      	mov	r0, r3
   1a650:	f004 fbfa 	bl	1ee48 <memset>
   1a654:	2201      	movs	r2, #1
   1a656:	f88d 201c 	strb.w	r2, [sp, #28]
   1a65a:	4a11      	ldr	r2, [pc, #68]	; (1a6a0 <flash_nrf_erase+0xa4>)
   1a65c:	9208      	str	r2, [sp, #32]
   1a65e:	f2a2 62a4 	subw	r2, r2, #1700	; 0x6a4
   1a662:	9209      	str	r2, [sp, #36]	; 0x24
	struct flash_op_desc flash_op_desc = {
   1a664:	4a0f      	ldr	r2, [pc, #60]	; (1a6a4 <flash_nrf_erase+0xa8>)
   1a666:	9403      	str	r4, [sp, #12]
   1a668:	e9cd 2001 	strd	r2, r0, [sp, #4]
	return work_in_time_slice(&flash_op_desc);
   1a66c:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1a66e:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return work_in_time_slice(&flash_op_desc);
   1a672:	f7e8 fc39 	bl	2ee8 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1a676:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1a678:	4808      	ldr	r0, [pc, #32]	; (1a69c <flash_nrf_erase+0xa0>)
   1a67a:	f001 fb63 	bl	1bd44 <z_impl_k_sem_give>
}
   1a67e:	4620      	mov	r0, r4
   1a680:	b00b      	add	sp, #44	; 0x2c
   1a682:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1a684:	2218      	movs	r2, #24
   1a686:	4618      	mov	r0, r3
   1a688:	f004 fbde 	bl	1ee48 <memset>
   1a68c:	e9cd 6505 	strd	r6, r5, [sp, #20]
	return	erase_op(&context);
   1a690:	f7e8 fbe2 	bl	2e58 <erase_op>
   1a694:	e7ef      	b.n	1a676 <flash_nrf_erase+0x7a>
		return -EINVAL;
   1a696:	f06f 0415 	mvn.w	r4, #21
   1a69a:	e7f0      	b.n	1a67e <flash_nrf_erase+0x82>
   1a69c:	200029f8 	.word	0x200029f8
   1a6a0:	00016508 	.word	0x00016508
   1a6a4:	00002e59 	.word	0x00002e59

0001a6a8 <time_slot_delay>:
{
   1a6a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a6ac:	b08d      	sub	sp, #52	; 0x34
   1a6ae:	4607      	mov	r7, r0
   1a6b0:	4688      	mov	r8, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1a6b2:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1a6b6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1a6ba:	4691      	mov	r9, r2
   1a6bc:	461d      	mov	r5, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1a6be:	f7f8 f933 	bl	12928 <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1a6c2:	f89d 602f 	ldrb.w	r6, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1a6c6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1a6ca:	f8cd 8000 	str.w	r8, [sp]
   1a6ce:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1a6d0:	3601      	adds	r6, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1a6d2:	463b      	mov	r3, r7
   1a6d4:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1a6d8:	e9cd 9505 	strd	r9, r5, [sp, #20]
   1a6dc:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1a6e0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a6e4:	b2f2      	uxtb	r2, r6
   1a6e6:	4621      	mov	r1, r4
   1a6e8:	f7f5 fcfa 	bl	100e0 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1a6ec:	f030 0302 	bics.w	r3, r0, #2
   1a6f0:	d00e      	beq.n	1a710 <time_slot_delay+0x68>
		((struct flash_op_desc *)context)->result = -ECANCELED;
   1a6f2:	f06f 0347 	mvn.w	r3, #71	; 0x47
   1a6f6:	60ab      	str	r3, [r5, #8]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1a6f8:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1a6fc:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1a700:	9400      	str	r4, [sp, #0]
   1a702:	4623      	mov	r3, r4
   1a704:	4621      	mov	r1, r4
   1a706:	f7f5 fd57 	bl	101b8 <ticker_stop>
   1a70a:	4803      	ldr	r0, [pc, #12]	; (1a718 <time_slot_delay+0x70>)
   1a70c:	f001 fb1a 	bl	1bd44 <z_impl_k_sem_give>
}
   1a710:	b00d      	add	sp, #52	; 0x34
   1a712:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1a716:	bf00      	nop
   1a718:	20002a10 	.word	0x20002a10

0001a71c <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1a71c:	4a01      	ldr	r2, [pc, #4]	; (1a724 <time_slot_callback_prepare+0x8>)
   1a71e:	2131      	movs	r1, #49	; 0x31
   1a720:	f7ff bfc2 	b.w	1a6a8 <time_slot_delay>
   1a724:	0001a729 	.word	0x0001a729

0001a728 <time_slot_callback_abort>:
{
   1a728:	b570      	push	{r4, r5, r6, lr}
   1a72a:	4604      	mov	r4, r0
   1a72c:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1a72e:	f7f8 f901 	bl	12934 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1a732:	462b      	mov	r3, r5
   1a734:	4620      	mov	r0, r4
   1a736:	4a03      	ldr	r2, [pc, #12]	; (1a744 <time_slot_callback_abort+0x1c>)
}
   1a738:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1a73c:	2106      	movs	r1, #6
   1a73e:	f7ff bfb3 	b.w	1a6a8 <time_slot_delay>
   1a742:	bf00      	nop
   1a744:	0001a5bd 	.word	0x0001a5bd

0001a748 <flash_nrf_write>:
{
   1a748:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a74a:	460d      	mov	r5, r1
   1a74c:	b08b      	sub	sp, #44	; 0x2c
	if (is_regular_addr_valid(addr, len)) {
   1a74e:	4619      	mov	r1, r3
   1a750:	4628      	mov	r0, r5
{
   1a752:	4617      	mov	r7, r2
   1a754:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1a756:	f006 fa9e 	bl	20c96 <is_regular_addr_valid>
   1a75a:	b3a8      	cbz	r0, 1a7c8 <flash_nrf_write+0x80>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1a75c:	ea45 0604 	orr.w	r6, r5, r4
   1a760:	f016 0603 	ands.w	r6, r6, #3
   1a764:	d130      	bne.n	1a7c8 <flash_nrf_write+0x80>
	if (!len) {
   1a766:	b31c      	cbz	r4, 1a7b0 <flash_nrf_write+0x68>
	return z_impl_k_sem_take(sem, timeout);
   1a768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a76c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a770:	4817      	ldr	r0, [pc, #92]	; (1a7d0 <flash_nrf_write+0x88>)
   1a772:	f001 fb0d 	bl	1bd90 <z_impl_k_sem_take>
	if (ticker_is_initialized(0)) {
   1a776:	4630      	mov	r0, r6
   1a778:	f7f5 fc38 	bl	ffec <ticker_is_initialized>
   1a77c:	4603      	mov	r3, r0
   1a77e:	a804      	add	r0, sp, #16
   1a780:	b1cb      	cbz	r3, 1a7b6 <flash_nrf_write+0x6e>
	struct flash_context context = {
   1a782:	2301      	movs	r3, #1
   1a784:	f88d 301c 	strb.w	r3, [sp, #28]
   1a788:	f641 524c 	movw	r2, #7500	; 0x1d4c
   1a78c:	f241 63a8 	movw	r3, #5800	; 0x16a8
   1a790:	e9cd 2308 	strd	r2, r3, [sp, #32]
	struct flash_op_desc flash_op_desc = {
   1a794:	4b0f      	ldr	r3, [pc, #60]	; (1a7d4 <flash_nrf_write+0x8c>)
	struct flash_context context = {
   1a796:	9406      	str	r4, [sp, #24]
	struct flash_op_desc flash_op_desc = {
   1a798:	e9cd 3001 	strd	r3, r0, [sp, #4]
	return  work_in_time_slice(&flash_op_desc);
   1a79c:	a801      	add	r0, sp, #4
	struct flash_context context = {
   1a79e:	e9cd 7504 	strd	r7, r5, [sp, #16]
	struct flash_op_desc flash_op_desc = {
   1a7a2:	9603      	str	r6, [sp, #12]
	return  work_in_time_slice(&flash_op_desc);
   1a7a4:	f7e8 fba0 	bl	2ee8 <work_in_time_slice>
#if defined(CONFIG_SOC_FLASH_NRF_RADIO_SYNC)
		.enable_time_limit = 0 /* disable time limit */
#endif /* CONFIG_SOC_FLASH_NRF_RADIO_SYNC */
	};

	return write_op(&context);
   1a7a8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1a7aa:	4809      	ldr	r0, [pc, #36]	; (1a7d0 <flash_nrf_write+0x88>)
   1a7ac:	f001 faca 	bl	1bd44 <z_impl_k_sem_give>
}
   1a7b0:	4620      	mov	r0, r4
   1a7b2:	b00b      	add	sp, #44	; 0x2c
   1a7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct flash_context context = {
   1a7b6:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1a7ba:	e9cd 7504 	strd	r7, r5, [sp, #16]
   1a7be:	9309      	str	r3, [sp, #36]	; 0x24
   1a7c0:	9406      	str	r4, [sp, #24]
	return write_op(&context);
   1a7c2:	f7e8 fc0d 	bl	2fe0 <write_op>
   1a7c6:	e7ef      	b.n	1a7a8 <flash_nrf_write+0x60>
		return -EINVAL;
   1a7c8:	f06f 0415 	mvn.w	r4, #21
   1a7cc:	e7f0      	b.n	1a7b0 <flash_nrf_write+0x68>
   1a7ce:	bf00      	nop
   1a7d0:	200029f8 	.word	0x200029f8
   1a7d4:	00002fe1 	.word	0x00002fe1

0001a7d8 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1a7d8:	4b02      	ldr	r3, [pc, #8]	; (1a7e4 <uart_nrfx_err_check+0xc>)
   1a7da:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1a7de:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   1a7e2:	4770      	bx	lr
   1a7e4:	40002000 	.word	0x40002000

0001a7e8 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
   1a7e8:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
   1a7ea:	794b      	ldrb	r3, [r1, #5]
   1a7ec:	2b01      	cmp	r3, #1
   1a7ee:	d11e      	bne.n	1a82e <uart_nrfx_configure+0x46>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1a7f0:	798b      	ldrb	r3, [r1, #6]
   1a7f2:	2b03      	cmp	r3, #3
   1a7f4:	d11b      	bne.n	1a82e <uart_nrfx_configure+0x46>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1a7f6:	79ca      	ldrb	r2, [r1, #7]
   1a7f8:	b10a      	cbz	r2, 1a7fe <uart_nrfx_configure+0x16>
   1a7fa:	2a01      	cmp	r2, #1
   1a7fc:	d117      	bne.n	1a82e <uart_nrfx_configure+0x46>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1a7fe:	790c      	ldrb	r4, [r1, #4]
   1a800:	b114      	cbz	r4, 1a808 <uart_nrfx_configure+0x20>
   1a802:	2c02      	cmp	r4, #2
   1a804:	d113      	bne.n	1a82e <uart_nrfx_configure+0x46>
   1a806:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1a808:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   1a80a:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   1a80e:	d05f      	beq.n	1a8d0 <uart_nrfx_configure+0xe8>
   1a810:	d82b      	bhi.n	1a86a <uart_nrfx_configure+0x82>
   1a812:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1a816:	d05d      	beq.n	1a8d4 <uart_nrfx_configure+0xec>
   1a818:	d814      	bhi.n	1a844 <uart_nrfx_configure+0x5c>
   1a81a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1a81e:	d05b      	beq.n	1a8d8 <uart_nrfx_configure+0xf0>
   1a820:	d808      	bhi.n	1a834 <uart_nrfx_configure+0x4c>
   1a822:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1a826:	d05a      	beq.n	1a8de <uart_nrfx_configure+0xf6>
   1a828:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1a82c:	d05a      	beq.n	1a8e4 <uart_nrfx_configure+0xfc>
   1a82e:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1a832:	e04c      	b.n	1a8ce <uart_nrfx_configure+0xe6>
   1a834:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1a838:	d057      	beq.n	1a8ea <uart_nrfx_configure+0x102>
   1a83a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1a83e:	d1f6      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   1a840:	4b34      	ldr	r3, [pc, #208]	; (1a914 <uart_nrfx_configure+0x12c>)
   1a842:	e039      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a844:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1a848:	d052      	beq.n	1a8f0 <uart_nrfx_configure+0x108>
   1a84a:	d807      	bhi.n	1a85c <uart_nrfx_configure+0x74>
   1a84c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1a850:	d050      	beq.n	1a8f4 <uart_nrfx_configure+0x10c>
   1a852:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1a856:	d1ea      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   1a858:	4b2f      	ldr	r3, [pc, #188]	; (1a918 <uart_nrfx_configure+0x130>)
   1a85a:	e02d      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a85c:	f647 2512 	movw	r5, #31250	; 0x7a12
   1a860:	42ab      	cmp	r3, r5
   1a862:	d1e4      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   1a864:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1a868:	e026      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a86a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1a86e:	d044      	beq.n	1a8fa <uart_nrfx_configure+0x112>
   1a870:	d811      	bhi.n	1a896 <uart_nrfx_configure+0xae>
   1a872:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1a876:	d042      	beq.n	1a8fe <uart_nrfx_configure+0x116>
   1a878:	d808      	bhi.n	1a88c <uart_nrfx_configure+0xa4>
   1a87a:	f64d 25c0 	movw	r5, #56000	; 0xdac0
   1a87e:	42ab      	cmp	r3, r5
   1a880:	d03f      	beq.n	1a902 <uart_nrfx_configure+0x11a>
   1a882:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1a886:	d1d2      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   1a888:	4b24      	ldr	r3, [pc, #144]	; (1a91c <uart_nrfx_configure+0x134>)
   1a88a:	e015      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a88c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1a890:	d1cd      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   1a892:	4b23      	ldr	r3, [pc, #140]	; (1a920 <uart_nrfx_configure+0x138>)
   1a894:	e010      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a896:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1a89a:	d035      	beq.n	1a908 <uart_nrfx_configure+0x120>
   1a89c:	d807      	bhi.n	1a8ae <uart_nrfx_configure+0xc6>
   1a89e:	4d21      	ldr	r5, [pc, #132]	; (1a924 <uart_nrfx_configure+0x13c>)
   1a8a0:	42ab      	cmp	r3, r5
   1a8a2:	d033      	beq.n	1a90c <uart_nrfx_configure+0x124>
   1a8a4:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1a8a8:	d1c1      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   1a8aa:	4b1f      	ldr	r3, [pc, #124]	; (1a928 <uart_nrfx_configure+0x140>)
   1a8ac:	e004      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a8ae:	4d1f      	ldr	r5, [pc, #124]	; (1a92c <uart_nrfx_configure+0x144>)
   1a8b0:	42ab      	cmp	r3, r5
   1a8b2:	d1bc      	bne.n	1a82e <uart_nrfx_configure+0x46>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   1a8b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1a8b8:	4d1d      	ldr	r5, [pc, #116]	; (1a930 <uart_nrfx_configure+0x148>)
                    | (uint32_t)p_cfg->hwfc;
   1a8ba:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
   1a8bc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1a8c0:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1a8c4:	68c3      	ldr	r3, [r0, #12]
   1a8c6:	c903      	ldmia	r1, {r0, r1}
   1a8c8:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1a8cc:	2000      	movs	r0, #0
}
   1a8ce:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   1a8d0:	4b18      	ldr	r3, [pc, #96]	; (1a934 <uart_nrfx_configure+0x14c>)
   1a8d2:	e7f1      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   1a8d4:	4b18      	ldr	r3, [pc, #96]	; (1a938 <uart_nrfx_configure+0x150>)
   1a8d6:	e7ef      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   1a8d8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1a8dc:	e7ec      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = 0x00014000;
   1a8de:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1a8e2:	e7e9      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
	switch (baudrate) {
   1a8e4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1a8e8:	e7e6      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   1a8ea:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1a8ee:	e7e3      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   1a8f0:	4b12      	ldr	r3, [pc, #72]	; (1a93c <uart_nrfx_configure+0x154>)
   1a8f2:	e7e1      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   1a8f4:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   1a8f8:	e7de      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   1a8fa:	4b11      	ldr	r3, [pc, #68]	; (1a940 <uart_nrfx_configure+0x158>)
   1a8fc:	e7dc      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   1a8fe:	4b11      	ldr	r3, [pc, #68]	; (1a944 <uart_nrfx_configure+0x15c>)
   1a900:	e7da      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   1a902:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1a906:	e7d7      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   1a908:	4b0f      	ldr	r3, [pc, #60]	; (1a948 <uart_nrfx_configure+0x160>)
   1a90a:	e7d5      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   1a90c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1a910:	e7d2      	b.n	1a8b8 <uart_nrfx_configure+0xd0>
   1a912:	bf00      	nop
   1a914:	0013b000 	.word	0x0013b000
   1a918:	004ea000 	.word	0x004ea000
   1a91c:	00ebf000 	.word	0x00ebf000
   1a920:	01d7e000 	.word	0x01d7e000
   1a924:	0003d090 	.word	0x0003d090
   1a928:	075f7000 	.word	0x075f7000
   1a92c:	000f4240 	.word	0x000f4240
   1a930:	40002000 	.word	0x40002000
   1a934:	009d5000 	.word	0x009d5000
   1a938:	00275000 	.word	0x00275000
   1a93c:	0075f000 	.word	0x0075f000
   1a940:	03afb000 	.word	0x03afb000
   1a944:	013a9000 	.word	0x013a9000
   1a948:	0ebed000 	.word	0x0ebed000

0001a94c <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a94c:	4b08      	ldr	r3, [pc, #32]	; (1a970 <uart_nrfx_poll_in+0x24>)
   1a94e:	681a      	ldr	r2, [r3, #0]
{
   1a950:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   1a952:	b152      	cbz	r2, 1a96a <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a954:	2000      	movs	r0, #0
   1a956:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1a958:	681b      	ldr	r3, [r3, #0]
   1a95a:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1a95c:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
   1a95e:	4b05      	ldr	r3, [pc, #20]	; (1a974 <uart_nrfx_poll_in+0x28>)
   1a960:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   1a964:	700b      	strb	r3, [r1, #0]
}
   1a966:	b002      	add	sp, #8
   1a968:	4770      	bx	lr
		return -1;
   1a96a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a96e:	e7fa      	b.n	1a966 <uart_nrfx_poll_in+0x1a>
   1a970:	40002108 	.word	0x40002108
   1a974:	40002000 	.word	0x40002000

0001a978 <uart_nrfx_poll_out>:
{
   1a978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1a97a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   1a97c:	f006 fce9 	bl	21352 <k_is_in_isr>
   1a980:	4d1b      	ldr	r5, [pc, #108]	; (1a9f0 <uart_nrfx_poll_out+0x78>)
   1a982:	bb88      	cbnz	r0, 1a9e8 <uart_nrfx_poll_out+0x70>
   1a984:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a986:	2701      	movs	r7, #1
   1a988:	f3bf 8f5b 	dmb	ish
   1a98c:	e855 3f00 	ldrex	r3, [r5]
   1a990:	2b00      	cmp	r3, #0
   1a992:	d103      	bne.n	1a99c <uart_nrfx_poll_out+0x24>
   1a994:	e845 7200 	strex	r2, r7, [r5]
   1a998:	2a00      	cmp	r2, #0
   1a99a:	d1f7      	bne.n	1a98c <uart_nrfx_poll_out+0x14>
   1a99c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   1a9a0:	d007      	beq.n	1a9b2 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   1a9a2:	2021      	movs	r0, #33	; 0x21
   1a9a4:	2100      	movs	r1, #0
   1a9a6:	3c01      	subs	r4, #1
   1a9a8:	f001 f9a6 	bl	1bcf8 <z_impl_k_sleep>
			if (--safety_cnt == 0) {
   1a9ac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1a9b0:	d1ea      	bne.n	1a988 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1a9b2:	4c10      	ldr	r4, [pc, #64]	; (1a9f4 <uart_nrfx_poll_out+0x7c>)
   1a9b4:	2200      	movs	r2, #0
   1a9b6:	6022      	str	r2, [r4, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1a9b8:	6822      	ldr	r2, [r4, #0]
   1a9ba:	9201      	str	r2, [sp, #4]
    (void)dummy;
   1a9bc:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a9be:	4a0e      	ldr	r2, [pc, #56]	; (1a9f8 <uart_nrfx_poll_out+0x80>)
   1a9c0:	2101      	movs	r1, #1
   1a9c2:	6011      	str	r1, [r2, #0]
    p_reg->TXD = txd;
   1a9c4:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
   1a9c8:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1a9cc:	6823      	ldr	r3, [r4, #0]
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   1a9ce:	b923      	cbnz	r3, 1a9da <uart_nrfx_poll_out+0x62>
   1a9d0:	2001      	movs	r0, #1
   1a9d2:	f006 fa01 	bl	20dd8 <nrfx_busy_wait>
   1a9d6:	3e01      	subs	r6, #1
   1a9d8:	d1f8      	bne.n	1a9cc <uart_nrfx_poll_out+0x54>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1a9da:	4b08      	ldr	r3, [pc, #32]	; (1a9fc <uart_nrfx_poll_out+0x84>)
   1a9dc:	2201      	movs	r2, #1
   1a9de:	601a      	str	r2, [r3, #0]
	*lock = 0;
   1a9e0:	2300      	movs	r3, #0
   1a9e2:	602b      	str	r3, [r5, #0]
}
   1a9e4:	b003      	add	sp, #12
   1a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*lock = 1;
   1a9e8:	2301      	movs	r3, #1
   1a9ea:	602b      	str	r3, [r5, #0]
   1a9ec:	e7e1      	b.n	1a9b2 <uart_nrfx_poll_out+0x3a>
   1a9ee:	bf00      	nop
   1a9f0:	20002a28 	.word	0x20002a28
   1a9f4:	4000211c 	.word	0x4000211c
   1a9f8:	40002008 	.word	0x40002008
   1a9fc:	4000200c 	.word	0x4000200c

0001aa00 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
   1aa00:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->OUTSET = set_mask;
   1aa02:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   1aa06:	4c17      	ldr	r4, [pc, #92]	; (1aa64 <uart_nrfx_init+0x64>)
   1aa08:	2200      	movs	r2, #0
   1aa0a:	2140      	movs	r1, #64	; 0x40
   1aa0c:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSELRXD = pselrxd;
   1aa10:	2508      	movs	r5, #8
   1aa12:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1aa16:	2103      	movs	r1, #3
   1aa18:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
   1aa1c:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
   1aa20:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
   1aa24:	2506      	movs	r5, #6
   1aa26:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
   1aa2a:	2520      	movs	r5, #32
   1aa2c:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1aa30:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
   1aa34:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
   1aa38:	2305      	movs	r3, #5
   1aa3a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
   1aa3e:	2307      	movs	r3, #7
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1aa40:	68c1      	ldr	r1, [r0, #12]
   1aa42:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1aa46:	f7ff fecf 	bl	1a7e8 <uart_nrfx_configure>
	if (err) {
   1aa4a:	b948      	cbnz	r0, 1aa60 <uart_nrfx_init+0x60>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   1aa4c:	2304      	movs	r3, #4
   1aa4e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1aa52:	4b05      	ldr	r3, [pc, #20]	; (1aa68 <uart_nrfx_init+0x68>)
   1aa54:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
   1aa56:	681b      	ldr	r3, [r3, #0]
   1aa58:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1aa5a:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1aa5c:	2301      	movs	r3, #1
   1aa5e:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
   1aa60:	b003      	add	sp, #12
   1aa62:	bd30      	pop	{r4, r5, pc}
   1aa64:	40002000 	.word	0x40002000
   1aa68:	40002108 	.word	0x40002108

0001aa6c <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1aa6e:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1aa70:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1aa72:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1aa74:	f04f 0520 	mov.w	r5, #32
   1aa78:	f3ef 8011 	mrs	r0, BASEPRI
   1aa7c:	f385 8811 	msr	BASEPRI, r5
   1aa80:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1aa84:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1aa86:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   1aa8a:	1ba4      	subs	r4, r4, r6
   1aa8c:	403c      	ands	r4, r7
	if (available < len) {
   1aa8e:	42a2      	cmp	r2, r4
		len = available;
   1aa90:	bf88      	it	hi
   1aa92:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1aa94:	eb06 0c02 	add.w	ip, r6, r2
   1aa98:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   1aa9c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1aa9e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   1aaa2:	f380 8811 	msr	BASEPRI, r0
   1aaa6:	f3bf 8f6f 	isb	sy
   1aaaa:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   1aaac:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   1aaae:	4282      	cmp	r2, r0
   1aab0:	d119      	bne.n	1aae6 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1aab2:	4576      	cmp	r6, lr
   1aab4:	d10d      	bne.n	1aad2 <rng_pool_get+0x66>
	__asm__ volatile(
   1aab6:	f04f 0520 	mov.w	r5, #32
   1aaba:	f3ef 8211 	mrs	r2, BASEPRI
   1aabe:	f385 8811 	msr	BASEPRI, r5
   1aac2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1aac6:	781d      	ldrb	r5, [r3, #0]
   1aac8:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1aaca:	f382 8811 	msr	BASEPRI, r2
   1aace:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1aad2:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1aad4:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1aad6:	b288      	uxth	r0, r1
	available = available - len;
   1aad8:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   1aada:	428b      	cmp	r3, r1
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)rng_task);
}

NRF_STATIC_INLINE void nrf_rng_task_trigger(NRF_RNG_Type * p_reg, nrf_rng_task_t rng_task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1aadc:	bf22      	ittt	cs
   1aade:	4b06      	ldrcs	r3, [pc, #24]	; (1aaf8 <rng_pool_get+0x8c>)
   1aae0:	2201      	movcs	r2, #1
   1aae2:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1aae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1aae6:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   1aaea:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1aaec:	f89c c005 	ldrb.w	ip, [ip, #5]
   1aaf0:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   1aaf4:	403d      	ands	r5, r7
   1aaf6:	e7da      	b.n	1aaae <rng_pool_get+0x42>
   1aaf8:	4000d000 	.word	0x4000d000

0001aafc <entropy_nrf5_get_entropy>:
		k_sem_give(&entropy_nrf5_data.sem_sync);
	}
}

static int entropy_nrf5_get_entropy(struct device *device, uint8_t *buf, uint16_t len)
{
   1aafc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1ab00:	4f13      	ldr	r7, [pc, #76]	; (1ab50 <entropy_nrf5_get_entropy+0x54>)
   1ab02:	460d      	mov	r5, r1
   1ab04:	4614      	mov	r4, r2

	while (len) {
		uint16_t bytes;

		k_sem_take(&entropy_nrf5_data.sem_lock, K_FOREVER);
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ab06:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ab0a:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ab0e:	b914      	cbnz	r4, 1ab16 <entropy_nrf5_get_entropy+0x1a>
		len -= bytes;
		buf += bytes;
	}

	return 0;
}
   1ab10:	4620      	mov	r0, r4
   1ab12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ab16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ab1e:	4638      	mov	r0, r7
   1ab20:	f001 f936 	bl	1bd90 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ab24:	4622      	mov	r2, r4
   1ab26:	4629      	mov	r1, r5
   1ab28:	4640      	mov	r0, r8
   1ab2a:	f7ff ff9f 	bl	1aa6c <rng_pool_get>
   1ab2e:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ab30:	4638      	mov	r0, r7
   1ab32:	f001 f907 	bl	1bd44 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ab36:	b93e      	cbnz	r6, 1ab48 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ab38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ab3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ab40:	4648      	mov	r0, r9
   1ab42:	f001 f925 	bl	1bd90 <z_impl_k_sem_take>
			continue;
   1ab46:	e7e2      	b.n	1ab0e <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ab48:	1ba4      	subs	r4, r4, r6
   1ab4a:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ab4c:	4435      	add	r5, r6
   1ab4e:	e7de      	b.n	1ab0e <entropy_nrf5_get_entropy+0x12>
   1ab50:	20002a2c 	.word	0x20002a2c

0001ab54 <random_byte_get>:
{
   1ab54:	b082      	sub	sp, #8
	__asm__ volatile(
   1ab56:	f04f 0320 	mov.w	r3, #32
   1ab5a:	f3ef 8211 	mrs	r2, BASEPRI
   1ab5e:	f383 8811 	msr	BASEPRI, r3
   1ab62:	f3bf 8f6f 	isb	sy
#endif
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ab66:	4b0a      	ldr	r3, [pc, #40]	; (1ab90 <random_byte_get+0x3c>)
   1ab68:	6819      	ldr	r1, [r3, #0]
	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1ab6a:	b171      	cbz	r1, 1ab8a <random_byte_get+0x36>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1ab6c:	4909      	ldr	r1, [pc, #36]	; (1ab94 <random_byte_get+0x40>)
   1ab6e:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ab72:	2100      	movs	r1, #0
   1ab74:	6019      	str	r1, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ab76:	681b      	ldr	r3, [r3, #0]
   1ab78:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1ab7a:	9b01      	ldr	r3, [sp, #4]
		retval = nrf_rng_random_value_get(NRF_RNG);
   1ab7c:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1ab7e:	f382 8811 	msr	BASEPRI, r2
   1ab82:	f3bf 8f6f 	isb	sy
}
   1ab86:	b002      	add	sp, #8
   1ab88:	4770      	bx	lr
	int retval = -EAGAIN;
   1ab8a:	f06f 000a 	mvn.w	r0, #10
   1ab8e:	e7f6      	b.n	1ab7e <random_byte_get+0x2a>
   1ab90:	4000d100 	.word	0x4000d100
   1ab94:	4000d000 	.word	0x4000d000

0001ab98 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab98:	43db      	mvns	r3, r3
{
   1ab9a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1ab9e:	f013 0501 	ands.w	r5, r3, #1
{
   1aba2:	460e      	mov	r6, r1
   1aba4:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1aba6:	d005      	beq.n	1abb4 <entropy_nrf5_get_entropy_isr+0x1c>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1aba8:	4822      	ldr	r0, [pc, #136]	; (1ac34 <entropy_nrf5_get_entropy_isr+0x9c>)
   1abaa:	f7ff ff5f 	bl	1aa6c <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1abae:	b002      	add	sp, #8
   1abb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1abb4:	2a00      	cmp	r2, #0
   1abb6:	d035      	beq.n	1ac24 <entropy_nrf5_get_entropy_isr+0x8c>
	__asm__ volatile(
   1abb8:	f04f 0320 	mov.w	r3, #32
   1abbc:	f3ef 8811 	mrs	r8, BASEPRI
   1abc0:	f383 8811 	msr	BASEPRI, r3
   1abc4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1abc8:	200d      	movs	r0, #13
   1abca:	f7eb f84f 	bl	5c6c <arch_irq_is_enabled>
   1abce:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1abd0:	200d      	movs	r0, #13
   1abd2:	f7eb f837 	bl	5c44 <arch_irq_disable>
	__asm__ volatile(
   1abd6:	f388 8811 	msr	BASEPRI, r8
   1abda:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1abde:	4a16      	ldr	r2, [pc, #88]	; (1ac38 <entropy_nrf5_get_entropy_isr+0xa0>)
   1abe0:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1abe2:	6813      	ldr	r3, [r2, #0]
   1abe4:	9301      	str	r3, [sp, #4]
    (void)dummy;
   1abe6:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1abe8:	4b14      	ldr	r3, [pc, #80]	; (1ac3c <entropy_nrf5_get_entropy_isr+0xa4>)
   1abea:	2101      	movs	r1, #1
   1abec:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1abee:	4914      	ldr	r1, [pc, #80]	; (1ac40 <entropy_nrf5_get_entropy_isr+0xa8>)
   1abf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   1abf4:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   1abf8:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1abfa:	4691      	mov	r9, r2
   1abfc:	468a      	mov	sl, r1
   1abfe:	4698      	mov	r8, r3
   1ac00:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   1ac04:	b183      	cbz	r3, 1ac28 <entropy_nrf5_get_entropy_isr+0x90>
			byte = random_byte_get();
   1ac06:	f7ff ffa5 	bl	1ab54 <random_byte_get>
			if (byte < 0) {
   1ac0a:	1e03      	subs	r3, r0, #0
   1ac0c:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   1ac10:	dbf6      	blt.n	1ac00 <entropy_nrf5_get_entropy_isr+0x68>
   1ac12:	3d01      	subs	r5, #1
   1ac14:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   1ac16:	5573      	strb	r3, [r6, r5]
		} while (len);
   1ac18:	2d00      	cmp	r5, #0
   1ac1a:	d1f1      	bne.n	1ac00 <entropy_nrf5_get_entropy_isr+0x68>
		if (irq_enabled) {
   1ac1c:	b117      	cbz	r7, 1ac24 <entropy_nrf5_get_entropy_isr+0x8c>
			irq_enable(IRQN);
   1ac1e:	200d      	movs	r0, #13
   1ac20:	f7eb f800 	bl	5c24 <arch_irq_enable>
	return cnt;
   1ac24:	4620      	mov	r0, r4
   1ac26:	e7c2      	b.n	1abae <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1ac28:	f3bf 8f4f 	dsb	sy
				__WFE();
   1ac2c:	bf20      	wfe
				__SEV();
   1ac2e:	bf40      	sev
				__WFE();
   1ac30:	bf20      	wfe
   1ac32:	e7e5      	b.n	1ac00 <entropy_nrf5_get_entropy_isr+0x68>
   1ac34:	20002a5c 	.word	0x20002a5c
   1ac38:	4000d100 	.word	0x4000d100
   1ac3c:	4000d000 	.word	0x4000d000
   1ac40:	e000e100 	.word	0xe000e100

0001ac44 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(struct device *device)
{
   1ac44:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ac46:	4c1a      	ldr	r4, [pc, #104]	; (1acb0 <entropy_nrf5_init+0x6c>)
   1ac48:	2201      	movs	r2, #1
   1ac4a:	4611      	mov	r1, r2
   1ac4c:	4620      	mov	r0, r4
   1ac4e:	f006 fb70 	bl	21332 <z_impl_k_sem_init>
   1ac52:	2201      	movs	r2, #1
   1ac54:	2100      	movs	r1, #0
   1ac56:	f104 0018 	add.w	r0, r4, #24
   1ac5a:	f006 fb6a 	bl	21332 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ac5e:	f240 4307 	movw	r3, #1031	; 0x407
   1ac62:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ac66:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ac6a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ac6c:	230c      	movs	r3, #12
   1ac6e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ac72:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1ac74:	4b0f      	ldr	r3, [pc, #60]	; (1acb4 <entropy_nrf5_init+0x70>)
   1ac76:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ac7a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ac7e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ac82:	f042 0201 	orr.w	r2, r2, #1
   1ac86:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ac8a:	4a0b      	ldr	r2, [pc, #44]	; (1acb8 <entropy_nrf5_init+0x74>)
   1ac8c:	6015      	str	r5, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1ac8e:	6812      	ldr	r2, [r2, #0]
   1ac90:	9201      	str	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1ac92:	2101      	movs	r1, #1
    (void)dummy;
   1ac94:	9a01      	ldr	r2, [sp, #4]
    p_reg->INTENSET = mask;
   1ac96:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1ac9a:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1ac9c:	6019      	str	r1, [r3, #0]
   1ac9e:	200d      	movs	r0, #13
   1aca0:	f7ea fff2 	bl	5c88 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1aca4:	200d      	movs	r0, #13
   1aca6:	f7ea ffbd 	bl	5c24 <arch_irq_enable>

	return 0;
}
   1acaa:	4628      	mov	r0, r5
   1acac:	b003      	add	sp, #12
   1acae:	bd30      	pop	{r4, r5, pc}
   1acb0:	20002a2c 	.word	0x20002a2c
   1acb4:	4000d000 	.word	0x4000d000
   1acb8:	4000d100 	.word	0x4000d100

0001acbc <isr>:
{
   1acbc:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1acbe:	f7ff ff49 	bl	1ab54 <random_byte_get>
	if (byte < 0) {
   1acc2:	2800      	cmp	r0, #0
   1acc4:	db20      	blt.n	1ad08 <isr+0x4c>
	uint8_t last  = rngp->last;
   1acc6:	4b17      	ldr	r3, [pc, #92]	; (1ad24 <isr+0x68>)
   1acc8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1accc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1acd0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1acd4:	1a51      	subs	r1, r2, r1
   1acd6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1acda:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1acdc:	d10d      	bne.n	1acfa <isr+0x3e>
	uint8_t last  = rngp->last;
   1acde:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1ace2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1ace6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1acea:	1a51      	subs	r1, r2, r1
   1acec:	ea34 0101 	bics.w	r1, r4, r1
   1acf0:	d10b      	bne.n	1ad0a <isr+0x4e>
   1acf2:	4b0d      	ldr	r3, [pc, #52]	; (1ad28 <isr+0x6c>)
   1acf4:	2201      	movs	r2, #1
   1acf6:	601a      	str	r2, [r3, #0]
}
   1acf8:	e00e      	b.n	1ad18 <isr+0x5c>
	rngp->buffer[last] = byte;
   1acfa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1acfc:	3201      	adds	r2, #1
   1acfe:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ad00:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1ad04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1ad08:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1ad0a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1ad0c:	3201      	adds	r2, #1
   1ad0e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1ad10:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1ad14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1ad18:	4804      	ldr	r0, [pc, #16]	; (1ad2c <isr+0x70>)
}
   1ad1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ad1e:	f001 b811 	b.w	1bd44 <z_impl_k_sem_give>
   1ad22:	bf00      	nop
   1ad24:	20002a2c 	.word	0x20002a2c
   1ad28:	4000d004 	.word	0x4000d004
   1ad2c:	20002a44 	.word	0x20002a44

0001ad30 <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ad30:	4b0b      	ldr	r3, [pc, #44]	; (1ad60 <nrf52_errata_108+0x30>)
   1ad32:	681b      	ldr	r3, [r3, #0]
   1ad34:	1c5a      	adds	r2, r3, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ad36:	bf05      	ittet	eq
   1ad38:	4b0a      	ldreq	r3, [pc, #40]	; (1ad64 <nrf52_errata_108+0x34>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ad3a:	4a0b      	ldreq	r2, [pc, #44]	; (1ad68 <nrf52_errata_108+0x38>)
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ad3c:	4a0b      	ldrne	r2, [pc, #44]	; (1ad6c <nrf52_errata_108+0x3c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ad3e:	6810      	ldreq	r0, [r2, #0]
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ad40:	bf0a      	itet	eq
   1ad42:	781b      	ldrbeq	r3, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1ad44:	6810      	ldrne	r0, [r2, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ad46:	f3c0 1003 	ubfxeq	r0, r0, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ad4a:	2b06      	cmp	r3, #6
   1ad4c:	d105      	bne.n	1ad5a <nrf52_errata_108+0x2a>
            {
                switch(var2)
   1ad4e:	3803      	subs	r0, #3
   1ad50:	2803      	cmp	r0, #3
   1ad52:	bf8c      	ite	hi
   1ad54:	2000      	movhi	r0, #0
   1ad56:	2001      	movls	r0, #1
   1ad58:	4770      	bx	lr
                    case 0x06ul:
                        return true;
                }
            }
        #endif
        return false;
   1ad5a:	2000      	movs	r0, #0
    #endif
}
   1ad5c:	4770      	bx	lr
   1ad5e:	bf00      	nop
   1ad60:	10000130 	.word	0x10000130
   1ad64:	f0000fe0 	.word	0xf0000fe0
   1ad68:	f0000fe8 	.word	0xf0000fe8
   1ad6c:	10000134 	.word	0x10000134

0001ad70 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ad70:	4b07      	ldr	r3, [pc, #28]	; (1ad90 <nrf52_errata_16+0x20>)
   1ad72:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ad74:	2b06      	cmp	r3, #6
   1ad76:	d109      	bne.n	1ad8c <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ad78:	4b06      	ldr	r3, [pc, #24]	; (1ad94 <nrf52_errata_16+0x24>)
   1ad7a:	681b      	ldr	r3, [r3, #0]
   1ad7c:	f3c3 1303 	ubfx	r3, r3, #4, #4
   1ad80:	3b03      	subs	r3, #3
   1ad82:	2b03      	cmp	r3, #3
   1ad84:	d802      	bhi.n	1ad8c <nrf52_errata_16+0x1c>
   1ad86:	4a04      	ldr	r2, [pc, #16]	; (1ad98 <nrf52_errata_16+0x28>)
   1ad88:	5cd0      	ldrb	r0, [r2, r3]
   1ad8a:	4770      	bx	lr
                    case 0x06ul:
                        return false;
                }
            }
        #endif
        return false;
   1ad8c:	2000      	movs	r0, #0
    #endif
}
   1ad8e:	4770      	bx	lr
   1ad90:	f0000fe0 	.word	0xf0000fe0
   1ad94:	f0000fe8 	.word	0xf0000fe8
   1ad98:	00025775 	.word	0x00025775

0001ad9c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1ad9c:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_12()){
   1ad9e:	f7ff ffc7 	bl	1ad30 <nrf52_errata_108>
   1ada2:	b128      	cbz	r0, 1adb0 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
   1ada4:	4b7e      	ldr	r3, [pc, #504]	; (1afa0 <SystemInit+0x204>)
   1ada6:	4a7f      	ldr	r2, [pc, #508]	; (1afa4 <SystemInit+0x208>)
   1ada8:	681b      	ldr	r3, [r3, #0]
   1adaa:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1adae:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_16()){
   1adb0:	f7ff ffde 	bl	1ad70 <nrf52_errata_16>
   1adb4:	b110      	cbz	r0, 1adbc <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
   1adb6:	4b7c      	ldr	r3, [pc, #496]	; (1afa8 <SystemInit+0x20c>)
   1adb8:	4a7c      	ldr	r2, [pc, #496]	; (1afac <SystemInit+0x210>)
   1adba:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_31()){
   1adbc:	f7ff ffb8 	bl	1ad30 <nrf52_errata_108>
   1adc0:	b128      	cbz	r0, 1adce <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
   1adc2:	4b7b      	ldr	r3, [pc, #492]	; (1afb0 <SystemInit+0x214>)
   1adc4:	4a7b      	ldr	r2, [pc, #492]	; (1afb4 <SystemInit+0x218>)
   1adc6:	681b      	ldr	r3, [r3, #0]
   1adc8:	f3c3 3342 	ubfx	r3, r3, #13, #3
   1adcc:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (nrf52_errata_32()){
   1adce:	f7ff ffcf 	bl	1ad70 <nrf52_errata_16>
   1add2:	b120      	cbz	r0, 1adde <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   1add4:	4a78      	ldr	r2, [pc, #480]	; (1afb8 <SystemInit+0x21c>)
   1add6:	68d3      	ldr	r3, [r2, #12]
   1add8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1addc:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   1adde:	f7ff ffa7 	bl	1ad30 <nrf52_errata_108>
   1ade2:	b140      	cbz	r0, 1adf6 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
   1ade4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ade8:	2200      	movs	r2, #0
   1adea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   1adee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   1adf2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_37()){
   1adf6:	f7ff ffbb 	bl	1ad70 <nrf52_errata_16>
   1adfa:	b110      	cbz	r0, 1ae02 <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
   1adfc:	4b6f      	ldr	r3, [pc, #444]	; (1afbc <SystemInit+0x220>)
   1adfe:	2203      	movs	r2, #3
   1ae00:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_57()){
   1ae02:	f7ff ffb5 	bl	1ad70 <nrf52_errata_16>
   1ae06:	b140      	cbz	r0, 1ae1a <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
   1ae08:	4b6d      	ldr	r3, [pc, #436]	; (1afc0 <SystemInit+0x224>)
   1ae0a:	2205      	movs	r2, #5
   1ae0c:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
   1ae0e:	2201      	movs	r2, #1
   1ae10:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
   1ae12:	2200      	movs	r2, #0
   1ae14:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
   1ae16:	223f      	movs	r2, #63	; 0x3f
   1ae18:	605a      	str	r2, [r3, #4]
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
   1ae1a:	4b6a      	ldr	r3, [pc, #424]	; (1afc4 <SystemInit+0x228>)
   1ae1c:	681a      	ldr	r2, [r3, #0]
   1ae1e:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ae20:	bf0b      	itete	eq
   1ae22:	4b69      	ldreq	r3, [pc, #420]	; (1afc8 <SystemInit+0x22c>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
   1ae24:	4b69      	ldrne	r3, [pc, #420]	; (1afcc <SystemInit+0x230>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
   1ae26:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
   1ae28:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
   1ae2a:	bf02      	ittt	eq
   1ae2c:	3308      	addeq	r3, #8
   1ae2e:	681b      	ldreq	r3, [r3, #0]
   1ae30:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            }
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1ae34:	2a06      	cmp	r2, #6
   1ae36:	d14d      	bne.n	1aed4 <SystemInit+0x138>
            {
                switch(var2)
   1ae38:	3b03      	subs	r3, #3
   1ae3a:	2b03      	cmp	r3, #3
   1ae3c:	d84a      	bhi.n	1aed4 <SystemInit+0x138>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   1ae3e:	4a64      	ldr	r2, [pc, #400]	; (1afd0 <SystemInit+0x234>)
   1ae40:	5cd3      	ldrb	r3, [r2, r3]
   1ae42:	2b00      	cmp	r3, #0
   1ae44:	d046      	beq.n	1aed4 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ae46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ae4a:	4b62      	ldr	r3, [pc, #392]	; (1afd4 <SystemInit+0x238>)
   1ae4c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ae50:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ae54:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ae58:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1ae5c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1ae60:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ae64:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1ae68:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ae6c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1ae70:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ae74:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1ae78:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ae7c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1ae80:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1ae84:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1ae88:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1ae8c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1ae90:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1ae94:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1ae98:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1ae9c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1aea0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1aea4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1aea8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1aeac:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1aeb0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1aeb4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1aeb8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1aebc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1aec0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1aec4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1aec8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1aecc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1aed0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_108()){
   1aed4:	f7ff ff2c 	bl	1ad30 <nrf52_errata_108>
   1aed8:	b128      	cbz	r0, 1aee6 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
   1aeda:	4b3f      	ldr	r3, [pc, #252]	; (1afd8 <SystemInit+0x23c>)
   1aedc:	4a3f      	ldr	r2, [pc, #252]	; (1afdc <SystemInit+0x240>)
   1aede:	681b      	ldr	r3, [r3, #0]
   1aee0:	f003 034f 	and.w	r3, r3, #79	; 0x4f
   1aee4:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   1aee6:	f7ff ff23 	bl	1ad30 <nrf52_errata_108>
   1aeea:	b148      	cbz	r0, 1af00 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1aeec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1aef0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1aef4:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1aef6:	bf44      	itt	mi
   1aef8:	f06f 0201 	mvnmi.w	r2, #1
   1aefc:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1af00:	4b30      	ldr	r3, [pc, #192]	; (1afc4 <SystemInit+0x228>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
   1af02:	681b      	ldr	r3, [r3, #0]
   1af04:	2b06      	cmp	r3, #6
   1af06:	d10c      	bne.n	1af22 <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1af08:	4b30      	ldr	r3, [pc, #192]	; (1afcc <SystemInit+0x230>)
   1af0a:	681b      	ldr	r3, [r3, #0]
   1af0c:	3b03      	subs	r3, #3
   1af0e:	2b03      	cmp	r3, #3
   1af10:	d807      	bhi.n	1af22 <SystemInit+0x186>
        }
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_182()){
   1af12:	4a33      	ldr	r2, [pc, #204]	; (1afe0 <SystemInit+0x244>)
   1af14:	5cd3      	ldrb	r3, [r2, r3]
   1af16:	b123      	cbz	r3, 1af22 <SystemInit+0x186>
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
   1af18:	4a32      	ldr	r2, [pc, #200]	; (1afe4 <SystemInit+0x248>)
   1af1a:	6813      	ldr	r3, [r2, #0]
   1af1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1af20:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1af22:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1af26:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1af2a:	2a00      	cmp	r2, #0
   1af2c:	db03      	blt.n	1af36 <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1af2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1af32:	2b00      	cmp	r3, #0
   1af34:	da2f      	bge.n	1af96 <SystemInit+0x1fa>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   1af36:	4b2c      	ldr	r3, [pc, #176]	; (1afe8 <SystemInit+0x24c>)
   1af38:	2201      	movs	r2, #1
   1af3a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1af3e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1af42:	2a00      	cmp	r2, #0
   1af44:	d0fb      	beq.n	1af3e <SystemInit+0x1a2>
            NRF_UICR->PSELRESET[0] = 21;
   1af46:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   1af4a:	2115      	movs	r1, #21
   1af4c:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1af50:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1af54:	2a00      	cmp	r2, #0
   1af56:	d0fb      	beq.n	1af50 <SystemInit+0x1b4>
            NRF_UICR->PSELRESET[1] = 21;
   1af58:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1af5c:	2215      	movs	r2, #21
   1af5e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1af62:	4b21      	ldr	r3, [pc, #132]	; (1afe8 <SystemInit+0x24c>)
   1af64:	461a      	mov	r2, r3
   1af66:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   1af6a:	2900      	cmp	r1, #0
   1af6c:	d0fb      	beq.n	1af66 <SystemInit+0x1ca>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1af6e:	2100      	movs	r1, #0
   1af70:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1af74:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1af78:	2b00      	cmp	r3, #0
   1af7a:	d0fb      	beq.n	1af74 <SystemInit+0x1d8>
   1af7c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1af80:	491a      	ldr	r1, [pc, #104]	; (1afec <SystemInit+0x250>)
   1af82:	4b1b      	ldr	r3, [pc, #108]	; (1aff0 <SystemInit+0x254>)
   1af84:	68ca      	ldr	r2, [r1, #12]
   1af86:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1af8a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1af8c:	60cb      	str	r3, [r1, #12]
   1af8e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1af92:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1af94:	e7fd      	b.n	1af92 <SystemInit+0x1f6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1af96:	4b17      	ldr	r3, [pc, #92]	; (1aff4 <SystemInit+0x258>)
   1af98:	4a17      	ldr	r2, [pc, #92]	; (1aff8 <SystemInit+0x25c>)
   1af9a:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1af9c:	bd08      	pop	{r3, pc}
   1af9e:	bf00      	nop
   1afa0:	10000324 	.word	0x10000324
   1afa4:	40013540 	.word	0x40013540
   1afa8:	4007c074 	.word	0x4007c074
   1afac:	baadf00d 	.word	0xbaadf00d
   1afb0:	10000244 	.word	0x10000244
   1afb4:	4000053c 	.word	0x4000053c
   1afb8:	e000edf0 	.word	0xe000edf0
   1afbc:	400005a0 	.word	0x400005a0
   1afc0:	40005610 	.word	0x40005610
   1afc4:	10000130 	.word	0x10000130
   1afc8:	f0000fe0 	.word	0xf0000fe0
   1afcc:	10000134 	.word	0x10000134
   1afd0:	0002576d 	.word	0x0002576d
   1afd4:	4000c000 	.word	0x4000c000
   1afd8:	10000258 	.word	0x10000258
   1afdc:	40000ee4 	.word	0x40000ee4
   1afe0:	00025771 	.word	0x00025771
   1afe4:	4000173c 	.word	0x4000173c
   1afe8:	4001e000 	.word	0x4001e000
   1afec:	e000ed00 	.word	0xe000ed00
   1aff0:	05fa0004 	.word	0x05fa0004
   1aff4:	20000694 	.word	0x20000694
   1aff8:	03d09000 	.word	0x03d09000

0001affc <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1affc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1b000:	691a      	ldr	r2, [r3, #16]
}

static bool is_page_aligned_check(uint32_t addr)
{
    /* If the modulo operation returns '0', then the address is aligned. */
    return !(addr % flash_page_size_get());
   1b002:	fbb0 f3f2 	udiv	r3, r0, r2
   1b006:	fb02 0313 	mls	r3, r2, r3, r0
#if !defined(NRF_TRUSTZONE_NONSECURE)
     || ((addr - (uint32_t)NRF_UICR) < sizeof(NRF_UICR_Type))
#endif
    );

    if (!is_page_aligned_check(addr))
   1b00a:	b973      	cbnz	r3, 1b02a <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1b00c:	4b08      	ldr	r3, [pc, #32]	; (1b030 <nrfx_nvmc_page_erase+0x34>)
   1b00e:	2202      	movs	r2, #2
   1b010:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1b014:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1b018:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1b01c:	07d2      	lsls	r2, r2, #31
   1b01e:	d5fb      	bpl.n	1b018 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1b020:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1b022:	4804      	ldr	r0, [pc, #16]	; (1b034 <nrfx_nvmc_page_erase+0x38>)
   1b024:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1b028:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1b02a:	4803      	ldr	r0, [pc, #12]	; (1b038 <nrfx_nvmc_page_erase+0x3c>)
}
   1b02c:	4770      	bx	lr
   1b02e:	bf00      	nop
   1b030:	4001e000 	.word	0x4001e000
   1b034:	0bad0000 	.word	0x0bad0000
   1b038:	0bad000a 	.word	0x0bad000a

0001b03c <nrfx_nvmc_word_write>:
   1b03c:	4b07      	ldr	r3, [pc, #28]	; (1b05c <nrfx_nvmc_word_write+0x20>)
   1b03e:	2201      	movs	r2, #1
   1b040:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1b044:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1b048:	07d2      	lsls	r2, r2, #31
   1b04a:	d5fb      	bpl.n	1b044 <nrfx_nvmc_word_write+0x8>
    *(volatile uint32_t *)addr = value;
   1b04c:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1b04e:	f3bf 8f5f 	dmb	sy
    p_reg->CONFIG = (uint32_t)mode;
   1b052:	2200      	movs	r2, #0
   1b054:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nvmc_write_mode_set();

    nvmc_word_write(addr, value);

    nvmc_readonly_mode_set();
}
   1b058:	4770      	bx	lr
   1b05a:	bf00      	nop
   1b05c:	4001e000 	.word	0x4001e000

0001b060 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1b060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b062:	4b09      	ldr	r3, [pc, #36]	; (1b088 <z_sys_init_run_level+0x28>)
   1b064:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b068:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
   1b06a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b06c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1b070:	42a6      	cmp	r6, r4
   1b072:	d800      	bhi.n	1b076 <z_sys_init_run_level+0x16>
			}
		}
	}
}
   1b074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
   1b076:	e9d4 3500 	ldrd	r3, r5, [r4]
   1b07a:	4628      	mov	r0, r5
   1b07c:	4798      	blx	r3
		if (retval != 0) {
   1b07e:	b108      	cbz	r0, 1b084 <z_sys_init_run_level+0x24>
			if (dev) {
   1b080:	b105      	cbz	r5, 1b084 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
   1b082:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1b084:	3408      	adds	r4, #8
   1b086:	e7f3      	b.n	1b070 <z_sys_init_run_level+0x10>
   1b088:	0002348c 	.word	0x0002348c

0001b08c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
   1b08c:	4b0f      	ldr	r3, [pc, #60]	; (1b0cc <z_impl_device_get_binding+0x40>)
{
   1b08e:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1b090:	4c0f      	ldr	r4, [pc, #60]	; (1b0d0 <z_impl_device_get_binding+0x44>)
{
   1b092:	4605      	mov	r5, r0
   1b094:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
   1b096:	429c      	cmp	r4, r3
   1b098:	d104      	bne.n	1b0a4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
   1b09a:	4c0d      	ldr	r4, [pc, #52]	; (1b0d0 <z_impl_device_get_binding+0x44>)
   1b09c:	42b4      	cmp	r4, r6
   1b09e:	d108      	bne.n	1b0b2 <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
   1b0a0:	2400      	movs	r4, #0
   1b0a2:	e010      	b.n	1b0c6 <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
   1b0a4:	68a2      	ldr	r2, [r4, #8]
   1b0a6:	b112      	cbz	r2, 1b0ae <z_impl_device_get_binding+0x22>
   1b0a8:	6822      	ldr	r2, [r4, #0]
   1b0aa:	42aa      	cmp	r2, r5
   1b0ac:	d00b      	beq.n	1b0c6 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b0ae:	3410      	adds	r4, #16
   1b0b0:	e7f1      	b.n	1b096 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b0b2:	68a3      	ldr	r3, [r4, #8]
   1b0b4:	b90b      	cbnz	r3, 1b0ba <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1b0b6:	3410      	adds	r4, #16
   1b0b8:	e7f0      	b.n	1b09c <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1b0ba:	6821      	ldr	r1, [r4, #0]
   1b0bc:	4628      	mov	r0, r5
   1b0be:	f003 fe6d 	bl	1ed9c <strcmp>
   1b0c2:	2800      	cmp	r0, #0
   1b0c4:	d1f7      	bne.n	1b0b6 <z_impl_device_get_binding+0x2a>
}
   1b0c6:	4620      	mov	r0, r4
   1b0c8:	bd70      	pop	{r4, r5, r6, pc}
   1b0ca:	bf00      	nop
   1b0cc:	200008b0 	.word	0x200008b0
   1b0d0:	20000850 	.word	0x20000850

0001b0d4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1b0d4:	4b01      	ldr	r3, [pc, #4]	; (1b0dc <z_impl_z_errno+0x8>)
   1b0d6:	6898      	ldr	r0, [r3, #8]
}
   1b0d8:	3064      	adds	r0, #100	; 0x64
   1b0da:	4770      	bx	lr
   1b0dc:	20002a80 	.word	0x20002a80

0001b0e0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1b0e0:	b510      	push	{r4, lr}
   1b0e2:	4604      	mov	r4, r0
	z_impl_log_panic();
   1b0e4:	f7e8 fe32 	bl	3d4c <z_impl_log_panic>
   1b0e8:	4b06      	ldr	r3, [pc, #24]	; (1b104 <k_sys_fatal_error_handler+0x24>)
   1b0ea:	4907      	ldr	r1, [pc, #28]	; (1b108 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1b0ec:	4807      	ldr	r0, [pc, #28]	; (1b10c <k_sys_fatal_error_handler+0x2c>)
   1b0ee:	1ac9      	subs	r1, r1, r3
   1b0f0:	08c9      	lsrs	r1, r1, #3
   1b0f2:	0189      	lsls	r1, r1, #6
   1b0f4:	f041 0101 	orr.w	r1, r1, #1
   1b0f8:	f001 feb9 	bl	1ce6e <log_0>
	arch_system_halt(reason);
   1b0fc:	4620      	mov	r0, r4
   1b0fe:	f005 fe7b 	bl	20df8 <arch_system_halt>
   1b102:	bf00      	nop
   1b104:	00021aac 	.word	0x00021aac
   1b108:	00021bd4 	.word	0x00021bd4
   1b10c:	00025779 	.word	0x00025779

0001b110 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1b110:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b114:	4605      	mov	r5, r0
   1b116:	460f      	mov	r7, r1
	__asm__ volatile(
   1b118:	f04f 0320 	mov.w	r3, #32
   1b11c:	f3ef 8811 	mrs	r8, BASEPRI
   1b120:	f383 8811 	msr	BASEPRI, r3
   1b124:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1b128:	f000 fe06 	bl	1bd38 <z_impl_k_current_get>
   1b12c:	4c21      	ldr	r4, [pc, #132]	; (1b1b4 <z_fatal_error+0xa4>)
   1b12e:	4b22      	ldr	r3, [pc, #136]	; (1b1b8 <z_fatal_error+0xa8>)
   1b130:	1ae4      	subs	r4, r4, r3
   1b132:	2d04      	cmp	r5, #4
   1b134:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1b138:	bf96      	itet	ls
   1b13a:	4a20      	ldrls	r2, [pc, #128]	; (1b1bc <z_fatal_error+0xac>)
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1b13c:	4a20      	ldrhi	r2, [pc, #128]	; (1b1c0 <z_fatal_error+0xb0>)
   1b13e:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   1b142:	01a4      	lsls	r4, r4, #6
   1b144:	f044 0301 	orr.w	r3, r4, #1
   1b148:	4606      	mov	r6, r0
   1b14a:	f8ad 3000 	strh.w	r3, [sp]
   1b14e:	481d      	ldr	r0, [pc, #116]	; (1b1c4 <z_fatal_error+0xb4>)
   1b150:	2300      	movs	r3, #0
   1b152:	4629      	mov	r1, r5
   1b154:	f001 fec5 	bl	1cee2 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1b158:	b147      	cbz	r7, 1b16c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1b15a:	69fb      	ldr	r3, [r7, #28]
   1b15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1b160:	b123      	cbz	r3, 1b16c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1b162:	4819      	ldr	r0, [pc, #100]	; (1b1c8 <z_fatal_error+0xb8>)
   1b164:	f044 0101 	orr.w	r1, r4, #1
   1b168:	f001 fe81 	bl	1ce6e <log_0>
	const char *thread_name = k_thread_name_get(thread);
   1b16c:	4630      	mov	r0, r6
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1b16e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = k_thread_name_get(thread);
   1b172:	f006 f8f9 	bl	21368 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1b176:	b1d0      	cbz	r0, 1b1ae <z_fatal_error+0x9e>
   1b178:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
   1b17a:	4b14      	ldr	r3, [pc, #80]	; (1b1cc <z_fatal_error+0xbc>)
   1b17c:	2a00      	cmp	r2, #0
   1b17e:	bf08      	it	eq
   1b180:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
   1b182:	f7e8 fc61 	bl	3a48 <log_strdup>
   1b186:	4623      	mov	r3, r4
   1b188:	4602      	mov	r2, r0
   1b18a:	4631      	mov	r1, r6
   1b18c:	4810      	ldr	r0, [pc, #64]	; (1b1d0 <z_fatal_error+0xc0>)
   1b18e:	f001 fe8f 	bl	1ceb0 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
   1b192:	4639      	mov	r1, r7
   1b194:	4628      	mov	r0, r5
   1b196:	f7ff ffa3 	bl	1b0e0 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1b19a:	f388 8811 	msr	BASEPRI, r8
   1b19e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1b1a2:	4630      	mov	r0, r6
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1b1a4:	b002      	add	sp, #8
   1b1a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1b1aa:	f7eb b899 	b.w	62e0 <z_impl_k_thread_abort>
		thread_name = "unknown";
   1b1ae:	4807      	ldr	r0, [pc, #28]	; (1b1cc <z_fatal_error+0xbc>)
   1b1b0:	e7e7      	b.n	1b182 <z_fatal_error+0x72>
   1b1b2:	bf00      	nop
   1b1b4:	00021bd4 	.word	0x00021bd4
   1b1b8:	00021aac 	.word	0x00021aac
   1b1bc:	000234a4 	.word	0x000234a4
   1b1c0:	00025788 	.word	0x00025788
   1b1c4:	00025796 	.word	0x00025796
   1b1c8:	000257be 	.word	0x000257be
   1b1cc:	000241a1 	.word	0x000241a1
   1b1d0:	000257df 	.word	0x000257df

0001b1d4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   1b1d4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1b1d6:	4d0b      	ldr	r5, [pc, #44]	; (1b204 <idle+0x30>)
	__asm__ volatile(
   1b1d8:	f04f 0220 	mov.w	r2, #32
   1b1dc:	f3ef 8311 	mrs	r3, BASEPRI
   1b1e0:	f382 8811 	msr	BASEPRI, r2
   1b1e4:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1b1e8:	f006 f959 	bl	2149e <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b1ec:	2101      	movs	r1, #1
   1b1ee:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   1b1f0:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1b1f2:	bfd8      	it	le
   1b1f4:	4608      	movle	r0, r1
   1b1f6:	f006 f962 	bl	214be <z_set_timeout_expiry>
	_kernel.idle = ticks;
   1b1fa:	622c      	str	r4, [r5, #32]
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   1b1fc:	f7ea fda4 	bl	5d48 <arch_cpu_idle>
}
   1b200:	e7ea      	b.n	1b1d8 <idle+0x4>
   1b202:	bf00      	nop
   1b204:	20002a80 	.word	0x20002a80

0001b208 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1b208:	4802      	ldr	r0, [pc, #8]	; (1b214 <z_bss_zero+0xc>)
   1b20a:	4a03      	ldr	r2, [pc, #12]	; (1b218 <z_bss_zero+0x10>)
   1b20c:	2100      	movs	r1, #0
   1b20e:	1a12      	subs	r2, r2, r0
   1b210:	f003 be1a 	b.w	1ee48 <memset>
   1b214:	20000ae8 	.word	0x20000ae8
   1b218:	20003088 	.word	0x20003088

0001b21c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b21c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1b21e:	4806      	ldr	r0, [pc, #24]	; (1b238 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b220:	4a06      	ldr	r2, [pc, #24]	; (1b23c <z_data_copy+0x20>)
   1b222:	4907      	ldr	r1, [pc, #28]	; (1b240 <z_data_copy+0x24>)
   1b224:	1a12      	subs	r2, r2, r0
   1b226:	f003 fde4 	bl	1edf2 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b22a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b22e:	4a05      	ldr	r2, [pc, #20]	; (1b244 <z_data_copy+0x28>)
   1b230:	4905      	ldr	r1, [pc, #20]	; (1b248 <z_data_copy+0x2c>)
   1b232:	4806      	ldr	r0, [pc, #24]	; (1b24c <z_data_copy+0x30>)
   1b234:	f003 bddd 	b.w	1edf2 <memcpy>
   1b238:	20000000 	.word	0x20000000
   1b23c:	20000ae8 	.word	0x20000ae8
   1b240:	000258a4 	.word	0x000258a4
   1b244:	00000000 	.word	0x00000000
   1b248:	000258a4 	.word	0x000258a4
   1b24c:	20000000 	.word	0x20000000

0001b250 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1b250:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1b252:	4b0c      	ldr	r3, [pc, #48]	; (1b284 <bg_thread_main+0x34>)
   1b254:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b256:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1b258:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1b25a:	f7ff ff01 	bl	1b060 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1b25e:	4a0a      	ldr	r2, [pc, #40]	; (1b288 <bg_thread_main+0x38>)
   1b260:	490a      	ldr	r1, [pc, #40]	; (1b28c <bg_thread_main+0x3c>)
   1b262:	480b      	ldr	r0, [pc, #44]	; (1b290 <bg_thread_main+0x40>)
   1b264:	f001 faad 	bl	1c7c2 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1b268:	2003      	movs	r0, #3
   1b26a:	f7ff fef9 	bl	1b060 <z_sys_init_run_level>

	z_init_static_threads();
   1b26e:	f000 fe2d 	bl	1becc <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1b272:	f7e7 ff93 	bl	319c <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1b276:	4a07      	ldr	r2, [pc, #28]	; (1b294 <bg_thread_main+0x44>)
   1b278:	7b13      	ldrb	r3, [r2, #12]
   1b27a:	f023 0301 	bic.w	r3, r3, #1
   1b27e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1b280:	bd08      	pop	{r3, pc}
   1b282:	bf00      	nop
   1b284:	20003087 	.word	0x20003087
   1b288:	00023702 	.word	0x00023702
   1b28c:	00025841 	.word	0x00025841
   1b290:	00025862 	.word	0x00025862
   1b294:	20001228 	.word	0x20001228

0001b298 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1b298:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1b29c:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1b29e:	f7e8 fb2b 	bl	38f8 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1b2a2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1b398 <z_cstart+0x100>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1b2a6:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1b2aa:	4d33      	ldr	r5, [pc, #204]	; (1b378 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
   1b2ac:	4e33      	ldr	r6, [pc, #204]	; (1b37c <z_cstart+0xe4>)
   1b2ae:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b2b0:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1b39c <z_cstart+0x104>
	z_setup_new_thread(thread, stack,
   1b2b4:	4f32      	ldr	r7, [pc, #200]	; (1b380 <z_cstart+0xe8>)
   1b2b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b2ba:	2400      	movs	r4, #0
   1b2bc:	616b      	str	r3, [r5, #20]
   1b2be:	23e0      	movs	r3, #224	; 0xe0
   1b2c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1b2c4:	77ec      	strb	r4, [r5, #31]
   1b2c6:	762c      	strb	r4, [r5, #24]
   1b2c8:	766c      	strb	r4, [r5, #25]
   1b2ca:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1b2cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1b2ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1b2d2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1b2d4:	f7ea ffe2 	bl	629c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1b2d8:	f7ea fd30 	bl	5d3c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1b2dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b2e0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1b2e2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
   1b2e4:	4d27      	ldr	r5, [pc, #156]	; (1b384 <z_cstart+0xec>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1b2e6:	f240 1301 	movw	r3, #257	; 0x101
   1b2ea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1b2ee:	ab06      	add	r3, sp, #24
   1b2f0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1b2f2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1b2f4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   1b2f8:	f7ff feb2 	bl	1b060 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1b2fc:	2001      	movs	r0, #1
   1b2fe:	f7ff feaf 	bl	1b060 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b302:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1b306:	f000 fc9d 	bl	1bc44 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b30a:	4b1f      	ldr	r3, [pc, #124]	; (1b388 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   1b30c:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1b30e:	491f      	ldr	r1, [pc, #124]	; (1b38c <z_cstart+0xf4>)
   1b310:	9305      	str	r3, [sp, #20]
   1b312:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1b316:	4653      	mov	r3, sl
   1b318:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1b31c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1b320:	9400      	str	r4, [sp, #0]
   1b322:	4630      	mov	r0, r6
   1b324:	f000 fd76 	bl	1be14 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b328:	7b73      	ldrb	r3, [r6, #13]
   1b32a:	4680      	mov	r8, r0
   1b32c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1b330:	4630      	mov	r0, r6
   1b332:	7373      	strb	r3, [r6, #13]
   1b334:	f005 ff4a 	bl	211cc <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1b338:	230f      	movs	r3, #15
   1b33a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1b33e:	4914      	ldr	r1, [pc, #80]	; (1b390 <z_cstart+0xf8>)
   1b340:	4b14      	ldr	r3, [pc, #80]	; (1b394 <z_cstart+0xfc>)
   1b342:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1b346:	e9cd b404 	strd	fp, r4, [sp, #16]
   1b34a:	e9cd 4400 	strd	r4, r4, [sp]
   1b34e:	4638      	mov	r0, r7
   1b350:	f000 fd60 	bl	1be14 <z_setup_new_thread>
   1b354:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1b356:	60ef      	str	r7, [r5, #12]
   1b358:	f023 0304 	bic.w	r3, r3, #4
   1b35c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1b35e:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1b362:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1b366:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1b368:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1b36c:	4652      	mov	r2, sl
   1b36e:	4641      	mov	r1, r8
   1b370:	4630      	mov	r0, r6
   1b372:	f7ea fccb 	bl	5d0c <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1b376:	bf00      	nop
   1b378:	e000ed00 	.word	0xe000ed00
   1b37c:	20001228 	.word	0x20001228
   1b380:	200011a8 	.word	0x200011a8
   1b384:	20002a80 	.word	0x20002a80
   1b388:	00025889 	.word	0x00025889
   1b38c:	20004698 	.word	0x20004698
   1b390:	20004a98 	.word	0x20004a98
   1b394:	0001b1d5 	.word	0x0001b1d5
   1b398:	200053d8 	.word	0x200053d8
   1b39c:	0001b251 	.word	0x0001b251

0001b3a0 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
   1b3a0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b3a2:	4c06      	ldr	r4, [pc, #24]	; (1b3bc <statics_init+0x1c>)
   1b3a4:	4d06      	ldr	r5, [pc, #24]	; (1b3c0 <statics_init+0x20>)
   1b3a6:	42ac      	cmp	r4, r5
   1b3a8:	d301      	bcc.n	1b3ae <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1b3aa:	2000      	movs	r0, #0
   1b3ac:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1b3ae:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1b3b2:	4620      	mov	r0, r4
   1b3b4:	f005 fd2b 	bl	20e0e <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1b3b8:	3414      	adds	r4, #20
   1b3ba:	e7f4      	b.n	1b3a6 <statics_init+0x6>
   1b3bc:	20000904 	.word	0x20000904
   1b3c0:	20000904 	.word	0x20000904

0001b3c4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   1b3c4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b3c6:	4b0e      	ldr	r3, [pc, #56]	; (1b400 <init_mem_slab_module+0x3c>)
   1b3c8:	4c0e      	ldr	r4, [pc, #56]	; (1b404 <init_mem_slab_module+0x40>)
   1b3ca:	42a3      	cmp	r3, r4
   1b3cc:	d301      	bcc.n	1b3d2 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1b3ce:	2000      	movs	r0, #0
	return rc;
}
   1b3d0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1b3d2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1b3d6:	ea41 0200 	orr.w	r2, r1, r0
   1b3da:	f012 0203 	ands.w	r2, r2, #3
   1b3de:	d10b      	bne.n	1b3f8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1b3e0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1b3e2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b3e4:	42aa      	cmp	r2, r5
   1b3e6:	d101      	bne.n	1b3ec <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1b3e8:	331c      	adds	r3, #28
   1b3ea:	e7ee      	b.n	1b3ca <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1b3ec:	695e      	ldr	r6, [r3, #20]
   1b3ee:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1b3f0:	3201      	adds	r2, #1
		slab->free_list = p;
   1b3f2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1b3f4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1b3f6:	e7f5      	b.n	1b3e4 <init_mem_slab_module+0x20>
		return -EINVAL;
   1b3f8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   1b3fc:	e7e8      	b.n	1b3d0 <init_mem_slab_module+0xc>
   1b3fe:	bf00      	nop
   1b400:	200008b0 	.word	0x200008b0
   1b404:	20000904 	.word	0x20000904

0001b408 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1b408:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   1b40a:	460c      	mov	r4, r1
   1b40c:	4616      	mov	r6, r2
   1b40e:	461f      	mov	r7, r3
   1b410:	f04f 0320 	mov.w	r3, #32
   1b414:	f3ef 8111 	mrs	r1, BASEPRI
   1b418:	f383 8811 	msr	BASEPRI, r3
   1b41c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1b420:	6943      	ldr	r3, [r0, #20]
   1b422:	b15b      	cbz	r3, 1b43c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   1b424:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1b426:	681b      	ldr	r3, [r3, #0]
   1b428:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1b42a:	6983      	ldr	r3, [r0, #24]
   1b42c:	3301      	adds	r3, #1
   1b42e:	6183      	str	r3, [r0, #24]
		result = 0;
   1b430:	2000      	movs	r0, #0
	__asm__ volatile(
   1b432:	f381 8811 	msr	BASEPRI, r1
   1b436:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1b43a:	e011      	b.n	1b460 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b43c:	ea56 0207 	orrs.w	r2, r6, r7
   1b440:	d103      	bne.n	1b44a <k_mem_slab_alloc+0x42>
		*mem = NULL;
   1b442:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   1b444:	f06f 000b 	mvn.w	r0, #11
   1b448:	e7f3      	b.n	1b432 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1b44a:	4602      	mov	r2, r0
   1b44c:	e9cd 6700 	strd	r6, r7, [sp]
   1b450:	4804      	ldr	r0, [pc, #16]	; (1b464 <k_mem_slab_alloc+0x5c>)
   1b452:	f000 fb9f 	bl	1bb94 <z_pend_curr>
		if (result == 0) {
   1b456:	b918      	cbnz	r0, 1b460 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   1b458:	4b03      	ldr	r3, [pc, #12]	; (1b468 <k_mem_slab_alloc+0x60>)
   1b45a:	689b      	ldr	r3, [r3, #8]
   1b45c:	695b      	ldr	r3, [r3, #20]
   1b45e:	6023      	str	r3, [r4, #0]
}
   1b460:	b002      	add	sp, #8
   1b462:	bdd0      	pop	{r4, r6, r7, pc}
   1b464:	20003088 	.word	0x20003088
   1b468:	20002a80 	.word	0x20002a80

0001b46c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1b46c:	b570      	push	{r4, r5, r6, lr}
   1b46e:	4604      	mov	r4, r0
   1b470:	460d      	mov	r5, r1
	__asm__ volatile(
   1b472:	f04f 0320 	mov.w	r3, #32
   1b476:	f3ef 8611 	mrs	r6, BASEPRI
   1b47a:	f383 8811 	msr	BASEPRI, r3
   1b47e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1b482:	f005 ff19 	bl	212b8 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   1b486:	b158      	cbz	r0, 1b4a0 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1b488:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1b48a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1b48c:	2100      	movs	r1, #0
   1b48e:	67c1      	str	r1, [r0, #124]	; 0x7c
		z_ready_thread(pending_thread);
   1b490:	f005 fe9c 	bl	211cc <z_ready_thread>
		z_reschedule(&lock, key);
   1b494:	4631      	mov	r1, r6
   1b496:	4809      	ldr	r0, [pc, #36]	; (1b4bc <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   1b498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   1b49c:	f005 be4e 	b.w	2113c <z_reschedule>
		**(char ***)mem = slab->free_list;
   1b4a0:	682b      	ldr	r3, [r5, #0]
   1b4a2:	6962      	ldr	r2, [r4, #20]
   1b4a4:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   1b4a6:	682b      	ldr	r3, [r5, #0]
   1b4a8:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   1b4aa:	69a3      	ldr	r3, [r4, #24]
   1b4ac:	3b01      	subs	r3, #1
   1b4ae:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1b4b0:	f386 8811 	msr	BASEPRI, r6
   1b4b4:	f3bf 8f6f 	isb	sy
}
   1b4b8:	bd70      	pop	{r4, r5, r6, pc}
   1b4ba:	bf00      	nop
   1b4bc:	20003088 	.word	0x20003088

0001b4c0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1b4c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b4c4:	4604      	mov	r4, r0
   1b4c6:	4616      	mov	r6, r2
   1b4c8:	461f      	mov	r7, r3
	__asm__ volatile(
   1b4ca:	f04f 0320 	mov.w	r3, #32
   1b4ce:	f3ef 8811 	mrs	r8, BASEPRI
   1b4d2:	f383 8811 	msr	BASEPRI, r3
   1b4d6:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_void(SYS_TRACE_ID_MUTEX_LOCK);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1b4da:	68c3      	ldr	r3, [r0, #12]
   1b4dc:	4a32      	ldr	r2, [pc, #200]	; (1b5a8 <z_impl_k_mutex_lock+0xe8>)
   1b4de:	b16b      	cbz	r3, 1b4fc <z_impl_k_mutex_lock+0x3c>
   1b4e0:	6880      	ldr	r0, [r0, #8]
   1b4e2:	6891      	ldr	r1, [r2, #8]
   1b4e4:	4288      	cmp	r0, r1
   1b4e6:	d019      	beq.n	1b51c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1b4e8:	ea56 0307 	orrs.w	r3, r6, r7
   1b4ec:	d118      	bne.n	1b520 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1b4ee:	f388 8811 	msr	BASEPRI, r8
   1b4f2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1b4f6:	f06f 000f 	mvn.w	r0, #15
   1b4fa:	e00c      	b.n	1b516 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1b4fc:	6891      	ldr	r1, [r2, #8]
   1b4fe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1b502:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1b504:	3301      	adds	r3, #1
   1b506:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1b508:	6893      	ldr	r3, [r2, #8]
   1b50a:	60a3      	str	r3, [r4, #8]
   1b50c:	f388 8811 	msr	BASEPRI, r8
   1b510:	f3bf 8f6f 	isb	sy
		return 0;
   1b514:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1b516:	b002      	add	sp, #8
   1b518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1b51c:	6921      	ldr	r1, [r4, #16]
   1b51e:	e7f0      	b.n	1b502 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1b520:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b524:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1b528:	4299      	cmp	r1, r3
   1b52a:	bfa8      	it	ge
   1b52c:	4619      	movge	r1, r3
   1b52e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1b532:	4299      	cmp	r1, r3
   1b534:	da2c      	bge.n	1b590 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   1b536:	f000 fb41 	bl	1bbbc <z_set_prio>
   1b53a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1b53c:	e9cd 6700 	strd	r6, r7, [sp]
   1b540:	481a      	ldr	r0, [pc, #104]	; (1b5ac <z_impl_k_mutex_lock+0xec>)
   1b542:	4622      	mov	r2, r4
   1b544:	4641      	mov	r1, r8
   1b546:	f000 fb25 	bl	1bb94 <z_pend_curr>
	if (got_mutex == 0) {
   1b54a:	2800      	cmp	r0, #0
   1b54c:	d0e3      	beq.n	1b516 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1b54e:	f04f 0320 	mov.w	r3, #32
   1b552:	f3ef 8611 	mrs	r6, BASEPRI
   1b556:	f383 8811 	msr	BASEPRI, r3
   1b55a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1b55e:	6823      	ldr	r3, [r4, #0]
   1b560:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b562:	42a3      	cmp	r3, r4
   1b564:	d007      	beq.n	1b576 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1b566:	b133      	cbz	r3, 1b576 <z_impl_k_mutex_lock+0xb6>
   1b568:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1b56c:	4299      	cmp	r1, r3
   1b56e:	bfa8      	it	ge
   1b570:	4619      	movge	r1, r3
   1b572:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b576:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b578:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b57c:	4299      	cmp	r1, r3
   1b57e:	d109      	bne.n	1b594 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   1b580:	b16d      	cbz	r5, 1b59e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1b582:	480a      	ldr	r0, [pc, #40]	; (1b5ac <z_impl_k_mutex_lock+0xec>)
   1b584:	4631      	mov	r1, r6
   1b586:	f005 fdd9 	bl	2113c <z_reschedule>
	return -EAGAIN;
   1b58a:	f06f 000a 	mvn.w	r0, #10
   1b58e:	e7c2      	b.n	1b516 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1b590:	2500      	movs	r5, #0
   1b592:	e7d3      	b.n	1b53c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   1b594:	f000 fb12 	bl	1bbbc <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1b598:	2800      	cmp	r0, #0
   1b59a:	d1f2      	bne.n	1b582 <z_impl_k_mutex_lock+0xc2>
   1b59c:	e7f0      	b.n	1b580 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   1b59e:	f386 8811 	msr	BASEPRI, r6
   1b5a2:	f3bf 8f6f 	isb	sy
   1b5a6:	e7f0      	b.n	1b58a <z_impl_k_mutex_lock+0xca>
   1b5a8:	20002a80 	.word	0x20002a80
   1b5ac:	20003088 	.word	0x20003088

0001b5b0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1b5b0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1b5b2:	6883      	ldr	r3, [r0, #8]
{
   1b5b4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1b5b6:	2b00      	cmp	r3, #0
   1b5b8:	d036      	beq.n	1b628 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1b5ba:	4a1e      	ldr	r2, [pc, #120]	; (1b634 <z_impl_k_mutex_unlock+0x84>)
   1b5bc:	6892      	ldr	r2, [r2, #8]
   1b5be:	4293      	cmp	r3, r2
   1b5c0:	d135      	bne.n	1b62e <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1b5c2:	7bda      	ldrb	r2, [r3, #15]
   1b5c4:	3a01      	subs	r2, #1
   1b5c6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1b5c8:	68c3      	ldr	r3, [r0, #12]
   1b5ca:	2b01      	cmp	r3, #1
   1b5cc:	d005      	beq.n	1b5da <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1b5ce:	3b01      	subs	r3, #1
   1b5d0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1b5d2:	f000 f8f7 	bl	1b7c4 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1b5d6:	2000      	movs	r0, #0
}
   1b5d8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1b5da:	f04f 0320 	mov.w	r3, #32
   1b5de:	f3ef 8511 	mrs	r5, BASEPRI
   1b5e2:	f383 8811 	msr	BASEPRI, r3
   1b5e6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1b5ea:	6901      	ldr	r1, [r0, #16]
   1b5ec:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   1b5ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1b5f2:	4299      	cmp	r1, r3
   1b5f4:	d001      	beq.n	1b5fa <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   1b5f6:	f000 fae1 	bl	1bbbc <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1b5fa:	4620      	mov	r0, r4
   1b5fc:	f005 fe5c 	bl	212b8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1b600:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1b602:	b158      	cbz	r0, 1b61c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   1b604:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1b608:	6122      	str	r2, [r4, #16]
   1b60a:	2200      	movs	r2, #0
   1b60c:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1b60e:	f005 fddd 	bl	211cc <z_ready_thread>
		z_reschedule(&lock, key);
   1b612:	4809      	ldr	r0, [pc, #36]	; (1b638 <z_impl_k_mutex_unlock+0x88>)
   1b614:	4629      	mov	r1, r5
   1b616:	f005 fd91 	bl	2113c <z_reschedule>
   1b61a:	e7da      	b.n	1b5d2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1b61c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1b61e:	f385 8811 	msr	BASEPRI, r5
   1b622:	f3bf 8f6f 	isb	sy
   1b626:	e7d4      	b.n	1b5d2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1b628:	f06f 0015 	mvn.w	r0, #21
   1b62c:	e7d4      	b.n	1b5d8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1b62e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b632:	e7d1      	b.n	1b5d8 <z_impl_k_mutex_unlock+0x28>
   1b634:	20002a80 	.word	0x20002a80
   1b638:	20003088 	.word	0x20003088

0001b63c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1b63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1b63e:	4616      	mov	r6, r2
   1b640:	461f      	mov	r7, r3
	__asm__ volatile(
   1b642:	f04f 0320 	mov.w	r3, #32
   1b646:	f3ef 8511 	mrs	r5, BASEPRI
   1b64a:	f383 8811 	msr	BASEPRI, r3
   1b64e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   1b652:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1b654:	b19c      	cbz	r4, 1b67e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b656:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b658:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1b65a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1b65e:	4294      	cmp	r4, r2
	list->head = node;
   1b660:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1b662:	bf08      	it	eq
   1b664:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1b666:	2101      	movs	r1, #1
   1b668:	4620      	mov	r0, r4
   1b66a:	f005 fcd7 	bl	2101c <z_queue_node_peek>
   1b66e:	4604      	mov	r4, r0
	__asm__ volatile(
   1b670:	f385 8811 	msr	BASEPRI, r5
   1b674:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1b678:	4620      	mov	r0, r4
   1b67a:	b003      	add	sp, #12
   1b67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b67e:	ea56 0307 	orrs.w	r3, r6, r7
   1b682:	d0f5      	beq.n	1b670 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1b684:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1b688:	e9cd 6700 	strd	r6, r7, [sp]
   1b68c:	4629      	mov	r1, r5
   1b68e:	4610      	mov	r0, r2
   1b690:	f000 fa80 	bl	1bb94 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1b694:	2800      	cmp	r0, #0
   1b696:	d1ef      	bne.n	1b678 <z_impl_k_queue_get+0x3c>
   1b698:	4b01      	ldr	r3, [pc, #4]	; (1b6a0 <z_impl_k_queue_get+0x64>)
   1b69a:	689b      	ldr	r3, [r3, #8]
   1b69c:	695c      	ldr	r4, [r3, #20]
   1b69e:	e7eb      	b.n	1b678 <z_impl_k_queue_get+0x3c>
   1b6a0:	20002a80 	.word	0x20002a80

0001b6a4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1b6a4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1b6a6:	4c08      	ldr	r4, [pc, #32]	; (1b6c8 <z_reset_time_slice+0x24>)
   1b6a8:	6823      	ldr	r3, [r4, #0]
   1b6aa:	b15b      	cbz	r3, 1b6c4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b6ac:	f7ea f820 	bl	56f0 <z_clock_elapsed>
   1b6b0:	4603      	mov	r3, r0
   1b6b2:	6820      	ldr	r0, [r4, #0]
   1b6b4:	4a05      	ldr	r2, [pc, #20]	; (1b6cc <z_reset_time_slice+0x28>)
   1b6b6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1b6b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1b6bc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1b6be:	2100      	movs	r1, #0
   1b6c0:	f005 befd 	b.w	214be <z_set_timeout_expiry>
}
   1b6c4:	bd10      	pop	{r4, pc}
   1b6c6:	bf00      	nop
   1b6c8:	20002ab8 	.word	0x20002ab8
   1b6cc:	20002a80 	.word	0x20002a80

0001b6d0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1b6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b6d2:	4605      	mov	r5, r0
   1b6d4:	460c      	mov	r4, r1
	__asm__ volatile(
   1b6d6:	f04f 0320 	mov.w	r3, #32
   1b6da:	f3ef 8611 	mrs	r6, BASEPRI
   1b6de:	f383 8811 	msr	BASEPRI, r3
   1b6e2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1b6e6:	4b0d      	ldr	r3, [pc, #52]	; (1b71c <k_sched_time_slice_set+0x4c>)
   1b6e8:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1b6ea:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1b6ee:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b6f2:	2100      	movs	r1, #0
   1b6f4:	611a      	str	r2, [r3, #16]
   1b6f6:	fbe7 0105 	umlal	r0, r1, r7, r5
   1b6fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b6fe:	2300      	movs	r3, #0
   1b700:	f7e4 fcee 	bl	e0 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1b704:	4b06      	ldr	r3, [pc, #24]	; (1b720 <k_sched_time_slice_set+0x50>)
   1b706:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1b708:	4b06      	ldr	r3, [pc, #24]	; (1b724 <k_sched_time_slice_set+0x54>)
   1b70a:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   1b70c:	f7ff ffca 	bl	1b6a4 <z_reset_time_slice>
	__asm__ volatile(
   1b710:	f386 8811 	msr	BASEPRI, r6
   1b714:	f3bf 8f6f 	isb	sy
	}
}
   1b718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b71a:	bf00      	nop
   1b71c:	20002a80 	.word	0x20002a80
   1b720:	20002ab8 	.word	0x20002ab8
   1b724:	20002ab4 	.word	0x20002ab4

0001b728 <k_sched_lock>:
	__asm__ volatile(
   1b728:	f04f 0320 	mov.w	r3, #32
   1b72c:	f3ef 8111 	mrs	r1, BASEPRI
   1b730:	f383 8811 	msr	BASEPRI, r3
   1b734:	f3bf 8f6f 	isb	sy
   1b738:	4b04      	ldr	r3, [pc, #16]	; (1b74c <k_sched_lock+0x24>)
   1b73a:	689a      	ldr	r2, [r3, #8]
   1b73c:	7bd3      	ldrb	r3, [r2, #15]
   1b73e:	3b01      	subs	r3, #1
   1b740:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1b742:	f381 8811 	msr	BASEPRI, r1
   1b746:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1b74a:	4770      	bx	lr
   1b74c:	20002a80 	.word	0x20002a80

0001b750 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1b750:	4b09      	ldr	r3, [pc, #36]	; (1b778 <z_priq_dumb_remove+0x28>)
   1b752:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1b756:	4282      	cmp	r2, r0
   1b758:	d105      	bne.n	1b766 <z_priq_dumb_remove+0x16>
   1b75a:	689b      	ldr	r3, [r3, #8]
   1b75c:	428b      	cmp	r3, r1
   1b75e:	d102      	bne.n	1b766 <z_priq_dumb_remove+0x16>
   1b760:	7b4b      	ldrb	r3, [r1, #13]
   1b762:	06db      	lsls	r3, r3, #27
   1b764:	d106      	bne.n	1b774 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1b766:	e9d1 3200 	ldrd	r3, r2, [r1]
   1b76a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1b76c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b76e:	2300      	movs	r3, #0
	node->prev = NULL;
   1b770:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1b774:	4770      	bx	lr
   1b776:	bf00      	nop
   1b778:	20002a80 	.word	0x20002a80

0001b77c <update_cache>:
{
   1b77c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b77e:	4c10      	ldr	r4, [pc, #64]	; (1b7c0 <update_cache+0x44>)
{
   1b780:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b782:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1b786:	f005 fd17 	bl	211b8 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b78a:	68a3      	ldr	r3, [r4, #8]
   1b78c:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
   1b78e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1b790:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1b792:	bf44      	itt	mi
   1b794:	f041 0108 	orrmi.w	r1, r1, #8
   1b798:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1b79a:	b905      	cbnz	r5, 1b79e <update_cache+0x22>
   1b79c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
   1b79e:	b94e      	cbnz	r6, 1b7b4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
   1b7a0:	7b5a      	ldrb	r2, [r3, #13]
   1b7a2:	06d2      	lsls	r2, r2, #27
   1b7a4:	d106      	bne.n	1b7b4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1b7a6:	69aa      	ldr	r2, [r5, #24]
   1b7a8:	b922      	cbnz	r2, 1b7b4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
   1b7aa:	89da      	ldrh	r2, [r3, #14]
   1b7ac:	2a7f      	cmp	r2, #127	; 0x7f
   1b7ae:	d901      	bls.n	1b7b4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
   1b7b0:	6263      	str	r3, [r4, #36]	; 0x24
}
   1b7b2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
   1b7b4:	42ab      	cmp	r3, r5
   1b7b6:	d001      	beq.n	1b7bc <update_cache+0x40>
			z_reset_time_slice();
   1b7b8:	f7ff ff74 	bl	1b6a4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1b7bc:	6265      	str	r5, [r4, #36]	; 0x24
}
   1b7be:	e7f8      	b.n	1b7b2 <update_cache+0x36>
   1b7c0:	20002a80 	.word	0x20002a80

0001b7c4 <k_sched_unlock>:
{
   1b7c4:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b7c6:	f04f 0320 	mov.w	r3, #32
   1b7ca:	f3ef 8411 	mrs	r4, BASEPRI
   1b7ce:	f383 8811 	msr	BASEPRI, r3
   1b7d2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1b7d6:	4b08      	ldr	r3, [pc, #32]	; (1b7f8 <k_sched_unlock+0x34>)
   1b7d8:	689a      	ldr	r2, [r3, #8]
   1b7da:	7bd3      	ldrb	r3, [r2, #15]
   1b7dc:	3301      	adds	r3, #1
   1b7de:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1b7e0:	2000      	movs	r0, #0
   1b7e2:	f7ff ffcb 	bl	1b77c <update_cache>
	__asm__ volatile(
   1b7e6:	f384 8811 	msr	BASEPRI, r4
   1b7ea:	f3bf 8f6f 	isb	sy
}
   1b7ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1b7f2:	f005 bcba 	b.w	2116a <z_reschedule_unlocked>
   1b7f6:	bf00      	nop
   1b7f8:	20002a80 	.word	0x20002a80

0001b7fc <ready_thread>:
{
   1b7fc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1b7fe:	7b43      	ldrb	r3, [r0, #13]
   1b800:	06db      	lsls	r3, r3, #27
   1b802:	d12a      	bne.n	1b85a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
   1b804:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
   1b806:	bb43      	cbnz	r3, 1b85a <ready_thread+0x5e>
	return list->head == list;
   1b808:	4a15      	ldr	r2, [pc, #84]	; (1b860 <ready_thread+0x64>)
   1b80a:	4611      	mov	r1, r2
   1b80c:	f851 4f28 	ldr.w	r4, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b810:	428c      	cmp	r4, r1
   1b812:	bf18      	it	ne
   1b814:	4623      	movne	r3, r4
   1b816:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b818:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
   1b81a:	bf38      	it	cc
   1b81c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b81e:	b1b3      	cbz	r3, 1b84e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b820:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1b824:	f993 500e 	ldrsb.w	r5, [r3, #14]
   1b828:	42ae      	cmp	r6, r5
   1b82a:	db03      	blt.n	1b834 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
   1b82c:	42a3      	cmp	r3, r4
   1b82e:	d00e      	beq.n	1b84e <ready_thread+0x52>
   1b830:	681b      	ldr	r3, [r3, #0]
   1b832:	e7f4      	b.n	1b81e <ready_thread+0x22>
	node->prev = successor->prev;
   1b834:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b836:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1b83a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1b83c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1b83e:	7b43      	ldrb	r3, [r0, #13]
   1b840:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b844:	7343      	strb	r3, [r0, #13]
}
   1b846:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1b848:	2000      	movs	r0, #0
   1b84a:	f7ff bf97 	b.w	1b77c <update_cache>
	node->prev = list->tail;
   1b84e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   1b852:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b854:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1b856:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1b858:	e7f1      	b.n	1b83e <ready_thread+0x42>
}
   1b85a:	bc70      	pop	{r4, r5, r6}
   1b85c:	4770      	bx	lr
   1b85e:	bf00      	nop
   1b860:	20002a80 	.word	0x20002a80

0001b864 <z_sched_start>:
{
   1b864:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b866:	f04f 0220 	mov.w	r2, #32
   1b86a:	f3ef 8411 	mrs	r4, BASEPRI
   1b86e:	f382 8811 	msr	BASEPRI, r2
   1b872:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   1b876:	7b42      	ldrb	r2, [r0, #13]
   1b878:	0751      	lsls	r1, r2, #29
   1b87a:	d404      	bmi.n	1b886 <z_sched_start+0x22>
	__asm__ volatile(
   1b87c:	f384 8811 	msr	BASEPRI, r4
   1b880:	f3bf 8f6f 	isb	sy
}
   1b884:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1b886:	f022 0204 	bic.w	r2, r2, #4
   1b88a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1b88c:	f7ff ffb6 	bl	1b7fc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1b890:	4621      	mov	r1, r4
   1b892:	4802      	ldr	r0, [pc, #8]	; (1b89c <z_sched_start+0x38>)
}
   1b894:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1b898:	f005 bc50 	b.w	2113c <z_reschedule>
   1b89c:	20003088 	.word	0x20003088

0001b8a0 <z_move_thread_to_end_of_prio_q>:
{
   1b8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b8a2:	4601      	mov	r1, r0
	__asm__ volatile(
   1b8a4:	f04f 0320 	mov.w	r3, #32
   1b8a8:	f3ef 8411 	mrs	r4, BASEPRI
   1b8ac:	f383 8811 	msr	BASEPRI, r3
   1b8b0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b8b4:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1b8b8:	2b00      	cmp	r3, #0
   1b8ba:	da02      	bge.n	1b8c2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b8bc:	4819      	ldr	r0, [pc, #100]	; (1b924 <z_move_thread_to_end_of_prio_q+0x84>)
   1b8be:	f7ff ff47 	bl	1b750 <z_priq_dumb_remove>
	return list->head == list;
   1b8c2:	4a19      	ldr	r2, [pc, #100]	; (1b928 <z_move_thread_to_end_of_prio_q+0x88>)
   1b8c4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b8c6:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
	return list->head == list;
   1b8c8:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b8cc:	4283      	cmp	r3, r0
   1b8ce:	bf08      	it	eq
   1b8d0:	2300      	moveq	r3, #0
   1b8d2:	2b00      	cmp	r3, #0
   1b8d4:	bf38      	it	cc
   1b8d6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1b8d8:	b1eb      	cbz	r3, 1b916 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
   1b8da:	f991 700e 	ldrsb.w	r7, [r1, #14]
   1b8de:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1b8e2:	42b7      	cmp	r7, r6
   1b8e4:	db03      	blt.n	1b8ee <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1b8e6:	429d      	cmp	r5, r3
   1b8e8:	d015      	beq.n	1b916 <z_move_thread_to_end_of_prio_q+0x76>
   1b8ea:	681b      	ldr	r3, [r3, #0]
   1b8ec:	e7f4      	b.n	1b8d8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
   1b8ee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1b8f0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1b8f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1b8f6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1b8f8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
   1b8fa:	6890      	ldr	r0, [r2, #8]
   1b8fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1b900:	734b      	strb	r3, [r1, #13]
   1b902:	1a43      	subs	r3, r0, r1
   1b904:	4258      	negs	r0, r3
   1b906:	4158      	adcs	r0, r3
   1b908:	f7ff ff38 	bl	1b77c <update_cache>
	__asm__ volatile(
   1b90c:	f384 8811 	msr	BASEPRI, r4
   1b910:	f3bf 8f6f 	isb	sy
}
   1b914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
   1b916:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
   1b91a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   1b91c:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1b91e:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1b920:	e7ea      	b.n	1b8f8 <z_move_thread_to_end_of_prio_q+0x58>
   1b922:	bf00      	nop
   1b924:	20002aa8 	.word	0x20002aa8
   1b928:	20002a80 	.word	0x20002a80

0001b92c <z_time_slice>:
{
   1b92c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
   1b92e:	4a15      	ldr	r2, [pc, #84]	; (1b984 <z_time_slice+0x58>)
   1b930:	4b15      	ldr	r3, [pc, #84]	; (1b988 <z_time_slice+0x5c>)
   1b932:	6814      	ldr	r4, [r2, #0]
{
   1b934:	4601      	mov	r1, r0
	if (pending_current == _current) {
   1b936:	6898      	ldr	r0, [r3, #8]
   1b938:	42a0      	cmp	r0, r4
   1b93a:	461c      	mov	r4, r3
   1b93c:	d103      	bne.n	1b946 <z_time_slice+0x1a>
}
   1b93e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
   1b942:	f7ff beaf 	b.w	1b6a4 <z_reset_time_slice>
	pending_current = NULL;
   1b946:	2500      	movs	r5, #0
   1b948:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1b94a:	4a10      	ldr	r2, [pc, #64]	; (1b98c <z_time_slice+0x60>)
   1b94c:	6812      	ldr	r2, [r2, #0]
   1b94e:	b1b2      	cbz	r2, 1b97e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1b950:	89c2      	ldrh	r2, [r0, #14]
   1b952:	2a7f      	cmp	r2, #127	; 0x7f
   1b954:	d813      	bhi.n	1b97e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1b956:	4a0e      	ldr	r2, [pc, #56]	; (1b990 <z_time_slice+0x64>)
   1b958:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1b95c:	6812      	ldr	r2, [r2, #0]
   1b95e:	4295      	cmp	r5, r2
   1b960:	db0d      	blt.n	1b97e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
   1b962:	4a0c      	ldr	r2, [pc, #48]	; (1b994 <z_time_slice+0x68>)
   1b964:	4290      	cmp	r0, r2
   1b966:	d00a      	beq.n	1b97e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
   1b968:	6982      	ldr	r2, [r0, #24]
   1b96a:	b942      	cbnz	r2, 1b97e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
   1b96c:	691a      	ldr	r2, [r3, #16]
   1b96e:	428a      	cmp	r2, r1
   1b970:	dc02      	bgt.n	1b978 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
   1b972:	f7ff ff95 	bl	1b8a0 <z_move_thread_to_end_of_prio_q>
   1b976:	e7e2      	b.n	1b93e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
   1b978:	1a52      	subs	r2, r2, r1
   1b97a:	611a      	str	r2, [r3, #16]
}
   1b97c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
   1b97e:	2300      	movs	r3, #0
   1b980:	6123      	str	r3, [r4, #16]
   1b982:	e7fb      	b.n	1b97c <z_time_slice+0x50>
   1b984:	20002ab0 	.word	0x20002ab0
   1b988:	20002a80 	.word	0x20002a80
   1b98c:	20002ab8 	.word	0x20002ab8
   1b990:	20002ab4 	.word	0x20002ab4
   1b994:	200011a8 	.word	0x200011a8

0001b998 <z_impl_k_thread_suspend>:
{
   1b998:	b570      	push	{r4, r5, r6, lr}
   1b99a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1b99c:	3018      	adds	r0, #24
   1b99e:	f005 fd68 	bl	21472 <z_abort_timeout>
	__asm__ volatile(
   1b9a2:	f04f 0320 	mov.w	r3, #32
   1b9a6:	f3ef 8611 	mrs	r6, BASEPRI
   1b9aa:	f383 8811 	msr	BASEPRI, r3
   1b9ae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1b9b2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1b9b6:	2b00      	cmp	r3, #0
   1b9b8:	da07      	bge.n	1b9ca <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1b9ba:	480f      	ldr	r0, [pc, #60]	; (1b9f8 <z_impl_k_thread_suspend+0x60>)
   1b9bc:	4621      	mov	r1, r4
   1b9be:	f7ff fec7 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1b9c2:	7b63      	ldrb	r3, [r4, #13]
   1b9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1b9c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1b9ca:	4d0c      	ldr	r5, [pc, #48]	; (1b9fc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b9cc:	7b63      	ldrb	r3, [r4, #13]
   1b9ce:	68a8      	ldr	r0, [r5, #8]
   1b9d0:	f043 0310 	orr.w	r3, r3, #16
   1b9d4:	7363      	strb	r3, [r4, #13]
   1b9d6:	1b03      	subs	r3, r0, r4
   1b9d8:	4258      	negs	r0, r3
   1b9da:	4158      	adcs	r0, r3
   1b9dc:	f7ff fece 	bl	1b77c <update_cache>
	__asm__ volatile(
   1b9e0:	f386 8811 	msr	BASEPRI, r6
   1b9e4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1b9e8:	68ab      	ldr	r3, [r5, #8]
   1b9ea:	42a3      	cmp	r3, r4
   1b9ec:	d103      	bne.n	1b9f6 <z_impl_k_thread_suspend+0x5e>
}
   1b9ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1b9f2:	f005 bbba 	b.w	2116a <z_reschedule_unlocked>
}
   1b9f6:	bd70      	pop	{r4, r5, r6, pc}
   1b9f8:	20002aa8 	.word	0x20002aa8
   1b9fc:	20002a80 	.word	0x20002a80

0001ba00 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
   1ba00:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
   1ba02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba06:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   1ba08:	b103      	cbz	r3, 1ba0c <z_thread_single_abort+0xc>
		thread->fn_abort();
   1ba0a:	4798      	blx	r3
   1ba0c:	f104 0018 	add.w	r0, r4, #24
   1ba10:	f005 fd2f 	bl	21472 <z_abort_timeout>
	__asm__ volatile(
   1ba14:	f04f 0320 	mov.w	r3, #32
   1ba18:	f3ef 8611 	mrs	r6, BASEPRI
   1ba1c:	f383 8811 	msr	BASEPRI, r3
   1ba20:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1ba24:	7b63      	ldrb	r3, [r4, #13]
   1ba26:	06d8      	lsls	r0, r3, #27
   1ba28:	d123      	bne.n	1ba72 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
   1ba2a:	69a2      	ldr	r2, [r4, #24]
   1ba2c:	bb0a      	cbnz	r2, 1ba72 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
   1ba2e:	0619      	lsls	r1, r3, #24
   1ba30:	d507      	bpl.n	1ba42 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
   1ba32:	481f      	ldr	r0, [pc, #124]	; (1bab0 <z_thread_single_abort+0xb0>)
   1ba34:	4621      	mov	r1, r4
   1ba36:	f7ff fe8b 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ba3a:	7b63      	ldrb	r3, [r4, #13]
   1ba3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ba40:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1ba42:	4b1c      	ldr	r3, [pc, #112]	; (1bab4 <z_thread_single_abort+0xb4>)
   1ba44:	6898      	ldr	r0, [r3, #8]
   1ba46:	1b02      	subs	r2, r0, r4
   1ba48:	4250      	negs	r0, r2
   1ba4a:	4150      	adcs	r0, r2
   1ba4c:	f7ff fe96 	bl	1b77c <update_cache>
		thread->base.thread_state |= mask;
   1ba50:	7b63      	ldrb	r3, [r4, #13]
   1ba52:	f043 0308 	orr.w	r3, r3, #8
   1ba56:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ba58:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1ba5c:	2700      	movs	r7, #0
	return list->head == list;
   1ba5e:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ba60:	4545      	cmp	r5, r8
   1ba62:	d000      	beq.n	1ba66 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   1ba64:	b995      	cbnz	r5, 1ba8c <z_thread_single_abort+0x8c>
	__asm__ volatile(
   1ba66:	f386 8811 	msr	BASEPRI, r6
   1ba6a:	f3bf 8f6f 	isb	sy
}
   1ba6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
   1ba72:	079b      	lsls	r3, r3, #30
   1ba74:	d5ec      	bpl.n	1ba50 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1ba76:	68a0      	ldr	r0, [r4, #8]
   1ba78:	4621      	mov	r1, r4
   1ba7a:	f7ff fe69 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ba7e:	7b63      	ldrb	r3, [r4, #13]
   1ba80:	f023 0302 	bic.w	r3, r3, #2
   1ba84:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   1ba86:	2300      	movs	r3, #0
   1ba88:	60a3      	str	r3, [r4, #8]
   1ba8a:	e7e1      	b.n	1ba50 <z_thread_single_abort+0x50>
   1ba8c:	f105 0018 	add.w	r0, r5, #24
   1ba90:	f005 fcef 	bl	21472 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   1ba94:	68a8      	ldr	r0, [r5, #8]
   1ba96:	4629      	mov	r1, r5
   1ba98:	f7ff fe5a 	bl	1b750 <z_priq_dumb_remove>
   1ba9c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   1ba9e:	60af      	str	r7, [r5, #8]
   1baa0:	f023 0302 	bic.w	r3, r3, #2
   1baa4:	736b      	strb	r3, [r5, #13]
   1baa6:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   1baa8:	4628      	mov	r0, r5
   1baaa:	f7ff fea7 	bl	1b7fc <ready_thread>
   1baae:	e7d6      	b.n	1ba5e <z_thread_single_abort+0x5e>
   1bab0:	20002aa8 	.word	0x20002aa8
   1bab4:	20002a80 	.word	0x20002a80

0001bab8 <unready_thread>:
{
   1bab8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1baba:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1babe:	2b00      	cmp	r3, #0
{
   1bac0:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1bac2:	da06      	bge.n	1bad2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bac4:	4807      	ldr	r0, [pc, #28]	; (1bae4 <unready_thread+0x2c>)
   1bac6:	f7ff fe43 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1baca:	7b4b      	ldrb	r3, [r1, #13]
   1bacc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1bad0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1bad2:	4b05      	ldr	r3, [pc, #20]	; (1bae8 <unready_thread+0x30>)
   1bad4:	6898      	ldr	r0, [r3, #8]
   1bad6:	1a43      	subs	r3, r0, r1
   1bad8:	4258      	negs	r0, r3
   1bada:	4158      	adcs	r0, r3
}
   1badc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1bae0:	f7ff be4c 	b.w	1b77c <update_cache>
   1bae4:	20002aa8 	.word	0x20002aa8
   1bae8:	20002a80 	.word	0x20002a80

0001baec <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   1baec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1baee:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   1baf0:	f005 fcff 	bl	214f2 <z_tick_get_32>
   1baf4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   1baf6:	f04f 0320 	mov.w	r3, #32
   1bafa:	f3ef 8711 	mrs	r7, BASEPRI
   1bafe:	f383 8811 	msr	BASEPRI, r3
   1bb02:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   1bb06:	4e0d      	ldr	r6, [pc, #52]	; (1bb3c <z_tick_sleep.part.0+0x50>)
   1bb08:	4b0d      	ldr	r3, [pc, #52]	; (1bb40 <z_tick_sleep.part.0+0x54>)
   1bb0a:	68b0      	ldr	r0, [r6, #8]
   1bb0c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
   1bb0e:	f005 fb98 	bl	21242 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
   1bb12:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1bb14:	490b      	ldr	r1, [pc, #44]	; (1bb44 <z_tick_sleep.part.0+0x58>)
   1bb16:	462a      	mov	r2, r5
   1bb18:	17eb      	asrs	r3, r5, #31
   1bb1a:	3018      	adds	r0, #24
   1bb1c:	f000 fad8 	bl	1c0d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1bb20:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1bb22:	7b53      	ldrb	r3, [r2, #13]
   1bb24:	f043 0310 	orr.w	r3, r3, #16
   1bb28:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
   1bb2a:	4638      	mov	r0, r7
   1bb2c:	f7ea f82c 	bl	5b88 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   1bb30:	f005 fcdf 	bl	214f2 <z_tick_get_32>
   1bb34:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   1bb36:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   1bb3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb3c:	20002a80 	.word	0x20002a80
   1bb40:	20002ab0 	.word	0x20002ab0
   1bb44:	000211ed 	.word	0x000211ed

0001bb48 <pend>:
{
   1bb48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb4c:	4606      	mov	r6, r0
   1bb4e:	4614      	mov	r4, r2
   1bb50:	461d      	mov	r5, r3
   1bb52:	f04f 0320 	mov.w	r3, #32
   1bb56:	f3ef 8711 	mrs	r7, BASEPRI
   1bb5a:	f383 8811 	msr	BASEPRI, r3
   1bb5e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1bb62:	f005 fb7e 	bl	21262 <add_to_waitq_locked>
	__asm__ volatile(
   1bb66:	f387 8811 	msr	BASEPRI, r7
   1bb6a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bb6e:	1c6b      	adds	r3, r5, #1
   1bb70:	bf08      	it	eq
   1bb72:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   1bb76:	d008      	beq.n	1bb8a <pend+0x42>
   1bb78:	4622      	mov	r2, r4
   1bb7a:	462b      	mov	r3, r5
   1bb7c:	f106 0018 	add.w	r0, r6, #24
   1bb80:	4903      	ldr	r1, [pc, #12]	; (1bb90 <pend+0x48>)
}
   1bb82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bb86:	f000 baa3 	b.w	1c0d0 <z_add_timeout>
   1bb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bb8e:	bf00      	nop
   1bb90:	000211ed 	.word	0x000211ed

0001bb94 <z_pend_curr>:
{
   1bb94:	b510      	push	{r4, lr}
	pending_current = _current;
   1bb96:	4b07      	ldr	r3, [pc, #28]	; (1bbb4 <z_pend_curr+0x20>)
   1bb98:	6898      	ldr	r0, [r3, #8]
   1bb9a:	4b07      	ldr	r3, [pc, #28]	; (1bbb8 <z_pend_curr+0x24>)
{
   1bb9c:	460c      	mov	r4, r1
	pending_current = _current;
   1bb9e:	6018      	str	r0, [r3, #0]
{
   1bba0:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1bba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1bba6:	f7ff ffcf 	bl	1bb48 <pend>
   1bbaa:	4620      	mov	r0, r4
}
   1bbac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1bbb0:	f7e9 bfea 	b.w	5b88 <arch_swap>
   1bbb4:	20002a80 	.word	0x20002a80
   1bbb8:	20002ab0 	.word	0x20002ab0

0001bbbc <z_set_prio>:
{
   1bbbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bbc0:	4604      	mov	r4, r0
	__asm__ volatile(
   1bbc2:	f04f 0320 	mov.w	r3, #32
   1bbc6:	f3ef 8811 	mrs	r8, BASEPRI
   1bbca:	f383 8811 	msr	BASEPRI, r3
   1bbce:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   1bbd2:	7b43      	ldrb	r3, [r0, #13]
   1bbd4:	06db      	lsls	r3, r3, #27
   1bbd6:	b24e      	sxtb	r6, r1
   1bbd8:	d12e      	bne.n	1bc38 <z_set_prio+0x7c>
	return !sys_dnode_is_linked(&t->node);
   1bbda:	6985      	ldr	r5, [r0, #24]
		if (need_sched) {
   1bbdc:	bb65      	cbnz	r5, 1bc38 <z_set_prio+0x7c>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   1bbde:	4f18      	ldr	r7, [pc, #96]	; (1bc40 <z_set_prio+0x84>)
   1bbe0:	4621      	mov	r1, r4
   1bbe2:	f107 0028 	add.w	r0, r7, #40	; 0x28
   1bbe6:	f7ff fdb3 	bl	1b750 <z_priq_dumb_remove>
	return list->head == list;
   1bbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
				thread->base.prio = prio;
   1bbee:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bbf0:	4283      	cmp	r3, r0
   1bbf2:	bf18      	it	ne
   1bbf4:	461d      	movne	r5, r3
   1bbf6:	2d00      	cmp	r5, #0
   1bbf8:	bf38      	it	cc
   1bbfa:	2500      	movcc	r5, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bbfc:	b1b5      	cbz	r5, 1bc2c <z_set_prio+0x70>
	if (thread_1->base.prio < thread_2->base.prio) {
   1bbfe:	f995 100e 	ldrsb.w	r1, [r5, #14]
   1bc02:	42b1      	cmp	r1, r6
   1bc04:	dc03      	bgt.n	1bc0e <z_set_prio+0x52>
	return (node == list->tail) ? NULL : node->next;
   1bc06:	42aa      	cmp	r2, r5
   1bc08:	d010      	beq.n	1bc2c <z_set_prio+0x70>
   1bc0a:	682d      	ldr	r5, [r5, #0]
   1bc0c:	e7f6      	b.n	1bbfc <z_set_prio+0x40>
	node->prev = successor->prev;
   1bc0e:	686a      	ldr	r2, [r5, #4]
	node->next = successor;
   1bc10:	e9c4 5200 	strd	r5, r2, [r4]
	successor->prev->next = node;
   1bc14:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1bc16:	606c      	str	r4, [r5, #4]
			update_cache(1);
   1bc18:	2001      	movs	r0, #1
   1bc1a:	f7ff fdaf 	bl	1b77c <update_cache>
   1bc1e:	2001      	movs	r0, #1
	__asm__ volatile(
   1bc20:	f388 8811 	msr	BASEPRI, r8
   1bc24:	f3bf 8f6f 	isb	sy
}
   1bc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	node->prev = list->tail;
   1bc2c:	e9c4 0200 	strd	r0, r2, [r4]
	list->tail->next = node;
   1bc30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1bc32:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1bc34:	62fc      	str	r4, [r7, #44]	; 0x2c
}
   1bc36:	e7ef      	b.n	1bc18 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1bc38:	73a6      	strb	r6, [r4, #14]
   1bc3a:	2000      	movs	r0, #0
   1bc3c:	e7f0      	b.n	1bc20 <z_set_prio+0x64>
   1bc3e:	bf00      	nop
   1bc40:	20002a80 	.word	0x20002a80

0001bc44 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1bc44:	4b04      	ldr	r3, [pc, #16]	; (1bc58 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1bc46:	2100      	movs	r1, #0
   1bc48:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1bc4c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1bc50:	4608      	mov	r0, r1
   1bc52:	f7ff bd3d 	b.w	1b6d0 <k_sched_time_slice_set>
   1bc56:	bf00      	nop
   1bc58:	20002a80 	.word	0x20002a80

0001bc5c <z_impl_k_yield>:
{
   1bc5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   1bc5e:	4c24      	ldr	r4, [pc, #144]	; (1bcf0 <z_impl_k_yield+0x94>)
   1bc60:	4b24      	ldr	r3, [pc, #144]	; (1bcf4 <z_impl_k_yield+0x98>)
   1bc62:	68a2      	ldr	r2, [r4, #8]
   1bc64:	429a      	cmp	r2, r3
   1bc66:	d030      	beq.n	1bcca <z_impl_k_yield+0x6e>
	__asm__ volatile(
   1bc68:	f04f 0320 	mov.w	r3, #32
   1bc6c:	f3ef 8511 	mrs	r5, BASEPRI
   1bc70:	f383 8811 	msr	BASEPRI, r3
   1bc74:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   1bc78:	68a1      	ldr	r1, [r4, #8]
   1bc7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1bc7e:	f7ff fd67 	bl	1b750 <z_priq_dumb_remove>
	return list->head == list;
   1bc82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
   1bc84:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1bc86:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1bc88:	4283      	cmp	r3, r0
   1bc8a:	bf08      	it	eq
   1bc8c:	2300      	moveq	r3, #0
   1bc8e:	2b00      	cmp	r3, #0
   1bc90:	bf38      	it	cc
   1bc92:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1bc94:	b32b      	cbz	r3, 1bce2 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
   1bc96:	f992 700e 	ldrsb.w	r7, [r2, #14]
   1bc9a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1bc9e:	42b7      	cmp	r7, r6
   1bca0:	db03      	blt.n	1bcaa <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
   1bca2:	428b      	cmp	r3, r1
   1bca4:	d01d      	beq.n	1bce2 <z_impl_k_yield+0x86>
   1bca6:	681b      	ldr	r3, [r3, #0]
   1bca8:	e7f4      	b.n	1bc94 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
   1bcaa:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   1bcac:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
   1bcb0:	600a      	str	r2, [r1, #0]
	successor->prev = node;
   1bcb2:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
   1bcb4:	7b53      	ldrb	r3, [r2, #13]
   1bcb6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1bcba:	7353      	strb	r3, [r2, #13]
			update_cache(1);
   1bcbc:	2001      	movs	r0, #1
   1bcbe:	f7ff fd5d 	bl	1b77c <update_cache>
	__asm__ volatile(
   1bcc2:	f385 8811 	msr	BASEPRI, r5
   1bcc6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1bcca:	f04f 0320 	mov.w	r3, #32
   1bcce:	f3ef 8011 	mrs	r0, BASEPRI
   1bcd2:	f383 8811 	msr	BASEPRI, r3
   1bcd6:	f3bf 8f6f 	isb	sy
}
   1bcda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1bcde:	f7e9 bf53 	b.w	5b88 <arch_swap>
	node->prev = list->tail;
   1bce2:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
   1bce6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1bce8:	601a      	str	r2, [r3, #0]
	list->tail = node;
   1bcea:	62e2      	str	r2, [r4, #44]	; 0x2c
}
   1bcec:	e7e2      	b.n	1bcb4 <z_impl_k_yield+0x58>
   1bcee:	bf00      	nop
   1bcf0:	20002a80 	.word	0x20002a80
   1bcf4:	200011a8 	.word	0x200011a8

0001bcf8 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   1bcf8:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bcfa:	3301      	adds	r3, #1
   1bcfc:	bf08      	it	eq
   1bcfe:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1bd02:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1bd04:	d106      	bne.n	1bd14 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1bd06:	4b0b      	ldr	r3, [pc, #44]	; (1bd34 <z_impl_k_sleep+0x3c>)
   1bd08:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1bd0a:	f7ff fe45 	bl	1b998 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1bd0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
   1bd12:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   1bd14:	4604      	mov	r4, r0
	if (ticks == 0) {
   1bd16:	b948      	cbnz	r0, 1bd2c <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   1bd18:	f7ff ffa0 	bl	1bc5c <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   1bd1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1bd20:	fb84 3400 	smull	r3, r4, r4, r0
   1bd24:	0bd8      	lsrs	r0, r3, #15
   1bd26:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   1bd2a:	e7f2      	b.n	1bd12 <z_impl_k_sleep+0x1a>
   1bd2c:	f7ff fede 	bl	1baec <z_tick_sleep.part.0>
   1bd30:	4604      	mov	r4, r0
   1bd32:	e7f3      	b.n	1bd1c <z_impl_k_sleep+0x24>
   1bd34:	20002a80 	.word	0x20002a80

0001bd38 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1bd38:	4b01      	ldr	r3, [pc, #4]	; (1bd40 <z_impl_k_current_get+0x8>)
   1bd3a:	6898      	ldr	r0, [r3, #8]
   1bd3c:	4770      	bx	lr
   1bd3e:	bf00      	nop
   1bd40:	20002a80 	.word	0x20002a80

0001bd44 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1bd44:	b538      	push	{r3, r4, r5, lr}
   1bd46:	4604      	mov	r4, r0
   1bd48:	f04f 0320 	mov.w	r3, #32
   1bd4c:	f3ef 8511 	mrs	r5, BASEPRI
   1bd50:	f383 8811 	msr	BASEPRI, r3
   1bd54:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
   1bd58:	f005 faae 	bl	212b8 <z_unpend_first_thread>

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);

	if (thread != NULL) {
   1bd5c:	b148      	cbz	r0, 1bd72 <z_impl_k_sem_give+0x2e>
   1bd5e:	2200      	movs	r2, #0
   1bd60:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1bd62:	f005 fa33 	bl	211cc <z_ready_thread>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
   1bd66:	4629      	mov	r1, r5
   1bd68:	4808      	ldr	r0, [pc, #32]	; (1bd8c <z_impl_k_sem_give+0x48>)
}
   1bd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1bd6e:	f005 b9e5 	b.w	2113c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1bd72:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1bd76:	429a      	cmp	r2, r3
   1bd78:	bf18      	it	ne
   1bd7a:	3301      	addne	r3, #1
   1bd7c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1bd7e:	2102      	movs	r1, #2
   1bd80:	f104 0010 	add.w	r0, r4, #16
   1bd84:	f005 fd22 	bl	217cc <z_handle_obj_poll_events>
}
   1bd88:	e7ed      	b.n	1bd66 <z_impl_k_sem_give+0x22>
   1bd8a:	bf00      	nop
   1bd8c:	20003088 	.word	0x20003088

0001bd90 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1bd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bd92:	4614      	mov	r4, r2
   1bd94:	461d      	mov	r5, r3
   1bd96:	f04f 0320 	mov.w	r3, #32
   1bd9a:	f3ef 8111 	mrs	r1, BASEPRI
   1bd9e:	f383 8811 	msr	BASEPRI, r3
   1bda2:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
   1bda6:	6883      	ldr	r3, [r0, #8]
   1bda8:	b143      	cbz	r3, 1bdbc <z_impl_k_sem_take+0x2c>
		sem->count--;
   1bdaa:	3b01      	subs	r3, #1
   1bdac:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   1bdae:	f381 8811 	msr	BASEPRI, r1
   1bdb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1bdb6:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   1bdb8:	b003      	add	sp, #12
   1bdba:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1bdbc:	ea54 0305 	orrs.w	r3, r4, r5
   1bdc0:	d106      	bne.n	1bdd0 <z_impl_k_sem_take+0x40>
   1bdc2:	f381 8811 	msr	BASEPRI, r1
   1bdc6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1bdca:	f06f 000f 	mvn.w	r0, #15
   1bdce:	e7f3      	b.n	1bdb8 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1bdd0:	4602      	mov	r2, r0
   1bdd2:	e9cd 4500 	strd	r4, r5, [sp]
   1bdd6:	4802      	ldr	r0, [pc, #8]	; (1bde0 <z_impl_k_sem_take+0x50>)
   1bdd8:	f7ff fedc 	bl	1bb94 <z_pend_curr>
	return ret;
   1bddc:	e7ec      	b.n	1bdb8 <z_impl_k_sem_take+0x28>
   1bdde:	bf00      	nop
   1bde0:	20003088 	.word	0x20003088

0001bde4 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   1bde4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   1bde6:	4c08      	ldr	r4, [pc, #32]	; (1be08 <k_sys_work_q_init+0x24>)
   1bde8:	4908      	ldr	r1, [pc, #32]	; (1be0c <k_sys_work_q_init+0x28>)
   1bdea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bdee:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1bdf2:	4620      	mov	r0, r4
   1bdf4:	f000 f8c8 	bl	1bf88 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   1bdf8:	4905      	ldr	r1, [pc, #20]	; (1be10 <k_sys_work_q_init+0x2c>)
   1bdfa:	f104 0018 	add.w	r0, r4, #24
   1bdfe:	f005 fab0 	bl	21362 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1be02:	2000      	movs	r0, #0
   1be04:	bd10      	pop	{r4, pc}
   1be06:	bf00      	nop
   1be08:	200012a8 	.word	0x200012a8
   1be0c:	200053d8 	.word	0x200053d8
   1be10:	00025891 	.word	0x00025891

0001be14 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1be14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   1be18:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   1be1c:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1be20:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1be22:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1be24:	2504      	movs	r5, #4
   1be26:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1be28:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   1be2a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1be2c:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1be2e:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   1be30:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1be32:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   1be36:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1be3a:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
   1be3e:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1be40:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1be42:	9202      	str	r2, [sp, #8]
   1be44:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1be46:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1be48:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1be4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1be4e:	9200      	str	r2, [sp, #0]
   1be50:	4642      	mov	r2, r8
{
   1be52:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1be54:	f7e9 ff3e 	bl	5cd4 <arch_new_thread>
	if (!_current) {
   1be58:	4b05      	ldr	r3, [pc, #20]	; (1be70 <z_setup_new_thread+0x5c>)
   1be5a:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   1be5c:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   1be60:	b103      	cbz	r3, 1be64 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   1be62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1be64:	6763      	str	r3, [r4, #116]	; 0x74
}
   1be66:	4640      	mov	r0, r8
   1be68:	b004      	add	sp, #16
   1be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1be6e:	bf00      	nop
   1be70:	20002a80 	.word	0x20002a80

0001be74 <z_impl_k_thread_create>:
{
   1be74:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be76:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be78:	2500      	movs	r5, #0
   1be7a:	9505      	str	r5, [sp, #20]
   1be7c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1be7e:	9504      	str	r5, [sp, #16]
   1be80:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   1be82:	9503      	str	r5, [sp, #12]
   1be84:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1be86:	9502      	str	r5, [sp, #8]
{
   1be88:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be8c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1be8e:	9501      	str	r5, [sp, #4]
   1be90:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   1be92:	9500      	str	r5, [sp, #0]
{
   1be94:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1be96:	f7ff ffbd 	bl	1be14 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1be9a:	1c7b      	adds	r3, r7, #1
   1be9c:	bf08      	it	eq
   1be9e:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1bea2:	d005      	beq.n	1beb0 <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bea4:	ea56 0307 	orrs.w	r3, r6, r7
   1bea8:	d105      	bne.n	1beb6 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   1beaa:	4620      	mov	r0, r4
   1beac:	f7ff fcda 	bl	1b864 <z_sched_start>
}
   1beb0:	4620      	mov	r0, r4
   1beb2:	b007      	add	sp, #28
   1beb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   1beb6:	4904      	ldr	r1, [pc, #16]	; (1bec8 <z_impl_k_thread_create+0x54>)
   1beb8:	4632      	mov	r2, r6
   1beba:	463b      	mov	r3, r7
   1bebc:	f104 0018 	add.w	r0, r4, #24
   1bec0:	f000 f906 	bl	1c0d0 <z_add_timeout>
   1bec4:	e7f4      	b.n	1beb0 <z_impl_k_thread_create+0x3c>
   1bec6:	bf00      	nop
   1bec8:	000211ed 	.word	0x000211ed

0001becc <z_init_static_threads>:
{
   1becc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1bed0:	4e2a      	ldr	r6, [pc, #168]	; (1bf7c <z_init_static_threads+0xb0>)
   1bed2:	4d2b      	ldr	r5, [pc, #172]	; (1bf80 <z_init_static_threads+0xb4>)
{
   1bed4:	b086      	sub	sp, #24
   1bed6:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   1bed8:	42b5      	cmp	r5, r6
   1beda:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1bede:	d310      	bcc.n	1bf02 <z_init_static_threads+0x36>
	k_sched_lock();
   1bee0:	f7ff fc22 	bl	1b728 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bee4:	4c26      	ldr	r4, [pc, #152]	; (1bf80 <z_init_static_threads+0xb4>)
   1bee6:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1bf84 <z_init_static_threads+0xb8>
   1beea:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1beee:	f240 36e7 	movw	r6, #999	; 0x3e7
   1bef2:	2700      	movs	r7, #0
   1bef4:	4544      	cmp	r4, r8
   1bef6:	d321      	bcc.n	1bf3c <z_init_static_threads+0x70>
}
   1bef8:	b006      	add	sp, #24
   1befa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1befe:	f7ff bc61 	b.w	1b7c4 <k_sched_unlock>
		z_setup_new_thread(
   1bf02:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1bf06:	9305      	str	r3, [sp, #20]
   1bf08:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1bf0c:	9304      	str	r3, [sp, #16]
   1bf0e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1bf12:	9303      	str	r3, [sp, #12]
   1bf14:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1bf18:	9302      	str	r3, [sp, #8]
   1bf1a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1bf1e:	9301      	str	r3, [sp, #4]
   1bf20:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1bf24:	9300      	str	r3, [sp, #0]
   1bf26:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1bf2a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1bf2e:	f7ff ff71 	bl	1be14 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1bf32:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1bf36:	65dd      	str	r5, [r3, #92]	; 0x5c
   1bf38:	4625      	mov	r5, r4
   1bf3a:	e7cd      	b.n	1bed8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1bf3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1bf3e:	1c5a      	adds	r2, r3, #1
   1bf40:	d00d      	beq.n	1bf5e <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1bf42:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1bf46:	4630      	mov	r0, r6
   1bf48:	4639      	mov	r1, r7
   1bf4a:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bf4e:	42b9      	cmp	r1, r7
   1bf50:	bf08      	it	eq
   1bf52:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   1bf54:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1bf56:	d104      	bne.n	1bf62 <z_init_static_threads+0x96>
	z_sched_start(thread);
   1bf58:	4628      	mov	r0, r5
   1bf5a:	f7ff fc83 	bl	1b864 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1bf5e:	3430      	adds	r4, #48	; 0x30
   1bf60:	e7c8      	b.n	1bef4 <z_init_static_threads+0x28>
   1bf62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bf66:	2300      	movs	r3, #0
   1bf68:	f7e4 f8ba 	bl	e0 <__aeabi_uldivmod>
   1bf6c:	4602      	mov	r2, r0
   1bf6e:	460b      	mov	r3, r1
   1bf70:	f105 0018 	add.w	r0, r5, #24
   1bf74:	4651      	mov	r1, sl
   1bf76:	f000 f8ab 	bl	1c0d0 <z_add_timeout>
   1bf7a:	e7f0      	b.n	1bf5e <z_init_static_threads+0x92>
   1bf7c:	200008b0 	.word	0x200008b0
   1bf80:	200008b0 	.word	0x200008b0
   1bf84:	000211ed 	.word	0x000211ed

0001bf88 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   1bf88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf8c:	4604      	mov	r4, r0
   1bf8e:	b088      	sub	sp, #32
   1bf90:	460d      	mov	r5, r1
   1bf92:	4616      	mov	r6, r2
   1bf94:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1bf96:	f005 f84d 	bl	21034 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1bf9a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1bf9e:	2200      	movs	r2, #0
   1bfa0:	2300      	movs	r3, #0
   1bfa2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1bfa6:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1bfaa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   1bfae:	4b07      	ldr	r3, [pc, #28]	; (1bfcc <k_work_q_start+0x44>)
   1bfb0:	9400      	str	r4, [sp, #0]
   1bfb2:	4632      	mov	r2, r6
   1bfb4:	4629      	mov	r1, r5
   1bfb6:	4640      	mov	r0, r8
   1bfb8:	f7ff ff5c 	bl	1be74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   1bfbc:	4904      	ldr	r1, [pc, #16]	; (1bfd0 <k_work_q_start+0x48>)
   1bfbe:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   1bfc0:	b008      	add	sp, #32
   1bfc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bfc6:	f005 b9cc 	b.w	21362 <z_impl_k_thread_name_set>
   1bfca:	bf00      	nop
   1bfcc:	0001c943 	.word	0x0001c943
   1bfd0:	0002589a 	.word	0x0002589a

0001bfd4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   1bfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bfd8:	4606      	mov	r6, r0
   1bfda:	460d      	mov	r5, r1
   1bfdc:	4690      	mov	r8, r2
   1bfde:	4699      	mov	r9, r3
	__asm__ volatile(
   1bfe0:	f04f 0320 	mov.w	r3, #32
   1bfe4:	f3ef 8711 	mrs	r7, BASEPRI
   1bfe8:	f383 8811 	msr	BASEPRI, r3
   1bfec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   1bff0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1bff2:	b17b      	cbz	r3, 1c014 <k_delayed_work_submit_to_queue+0x40>
   1bff4:	4283      	cmp	r3, r0
   1bff6:	d128      	bne.n	1c04a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1bff8:	4628      	mov	r0, r5
   1bffa:	f005 f9d4 	bl	213a6 <work_cancel>
		/* -EALREADY indicates the work has already completed so this
		 * is likely a recurring work.
		 */
		if (err == -EALREADY) {
   1bffe:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   1c002:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   1c004:	d008      	beq.n	1c018 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1c006:	2800      	cmp	r0, #0
   1c008:	da07      	bge.n	1c01a <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1c00a:	f387 8811 	msr	BASEPRI, r7
   1c00e:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   1c012:	e00f      	b.n	1c034 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   1c014:	2800      	cmp	r0, #0
   1c016:	d0ef      	beq.n	1bff8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1c018:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c01a:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   1c01e:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1c020:	d10b      	bne.n	1c03a <k_delayed_work_submit_to_queue+0x66>
   1c022:	f387 8811 	msr	BASEPRI, r7
   1c026:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1c02a:	4629      	mov	r1, r5
   1c02c:	4630      	mov	r0, r6
   1c02e:	f005 f99d 	bl	2136c <k_work_submit_to_queue>
		return 0;
   1c032:	2400      	movs	r4, #0
}
   1c034:	4620      	mov	r0, r4
   1c036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   1c03a:	4905      	ldr	r1, [pc, #20]	; (1c050 <k_delayed_work_submit_to_queue+0x7c>)
   1c03c:	4642      	mov	r2, r8
   1c03e:	464b      	mov	r3, r9
   1c040:	f105 0010 	add.w	r0, r5, #16
   1c044:	f000 f844 	bl	1c0d0 <z_add_timeout>
   1c048:	e7df      	b.n	1c00a <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   1c04a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   1c04e:	e7dc      	b.n	1c00a <k_delayed_work_submit_to_queue+0x36>
   1c050:	0002139d 	.word	0x0002139d

0001c054 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
   1c054:	4b03      	ldr	r3, [pc, #12]	; (1c064 <elapsed+0x10>)
   1c056:	681b      	ldr	r3, [r3, #0]
   1c058:	b90b      	cbnz	r3, 1c05e <elapsed+0xa>
   1c05a:	f7e9 bb49 	b.w	56f0 <z_clock_elapsed>
}
   1c05e:	2000      	movs	r0, #0
   1c060:	4770      	bx	lr
   1c062:	bf00      	nop
   1c064:	20002abc 	.word	0x20002abc

0001c068 <remove_timeout>:
{
   1c068:	b530      	push	{r4, r5, lr}
   1c06a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c06c:	b168      	cbz	r0, 1c08a <remove_timeout+0x22>
   1c06e:	4a0a      	ldr	r2, [pc, #40]	; (1c098 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   1c070:	6852      	ldr	r2, [r2, #4]
   1c072:	4290      	cmp	r0, r2
   1c074:	d009      	beq.n	1c08a <remove_timeout+0x22>
	if (next(t) != NULL) {
   1c076:	b143      	cbz	r3, 1c08a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1c078:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1c07c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c080:	1912      	adds	r2, r2, r4
   1c082:	eb45 0101 	adc.w	r1, r5, r1
   1c086:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   1c08a:	6842      	ldr	r2, [r0, #4]
   1c08c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c08e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c090:	2300      	movs	r3, #0
	node->prev = NULL;
   1c092:	e9c0 3300 	strd	r3, r3, [r0]
}
   1c096:	bd30      	pop	{r4, r5, pc}
   1c098:	20000698 	.word	0x20000698

0001c09c <next_timeout>:
	return list->head == list;
   1c09c:	4b0a      	ldr	r3, [pc, #40]	; (1c0c8 <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
   1c09e:	b510      	push	{r4, lr}
   1c0a0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c0a2:	429c      	cmp	r4, r3
   1c0a4:	bf08      	it	eq
   1c0a6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1c0a8:	f7ff ffd4 	bl	1c054 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c0ac:	b144      	cbz	r4, 1c0c0 <next_timeout+0x24>
   1c0ae:	6923      	ldr	r3, [r4, #16]
   1c0b0:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1c0b2:	4b06      	ldr	r3, [pc, #24]	; (1c0cc <next_timeout+0x30>)
   1c0b4:	691b      	ldr	r3, [r3, #16]
   1c0b6:	b113      	cbz	r3, 1c0be <next_timeout+0x22>
   1c0b8:	4298      	cmp	r0, r3
   1c0ba:	bfa8      	it	ge
   1c0bc:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1c0be:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
   1c0c0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1c0c4:	e7f5      	b.n	1c0b2 <next_timeout+0x16>
   1c0c6:	bf00      	nop
   1c0c8:	20000698 	.word	0x20000698
   1c0cc:	20002a80 	.word	0x20002a80

0001c0d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   1c0d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0d4:	9101      	str	r1, [sp, #4]
   1c0d6:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c0d8:	1c4b      	adds	r3, r1, #1
   1c0da:	bf08      	it	eq
   1c0dc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1c0e0:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1c0e2:	d06c      	beq.n	1c1be <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   1c0e4:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1c0e6:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1c0ea:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1c0ee:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   1c0f2:	ebb3 0804 	subs.w	r8, r3, r4
   1c0f6:	eb6b 0905 	sbc.w	r9, fp, r5
   1c0fa:	f1b8 0f00 	cmp.w	r8, #0
   1c0fe:	f179 0300 	sbcs.w	r3, r9, #0
   1c102:	db0f      	blt.n	1c124 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   1c104:	f7ff ffa6 	bl	1c054 <elapsed>
   1c108:	4a33      	ldr	r2, [pc, #204]	; (1c1d8 <z_add_timeout+0x108>)
   1c10a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1c10e:	f06f 0301 	mvn.w	r3, #1
   1c112:	1a5b      	subs	r3, r3, r1
   1c114:	eb6b 020c 	sbc.w	r2, fp, ip
   1c118:	1b1e      	subs	r6, r3, r4
   1c11a:	eb62 0705 	sbc.w	r7, r2, r5
   1c11e:	1a34      	subs	r4, r6, r0
   1c120:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1c124:	9b01      	ldr	r3, [sp, #4]
   1c126:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   1c12a:	f04f 0320 	mov.w	r3, #32
   1c12e:	f3ef 8611 	mrs	r6, BASEPRI
   1c132:	f383 8811 	msr	BASEPRI, r3
   1c136:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   1c13a:	f7ff ff8b 	bl	1c054 <elapsed>
	ticks = MAX(1, ticks);
   1c13e:	2c01      	cmp	r4, #1
   1c140:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   1c144:	4b25      	ldr	r3, [pc, #148]	; (1c1dc <z_add_timeout+0x10c>)
   1c146:	bfb8      	it	lt
   1c148:	2401      	movlt	r4, #1
   1c14a:	681a      	ldr	r2, [r3, #0]
   1c14c:	bfb8      	it	lt
   1c14e:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   1c150:	1824      	adds	r4, r4, r0
   1c152:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c156:	429a      	cmp	r2, r3
   1c158:	e9ca 4504 	strd	r4, r5, [sl, #16]
   1c15c:	d001      	beq.n	1c162 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1c15e:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   1c160:	b952      	cbnz	r2, 1c178 <z_add_timeout+0xa8>
	node->prev = list->tail;
   1c162:	685a      	ldr	r2, [r3, #4]
   1c164:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   1c168:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1c16a:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   1c16e:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   1c172:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1c176:	e014      	b.n	1c1a2 <z_add_timeout+0xd2>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
   1c178:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1c17c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   1c180:	454d      	cmp	r5, r9
   1c182:	bf08      	it	eq
   1c184:	4544      	cmpeq	r4, r8
   1c186:	d21d      	bcs.n	1c1c4 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   1c188:	ebb8 0004 	subs.w	r0, r8, r4
   1c18c:	eb69 0105 	sbc.w	r1, r9, r5
   1c190:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   1c194:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1c196:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1c19a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1c19e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   1c1a2:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c1a4:	429a      	cmp	r2, r3
   1c1a6:	d006      	beq.n	1c1b6 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1c1a8:	4592      	cmp	sl, r2
   1c1aa:	d104      	bne.n	1c1b6 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1c1ac:	f7ff ff76 	bl	1c09c <next_timeout>
   1c1b0:	2100      	movs	r1, #0
   1c1b2:	f7e9 fa3f 	bl	5634 <z_clock_set_timeout>
	__asm__ volatile(
   1c1b6:	f386 8811 	msr	BASEPRI, r6
   1c1ba:	f3bf 8f6f 	isb	sy
		}
	}
}
   1c1be:	b003      	add	sp, #12
   1c1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   1c1c4:	ebb4 0008 	subs.w	r0, r4, r8
   1c1c8:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1c1cc:	42ba      	cmp	r2, r7
   1c1ce:	e9ca 0104 	strd	r0, r1, [sl, #16]
   1c1d2:	d0c6      	beq.n	1c162 <z_add_timeout+0x92>
   1c1d4:	6812      	ldr	r2, [r2, #0]
   1c1d6:	e7c3      	b.n	1c160 <z_add_timeout+0x90>
   1c1d8:	20001340 	.word	0x20001340
   1c1dc:	20000698 	.word	0x20000698

0001c1e0 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   1c1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1e4:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1c1e6:	f7ff fba1 	bl	1b92c <z_time_slice>
	__asm__ volatile(
   1c1ea:	f04f 0320 	mov.w	r3, #32
   1c1ee:	f3ef 8411 	mrs	r4, BASEPRI
   1c1f2:	f383 8811 	msr	BASEPRI, r3
   1c1f6:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1c1fa:	4d2d      	ldr	r5, [pc, #180]	; (1c2b0 <z_clock_announce+0xd0>)
   1c1fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 1c2b4 <z_clock_announce+0xd4>
	return list->head == list;
   1c200:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 1c2b8 <z_clock_announce+0xd8>
   1c204:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   1c206:	4651      	mov	r1, sl
   1c208:	f8d5 c000 	ldr.w	ip, [r5]
   1c20c:	f8db 0000 	ldr.w	r0, [fp]
   1c210:	4662      	mov	r2, ip
   1c212:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c214:	4558      	cmp	r0, fp
   1c216:	e9cd 2300 	strd	r2, r3, [sp]
   1c21a:	e9da 8900 	ldrd	r8, r9, [sl]
   1c21e:	d00e      	beq.n	1c23e <z_clock_announce+0x5e>
   1c220:	b168      	cbz	r0, 1c23e <z_clock_announce+0x5e>
   1c222:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   1c226:	42bb      	cmp	r3, r7
   1c228:	bf08      	it	eq
   1c22a:	45b4      	cmpeq	ip, r6
   1c22c:	d21e      	bcs.n	1c26c <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1c22e:	9b00      	ldr	r3, [sp, #0]
   1c230:	ebb6 0c03 	subs.w	ip, r6, r3
   1c234:	9b01      	ldr	r3, [sp, #4]
   1c236:	eb67 0603 	sbc.w	r6, r7, r3
   1c23a:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   1c23e:	9b00      	ldr	r3, [sp, #0]
   1c240:	eb13 0208 	adds.w	r2, r3, r8
   1c244:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   1c246:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   1c24a:	eb43 0309 	adc.w	r3, r3, r9
   1c24e:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   1c252:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   1c254:	f7ff ff22 	bl	1c09c <next_timeout>
   1c258:	4631      	mov	r1, r6
   1c25a:	f7e9 f9eb 	bl	5634 <z_clock_set_timeout>
	__asm__ volatile(
   1c25e:	f384 8811 	msr	BASEPRI, r4
   1c262:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1c266:	b003      	add	sp, #12
   1c268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   1c26c:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   1c270:	f04f 0200 	mov.w	r2, #0
   1c274:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   1c278:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1c27c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1c280:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   1c284:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   1c288:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   1c28a:	f7ff feed 	bl	1c068 <remove_timeout>
   1c28e:	f384 8811 	msr	BASEPRI, r4
   1c292:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1c296:	6883      	ldr	r3, [r0, #8]
   1c298:	4798      	blx	r3
	__asm__ volatile(
   1c29a:	f04f 0320 	mov.w	r3, #32
   1c29e:	f3ef 8411 	mrs	r4, BASEPRI
   1c2a2:	f383 8811 	msr	BASEPRI, r3
   1c2a6:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   1c2aa:	4902      	ldr	r1, [pc, #8]	; (1c2b4 <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1c2ac:	e7ac      	b.n	1c208 <z_clock_announce+0x28>
   1c2ae:	bf00      	nop
   1c2b0:	20002abc 	.word	0x20002abc
   1c2b4:	20001340 	.word	0x20001340
   1c2b8:	20000698 	.word	0x20000698

0001c2bc <z_tick_get>:

int64_t z_tick_get(void)
{
   1c2bc:	b510      	push	{r4, lr}
   1c2be:	f04f 0320 	mov.w	r3, #32
   1c2c2:	f3ef 8411 	mrs	r4, BASEPRI
   1c2c6:	f383 8811 	msr	BASEPRI, r3
   1c2ca:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1c2ce:	f7e9 fa0f 	bl	56f0 <z_clock_elapsed>
   1c2d2:	4b06      	ldr	r3, [pc, #24]	; (1c2ec <z_tick_get+0x30>)
   1c2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c2d8:	1812      	adds	r2, r2, r0
   1c2da:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1c2de:	f384 8811 	msr	BASEPRI, r4
   1c2e2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1c2e6:	4610      	mov	r0, r2
   1c2e8:	4619      	mov	r1, r3
   1c2ea:	bd10      	pop	{r4, pc}
   1c2ec:	20001340 	.word	0x20001340

0001c2f0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1c2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c2f2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1c2f6:	1c56      	adds	r6, r2, #1
   1c2f8:	f143 0700 	adc.w	r7, r3, #0
   1c2fc:	2f00      	cmp	r7, #0
   1c2fe:	bf08      	it	eq
   1c300:	2e02      	cmpeq	r6, #2
{
   1c302:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1c304:	d302      	bcc.n	1c30c <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c306:	490c      	ldr	r1, [pc, #48]	; (1c338 <z_timer_expiration_handler+0x48>)
   1c308:	f7ff fee2 	bl	1c0d0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1c30c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c30e:	3301      	adds	r3, #1
   1c310:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1c312:	6a23      	ldr	r3, [r4, #32]
   1c314:	b10b      	cbz	r3, 1c31a <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   1c316:	4620      	mov	r0, r4
   1c318:	4798      	blx	r3
	return list->head == list;
   1c31a:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1c31e:	42a5      	cmp	r5, r4
   1c320:	d008      	beq.n	1c334 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1c322:	b13d      	cbz	r5, 1c334 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1c324:	4628      	mov	r0, r5
   1c326:	f004 fef0 	bl	2110a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   1c32a:	4628      	mov	r0, r5
   1c32c:	f004 ff4e 	bl	211cc <z_ready_thread>
   1c330:	2300      	movs	r3, #0
   1c332:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   1c334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c336:	bf00      	nop
   1c338:	0001c2f1 	.word	0x0001c2f1

0001c33c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1c33c:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   1c340:	4619      	mov	r1, r3
   1c342:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c344:	1c4c      	adds	r4, r1, #1
{
   1c346:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c348:	bf08      	it	eq
   1c34a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1c34e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1c352:	4680      	mov	r8, r0
   1c354:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1c356:	d047      	beq.n	1c3e8 <z_impl_k_timer_start+0xac>
   1c358:	4614      	mov	r4, r2
   1c35a:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   1c35c:	ea54 0305 	orrs.w	r3, r4, r5
   1c360:	d016      	beq.n	1c390 <z_impl_k_timer_start+0x54>
   1c362:	f06f 0301 	mvn.w	r3, #1
   1c366:	ebb3 0a02 	subs.w	sl, r3, r2
   1c36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c36e:	eb63 0b05 	sbc.w	fp, r3, r5
   1c372:	f1ba 0f00 	cmp.w	sl, #0
   1c376:	f17b 0300 	sbcs.w	r3, fp, #0
   1c37a:	da09      	bge.n	1c390 <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   1c37c:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   1c380:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   1c384:	2c01      	cmp	r4, #1
   1c386:	f175 0300 	sbcs.w	r3, r5, #0
   1c38a:	bfbc      	itt	lt
   1c38c:	2401      	movlt	r4, #1
   1c38e:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1c390:	f06f 0301 	mvn.w	r3, #1
   1c394:	1a1b      	subs	r3, r3, r0
   1c396:	9300      	str	r3, [sp, #0]
   1c398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c39c:	eb63 0301 	sbc.w	r3, r3, r1
   1c3a0:	9301      	str	r3, [sp, #4]
   1c3a2:	e9dd 2300 	ldrd	r2, r3, [sp]
   1c3a6:	2a00      	cmp	r2, #0
   1c3a8:	f173 0300 	sbcs.w	r3, r3, #0
   1c3ac:	da0c      	bge.n	1c3c8 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1c3ae:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   1c3b2:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   1c3b6:	f1b8 0f00 	cmp.w	r8, #0
   1c3ba:	f179 0300 	sbcs.w	r3, r9, #0
   1c3be:	bfbc      	itt	lt
   1c3c0:	f04f 0800 	movlt.w	r8, #0
   1c3c4:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   1c3c8:	4630      	mov	r0, r6
   1c3ca:	f005 f852 	bl	21472 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1c3ce:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c3d0:	4907      	ldr	r1, [pc, #28]	; (1c3f0 <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   1c3d2:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c3d4:	4642      	mov	r2, r8
   1c3d6:	464b      	mov	r3, r9
   1c3d8:	4630      	mov	r0, r6
	timer->period = period;
   1c3da:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   1c3de:	b002      	add	sp, #8
   1c3e0:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1c3e4:	f7ff be74 	b.w	1c0d0 <z_add_timeout>
}
   1c3e8:	b002      	add	sp, #8
   1c3ea:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   1c3ee:	bf00      	nop
   1c3f0:	0001c2f1 	.word	0x0001c2f1

0001c3f4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1c3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c3f8:	b089      	sub	sp, #36	; 0x24
   1c3fa:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   1c3fc:	2301      	movs	r3, #1
   1c3fe:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   1c402:	4b29      	ldr	r3, [pc, #164]	; (1c4a8 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   1c404:	689b      	ldr	r3, [r3, #8]
   1c406:	9306      	str	r3, [sp, #24]
   1c408:	4b28      	ldr	r3, [pc, #160]	; (1c4ac <z_impl_k_poll+0xb8>)
   1c40a:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   1c40c:	ea52 0307 	orrs.w	r3, r2, r7
{
   1c410:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   1c412:	bf0c      	ite	eq
   1c414:	2301      	moveq	r3, #1
   1c416:	2300      	movne	r3, #0
   1c418:	aa05      	add	r2, sp, #20
{
   1c41a:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   1c41c:	f005 f966 	bl	216ec <register_events>
   1c420:	4680      	mov	r8, r0
	__asm__ volatile(
   1c422:	f04f 0320 	mov.w	r3, #32
   1c426:	f3ef 8911 	mrs	r9, BASEPRI
   1c42a:	f383 8811 	msr	BASEPRI, r3
   1c42e:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   1c432:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c436:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   1c43a:	b963      	cbnz	r3, 1c456 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   1c43c:	4601      	mov	r1, r0
   1c43e:	464a      	mov	r2, r9
   1c440:	4628      	mov	r0, r5
   1c442:	f005 f8b3 	bl	215ac <clear_event_registrations>
	__asm__ volatile(
   1c446:	f389 8811 	msr	BASEPRI, r9
   1c44a:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   1c44e:	4620      	mov	r0, r4
   1c450:	b009      	add	sp, #36	; 0x24
   1c452:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   1c456:	2300      	movs	r3, #0
   1c458:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1c45c:	ea56 0307 	orrs.w	r3, r6, r7
   1c460:	d106      	bne.n	1c470 <z_impl_k_poll+0x7c>
   1c462:	f389 8811 	msr	BASEPRI, r9
   1c466:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1c46a:	f06f 040a 	mvn.w	r4, #10
   1c46e:	e7ee      	b.n	1c44e <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c470:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c472:	e9cd 6700 	strd	r6, r7, [sp]
   1c476:	4649      	mov	r1, r9
   1c478:	480d      	ldr	r0, [pc, #52]	; (1c4b0 <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   1c47a:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1c47e:	f7ff fb89 	bl	1bb94 <z_pend_curr>
   1c482:	4604      	mov	r4, r0
	__asm__ volatile(
   1c484:	f04f 0320 	mov.w	r3, #32
   1c488:	f3ef 8611 	mrs	r6, BASEPRI
   1c48c:	f383 8811 	msr	BASEPRI, r3
   1c490:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1c494:	4632      	mov	r2, r6
   1c496:	4641      	mov	r1, r8
   1c498:	4628      	mov	r0, r5
   1c49a:	f005 f887 	bl	215ac <clear_event_registrations>
	__asm__ volatile(
   1c49e:	f386 8811 	msr	BASEPRI, r6
   1c4a2:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1c4a6:	e7d2      	b.n	1c44e <z_impl_k_poll+0x5a>
   1c4a8:	20002a80 	.word	0x20002a80
   1c4ac:	00021639 	.word	0x00021639
   1c4b0:	20003088 	.word	0x20003088

0001c4b4 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   1c4b4:	b538      	push	{r3, r4, r5, lr}
   1c4b6:	4603      	mov	r3, r0
	__asm__ volatile(
   1c4b8:	f04f 0220 	mov.w	r2, #32
   1c4bc:	f3ef 8511 	mrs	r5, BASEPRI
   1c4c0:	f382 8811 	msr	BASEPRI, r2
   1c4c4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   1c4c8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   1c4ca:	2101      	movs	r1, #1
   1c4cc:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1c4ce:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1c4d0:	4283      	cmp	r3, r0
   1c4d2:	d106      	bne.n	1c4e2 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1c4d4:	f385 8811 	msr	BASEPRI, r5
   1c4d8:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   1c4dc:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   1c4de:	4620      	mov	r0, r4
   1c4e0:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   1c4e2:	e9d0 3200 	ldrd	r3, r2, [r0]
   1c4e6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1c4e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1c4ea:	2300      	movs	r3, #0
	node->prev = NULL;
   1c4ec:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c4f0:	f005 f887 	bl	21602 <signal_poll_event>
	z_reschedule(&lock, key);
   1c4f4:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1c4f6:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1c4f8:	4801      	ldr	r0, [pc, #4]	; (1c500 <z_impl_k_poll_signal_raise+0x4c>)
   1c4fa:	f004 fe1f 	bl	2113c <z_reschedule>
	return rc;
   1c4fe:	e7ee      	b.n	1c4de <z_impl_k_poll_signal_raise+0x2a>
   1c500:	20003088 	.word	0x20003088

0001c504 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   1c504:	b510      	push	{r4, lr}
   1c506:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   1c508:	f004 ff23 	bl	21352 <k_is_in_isr>
   1c50c:	b940      	cbnz	r0, 1c520 <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   1c50e:	4b05      	ldr	r3, [pc, #20]	; (1c524 <z_thread_malloc+0x20>)
   1c510:	689b      	ldr	r3, [r3, #8]
   1c512:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (pool) {
   1c514:	b120      	cbz	r0, 1c520 <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   1c516:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   1c518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   1c51c:	f005 b964 	b.w	217e8 <k_mem_pool_malloc>
}
   1c520:	2000      	movs	r0, #0
   1c522:	bd10      	pop	{r4, pc}
   1c524:	20002a80 	.word	0x20002a80

0001c528 <write_without_rsp_vnd>:
{
   1c528:	b510      	push	{r4, lr}
   1c52a:	4608      	mov	r0, r1
   1c52c:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   1c52e:	f89d 200c 	ldrb.w	r2, [sp, #12]
	uint8_t *value = attr->user_data;
   1c532:	68c0      	ldr	r0, [r0, #12]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   1c534:	0792      	lsls	r2, r2, #30
{
   1c536:	461c      	mov	r4, r3
   1c538:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   1c53c:	d508      	bpl.n	1c550 <write_without_rsp_vnd+0x28>
	if (offset + len > sizeof(vnd_value)) {
   1c53e:	191a      	adds	r2, r3, r4
   1c540:	2a06      	cmp	r2, #6
   1c542:	dc08      	bgt.n	1c556 <write_without_rsp_vnd+0x2e>
	memcpy(value + offset, buf, len);
   1c544:	4622      	mov	r2, r4
   1c546:	4418      	add	r0, r3
   1c548:	f002 fc53 	bl	1edf2 <memcpy>
}
   1c54c:	4620      	mov	r0, r4
   1c54e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   1c550:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   1c554:	e7fa      	b.n	1c54c <write_without_rsp_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c556:	f06f 0406 	mvn.w	r4, #6
   1c55a:	e7f7      	b.n	1c54c <write_without_rsp_vnd+0x24>

0001c55c <write_signed>:
{
   1c55c:	b538      	push	{r3, r4, r5, lr}
   1c55e:	460c      	mov	r4, r1
   1c560:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   1c564:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   1c566:	461c      	mov	r4, r3
   1c568:	18c3      	adds	r3, r0, r3
   1c56a:	2b04      	cmp	r3, #4
{
   1c56c:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   1c56e:	dc05      	bgt.n	1c57c <write_signed+0x20>
	memcpy(value + offset, buf, len);
   1c570:	4622      	mov	r2, r4
   1c572:	4428      	add	r0, r5
   1c574:	f002 fc3d 	bl	1edf2 <memcpy>
}
   1c578:	4620      	mov	r0, r4
   1c57a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c57c:	f06f 0406 	mvn.w	r4, #6
   1c580:	e7fa      	b.n	1c578 <write_signed+0x1c>

0001c582 <write_long_vnd>:
{
   1c582:	b538      	push	{r3, r4, r5, lr}
   1c584:	460d      	mov	r5, r1
   1c586:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   1c588:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1c58c:	07d2      	lsls	r2, r2, #31
{
   1c58e:	461c      	mov	r4, r3
   1c590:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   1c594:	d409      	bmi.n	1c5aa <write_long_vnd+0x28>
	if (offset + len > sizeof(vnd_long_value)) {
   1c596:	191a      	adds	r2, r3, r4
   1c598:	2a4a      	cmp	r2, #74	; 0x4a
   1c59a:	dc08      	bgt.n	1c5ae <write_long_vnd+0x2c>
	memcpy(value + offset, buf, len);
   1c59c:	68e8      	ldr	r0, [r5, #12]
   1c59e:	4622      	mov	r2, r4
   1c5a0:	4418      	add	r0, r3
   1c5a2:	f002 fc26 	bl	1edf2 <memcpy>
}
   1c5a6:	4620      	mov	r0, r4
   1c5a8:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   1c5aa:	2400      	movs	r4, #0
   1c5ac:	e7fb      	b.n	1c5a6 <write_long_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c5ae:	f06f 0406 	mvn.w	r4, #6
   1c5b2:	e7f8      	b.n	1c5a6 <write_long_vnd+0x24>

0001c5b4 <write_vnd>:
{
   1c5b4:	b538      	push	{r3, r4, r5, lr}
   1c5b6:	460c      	mov	r4, r1
   1c5b8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   1c5bc:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(vnd_value)) {
   1c5be:	461c      	mov	r4, r3
   1c5c0:	18c3      	adds	r3, r0, r3
   1c5c2:	2b06      	cmp	r3, #6
{
   1c5c4:	4611      	mov	r1, r2
	if (offset + len > sizeof(vnd_value)) {
   1c5c6:	dc05      	bgt.n	1c5d4 <write_vnd+0x20>
	memcpy(value + offset, buf, len);
   1c5c8:	4622      	mov	r2, r4
   1c5ca:	4428      	add	r0, r5
   1c5cc:	f002 fc11 	bl	1edf2 <memcpy>
}
   1c5d0:	4620      	mov	r0, r4
   1c5d2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c5d4:	f06f 0406 	mvn.w	r4, #6
   1c5d8:	e7fa      	b.n	1c5d0 <write_vnd+0x1c>

0001c5da <read_signed>:
{
   1c5da:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1c5dc:	2404      	movs	r4, #4
   1c5de:	9402      	str	r4, [sp, #8]
   1c5e0:	68cc      	ldr	r4, [r1, #12]
   1c5e2:	9401      	str	r4, [sp, #4]
   1c5e4:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1c5e8:	9400      	str	r4, [sp, #0]
   1c5ea:	f003 fdfc 	bl	201e6 <bt_gatt_attr_read>
}
   1c5ee:	b004      	add	sp, #16
   1c5f0:	bd10      	pop	{r4, pc}

0001c5f2 <read_long_vnd>:
{
   1c5f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1c5f4:	244a      	movs	r4, #74	; 0x4a
   1c5f6:	9402      	str	r4, [sp, #8]
   1c5f8:	68cc      	ldr	r4, [r1, #12]
   1c5fa:	9401      	str	r4, [sp, #4]
   1c5fc:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1c600:	9400      	str	r4, [sp, #0]
   1c602:	f003 fdf0 	bl	201e6 <bt_gatt_attr_read>
}
   1c606:	b004      	add	sp, #16
   1c608:	bd10      	pop	{r4, pc}

0001c60a <read_vnd>:
{
   1c60a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   1c60e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1c612:	4605      	mov	r5, r0
				 strlen(value));
   1c614:	4640      	mov	r0, r8
{
   1c616:	461f      	mov	r7, r3
   1c618:	460c      	mov	r4, r1
   1c61a:	4616      	mov	r6, r2
				 strlen(value));
   1c61c:	f002 fbb7 	bl	1ed8e <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1c620:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c624:	9300      	str	r3, [sp, #0]
   1c626:	b280      	uxth	r0, r0
   1c628:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1c62c:	463b      	mov	r3, r7
   1c62e:	4632      	mov	r2, r6
   1c630:	4621      	mov	r1, r4
   1c632:	4628      	mov	r0, r5
   1c634:	f003 fdd7 	bl	201e6 <bt_gatt_attr_read>
}
   1c638:	b004      	add	sp, #16
   1c63a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c63e <ct_ccc_cfg_changed>:
}
   1c63e:	4770      	bx	lr

0001c640 <read_ct>:
{
   1c640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1c642:	240a      	movs	r4, #10
   1c644:	9402      	str	r4, [sp, #8]
   1c646:	68cc      	ldr	r4, [r1, #12]
   1c648:	9401      	str	r4, [sp, #4]
   1c64a:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   1c64e:	9400      	str	r4, [sp, #0]
   1c650:	f003 fdc9 	bl	201e6 <bt_gatt_attr_read>
}
   1c654:	b004      	add	sp, #16
   1c656:	bd10      	pop	{r4, pc}

0001c658 <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   1c658:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   1c65a:	f04f 0c0a 	mov.w	ip, #10
{
   1c65e:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   1c660:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   1c662:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   1c664:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   1c666:	b111      	cbz	r1, 1c66e <u8_to_dec+0x16>
   1c668:	3e01      	subs	r6, #1
   1c66a:	d101      	bne.n	1c670 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   1c66c:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   1c66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c670:	42a2      	cmp	r2, r4
		digit = value / divisor;
   1c672:	fbb2 f7f4 	udiv	r7, r2, r4
   1c676:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   1c678:	d202      	bcs.n	1c680 <u8_to_dec+0x28>
   1c67a:	2c01      	cmp	r4, #1
   1c67c:	d000      	beq.n	1c680 <u8_to_dec+0x28>
   1c67e:	b130      	cbz	r0, 1c68e <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   1c680:	3330      	adds	r3, #48	; 0x30
   1c682:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   1c686:	3901      	subs	r1, #1
			num_digits++;
   1c688:	1c43      	adds	r3, r0, #1
			buflen--;
   1c68a:	b2c9      	uxtb	r1, r1
			num_digits++;
   1c68c:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   1c68e:	fb04 2217 	mls	r2, r4, r7, r2
   1c692:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   1c694:	fbb4 f4fc 	udiv	r4, r4, ip
   1c698:	e7e5      	b.n	1c666 <u8_to_dec+0xe>

0001c69a <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   1c69a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1c69e:	b2db      	uxtb	r3, r3
   1c6a0:	2b09      	cmp	r3, #9
   1c6a2:	d802      	bhi.n	1c6aa <char2hex+0x10>
		*x = c - '0';
   1c6a4:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   1c6a6:	2000      	movs	r0, #0
   1c6a8:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   1c6aa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1c6ae:	2b05      	cmp	r3, #5
   1c6b0:	d802      	bhi.n	1c6b8 <char2hex+0x1e>
		*x = c - 'a' + 10;
   1c6b2:	3857      	subs	r0, #87	; 0x57
   1c6b4:	7008      	strb	r0, [r1, #0]
   1c6b6:	e7f6      	b.n	1c6a6 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   1c6b8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1c6bc:	2b05      	cmp	r3, #5
   1c6be:	d801      	bhi.n	1c6c4 <char2hex+0x2a>
		*x = c - 'A' + 10;
   1c6c0:	3837      	subs	r0, #55	; 0x37
   1c6c2:	e7f7      	b.n	1c6b4 <char2hex+0x1a>
		return -EINVAL;
   1c6c4:	f06f 0015 	mvn.w	r0, #21
}
   1c6c8:	4770      	bx	lr

0001c6ca <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   1c6ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1c6cc:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   1c6ce:	f001 0001 	and.w	r0, r1, #1
   1c6d2:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   1c6d6:	429d      	cmp	r5, r3
   1c6d8:	ea4f 0651 	mov.w	r6, r1, lsr #1
   1c6dc:	d903      	bls.n	1c6e6 <hex2bin+0x1c>
		return 0;
   1c6de:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   1c6e0:	4628      	mov	r0, r5
   1c6e2:	b003      	add	sp, #12
   1c6e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   1c6e6:	b158      	cbz	r0, 1c700 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   1c6e8:	7820      	ldrb	r0, [r4, #0]
   1c6ea:	f10d 0107 	add.w	r1, sp, #7
   1c6ee:	f7ff ffd4 	bl	1c69a <char2hex>
   1c6f2:	2800      	cmp	r0, #0
   1c6f4:	dbf3      	blt.n	1c6de <hex2bin+0x14>
		buf[0] = dec;
   1c6f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c6fa:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   1c6fe:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c700:	3401      	adds	r4, #1
   1c702:	4416      	add	r6, r2
   1c704:	42b2      	cmp	r2, r6
   1c706:	d0eb      	beq.n	1c6e0 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   1c708:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   1c70c:	f10d 0107 	add.w	r1, sp, #7
   1c710:	f7ff ffc3 	bl	1c69a <char2hex>
   1c714:	2800      	cmp	r0, #0
   1c716:	dbe2      	blt.n	1c6de <hex2bin+0x14>
		buf[i] = dec << 4;
   1c718:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1c71c:	011b      	lsls	r3, r3, #4
   1c71e:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   1c720:	f814 0b02 	ldrb.w	r0, [r4], #2
   1c724:	f10d 0107 	add.w	r1, sp, #7
   1c728:	f7ff ffb7 	bl	1c69a <char2hex>
   1c72c:	2800      	cmp	r0, #0
   1c72e:	dbd6      	blt.n	1c6de <hex2bin+0x14>
		buf[i] += dec;
   1c730:	7813      	ldrb	r3, [r2, #0]
   1c732:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1c736:	440b      	add	r3, r1
   1c738:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   1c73c:	e7e2      	b.n	1c704 <hex2bin+0x3a>

0001c73e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1c73e:	4603      	mov	r3, r0
   1c740:	b140      	cbz	r0, 1c754 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c742:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c744:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1c748:	2a02      	cmp	r2, #2
   1c74a:	d006      	beq.n	1c75a <sys_notify_validate+0x1c>
   1c74c:	2a03      	cmp	r2, #3
   1c74e:	d004      	beq.n	1c75a <sys_notify_validate+0x1c>
   1c750:	2a01      	cmp	r2, #1
   1c752:	d005      	beq.n	1c760 <sys_notify_validate+0x22>
		return -EINVAL;
   1c754:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1c758:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1c75a:	681a      	ldr	r2, [r3, #0]
   1c75c:	2a00      	cmp	r2, #0
   1c75e:	d0f9      	beq.n	1c754 <sys_notify_validate+0x16>
		notify->result = 0;
   1c760:	2000      	movs	r0, #0
   1c762:	6098      	str	r0, [r3, #8]
   1c764:	4770      	bx	lr

0001c766 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1c766:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1c768:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1c76c:	2a02      	cmp	r2, #2
{
   1c76e:	b510      	push	{r4, lr}
   1c770:	4603      	mov	r3, r0
	notify->result = res;
   1c772:	6081      	str	r1, [r0, #8]
	switch (method) {
   1c774:	d00a      	beq.n	1c78c <sys_notify_finalize+0x26>
   1c776:	2a03      	cmp	r2, #3
   1c778:	d10b      	bne.n	1c792 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1c77a:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1c77c:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1c77e:	2200      	movs	r2, #0
   1c780:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1c782:	b108      	cbz	r0, 1c788 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   1c784:	f7ff fe96 	bl	1c4b4 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1c788:	4620      	mov	r0, r4
   1c78a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1c78c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   1c78e:	2400      	movs	r4, #0
		break;
   1c790:	e7f5      	b.n	1c77e <sys_notify_finalize+0x18>
	switch (method) {
   1c792:	2400      	movs	r4, #0
   1c794:	4620      	mov	r0, r4
   1c796:	e7f2      	b.n	1c77e <sys_notify_finalize+0x18>

0001c798 <arch_printk_char_out>:
}
   1c798:	2000      	movs	r0, #0
   1c79a:	4770      	bx	lr

0001c79c <str_out>:
{
   1c79c:	b530      	push	{r4, r5, lr}
   1c79e:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1c7a0:	680c      	ldr	r4, [r1, #0]
   1c7a2:	1c55      	adds	r5, r2, #1
   1c7a4:	b114      	cbz	r4, 1c7ac <str_out+0x10>
   1c7a6:	684b      	ldr	r3, [r1, #4]
   1c7a8:	4293      	cmp	r3, r2
   1c7aa:	dc01      	bgt.n	1c7b0 <str_out+0x14>
		ctx->count++;
   1c7ac:	608d      	str	r5, [r1, #8]
}
   1c7ae:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1c7b0:	3b01      	subs	r3, #1
   1c7b2:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1c7b4:	bf08      	it	eq
   1c7b6:	2200      	moveq	r2, #0
   1c7b8:	608d      	str	r5, [r1, #8]
   1c7ba:	bf0c      	ite	eq
   1c7bc:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1c7be:	54a0      	strbne	r0, [r4, r2]
   1c7c0:	e7f5      	b.n	1c7ae <str_out+0x12>

0001c7c2 <printk>:
{
   1c7c2:	b40f      	push	{r0, r1, r2, r3}
   1c7c4:	b507      	push	{r0, r1, r2, lr}
   1c7c6:	a904      	add	r1, sp, #16
   1c7c8:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1c7cc:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1c7ce:	f7e6 ff4f 	bl	3670 <vprintk>
}
   1c7d2:	b003      	add	sp, #12
   1c7d4:	f85d eb04 	ldr.w	lr, [sp], #4
   1c7d8:	b004      	add	sp, #16
   1c7da:	4770      	bx	lr

0001c7dc <snprintk>:
{
   1c7dc:	b40c      	push	{r2, r3}
   1c7de:	b507      	push	{r0, r1, r2, lr}
   1c7e0:	ab04      	add	r3, sp, #16
   1c7e2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1c7e6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1c7e8:	f7e6 ff50 	bl	368c <vsnprintk>
}
   1c7ec:	b003      	add	sp, #12
   1c7ee:	f85d eb04 	ldr.w	lr, [sp], #4
   1c7f2:	b002      	add	sp, #8
   1c7f4:	4770      	bx	lr

0001c7f6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c7f6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1c7f8:	f013 0307 	ands.w	r3, r3, #7
   1c7fc:	d105      	bne.n	1c80a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1c7fe:	6803      	ldr	r3, [r0, #0]
   1c800:	2b00      	cmp	r3, #0
		evt = EVT_START;
   1c802:	bf0c      	ite	eq
   1c804:	2000      	moveq	r0, #0
   1c806:	2003      	movne	r0, #3
   1c808:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1c80a:	2b02      	cmp	r3, #2
   1c80c:	d105      	bne.n	1c81a <process_recheck+0x24>
		   && (mgr->refs == 0)) {
   1c80e:	8b43      	ldrh	r3, [r0, #26]
   1c810:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   1c812:	bf14      	ite	ne
   1c814:	2000      	movne	r0, #0
   1c816:	2004      	moveq	r0, #4
   1c818:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1c81a:	2b01      	cmp	r3, #1
   1c81c:	d105      	bne.n	1c82a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1c81e:	6803      	ldr	r3, [r0, #0]
   1c820:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   1c822:	bf0c      	ite	eq
   1c824:	2000      	moveq	r0, #0
   1c826:	2005      	movne	r0, #5
   1c828:	4770      	bx	lr
	int evt = EVT_NOP;
   1c82a:	2000      	movs	r0, #0
}
   1c82c:	4770      	bx	lr

0001c82e <validate_args>:
{
   1c82e:	b510      	push	{r4, lr}
   1c830:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1c832:	b140      	cbz	r0, 1c846 <validate_args+0x18>
   1c834:	b139      	cbz	r1, 1c846 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1c836:	1d08      	adds	r0, r1, #4
   1c838:	f7ff ff81 	bl	1c73e <sys_notify_validate>
	if ((rv == 0)
   1c83c:	b928      	cbnz	r0, 1c84a <validate_args+0x1c>
	    && ((cli->notify.flags
   1c83e:	68a3      	ldr	r3, [r4, #8]
   1c840:	f033 0303 	bics.w	r3, r3, #3
   1c844:	d001      	beq.n	1c84a <validate_args+0x1c>
		rv = -EINVAL;
   1c846:	f06f 0015 	mvn.w	r0, #21
}
   1c84a:	bd10      	pop	{r4, pc}

0001c84c <transition_complete>:
{
   1c84c:	b410      	push	{r4}
	__asm__ volatile(
   1c84e:	f04f 0420 	mov.w	r4, #32
   1c852:	f3ef 8211 	mrs	r2, BASEPRI
   1c856:	f384 8811 	msr	BASEPRI, r4
   1c85a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1c85e:	6141      	str	r1, [r0, #20]
}
   1c860:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1c862:	2101      	movs	r1, #1
   1c864:	f7e6 bf26 	b.w	36b4 <process_event>

0001c868 <onoff_manager_init>:
{
   1c868:	b538      	push	{r3, r4, r5, lr}
   1c86a:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1c86c:	4605      	mov	r5, r0
   1c86e:	b158      	cbz	r0, 1c888 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1c870:	b151      	cbz	r1, 1c888 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1c872:	680b      	ldr	r3, [r1, #0]
   1c874:	b143      	cbz	r3, 1c888 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1c876:	684b      	ldr	r3, [r1, #4]
   1c878:	b133      	cbz	r3, 1c888 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1c87a:	221c      	movs	r2, #28
   1c87c:	2100      	movs	r1, #0
   1c87e:	f002 fae3 	bl	1ee48 <memset>
   1c882:	612c      	str	r4, [r5, #16]
	return 0;
   1c884:	2000      	movs	r0, #0
}
   1c886:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1c888:	f06f 0015 	mvn.w	r0, #21
   1c88c:	e7fb      	b.n	1c886 <onoff_manager_init+0x1e>

0001c88e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1c88e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c892:	4604      	mov	r4, r0
   1c894:	460d      	mov	r5, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1c896:	f7ff ffca 	bl	1c82e <validate_args>

	if (rv < 0) {
   1c89a:	1e06      	subs	r6, r0, #0
   1c89c:	db36      	blt.n	1c90c <onoff_request+0x7e>
   1c89e:	f04f 0320 	mov.w	r3, #32
   1c8a2:	f3ef 8211 	mrs	r2, BASEPRI
   1c8a6:	f383 8811 	msr	BASEPRI, r3
   1c8aa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c8ae:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1c8b0:	8b21      	ldrh	r1, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1c8b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   1c8b6:	4283      	cmp	r3, r0
   1c8b8:	f001 0707 	and.w	r7, r1, #7
   1c8bc:	d034      	beq.n	1c928 <onoff_request+0x9a>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1c8be:	2f02      	cmp	r7, #2
   1c8c0:	d114      	bne.n	1c8ec <onoff_request+0x5e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1c8c2:	3301      	adds	r3, #1
   1c8c4:	8363      	strh	r3, [r4, #26]
	rv = state;
   1c8c6:	463e      	mov	r6, r7
		notify = true;
   1c8c8:	2301      	movs	r3, #1
	__asm__ volatile(
   1c8ca:	f382 8811 	msr	BASEPRI, r2
   1c8ce:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1c8d2:	b1db      	cbz	r3, 1c90c <onoff_request+0x7e>
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1c8d4:	2100      	movs	r1, #0
   1c8d6:	1d28      	adds	r0, r5, #4
   1c8d8:	f7ff ff45 	bl	1c766 <sys_notify_finalize>
	if (cb) {
   1c8dc:	4680      	mov	r8, r0
   1c8de:	b1a8      	cbz	r0, 1c90c <onoff_request+0x7e>
		cb(mgr, cli, state, res);
   1c8e0:	2300      	movs	r3, #0
   1c8e2:	463a      	mov	r2, r7
   1c8e4:	4629      	mov	r1, r5
   1c8e6:	4620      	mov	r0, r4
   1c8e8:	47c0      	blx	r8
   1c8ea:	e00f      	b.n	1c90c <onoff_request+0x7e>
	} else if ((state == ONOFF_STATE_OFF)
   1c8ec:	078b      	lsls	r3, r1, #30
   1c8ee:	d001      	beq.n	1c8f4 <onoff_request+0x66>
		   || (state == ONOFF_STATE_TO_ON)) {
   1c8f0:	2f06      	cmp	r7, #6
   1c8f2:	d10e      	bne.n	1c912 <onoff_request+0x84>
	parent->next = child;
   1c8f4:	2300      	movs	r3, #0
   1c8f6:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1c8f8:	6863      	ldr	r3, [r4, #4]
   1c8fa:	b993      	cbnz	r3, 1c922 <onoff_request+0x94>
	list->head = node;
   1c8fc:	e9c4 5500 	strd	r5, r5, [r4]
	if (start) {
   1c900:	463e      	mov	r6, r7
   1c902:	b967      	cbnz	r7, 1c91e <onoff_request+0x90>
		process_event(mgr, EVT_RECHECK, key);
   1c904:	2102      	movs	r1, #2
   1c906:	4620      	mov	r0, r4
   1c908:	f7e6 fed4 	bl	36b4 <process_event>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   1c90c:	4630      	mov	r0, r6
   1c90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rv = -EIO;
   1c912:	2f05      	cmp	r7, #5
   1c914:	bf0c      	ite	eq
   1c916:	f06f 0622 	mvneq.w	r6, #34	; 0x22
   1c91a:	f06f 0604 	mvnne.w	r6, #4
   1c91e:	2300      	movs	r3, #0
   1c920:	e7d3      	b.n	1c8ca <onoff_request+0x3c>
	parent->next = child;
   1c922:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1c924:	6065      	str	r5, [r4, #4]
}
   1c926:	e7eb      	b.n	1c900 <onoff_request+0x72>
		rv = -EAGAIN;
   1c928:	f06f 060a 	mvn.w	r6, #10
   1c92c:	e7f7      	b.n	1c91e <onoff_request+0x90>

0001c92e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1c92e:	4604      	mov	r4, r0
   1c930:	b508      	push	{r3, lr}
   1c932:	4608      	mov	r0, r1
   1c934:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1c936:	461a      	mov	r2, r3
   1c938:	47a0      	blx	r4
	return z_impl_k_current_get();
   1c93a:	f7ff f9fd 	bl	1bd38 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1c93e:	f7e9 fccf 	bl	62e0 <z_impl_k_thread_abort>

0001c942 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   1c942:	b510      	push	{r4, lr}
   1c944:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   1c946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c94a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c94e:	4620      	mov	r0, r4
   1c950:	f7fe fe74 	bl	1b63c <z_impl_k_queue_get>
   1c954:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   1c956:	2800      	cmp	r0, #0
   1c958:	d0f5      	beq.n	1c946 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c95a:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   1c95c:	6842      	ldr	r2, [r0, #4]
   1c95e:	f3bf 8f5b 	dmb	ish
   1c962:	e853 1f00 	ldrex	r1, [r3]
   1c966:	f021 0c01 	bic.w	ip, r1, #1
   1c96a:	e843 ce00 	strex	lr, ip, [r3]
   1c96e:	f1be 0f00 	cmp.w	lr, #0
   1c972:	d1f6      	bne.n	1c962 <z_work_q_main+0x20>
   1c974:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   1c978:	07cb      	lsls	r3, r1, #31
   1c97a:	d500      	bpl.n	1c97e <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   1c97c:	4790      	blx	r2
	z_impl_k_yield();
   1c97e:	f7ff f96d 	bl	1bc5c <z_impl_k_yield>
   1c982:	e7e0      	b.n	1c946 <z_work_q_main+0x4>

0001c984 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c984:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1c986:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c98a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1c98e:	bf2c      	ite	cs
   1c990:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1c994:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1c998:	4770      	bx	lr

0001c99a <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1c99a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1c99e:	6880      	ldr	r0, [r0, #8]
   1c9a0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1c9a4:	bf2c      	ite	cs
   1c9a6:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1c9aa:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1c9ae:	4770      	bx	lr

0001c9b0 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1c9b0:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1c9b2:	2201      	movs	r2, #1
   1c9b4:	f7ff ffe6 	bl	1c984 <chunk_field>
}
   1c9b8:	0840      	lsrs	r0, r0, #1
   1c9ba:	bd08      	pop	{r3, pc}

0001c9bc <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1c9bc:	6883      	ldr	r3, [r0, #8]
   1c9be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1c9c2:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1c9c6:	d308      	bcc.n	1c9da <set_chunk_used+0x1e>
		if (used) {
   1c9c8:	684b      	ldr	r3, [r1, #4]
   1c9ca:	b11a      	cbz	r2, 1c9d4 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
   1c9cc:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
   1c9d0:	604b      	str	r3, [r1, #4]
   1c9d2:	4770      	bx	lr
   1c9d4:	f023 0301 	bic.w	r3, r3, #1
   1c9d8:	e7fa      	b.n	1c9d0 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1c9da:	884b      	ldrh	r3, [r1, #2]
   1c9dc:	b11a      	cbz	r2, 1c9e6 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
   1c9de:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1c9e2:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1c9e4:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
   1c9e6:	f023 0301 	bic.w	r3, r3, #1
   1c9ea:	e7fa      	b.n	1c9e2 <set_chunk_used+0x26>

0001c9ec <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1c9ec:	0053      	lsls	r3, r2, #1
   1c9ee:	2201      	movs	r2, #1
   1c9f0:	f7ff bfd3 	b.w	1c99a <chunk_set>

0001c9f4 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1c9f4:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1c9f6:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1c9f8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1c9fc:	bf2c      	ite	cs
   1c9fe:	2002      	movcs	r0, #2
   1ca00:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1ca02:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1ca04:	fab0 f080 	clz	r0, r0
}
   1ca08:	f1c0 001f 	rsb	r0, r0, #31
   1ca0c:	4770      	bx	lr

0001ca0e <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1ca0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca12:	4616      	mov	r6, r2
   1ca14:	4604      	mov	r4, r0
   1ca16:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1ca18:	f7ff ffca 	bl	1c9b0 <chunk_size>
   1ca1c:	4631      	mov	r1, r6
   1ca1e:	4605      	mov	r5, r0
   1ca20:	4620      	mov	r0, r4
   1ca22:	f7ff ffc5 	bl	1c9b0 <chunk_size>
   1ca26:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1ca28:	462a      	mov	r2, r5
   1ca2a:	4639      	mov	r1, r7
   1ca2c:	4620      	mov	r0, r4
   1ca2e:	f7ff ffdd 	bl	1c9ec <set_chunk_size>
	return c + chunk_size(h, c);
   1ca32:	4631      	mov	r1, r6
   1ca34:	4620      	mov	r0, r4
   1ca36:	f7ff ffbb 	bl	1c9b0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ca3a:	462b      	mov	r3, r5
   1ca3c:	1831      	adds	r1, r6, r0
   1ca3e:	2200      	movs	r2, #0
   1ca40:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1ca42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ca46:	f7ff bfa8 	b.w	1c99a <chunk_set>

0001ca4a <split_chunks>:
{
   1ca4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca4e:	4614      	mov	r4, r2
   1ca50:	4605      	mov	r5, r0
   1ca52:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1ca54:	f7ff ffac 	bl	1c9b0 <chunk_size>
	size_t lsz = rc - lc;
   1ca58:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1ca5c:	1b37      	subs	r7, r6, r4
   1ca5e:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1ca60:	4642      	mov	r2, r8
   1ca62:	4631      	mov	r1, r6
   1ca64:	4628      	mov	r0, r5
   1ca66:	f7ff ffc1 	bl	1c9ec <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1ca6a:	463a      	mov	r2, r7
   1ca6c:	4621      	mov	r1, r4
   1ca6e:	4628      	mov	r0, r5
   1ca70:	f7ff ffbc 	bl	1c9ec <set_chunk_size>
   1ca74:	4643      	mov	r3, r8
   1ca76:	2200      	movs	r2, #0
   1ca78:	4621      	mov	r1, r4
   1ca7a:	4628      	mov	r0, r5
   1ca7c:	f7ff ff8d 	bl	1c99a <chunk_set>
	return c + chunk_size(h, c);
   1ca80:	4621      	mov	r1, r4
   1ca82:	4628      	mov	r0, r5
   1ca84:	f7ff ff94 	bl	1c9b0 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1ca88:	463b      	mov	r3, r7
   1ca8a:	1821      	adds	r1, r4, r0
   1ca8c:	2200      	movs	r2, #0
   1ca8e:	4628      	mov	r0, r5
}
   1ca90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ca94:	f7ff bf81 	b.w	1c99a <chunk_set>

0001ca98 <free_list_remove_bidx>:
{
   1ca98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca9c:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1ca9e:	2203      	movs	r2, #3
   1caa0:	460e      	mov	r6, r1
   1caa2:	4604      	mov	r4, r0
   1caa4:	f7ff ff6e 	bl	1c984 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1caa8:	4286      	cmp	r6, r0
   1caaa:	4605      	mov	r5, r0
   1caac:	f107 0804 	add.w	r8, r7, #4
   1cab0:	d10b      	bne.n	1caca <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1cab2:	2301      	movs	r3, #1
   1cab4:	fa03 f707 	lsl.w	r7, r3, r7
   1cab8:	68e3      	ldr	r3, [r4, #12]
   1caba:	ea23 0307 	bic.w	r3, r3, r7
   1cabe:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1cac0:	2300      	movs	r3, #0
   1cac2:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1cac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1caca:	4631      	mov	r1, r6
   1cacc:	2202      	movs	r2, #2
   1cace:	4620      	mov	r0, r4
   1cad0:	f7ff ff58 	bl	1c984 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1cad4:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1cad6:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1cad8:	4601      	mov	r1, r0
		b->next = second;
   1cada:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1cade:	4620      	mov	r0, r4
   1cae0:	2203      	movs	r2, #3
   1cae2:	f7ff ff5a 	bl	1c99a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cae6:	4633      	mov	r3, r6
   1cae8:	4629      	mov	r1, r5
   1caea:	4620      	mov	r0, r4
   1caec:	2202      	movs	r2, #2
}
   1caee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1caf2:	f7ff bf52 	b.w	1c99a <chunk_set>

0001caf6 <free_list_remove>:
{
   1caf6:	b538      	push	{r3, r4, r5, lr}
   1caf8:	4604      	mov	r4, r0
   1cafa:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   1cafc:	f7ff ff58 	bl	1c9b0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   1cb00:	68a3      	ldr	r3, [r4, #8]
   1cb02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cb06:	4601      	mov	r1, r0
   1cb08:	d301      	bcc.n	1cb0e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1cb0a:	2801      	cmp	r0, #1
   1cb0c:	d009      	beq.n	1cb22 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cb0e:	4620      	mov	r0, r4
   1cb10:	f7ff ff70 	bl	1c9f4 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1cb14:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cb16:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1cb18:	4620      	mov	r0, r4
}
   1cb1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1cb1e:	f7ff bfbb 	b.w	1ca98 <free_list_remove_bidx>
}
   1cb22:	bd38      	pop	{r3, r4, r5, pc}

0001cb24 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1cb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cb28:	4604      	mov	r4, r0
   1cb2a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1cb2c:	f7ff ff62 	bl	1c9f4 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1cb30:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1cb32:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1cb34:	4620      	mov	r0, r4
   1cb36:	f7ff ff5d 	bl	1c9f4 <bucket_idx>
   1cb3a:	42a8      	cmp	r0, r5
   1cb3c:	da03      	bge.n	1cb46 <alloc_chunk+0x22>
		return 0;
   1cb3e:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1cb40:	4630      	mov	r0, r6
   1cb42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1cb46:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1cb4a:	f8da 9010 	ldr.w	r9, [sl, #16]
   1cb4e:	f1b9 0f00 	cmp.w	r9, #0
   1cb52:	d019      	beq.n	1cb88 <alloc_chunk+0x64>
   1cb54:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1cb56:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1cb5a:	4620      	mov	r0, r4
   1cb5c:	4631      	mov	r1, r6
   1cb5e:	f7ff ff27 	bl	1c9b0 <chunk_size>
   1cb62:	4540      	cmp	r0, r8
   1cb64:	d305      	bcc.n	1cb72 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1cb66:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1cb68:	4631      	mov	r1, r6
   1cb6a:	4620      	mov	r0, r4
   1cb6c:	f7ff ff94 	bl	1ca98 <free_list_remove_bidx>
		return c;
   1cb70:	e7e6      	b.n	1cb40 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1cb72:	2203      	movs	r2, #3
   1cb74:	4631      	mov	r1, r6
   1cb76:	4620      	mov	r0, r4
   1cb78:	f7ff ff04 	bl	1c984 <chunk_field>
		} while (--i && b->next != first);
   1cb7c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1cb7e:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1cb82:	d001      	beq.n	1cb88 <alloc_chunk+0x64>
   1cb84:	4581      	cmp	r9, r0
   1cb86:	d1e6      	bne.n	1cb56 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1cb88:	68e3      	ldr	r3, [r4, #12]
   1cb8a:	3501      	adds	r5, #1
   1cb8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb90:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0) {
   1cb92:	401a      	ands	r2, r3
   1cb94:	d0d3      	beq.n	1cb3e <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1cb96:	fa92 f2a2 	rbit	r2, r2
   1cb9a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1cb9e:	1d13      	adds	r3, r2, #4
   1cba0:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1cba4:	e7e0      	b.n	1cb68 <alloc_chunk+0x44>

0001cba6 <free_list_add>:
{
   1cba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbaa:	4604      	mov	r4, r0
   1cbac:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
   1cbae:	f7ff feff 	bl	1c9b0 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
   1cbb2:	68a3      	ldr	r3, [r4, #8]
   1cbb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cbb8:	4601      	mov	r1, r0
   1cbba:	d301      	bcc.n	1cbc0 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1cbbc:	2801      	cmp	r0, #1
   1cbbe:	d035      	beq.n	1cc2c <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1cbc0:	4620      	mov	r0, r4
   1cbc2:	f7ff ff17 	bl	1c9f4 <bucket_idx>
	if (b->next == 0) {
   1cbc6:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1cbca:	6916      	ldr	r6, [r2, #16]
   1cbcc:	b99e      	cbnz	r6, 1cbf6 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1cbce:	2301      	movs	r3, #1
   1cbd0:	fa03 f000 	lsl.w	r0, r3, r0
   1cbd4:	68e3      	ldr	r3, [r4, #12]
   1cbd6:	4303      	orrs	r3, r0
   1cbd8:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1cbda:	4629      	mov	r1, r5
		b->next = c;
   1cbdc:	6115      	str	r5, [r2, #16]
   1cbde:	462b      	mov	r3, r5
   1cbe0:	2202      	movs	r2, #2
   1cbe2:	4620      	mov	r0, r4
   1cbe4:	f7ff fed9 	bl	1c99a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cbe8:	2203      	movs	r2, #3
   1cbea:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1cbec:	4620      	mov	r0, r4
}
   1cbee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1cbf2:	f7ff bed2 	b.w	1c99a <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1cbf6:	2202      	movs	r2, #2
   1cbf8:	4631      	mov	r1, r6
   1cbfa:	4620      	mov	r0, r4
   1cbfc:	f7ff fec2 	bl	1c984 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1cc00:	2202      	movs	r2, #2
   1cc02:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1cc04:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1cc06:	4629      	mov	r1, r5
   1cc08:	4620      	mov	r0, r4
   1cc0a:	f7ff fec6 	bl	1c99a <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1cc0e:	4633      	mov	r3, r6
   1cc10:	2203      	movs	r2, #3
   1cc12:	4629      	mov	r1, r5
   1cc14:	4620      	mov	r0, r4
   1cc16:	f7ff fec0 	bl	1c99a <chunk_set>
   1cc1a:	2203      	movs	r2, #3
   1cc1c:	4639      	mov	r1, r7
   1cc1e:	462b      	mov	r3, r5
   1cc20:	4620      	mov	r0, r4
   1cc22:	f7ff feba 	bl	1c99a <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1cc26:	2202      	movs	r2, #2
   1cc28:	4631      	mov	r1, r6
   1cc2a:	e7df      	b.n	1cbec <free_list_add+0x46>
   1cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cc30 <sys_heap_free>:
{
   1cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1cc32:	2900      	cmp	r1, #0
   1cc34:	d050      	beq.n	1ccd8 <sys_heap_free+0xa8>
	struct z_heap *h = heap->heap;
   1cc36:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1cc38:	68ab      	ldr	r3, [r5, #8]
   1cc3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cc3e:	bf2c      	ite	cs
   1cc40:	2408      	movcs	r4, #8
   1cc42:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1cc44:	1b0c      	subs	r4, r1, r4
   1cc46:	1b64      	subs	r4, r4, r5
   1cc48:	bf48      	it	mi
   1cc4a:	3407      	addmi	r4, #7
   1cc4c:	10e4      	asrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1cc4e:	2200      	movs	r2, #0
   1cc50:	4621      	mov	r1, r4
   1cc52:	4628      	mov	r0, r5
   1cc54:	f7ff feb2 	bl	1c9bc <set_chunk_used>
	return c + chunk_size(h, c);
   1cc58:	4621      	mov	r1, r4
   1cc5a:	f7ff fea9 	bl	1c9b0 <chunk_size>
   1cc5e:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1cc60:	2201      	movs	r2, #1
   1cc62:	4631      	mov	r1, r6
   1cc64:	4628      	mov	r0, r5
   1cc66:	f7ff fe8d 	bl	1c984 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1cc6a:	07c3      	lsls	r3, r0, #31
   1cc6c:	d40c      	bmi.n	1cc88 <sys_heap_free+0x58>
		free_list_remove(h, right_chunk(h, c));
   1cc6e:	4631      	mov	r1, r6
   1cc70:	4628      	mov	r0, r5
   1cc72:	f7ff ff40 	bl	1caf6 <free_list_remove>
	return c + chunk_size(h, c);
   1cc76:	4621      	mov	r1, r4
   1cc78:	4628      	mov	r0, r5
   1cc7a:	f7ff fe99 	bl	1c9b0 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1cc7e:	4621      	mov	r1, r4
   1cc80:	1822      	adds	r2, r4, r0
   1cc82:	4628      	mov	r0, r5
   1cc84:	f7ff fec3 	bl	1ca0e <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1cc88:	2200      	movs	r2, #0
   1cc8a:	4621      	mov	r1, r4
   1cc8c:	4628      	mov	r0, r5
   1cc8e:	f7ff fe79 	bl	1c984 <chunk_field>
   1cc92:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1;
   1cc94:	2201      	movs	r2, #1
   1cc96:	4639      	mov	r1, r7
   1cc98:	4628      	mov	r0, r5
   1cc9a:	f7ff fe73 	bl	1c984 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1cc9e:	f010 0601 	ands.w	r6, r0, #1
   1cca2:	d113      	bne.n	1cccc <sys_heap_free+0x9c>
		free_list_remove(h, left_chunk(h, c));
   1cca4:	4639      	mov	r1, r7
   1cca6:	4628      	mov	r0, r5
   1cca8:	f7ff ff25 	bl	1caf6 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1ccac:	4621      	mov	r1, r4
   1ccae:	4632      	mov	r2, r6
   1ccb0:	4628      	mov	r0, r5
   1ccb2:	f7ff fe67 	bl	1c984 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1ccb6:	4622      	mov	r2, r4
   1ccb8:	1a21      	subs	r1, r4, r0
   1ccba:	4628      	mov	r0, r5
   1ccbc:	f7ff fea7 	bl	1ca0e <merge_chunks>
   1ccc0:	4621      	mov	r1, r4
   1ccc2:	4632      	mov	r2, r6
   1ccc4:	4628      	mov	r0, r5
   1ccc6:	f7ff fe5d 	bl	1c984 <chunk_field>
   1ccca:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1cccc:	4621      	mov	r1, r4
   1ccce:	4628      	mov	r0, r5
}
   1ccd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1ccd4:	f7ff bf67 	b.w	1cba6 <free_list_add>
}
   1ccd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ccda <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1ccda:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0) {
   1ccdc:	b909      	cbnz	r1, 1cce2 <sys_heap_alloc+0x8>
		return NULL;
   1ccde:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1cce0:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1cce2:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1cce4:	68ab      	ldr	r3, [r5, #8]
   1cce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1ccea:	bf2c      	ite	cs
   1ccec:	2208      	movcs	r2, #8
   1ccee:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1ccf0:	1dcc      	adds	r4, r1, #7
   1ccf2:	4414      	add	r4, r2
   1ccf4:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1ccf6:	4621      	mov	r1, r4
   1ccf8:	4628      	mov	r0, r5
   1ccfa:	f7ff ff13 	bl	1cb24 <alloc_chunk>
	if (c == 0) {
   1ccfe:	4606      	mov	r6, r0
   1cd00:	2800      	cmp	r0, #0
   1cd02:	d0ec      	beq.n	1ccde <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1cd04:	4601      	mov	r1, r0
   1cd06:	4628      	mov	r0, r5
   1cd08:	f7ff fe52 	bl	1c9b0 <chunk_size>
   1cd0c:	42a0      	cmp	r0, r4
   1cd0e:	d909      	bls.n	1cd24 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1cd10:	4434      	add	r4, r6
   1cd12:	4631      	mov	r1, r6
   1cd14:	4628      	mov	r0, r5
   1cd16:	4622      	mov	r2, r4
   1cd18:	f7ff fe97 	bl	1ca4a <split_chunks>
		free_list_add(h, c + chunk_sz);
   1cd1c:	4621      	mov	r1, r4
   1cd1e:	4628      	mov	r0, r5
   1cd20:	f7ff ff41 	bl	1cba6 <free_list_add>
	set_chunk_used(h, c, true);
   1cd24:	4628      	mov	r0, r5
   1cd26:	2201      	movs	r2, #1
   1cd28:	4631      	mov	r1, r6
   1cd2a:	f7ff fe47 	bl	1c9bc <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1cd2e:	68ab      	ldr	r3, [r5, #8]
   1cd30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1cd34:	bf2c      	ite	cs
   1cd36:	2008      	movcs	r0, #8
   1cd38:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1cd3a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1cd3e:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1cd40:	e7ce      	b.n	1cce0 <sys_heap_alloc+0x6>

0001cd42 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1cd42:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1cd46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1cd48:	bf2c      	ite	cs
   1cd4a:	2508      	movcs	r5, #8
   1cd4c:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1cd4e:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1cd50:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1cd52:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1cd54:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1cd58:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1cd5c:	2200      	movs	r2, #0
   1cd5e:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1cd60:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1cd62:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1cd64:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1cd66:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1cd6a:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1cd6c:	4629      	mov	r1, r5
	h->len = buf_sz;
   1cd6e:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1cd70:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1cd72:	4620      	mov	r0, r4
   1cd74:	f7ff fe3e 	bl	1c9f4 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1cd78:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
   1cd7a:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1cd7c:	1c41      	adds	r1, r0, #1
   1cd7e:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1cd80:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1cd84:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1cd86:	428b      	cmp	r3, r1
   1cd88:	db29      	blt.n	1cdde <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1cd8a:	4632      	mov	r2, r6
   1cd8c:	4620      	mov	r0, r4
   1cd8e:	2100      	movs	r1, #0
   1cd90:	f7ff fe2c 	bl	1c9ec <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1cd94:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1cd96:	4620      	mov	r0, r4
   1cd98:	2201      	movs	r2, #1
   1cd9a:	2100      	movs	r1, #0
   1cd9c:	f7ff fe0e 	bl	1c9bc <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1cda0:	463a      	mov	r2, r7
   1cda2:	4631      	mov	r1, r6
   1cda4:	f7ff fe22 	bl	1c9ec <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1cda8:	4633      	mov	r3, r6
   1cdaa:	4631      	mov	r1, r6
   1cdac:	4620      	mov	r0, r4
   1cdae:	2200      	movs	r2, #0
   1cdb0:	f7ff fdf3 	bl	1c99a <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1cdb4:	4629      	mov	r1, r5
   1cdb6:	4620      	mov	r0, r4
   1cdb8:	2200      	movs	r2, #0
   1cdba:	f7ff fe17 	bl	1c9ec <set_chunk_size>
   1cdbe:	463b      	mov	r3, r7
   1cdc0:	4629      	mov	r1, r5
   1cdc2:	4620      	mov	r0, r4
   1cdc4:	2200      	movs	r2, #0
   1cdc6:	f7ff fde8 	bl	1c99a <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1cdca:	4629      	mov	r1, r5
   1cdcc:	4620      	mov	r0, r4
   1cdce:	2201      	movs	r2, #1
   1cdd0:	f7ff fdf4 	bl	1c9bc <set_chunk_used>

	free_list_add(h, chunk0_size);
   1cdd4:	4631      	mov	r1, r6
}
   1cdd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1cdda:	f7ff bee4 	b.w	1cba6 <free_list_add>
		h->buckets[i].next = 0;
   1cdde:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1cde2:	3301      	adds	r3, #1
   1cde4:	e7cf      	b.n	1cd86 <sys_heap_init+0x44>

0001cde6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1cde6:	4770      	bx	lr

0001cde8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1cde8:	2300      	movs	r3, #0
	list->head = NULL;
   1cdea:	e9c0 3300 	strd	r3, r3, [r0]
}
   1cdee:	4770      	bx	lr

0001cdf0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1cdf0:	6803      	ldr	r3, [r0, #0]
   1cdf2:	b923      	cbnz	r3, 1cdfe <log_list_add_tail+0xe>
		list->head = msg;
   1cdf4:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1cdf6:	2300      	movs	r3, #0
	list->tail = msg;
   1cdf8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1cdfa:	600b      	str	r3, [r1, #0]
}
   1cdfc:	4770      	bx	lr
		list->tail->next = msg;
   1cdfe:	6843      	ldr	r3, [r0, #4]
   1ce00:	6019      	str	r1, [r3, #0]
   1ce02:	e7f8      	b.n	1cdf6 <log_list_add_tail+0x6>

0001ce04 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1ce04:	6800      	ldr	r0, [r0, #0]
   1ce06:	4770      	bx	lr

0001ce08 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1ce08:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1ce0a:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1ce0c:	b108      	cbz	r0, 1ce12 <log_list_head_get+0xa>
		list->head = list->head->next;
   1ce0e:	6802      	ldr	r2, [r0, #0]
   1ce10:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1ce12:	4770      	bx	lr

0001ce14 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1ce14:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1ce16:	f7e6 fff9 	bl	3e0c <log_msg_chunk_alloc>

	if (msg != NULL) {
   1ce1a:	b118      	cbz	r0, 1ce24 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1ce1c:	2301      	movs	r3, #1
   1ce1e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1ce20:	2300      	movs	r3, #0
   1ce22:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1ce24:	bd08      	pop	{r3, pc}

0001ce26 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   1ce26:	f7e8 bc7d 	b.w	5724 <z_timer_cycle_get_32>

0001ce2a <dummy_timestamp>:
   1ce2a:	2000      	movs	r0, #0
   1ce2c:	4770      	bx	lr

0001ce2e <z_log_get_s_mask>:
{
   1ce2e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ce30:	4605      	mov	r5, r0
	uint32_t mask = 0;
   1ce32:	2000      	movs	r0, #0
	uint32_t arg = 0;
   1ce34:	4603      	mov	r3, r0
	bool arm = false;
   1ce36:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1ce38:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1ce3a:	f815 4b01 	ldrb.w	r4, [r5], #1
   1ce3e:	b10c      	cbz	r4, 1ce44 <z_log_get_s_mask+0x16>
   1ce40:	428b      	cmp	r3, r1
   1ce42:	d300      	bcc.n	1ce46 <z_log_get_s_mask+0x18>
}
   1ce44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1ce46:	2c25      	cmp	r4, #37	; 0x25
   1ce48:	d102      	bne.n	1ce50 <z_log_get_s_mask+0x22>
			arm = !arm;
   1ce4a:	f082 0201 	eor.w	r2, r2, #1
   1ce4e:	e7f4      	b.n	1ce3a <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1ce50:	2a00      	cmp	r2, #0
   1ce52:	d0f2      	beq.n	1ce3a <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ce54:	f044 0620 	orr.w	r6, r4, #32
   1ce58:	3e61      	subs	r6, #97	; 0x61
   1ce5a:	2e19      	cmp	r6, #25
   1ce5c:	d8ed      	bhi.n	1ce3a <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1ce5e:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1ce60:	bf04      	itt	eq
   1ce62:	fa07 f203 	lsleq.w	r2, r7, r3
   1ce66:	4310      	orreq	r0, r2
			arg++;
   1ce68:	3301      	adds	r3, #1
			arm = false;
   1ce6a:	2200      	movs	r2, #0
   1ce6c:	e7e5      	b.n	1ce3a <z_log_get_s_mask+0xc>

0001ce6e <log_0>:
{
   1ce6e:	b538      	push	{r3, r4, r5, lr}
   1ce70:	4605      	mov	r5, r0
   1ce72:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1ce74:	f7ff ffce 	bl	1ce14 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ce78:	b128      	cbz	r0, 1ce86 <log_0+0x18>
		msg->str = str;
   1ce7a:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1ce7c:	4621      	mov	r1, r4
}
   1ce7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1ce82:	f7e6 bedd 	b.w	3c40 <msg_finalize>
}
   1ce86:	bd38      	pop	{r3, r4, r5, pc}

0001ce88 <log_1>:
{
   1ce88:	b570      	push	{r4, r5, r6, lr}
   1ce8a:	4606      	mov	r6, r0
   1ce8c:	460d      	mov	r5, r1
   1ce8e:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1ce90:	f7ff ffc0 	bl	1ce14 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1ce94:	b158      	cbz	r0, 1ceae <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1ce96:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1ce98:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1ce9a:	2101      	movs	r1, #1
   1ce9c:	f361 1207 	bfi	r2, r1, #4, #4
   1cea0:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1cea2:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1cea4:	4621      	mov	r1, r4
}
   1cea6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1ceaa:	f7e6 bec9 	b.w	3c40 <msg_finalize>
}
   1ceae:	bd70      	pop	{r4, r5, r6, pc}

0001ceb0 <log_2>:
{
   1ceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ceb4:	4680      	mov	r8, r0
   1ceb6:	460f      	mov	r7, r1
   1ceb8:	4616      	mov	r6, r2
   1ceba:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cebc:	f7ff ffaa 	bl	1ce14 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cec0:	b168      	cbz	r0, 1cede <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1cec2:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1cec4:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1cec8:	2202      	movs	r2, #2
   1ceca:	f362 1307 	bfi	r3, r2, #4, #4
   1cece:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1ced0:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1ced4:	4629      	mov	r1, r5
}
   1ced6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1ceda:	f7e6 beb1 	b.w	3c40 <msg_finalize>
}
   1cede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cee2 <log_3>:
{
   1cee2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cee6:	4680      	mov	r8, r0
   1cee8:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1ceec:	460f      	mov	r7, r1
   1ceee:	4616      	mov	r6, r2
   1cef0:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1cef2:	f7ff ff8f 	bl	1ce14 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1cef6:	b170      	cbz	r0, 1cf16 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1cef8:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1cefa:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1cefe:	2203      	movs	r2, #3
   1cf00:	f362 1307 	bfi	r3, r2, #4, #4
   1cf04:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1cf06:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1cf0a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1cf0c:	4649      	mov	r1, r9
}
   1cf0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1cf12:	f7e6 be95 	b.w	3c40 <msg_finalize>
}
   1cf16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001cf1a <log_n>:
{
   1cf1a:	b510      	push	{r4, lr}
   1cf1c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1cf1e:	f000 f89f 	bl	1d060 <log_msg_create_n>
		if (msg == NULL) {
   1cf22:	b120      	cbz	r0, 1cf2e <log_n+0x14>
		msg_finalize(msg, src_level);
   1cf24:	4621      	mov	r1, r4
}
   1cf26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1cf2a:	f7e6 be89 	b.w	3c40 <msg_finalize>
}
   1cf2e:	bd10      	pop	{r4, pc}

0001cf30 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1cf30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cf34:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1cf36:	8903      	ldrh	r3, [r0, #8]
{
   1cf38:	f89d 8020 	ldrb.w	r8, [sp, #32]
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1cf3c:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
{
   1cf40:	460e      	mov	r6, r1
   1cf42:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1cf44:	ea4f 0293 	mov.w	r2, r3, lsr #2
	if (offset >= available_len) {
   1cf48:	d303      	bcc.n	1cf52 <log_msg_hexdump_data_op+0x22>
		*length = 0;
   1cf4a:	2300      	movs	r3, #0
   1cf4c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1cf4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1cf52:	680b      	ldr	r3, [r1, #0]
   1cf54:	4423      	add	r3, r4
   1cf56:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1cf58:	bf84      	itt	hi
   1cf5a:	1b13      	subhi	r3, r2, r4
   1cf5c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cf5e:	2a0c      	cmp	r2, #12
	req_len = *length;
   1cf60:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1cf64:	d929      	bls.n	1cfba <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1cf66:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1cf68:	6947      	ldr	r7, [r0, #20]
	if (offset < chunk_len) {
   1cf6a:	d82c      	bhi.n	1cfc6 <log_msg_hexdump_data_op+0x96>
		head_data = msg->payload.ext.data.bytes;
   1cf6c:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1cf6e:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cf70:	454a      	cmp	r2, r9
   1cf72:	bf28      	it	cs
   1cf74:	464a      	movcs	r2, r9
   1cf76:	4615      	mov	r5, r2
		if (put_op) {
   1cf78:	4420      	add	r0, r4
   1cf7a:	f1b8 0f00 	cmp.w	r8, #0
   1cf7e:	d01f      	beq.n	1cfc0 <log_msg_hexdump_data_op+0x90>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1cf80:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cf82:	f001 ff36 	bl	1edf2 <memcpy>
		req_len -= cpy_len;
   1cf86:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1cf8a:	442e      	add	r6, r5
	while (req_len > 0) {
   1cf8c:	f1b9 0f00 	cmp.w	r9, #0
   1cf90:	d0dd      	beq.n	1cf4e <log_msg_hexdump_data_op+0x1e>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1cf92:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1cf96:	454d      	cmp	r5, r9
   1cf98:	bf28      	it	cs
   1cf9a:	464d      	movcs	r5, r9
		if (put_op) {
   1cf9c:	1d20      	adds	r0, r4, #4
   1cf9e:	4438      	add	r0, r7
			(void)memcpy(&cont->payload.bytes[offset],
   1cfa0:	462a      	mov	r2, r5
		if (put_op) {
   1cfa2:	f1b8 0f00 	cmp.w	r8, #0
   1cfa6:	d014      	beq.n	1cfd2 <log_msg_hexdump_data_op+0xa2>
			(void)memcpy(&cont->payload.bytes[offset],
   1cfa8:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cfaa:	f001 ff22 	bl	1edf2 <memcpy>
		req_len -= cpy_len;
   1cfae:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1cfb2:	683f      	ldr	r7, [r7, #0]
		data += cpy_len;
   1cfb4:	442e      	add	r6, r5
		offset = 0;
   1cfb6:	2400      	movs	r4, #0
   1cfb8:	e7e8      	b.n	1cf8c <log_msg_hexdump_data_op+0x5c>
		head_data = msg->payload.single.bytes;
   1cfba:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1cfbc:	2700      	movs	r7, #0
   1cfbe:	e7d7      	b.n	1cf70 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1cfc0:	4601      	mov	r1, r0
   1cfc2:	4630      	mov	r0, r6
   1cfc4:	e7dd      	b.n	1cf82 <log_msg_hexdump_data_op+0x52>
		offset -= chunk_len;
   1cfc6:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1cfc8:	2c1b      	cmp	r4, #27
   1cfca:	d9df      	bls.n	1cf8c <log_msg_hexdump_data_op+0x5c>
			cont = cont->next;
   1cfcc:	683f      	ldr	r7, [r7, #0]
			offset -= chunk_len;
   1cfce:	3c1c      	subs	r4, #28
   1cfd0:	e7fa      	b.n	1cfc8 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1cfd2:	4601      	mov	r1, r0
   1cfd4:	4630      	mov	r0, r6
   1cfd6:	e7e8      	b.n	1cfaa <log_msg_hexdump_data_op+0x7a>

0001cfd8 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cfd8:	3004      	adds	r0, #4
   1cfda:	f3bf 8f5b 	dmb	ish
   1cfde:	e850 3f00 	ldrex	r3, [r0]
   1cfe2:	3301      	adds	r3, #1
   1cfe4:	e840 3200 	strex	r2, r3, [r0]
   1cfe8:	2a00      	cmp	r2, #0
   1cfea:	d1f8      	bne.n	1cfde <log_msg_get+0x6>
   1cfec:	f3bf 8f5b 	dmb	ish
}
   1cff0:	4770      	bx	lr

0001cff2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1cff2:	7a40      	ldrb	r0, [r0, #9]
}
   1cff4:	0900      	lsrs	r0, r0, #4
   1cff6:	4770      	bx	lr

0001cff8 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1cff8:	7a43      	ldrb	r3, [r0, #9]
   1cffa:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1cffe:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1d002:	d216      	bcs.n	1d032 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d004:	2a03      	cmp	r2, #3
   1d006:	d803      	bhi.n	1d010 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1d008:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d00c:	6948      	ldr	r0, [r1, #20]
   1d00e:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1d010:	2901      	cmp	r1, #1
   1d012:	d803      	bhi.n	1d01c <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1d014:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1d018:	6988      	ldr	r0, [r1, #24]
   1d01a:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1d01c:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d01e:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1d020:	2906      	cmp	r1, #6
   1d022:	d803      	bhi.n	1d02c <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1d024:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1d028:	6848      	ldr	r0, [r1, #4]
   1d02a:	4770      	bx	lr
		cont = cont->next;
   1d02c:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1d02e:	3907      	subs	r1, #7
		cont = cont->next;
   1d030:	e7f6      	b.n	1d020 <log_msg_arg_get+0x28>
		return 0;
   1d032:	2000      	movs	r0, #0
}
   1d034:	4770      	bx	lr

0001d036 <log_msg_put>:
{
   1d036:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1d038:	1d02      	adds	r2, r0, #4
   1d03a:	f3bf 8f5b 	dmb	ish
   1d03e:	e852 1f00 	ldrex	r1, [r2]
   1d042:	3901      	subs	r1, #1
   1d044:	e842 1c00 	strex	ip, r1, [r2]
   1d048:	f1bc 0f00 	cmp.w	ip, #0
   1d04c:	d1f7      	bne.n	1d03e <log_msg_put+0x8>
   1d04e:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1d052:	685b      	ldr	r3, [r3, #4]
   1d054:	b90b      	cbnz	r3, 1d05a <log_msg_put+0x24>
		msg_free(msg);
   1d056:	f7e6 beed 	b.w	3e34 <msg_free>
}
   1d05a:	4770      	bx	lr

0001d05c <log_msg_str_get>:
}
   1d05c:	6900      	ldr	r0, [r0, #16]
   1d05e:	4770      	bx	lr

0001d060 <log_msg_create_n>:
{
   1d060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d064:	4681      	mov	r9, r0
   1d066:	4688      	mov	r8, r1
   1d068:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1d06a:	f7e6 fecf 	bl	3e0c <log_msg_chunk_alloc>
	if (msg != NULL) {
   1d06e:	4604      	mov	r4, r0
   1d070:	b330      	cbz	r0, 1d0c0 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
   1d072:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1d074:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d076:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1d078:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1d07a:	8107      	strh	r7, [r0, #8]
   1d07c:	d909      	bls.n	1d092 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
   1d07e:	2202      	movs	r2, #2
   1d080:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d082:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   1d086:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   1d08a:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   1d08c:	f1ba 0f00 	cmp.w	sl, #0
   1d090:	dc0e      	bgt.n	1d0b0 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
   1d092:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1d094:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1d098:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d09c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1d09e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1d0a0:	d818      	bhi.n	1d0d4 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
   1d0a2:	00aa      	lsls	r2, r5, #2
   1d0a4:	4641      	mov	r1, r8
   1d0a6:	f104 0014 	add.w	r0, r4, #20
   1d0aa:	f001 fea2 	bl	1edf2 <memcpy>
	while (nargs != 0U) {
   1d0ae:	e007      	b.n	1d0c0 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1d0b0:	f7e6 feac 	bl	3e0c <log_msg_chunk_alloc>
		if (cont == NULL) {
   1d0b4:	4606      	mov	r6, r0
   1d0b6:	b930      	cbnz	r0, 1d0c6 <log_msg_create_n+0x66>
			msg_free(msg);
   1d0b8:	4620      	mov	r0, r4
   1d0ba:	f7e6 febb 	bl	3e34 <msg_free>
			return NULL;
   1d0be:	4634      	mov	r4, r6
}
   1d0c0:	4620      	mov	r0, r4
   1d0c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1d0c6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1d0ca:	f1aa 0a07 	sub.w	sl, sl, #7
   1d0ce:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   1d0d0:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1d0d2:	e7db      	b.n	1d08c <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
   1d0d4:	4641      	mov	r1, r8
   1d0d6:	2208      	movs	r2, #8
   1d0d8:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1d0dc:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1d0de:	f001 fe88 	bl	1edf2 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1d0e2:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1d0e4:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1d0e8:	2d07      	cmp	r5, #7
   1d0ea:	462e      	mov	r6, r5
   1d0ec:	bf28      	it	cs
   1d0ee:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1d0f0:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1d0f4:	4641      	mov	r1, r8
   1d0f6:	1d38      	adds	r0, r7, #4
   1d0f8:	464a      	mov	r2, r9
   1d0fa:	f001 fe7a 	bl	1edf2 <memcpy>
	while (nargs != 0U) {
   1d0fe:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1d100:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   1d102:	44c8      	add	r8, r9
	while (nargs != 0U) {
   1d104:	d1f0      	bne.n	1d0e8 <log_msg_create_n+0x88>
   1d106:	e7db      	b.n	1d0c0 <log_msg_create_n+0x60>

0001d108 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1d108:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1d10a:	2400      	movs	r4, #0
   1d10c:	9400      	str	r4, [sp, #0]
   1d10e:	f7ff ff0f 	bl	1cf30 <log_msg_hexdump_data_op>
}
   1d112:	b002      	add	sp, #8
   1d114:	bd10      	pop	{r4, pc}

0001d116 <buffer_write>:
{
   1d116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d118:	4606      	mov	r6, r0
   1d11a:	460d      	mov	r5, r1
   1d11c:	4614      	mov	r4, r2
   1d11e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1d120:	4621      	mov	r1, r4
   1d122:	4628      	mov	r0, r5
   1d124:	463a      	mov	r2, r7
   1d126:	47b0      	blx	r6
	} while (len != 0);
   1d128:	1a24      	subs	r4, r4, r0
		buf += processed;
   1d12a:	4405      	add	r5, r0
	} while (len != 0);
   1d12c:	d1f8      	bne.n	1d120 <buffer_write+0xa>
}
   1d12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d130 <std_print>:
{
   1d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d134:	b08e      	sub	sp, #56	; 0x38
   1d136:	af0e      	add	r7, sp, #56	; 0x38
   1d138:	4680      	mov	r8, r0
   1d13a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1d13c:	f7ff ff8e 	bl	1d05c <log_msg_str_get>
   1d140:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1d142:	4640      	mov	r0, r8
   1d144:	f7ff ff55 	bl	1cff2 <log_msg_nargs_get>
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1d148:	0083      	lsls	r3, r0, #2
   1d14a:	3307      	adds	r3, #7
   1d14c:	f023 0307 	bic.w	r3, r3, #7
   1d150:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1d154:	4682      	mov	sl, r0
	uint32_t *args = alloca(sizeof(uint32_t)*nargs);
   1d156:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1d158:	f04f 0900 	mov.w	r9, #0
   1d15c:	45d1      	cmp	r9, sl
   1d15e:	d116      	bne.n	1d18e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1d160:	4640      	mov	r0, r8
   1d162:	f7ff ff46 	bl	1cff2 <log_msg_nargs_get>
   1d166:	280f      	cmp	r0, #15
   1d168:	d81e      	bhi.n	1d1a8 <std_print+0x78>
   1d16a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1d16e:	0019      	.short	0x0019
   1d170:	00260020 	.word	0x00260020
   1d174:	0036002d 	.word	0x0036002d
   1d178:	004e0041 	.word	0x004e0041
   1d17c:	006e005d 	.word	0x006e005d
   1d180:	00960081 	.word	0x00960081
   1d184:	00c600ad 	.word	0x00c600ad
   1d188:	00fe00e1 	.word	0x00fe00e1
   1d18c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1d18e:	4649      	mov	r1, r9
   1d190:	4640      	mov	r0, r8
   1d192:	f7ff ff31 	bl	1cff8 <log_msg_arg_get>
   1d196:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1d19a:	f109 0901 	add.w	r9, r9, #1
   1d19e:	e7dd      	b.n	1d15c <std_print+0x2c>
		print_formatted(log_output, str);
   1d1a0:	4631      	mov	r1, r6
   1d1a2:	4628      	mov	r0, r5
   1d1a4:	f7e6 fe84 	bl	3eb0 <print_formatted>
}
   1d1a8:	46bd      	mov	sp, r7
   1d1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   1d1ae:	6822      	ldr	r2, [r4, #0]
   1d1b0:	4631      	mov	r1, r6
   1d1b2:	4628      	mov	r0, r5
   1d1b4:	f7e6 fe7c 	bl	3eb0 <print_formatted>
		break;
   1d1b8:	e7f6      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   1d1ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d1be:	4631      	mov	r1, r6
   1d1c0:	4628      	mov	r0, r5
   1d1c2:	f7e6 fe75 	bl	3eb0 <print_formatted>
		break;
   1d1c6:	e7ef      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   1d1c8:	68a3      	ldr	r3, [r4, #8]
   1d1ca:	9300      	str	r3, [sp, #0]
   1d1cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d1d0:	4631      	mov	r1, r6
   1d1d2:	4628      	mov	r0, r5
   1d1d4:	f7e6 fe6c 	bl	3eb0 <print_formatted>
		break;
   1d1d8:	e7e6      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d1da:	68e3      	ldr	r3, [r4, #12]
   1d1dc:	9301      	str	r3, [sp, #4]
   1d1de:	68a3      	ldr	r3, [r4, #8]
   1d1e0:	9300      	str	r3, [sp, #0]
   1d1e2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d1e6:	4631      	mov	r1, r6
   1d1e8:	4628      	mov	r0, r5
   1d1ea:	f7e6 fe61 	bl	3eb0 <print_formatted>
		break;
   1d1ee:	e7db      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d1f0:	6923      	ldr	r3, [r4, #16]
   1d1f2:	9302      	str	r3, [sp, #8]
   1d1f4:	68e3      	ldr	r3, [r4, #12]
   1d1f6:	9301      	str	r3, [sp, #4]
   1d1f8:	68a3      	ldr	r3, [r4, #8]
   1d1fa:	9300      	str	r3, [sp, #0]
   1d1fc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d200:	4631      	mov	r1, r6
   1d202:	4628      	mov	r0, r5
   1d204:	f7e6 fe54 	bl	3eb0 <print_formatted>
		break;
   1d208:	e7ce      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d20a:	6963      	ldr	r3, [r4, #20]
   1d20c:	9303      	str	r3, [sp, #12]
   1d20e:	6923      	ldr	r3, [r4, #16]
   1d210:	9302      	str	r3, [sp, #8]
   1d212:	68e3      	ldr	r3, [r4, #12]
   1d214:	9301      	str	r3, [sp, #4]
   1d216:	68a3      	ldr	r3, [r4, #8]
   1d218:	9300      	str	r3, [sp, #0]
   1d21a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d21e:	4631      	mov	r1, r6
   1d220:	4628      	mov	r0, r5
   1d222:	f7e6 fe45 	bl	3eb0 <print_formatted>
		break;
   1d226:	e7bf      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d228:	69a3      	ldr	r3, [r4, #24]
   1d22a:	9304      	str	r3, [sp, #16]
   1d22c:	6963      	ldr	r3, [r4, #20]
   1d22e:	9303      	str	r3, [sp, #12]
   1d230:	6923      	ldr	r3, [r4, #16]
   1d232:	9302      	str	r3, [sp, #8]
   1d234:	68e3      	ldr	r3, [r4, #12]
   1d236:	9301      	str	r3, [sp, #4]
   1d238:	68a3      	ldr	r3, [r4, #8]
   1d23a:	9300      	str	r3, [sp, #0]
   1d23c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d240:	4631      	mov	r1, r6
   1d242:	4628      	mov	r0, r5
   1d244:	f7e6 fe34 	bl	3eb0 <print_formatted>
		break;
   1d248:	e7ae      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d24a:	69e3      	ldr	r3, [r4, #28]
   1d24c:	9305      	str	r3, [sp, #20]
   1d24e:	69a3      	ldr	r3, [r4, #24]
   1d250:	9304      	str	r3, [sp, #16]
   1d252:	6963      	ldr	r3, [r4, #20]
   1d254:	9303      	str	r3, [sp, #12]
   1d256:	6923      	ldr	r3, [r4, #16]
   1d258:	9302      	str	r3, [sp, #8]
   1d25a:	68e3      	ldr	r3, [r4, #12]
   1d25c:	9301      	str	r3, [sp, #4]
   1d25e:	68a3      	ldr	r3, [r4, #8]
   1d260:	9300      	str	r3, [sp, #0]
   1d262:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d266:	4631      	mov	r1, r6
   1d268:	4628      	mov	r0, r5
   1d26a:	f7e6 fe21 	bl	3eb0 <print_formatted>
		break;
   1d26e:	e79b      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d270:	6a23      	ldr	r3, [r4, #32]
   1d272:	9306      	str	r3, [sp, #24]
   1d274:	69e3      	ldr	r3, [r4, #28]
   1d276:	9305      	str	r3, [sp, #20]
   1d278:	69a3      	ldr	r3, [r4, #24]
   1d27a:	9304      	str	r3, [sp, #16]
   1d27c:	6963      	ldr	r3, [r4, #20]
   1d27e:	9303      	str	r3, [sp, #12]
   1d280:	6923      	ldr	r3, [r4, #16]
   1d282:	9302      	str	r3, [sp, #8]
   1d284:	68e3      	ldr	r3, [r4, #12]
   1d286:	9301      	str	r3, [sp, #4]
   1d288:	68a3      	ldr	r3, [r4, #8]
   1d28a:	9300      	str	r3, [sp, #0]
   1d28c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d290:	4631      	mov	r1, r6
   1d292:	4628      	mov	r0, r5
   1d294:	f7e6 fe0c 	bl	3eb0 <print_formatted>
		break;
   1d298:	e786      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d29c:	9307      	str	r3, [sp, #28]
   1d29e:	6a23      	ldr	r3, [r4, #32]
   1d2a0:	9306      	str	r3, [sp, #24]
   1d2a2:	69e3      	ldr	r3, [r4, #28]
   1d2a4:	9305      	str	r3, [sp, #20]
   1d2a6:	69a3      	ldr	r3, [r4, #24]
   1d2a8:	9304      	str	r3, [sp, #16]
   1d2aa:	6963      	ldr	r3, [r4, #20]
   1d2ac:	9303      	str	r3, [sp, #12]
   1d2ae:	6923      	ldr	r3, [r4, #16]
   1d2b0:	9302      	str	r3, [sp, #8]
   1d2b2:	68e3      	ldr	r3, [r4, #12]
   1d2b4:	9301      	str	r3, [sp, #4]
   1d2b6:	68a3      	ldr	r3, [r4, #8]
   1d2b8:	9300      	str	r3, [sp, #0]
   1d2ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d2be:	4631      	mov	r1, r6
   1d2c0:	4628      	mov	r0, r5
   1d2c2:	f7e6 fdf5 	bl	3eb0 <print_formatted>
		break;
   1d2c6:	e76f      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d2c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d2ca:	9308      	str	r3, [sp, #32]
   1d2cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d2ce:	9307      	str	r3, [sp, #28]
   1d2d0:	6a23      	ldr	r3, [r4, #32]
   1d2d2:	9306      	str	r3, [sp, #24]
   1d2d4:	69e3      	ldr	r3, [r4, #28]
   1d2d6:	9305      	str	r3, [sp, #20]
   1d2d8:	69a3      	ldr	r3, [r4, #24]
   1d2da:	9304      	str	r3, [sp, #16]
   1d2dc:	6963      	ldr	r3, [r4, #20]
   1d2de:	9303      	str	r3, [sp, #12]
   1d2e0:	6923      	ldr	r3, [r4, #16]
   1d2e2:	9302      	str	r3, [sp, #8]
   1d2e4:	68e3      	ldr	r3, [r4, #12]
   1d2e6:	9301      	str	r3, [sp, #4]
   1d2e8:	68a3      	ldr	r3, [r4, #8]
   1d2ea:	9300      	str	r3, [sp, #0]
   1d2ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d2f0:	4631      	mov	r1, r6
   1d2f2:	4628      	mov	r0, r5
   1d2f4:	f7e6 fddc 	bl	3eb0 <print_formatted>
		break;
   1d2f8:	e756      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d2fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d2fc:	9309      	str	r3, [sp, #36]	; 0x24
   1d2fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d300:	9308      	str	r3, [sp, #32]
   1d302:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d304:	9307      	str	r3, [sp, #28]
   1d306:	6a23      	ldr	r3, [r4, #32]
   1d308:	9306      	str	r3, [sp, #24]
   1d30a:	69e3      	ldr	r3, [r4, #28]
   1d30c:	9305      	str	r3, [sp, #20]
   1d30e:	69a3      	ldr	r3, [r4, #24]
   1d310:	9304      	str	r3, [sp, #16]
   1d312:	6963      	ldr	r3, [r4, #20]
   1d314:	9303      	str	r3, [sp, #12]
   1d316:	6923      	ldr	r3, [r4, #16]
   1d318:	9302      	str	r3, [sp, #8]
   1d31a:	68e3      	ldr	r3, [r4, #12]
   1d31c:	9301      	str	r3, [sp, #4]
   1d31e:	68a3      	ldr	r3, [r4, #8]
   1d320:	9300      	str	r3, [sp, #0]
   1d322:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d326:	4631      	mov	r1, r6
   1d328:	4628      	mov	r0, r5
   1d32a:	f7e6 fdc1 	bl	3eb0 <print_formatted>
		break;
   1d32e:	e73b      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d330:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d332:	930a      	str	r3, [sp, #40]	; 0x28
   1d334:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d336:	9309      	str	r3, [sp, #36]	; 0x24
   1d338:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d33a:	9308      	str	r3, [sp, #32]
   1d33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d33e:	9307      	str	r3, [sp, #28]
   1d340:	6a23      	ldr	r3, [r4, #32]
   1d342:	9306      	str	r3, [sp, #24]
   1d344:	69e3      	ldr	r3, [r4, #28]
   1d346:	9305      	str	r3, [sp, #20]
   1d348:	69a3      	ldr	r3, [r4, #24]
   1d34a:	9304      	str	r3, [sp, #16]
   1d34c:	6963      	ldr	r3, [r4, #20]
   1d34e:	9303      	str	r3, [sp, #12]
   1d350:	6923      	ldr	r3, [r4, #16]
   1d352:	9302      	str	r3, [sp, #8]
   1d354:	68e3      	ldr	r3, [r4, #12]
   1d356:	9301      	str	r3, [sp, #4]
   1d358:	68a3      	ldr	r3, [r4, #8]
   1d35a:	9300      	str	r3, [sp, #0]
   1d35c:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d360:	4631      	mov	r1, r6
   1d362:	4628      	mov	r0, r5
   1d364:	f7e6 fda4 	bl	3eb0 <print_formatted>
		break;
   1d368:	e71e      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d36a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d36c:	930b      	str	r3, [sp, #44]	; 0x2c
   1d36e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d370:	930a      	str	r3, [sp, #40]	; 0x28
   1d372:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d374:	9309      	str	r3, [sp, #36]	; 0x24
   1d376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d378:	9308      	str	r3, [sp, #32]
   1d37a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d37c:	9307      	str	r3, [sp, #28]
   1d37e:	6a23      	ldr	r3, [r4, #32]
   1d380:	9306      	str	r3, [sp, #24]
   1d382:	69e3      	ldr	r3, [r4, #28]
   1d384:	9305      	str	r3, [sp, #20]
   1d386:	69a3      	ldr	r3, [r4, #24]
   1d388:	9304      	str	r3, [sp, #16]
   1d38a:	6963      	ldr	r3, [r4, #20]
   1d38c:	9303      	str	r3, [sp, #12]
   1d38e:	6923      	ldr	r3, [r4, #16]
   1d390:	9302      	str	r3, [sp, #8]
   1d392:	68e3      	ldr	r3, [r4, #12]
   1d394:	9301      	str	r3, [sp, #4]
   1d396:	68a3      	ldr	r3, [r4, #8]
   1d398:	9300      	str	r3, [sp, #0]
   1d39a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d39e:	4631      	mov	r1, r6
   1d3a0:	4628      	mov	r0, r5
   1d3a2:	f7e6 fd85 	bl	3eb0 <print_formatted>
		break;
   1d3a6:	e6ff      	b.n	1d1a8 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   1d3a8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1d3aa:	930c      	str	r3, [sp, #48]	; 0x30
   1d3ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1d3ae:	930b      	str	r3, [sp, #44]	; 0x2c
   1d3b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1d3b2:	930a      	str	r3, [sp, #40]	; 0x28
   1d3b4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d3b6:	9309      	str	r3, [sp, #36]	; 0x24
   1d3b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1d3ba:	9308      	str	r3, [sp, #32]
   1d3bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1d3be:	9307      	str	r3, [sp, #28]
   1d3c0:	6a23      	ldr	r3, [r4, #32]
   1d3c2:	9306      	str	r3, [sp, #24]
   1d3c4:	69e3      	ldr	r3, [r4, #28]
   1d3c6:	9305      	str	r3, [sp, #20]
   1d3c8:	69a3      	ldr	r3, [r4, #24]
   1d3ca:	9304      	str	r3, [sp, #16]
   1d3cc:	6963      	ldr	r3, [r4, #20]
   1d3ce:	9303      	str	r3, [sp, #12]
   1d3d0:	6923      	ldr	r3, [r4, #16]
   1d3d2:	9302      	str	r3, [sp, #8]
   1d3d4:	68e3      	ldr	r3, [r4, #12]
   1d3d6:	9301      	str	r3, [sp, #4]
   1d3d8:	68a3      	ldr	r3, [r4, #8]
   1d3da:	9300      	str	r3, [sp, #0]
   1d3dc:	e9d4 2300 	ldrd	r2, r3, [r4]
   1d3e0:	4631      	mov	r1, r6
   1d3e2:	4628      	mov	r0, r5
   1d3e4:	f7e6 fd64 	bl	3eb0 <print_formatted>
}
   1d3e8:	e6de      	b.n	1d1a8 <std_print+0x78>

0001d3ea <log_output_flush>:
		     log_output->control_block->offset,
   1d3ea:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   1d3ec:	6881      	ldr	r1, [r0, #8]
{
   1d3ee:	b510      	push	{r4, lr}
   1d3f0:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   1d3f2:	e9d2 2300 	ldrd	r2, r3, [r2]
   1d3f6:	6800      	ldr	r0, [r0, #0]
   1d3f8:	f7ff fe8d 	bl	1d116 <buffer_write>
	log_output->control_block->offset = 0;
   1d3fc:	6863      	ldr	r3, [r4, #4]
   1d3fe:	2200      	movs	r2, #0
   1d400:	601a      	str	r2, [r3, #0]
}
   1d402:	bd10      	pop	{r4, pc}

0001d404 <out_func>:
{
   1d404:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d406:	684b      	ldr	r3, [r1, #4]
   1d408:	681a      	ldr	r2, [r3, #0]
   1d40a:	68cb      	ldr	r3, [r1, #12]
   1d40c:	429a      	cmp	r2, r3
{
   1d40e:	4605      	mov	r5, r0
   1d410:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1d412:	d102      	bne.n	1d41a <out_func+0x16>
		log_output_flush(out_ctx);
   1d414:	4608      	mov	r0, r1
   1d416:	f7ff ffe8 	bl	1d3ea <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1d41a:	6863      	ldr	r3, [r4, #4]
   1d41c:	f3bf 8f5b 	dmb	ish
   1d420:	e853 2f00 	ldrex	r2, [r3]
   1d424:	1c51      	adds	r1, r2, #1
   1d426:	e843 1000 	strex	r0, r1, [r3]
   1d42a:	2800      	cmp	r0, #0
   1d42c:	d1f8      	bne.n	1d420 <out_func+0x1c>
   1d42e:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1d432:	68a3      	ldr	r3, [r4, #8]
   1d434:	549d      	strb	r5, [r3, r2]
}
   1d436:	2000      	movs	r0, #0
   1d438:	bd38      	pop	{r3, r4, r5, pc}

0001d43a <char_out>:
{
   1d43a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d43c:	460d      	mov	r5, r1
   1d43e:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
   1d440:	4604      	mov	r4, r0
   1d442:	1847      	adds	r7, r0, r1
   1d444:	42bc      	cmp	r4, r7
   1d446:	d101      	bne.n	1d44c <char_out+0x12>
}
   1d448:	4628      	mov	r0, r5
   1d44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
   1d44c:	f814 1b01 	ldrb.w	r1, [r4], #1
   1d450:	68b3      	ldr	r3, [r6, #8]
   1d452:	4630      	mov	r0, r6
   1d454:	685b      	ldr	r3, [r3, #4]
   1d456:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
   1d458:	e7f4      	b.n	1d444 <char_out+0xa>

0001d45a <read_str>:
{
   1d45a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d45e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1d462:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1d464:	4640      	mov	r0, r8
{
   1d466:	461f      	mov	r7, r3
   1d468:	460c      	mov	r4, r1
   1d46a:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1d46c:	f001 fc8f 	bl	1ed8e <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1d470:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1d474:	9300      	str	r3, [sp, #0]
   1d476:	b280      	uxth	r0, r0
   1d478:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1d47c:	463b      	mov	r3, r7
   1d47e:	4632      	mov	r2, r6
   1d480:	4621      	mov	r1, r4
   1d482:	4628      	mov	r0, r5
   1d484:	f002 feaf 	bl	201e6 <bt_gatt_attr_read>
}
   1d488:	b004      	add	sp, #16
   1d48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d48e <bas_init>:
}
   1d48e:	2000      	movs	r0, #0
   1d490:	4770      	bx	lr

0001d492 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   1d492:	6883      	ldr	r3, [r0, #8]
   1d494:	68db      	ldr	r3, [r3, #12]
   1d496:	4718      	bx	r3

0001d498 <nvs_flash_rd>:
{
   1d498:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   1d49a:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d49c:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   1d49e:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d4a0:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   1d4a2:	fa16 f181 	uxtah	r1, r6, r1
   1d4a6:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   1d4aa:	6884      	ldr	r4, [r0, #8]
   1d4ac:	6824      	ldr	r4, [r4, #0]
   1d4ae:	46a4      	mov	ip, r4
}
   1d4b0:	bc70      	pop	{r4, r5, r6}
   1d4b2:	4760      	bx	ip

0001d4b4 <nvs_flash_block_cmp>:
{
   1d4b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d4b8:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d4ba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1d4bc:	681d      	ldr	r5, [r3, #0]
   1d4be:	426d      	negs	r5, r5
{
   1d4c0:	b089      	sub	sp, #36	; 0x24
   1d4c2:	4681      	mov	r9, r0
   1d4c4:	460e      	mov	r6, r1
   1d4c6:	4617      	mov	r7, r2
	block_size =
   1d4c8:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   1d4cc:	b91c      	cbnz	r4, 1d4d6 <nvs_flash_block_cmp+0x22>
	return 0;
   1d4ce:	4620      	mov	r0, r4
}
   1d4d0:	b009      	add	sp, #36	; 0x24
   1d4d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   1d4d6:	42ac      	cmp	r4, r5
   1d4d8:	46a0      	mov	r8, r4
   1d4da:	bf28      	it	cs
   1d4dc:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   1d4de:	4643      	mov	r3, r8
   1d4e0:	466a      	mov	r2, sp
   1d4e2:	4631      	mov	r1, r6
   1d4e4:	4648      	mov	r0, r9
   1d4e6:	f7ff ffd7 	bl	1d498 <nvs_flash_rd>
		if (rc) {
   1d4ea:	2800      	cmp	r0, #0
   1d4ec:	d1f0      	bne.n	1d4d0 <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   1d4ee:	4642      	mov	r2, r8
   1d4f0:	4669      	mov	r1, sp
   1d4f2:	4638      	mov	r0, r7
   1d4f4:	f001 fc6d 	bl	1edd2 <memcmp>
		if (rc) {
   1d4f8:	b920      	cbnz	r0, 1d504 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   1d4fa:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1d4fe:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   1d500:	4447      	add	r7, r8
   1d502:	e7e3      	b.n	1d4cc <nvs_flash_block_cmp+0x18>
			return 1;
   1d504:	2001      	movs	r0, #1
   1d506:	e7e3      	b.n	1d4d0 <nvs_flash_block_cmp+0x1c>

0001d508 <nvs_flash_cmp_const>:
{
   1d508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d50c:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   1d50e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1d510:	681d      	ldr	r5, [r3, #0]
   1d512:	426d      	negs	r5, r5
{
   1d514:	b088      	sub	sp, #32
	block_size =
   1d516:	f005 0520 	and.w	r5, r5, #32
{
   1d51a:	4607      	mov	r7, r0
   1d51c:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   1d51e:	4668      	mov	r0, sp
{
   1d520:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   1d522:	462a      	mov	r2, r5
   1d524:	f001 fc90 	bl	1ee48 <memset>
	while (len) {
   1d528:	b91c      	cbnz	r4, 1d532 <nvs_flash_cmp_const+0x2a>
	return 0;
   1d52a:	4620      	mov	r0, r4
}
   1d52c:	b008      	add	sp, #32
   1d52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   1d532:	42ac      	cmp	r4, r5
   1d534:	46a0      	mov	r8, r4
   1d536:	bf28      	it	cs
   1d538:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   1d53a:	4643      	mov	r3, r8
   1d53c:	466a      	mov	r2, sp
   1d53e:	4631      	mov	r1, r6
   1d540:	4638      	mov	r0, r7
   1d542:	f7ff ffb7 	bl	1d4b4 <nvs_flash_block_cmp>
		if (rc) {
   1d546:	2800      	cmp	r0, #0
   1d548:	d1f0      	bne.n	1d52c <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   1d54a:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   1d54e:	4446      	add	r6, r8
   1d550:	e7ea      	b.n	1d528 <nvs_flash_cmp_const+0x20>

0001d552 <nvs_ate_crc8_check>:
{
   1d552:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d554:	4601      	mov	r1, r0
{
   1d556:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d558:	2207      	movs	r2, #7
   1d55a:	20ff      	movs	r0, #255	; 0xff
   1d55c:	f7e5 fef8 	bl	3350 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   1d560:	79e3      	ldrb	r3, [r4, #7]
}
   1d562:	1a18      	subs	r0, r3, r0
   1d564:	bf18      	it	ne
   1d566:	2001      	movne	r0, #1
   1d568:	bd10      	pop	{r4, pc}

0001d56a <nvs_ate_crc8_update>:
{
   1d56a:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d56c:	4601      	mov	r1, r0
{
   1d56e:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   1d570:	2207      	movs	r2, #7
   1d572:	20ff      	movs	r0, #255	; 0xff
   1d574:	f7e5 feec 	bl	3350 <crc8_ccitt>
	entry->crc8 = crc8;
   1d578:	71e0      	strb	r0, [r4, #7]
}
   1d57a:	bd10      	pop	{r4, pc}

0001d57c <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   1d57c:	7800      	ldrb	r0, [r0, #0]
   1d57e:	2801      	cmp	r0, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   1d580:	bf81      	itttt	hi
   1d582:	1809      	addhi	r1, r1, r0
   1d584:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
   1d588:	4240      	neghi	r0, r0
   1d58a:	4001      	andhi	r1, r0
}
   1d58c:	4608      	mov	r0, r1
   1d58e:	4770      	bx	lr

0001d590 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   1d590:	680b      	ldr	r3, [r1, #0]
   1d592:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   1d596:	0c1a      	lsrs	r2, r3, #16
   1d598:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   1d59c:	bf08      	it	eq
   1d59e:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   1d5a2:	600b      	str	r3, [r1, #0]
}
   1d5a4:	4770      	bx	lr

0001d5a6 <nvs_flash_erase_sector>:
{
   1d5a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d5aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1d5ac:	8983      	ldrh	r3, [r0, #12]
   1d5ae:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   1d5b0:	0c0e      	lsrs	r6, r1, #16
   1d5b2:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d5b4:	4631      	mov	r1, r6
{
   1d5b6:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   1d5b8:	f7ff ffa6 	bl	1d508 <nvs_flash_cmp_const>
	if (rc <= 0) {
   1d5bc:	1e04      	subs	r4, r0, #0
   1d5be:	dd17      	ble.n	1d5f0 <nvs_flash_erase_sector+0x4a>
	rc = flash_write_protection_set(fs->flash_device, 0);
   1d5c0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   1d5c2:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d5c4:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, 0);
   1d5c8:	2100      	movs	r1, #0
   1d5ca:	f7ff ff62 	bl	1d492 <flash_write_protection_set>
	if (rc) {
   1d5ce:	4604      	mov	r4, r0
   1d5d0:	b970      	cbnz	r0, 1d5f0 <nvs_flash_erase_sector+0x4a>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   1d5d2:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d5d4:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   1d5d6:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d5d8:	0c31      	lsrs	r1, r6, #16
   1d5da:	689b      	ldr	r3, [r3, #8]
   1d5dc:	fb08 7101 	mla	r1, r8, r1, r7
   1d5e0:	4798      	blx	r3
	if (rc) {
   1d5e2:	4604      	mov	r4, r0
   1d5e4:	b920      	cbnz	r0, 1d5f0 <nvs_flash_erase_sector+0x4a>
	(void) flash_write_protection_set(fs->flash_device, 1);
   1d5e6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write_protection(dev, enable);
   1d5e8:	6883      	ldr	r3, [r0, #8]
   1d5ea:	2101      	movs	r1, #1
   1d5ec:	68db      	ldr	r3, [r3, #12]
   1d5ee:	4798      	blx	r3
}
   1d5f0:	4620      	mov	r0, r4
   1d5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d5f6 <nvs_prev_ate>:
{
   1d5f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d5f8:	4604      	mov	r4, r0
   1d5fa:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d5fc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1d5fe:	2108      	movs	r1, #8
   1d600:	f7ff ffbc 	bl	1d57c <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d604:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   1d606:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d608:	2308      	movs	r3, #8
   1d60a:	4620      	mov	r0, r4
   1d60c:	f7ff ff44 	bl	1d498 <nvs_flash_rd>
	if (rc) {
   1d610:	2800      	cmp	r0, #0
   1d612:	d13e      	bne.n	1d692 <nvs_prev_ate+0x9c>
	*addr += ate_size;
   1d614:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d616:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   1d618:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d61a:	b299      	uxth	r1, r3
   1d61c:	1b92      	subs	r2, r2, r6
   1d61e:	4291      	cmp	r1, r2
	*addr += ate_size;
   1d620:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   1d622:	d136      	bne.n	1d692 <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   1d624:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   1d626:	bf03      	ittte	eq
   1d628:	89e1      	ldrheq	r1, [r4, #14]
   1d62a:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
   1d62e:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   1d632:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   1d636:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   1d638:	2308      	movs	r3, #8
   1d63a:	466a      	mov	r2, sp
   1d63c:	4620      	mov	r0, r4
   1d63e:	f7ff ff2b 	bl	1d498 <nvs_flash_rd>
	if (rc) {
   1d642:	bb30      	cbnz	r0, 1d692 <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   1d644:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1d646:	466a      	mov	r2, sp
   1d648:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1d64a:	4603      	mov	r3, r0
		if (data8[i] != value) {
   1d64c:	f812 7b01 	ldrb.w	r7, [r2], #1
   1d650:	42b9      	cmp	r1, r7
   1d652:	d115      	bne.n	1d680 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   1d654:	3301      	adds	r3, #1
   1d656:	2b08      	cmp	r3, #8
   1d658:	d1f8      	bne.n	1d64c <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   1d65a:	6863      	ldr	r3, [r4, #4]
   1d65c:	e00e      	b.n	1d67c <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1d65e:	89a3      	ldrh	r3, [r4, #12]
   1d660:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1d664:	1b9b      	subs	r3, r3, r6
   1d666:	429a      	cmp	r2, r3
   1d668:	d20f      	bcs.n	1d68a <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   1d66a:	fbb2 f3f6 	udiv	r3, r2, r6
   1d66e:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   1d672:	b956      	cbnz	r6, 1d68a <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   1d674:	682b      	ldr	r3, [r5, #0]
   1d676:	0c1b      	lsrs	r3, r3, #16
   1d678:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   1d67a:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   1d67c:	602b      	str	r3, [r5, #0]
		return 0;
   1d67e:	e008      	b.n	1d692 <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   1d680:	4668      	mov	r0, sp
   1d682:	f7ff ff66 	bl	1d552 <nvs_ate_crc8_check>
   1d686:	2800      	cmp	r0, #0
   1d688:	d0e9      	beq.n	1d65e <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   1d68a:	4629      	mov	r1, r5
   1d68c:	4620      	mov	r0, r4
   1d68e:	f7e6 ff61 	bl	4554 <nvs_recover_last_ate>
}
   1d692:	b003      	add	sp, #12
   1d694:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d696 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   1d69a:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d69e:	8987      	ldrh	r7, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d6a0:	b088      	sub	sp, #32
   1d6a2:	4605      	mov	r5, r0
   1d6a4:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, 0);
   1d6a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1d6a8:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   1d6aa:	4690      	mov	r8, r2
   1d6ac:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, 0);
   1d6ae:	f7ff fef0 	bl	1d492 <flash_write_protection_set>
	if (rc) {
   1d6b2:	2800      	cmp	r0, #0
   1d6b4:	d132      	bne.n	1d71c <nvs_flash_al_wrt.part.0+0x86>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d6b6:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   1d6b8:	ea4f 4914 	mov.w	r9, r4, lsr #16
	offset += addr & ADDR_OFFS_MASK;
   1d6bc:	fa1a f484 	uxtah	r4, sl, r4
   1d6c0:	fb07 4909 	mla	r9, r7, r9, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   1d6c4:	681f      	ldr	r7, [r3, #0]
   1d6c6:	427f      	negs	r7, r7
	if (blen > 0) {
   1d6c8:	4037      	ands	r7, r6
   1d6ca:	d00b      	beq.n	1d6e4 <nvs_flash_al_wrt.part.0+0x4e>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   1d6cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   1d6ce:	6883      	ldr	r3, [r0, #8]
   1d6d0:	4642      	mov	r2, r8
   1d6d2:	685c      	ldr	r4, [r3, #4]
   1d6d4:	4649      	mov	r1, r9
   1d6d6:	463b      	mov	r3, r7
   1d6d8:	47a0      	blx	r4
		if (rc) {
   1d6da:	4604      	mov	r4, r0
   1d6dc:	b9c8      	cbnz	r0, 1d712 <nvs_flash_al_wrt.part.0+0x7c>
		len -= blen;
   1d6de:	1bf6      	subs	r6, r6, r7
		offset += blen;
   1d6e0:	44b9      	add	r9, r7
		data8 += blen;
   1d6e2:	44b8      	add	r8, r7
	if (len) {
   1d6e4:	b1ee      	cbz	r6, 1d722 <nvs_flash_al_wrt.part.0+0x8c>
		memcpy(buf, data8, len);
   1d6e6:	4632      	mov	r2, r6
   1d6e8:	4641      	mov	r1, r8
   1d6ea:	4668      	mov	r0, sp
   1d6ec:	f001 fb81 	bl	1edf2 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   1d6f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   1d6f2:	681a      	ldr	r2, [r3, #0]
   1d6f4:	7919      	ldrb	r1, [r3, #4]
   1d6f6:	1b92      	subs	r2, r2, r6
   1d6f8:	eb0d 0006 	add.w	r0, sp, r6
   1d6fc:	f001 fba4 	bl	1ee48 <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   1d700:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   1d704:	681b      	ldr	r3, [r3, #0]
   1d706:	6882      	ldr	r2, [r0, #8]
   1d708:	4649      	mov	r1, r9
   1d70a:	6854      	ldr	r4, [r2, #4]
   1d70c:	466a      	mov	r2, sp
   1d70e:	47a0      	blx	r4
   1d710:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, 1);
   1d712:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1d714:	2101      	movs	r1, #1
   1d716:	f7ff febc 	bl	1d492 <flash_write_protection_set>
	return rc;
   1d71a:	4620      	mov	r0, r4
}
   1d71c:	b008      	add	sp, #32
   1d71e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   1d722:	4634      	mov	r4, r6
   1d724:	e7f5      	b.n	1d712 <nvs_flash_al_wrt.part.0+0x7c>

0001d726 <nvs_flash_ate_wrt>:
{
   1d726:	b510      	push	{r4, lr}
   1d728:	460a      	mov	r2, r1
	if (!len) {
   1d72a:	2308      	movs	r3, #8
   1d72c:	6841      	ldr	r1, [r0, #4]
{
   1d72e:	4604      	mov	r4, r0
   1d730:	f7ff ffb1 	bl	1d696 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   1d734:	2108      	movs	r1, #8
   1d736:	4603      	mov	r3, r0
   1d738:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d73a:	f7ff ff1f 	bl	1d57c <nvs_al_size.isra.0>
   1d73e:	6862      	ldr	r2, [r4, #4]
   1d740:	1a12      	subs	r2, r2, r0
   1d742:	6062      	str	r2, [r4, #4]
}
   1d744:	4618      	mov	r0, r3
   1d746:	bd10      	pop	{r4, pc}

0001d748 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   1d748:	2300      	movs	r3, #0
   1d74a:	461a      	mov	r2, r3
   1d74c:	f7e7 b958 	b.w	4a00 <nvs_write>

0001d750 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   1d750:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   1d752:	2400      	movs	r4, #0
   1d754:	9400      	str	r4, [sp, #0]
   1d756:	f7e7 fa37 	bl	4bc8 <nvs_read_hist>
	return rc;
}
   1d75a:	b002      	add	sp, #8
   1d75c:	bd10      	pop	{r4, pc}

0001d75e <get_sectors_cb>:
{
   1d75e:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   1d760:	6802      	ldr	r2, [r0, #0]
   1d762:	684c      	ldr	r4, [r1, #4]
   1d764:	42a2      	cmp	r2, r4
   1d766:	d316      	bcc.n	1d796 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   1d768:	688b      	ldr	r3, [r1, #8]
   1d76a:	4423      	add	r3, r4
   1d76c:	429a      	cmp	r2, r3
   1d76e:	d206      	bcs.n	1d77e <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   1d770:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   1d774:	42ab      	cmp	r3, r5
   1d776:	d304      	bcc.n	1d782 <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   1d778:	f06f 030b 	mvn.w	r3, #11
   1d77c:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   1d77e:	2000      	movs	r0, #0
   1d780:	e00a      	b.n	1d798 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   1d782:	68cd      	ldr	r5, [r1, #12]
   1d784:	1b12      	subs	r2, r2, r4
   1d786:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   1d78a:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   1d78e:	6842      	ldr	r2, [r0, #4]
   1d790:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   1d792:	3301      	adds	r3, #1
   1d794:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   1d796:	2001      	movs	r0, #1
}
   1d798:	bd70      	pop	{r4, r5, r6, pc}

0001d79a <settings_load>:
	return settings_load_subtree(NULL);
   1d79a:	2000      	movs	r0, #0
   1d79c:	f7e7 bb0a 	b.w	4db4 <settings_load_subtree>

0001d7a0 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1d7a0:	2200      	movs	r2, #0
   1d7a2:	4611      	mov	r1, r2
   1d7a4:	f7e7 bacc 	b.w	4d40 <settings_save_one>

0001d7a8 <settings_name_steq>:
{
   1d7a8:	4603      	mov	r3, r0
   1d7aa:	b530      	push	{r4, r5, lr}
   1d7ac:	4608      	mov	r0, r1
	if (next) {
   1d7ae:	b10a      	cbz	r2, 1d7b4 <settings_name_steq+0xc>
		*next = NULL;
   1d7b0:	2100      	movs	r1, #0
   1d7b2:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1d7b4:	b163      	cbz	r3, 1d7d0 <settings_name_steq+0x28>
   1d7b6:	b190      	cbz	r0, 1d7de <settings_name_steq+0x36>
   1d7b8:	1e41      	subs	r1, r0, #1
   1d7ba:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1d7bc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1d7c0:	4604      	mov	r4, r0
   1d7c2:	f810 3b01 	ldrb.w	r3, [r0], #1
   1d7c6:	b15d      	cbz	r5, 1d7e0 <settings_name_steq+0x38>
   1d7c8:	429d      	cmp	r5, r3
   1d7ca:	d101      	bne.n	1d7d0 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1d7cc:	2d3d      	cmp	r5, #61	; 0x3d
   1d7ce:	d1f5      	bne.n	1d7bc <settings_name_steq+0x14>
	return 0;
   1d7d0:	2000      	movs	r0, #0
   1d7d2:	e004      	b.n	1d7de <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1d7d4:	2b3d      	cmp	r3, #61	; 0x3d
   1d7d6:	d008      	beq.n	1d7ea <settings_name_steq+0x42>
   1d7d8:	fab3 f083 	clz	r0, r3
   1d7dc:	0940      	lsrs	r0, r0, #5
}
   1d7de:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1d7e0:	2b2f      	cmp	r3, #47	; 0x2f
   1d7e2:	d1f7      	bne.n	1d7d4 <settings_name_steq+0x2c>
		if (next) {
   1d7e4:	b10a      	cbz	r2, 1d7ea <settings_name_steq+0x42>
			*next = name + 1;
   1d7e6:	3401      	adds	r4, #1
   1d7e8:	6014      	str	r4, [r2, #0]
		return 1;
   1d7ea:	2001      	movs	r0, #1
   1d7ec:	e7f7      	b.n	1d7de <settings_name_steq+0x36>

0001d7ee <settings_name_next>:
{
   1d7ee:	b530      	push	{r4, r5, lr}
   1d7f0:	4603      	mov	r3, r0
	if (next) {
   1d7f2:	b109      	cbz	r1, 1d7f8 <settings_name_next+0xa>
		*next = NULL;
   1d7f4:	2200      	movs	r2, #0
   1d7f6:	600a      	str	r2, [r1, #0]
	if (!name) {
   1d7f8:	b16b      	cbz	r3, 1d816 <settings_name_next+0x28>
   1d7fa:	461a      	mov	r2, r3
   1d7fc:	4614      	mov	r4, r2
   1d7fe:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1d800:	f812 5b01 	ldrb.w	r5, [r2], #1
   1d804:	b135      	cbz	r5, 1d814 <settings_name_next+0x26>
   1d806:	2d3d      	cmp	r5, #61	; 0x3d
   1d808:	d004      	beq.n	1d814 <settings_name_next+0x26>
   1d80a:	2d2f      	cmp	r5, #47	; 0x2f
   1d80c:	d1f6      	bne.n	1d7fc <settings_name_next+0xe>
		if (next) {
   1d80e:	b109      	cbz	r1, 1d814 <settings_name_next+0x26>
			*next = name + 1;
   1d810:	3401      	adds	r4, #1
   1d812:	600c      	str	r4, [r1, #0]
}
   1d814:	bd30      	pop	{r4, r5, pc}
		return 0;
   1d816:	4618      	mov	r0, r3
   1d818:	e7fc      	b.n	1d814 <settings_name_next+0x26>

0001d81a <settings_nvs_read_fn>:
{
   1d81a:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d81c:	4613      	mov	r3, r2
{
   1d81e:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   1d820:	460a      	mov	r2, r1
   1d822:	8881      	ldrh	r1, [r0, #4]
   1d824:	6800      	ldr	r0, [r0, #0]
   1d826:	f7ff ff93 	bl	1d750 <nvs_read>
}
   1d82a:	42a0      	cmp	r0, r4
   1d82c:	bfa8      	it	ge
   1d82e:	4620      	movge	r0, r4
   1d830:	bd10      	pop	{r4, pc}

0001d832 <settings_nvs_save>:
{
   1d832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d836:	b097      	sub	sp, #92	; 0x5c
   1d838:	4604      	mov	r4, r0
   1d83a:	9201      	str	r2, [sp, #4]
   1d83c:	469b      	mov	fp, r3
	if (!name) {
   1d83e:	4689      	mov	r9, r1
   1d840:	2900      	cmp	r1, #0
   1d842:	d067      	beq.n	1d914 <settings_nvs_save+0xe2>
	delete = ((value == NULL) || (val_len == 0));
   1d844:	b1da      	cbz	r2, 1d87e <settings_nvs_save+0x4c>
   1d846:	fabb f78b 	clz	r7, fp
   1d84a:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   1d84c:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   1d84e:	3501      	adds	r5, #1
   1d850:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   1d852:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d854:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   1d858:	1e6e      	subs	r6, r5, #1
   1d85a:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   1d85c:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1d860:	d02e      	beq.n	1d8c0 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   1d862:	234a      	movs	r3, #74	; 0x4a
   1d864:	aa03      	add	r2, sp, #12
   1d866:	4631      	mov	r1, r6
   1d868:	4650      	mov	r0, sl
   1d86a:	f7ff ff71 	bl	1d750 <nvs_read>
		if (rc < 0) {
   1d86e:	2800      	cmp	r0, #0
   1d870:	da07      	bge.n	1d882 <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   1d872:	f110 0f02 	cmn.w	r0, #2
   1d876:	bf08      	it	eq
   1d878:	46b0      	moveq	r8, r6
   1d87a:	4635      	mov	r5, r6
   1d87c:	e7ec      	b.n	1d858 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   1d87e:	2701      	movs	r7, #1
   1d880:	e7e4      	b.n	1d84c <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   1d882:	ab16      	add	r3, sp, #88	; 0x58
   1d884:	4418      	add	r0, r3
   1d886:	2300      	movs	r3, #0
   1d888:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   1d88c:	a903      	add	r1, sp, #12
   1d88e:	4648      	mov	r0, r9
   1d890:	f001 fa84 	bl	1ed9c <strcmp>
   1d894:	2800      	cmp	r0, #0
   1d896:	d1f0      	bne.n	1d87a <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   1d898:	2f00      	cmp	r7, #0
   1d89a:	d039      	beq.n	1d910 <settings_nvs_save+0xde>
   1d89c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d89e:	42b3      	cmp	r3, r6
   1d8a0:	d140      	bne.n	1d924 <settings_nvs_save+0xf2>
			cf->last_name_id--;
   1d8a2:	4622      	mov	r2, r4
   1d8a4:	1e73      	subs	r3, r6, #1
   1d8a6:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   1d8aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d8ae:	2302      	movs	r3, #2
   1d8b0:	4650      	mov	r0, sl
   1d8b2:	f7e7 f8a5 	bl	4a00 <nvs_write>
			if (rc < 0) {
   1d8b6:	2800      	cmp	r0, #0
   1d8b8:	da34      	bge.n	1d924 <settings_nvs_save+0xf2>
}
   1d8ba:	b017      	add	sp, #92	; 0x5c
   1d8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   1d8c0:	bb5f      	cbnz	r7, 1d91a <settings_nvs_save+0xe8>
	write_name = true;
   1d8c2:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   1d8c4:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   1d8c8:	d029      	beq.n	1d91e <settings_nvs_save+0xec>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   1d8ca:	f104 0508 	add.w	r5, r4, #8
   1d8ce:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   1d8d2:	9a01      	ldr	r2, [sp, #4]
   1d8d4:	465b      	mov	r3, fp
   1d8d6:	b289      	uxth	r1, r1
   1d8d8:	4628      	mov	r0, r5
   1d8da:	f7e7 f891 	bl	4a00 <nvs_write>
	if (write_name) {
   1d8de:	b157      	cbz	r7, 1d8f6 <settings_nvs_save+0xc4>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   1d8e0:	4648      	mov	r0, r9
   1d8e2:	f001 fa54 	bl	1ed8e <strlen>
   1d8e6:	464a      	mov	r2, r9
   1d8e8:	4603      	mov	r3, r0
   1d8ea:	4641      	mov	r1, r8
   1d8ec:	4628      	mov	r0, r5
   1d8ee:	f7e7 f887 	bl	4a00 <nvs_write>
		if (rc < 0) {
   1d8f2:	2800      	cmp	r0, #0
   1d8f4:	dbe1      	blt.n	1d8ba <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   1d8f6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   1d8f8:	4543      	cmp	r3, r8
   1d8fa:	d220      	bcs.n	1d93e <settings_nvs_save+0x10c>
		cf->last_name_id = write_name_id;
   1d8fc:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d8fe:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   1d900:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   1d904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d908:	4628      	mov	r0, r5
   1d90a:	f7e7 f879 	bl	4a00 <nvs_write>
   1d90e:	e016      	b.n	1d93e <settings_nvs_save+0x10c>
   1d910:	46b0      	mov	r8, r6
   1d912:	e7d7      	b.n	1d8c4 <settings_nvs_save+0x92>
		return -EINVAL;
   1d914:	f06f 0015 	mvn.w	r0, #21
   1d918:	e7cf      	b.n	1d8ba <settings_nvs_save+0x88>
		return 0;
   1d91a:	2000      	movs	r0, #0
   1d91c:	e7cd      	b.n	1d8ba <settings_nvs_save+0x88>
		return -ENOMEM;
   1d91e:	f06f 000b 	mvn.w	r0, #11
   1d922:	e7ca      	b.n	1d8ba <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   1d924:	4631      	mov	r1, r6
   1d926:	4650      	mov	r0, sl
   1d928:	f7ff ff0e 	bl	1d748 <nvs_delete>
			if (rc >= 0) {
   1d92c:	2800      	cmp	r0, #0
   1d92e:	dbc4      	blt.n	1d8ba <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   1d930:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   1d934:	313f      	adds	r1, #63	; 0x3f
   1d936:	b289      	uxth	r1, r1
   1d938:	4650      	mov	r0, sl
   1d93a:	f7ff ff05 	bl	1d748 <nvs_delete>
	if (rc < 0) {
   1d93e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   1d942:	e7ba      	b.n	1d8ba <settings_nvs_save+0x88>

0001d944 <settings_nvs_backend_init>:
{
   1d944:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d946:	f100 0608 	add.w	r6, r0, #8
   1d94a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   1d94c:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   1d94e:	4630      	mov	r0, r6
   1d950:	f7e6 fef0 	bl	4734 <nvs_init>
	if (rc) {
   1d954:	4605      	mov	r5, r0
   1d956:	b970      	cbnz	r0, 1d976 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   1d958:	2302      	movs	r3, #2
   1d95a:	f10d 0206 	add.w	r2, sp, #6
   1d95e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d962:	4630      	mov	r0, r6
   1d964:	f7ff fef4 	bl	1d750 <nvs_read>
	if (rc < 0) {
   1d968:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   1d96a:	bfac      	ite	ge
   1d96c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   1d970:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   1d974:	8723      	strh	r3, [r4, #56]	; 0x38
}
   1d976:	4628      	mov	r0, r5
   1d978:	b002      	add	sp, #8
   1d97a:	bd70      	pop	{r4, r5, r6, pc}

0001d97c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1d97c:	68c2      	ldr	r2, [r0, #12]
   1d97e:	b2cb      	uxtb	r3, r1
   1d980:	210c      	movs	r1, #12
   1d982:	fb03 2101 	mla	r1, r3, r1, r2
   1d986:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1d988:	f000 0007 	and.w	r0, r0, #7
   1d98c:	4770      	bx	lr

0001d98e <set_off_state>:
	__asm__ volatile(
   1d98e:	f04f 0320 	mov.w	r3, #32
   1d992:	f3ef 8211 	mrs	r2, BASEPRI
   1d996:	f383 8811 	msr	BASEPRI, r3
   1d99a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d99e:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1d9a0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1d9a4:	d001      	beq.n	1d9aa <set_off_state+0x1c>
   1d9a6:	428b      	cmp	r3, r1
   1d9a8:	d107      	bne.n	1d9ba <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1d9aa:	2301      	movs	r3, #1
   1d9ac:	6003      	str	r3, [r0, #0]
	int err = 0;
   1d9ae:	2000      	movs	r0, #0
	__asm__ volatile(
   1d9b0:	f382 8811 	msr	BASEPRI, r2
   1d9b4:	f3bf 8f6f 	isb	sy
}
   1d9b8:	4770      	bx	lr
		err = -EPERM;
   1d9ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d9be:	e7f7      	b.n	1d9b0 <set_off_state+0x22>

0001d9c0 <set_starting_state>:
{
   1d9c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   1d9c2:	f04f 0320 	mov.w	r3, #32
   1d9c6:	f3ef 8211 	mrs	r2, BASEPRI
   1d9ca:	f383 8811 	msr	BASEPRI, r3
   1d9ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1d9d2:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1d9d4:	f003 0407 	and.w	r4, r3, #7
   1d9d8:	2c01      	cmp	r4, #1
   1d9da:	d106      	bne.n	1d9ea <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1d9dc:	6001      	str	r1, [r0, #0]
	int err = 0;
   1d9de:	2000      	movs	r0, #0
	__asm__ volatile(
   1d9e0:	f382 8811 	msr	BASEPRI, r2
   1d9e4:	f3bf 8f6f 	isb	sy
}
   1d9e8:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1d9ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1d9ee:	428b      	cmp	r3, r1
		err = -EBUSY;
   1d9f0:	bf14      	ite	ne
   1d9f2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1d9f6:	f06f 000f 	mvneq.w	r0, #15
   1d9fa:	e7f1      	b.n	1d9e0 <set_starting_state+0x20>

0001d9fc <set_on_state>:
	__asm__ volatile(
   1d9fc:	f04f 0320 	mov.w	r3, #32
   1da00:	f3ef 8211 	mrs	r2, BASEPRI
   1da04:	f383 8811 	msr	BASEPRI, r3
   1da08:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1da0c:	6803      	ldr	r3, [r0, #0]
   1da0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1da12:	f043 0302 	orr.w	r3, r3, #2
   1da16:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1da18:	f382 8811 	msr	BASEPRI, r2
   1da1c:	f3bf 8f6f 	isb	sy
}
   1da20:	4770      	bx	lr

0001da22 <onoff_started_callback>:
	return &data->mgr[type];
   1da22:	68c0      	ldr	r0, [r0, #12]
{
   1da24:	b410      	push	{r4}
	return &data->mgr[type];
   1da26:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1da28:	241c      	movs	r4, #28
   1da2a:	fb03 0004 	mla	r0, r3, r4, r0
   1da2e:	2100      	movs	r1, #0
}
   1da30:	bc10      	pop	{r4}
	notify(mgr, 0);
   1da32:	4710      	bx	r2

0001da34 <blocking_start_callback>:
{
   1da34:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1da36:	f7fe b985 	b.w	1bd44 <z_impl_k_sem_give>

0001da3a <lfclk_spinwait.constprop.0>:
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1da3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1da3e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1da42:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1da46:	03c9      	lsls	r1, r1, #15
   1da48:	d5f9      	bpl.n	1da3e <lfclk_spinwait.constprop.0+0x4>
	while (!(nrf_clock_is_running(NRF_CLOCK, d, (void *)&type)
   1da4a:	0792      	lsls	r2, r2, #30
   1da4c:	d1f7      	bne.n	1da3e <lfclk_spinwait.constprop.0+0x4>
}
   1da4e:	4770      	bx	lr

0001da50 <api_stop>:
{
   1da50:	b538      	push	{r3, r4, r5, lr}
   1da52:	b2c9      	uxtb	r1, r1
	err = set_off_state(&subdata->flags, ctx);
   1da54:	240c      	movs	r4, #12
   1da56:	434c      	muls	r4, r1
{
   1da58:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1da5a:	68c0      	ldr	r0, [r0, #12]
   1da5c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1da60:	2180      	movs	r1, #128	; 0x80
   1da62:	4418      	add	r0, r3
   1da64:	f7ff ff93 	bl	1d98e <set_off_state>
	if (err < 0) {
   1da68:	2800      	cmp	r0, #0
   1da6a:	db04      	blt.n	1da76 <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1da6c:	6869      	ldr	r1, [r5, #4]
   1da6e:	440c      	add	r4, r1
   1da70:	6863      	ldr	r3, [r4, #4]
   1da72:	4798      	blx	r3
	return 0;
   1da74:	2000      	movs	r0, #0
}
   1da76:	bd38      	pop	{r3, r4, r5, pc}

0001da78 <api_start>:
{
   1da78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da7a:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   1da7c:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1da7e:	68c5      	ldr	r5, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   1da80:	434c      	muls	r4, r1
{
   1da82:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1da84:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1da88:	2180      	movs	r1, #128	; 0x80
   1da8a:	4428      	add	r0, r5
{
   1da8c:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   1da8e:	f7ff ff97 	bl	1d9c0 <set_starting_state>
	if (err < 0) {
   1da92:	2800      	cmp	r0, #0
   1da94:	db08      	blt.n	1daa8 <api_start+0x30>
	subdata->cb = data->cb;
   1da96:	4425      	add	r5, r4
   1da98:	687b      	ldr	r3, [r7, #4]
   1da9a:	63ab      	str	r3, [r5, #56]	; 0x38
	subdata->user_data = data->user_data;
   1da9c:	68bb      	ldr	r3, [r7, #8]
   1da9e:	63eb      	str	r3, [r5, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   1daa0:	6873      	ldr	r3, [r6, #4]
   1daa2:	591b      	ldr	r3, [r3, r4]
   1daa4:	4798      	blx	r3
	return 0;
   1daa6:	2000      	movs	r0, #0
}
   1daa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001daaa <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1daaa:	4770      	bx	lr

0001daac <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1daac:	4770      	bx	lr

0001daae <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1daae:	f7e7 be53 	b.w	5758 <_DoInit>

0001dab2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(struct device *unused)
{
   1dab2:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1dab4:	f7ff fffb 	bl	1daae <SEGGER_RTT_Init>

	return 0;
}
   1dab8:	2000      	movs	r0, #0
   1daba:	bd08      	pop	{r3, pc}

0001dabc <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1dabc:	b538      	push	{r3, r4, r5, lr}
   1dabe:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1dac0:	42ab      	cmp	r3, r5
{
   1dac2:	4611      	mov	r1, r2
   1dac4:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1dac6:	d804      	bhi.n	1dad2 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1dac8:	461a      	mov	r2, r3
   1daca:	f001 f992 	bl	1edf2 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1dace:	4620      	mov	r0, r4
   1dad0:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1dad2:	2400      	movs	r4, #0
   1dad4:	e7fb      	b.n	1dace <_copy+0x12>

0001dad6 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1dad6:	f001 b9b7 	b.w	1ee48 <memset>

0001dada <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1dada:	09c3      	lsrs	r3, r0, #7
   1dadc:	005a      	lsls	r2, r3, #1
   1dade:	4413      	add	r3, r2
   1dae0:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1dae4:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1dae8:	b2c0      	uxtb	r0, r0
   1daea:	4770      	bx	lr

0001daec <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1daec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1daf0:	4606      	mov	r6, r0
   1daf2:	b0a9      	sub	sp, #164	; 0xa4
   1daf4:	4688      	mov	r8, r1
   1daf6:	4614      	mov	r4, r2
   1daf8:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1dafa:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1dafe:	f7e7 feb1 	bl	5864 <uECC_get_rng>
		if (!rng_function ||
   1db02:	4603      	mov	r3, r0
   1db04:	2800      	cmp	r0, #0
   1db06:	d03e      	beq.n	1db86 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1db08:	2140      	movs	r1, #64	; 0x40
   1db0a:	a808      	add	r0, sp, #32
   1db0c:	4798      	blx	r3
		if (!rng_function ||
   1db0e:	b3d0      	cbz	r0, 1db86 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1db10:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1db14:	f112 031f 	adds.w	r3, r2, #31
   1db18:	bf48      	it	mi
   1db1a:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1db1e:	466d      	mov	r5, sp
   1db20:	464a      	mov	r2, r9
   1db22:	a908      	add	r1, sp, #32
   1db24:	4628      	mov	r0, r5
   1db26:	f343 1347 	sbfx	r3, r3, #5, #8
   1db2a:	f000 fa03 	bl	1df34 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1db2e:	4622      	mov	r2, r4
   1db30:	4629      	mov	r1, r5
   1db32:	a818      	add	r0, sp, #96	; 0x60
   1db34:	f000 fe19 	bl	1e76a <EccPoint_compute_public_key>
   1db38:	b318      	cbz	r0, 1db82 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1db3a:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1db3e:	1dd9      	adds	r1, r3, #7
   1db40:	bf48      	it	mi
   1db42:	f103 010e 	addmi.w	r1, r3, #14
   1db46:	462a      	mov	r2, r5
   1db48:	4640      	mov	r0, r8
   1db4a:	10c9      	asrs	r1, r1, #3
   1db4c:	f000 fe35 	bl	1e7ba <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1db50:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1db54:	aa18      	add	r2, sp, #96	; 0x60
   1db56:	4630      	mov	r0, r6
   1db58:	f000 fe2f 	bl	1e7ba <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1db5c:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1db60:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1db64:	ab18      	add	r3, sp, #96	; 0x60
   1db66:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1db6a:	1870      	adds	r0, r6, r1
   1db6c:	f000 fe25 	bl	1e7ba <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1db70:	2220      	movs	r2, #32
   1db72:	2100      	movs	r1, #0
   1db74:	4628      	mov	r0, r5
   1db76:	f001 f967 	bl	1ee48 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1db7a:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1db7c:	b029      	add	sp, #164	; 0xa4
   1db7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1db82:	3f01      	subs	r7, #1
   1db84:	d1bb      	bne.n	1dafe <uECC_make_key+0x12>
        		return 0;
   1db86:	2000      	movs	r0, #0
   1db88:	e7f8      	b.n	1db7c <uECC_make_key+0x90>

0001db8a <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1db8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1db8e:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1db90:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1db94:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1db98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1db9c:	b0a4      	sub	sp, #144	; 0x90
   1db9e:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1dba0:	1dda      	adds	r2, r3, #7
   1dba2:	bf48      	it	mi
   1dba4:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1dba8:	ad04      	add	r5, sp, #16
{
   1dbaa:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1dbac:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1dbae:	4628      	mov	r0, r5
   1dbb0:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1dbb2:	9502      	str	r5, [sp, #8]
   1dbb4:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1dbb6:	f000 fe14 	bl	1e7e2 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1dbba:	463a      	mov	r2, r7
   1dbbc:	4649      	mov	r1, r9
   1dbbe:	a814      	add	r0, sp, #80	; 0x50
   1dbc0:	f000 fe0f 	bl	1e7e2 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1dbc4:	ab14      	add	r3, sp, #80	; 0x50
   1dbc6:	eb09 0107 	add.w	r1, r9, r7
   1dbca:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1dbce:	463a      	mov	r2, r7
   1dbd0:	f000 fe07 	bl	1e7e2 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1dbd4:	4623      	mov	r3, r4
   1dbd6:	4632      	mov	r2, r6
   1dbd8:	4629      	mov	r1, r5
   1dbda:	4628      	mov	r0, r5
   1dbdc:	f000 fd99 	bl	1e712 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1dbe0:	fab0 f080 	clz	r0, r0
   1dbe4:	9401      	str	r4, [sp, #4]
   1dbe6:	ab24      	add	r3, sp, #144	; 0x90
   1dbe8:	0940      	lsrs	r0, r0, #5
   1dbea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1dbee:	8863      	ldrh	r3, [r4, #2]
   1dbf0:	3301      	adds	r3, #1
   1dbf2:	b21b      	sxth	r3, r3
   1dbf4:	9300      	str	r3, [sp, #0]
   1dbf6:	a914      	add	r1, sp, #80	; 0x50
   1dbf8:	2300      	movs	r3, #0
   1dbfa:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1dbfe:	4608      	mov	r0, r1
   1dc00:	f000 fcb8 	bl	1e574 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1dc04:	aa14      	add	r2, sp, #80	; 0x50
   1dc06:	4639      	mov	r1, r7
   1dc08:	4640      	mov	r0, r8
   1dc0a:	f000 fdd6 	bl	1e7ba <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1dc0e:	4621      	mov	r1, r4
   1dc10:	a814      	add	r0, sp, #80	; 0x50
   1dc12:	f000 fc24 	bl	1e45e <EccPoint_isZero>
   1dc16:	af02      	add	r7, sp, #8
   1dc18:	4604      	mov	r4, r0
   1dc1a:	2208      	movs	r2, #8
   1dc1c:	2100      	movs	r1, #0
   1dc1e:	4638      	mov	r0, r7
   1dc20:	f001 f912 	bl	1ee48 <memset>
   1dc24:	2220      	movs	r2, #32
   1dc26:	2100      	movs	r1, #0
   1dc28:	4630      	mov	r0, r6
   1dc2a:	f001 f90d 	bl	1ee48 <memset>
   1dc2e:	2220      	movs	r2, #32
   1dc30:	2100      	movs	r1, #0
   1dc32:	4628      	mov	r0, r5
   1dc34:	f001 f908 	bl	1ee48 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1dc38:	fab4 f084 	clz	r0, r4
   1dc3c:	0940      	lsrs	r0, r0, #5
   1dc3e:	b024      	add	sp, #144	; 0x90
   1dc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001dc44 <uECC_vli_add>:
{
   1dc44:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1dc46:	2400      	movs	r4, #0
{
   1dc48:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1dc4a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1dc4c:	b265      	sxtb	r5, r4
   1dc4e:	42ab      	cmp	r3, r5
   1dc50:	dc00      	bgt.n	1dc54 <uECC_vli_add+0x10>
}
   1dc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1dc54:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1dc58:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1dc5c:	443d      	add	r5, r7
   1dc5e:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1dc60:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1dc62:	bf8c      	ite	hi
   1dc64:	2701      	movhi	r7, #1
   1dc66:	2700      	movls	r7, #0
		result[i] = sum;
   1dc68:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1dc6c:	bf18      	it	ne
   1dc6e:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1dc70:	3401      	adds	r4, #1
   1dc72:	e7eb      	b.n	1dc4c <uECC_vli_add+0x8>

0001dc74 <uECC_vli_rshift1>:
	vli += num_words;
   1dc74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1dc78:	2300      	movs	r3, #0
	while (vli-- > end) {
   1dc7a:	4288      	cmp	r0, r1
   1dc7c:	d300      	bcc.n	1dc80 <uECC_vli_rshift1+0xc>
}
   1dc7e:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1dc80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1dc84:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1dc88:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1dc8a:	07d3      	lsls	r3, r2, #31
   1dc8c:	e7f5      	b.n	1dc7a <uECC_vli_rshift1+0x6>

0001dc8e <vli_modInv_update>:
	if (!EVEN(uv)) {
   1dc8e:	6803      	ldr	r3, [r0, #0]
{
   1dc90:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1dc92:	f013 0601 	ands.w	r6, r3, #1
{
   1dc96:	4605      	mov	r5, r0
   1dc98:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1dc9a:	d005      	beq.n	1dca8 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1dc9c:	4613      	mov	r3, r2
   1dc9e:	460a      	mov	r2, r1
   1dca0:	4601      	mov	r1, r0
   1dca2:	f7ff ffcf 	bl	1dc44 <uECC_vli_add>
   1dca6:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1dca8:	4621      	mov	r1, r4
   1dcaa:	4628      	mov	r0, r5
   1dcac:	f7ff ffe2 	bl	1dc74 <uECC_vli_rshift1>
	if (carry) {
   1dcb0:	b146      	cbz	r6, 1dcc4 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1dcb2:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1dcb6:	3a01      	subs	r2, #1
   1dcb8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1dcbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1dcc0:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1dcc4:	bd70      	pop	{r4, r5, r6, pc}

0001dcc6 <uECC_vli_mult>:
{
   1dcc6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1dcca:	2500      	movs	r5, #0
{
   1dccc:	b087      	sub	sp, #28
   1dcce:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1dcd2:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1dcd4:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1dcd6:	fa4f f885 	sxtb.w	r8, r5
   1dcda:	4543      	cmp	r3, r8
   1dcdc:	dc16      	bgt.n	1dd0c <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1dcde:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1dce2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1dce6:	9502      	str	r5, [sp, #8]
   1dce8:	f04f 0a00 	mov.w	sl, #0
   1dcec:	9e02      	ldr	r6, [sp, #8]
   1dcee:	fa53 fe8a 	uxtab	lr, r3, sl
   1dcf2:	fa4f fe8e 	sxtb.w	lr, lr
   1dcf6:	45b6      	cmp	lr, r6
   1dcf8:	fa5f f58a 	uxtb.w	r5, sl
   1dcfc:	db2d      	blt.n	1dd5a <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1dcfe:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1dd02:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1dd06:	b007      	add	sp, #28
   1dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd0c:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1dd0e:	f04f 0c00 	mov.w	ip, #0
   1dd12:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1dd16:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1dd18:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1dd1c:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1dd1e:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1dd22:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1dd26:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1dd2a:	fba7 ab06 	umull	sl, fp, r7, r6
   1dd2e:	eb1a 0601 	adds.w	r6, sl, r1
   1dd32:	f10c 0c01 	add.w	ip, ip, #1
   1dd36:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1dd3a:	fa4f fa8c 	sxtb.w	sl, ip
   1dd3e:	bf2c      	ite	cs
   1dd40:	2201      	movcs	r2, #1
   1dd42:	2200      	movcc	r2, #0
   1dd44:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1dd46:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1dd48:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1dd4a:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1dd4c:	dde4      	ble.n	1dd18 <uECC_vli_mult+0x52>
		result[k] = r0;
   1dd4e:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1dd52:	463a      	mov	r2, r7
   1dd54:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1dd56:	4674      	mov	r4, lr
   1dd58:	e7bd      	b.n	1dcd6 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1dd5a:	3501      	adds	r5, #1
   1dd5c:	9900      	ldr	r1, [sp, #0]
   1dd5e:	9e01      	ldr	r6, [sp, #4]
   1dd60:	fa4f fc85 	sxtb.w	ip, r5
   1dd64:	ebae 0b0c 	sub.w	fp, lr, ip
   1dd68:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1dd6c:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1dd70:	4621      	mov	r1, r4
   1dd72:	2400      	movs	r4, #0
   1dd74:	459c      	cmp	ip, r3
   1dd76:	db05      	blt.n	1dd84 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1dd78:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1dd7c:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1dd80:	460a      	mov	r2, r1
   1dd82:	e7b3      	b.n	1dcec <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1dd84:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1dd88:	f855 7b04 	ldr.w	r7, [r5], #4
   1dd8c:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1dd90:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1dd94:	fba7 6706 	umull	r6, r7, r7, r6
   1dd98:	eb16 0801 	adds.w	r8, r6, r1
   1dd9c:	eb57 0902 	adcs.w	r9, r7, r2
   1dda0:	bf2c      	ite	cs
   1dda2:	2201      	movcs	r2, #1
   1dda4:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1dda6:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1ddaa:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1ddac:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1ddae:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ddb0:	fa4f fc8c 	sxtb.w	ip, ip
   1ddb4:	e7de      	b.n	1dd74 <uECC_vli_mult+0xae>

0001ddb6 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1ddb6:	2300      	movs	r3, #0
{
   1ddb8:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1ddba:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1ddbc:	b25a      	sxtb	r2, r3
   1ddbe:	4291      	cmp	r1, r2
   1ddc0:	dc00      	bgt.n	1ddc4 <uECC_vli_clear+0xe>
}
   1ddc2:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1ddc4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1ddc8:	3301      	adds	r3, #1
   1ddca:	e7f7      	b.n	1ddbc <uECC_vli_clear+0x6>

0001ddcc <uECC_vli_isZero>:
{
   1ddcc:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1ddce:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1ddd0:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1ddd2:	b25c      	sxtb	r4, r3
   1ddd4:	42a1      	cmp	r1, r4
   1ddd6:	dc03      	bgt.n	1dde0 <uECC_vli_isZero+0x14>
}
   1ddd8:	fab2 f082 	clz	r0, r2
   1dddc:	0940      	lsrs	r0, r0, #5
   1ddde:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1dde0:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1dde4:	3301      	adds	r3, #1
   1dde6:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1dde8:	e7f3      	b.n	1ddd2 <uECC_vli_isZero+0x6>

0001ddea <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ddea:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ddec:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ddee:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ddf2:	f001 011f 	and.w	r1, r1, #31
   1ddf6:	fa03 f101 	lsl.w	r1, r3, r1
}
   1ddfa:	4008      	ands	r0, r1
   1ddfc:	4770      	bx	lr

0001ddfe <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ddfe:	3901      	subs	r1, #1
   1de00:	b24b      	sxtb	r3, r1
{
   1de02:	4602      	mov	r2, r0
   1de04:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1de08:	2b00      	cmp	r3, #0
   1de0a:	da03      	bge.n	1de14 <uECC_vli_numBits+0x16>
	return (i + 1);
   1de0c:	3301      	adds	r3, #1
   1de0e:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1de10:	b938      	cbnz	r0, 1de22 <uECC_vli_numBits+0x24>
   1de12:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1de14:	f851 0904 	ldr.w	r0, [r1], #-4
   1de18:	2800      	cmp	r0, #0
   1de1a:	d1f7      	bne.n	1de0c <uECC_vli_numBits+0xe>
   1de1c:	3b01      	subs	r3, #1
   1de1e:	b25b      	sxtb	r3, r3
   1de20:	e7f2      	b.n	1de08 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1de22:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1de26:	3b01      	subs	r3, #1
   1de28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1de2c:	2300      	movs	r3, #0
   1de2e:	b922      	cbnz	r2, 1de3a <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1de30:	3801      	subs	r0, #1
   1de32:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1de36:	b200      	sxth	r0, r0
}
   1de38:	4770      	bx	lr
		digit >>= 1;
   1de3a:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1de3c:	3301      	adds	r3, #1
   1de3e:	e7f6      	b.n	1de2e <uECC_vli_numBits+0x30>

0001de40 <uECC_vli_set>:
{
   1de40:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1de42:	2300      	movs	r3, #0
   1de44:	b25c      	sxtb	r4, r3
   1de46:	42a2      	cmp	r2, r4
   1de48:	dc00      	bgt.n	1de4c <uECC_vli_set+0xc>
}
   1de4a:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1de4c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1de50:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1de54:	3301      	adds	r3, #1
   1de56:	e7f5      	b.n	1de44 <uECC_vli_set+0x4>

0001de58 <uECC_vli_cmp_unsafe>:
{
   1de58:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1de5a:	3a01      	subs	r2, #1
   1de5c:	b253      	sxtb	r3, r2
   1de5e:	009a      	lsls	r2, r3, #2
   1de60:	2b00      	cmp	r3, #0
   1de62:	da01      	bge.n	1de68 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1de64:	2000      	movs	r0, #0
}
   1de66:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1de68:	5885      	ldr	r5, [r0, r2]
   1de6a:	588c      	ldr	r4, [r1, r2]
   1de6c:	42a5      	cmp	r5, r4
   1de6e:	d805      	bhi.n	1de7c <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1de70:	f1a2 0204 	sub.w	r2, r2, #4
   1de74:	d304      	bcc.n	1de80 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1de76:	3b01      	subs	r3, #1
   1de78:	b25b      	sxtb	r3, r3
   1de7a:	e7f1      	b.n	1de60 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1de7c:	2001      	movs	r0, #1
   1de7e:	e7f2      	b.n	1de66 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1de80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1de84:	e7ef      	b.n	1de66 <uECC_vli_cmp_unsafe+0xe>

0001de86 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1de86:	3a01      	subs	r2, #1
   1de88:	b253      	sxtb	r3, r2
{
   1de8a:	b570      	push	{r4, r5, r6, lr}
   1de8c:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1de8e:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1de90:	2b00      	cmp	r3, #0
   1de92:	da03      	bge.n	1de9c <uECC_vli_equal+0x16>
}
   1de94:	1e20      	subs	r0, r4, #0
   1de96:	bf18      	it	ne
   1de98:	2001      	movne	r0, #1
   1de9a:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1de9c:	5885      	ldr	r5, [r0, r2]
   1de9e:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1dea0:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1dea2:	4075      	eors	r5, r6
   1dea4:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1dea6:	b25b      	sxtb	r3, r3
   1dea8:	3a04      	subs	r2, #4
   1deaa:	e7f1      	b.n	1de90 <uECC_vli_equal+0xa>

0001deac <uECC_vli_sub>:
{
   1deac:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1deae:	2400      	movs	r4, #0
{
   1deb0:	4606      	mov	r6, r0
   1deb2:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1deb4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1deb6:	b265      	sxtb	r5, r4
   1deb8:	45ac      	cmp	ip, r5
   1deba:	dc00      	bgt.n	1debe <uECC_vli_sub+0x12>
}
   1debc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1debe:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1dec2:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1dec6:	1a3d      	subs	r5, r7, r0
   1dec8:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1deca:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1decc:	bf34      	ite	cc
   1dece:	2701      	movcc	r7, #1
   1ded0:	2700      	movcs	r7, #0
		result[i] = diff;
   1ded2:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1ded6:	bf18      	it	ne
   1ded8:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1deda:	3401      	adds	r4, #1
   1dedc:	e7eb      	b.n	1deb6 <uECC_vli_sub+0xa>

0001dede <uECC_vli_modAdd>:
{
   1dede:	b570      	push	{r4, r5, r6, lr}
   1dee0:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1dee4:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1dee6:	4633      	mov	r3, r6
{
   1dee8:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1deea:	f7ff feab 	bl	1dc44 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1deee:	b930      	cbnz	r0, 1defe <uECC_vli_modAdd+0x20>
   1def0:	4632      	mov	r2, r6
   1def2:	4621      	mov	r1, r4
   1def4:	4628      	mov	r0, r5
   1def6:	f7ff ffaf 	bl	1de58 <uECC_vli_cmp_unsafe>
   1defa:	2801      	cmp	r0, #1
   1defc:	d007      	beq.n	1df0e <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1defe:	4633      	mov	r3, r6
   1df00:	462a      	mov	r2, r5
   1df02:	4621      	mov	r1, r4
   1df04:	4620      	mov	r0, r4
}
   1df06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1df0a:	f7ff bfcf 	b.w	1deac <uECC_vli_sub>
}
   1df0e:	bd70      	pop	{r4, r5, r6, pc}

0001df10 <uECC_vli_modSub>:
{
   1df10:	b570      	push	{r4, r5, r6, lr}
   1df12:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1df16:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1df18:	4633      	mov	r3, r6
{
   1df1a:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1df1c:	f7ff ffc6 	bl	1deac <uECC_vli_sub>
	if (l_borrow) {
   1df20:	b138      	cbz	r0, 1df32 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1df22:	4633      	mov	r3, r6
   1df24:	462a      	mov	r2, r5
   1df26:	4621      	mov	r1, r4
   1df28:	4620      	mov	r0, r4
}
   1df2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1df2e:	f7ff be89 	b.w	1dc44 <uECC_vli_add>
}
   1df32:	bd70      	pop	{r4, r5, r6, pc}

0001df34 <uECC_vli_mmod>:
{
   1df34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df38:	b0a5      	sub	sp, #148	; 0x94
   1df3a:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1df3c:	ab14      	add	r3, sp, #80	; 0x50
   1df3e:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1df42:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1df44:	4629      	mov	r1, r5
   1df46:	4610      	mov	r0, r2
{
   1df48:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1df4a:	f7ff ff58 	bl	1ddfe <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1df4e:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1df52:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1df54:	2c00      	cmp	r4, #0
   1df56:	4621      	mov	r1, r4
   1df58:	bfb8      	it	lt
   1df5a:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1df5e:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1df60:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1df64:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1df68:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1df6a:	f004 071f 	and.w	r7, r4, #31
   1df6e:	bf58      	it	pl
   1df70:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1df72:	f7ff ff20 	bl	1ddb6 <uECC_vli_clear>
	if (bit_shift > 0) {
   1df76:	2f00      	cmp	r7, #0
   1df78:	b208      	sxth	r0, r1
   1df7a:	dd2b      	ble.n	1dfd4 <uECC_vli_mmod+0xa0>
   1df7c:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1df7e:	2200      	movs	r2, #0
   1df80:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1df84:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1df88:	4613      	mov	r3, r2
   1df8a:	429d      	cmp	r5, r3
   1df8c:	d817      	bhi.n	1dfbe <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1df8e:	006b      	lsls	r3, r5, #1
   1df90:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1df92:	ab04      	add	r3, sp, #16
   1df94:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1df98:	1e6f      	subs	r7, r5, #1
   1df9a:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1df9c:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1df9e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1dfa2:	2c00      	cmp	r4, #0
   1dfa4:	da54      	bge.n	1e050 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1dfa6:	ab24      	add	r3, sp, #144	; 0x90
   1dfa8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1dfac:	462a      	mov	r2, r5
   1dfae:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1dfb2:	4640      	mov	r0, r8
   1dfb4:	f7ff ff44 	bl	1de40 <uECC_vli_set>
}
   1dfb8:	b025      	add	sp, #148	; 0x94
   1dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1dfbe:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1dfc2:	fa0c f007 	lsl.w	r0, ip, r7
   1dfc6:	4302      	orrs	r2, r0
   1dfc8:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1dfcc:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1dfce:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1dfd2:	e7da      	b.n	1df8a <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1dfd4:	ab04      	add	r3, sp, #16
   1dfd6:	462a      	mov	r2, r5
   1dfd8:	4631      	mov	r1, r6
   1dfda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1dfde:	f7ff ff2f 	bl	1de40 <uECC_vli_set>
   1dfe2:	e7d4      	b.n	1df8e <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1dfe4:	fa0f fe82 	sxth.w	lr, r2
   1dfe8:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1dfec:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1dff0:	ab24      	add	r3, sp, #144	; 0x90
   1dff2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1dff6:	3001      	adds	r0, #1
   1dff8:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1dffc:	440b      	add	r3, r1
   1dffe:	ebbb 0303 	subs.w	r3, fp, r3
   1e002:	bf34      	ite	cc
   1e004:	2201      	movcc	r2, #1
   1e006:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1e008:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1e00a:	bf18      	it	ne
   1e00c:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1e00e:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1e012:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1e016:	9b01      	ldr	r3, [sp, #4]
   1e018:	b242      	sxtb	r2, r0
   1e01a:	429a      	cmp	r2, r3
   1e01c:	dbe2      	blt.n	1dfe4 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1e01e:	1a73      	subs	r3, r6, r1
   1e020:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1e022:	4629      	mov	r1, r5
   1e024:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1e026:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1e028:	f7ff fe24 	bl	1dc74 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e02c:	ab24      	add	r3, sp, #144	; 0x90
   1e02e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e032:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e034:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1e038:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e03c:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e03e:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1e042:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1e044:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1e048:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1e04a:	f7ff fe13 	bl	1dc74 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1e04e:	e7a8      	b.n	1dfa2 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1e050:	ab24      	add	r3, sp, #144	; 0x90
   1e052:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1e054:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1e058:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1e05a:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1e05e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1e062:	e7d8      	b.n	1e016 <uECC_vli_mmod+0xe2>

0001e064 <uECC_vli_modMult_fast>:
{
   1e064:	b530      	push	{r4, r5, lr}
   1e066:	461c      	mov	r4, r3
   1e068:	b091      	sub	sp, #68	; 0x44
   1e06a:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1e06c:	f993 3000 	ldrsb.w	r3, [r3]
   1e070:	4668      	mov	r0, sp
   1e072:	f7ff fe28 	bl	1dcc6 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1e076:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1e07a:	4669      	mov	r1, sp
   1e07c:	4628      	mov	r0, r5
   1e07e:	4798      	blx	r3
}
   1e080:	b011      	add	sp, #68	; 0x44
   1e082:	bd30      	pop	{r4, r5, pc}

0001e084 <uECC_vli_modSquare_fast>:
{
   1e084:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1e086:	460a      	mov	r2, r1
   1e088:	f7ff bfec 	b.w	1e064 <uECC_vli_modMult_fast>

0001e08c <double_jacobian_default>:
{
   1e08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1e090:	f993 6000 	ldrsb.w	r6, [r3]
{
   1e094:	b092      	sub	sp, #72	; 0x48
   1e096:	4604      	mov	r4, r0
   1e098:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1e09a:	4610      	mov	r0, r2
   1e09c:	4631      	mov	r1, r6
{
   1e09e:	4615      	mov	r5, r2
   1e0a0:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1e0a2:	f7ff fe93 	bl	1ddcc <uECC_vli_isZero>
   1e0a6:	2800      	cmp	r0, #0
   1e0a8:	f040 8091 	bne.w	1e1ce <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1e0ac:	463a      	mov	r2, r7
   1e0ae:	4649      	mov	r1, r9
   1e0b0:	a802      	add	r0, sp, #8
   1e0b2:	f7ff ffe7 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1e0b6:	463b      	mov	r3, r7
   1e0b8:	aa02      	add	r2, sp, #8
   1e0ba:	4621      	mov	r1, r4
   1e0bc:	a80a      	add	r0, sp, #40	; 0x28
   1e0be:	f7ff ffd1 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1e0c2:	a902      	add	r1, sp, #8
   1e0c4:	4608      	mov	r0, r1
   1e0c6:	463a      	mov	r2, r7
   1e0c8:	f7ff ffdc 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1e0cc:	463b      	mov	r3, r7
   1e0ce:	462a      	mov	r2, r5
   1e0d0:	4649      	mov	r1, r9
   1e0d2:	4648      	mov	r0, r9
   1e0d4:	f7ff ffc6 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1e0d8:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1e0dc:	463a      	mov	r2, r7
   1e0de:	4629      	mov	r1, r5
   1e0e0:	4628      	mov	r0, r5
   1e0e2:	f7ff ffcf 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1e0e6:	4643      	mov	r3, r8
   1e0e8:	462a      	mov	r2, r5
   1e0ea:	4621      	mov	r1, r4
   1e0ec:	4620      	mov	r0, r4
   1e0ee:	9600      	str	r6, [sp, #0]
   1e0f0:	f7ff fef5 	bl	1dede <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1e0f4:	4643      	mov	r3, r8
   1e0f6:	462a      	mov	r2, r5
   1e0f8:	4629      	mov	r1, r5
   1e0fa:	4628      	mov	r0, r5
   1e0fc:	9600      	str	r6, [sp, #0]
   1e0fe:	f7ff feee 	bl	1dede <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1e102:	4643      	mov	r3, r8
   1e104:	462a      	mov	r2, r5
   1e106:	4621      	mov	r1, r4
   1e108:	4628      	mov	r0, r5
   1e10a:	9600      	str	r6, [sp, #0]
   1e10c:	f7ff ff00 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1e110:	463b      	mov	r3, r7
   1e112:	462a      	mov	r2, r5
   1e114:	4621      	mov	r1, r4
   1e116:	4620      	mov	r0, r4
   1e118:	f7ff ffa4 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1e11c:	4643      	mov	r3, r8
   1e11e:	4622      	mov	r2, r4
   1e120:	4621      	mov	r1, r4
   1e122:	4628      	mov	r0, r5
   1e124:	9600      	str	r6, [sp, #0]
   1e126:	f7ff feda 	bl	1dede <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1e12a:	4643      	mov	r3, r8
   1e12c:	9600      	str	r6, [sp, #0]
   1e12e:	462a      	mov	r2, r5
   1e130:	4621      	mov	r1, r4
   1e132:	4620      	mov	r0, r4
   1e134:	f7ff fed3 	bl	1dede <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e138:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1e13a:	07db      	lsls	r3, r3, #31
   1e13c:	d54a      	bpl.n	1e1d4 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1e13e:	4633      	mov	r3, r6
   1e140:	4642      	mov	r2, r8
   1e142:	4621      	mov	r1, r4
   1e144:	4620      	mov	r0, r4
   1e146:	f7ff fd7d 	bl	1dc44 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1e14a:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1e14c:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1e14e:	4620      	mov	r0, r4
   1e150:	f7ff fd90 	bl	1dc74 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1e154:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1e158:	3b01      	subs	r3, #1
   1e15a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1e15e:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1e162:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1e166:	463a      	mov	r2, r7
   1e168:	4621      	mov	r1, r4
   1e16a:	4628      	mov	r0, r5
   1e16c:	f7ff ff8a 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1e170:	4643      	mov	r3, r8
   1e172:	aa0a      	add	r2, sp, #40	; 0x28
   1e174:	4629      	mov	r1, r5
   1e176:	4628      	mov	r0, r5
   1e178:	9600      	str	r6, [sp, #0]
   1e17a:	f7ff fec9 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1e17e:	4643      	mov	r3, r8
   1e180:	aa0a      	add	r2, sp, #40	; 0x28
   1e182:	4629      	mov	r1, r5
   1e184:	4628      	mov	r0, r5
   1e186:	9600      	str	r6, [sp, #0]
   1e188:	f7ff fec2 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1e18c:	a90a      	add	r1, sp, #40	; 0x28
   1e18e:	4608      	mov	r0, r1
   1e190:	4643      	mov	r3, r8
   1e192:	462a      	mov	r2, r5
   1e194:	9600      	str	r6, [sp, #0]
   1e196:	f7ff febb 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1e19a:	463b      	mov	r3, r7
   1e19c:	aa0a      	add	r2, sp, #40	; 0x28
   1e19e:	4621      	mov	r1, r4
   1e1a0:	4620      	mov	r0, r4
   1e1a2:	f7ff ff5f 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1e1a6:	aa02      	add	r2, sp, #8
   1e1a8:	4643      	mov	r3, r8
   1e1aa:	4610      	mov	r0, r2
   1e1ac:	4621      	mov	r1, r4
   1e1ae:	9600      	str	r6, [sp, #0]
   1e1b0:	f7ff feae 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1e1b4:	4632      	mov	r2, r6
   1e1b6:	4629      	mov	r1, r5
   1e1b8:	4620      	mov	r0, r4
   1e1ba:	f7ff fe41 	bl	1de40 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1e1be:	4649      	mov	r1, r9
   1e1c0:	4628      	mov	r0, r5
   1e1c2:	f7ff fe3d 	bl	1de40 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1e1c6:	a902      	add	r1, sp, #8
   1e1c8:	4648      	mov	r0, r9
   1e1ca:	f7ff fe39 	bl	1de40 <uECC_vli_set>
}
   1e1ce:	b012      	add	sp, #72	; 0x48
   1e1d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1e1d4:	4631      	mov	r1, r6
   1e1d6:	4620      	mov	r0, r4
   1e1d8:	f7ff fd4c 	bl	1dc74 <uECC_vli_rshift1>
   1e1dc:	e7c3      	b.n	1e166 <double_jacobian_default+0xda>

0001e1de <x_side_default>:
{
   1e1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e1e2:	4615      	mov	r5, r2
   1e1e4:	b08a      	sub	sp, #40	; 0x28
   1e1e6:	4604      	mov	r4, r0
   1e1e8:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1e1ea:	221c      	movs	r2, #28
   1e1ec:	2100      	movs	r1, #0
   1e1ee:	a803      	add	r0, sp, #12
   1e1f0:	f000 fe2a 	bl	1ee48 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1e1f4:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1e1f6:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1e1fa:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1e1fc:	462a      	mov	r2, r5
   1e1fe:	4631      	mov	r1, r6
   1e200:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1e202:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1e204:	f7ff ff3e 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1e208:	463b      	mov	r3, r7
   1e20a:	aa02      	add	r2, sp, #8
   1e20c:	4621      	mov	r1, r4
   1e20e:	4620      	mov	r0, r4
   1e210:	f8cd 8000 	str.w	r8, [sp]
   1e214:	f7ff fe7c 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1e218:	462b      	mov	r3, r5
   1e21a:	4632      	mov	r2, r6
   1e21c:	4621      	mov	r1, r4
   1e21e:	4620      	mov	r0, r4
   1e220:	f7ff ff20 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1e224:	f8cd 8000 	str.w	r8, [sp]
   1e228:	463b      	mov	r3, r7
   1e22a:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1e22e:	4621      	mov	r1, r4
   1e230:	4620      	mov	r0, r4
   1e232:	f7ff fe54 	bl	1dede <uECC_vli_modAdd>
}
   1e236:	b00a      	add	sp, #40	; 0x28
   1e238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e23c <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1e23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e240:	b09a      	sub	sp, #104	; 0x68
   1e242:	4616      	mov	r6, r2
   1e244:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1e248:	4644      	mov	r4, r8
{
   1e24a:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1e24c:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e250:	9500      	str	r5, [sp, #0]
{
   1e252:	4607      	mov	r7, r0
   1e254:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e256:	4623      	mov	r3, r4
   1e258:	4602      	mov	r2, r0
   1e25a:	4631      	mov	r1, r6
   1e25c:	a802      	add	r0, sp, #8
   1e25e:	f7ff fe57 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1e262:	a902      	add	r1, sp, #8
   1e264:	4642      	mov	r2, r8
   1e266:	4608      	mov	r0, r1
   1e268:	f7ff ff0c 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1e26c:	4643      	mov	r3, r8
   1e26e:	aa02      	add	r2, sp, #8
   1e270:	4639      	mov	r1, r7
   1e272:	4638      	mov	r0, r7
   1e274:	f7ff fef6 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1e278:	4643      	mov	r3, r8
   1e27a:	aa02      	add	r2, sp, #8
   1e27c:	4631      	mov	r1, r6
   1e27e:	4630      	mov	r0, r6
   1e280:	f7ff fef0 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1e284:	4623      	mov	r3, r4
   1e286:	4652      	mov	r2, sl
   1e288:	4649      	mov	r1, r9
   1e28a:	a802      	add	r0, sp, #8
   1e28c:	9500      	str	r5, [sp, #0]
   1e28e:	f7ff fe26 	bl	1dede <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1e292:	4623      	mov	r3, r4
   1e294:	4652      	mov	r2, sl
   1e296:	4649      	mov	r1, r9
   1e298:	4648      	mov	r0, r9
   1e29a:	9500      	str	r5, [sp, #0]
   1e29c:	f7ff fe38 	bl	1df10 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1e2a0:	4623      	mov	r3, r4
   1e2a2:	463a      	mov	r2, r7
   1e2a4:	4631      	mov	r1, r6
   1e2a6:	a80a      	add	r0, sp, #40	; 0x28
   1e2a8:	9500      	str	r5, [sp, #0]
   1e2aa:	f7ff fe31 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1e2ae:	4643      	mov	r3, r8
   1e2b0:	aa0a      	add	r2, sp, #40	; 0x28
   1e2b2:	4651      	mov	r1, sl
   1e2b4:	4650      	mov	r0, sl
   1e2b6:	f7ff fed5 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1e2ba:	4623      	mov	r3, r4
   1e2bc:	4632      	mov	r2, r6
   1e2be:	4639      	mov	r1, r7
   1e2c0:	a80a      	add	r0, sp, #40	; 0x28
   1e2c2:	9500      	str	r5, [sp, #0]
   1e2c4:	f7ff fe0b 	bl	1dede <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1e2c8:	4642      	mov	r2, r8
   1e2ca:	4649      	mov	r1, r9
   1e2cc:	4630      	mov	r0, r6
   1e2ce:	f7ff fed9 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1e2d2:	4623      	mov	r3, r4
   1e2d4:	aa0a      	add	r2, sp, #40	; 0x28
   1e2d6:	4631      	mov	r1, r6
   1e2d8:	4630      	mov	r0, r6
   1e2da:	9500      	str	r5, [sp, #0]
   1e2dc:	f7ff fe18 	bl	1df10 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1e2e0:	4623      	mov	r3, r4
   1e2e2:	4632      	mov	r2, r6
   1e2e4:	4639      	mov	r1, r7
   1e2e6:	a812      	add	r0, sp, #72	; 0x48
   1e2e8:	9500      	str	r5, [sp, #0]
   1e2ea:	f7ff fe11 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1e2ee:	4643      	mov	r3, r8
   1e2f0:	aa12      	add	r2, sp, #72	; 0x48
   1e2f2:	4649      	mov	r1, r9
   1e2f4:	4648      	mov	r0, r9
   1e2f6:	f7ff feb5 	bl	1e064 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1e2fa:	4623      	mov	r3, r4
   1e2fc:	4652      	mov	r2, sl
   1e2fe:	4649      	mov	r1, r9
   1e300:	4648      	mov	r0, r9
   1e302:	9500      	str	r5, [sp, #0]
   1e304:	f7ff fe04 	bl	1df10 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1e308:	4642      	mov	r2, r8
   1e30a:	a902      	add	r1, sp, #8
   1e30c:	a812      	add	r0, sp, #72	; 0x48
   1e30e:	f7ff feb9 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1e312:	a912      	add	r1, sp, #72	; 0x48
   1e314:	4623      	mov	r3, r4
   1e316:	aa0a      	add	r2, sp, #40	; 0x28
   1e318:	4608      	mov	r0, r1
   1e31a:	9500      	str	r5, [sp, #0]
   1e31c:	f7ff fdf8 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1e320:	4623      	mov	r3, r4
   1e322:	463a      	mov	r2, r7
   1e324:	a912      	add	r1, sp, #72	; 0x48
   1e326:	a80a      	add	r0, sp, #40	; 0x28
   1e328:	9500      	str	r5, [sp, #0]
   1e32a:	f7ff fdf1 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1e32e:	a90a      	add	r1, sp, #40	; 0x28
   1e330:	4643      	mov	r3, r8
   1e332:	aa02      	add	r2, sp, #8
   1e334:	4608      	mov	r0, r1
   1e336:	f7ff fe95 	bl	1e064 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1e33a:	4623      	mov	r3, r4
   1e33c:	4652      	mov	r2, sl
   1e33e:	a90a      	add	r1, sp, #40	; 0x28
   1e340:	4650      	mov	r0, sl
   1e342:	9500      	str	r5, [sp, #0]
   1e344:	f7ff fde4 	bl	1df10 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1e348:	462a      	mov	r2, r5
   1e34a:	a912      	add	r1, sp, #72	; 0x48
   1e34c:	4638      	mov	r0, r7
   1e34e:	f7ff fd77 	bl	1de40 <uECC_vli_set>
}
   1e352:	b01a      	add	sp, #104	; 0x68
   1e354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e358 <uECC_vli_modInv>:
{
   1e358:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e35a:	460f      	mov	r7, r1
   1e35c:	b0a1      	sub	sp, #132	; 0x84
   1e35e:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1e360:	4619      	mov	r1, r3
   1e362:	4638      	mov	r0, r7
{
   1e364:	4615      	mov	r5, r2
   1e366:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1e368:	f7ff fd30 	bl	1ddcc <uECC_vli_isZero>
   1e36c:	b120      	cbz	r0, 1e378 <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1e36e:	4630      	mov	r0, r6
   1e370:	f7ff fd21 	bl	1ddb6 <uECC_vli_clear>
}
   1e374:	b021      	add	sp, #132	; 0x84
   1e376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1e378:	4622      	mov	r2, r4
   1e37a:	4639      	mov	r1, r7
   1e37c:	4668      	mov	r0, sp
   1e37e:	f7ff fd5f 	bl	1de40 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1e382:	4629      	mov	r1, r5
   1e384:	a808      	add	r0, sp, #32
   1e386:	f7ff fd5b 	bl	1de40 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1e38a:	a810      	add	r0, sp, #64	; 0x40
   1e38c:	4621      	mov	r1, r4
   1e38e:	f7ff fd12 	bl	1ddb6 <uECC_vli_clear>
	u[0] = 1;
   1e392:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1e394:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1e396:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1e398:	f7ff fd0d 	bl	1ddb6 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1e39c:	4622      	mov	r2, r4
   1e39e:	a908      	add	r1, sp, #32
   1e3a0:	4668      	mov	r0, sp
   1e3a2:	f7ff fd59 	bl	1de58 <uECC_vli_cmp_unsafe>
   1e3a6:	b928      	cbnz	r0, 1e3b4 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1e3a8:	4622      	mov	r2, r4
   1e3aa:	a910      	add	r1, sp, #64	; 0x40
   1e3ac:	4630      	mov	r0, r6
   1e3ae:	f7ff fd47 	bl	1de40 <uECC_vli_set>
   1e3b2:	e7df      	b.n	1e374 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1e3b4:	9b00      	ldr	r3, [sp, #0]
   1e3b6:	07da      	lsls	r2, r3, #31
   1e3b8:	d409      	bmi.n	1e3ce <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1e3ba:	4621      	mov	r1, r4
   1e3bc:	4668      	mov	r0, sp
   1e3be:	f7ff fc59 	bl	1dc74 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1e3c2:	4622      	mov	r2, r4
   1e3c4:	4629      	mov	r1, r5
   1e3c6:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1e3c8:	f7ff fc61 	bl	1dc8e <vli_modInv_update>
   1e3cc:	e7e6      	b.n	1e39c <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1e3ce:	9b08      	ldr	r3, [sp, #32]
   1e3d0:	07db      	lsls	r3, r3, #31
   1e3d2:	d407      	bmi.n	1e3e4 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1e3d4:	4621      	mov	r1, r4
   1e3d6:	a808      	add	r0, sp, #32
   1e3d8:	f7ff fc4c 	bl	1dc74 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1e3dc:	4622      	mov	r2, r4
   1e3de:	4629      	mov	r1, r5
   1e3e0:	a818      	add	r0, sp, #96	; 0x60
   1e3e2:	e7f1      	b.n	1e3c8 <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1e3e4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1e3e6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1e3e8:	dd1c      	ble.n	1e424 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1e3ea:	aa08      	add	r2, sp, #32
   1e3ec:	4669      	mov	r1, sp
   1e3ee:	4668      	mov	r0, sp
   1e3f0:	f7ff fd5c 	bl	1deac <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1e3f4:	4621      	mov	r1, r4
   1e3f6:	4668      	mov	r0, sp
   1e3f8:	f7ff fc3c 	bl	1dc74 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1e3fc:	4622      	mov	r2, r4
   1e3fe:	a918      	add	r1, sp, #96	; 0x60
   1e400:	a810      	add	r0, sp, #64	; 0x40
   1e402:	f7ff fd29 	bl	1de58 <uECC_vli_cmp_unsafe>
   1e406:	2800      	cmp	r0, #0
   1e408:	da05      	bge.n	1e416 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1e40a:	a910      	add	r1, sp, #64	; 0x40
   1e40c:	4623      	mov	r3, r4
   1e40e:	462a      	mov	r2, r5
   1e410:	4608      	mov	r0, r1
   1e412:	f7ff fc17 	bl	1dc44 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1e416:	a910      	add	r1, sp, #64	; 0x40
   1e418:	4623      	mov	r3, r4
   1e41a:	aa18      	add	r2, sp, #96	; 0x60
   1e41c:	4608      	mov	r0, r1
   1e41e:	f7ff fd45 	bl	1deac <uECC_vli_sub>
   1e422:	e7ce      	b.n	1e3c2 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1e424:	a908      	add	r1, sp, #32
   1e426:	466a      	mov	r2, sp
   1e428:	4608      	mov	r0, r1
   1e42a:	f7ff fd3f 	bl	1deac <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1e42e:	4621      	mov	r1, r4
   1e430:	a808      	add	r0, sp, #32
   1e432:	f7ff fc1f 	bl	1dc74 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1e436:	4622      	mov	r2, r4
   1e438:	a910      	add	r1, sp, #64	; 0x40
   1e43a:	a818      	add	r0, sp, #96	; 0x60
   1e43c:	f7ff fd0c 	bl	1de58 <uECC_vli_cmp_unsafe>
   1e440:	2800      	cmp	r0, #0
   1e442:	da05      	bge.n	1e450 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1e444:	a918      	add	r1, sp, #96	; 0x60
   1e446:	4623      	mov	r3, r4
   1e448:	462a      	mov	r2, r5
   1e44a:	4608      	mov	r0, r1
   1e44c:	f7ff fbfa 	bl	1dc44 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1e450:	a918      	add	r1, sp, #96	; 0x60
   1e452:	4623      	mov	r3, r4
   1e454:	aa10      	add	r2, sp, #64	; 0x40
   1e456:	4608      	mov	r0, r1
   1e458:	f7ff fd28 	bl	1deac <uECC_vli_sub>
   1e45c:	e7be      	b.n	1e3dc <uECC_vli_modInv+0x84>

0001e45e <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1e45e:	7809      	ldrb	r1, [r1, #0]
   1e460:	0049      	lsls	r1, r1, #1
   1e462:	b249      	sxtb	r1, r1
   1e464:	f7ff bcb2 	b.w	1ddcc <uECC_vli_isZero>

0001e468 <apply_z>:
{
   1e468:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e46a:	4615      	mov	r5, r2
   1e46c:	b089      	sub	sp, #36	; 0x24
   1e46e:	461c      	mov	r4, r3
   1e470:	4607      	mov	r7, r0
   1e472:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1e474:	461a      	mov	r2, r3
   1e476:	4629      	mov	r1, r5
   1e478:	4668      	mov	r0, sp
   1e47a:	f7ff fe03 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1e47e:	4623      	mov	r3, r4
   1e480:	466a      	mov	r2, sp
   1e482:	4639      	mov	r1, r7
   1e484:	4638      	mov	r0, r7
   1e486:	f7ff fded 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1e48a:	4623      	mov	r3, r4
   1e48c:	462a      	mov	r2, r5
   1e48e:	4669      	mov	r1, sp
   1e490:	4668      	mov	r0, sp
   1e492:	f7ff fde7 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1e496:	4623      	mov	r3, r4
   1e498:	466a      	mov	r2, sp
   1e49a:	4631      	mov	r1, r6
   1e49c:	4630      	mov	r0, r6
   1e49e:	f7ff fde1 	bl	1e064 <uECC_vli_modMult_fast>
}
   1e4a2:	b009      	add	sp, #36	; 0x24
   1e4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001e4a6 <XYcZ_add>:
{
   1e4a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1e4aa:	b08a      	sub	sp, #40	; 0x28
   1e4ac:	4614      	mov	r4, r2
   1e4ae:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1e4b2:	4655      	mov	r5, sl
{
   1e4b4:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1e4b6:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e4ba:	9600      	str	r6, [sp, #0]
{
   1e4bc:	4680      	mov	r8, r0
   1e4be:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1e4c0:	462b      	mov	r3, r5
   1e4c2:	4602      	mov	r2, r0
   1e4c4:	4621      	mov	r1, r4
   1e4c6:	a802      	add	r0, sp, #8
   1e4c8:	f7ff fd22 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1e4cc:	a902      	add	r1, sp, #8
   1e4ce:	4652      	mov	r2, sl
   1e4d0:	4608      	mov	r0, r1
   1e4d2:	f7ff fdd7 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1e4d6:	4653      	mov	r3, sl
   1e4d8:	aa02      	add	r2, sp, #8
   1e4da:	4641      	mov	r1, r8
   1e4dc:	4640      	mov	r0, r8
   1e4de:	f7ff fdc1 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1e4e2:	4653      	mov	r3, sl
   1e4e4:	aa02      	add	r2, sp, #8
   1e4e6:	4621      	mov	r1, r4
   1e4e8:	4620      	mov	r0, r4
   1e4ea:	f7ff fdbb 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1e4ee:	462b      	mov	r3, r5
   1e4f0:	464a      	mov	r2, r9
   1e4f2:	4639      	mov	r1, r7
   1e4f4:	4638      	mov	r0, r7
   1e4f6:	9600      	str	r6, [sp, #0]
   1e4f8:	f7ff fd0a 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1e4fc:	4652      	mov	r2, sl
   1e4fe:	4639      	mov	r1, r7
   1e500:	a802      	add	r0, sp, #8
   1e502:	f7ff fdbf 	bl	1e084 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1e506:	a902      	add	r1, sp, #8
   1e508:	462b      	mov	r3, r5
   1e50a:	4642      	mov	r2, r8
   1e50c:	4608      	mov	r0, r1
   1e50e:	9600      	str	r6, [sp, #0]
   1e510:	f7ff fcfe 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1e514:	a902      	add	r1, sp, #8
   1e516:	462b      	mov	r3, r5
   1e518:	4622      	mov	r2, r4
   1e51a:	4608      	mov	r0, r1
   1e51c:	9600      	str	r6, [sp, #0]
   1e51e:	f7ff fcf7 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1e522:	462b      	mov	r3, r5
   1e524:	4642      	mov	r2, r8
   1e526:	4621      	mov	r1, r4
   1e528:	4620      	mov	r0, r4
   1e52a:	9600      	str	r6, [sp, #0]
   1e52c:	f7ff fcf0 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1e530:	4653      	mov	r3, sl
   1e532:	4622      	mov	r2, r4
   1e534:	4649      	mov	r1, r9
   1e536:	4648      	mov	r0, r9
   1e538:	f7ff fd94 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1e53c:	462b      	mov	r3, r5
   1e53e:	aa02      	add	r2, sp, #8
   1e540:	4641      	mov	r1, r8
   1e542:	4620      	mov	r0, r4
   1e544:	9600      	str	r6, [sp, #0]
   1e546:	f7ff fce3 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1e54a:	4653      	mov	r3, sl
   1e54c:	4622      	mov	r2, r4
   1e54e:	4639      	mov	r1, r7
   1e550:	4638      	mov	r0, r7
   1e552:	f7ff fd87 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1e556:	462b      	mov	r3, r5
   1e558:	464a      	mov	r2, r9
   1e55a:	4639      	mov	r1, r7
   1e55c:	4638      	mov	r0, r7
   1e55e:	9600      	str	r6, [sp, #0]
   1e560:	f7ff fcd6 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1e564:	4632      	mov	r2, r6
   1e566:	a902      	add	r1, sp, #8
   1e568:	4620      	mov	r0, r4
   1e56a:	f7ff fc69 	bl	1de40 <uECC_vli_set>
}
   1e56e:	b00a      	add	sp, #40	; 0x28
   1e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001e574 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1e574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e578:	b0b1      	sub	sp, #196	; 0xc4
   1e57a:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1e57e:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1e580:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1e584:	a818      	add	r0, sp, #96	; 0x60
{
   1e586:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1e588:	463a      	mov	r2, r7
{
   1e58a:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1e58c:	f7ff fc58 	bl	1de40 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1e590:	00bb      	lsls	r3, r7, #2
   1e592:	9305      	str	r3, [sp, #20]
   1e594:	9b04      	ldr	r3, [sp, #16]
   1e596:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1e59a:	4619      	mov	r1, r3
   1e59c:	a828      	add	r0, sp, #160	; 0xa0
   1e59e:	9302      	str	r3, [sp, #8]
   1e5a0:	f7ff fc4e 	bl	1de40 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1e5a4:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1e5a8:	2e00      	cmp	r6, #0
   1e5aa:	f000 8088 	beq.w	1e6be <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1e5ae:	462a      	mov	r2, r5
   1e5b0:	4631      	mov	r1, r6
   1e5b2:	a808      	add	r0, sp, #32
   1e5b4:	f7ff fc44 	bl	1de40 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1e5b8:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1e5bc:	462a      	mov	r2, r5
   1e5be:	a918      	add	r1, sp, #96	; 0x60
   1e5c0:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1e5c2:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1e5c6:	f7ff fc3b 	bl	1de40 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1e5ca:	a928      	add	r1, sp, #160	; 0xa0
   1e5cc:	4648      	mov	r0, r9
   1e5ce:	f7ff fc37 	bl	1de40 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1e5d2:	4623      	mov	r3, r4
   1e5d4:	aa08      	add	r2, sp, #32
   1e5d6:	a928      	add	r1, sp, #160	; 0xa0
   1e5d8:	a818      	add	r0, sp, #96	; 0x60
   1e5da:	f7ff ff45 	bl	1e468 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1e5de:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1e5e2:	4623      	mov	r3, r4
   1e5e4:	aa08      	add	r2, sp, #32
   1e5e6:	a928      	add	r1, sp, #160	; 0xa0
   1e5e8:	a818      	add	r0, sp, #96	; 0x60
   1e5ea:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1e5ec:	4623      	mov	r3, r4
   1e5ee:	aa08      	add	r2, sp, #32
   1e5f0:	4649      	mov	r1, r9
   1e5f2:	4640      	mov	r0, r8
   1e5f4:	f7ff ff38 	bl	1e468 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1e5f8:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1e5fc:	3d02      	subs	r5, #2
   1e5fe:	b22d      	sxth	r5, r5
   1e600:	2d00      	cmp	r5, #0
   1e602:	dc63      	bgt.n	1e6cc <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e604:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e608:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1e60a:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e60e:	ab10      	add	r3, sp, #64	; 0x40
   1e610:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1e614:	43ed      	mvns	r5, r5
   1e616:	ab20      	add	r3, sp, #128	; 0x80
   1e618:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1e61c:	f005 0501 	and.w	r5, r5, #1
   1e620:	ab10      	add	r3, sp, #64	; 0x40
   1e622:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1e626:	ab20      	add	r3, sp, #128	; 0x80
   1e628:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1e62c:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e630:	462b      	mov	r3, r5
   1e632:	464a      	mov	r2, r9
   1e634:	4631      	mov	r1, r6
   1e636:	4640      	mov	r0, r8
   1e638:	f7ff fe00 	bl	1e23c <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1e63c:	4653      	mov	r3, sl
   1e63e:	aa10      	add	r2, sp, #64	; 0x40
   1e640:	a918      	add	r1, sp, #96	; 0x60
   1e642:	a808      	add	r0, sp, #32
   1e644:	9700      	str	r7, [sp, #0]
   1e646:	f7ff fc63 	bl	1df10 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1e64a:	a908      	add	r1, sp, #32
   1e64c:	4623      	mov	r3, r4
   1e64e:	4632      	mov	r2, r6
   1e650:	4608      	mov	r0, r1
   1e652:	f7ff fd07 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1e656:	a908      	add	r1, sp, #32
   1e658:	9a04      	ldr	r2, [sp, #16]
   1e65a:	4623      	mov	r3, r4
   1e65c:	4608      	mov	r0, r1
   1e65e:	f7ff fd01 	bl	1e064 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1e662:	a908      	add	r1, sp, #32
   1e664:	463b      	mov	r3, r7
   1e666:	4652      	mov	r2, sl
   1e668:	4608      	mov	r0, r1
   1e66a:	f7ff fe75 	bl	1e358 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1e66e:	a908      	add	r1, sp, #32
   1e670:	9a02      	ldr	r2, [sp, #8]
   1e672:	4623      	mov	r3, r4
   1e674:	4608      	mov	r0, r1
   1e676:	f7ff fcf5 	bl	1e064 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1e67a:	a908      	add	r1, sp, #32
   1e67c:	4623      	mov	r3, r4
   1e67e:	4642      	mov	r2, r8
   1e680:	4608      	mov	r0, r1
   1e682:	f7ff fcef 	bl	1e064 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1e686:	9400      	str	r4, [sp, #0]
   1e688:	4633      	mov	r3, r6
   1e68a:	4642      	mov	r2, r8
   1e68c:	4629      	mov	r1, r5
   1e68e:	4648      	mov	r0, r9
   1e690:	f7ff ff09 	bl	1e4a6 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1e694:	4623      	mov	r3, r4
   1e696:	aa08      	add	r2, sp, #32
   1e698:	a920      	add	r1, sp, #128	; 0x80
   1e69a:	a810      	add	r0, sp, #64	; 0x40
   1e69c:	f7ff fee4 	bl	1e468 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1e6a0:	9803      	ldr	r0, [sp, #12]
   1e6a2:	463a      	mov	r2, r7
   1e6a4:	a910      	add	r1, sp, #64	; 0x40
   1e6a6:	f7ff fbcb 	bl	1de40 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1e6aa:	9b03      	ldr	r3, [sp, #12]
   1e6ac:	9c05      	ldr	r4, [sp, #20]
   1e6ae:	4423      	add	r3, r4
   1e6b0:	a920      	add	r1, sp, #128	; 0x80
   1e6b2:	4618      	mov	r0, r3
   1e6b4:	f7ff fbc4 	bl	1de40 <uECC_vli_set>
}
   1e6b8:	b031      	add	sp, #196	; 0xc4
   1e6ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1e6be:	4629      	mov	r1, r5
   1e6c0:	a808      	add	r0, sp, #32
   1e6c2:	f7ff fb78 	bl	1ddb6 <uECC_vli_clear>
		z[0] = 1;
   1e6c6:	2301      	movs	r3, #1
   1e6c8:	9308      	str	r3, [sp, #32]
   1e6ca:	e775      	b.n	1e5b8 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1e6cc:	4629      	mov	r1, r5
   1e6ce:	4650      	mov	r0, sl
   1e6d0:	f7ff fb8b 	bl	1ddea <uECC_vli_testBit>
   1e6d4:	fab0 f680 	clz	r6, r0
   1e6d8:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1e6da:	f1c6 0101 	rsb	r1, r6, #1
   1e6de:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1e6e2:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1e6e6:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1e6ea:	4633      	mov	r3, r6
   1e6ec:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1e6f0:	465a      	mov	r2, fp
   1e6f2:	9400      	str	r4, [sp, #0]
   1e6f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1e6f8:	f7ff fda0 	bl	1e23c <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1e6fc:	9907      	ldr	r1, [sp, #28]
   1e6fe:	9806      	ldr	r0, [sp, #24]
   1e700:	9400      	str	r4, [sp, #0]
   1e702:	460b      	mov	r3, r1
   1e704:	4602      	mov	r2, r0
   1e706:	4631      	mov	r1, r6
   1e708:	4658      	mov	r0, fp
   1e70a:	f7ff fecc 	bl	1e4a6 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1e70e:	3d01      	subs	r5, #1
   1e710:	e775      	b.n	1e5fe <EccPoint_mult+0x8a>

0001e712 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1e712:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1e716:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1e71a:	f119 081f 	adds.w	r8, r9, #31
{
   1e71e:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1e720:	bf48      	it	mi
   1e722:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1e726:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1e728:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1e72c:	3524      	adds	r5, #36	; 0x24
   1e72e:	4601      	mov	r1, r0
{
   1e730:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1e732:	4643      	mov	r3, r8
   1e734:	462a      	mov	r2, r5
   1e736:	4630      	mov	r0, r6
   1e738:	f7ff fa84 	bl	1dc44 <uECC_vli_add>
   1e73c:	4604      	mov	r4, r0
   1e73e:	b990      	cbnz	r0, 1e766 <regularize_k+0x54>
   1e740:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1e744:	da06      	bge.n	1e754 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1e746:	4649      	mov	r1, r9
   1e748:	4630      	mov	r0, r6
   1e74a:	f7ff fb4e 	bl	1ddea <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1e74e:	1e04      	subs	r4, r0, #0
   1e750:	bf18      	it	ne
   1e752:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1e754:	4643      	mov	r3, r8
   1e756:	462a      	mov	r2, r5
   1e758:	4631      	mov	r1, r6
   1e75a:	4638      	mov	r0, r7
   1e75c:	f7ff fa72 	bl	1dc44 <uECC_vli_add>

	return carry;
}
   1e760:	4620      	mov	r0, r4
   1e762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1e766:	2401      	movs	r4, #1
   1e768:	e7f4      	b.n	1e754 <regularize_k+0x42>

0001e76a <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1e76a:	b530      	push	{r4, r5, lr}
   1e76c:	4614      	mov	r4, r2
   1e76e:	b095      	sub	sp, #84	; 0x54
   1e770:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1e772:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1e774:	4623      	mov	r3, r4
{
   1e776:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1e778:	a904      	add	r1, sp, #16
   1e77a:	9102      	str	r1, [sp, #8]
   1e77c:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1e77e:	f7ff ffc8 	bl	1e712 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1e782:	fab0 f380 	clz	r3, r0
   1e786:	095b      	lsrs	r3, r3, #5
   1e788:	aa14      	add	r2, sp, #80	; 0x50
   1e78a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1e78e:	8863      	ldrh	r3, [r4, #2]
   1e790:	9401      	str	r4, [sp, #4]
   1e792:	3301      	adds	r3, #1
   1e794:	b21b      	sxth	r3, r3
   1e796:	9300      	str	r3, [sp, #0]
   1e798:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1e79c:	2300      	movs	r3, #0
   1e79e:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1e7a2:	4628      	mov	r0, r5
   1e7a4:	f7ff fee6 	bl	1e574 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1e7a8:	4621      	mov	r1, r4
   1e7aa:	4628      	mov	r0, r5
   1e7ac:	f7ff fe57 	bl	1e45e <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1e7b0:	fab0 f080 	clz	r0, r0
   1e7b4:	0940      	lsrs	r0, r0, #5
   1e7b6:	b015      	add	sp, #84	; 0x54
   1e7b8:	bd30      	pop	{r4, r5, pc}

0001e7ba <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1e7ba:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1e7bc:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1e7be:	1e4f      	subs	r7, r1, #1
   1e7c0:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1e7c2:	428c      	cmp	r4, r1
   1e7c4:	f105 0501 	add.w	r5, r5, #1
   1e7c8:	db00      	blt.n	1e7cc <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1e7cc:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1e7ce:	f023 0603 	bic.w	r6, r3, #3
   1e7d2:	f003 0303 	and.w	r3, r3, #3
   1e7d6:	5996      	ldr	r6, [r2, r6]
   1e7d8:	00db      	lsls	r3, r3, #3
   1e7da:	fa26 f303 	lsr.w	r3, r6, r3
   1e7de:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1e7e0:	e7ee      	b.n	1e7c0 <uECC_vli_nativeToBytes+0x6>

0001e7e2 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1e7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e7e4:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1e7e6:	1cd1      	adds	r1, r2, #3
   1e7e8:	bf48      	it	mi
   1e7ea:	1d91      	addmi	r1, r2, #6
   1e7ec:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1e7f0:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1e7f2:	f7ff fae0 	bl	1ddb6 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1e7f6:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1e7f8:	1e67      	subs	r7, r4, #1
   1e7fa:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1e7fc:	42a2      	cmp	r2, r4
   1e7fe:	f105 0501 	add.w	r5, r5, #1
   1e802:	db00      	blt.n	1e806 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1e804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1e806:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1e808:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1e80c:	5cb2      	ldrb	r2, [r6, r2]
   1e80e:	f003 0303 	and.w	r3, r3, #3
   1e812:	00db      	lsls	r3, r3, #3
   1e814:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1e818:	5842      	ldr	r2, [r0, r1]
   1e81a:	431a      	orrs	r2, r3
   1e81c:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1e81e:	e7ec      	b.n	1e7fa <uECC_vli_bytesToNative+0x18>

0001e820 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1e820:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e822:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1e824:	f991 6000 	ldrsb.w	r6, [r1]
{
   1e828:	4605      	mov	r5, r0
   1e82a:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1e82c:	f7ff fe17 	bl	1e45e <EccPoint_isZero>
   1e830:	bb28      	cbnz	r0, 1e87e <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1e832:	1d27      	adds	r7, r4, #4
   1e834:	4632      	mov	r2, r6
   1e836:	4629      	mov	r1, r5
   1e838:	4638      	mov	r0, r7
   1e83a:	f7ff fb0d 	bl	1de58 <uECC_vli_cmp_unsafe>
   1e83e:	2801      	cmp	r0, #1
   1e840:	d120      	bne.n	1e884 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1e842:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1e846:	4632      	mov	r2, r6
   1e848:	4638      	mov	r0, r7
   1e84a:	f7ff fb05 	bl	1de58 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1e84e:	2801      	cmp	r0, #1
   1e850:	d118      	bne.n	1e884 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1e852:	4622      	mov	r2, r4
   1e854:	4668      	mov	r0, sp
   1e856:	f7ff fc15 	bl	1e084 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1e85a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1e85e:	4622      	mov	r2, r4
   1e860:	4629      	mov	r1, r5
   1e862:	a808      	add	r0, sp, #32
   1e864:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1e866:	4632      	mov	r2, r6
   1e868:	a908      	add	r1, sp, #32
   1e86a:	4668      	mov	r0, sp
   1e86c:	f7ff fb0b 	bl	1de86 <uECC_vli_equal>
   1e870:	2800      	cmp	r0, #0
		return -3;
   1e872:	bf0c      	ite	eq
   1e874:	2000      	moveq	r0, #0
   1e876:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1e87a:	b011      	add	sp, #68	; 0x44
   1e87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1e87e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e882:	e7fa      	b.n	1e87a <uECC_valid_point+0x5a>
		return -2;
   1e884:	f06f 0001 	mvn.w	r0, #1
   1e888:	e7f7      	b.n	1e87a <uECC_valid_point+0x5a>

0001e88a <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1e88a:	b570      	push	{r4, r5, r6, lr}
   1e88c:	460c      	mov	r4, r1
   1e88e:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1e890:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1e892:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1e896:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1e898:	4601      	mov	r1, r0
   1e89a:	4668      	mov	r0, sp
   1e89c:	f7ff ffa1 	bl	1e7e2 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1e8a0:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1e8a4:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1e8a8:	18a9      	adds	r1, r5, r2
   1e8aa:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1e8ae:	f7ff ff98 	bl	1e7e2 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1e8b2:	2210      	movs	r2, #16
   1e8b4:	4631      	mov	r1, r6
   1e8b6:	4668      	mov	r0, sp
   1e8b8:	f7ff face 	bl	1de58 <uECC_vli_cmp_unsafe>
   1e8bc:	b128      	cbz	r0, 1e8ca <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1e8be:	4621      	mov	r1, r4
   1e8c0:	4668      	mov	r0, sp
   1e8c2:	f7ff ffad 	bl	1e820 <uECC_valid_point>
}
   1e8c6:	b010      	add	sp, #64	; 0x40
   1e8c8:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1e8ca:	f06f 0003 	mvn.w	r0, #3
   1e8ce:	e7fa      	b.n	1e8c6 <uECC_valid_public_key+0x3c>

0001e8d0 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1e8d0:	78cb      	ldrb	r3, [r1, #3]
   1e8d2:	7802      	ldrb	r2, [r0, #0]
   1e8d4:	4053      	eors	r3, r2
   1e8d6:	7003      	strb	r3, [r0, #0]
   1e8d8:	884b      	ldrh	r3, [r1, #2]
   1e8da:	7842      	ldrb	r2, [r0, #1]
   1e8dc:	4053      	eors	r3, r2
   1e8de:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1e8e0:	680a      	ldr	r2, [r1, #0]
   1e8e2:	7883      	ldrb	r3, [r0, #2]
   1e8e4:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e8e8:	7083      	strb	r3, [r0, #2]
   1e8ea:	680a      	ldr	r2, [r1, #0]
   1e8ec:	78c3      	ldrb	r3, [r0, #3]
   1e8ee:	4053      	eors	r3, r2
   1e8f0:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1e8f2:	79cb      	ldrb	r3, [r1, #7]
   1e8f4:	7902      	ldrb	r2, [r0, #4]
   1e8f6:	4053      	eors	r3, r2
   1e8f8:	7103      	strb	r3, [r0, #4]
   1e8fa:	88cb      	ldrh	r3, [r1, #6]
   1e8fc:	7942      	ldrb	r2, [r0, #5]
   1e8fe:	4053      	eors	r3, r2
   1e900:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1e902:	684a      	ldr	r2, [r1, #4]
   1e904:	7983      	ldrb	r3, [r0, #6]
   1e906:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e90a:	7183      	strb	r3, [r0, #6]
   1e90c:	684a      	ldr	r2, [r1, #4]
   1e90e:	79c3      	ldrb	r3, [r0, #7]
   1e910:	4053      	eors	r3, r2
   1e912:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1e914:	7acb      	ldrb	r3, [r1, #11]
   1e916:	7a02      	ldrb	r2, [r0, #8]
   1e918:	4053      	eors	r3, r2
   1e91a:	7203      	strb	r3, [r0, #8]
   1e91c:	7a42      	ldrb	r2, [r0, #9]
   1e91e:	894b      	ldrh	r3, [r1, #10]
   1e920:	4053      	eors	r3, r2
   1e922:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1e924:	688a      	ldr	r2, [r1, #8]
   1e926:	7a83      	ldrb	r3, [r0, #10]
   1e928:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e92c:	7283      	strb	r3, [r0, #10]
   1e92e:	688a      	ldr	r2, [r1, #8]
   1e930:	7ac3      	ldrb	r3, [r0, #11]
   1e932:	4053      	eors	r3, r2
   1e934:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1e936:	7bcb      	ldrb	r3, [r1, #15]
   1e938:	7b02      	ldrb	r2, [r0, #12]
   1e93a:	4053      	eors	r3, r2
   1e93c:	7303      	strb	r3, [r0, #12]
   1e93e:	89cb      	ldrh	r3, [r1, #14]
   1e940:	7b42      	ldrb	r2, [r0, #13]
   1e942:	4053      	eors	r3, r2
   1e944:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1e946:	68ca      	ldr	r2, [r1, #12]
   1e948:	7b83      	ldrb	r3, [r0, #14]
   1e94a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1e94e:	7383      	strb	r3, [r0, #14]
   1e950:	68ca      	ldr	r2, [r1, #12]
   1e952:	7bc3      	ldrb	r3, [r0, #15]
   1e954:	4053      	eors	r3, r2
   1e956:	73c3      	strb	r3, [r0, #15]
}
   1e958:	4770      	bx	lr

0001e95a <shift_rows>:
{
   1e95a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1e95c:	7802      	ldrb	r2, [r0, #0]
   1e95e:	f88d 2000 	strb.w	r2, [sp]
   1e962:	7942      	ldrb	r2, [r0, #5]
   1e964:	f88d 2001 	strb.w	r2, [sp, #1]
   1e968:	7a82      	ldrb	r2, [r0, #10]
   1e96a:	f88d 2002 	strb.w	r2, [sp, #2]
   1e96e:	7bc2      	ldrb	r2, [r0, #15]
   1e970:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1e974:	7902      	ldrb	r2, [r0, #4]
   1e976:	f88d 2004 	strb.w	r2, [sp, #4]
   1e97a:	7a42      	ldrb	r2, [r0, #9]
   1e97c:	f88d 2005 	strb.w	r2, [sp, #5]
   1e980:	7b82      	ldrb	r2, [r0, #14]
   1e982:	f88d 2006 	strb.w	r2, [sp, #6]
   1e986:	78c2      	ldrb	r2, [r0, #3]
   1e988:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1e98c:	7a02      	ldrb	r2, [r0, #8]
   1e98e:	f88d 2008 	strb.w	r2, [sp, #8]
   1e992:	7b42      	ldrb	r2, [r0, #13]
   1e994:	f88d 2009 	strb.w	r2, [sp, #9]
   1e998:	7882      	ldrb	r2, [r0, #2]
   1e99a:	f88d 200a 	strb.w	r2, [sp, #10]
   1e99e:	79c2      	ldrb	r2, [r0, #7]
   1e9a0:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1e9a4:	7b02      	ldrb	r2, [r0, #12]
   1e9a6:	f88d 200c 	strb.w	r2, [sp, #12]
   1e9aa:	7842      	ldrb	r2, [r0, #1]
   1e9ac:	7ac3      	ldrb	r3, [r0, #11]
   1e9ae:	f88d 200d 	strb.w	r2, [sp, #13]
   1e9b2:	7982      	ldrb	r2, [r0, #6]
   1e9b4:	f88d 200e 	strb.w	r2, [sp, #14]
   1e9b8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1e9bc:	2310      	movs	r3, #16
   1e9be:	466a      	mov	r2, sp
   1e9c0:	4619      	mov	r1, r3
   1e9c2:	f7ff f87b 	bl	1dabc <_copy>
}
   1e9c6:	b005      	add	sp, #20
   1e9c8:	f85d fb04 	ldr.w	pc, [sp], #4

0001e9cc <mult_row_column>:
{
   1e9cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e9ce:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e9d0:	7808      	ldrb	r0, [r1, #0]
{
   1e9d2:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1e9d4:	f7ff f881 	bl	1dada <_double_byte>
   1e9d8:	4605      	mov	r5, r0
   1e9da:	7860      	ldrb	r0, [r4, #1]
   1e9dc:	f7ff f87d 	bl	1dada <_double_byte>
   1e9e0:	78a2      	ldrb	r2, [r4, #2]
   1e9e2:	7863      	ldrb	r3, [r4, #1]
   1e9e4:	4053      	eors	r3, r2
   1e9e6:	78e2      	ldrb	r2, [r4, #3]
   1e9e8:	4053      	eors	r3, r2
   1e9ea:	405d      	eors	r5, r3
   1e9ec:	4045      	eors	r5, r0
   1e9ee:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1e9f0:	7860      	ldrb	r0, [r4, #1]
   1e9f2:	7827      	ldrb	r7, [r4, #0]
   1e9f4:	f7ff f871 	bl	1dada <_double_byte>
   1e9f8:	4605      	mov	r5, r0
   1e9fa:	78a0      	ldrb	r0, [r4, #2]
   1e9fc:	f7ff f86d 	bl	1dada <_double_byte>
   1ea00:	78a3      	ldrb	r3, [r4, #2]
   1ea02:	405f      	eors	r7, r3
   1ea04:	78e3      	ldrb	r3, [r4, #3]
   1ea06:	405f      	eors	r7, r3
   1ea08:	407d      	eors	r5, r7
   1ea0a:	4045      	eors	r5, r0
   1ea0c:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1ea0e:	78a0      	ldrb	r0, [r4, #2]
   1ea10:	7865      	ldrb	r5, [r4, #1]
   1ea12:	7827      	ldrb	r7, [r4, #0]
   1ea14:	f7ff f861 	bl	1dada <_double_byte>
   1ea18:	406f      	eors	r7, r5
   1ea1a:	4605      	mov	r5, r0
   1ea1c:	78e0      	ldrb	r0, [r4, #3]
   1ea1e:	f7ff f85c 	bl	1dada <_double_byte>
   1ea22:	78e3      	ldrb	r3, [r4, #3]
   1ea24:	405f      	eors	r7, r3
   1ea26:	407d      	eors	r5, r7
   1ea28:	4045      	eors	r5, r0
   1ea2a:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1ea2c:	7820      	ldrb	r0, [r4, #0]
   1ea2e:	f7ff f854 	bl	1dada <_double_byte>
   1ea32:	7863      	ldrb	r3, [r4, #1]
   1ea34:	7825      	ldrb	r5, [r4, #0]
   1ea36:	405d      	eors	r5, r3
   1ea38:	78a3      	ldrb	r3, [r4, #2]
   1ea3a:	405d      	eors	r5, r3
   1ea3c:	4045      	eors	r5, r0
   1ea3e:	78e0      	ldrb	r0, [r4, #3]
   1ea40:	f7ff f84b 	bl	1dada <_double_byte>
   1ea44:	b2ed      	uxtb	r5, r5
   1ea46:	4045      	eors	r5, r0
   1ea48:	70f5      	strb	r5, [r6, #3]
}
   1ea4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ea4c <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1ea4c:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ea4e:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1ea50:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1ea52:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1ea56:	2b00      	cmp	r3, #0
   1ea58:	bfb4      	ite	lt
   1ea5a:	2387      	movlt	r3, #135	; 0x87
   1ea5c:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1ea5e:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1ea62:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1ea66:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1ea68:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1ea6c:	d002      	beq.n	1ea74 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1ea6e:	7813      	ldrb	r3, [r2, #0]
   1ea70:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1ea72:	e7f4      	b.n	1ea5e <gf_double+0x12>
	}
}
   1ea74:	bd10      	pop	{r4, pc}

0001ea76 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1ea76:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1ea78:	b120      	cbz	r0, 1ea84 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1ea7a:	2258      	movs	r2, #88	; 0x58
   1ea7c:	2100      	movs	r1, #0
   1ea7e:	f7ff f82a 	bl	1dad6 <_set>
   1ea82:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1ea84:	bd08      	pop	{r3, pc}

0001ea86 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1ea86:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1ea88:	4604      	mov	r4, r0
   1ea8a:	b188      	cbz	r0, 1eab0 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ea8c:	2210      	movs	r2, #16
   1ea8e:	2100      	movs	r1, #0
   1ea90:	f7ff f821 	bl	1dad6 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1ea94:	2210      	movs	r2, #16
   1ea96:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ea9a:	2100      	movs	r1, #0
   1ea9c:	f7ff f81b 	bl	1dad6 <_set>
	s->leftover_offset = 0;
   1eaa0:	2300      	movs	r3, #0
   1eaa2:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1eaa4:	2200      	movs	r2, #0
   1eaa6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1eaaa:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1eaae:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1eab0:	bd10      	pop	{r4, pc}

0001eab2 <tc_cmac_setup>:
{
   1eab2:	b570      	push	{r4, r5, r6, lr}
   1eab4:	460d      	mov	r5, r1
   1eab6:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1eab8:	4604      	mov	r4, r0
   1eaba:	b310      	cbz	r0, 1eb02 <tc_cmac_setup+0x50>
   1eabc:	b311      	cbz	r1, 1eb04 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1eabe:	2258      	movs	r2, #88	; 0x58
   1eac0:	2100      	movs	r1, #0
   1eac2:	f7ff f808 	bl	1dad6 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1eac6:	4629      	mov	r1, r5
	s->sched = sched;
   1eac8:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1eaca:	4630      	mov	r0, r6
   1eacc:	f7e6 ffa0 	bl	5a10 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1ead0:	2210      	movs	r2, #16
   1ead2:	2100      	movs	r1, #0
   1ead4:	4620      	mov	r0, r4
   1ead6:	f7fe fffe 	bl	1dad6 <_set>
	gf_double (s->K1, s->iv);
   1eada:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1eade:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1eae0:	4621      	mov	r1, r4
   1eae2:	4620      	mov	r0, r4
   1eae4:	f7e6 ffe6 	bl	5ab4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1eae8:	4621      	mov	r1, r4
   1eaea:	4628      	mov	r0, r5
   1eaec:	f7ff ffae 	bl	1ea4c <gf_double>
	gf_double (s->K2, s->K1);
   1eaf0:	4629      	mov	r1, r5
   1eaf2:	f104 0020 	add.w	r0, r4, #32
   1eaf6:	f7ff ffa9 	bl	1ea4c <gf_double>
	tc_cmac_init(s);
   1eafa:	4620      	mov	r0, r4
   1eafc:	f7ff ffc3 	bl	1ea86 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1eb00:	2001      	movs	r0, #1
}
   1eb02:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1eb04:	4608      	mov	r0, r1
   1eb06:	e7fc      	b.n	1eb02 <tc_cmac_setup+0x50>

0001eb08 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb0c:	460d      	mov	r5, r1
   1eb0e:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1eb10:	4604      	mov	r4, r0
   1eb12:	2800      	cmp	r0, #0
   1eb14:	d062      	beq.n	1ebdc <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1eb16:	b912      	cbnz	r2, 1eb1e <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1eb18:	2001      	movs	r0, #1
}
   1eb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1eb1e:	2900      	cmp	r1, #0
   1eb20:	d05c      	beq.n	1ebdc <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1eb22:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1eb26:	ea50 0301 	orrs.w	r3, r0, r1
   1eb2a:	d057      	beq.n	1ebdc <tc_cmac_update+0xd4>
	s->countdown--;
   1eb2c:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1eb30:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1eb34:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1eb38:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1eb3c:	f1b8 0f00 	cmp.w	r8, #0
   1eb40:	d02a      	beq.n	1eb98 <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1eb42:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1eb46:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1eb4a:	42be      	cmp	r6, r7
   1eb4c:	4420      	add	r0, r4
   1eb4e:	d208      	bcs.n	1eb62 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1eb50:	462a      	mov	r2, r5
   1eb52:	4633      	mov	r3, r6
   1eb54:	4631      	mov	r1, r6
   1eb56:	f7fe ffb1 	bl	1dabc <_copy>
			s->leftover_offset += data_length;
   1eb5a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1eb5c:	4432      	add	r2, r6
   1eb5e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1eb60:	e7da      	b.n	1eb18 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1eb62:	463b      	mov	r3, r7
   1eb64:	462a      	mov	r2, r5
   1eb66:	4639      	mov	r1, r7
   1eb68:	f7fe ffa8 	bl	1dabc <_copy>
		data_length -= remaining_space;
   1eb6c:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1eb6e:	2300      	movs	r3, #0
   1eb70:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1eb72:	4446      	add	r6, r8
		data += remaining_space;
   1eb74:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1eb76:	1e63      	subs	r3, r4, #1
   1eb78:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1eb7c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1eb80:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1eb84:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1eb86:	ea82 0200 	eor.w	r2, r2, r0
   1eb8a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1eb8c:	d1f6      	bne.n	1eb7c <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1eb8e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1eb90:	4621      	mov	r1, r4
   1eb92:	4620      	mov	r0, r4
   1eb94:	f7e6 ff8e 	bl	5ab4 <tc_aes_encrypt>
   1eb98:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1eb9c:	2e10      	cmp	r6, #16
   1eb9e:	d80a      	bhi.n	1ebb6 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1eba0:	2e00      	cmp	r6, #0
   1eba2:	d0b9      	beq.n	1eb18 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1eba4:	4633      	mov	r3, r6
   1eba6:	462a      	mov	r2, r5
   1eba8:	4631      	mov	r1, r6
   1ebaa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1ebae:	f7fe ff85 	bl	1dabc <_copy>
		s->leftover_offset = data_length;
   1ebb2:	6466      	str	r6, [r4, #68]	; 0x44
   1ebb4:	e7b0      	b.n	1eb18 <tc_cmac_update+0x10>
   1ebb6:	1e63      	subs	r3, r4, #1
   1ebb8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1ebba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ebbe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ebc2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1ebc4:	ea82 0200 	eor.w	r2, r2, r0
   1ebc8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ebca:	d1f6      	bne.n	1ebba <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1ebcc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ebce:	4621      	mov	r1, r4
   1ebd0:	4620      	mov	r0, r4
   1ebd2:	f7e6 ff6f 	bl	5ab4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1ebd6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1ebd8:	3e10      	subs	r6, #16
   1ebda:	e7df      	b.n	1eb9c <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1ebdc:	2000      	movs	r0, #0
   1ebde:	e79c      	b.n	1eb1a <tc_cmac_update+0x12>

0001ebe0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1ebe0:	b570      	push	{r4, r5, r6, lr}
   1ebe2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1ebe4:	4605      	mov	r5, r0
   1ebe6:	b1e8      	cbz	r0, 1ec24 <tc_cmac_final+0x44>
   1ebe8:	b369      	cbz	r1, 1ec46 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1ebea:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1ebec:	2a10      	cmp	r2, #16
   1ebee:	d11a      	bne.n	1ec26 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1ebf0:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ebf2:	1e63      	subs	r3, r4, #1
   1ebf4:	3901      	subs	r1, #1
   1ebf6:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1ebfa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1ebfe:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1ec02:	4072      	eors	r2, r6
   1ec04:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ec08:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1ec0a:	ea82 0206 	eor.w	r2, r2, r6
   1ec0e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1ec10:	d1f3      	bne.n	1ebfa <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1ec12:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1ec14:	4621      	mov	r1, r4
   1ec16:	4628      	mov	r0, r5
   1ec18:	f7e6 ff4c 	bl	5ab4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1ec1c:	4620      	mov	r0, r4
   1ec1e:	f7ff ff2a 	bl	1ea76 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1ec22:	2001      	movs	r0, #1
}
   1ec24:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1ec26:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1ec2a:	2100      	movs	r1, #0
   1ec2c:	f1c2 0210 	rsb	r2, r2, #16
   1ec30:	4420      	add	r0, r4
   1ec32:	f7fe ff50 	bl	1dad6 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1ec36:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1ec38:	4423      	add	r3, r4
   1ec3a:	2280      	movs	r2, #128	; 0x80
   1ec3c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1ec40:	f104 0120 	add.w	r1, r4, #32
   1ec44:	e7d5      	b.n	1ebf2 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1ec46:	4608      	mov	r0, r1
   1ec48:	e7ec      	b.n	1ec24 <tc_cmac_final+0x44>

0001ec4a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1ec4a:	2100      	movs	r1, #0
   1ec4c:	2001      	movs	r0, #1
   1ec4e:	f7e7 b889 	b.w	5d64 <z_arm_fatal_error>

0001ec52 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1ec52:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
   1ec54:	6800      	ldr	r0, [r0, #0]
   1ec56:	f7e7 b885 	b.w	5d64 <z_arm_fatal_error>

0001ec5a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1ec5a:	b508      	push	{r3, lr}
	handler();
   1ec5c:	f7e7 f8ba 	bl	5dd4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1ec60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1ec64:	f7e7 bb22 	b.w	62ac <z_arm_exc_exit>

0001ec68 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1ec68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec6c:	4684      	mov	ip, r0
   1ec6e:	4688      	mov	r8, r1
	register const char *s = nptr;
   1ec70:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1ec72:	460c      	mov	r4, r1
   1ec74:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1ec78:	2b20      	cmp	r3, #32
   1ec7a:	d033      	beq.n	1ece4 <strtol+0x7c>
   1ec7c:	f1a3 0009 	sub.w	r0, r3, #9
   1ec80:	2804      	cmp	r0, #4
   1ec82:	d92f      	bls.n	1ece4 <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1ec84:	2b2d      	cmp	r3, #45	; 0x2d
   1ec86:	d12f      	bne.n	1ece8 <strtol+0x80>
		neg = 1;
		c = *s++;
   1ec88:	784b      	ldrb	r3, [r1, #1]
   1ec8a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1ec8c:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1ec8e:	2a00      	cmp	r2, #0
   1ec90:	d05c      	beq.n	1ed4c <strtol+0xe4>
   1ec92:	2a10      	cmp	r2, #16
   1ec94:	d109      	bne.n	1ecaa <strtol+0x42>
   1ec96:	2b30      	cmp	r3, #48	; 0x30
   1ec98:	d107      	bne.n	1ecaa <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1ec9a:	7823      	ldrb	r3, [r4, #0]
   1ec9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1eca0:	2b58      	cmp	r3, #88	; 0x58
   1eca2:	d14e      	bne.n	1ed42 <strtol+0xda>
		c = s[1];
   1eca4:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1eca6:	2210      	movs	r2, #16
		s += 2;
   1eca8:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1ecaa:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1ecae:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1ecb0:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1ecb2:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1ecb6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1ecb8:	fb02 791e 	mls	r9, r2, lr, r7
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1ecbc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1ecc0:	2d09      	cmp	r5, #9
   1ecc2:	d817      	bhi.n	1ecf4 <strtol+0x8c>
			c -= '0';
   1ecc4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1ecc6:	429a      	cmp	r2, r3
   1ecc8:	dd24      	ble.n	1ed14 <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1ecca:	1c75      	adds	r5, r6, #1
   1eccc:	d007      	beq.n	1ecde <strtol+0x76>
   1ecce:	4570      	cmp	r0, lr
   1ecd0:	d81d      	bhi.n	1ed0e <strtol+0xa6>
   1ecd2:	d101      	bne.n	1ecd8 <strtol+0x70>
   1ecd4:	454b      	cmp	r3, r9
   1ecd6:	dc1a      	bgt.n	1ed0e <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1ecd8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1ecdc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1ecde:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1ece2:	e7eb      	b.n	1ecbc <strtol+0x54>
{
   1ece4:	4621      	mov	r1, r4
   1ece6:	e7c4      	b.n	1ec72 <strtol+0xa>
	} else if (c == '+') {
   1ece8:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1ecea:	bf04      	itt	eq
   1ecec:	784b      	ldrbeq	r3, [r1, #1]
   1ecee:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1ecf0:	2100      	movs	r1, #0
   1ecf2:	e7cc      	b.n	1ec8e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1ecf4:	f043 0520 	orr.w	r5, r3, #32
   1ecf8:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1ecfa:	2d19      	cmp	r5, #25
   1ecfc:	d80a      	bhi.n	1ed14 <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1ecfe:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1ed02:	2d1a      	cmp	r5, #26
   1ed04:	bf34      	ite	cc
   1ed06:	2537      	movcc	r5, #55	; 0x37
   1ed08:	2557      	movcs	r5, #87	; 0x57
   1ed0a:	1b5b      	subs	r3, r3, r5
   1ed0c:	e7db      	b.n	1ecc6 <strtol+0x5e>
			any = -1;
   1ed0e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1ed12:	e7e4      	b.n	1ecde <strtol+0x76>
		}
	}

	if (any < 0) {
   1ed14:	1c73      	adds	r3, r6, #1
   1ed16:	d109      	bne.n	1ed2c <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1ed18:	f7fc f9dc 	bl	1b0d4 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1ed1c:	2326      	movs	r3, #38	; 0x26
   1ed1e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1ed20:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1ed22:	f1b8 0f00 	cmp.w	r8, #0
   1ed26:	d107      	bne.n	1ed38 <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1ed28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1ed2c:	b101      	cbz	r1, 1ed30 <strtol+0xc8>
		acc = -acc;
   1ed2e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1ed30:	f1b8 0f00 	cmp.w	r8, #0
   1ed34:	d0f8      	beq.n	1ed28 <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1ed36:	b10e      	cbz	r6, 1ed3c <strtol+0xd4>
   1ed38:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1ed3c:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1ed40:	e7f2      	b.n	1ed28 <strtol+0xc0>
	if (base == 0) {
   1ed42:	2330      	movs	r3, #48	; 0x30
   1ed44:	2a00      	cmp	r2, #0
   1ed46:	d1b0      	bne.n	1ecaa <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1ed48:	2208      	movs	r2, #8
   1ed4a:	e7ae      	b.n	1ecaa <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1ed4c:	2b30      	cmp	r3, #48	; 0x30
   1ed4e:	d0a4      	beq.n	1ec9a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1ed50:	220a      	movs	r2, #10
   1ed52:	e7aa      	b.n	1ecaa <strtol+0x42>

0001ed54 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1ed54:	3901      	subs	r1, #1
   1ed56:	4603      	mov	r3, r0
   1ed58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1ed5c:	b90a      	cbnz	r2, 1ed62 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1ed5e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1ed60:	4770      	bx	lr
		*d = *s;
   1ed62:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1ed66:	e7f7      	b.n	1ed58 <strcpy+0x4>

0001ed68 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1ed68:	b570      	push	{r4, r5, r6, lr}
   1ed6a:	3901      	subs	r1, #1
   1ed6c:	4605      	mov	r5, r0
   1ed6e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1ed70:	b142      	cbz	r2, 1ed84 <strncpy+0x1c>
   1ed72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1ed76:	1e56      	subs	r6, r2, #1
   1ed78:	b92b      	cbnz	r3, 1ed86 <strncpy+0x1e>
   1ed7a:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
   1ed7c:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
   1ed80:	42a2      	cmp	r2, r4
   1ed82:	d1fb      	bne.n	1ed7c <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
   1ed84:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1ed86:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
   1ed8a:	4632      	mov	r2, r6
   1ed8c:	e7ef      	b.n	1ed6e <strncpy+0x6>

0001ed8e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1ed8e:	4603      	mov	r3, r0
	size_t n = 0;
   1ed90:	2000      	movs	r0, #0

	while (*s != '\0') {
   1ed92:	5c1a      	ldrb	r2, [r3, r0]
   1ed94:	b902      	cbnz	r2, 1ed98 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1ed96:	4770      	bx	lr
		n++;
   1ed98:	3001      	adds	r0, #1
   1ed9a:	e7fa      	b.n	1ed92 <strlen+0x4>

0001ed9c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1ed9c:	1e43      	subs	r3, r0, #1
   1ed9e:	3901      	subs	r1, #1
   1eda0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1eda4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1eda8:	4282      	cmp	r2, r0
   1edaa:	d101      	bne.n	1edb0 <strcmp+0x14>
   1edac:	2a00      	cmp	r2, #0
   1edae:	d1f7      	bne.n	1eda0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1edb0:	1a10      	subs	r0, r2, r0
   1edb2:	4770      	bx	lr

0001edb4 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1edb4:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1edb6:	2400      	movs	r4, #0
   1edb8:	42a2      	cmp	r2, r4
   1edba:	d008      	beq.n	1edce <strncmp+0x1a>
   1edbc:	5d03      	ldrb	r3, [r0, r4]
   1edbe:	5d0d      	ldrb	r5, [r1, r4]
   1edc0:	42ab      	cmp	r3, r5
   1edc2:	d102      	bne.n	1edca <strncmp+0x16>
   1edc4:	3401      	adds	r4, #1
   1edc6:	2b00      	cmp	r3, #0
   1edc8:	d1f6      	bne.n	1edb8 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1edca:	1b58      	subs	r0, r3, r5
   1edcc:	e000      	b.n	1edd0 <strncmp+0x1c>
   1edce:	2000      	movs	r0, #0
}
   1edd0:	bd30      	pop	{r4, r5, pc}

0001edd2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1edd2:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1edd4:	b15a      	cbz	r2, 1edee <memcmp+0x1c>
   1edd6:	3901      	subs	r1, #1
   1edd8:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1edda:	f810 2b01 	ldrb.w	r2, [r0], #1
   1edde:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1ede2:	42a0      	cmp	r0, r4
   1ede4:	d001      	beq.n	1edea <memcmp+0x18>
   1ede6:	429a      	cmp	r2, r3
   1ede8:	d0f7      	beq.n	1edda <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1edea:	1ad0      	subs	r0, r2, r3
}
   1edec:	bd10      	pop	{r4, pc}
		return 0;
   1edee:	4610      	mov	r0, r2
   1edf0:	e7fc      	b.n	1edec <memcmp+0x1a>

0001edf2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1edf2:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1edf4:	ea81 0400 	eor.w	r4, r1, r0
   1edf8:	07a5      	lsls	r5, r4, #30
   1edfa:	4603      	mov	r3, r0
   1edfc:	d00b      	beq.n	1ee16 <memcpy+0x24>
   1edfe:	3b01      	subs	r3, #1
   1ee00:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1ee02:	4291      	cmp	r1, r2
   1ee04:	d11b      	bne.n	1ee3e <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1ee06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1ee08:	2a00      	cmp	r2, #0
   1ee0a:	d0fc      	beq.n	1ee06 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1ee0c:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ee10:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1ee14:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1ee16:	079c      	lsls	r4, r3, #30
   1ee18:	d1f6      	bne.n	1ee08 <memcpy+0x16>
   1ee1a:	f022 0403 	bic.w	r4, r2, #3
   1ee1e:	1f1d      	subs	r5, r3, #4
   1ee20:	0896      	lsrs	r6, r2, #2
   1ee22:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1ee24:	42b9      	cmp	r1, r7
   1ee26:	d105      	bne.n	1ee34 <memcpy+0x42>
   1ee28:	f06f 0503 	mvn.w	r5, #3
   1ee2c:	fb05 2206 	mla	r2, r5, r6, r2
   1ee30:	4423      	add	r3, r4
   1ee32:	e7e4      	b.n	1edfe <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1ee34:	f851 cb04 	ldr.w	ip, [r1], #4
   1ee38:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1ee3c:	e7f2      	b.n	1ee24 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1ee3e:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ee42:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ee46:	e7dc      	b.n	1ee02 <memcpy+0x10>

0001ee48 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1ee48:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1ee4a:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1ee4c:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ee4e:	079c      	lsls	r4, r3, #30
   1ee50:	d111      	bne.n	1ee76 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1ee52:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ee56:	f022 0603 	bic.w	r6, r2, #3
   1ee5a:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ee5e:	441e      	add	r6, r3
   1ee60:	0894      	lsrs	r4, r2, #2
   1ee62:	42b3      	cmp	r3, r6
   1ee64:	d10d      	bne.n	1ee82 <memset+0x3a>
   1ee66:	f06f 0503 	mvn.w	r5, #3
   1ee6a:	fb05 2204 	mla	r2, r5, r4, r2
   1ee6e:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1ee70:	4293      	cmp	r3, r2
   1ee72:	d109      	bne.n	1ee88 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1ee74:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1ee76:	2a00      	cmp	r2, #0
   1ee78:	d0fc      	beq.n	1ee74 <memset+0x2c>
		*(d_byte++) = c_byte;
   1ee7a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ee7e:	3a01      	subs	r2, #1
   1ee80:	e7e5      	b.n	1ee4e <memset+0x6>
		*(d_word++) = c_word;
   1ee82:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1ee86:	e7ec      	b.n	1ee62 <memset+0x1a>
		*(d_byte++) = c_byte;
   1ee88:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1ee8c:	e7f0      	b.n	1ee70 <memset+0x28>

0001ee8e <_stdout_hook_default>:
}
   1ee8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ee92:	4770      	bx	lr

0001ee94 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1ee94:	f7fb bf82 	b.w	1ad9c <SystemInit>

0001ee98 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1ee98:	b530      	push	{r4, r5, lr}
   1ee9a:	b085      	sub	sp, #20
   1ee9c:	4604      	mov	r4, r0
   1ee9e:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1eea0:	4668      	mov	r0, sp
   1eea2:	2203      	movs	r2, #3
   1eea4:	f7ff ffa5 	bl	1edf2 <memcpy>
	(void)memset(res + 3, 0, 13);
   1eea8:	220d      	movs	r2, #13
   1eeaa:	2100      	movs	r1, #0
   1eeac:	f10d 0003 	add.w	r0, sp, #3
   1eeb0:	f7ff ffca 	bl	1ee48 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1eeb4:	4620      	mov	r0, r4
   1eeb6:	466a      	mov	r2, sp
   1eeb8:	4669      	mov	r1, sp
   1eeba:	f7f2 fc85 	bl	117c8 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1eebe:	4604      	mov	r4, r0
   1eec0:	b920      	cbnz	r0, 1eecc <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1eec2:	2203      	movs	r2, #3
   1eec4:	4669      	mov	r1, sp
   1eec6:	4628      	mov	r0, r5
   1eec8:	f7ff ff93 	bl	1edf2 <memcpy>

	return 0;
}
   1eecc:	4620      	mov	r0, r4
   1eece:	b005      	add	sp, #20
   1eed0:	bd30      	pop	{r4, r5, pc}

0001eed2 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1eed2:	b513      	push	{r0, r1, r4, lr}
   1eed4:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1eed6:	aa01      	add	r2, sp, #4
   1eed8:	3103      	adds	r1, #3
   1eeda:	f7ff ffdd 	bl	1ee98 <ah>
	if (err) {
   1eede:	b948      	cbnz	r0, 1eef4 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1eee0:	2203      	movs	r2, #3
   1eee2:	a901      	add	r1, sp, #4
   1eee4:	4620      	mov	r0, r4
   1eee6:	f7ff ff74 	bl	1edd2 <memcmp>
   1eeea:	fab0 f080 	clz	r0, r0
   1eeee:	0940      	lsrs	r0, r0, #5
}
   1eef0:	b002      	add	sp, #8
   1eef2:	bd10      	pop	{r4, pc}
		return false;
   1eef4:	2000      	movs	r0, #0
   1eef6:	e7fb      	b.n	1eef0 <bt_rpa_irk_matches+0x1e>

0001eef8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1eef8:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1eefa:	1cce      	adds	r6, r1, #3
{
   1eefc:	4605      	mov	r5, r0
   1eefe:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1ef00:	4630      	mov	r0, r6
   1ef02:	2103      	movs	r1, #3
   1ef04:	f7f2 fc5e 	bl	117c4 <bt_rand>
	if (err) {
   1ef08:	b960      	cbnz	r0, 1ef24 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1ef0a:	7963      	ldrb	r3, [r4, #5]
   1ef0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1ef10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ef14:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1ef16:	4622      	mov	r2, r4
   1ef18:	4631      	mov	r1, r6
   1ef1a:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1ef1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1ef20:	f7ff bfba 	b.w	1ee98 <ah>
}
   1ef24:	bd70      	pop	{r4, r5, r6, pc}

0001ef26 <send_cmd_status>:
{
   1ef26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ef2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1ef2e:	4606      	mov	r6, r0
   1ef30:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ef32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ef36:	2100      	movs	r1, #0
   1ef38:	200f      	movs	r0, #15
   1ef3a:	f7ea fa0b 	bl	9354 <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1ef3e:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ef40:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1ef44:	4604      	mov	r4, r0
   1ef46:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1ef48:	2102      	movs	r1, #2
   1ef4a:	4640      	mov	r0, r8
   1ef4c:	f001 fe0c 	bl	20b68 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ef50:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1ef52:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1ef54:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1ef56:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1ef58:	4640      	mov	r0, r8
   1ef5a:	f001 fe05 	bl	20b68 <net_buf_simple_add>
	evt->ncmd = 1U;
   1ef5e:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1ef60:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1ef62:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1ef64:	4620      	mov	r0, r4
}
   1ef66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1ef6a:	f7e9 bbfd 	b.w	8768 <bt_recv_prio>

0001ef6e <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1ef6e:	f101 0320 	add.w	r3, r1, #32
   1ef72:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1ef74:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1ef78:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1ef7c:	428b      	cmp	r3, r1
   1ef7e:	d1f9      	bne.n	1ef74 <sys_memcpy_swap.constprop.0+0x6>
}
   1ef80:	4770      	bx	lr

0001ef82 <default_CSPRNG>:
{
   1ef82:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1ef84:	f7f2 fc1e 	bl	117c4 <bt_rand>
}
   1ef88:	fab0 f080 	clz	r0, r0
   1ef8c:	0940      	lsrs	r0, r0, #5
   1ef8e:	bd08      	pop	{r3, pc}

0001ef90 <bt_settings_decode_key>:
{
   1ef90:	b570      	push	{r4, r5, r6, lr}
   1ef92:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1ef94:	2100      	movs	r1, #0
{
   1ef96:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1ef98:	f7fe fc29 	bl	1d7ee <settings_name_next>
   1ef9c:	280d      	cmp	r0, #13
   1ef9e:	d118      	bne.n	1efd2 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1efa0:	7b23      	ldrb	r3, [r4, #12]
   1efa2:	2b30      	cmp	r3, #48	; 0x30
   1efa4:	d111      	bne.n	1efca <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1efa6:	2300      	movs	r3, #0
   1efa8:	702b      	strb	r3, [r5, #0]
   1efaa:	f104 060c 	add.w	r6, r4, #12
   1efae:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1efb0:	462a      	mov	r2, r5
   1efb2:	4620      	mov	r0, r4
   1efb4:	2301      	movs	r3, #1
   1efb6:	2102      	movs	r1, #2
   1efb8:	3402      	adds	r4, #2
   1efba:	f7fd fb86 	bl	1c6ca <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1efbe:	42b4      	cmp	r4, r6
   1efc0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1efc4:	d1f4      	bne.n	1efb0 <bt_settings_decode_key+0x20>
	return 0;
   1efc6:	2000      	movs	r0, #0
}
   1efc8:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1efca:	2b31      	cmp	r3, #49	; 0x31
   1efcc:	d101      	bne.n	1efd2 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1efce:	2301      	movs	r3, #1
   1efd0:	e7ea      	b.n	1efa8 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1efd2:	f06f 0015 	mvn.w	r0, #21
   1efd6:	e7f7      	b.n	1efc8 <bt_settings_decode_key+0x38>

0001efd8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1efd8:	b510      	push	{r4, lr}
   1efda:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1efdc:	7801      	ldrb	r1, [r0, #0]
   1efde:	7822      	ldrb	r2, [r4, #0]
   1efe0:	428a      	cmp	r2, r1
{
   1efe2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1efe4:	d00e      	beq.n	1f004 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1efe6:	4669      	mov	r1, sp
   1efe8:	f7e7 fe0a 	bl	6c00 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1efec:	a905      	add	r1, sp, #20
   1efee:	4620      	mov	r0, r4
   1eff0:	f7e7 fe06 	bl	6c00 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1eff4:	2210      	movs	r2, #16
   1eff6:	f10d 0115 	add.w	r1, sp, #21
   1effa:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1effe:	f7ff fee8 	bl	1edd2 <memcmp>
   1f002:	e007      	b.n	1f014 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1f004:	2a01      	cmp	r2, #1
   1f006:	d007      	beq.n	1f018 <bt_uuid_cmp+0x40>
   1f008:	2a02      	cmp	r2, #2
   1f00a:	d008      	beq.n	1f01e <bt_uuid_cmp+0x46>
   1f00c:	b95a      	cbnz	r2, 1f026 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1f00e:	8840      	ldrh	r0, [r0, #2]
   1f010:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1f012:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1f014:	b00a      	add	sp, #40	; 0x28
   1f016:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1f018:	6840      	ldr	r0, [r0, #4]
   1f01a:	6863      	ldr	r3, [r4, #4]
   1f01c:	e7f9      	b.n	1f012 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1f01e:	2210      	movs	r2, #16
   1f020:	1c61      	adds	r1, r4, #1
   1f022:	3001      	adds	r0, #1
   1f024:	e7eb      	b.n	1effe <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1f026:	f06f 0015 	mvn.w	r0, #21
   1f02a:	e7f3      	b.n	1f014 <bt_uuid_cmp+0x3c>

0001f02c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1f02c:	2a04      	cmp	r2, #4
{
   1f02e:	b538      	push	{r3, r4, r5, lr}
   1f030:	460c      	mov	r4, r1
	switch (data_len) {
   1f032:	d00d      	beq.n	1f050 <bt_uuid_create+0x24>
   1f034:	2a10      	cmp	r2, #16
   1f036:	d019      	beq.n	1f06c <bt_uuid_create+0x40>
   1f038:	2a02      	cmp	r2, #2
   1f03a:	f04f 0300 	mov.w	r3, #0
   1f03e:	d11b      	bne.n	1f078 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1f040:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1f042:	784a      	ldrb	r2, [r1, #1]
   1f044:	780b      	ldrb	r3, [r1, #0]
   1f046:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1f04a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1f04c:	2001      	movs	r0, #1
}
   1f04e:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1f050:	2301      	movs	r3, #1
   1f052:	7003      	strb	r3, [r0, #0]
   1f054:	78a2      	ldrb	r2, [r4, #2]
   1f056:	78c9      	ldrb	r1, [r1, #3]
   1f058:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1f05a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1f05e:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1f060:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1f064:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1f068:	6042      	str	r2, [r0, #4]
		break;
   1f06a:	e7ef      	b.n	1f04c <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1f06c:	2302      	movs	r3, #2
   1f06e:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1f072:	f7ff febe 	bl	1edf2 <memcpy>
		break;
   1f076:	e7e9      	b.n	1f04c <bt_uuid_create+0x20>
	switch (data_len) {
   1f078:	4618      	mov	r0, r3
   1f07a:	e7e8      	b.n	1f04e <bt_uuid_create+0x22>

0001f07c <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1f07c:	280f      	cmp	r0, #15
   1f07e:	d806      	bhi.n	1f08e <bt_hci_evt_get_flags+0x12>
   1f080:	280d      	cmp	r0, #13
   1f082:	d80b      	bhi.n	1f09c <bt_hci_evt_get_flags+0x20>
   1f084:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1f086:	bf14      	ite	ne
   1f088:	2002      	movne	r0, #2
   1f08a:	2003      	moveq	r0, #3
   1f08c:	4770      	bx	lr
	switch (evt) {
   1f08e:	2813      	cmp	r0, #19
   1f090:	d004      	beq.n	1f09c <bt_hci_evt_get_flags+0x20>
   1f092:	281a      	cmp	r0, #26
   1f094:	bf14      	ite	ne
   1f096:	2002      	movne	r0, #2
   1f098:	2001      	moveq	r0, #1
   1f09a:	4770      	bx	lr
   1f09c:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1f09e:	4770      	bx	lr

0001f0a0 <atomic_and>:
{
   1f0a0:	4603      	mov	r3, r0
}
   1f0a2:	f3bf 8f5b 	dmb	ish
   1f0a6:	e853 0f00 	ldrex	r0, [r3]
   1f0aa:	ea00 0201 	and.w	r2, r0, r1
   1f0ae:	e843 2c00 	strex	ip, r2, [r3]
   1f0b2:	f1bc 0f00 	cmp.w	ip, #0
   1f0b6:	d1f6      	bne.n	1f0a6 <atomic_and+0x6>
   1f0b8:	f3bf 8f5b 	dmb	ish
   1f0bc:	4770      	bx	lr

0001f0be <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f0be:	f3bf 8f5b 	dmb	ish
   1f0c2:	6800      	ldr	r0, [r0, #0]
   1f0c4:	f3bf 8f5b 	dmb	ish
}
   1f0c8:	4770      	bx	lr

0001f0ca <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1f0ca:	2207      	movs	r2, #7
   1f0cc:	f7ff be81 	b.w	1edd2 <memcmp>

0001f0d0 <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f0d0:	2206      	movs	r2, #6
   1f0d2:	f7ff be8e 	b.w	1edf2 <memcpy>

0001f0d6 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1f0d6:	2207      	movs	r2, #7
   1f0d8:	f7ff be8b 	b.w	1edf2 <memcpy>

0001f0dc <atomic_or>:
{
   1f0dc:	4603      	mov	r3, r0
}
   1f0de:	f3bf 8f5b 	dmb	ish
   1f0e2:	e853 0f00 	ldrex	r0, [r3]
   1f0e6:	ea40 0201 	orr.w	r2, r0, r1
   1f0ea:	e843 2c00 	strex	ip, r2, [r3]
   1f0ee:	f1bc 0f00 	cmp.w	ip, #0
   1f0f2:	d1f6      	bne.n	1f0e2 <atomic_or+0x6>
   1f0f4:	f3bf 8f5b 	dmb	ish
   1f0f8:	4770      	bx	lr

0001f0fa <atomic_test_and_set_bit>:
{
   1f0fa:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f0fc:	2301      	movs	r3, #1
   1f0fe:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f102:	f7ff ffeb 	bl	1f0dc <atomic_or>
	return (old & mask) != 0;
   1f106:	4201      	tst	r1, r0
}
   1f108:	bf14      	ite	ne
   1f10a:	2001      	movne	r0, #1
   1f10c:	2000      	moveq	r0, #0
   1f10e:	bd08      	pop	{r3, pc}

0001f110 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1f110:	460b      	mov	r3, r1
   1f112:	b410      	push	{r4}
   1f114:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f116:	f001 041f 	and.w	r4, r1, #31
   1f11a:	2101      	movs	r1, #1
   1f11c:	40a1      	lsls	r1, r4

	if (val) {
   1f11e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1f122:	b112      	cbz	r2, 1f12a <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1f124:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f126:	f7ff bfd9 	b.w	1f0dc <atomic_or>
}
   1f12a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f12c:	43c9      	mvns	r1, r1
   1f12e:	f7ff bfb7 	b.w	1f0a0 <atomic_and>

0001f132 <unpair_remote>:
{
   1f132:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   1f134:	4601      	mov	r1, r0
   1f136:	7818      	ldrb	r0, [r3, #0]
   1f138:	f7e7 be56 	b.w	6de8 <unpair>

0001f13c <sys_put_le64>:
	dst[1] = val >> 8;
   1f13c:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1f140:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1f142:	0e00      	lsrs	r0, r0, #24
   1f144:	7053      	strb	r3, [r2, #1]
   1f146:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1f148:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1f14a:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1f14e:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1f150:	7093      	strb	r3, [r2, #2]
   1f152:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1f154:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1f156:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1f158:	71d1      	strb	r1, [r2, #7]
}
   1f15a:	4770      	bx	lr

0001f15c <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1f15c:	f100 0314 	add.w	r3, r0, #20
{
   1f160:	b510      	push	{r4, lr}
   1f162:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1f164:	4618      	mov	r0, r3
   1f166:	f7ff ffaa 	bl	1f0be <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1f16a:	0642      	lsls	r2, r0, #25
   1f16c:	d50a      	bpl.n	1f184 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1f16e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1f172:	4618      	mov	r0, r3
   1f174:	f7ff ffb2 	bl	1f0dc <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1f178:	4620      	mov	r0, r4
   1f17a:	2100      	movs	r1, #0
}
   1f17c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1f180:	f7e8 bd5c 	b.w	7c3c <set_le_adv_enable_legacy>
}
   1f184:	bd10      	pop	{r4, pc}

0001f186 <adv_unpause_enabled>:
{
   1f186:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f188:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1f18c:	4604      	mov	r4, r0
   1f18e:	3014      	adds	r0, #20
   1f190:	f7ff ff86 	bl	1f0a0 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1f194:	0483      	lsls	r3, r0, #18
   1f196:	d505      	bpl.n	1f1a4 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1f198:	4620      	mov	r0, r4
   1f19a:	2101      	movs	r1, #1
}
   1f19c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1f1a0:	f7e8 bd4c 	b.w	7c3c <set_le_adv_enable_legacy>
}
   1f1a4:	bd10      	pop	{r4, pc}

0001f1a6 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f1a6:	7a03      	ldrb	r3, [r0, #8]
   1f1a8:	075b      	lsls	r3, r3, #29
{
   1f1aa:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1f1ac:	d505      	bpl.n	1f1ba <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1f1ae:	4601      	mov	r1, r0
   1f1b0:	322a      	adds	r2, #42	; 0x2a
   1f1b2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1f1b6:	f7e8 bdfd 	b.w	7db4 <hci_id_add>
}
   1f1ba:	4770      	bx	lr

0001f1bc <addr_res_enable>:
{
   1f1bc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1f1be:	2101      	movs	r1, #1
{
   1f1c0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1f1c2:	f242 002d 	movw	r0, #8237	; 0x202d
   1f1c6:	f7e8 fabf 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
   1f1ca:	4604      	mov	r4, r0
   1f1cc:	b158      	cbz	r0, 1f1e6 <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1f1ce:	4629      	mov	r1, r5
   1f1d0:	3008      	adds	r0, #8
   1f1d2:	f001 fcd8 	bl	20b86 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1f1d6:	4621      	mov	r1, r4
   1f1d8:	2200      	movs	r2, #0
}
   1f1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1f1de:	f242 002d 	movw	r0, #8237	; 0x202d
   1f1e2:	f7e8 bc0d 	b.w	7a00 <bt_hci_cmd_send_sync>
}
   1f1e6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f1ea:	bd38      	pop	{r3, r4, r5, pc}

0001f1ec <bt_lookup_id_addr>:
{
   1f1ec:	b510      	push	{r4, lr}
   1f1ee:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1f1f0:	f7ef fac2 	bl	e778 <bt_keys_find_irk>
		if (keys) {
   1f1f4:	b100      	cbz	r0, 1f1f8 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1f1f6:	1c44      	adds	r4, r0, #1
}
   1f1f8:	4620      	mov	r0, r4
   1f1fa:	bd10      	pop	{r4, pc}

0001f1fc <bt_hci_disconnect>:
{
   1f1fc:	b570      	push	{r4, r5, r6, lr}
   1f1fe:	4606      	mov	r6, r0
   1f200:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1f202:	f240 4006 	movw	r0, #1030	; 0x406
   1f206:	2103      	movs	r1, #3
   1f208:	f7e8 fa9e 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
   1f20c:	4604      	mov	r4, r0
   1f20e:	b160      	cbz	r0, 1f22a <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1f210:	2103      	movs	r1, #3
   1f212:	3008      	adds	r0, #8
   1f214:	f001 fca8 	bl	20b68 <net_buf_simple_add>
	disconn->reason = reason;
   1f218:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1f21a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1f21c:	4621      	mov	r1, r4
   1f21e:	f240 4006 	movw	r0, #1030	; 0x406
}
   1f222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1f226:	f7e8 bac7 	b.w	77b8 <bt_hci_cmd_send>
}
   1f22a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f22e:	bd70      	pop	{r4, r5, r6, pc}

0001f230 <bt_le_set_data_len>:
{
   1f230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f232:	4607      	mov	r7, r0
   1f234:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1f236:	f242 0022 	movw	r0, #8226	; 0x2022
   1f23a:	2106      	movs	r1, #6
{
   1f23c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1f23e:	f7e8 fa83 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
   1f242:	4604      	mov	r4, r0
   1f244:	b170      	cbz	r0, 1f264 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1f246:	2106      	movs	r1, #6
   1f248:	3008      	adds	r0, #8
   1f24a:	f001 fc8d 	bl	20b68 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f24e:	883b      	ldrh	r3, [r7, #0]
   1f250:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1f252:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1f254:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1f256:	4621      	mov	r1, r4
   1f258:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1f25c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1f260:	f7e8 baaa 	b.w	77b8 <bt_hci_cmd_send>
}
   1f264:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f26a <bt_le_set_phy>:
{
   1f26a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1f26e:	4680      	mov	r8, r0
   1f270:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1f272:	f242 0032 	movw	r0, #8242	; 0x2032
   1f276:	2107      	movs	r1, #7
{
   1f278:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1f27c:	4616      	mov	r6, r2
   1f27e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1f280:	f7e8 fa62 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
   1f284:	4604      	mov	r4, r0
   1f286:	b190      	cbz	r0, 1f2ae <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   1f288:	2107      	movs	r1, #7
   1f28a:	3008      	adds	r0, #8
   1f28c:	f001 fc6c 	bl	20b68 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f290:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1f294:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1f296:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1f298:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1f29a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1f29c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1f2a0:	4621      	mov	r1, r4
   1f2a2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1f2a6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1f2aa:	f7e8 ba85 	b.w	77b8 <bt_hci_cmd_send>
}
   1f2ae:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001f2b6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1f2b6:	8802      	ldrh	r2, [r0, #0]
   1f2b8:	8843      	ldrh	r3, [r0, #2]
   1f2ba:	429a      	cmp	r2, r3
{
   1f2bc:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1f2be:	d818      	bhi.n	1f2f2 <bt_le_conn_params_valid+0x3c>
   1f2c0:	2a05      	cmp	r2, #5
   1f2c2:	d916      	bls.n	1f2f2 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1f2c4:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1f2c8:	d813      	bhi.n	1f2f2 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1f2ca:	8884      	ldrh	r4, [r0, #4]
   1f2cc:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1f2d0:	d20f      	bcs.n	1f2f2 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1f2d2:	88c1      	ldrh	r1, [r0, #6]
   1f2d4:	f1a1 020a 	sub.w	r2, r1, #10
   1f2d8:	b292      	uxth	r2, r2
   1f2da:	f640 4076 	movw	r0, #3190	; 0xc76
   1f2de:	4282      	cmp	r2, r0
   1f2e0:	d807      	bhi.n	1f2f2 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1f2e2:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1f2e6:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1f2ea:	bf34      	ite	cc
   1f2ec:	2001      	movcc	r0, #1
   1f2ee:	2000      	movcs	r0, #0
}
   1f2f0:	bd10      	pop	{r4, pc}
		return false;
   1f2f2:	2000      	movs	r0, #0
   1f2f4:	e7fc      	b.n	1f2f0 <bt_le_conn_params_valid+0x3a>

0001f2f6 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1f2f6:	7a03      	ldrb	r3, [r0, #8]
   1f2f8:	07d9      	lsls	r1, r3, #31
   1f2fa:	d504      	bpl.n	1f306 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1f2fc:	f023 0301 	bic.w	r3, r3, #1
   1f300:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1f302:	f7e8 bf79 	b.w	81f8 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1f306:	0799      	lsls	r1, r3, #30
   1f308:	d504      	bpl.n	1f314 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1f30a:	f023 0302 	bic.w	r3, r3, #2
   1f30e:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1f310:	f7e9 b840 	b.w	8394 <bt_id_del>
}
   1f314:	4770      	bx	lr

0001f316 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1f316:	2301      	movs	r3, #1
{
   1f318:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1f31a:	2106      	movs	r1, #6
{
   1f31c:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1f31e:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1f322:	f7f2 fa4f 	bl	117c4 <bt_rand>
	if (err) {
   1f326:	b918      	cbnz	r0, 1f330 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1f328:	79a3      	ldrb	r3, [r4, #6]
   1f32a:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1f32e:	71a3      	strb	r3, [r4, #6]
}
   1f330:	bd10      	pop	{r4, pc}

0001f332 <bt_send>:
		return bt_hci_ecc_send(buf);
   1f332:	f7e7 ba2d 	b.w	6790 <bt_hci_ecc_send>

0001f336 <bt_addr_le_is_bonded>:
{
   1f336:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1f338:	f7ef fa58 	bl	e7ec <bt_keys_find_addr>
		return keys && keys->keys;
   1f33c:	b118      	cbz	r0, 1f346 <bt_addr_le_is_bonded+0x10>
   1f33e:	89c0      	ldrh	r0, [r0, #14]
   1f340:	3800      	subs	r0, #0
   1f342:	bf18      	it	ne
   1f344:	2001      	movne	r0, #1
}
   1f346:	bd08      	pop	{r3, pc}

0001f348 <bt_le_adv_start>:
	return bt_le_adv_start_legacy(param, ad, ad_len, sd, sd_len);
   1f348:	f7e9 bcf0 	b.w	8d2c <bt_le_adv_start_legacy>

0001f34c <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1f34c:	6880      	ldr	r0, [r0, #8]
   1f34e:	f7e9 be93 	b.w	9078 <enh_conn_complete>

0001f352 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1f352:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f354:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1f358:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f35a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f35e:	2100      	movs	r1, #0
{
   1f360:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f362:	f7e9 fff7 	bl	9354 <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   1f366:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1f368:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1f36a:	3008      	adds	r0, #8
   1f36c:	f001 fbfc 	bl	20b68 <net_buf_simple_add>
	hdr->evt = evt;
   1f370:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1f372:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1f374:	4620      	mov	r0, r4
   1f376:	bd70      	pop	{r4, r5, r6, pc}

0001f378 <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f378:	3103      	adds	r1, #3
{
   1f37a:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f37c:	b2c9      	uxtb	r1, r1
{
   1f37e:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f380:	200e      	movs	r0, #14
   1f382:	f7ff ffe6 	bl	1f352 <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   1f386:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1f388:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   1f38a:	3008      	adds	r0, #8
   1f38c:	f001 fbec 	bl	20b68 <net_buf_simple_add>
	cc->ncmd = 1U;
   1f390:	2301      	movs	r3, #1
   1f392:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1f394:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1f398:	4620      	mov	r0, r4
   1f39a:	bd38      	pop	{r3, r4, r5, pc}

0001f39c <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1f39c:	b570      	push	{r4, r5, r6, lr}
   1f39e:	4605      	mov	r5, r0
   1f3a0:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1f3a2:	200f      	movs	r0, #15
   1f3a4:	2104      	movs	r1, #4
   1f3a6:	f7ff ffd4 	bl	1f352 <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   1f3aa:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1f3ac:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   1f3ae:	3008      	adds	r0, #8
   1f3b0:	f001 fbda 	bl	20b68 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   1f3b4:	2201      	movs	r2, #1
	cs->status = status;
   1f3b6:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1f3b8:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1f3ba:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1f3bc:	4620      	mov	r0, r4
   1f3be:	bd70      	pop	{r4, r5, r6, pc}

0001f3c0 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f3c0:	f3bf 8f5b 	dmb	ish
   1f3c4:	6800      	ldr	r0, [r0, #0]
   1f3c6:	f3bf 8f5b 	dmb	ish
}
   1f3ca:	4770      	bx	lr

0001f3cc <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
   1f3cc:	89c3      	ldrh	r3, [r0, #14]
{
   1f3ce:	b510      	push	{r4, lr}
   1f3d0:	4604      	mov	r4, r0
	if (!conn->rx_len) {
   1f3d2:	b12b      	cbz	r3, 1f3e0 <bt_conn_reset_rx_state+0x14>
	net_buf_unref(conn->rx);
   1f3d4:	6900      	ldr	r0, [r0, #16]
   1f3d6:	f7fa fe8b 	bl	1a0f0 <net_buf_unref>
	conn->rx = NULL;
   1f3da:	2300      	movs	r3, #0
   1f3dc:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0U;
   1f3de:	81e3      	strh	r3, [r4, #14]
}
   1f3e0:	bd10      	pop	{r4, pc}

0001f3e2 <atomic_inc>:
{
   1f3e2:	4603      	mov	r3, r0
}
   1f3e4:	f3bf 8f5b 	dmb	ish
   1f3e8:	e853 0f00 	ldrex	r0, [r3]
   1f3ec:	1c42      	adds	r2, r0, #1
   1f3ee:	e843 2100 	strex	r1, r2, [r3]
   1f3f2:	2900      	cmp	r1, #0
   1f3f4:	d1f8      	bne.n	1f3e8 <atomic_inc+0x6>
   1f3f6:	f3bf 8f5b 	dmb	ish
   1f3fa:	4770      	bx	lr

0001f3fc <tx_notify>:
{
   1f3fc:	b570      	push	{r4, r5, r6, lr}
   1f3fe:	4604      	mov	r4, r0
	__asm__ volatile(
   1f400:	f04f 0220 	mov.w	r2, #32
   1f404:	f3ef 8311 	mrs	r3, BASEPRI
   1f408:	f382 8811 	msr	BASEPRI, r2
   1f40c:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1f410:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1f412:	b920      	cbnz	r0, 1f41e <tx_notify+0x22>
	__asm__ volatile(
   1f414:	f383 8811 	msr	BASEPRI, r3
   1f418:	f3bf 8f6f 	isb	sy
}
   1f41c:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f41e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f420:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f422:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f424:	4288      	cmp	r0, r1
	list->tail = node;
   1f426:	bf08      	it	eq
   1f428:	6262      	streq	r2, [r4, #36]	; 0x24
   1f42a:	f383 8811 	msr	BASEPRI, r3
   1f42e:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1f432:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1f436:	f7ea f84f 	bl	94d8 <tx_free>
		cb(conn, user_data);
   1f43a:	4631      	mov	r1, r6
   1f43c:	4620      	mov	r0, r4
   1f43e:	47a8      	blx	r5
	while (1) {
   1f440:	e7de      	b.n	1f400 <tx_notify+0x4>

0001f442 <tx_complete_work>:
	tx_notify(conn);
   1f442:	3828      	subs	r0, #40	; 0x28
   1f444:	f7ff bfda 	b.w	1f3fc <tx_notify>

0001f448 <bt_conn_set_security>:
{
   1f448:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1f44a:	7b43      	ldrb	r3, [r0, #13]
   1f44c:	2b07      	cmp	r3, #7
{
   1f44e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1f450:	d128      	bne.n	1f4a4 <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1f452:	7a43      	ldrb	r3, [r0, #9]
   1f454:	428b      	cmp	r3, r1
   1f456:	d228      	bcs.n	1f4aa <bt_conn_set_security+0x62>
   1f458:	7a83      	ldrb	r3, [r0, #10]
   1f45a:	428b      	cmp	r3, r1
   1f45c:	d225      	bcs.n	1f4aa <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f45e:	f3bf 8f5b 	dmb	ish
	if (val) {
   1f462:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1f464:	f100 0304 	add.w	r3, r0, #4
   1f468:	d513      	bpl.n	1f492 <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f46a:	e853 2f00 	ldrex	r2, [r3]
   1f46e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1f472:	e843 2000 	strex	r0, r2, [r3]
   1f476:	2800      	cmp	r0, #0
   1f478:	d1f7      	bne.n	1f46a <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f47a:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1f47e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1f482:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1f484:	4620      	mov	r0, r4
   1f486:	f7ee ff89 	bl	e39c <bt_smp_start_security>
	if (err) {
   1f48a:	b108      	cbz	r0, 1f490 <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1f48c:	7a63      	ldrb	r3, [r4, #9]
   1f48e:	72a3      	strb	r3, [r4, #10]
}
   1f490:	bd10      	pop	{r4, pc}
   1f492:	e853 2f00 	ldrex	r2, [r3]
   1f496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1f49a:	e843 2000 	strex	r0, r2, [r3]
   1f49e:	2800      	cmp	r0, #0
   1f4a0:	d0eb      	beq.n	1f47a <bt_conn_set_security+0x32>
   1f4a2:	e7f6      	b.n	1f492 <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1f4a4:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1f4a8:	e7f2      	b.n	1f490 <bt_conn_set_security+0x48>
		return 0;
   1f4aa:	2000      	movs	r0, #0
   1f4ac:	e7f0      	b.n	1f490 <bt_conn_set_security+0x48>

0001f4ae <bt_conn_get_security>:
}
   1f4ae:	7a40      	ldrb	r0, [r0, #9]
   1f4b0:	4770      	bx	lr

0001f4b2 <bt_conn_is_peer_addr_le>:
{
   1f4b2:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1f4b4:	7a03      	ldrb	r3, [r0, #8]
   1f4b6:	428b      	cmp	r3, r1
{
   1f4b8:	4604      	mov	r4, r0
   1f4ba:	4615      	mov	r5, r2
	if (id != conn->id) {
   1f4bc:	d115      	bne.n	1f4ea <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1f4be:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f4c2:	2207      	movs	r2, #7
   1f4c4:	4628      	mov	r0, r5
   1f4c6:	f7ff fc84 	bl	1edd2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1f4ca:	b180      	cbz	r0, 1f4ee <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1f4cc:	78e3      	ldrb	r3, [r4, #3]
   1f4ce:	2207      	movs	r2, #7
   1f4d0:	b943      	cbnz	r3, 1f4e4 <bt_conn_is_peer_addr_le+0x32>
   1f4d2:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1f4d6:	4628      	mov	r0, r5
   1f4d8:	f7ff fc7b 	bl	1edd2 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1f4dc:	fab0 f080 	clz	r0, r0
   1f4e0:	0940      	lsrs	r0, r0, #5
}
   1f4e2:	bd38      	pop	{r3, r4, r5, pc}
   1f4e4:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1f4e8:	e7f5      	b.n	1f4d6 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1f4ea:	2000      	movs	r0, #0
   1f4ec:	e7f9      	b.n	1f4e2 <bt_conn_is_peer_addr_le+0x30>
		return true;
   1f4ee:	2001      	movs	r0, #1
   1f4f0:	e7f7      	b.n	1f4e2 <bt_conn_is_peer_addr_le+0x30>

0001f4f2 <bt_conn_unref>:
{
   1f4f2:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1f4f4:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1f4f6:	f3bf 8f5b 	dmb	ish
   1f4fa:	e850 3f00 	ldrex	r3, [r0]
   1f4fe:	3b01      	subs	r3, #1
   1f500:	e840 3200 	strex	r2, r3, [r0]
   1f504:	2a00      	cmp	r2, #0
   1f506:	d1f8      	bne.n	1f4fa <bt_conn_unref+0x8>
   1f508:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   1f50c:	f7ff ff58 	bl	1f3c0 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1f510:	b918      	cbnz	r0, 1f51a <bt_conn_unref+0x28>
}
   1f512:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1f516:	f7e9 bd69 	b.w	8fec <bt_le_adv_resume>
}
   1f51a:	bd08      	pop	{r3, pc}

0001f51c <bt_conn_get_dst>:
}
   1f51c:	3088      	adds	r0, #136	; 0x88
   1f51e:	4770      	bx	lr

0001f520 <bt_conn_le_conn_update>:
{
   1f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f522:	4607      	mov	r7, r0
   1f524:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1f526:	f242 0013 	movw	r0, #8211	; 0x2013
   1f52a:	210e      	movs	r1, #14
   1f52c:	f7e8 f90c 	bl	7748 <bt_hci_cmd_create>
	if (!buf) {
   1f530:	4606      	mov	r6, r0
   1f532:	b1d0      	cbz	r0, 1f56a <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1f534:	210e      	movs	r1, #14
   1f536:	3008      	adds	r0, #8
   1f538:	f001 fb16 	bl	20b68 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1f53c:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1f53e:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1f540:	2100      	movs	r1, #0
   1f542:	f7ff fc81 	bl	1ee48 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1f546:	883b      	ldrh	r3, [r7, #0]
   1f548:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1f54a:	882b      	ldrh	r3, [r5, #0]
   1f54c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1f54e:	886b      	ldrh	r3, [r5, #2]
   1f550:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1f552:	88ab      	ldrh	r3, [r5, #4]
   1f554:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1f556:	88eb      	ldrh	r3, [r5, #6]
   1f558:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1f55a:	4631      	mov	r1, r6
   1f55c:	2200      	movs	r2, #0
}
   1f55e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1f562:	f242 0013 	movw	r0, #8211	; 0x2013
   1f566:	f7e8 ba4b 	b.w	7a00 <bt_hci_cmd_send_sync>
}
   1f56a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1f56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f570 <l2cap_connected>:
}
   1f570:	4770      	bx	lr

0001f572 <l2cap_disconnected>:
   1f572:	4770      	bx	lr

0001f574 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f574:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1f576:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f578:	b17b      	cbz	r3, 1f59a <bt_l2cap_chan_remove+0x26>
   1f57a:	3b08      	subs	r3, #8
   1f57c:	2200      	movs	r2, #0
   1f57e:	b163      	cbz	r3, 1f59a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1f580:	428b      	cmp	r3, r1
   1f582:	f103 0408 	add.w	r4, r3, #8
   1f586:	d10f      	bne.n	1f5a8 <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1f588:	688b      	ldr	r3, [r1, #8]
   1f58a:	b93a      	cbnz	r2, 1f59c <bt_l2cap_chan_remove+0x28>
   1f58c:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1f58e:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1f590:	4294      	cmp	r4, r2
   1f592:	d100      	bne.n	1f596 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1f594:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1f596:	2300      	movs	r3, #0
   1f598:	608b      	str	r3, [r1, #8]
}
   1f59a:	bd10      	pop	{r4, pc}
   1f59c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f59e:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1f5a0:	429c      	cmp	r4, r3
	list->tail = node;
   1f5a2:	bf08      	it	eq
   1f5a4:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1f5a6:	e7f6      	b.n	1f596 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f5a8:	2c00      	cmp	r4, #0
   1f5aa:	d0f6      	beq.n	1f59a <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f5ac:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f5ae:	2b00      	cmp	r3, #0
   1f5b0:	d0f3      	beq.n	1f59a <bt_l2cap_chan_remove+0x26>
   1f5b2:	3b08      	subs	r3, #8
   1f5b4:	4622      	mov	r2, r4
   1f5b6:	e7e2      	b.n	1f57e <bt_l2cap_chan_remove+0xa>

0001f5b8 <bt_l2cap_chan_del>:
{
   1f5b8:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1f5ba:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1f5be:	4604      	mov	r4, r0
	if (!chan->conn) {
   1f5c0:	b123      	cbz	r3, 1f5cc <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1f5c2:	686b      	ldr	r3, [r5, #4]
   1f5c4:	b103      	cbz	r3, 1f5c8 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1f5c6:	4798      	blx	r3
	chan->conn = NULL;
   1f5c8:	2300      	movs	r3, #0
   1f5ca:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1f5cc:	68e3      	ldr	r3, [r4, #12]
   1f5ce:	b10b      	cbz	r3, 1f5d4 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1f5d0:	4620      	mov	r0, r4
   1f5d2:	4798      	blx	r3
	if (ops->released) {
   1f5d4:	69eb      	ldr	r3, [r5, #28]
   1f5d6:	b11b      	cbz	r3, 1f5e0 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1f5d8:	4620      	mov	r0, r4
}
   1f5da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1f5de:	4718      	bx	r3
}
   1f5e0:	bd70      	pop	{r4, r5, r6, pc}

0001f5e2 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f5e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1f5e4:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f5e6:	b18b      	cbz	r3, 1f60c <bt_l2cap_disconnected+0x2a>
   1f5e8:	f1b3 0008 	subs.w	r0, r3, #8
   1f5ec:	d00e      	beq.n	1f60c <bt_l2cap_disconnected+0x2a>
   1f5ee:	681c      	ldr	r4, [r3, #0]
   1f5f0:	b104      	cbz	r4, 1f5f4 <bt_l2cap_disconnected+0x12>
   1f5f2:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1f5f4:	f7ff ffe0 	bl	1f5b8 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1f5f8:	b144      	cbz	r4, 1f60c <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f5fa:	f114 0308 	adds.w	r3, r4, #8
   1f5fe:	d002      	beq.n	1f606 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f600:	68a3      	ldr	r3, [r4, #8]
   1f602:	b103      	cbz	r3, 1f606 <bt_l2cap_disconnected+0x24>
   1f604:	3b08      	subs	r3, #8
{
   1f606:	4620      	mov	r0, r4
   1f608:	461c      	mov	r4, r3
   1f60a:	e7f3      	b.n	1f5f4 <bt_l2cap_disconnected+0x12>
}
   1f60c:	bd10      	pop	{r4, pc}

0001f60e <bt_l2cap_encrypt_change>:
{
   1f60e:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f610:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
{
   1f612:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f614:	b10c      	cbz	r4, 1f61a <bt_l2cap_encrypt_change+0xc>
   1f616:	3c08      	subs	r4, #8
   1f618:	b904      	cbnz	r4, 1f61c <bt_l2cap_encrypt_change+0xe>
}
   1f61a:	bd38      	pop	{r3, r4, r5, pc}
		if (chan->ops->encrypt_change) {
   1f61c:	6863      	ldr	r3, [r4, #4]
   1f61e:	689b      	ldr	r3, [r3, #8]
   1f620:	b113      	cbz	r3, 1f628 <bt_l2cap_encrypt_change+0x1a>
			chan->ops->encrypt_change(chan, hci_status);
   1f622:	4629      	mov	r1, r5
   1f624:	4620      	mov	r0, r4
   1f626:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f628:	f114 0f08 	cmn.w	r4, #8
   1f62c:	d0f5      	beq.n	1f61a <bt_l2cap_encrypt_change+0xc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f62e:	68a4      	ldr	r4, [r4, #8]
   1f630:	e7f0      	b.n	1f614 <bt_l2cap_encrypt_change+0x6>

0001f632 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1f632:	3104      	adds	r1, #4
   1f634:	f7ea bc64 	b.w	9f00 <bt_conn_create_pdu_timeout>

0001f638 <bt_l2cap_send_cb>:
{
   1f638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f63c:	4614      	mov	r4, r2
   1f63e:	4605      	mov	r5, r0
   1f640:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1f642:	f102 0008 	add.w	r0, r2, #8
   1f646:	2104      	movs	r1, #4
{
   1f648:	461e      	mov	r6, r3
   1f64a:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1f64e:	f001 faa2 	bl	20b96 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f652:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1f654:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1f656:	3a04      	subs	r2, #4
   1f658:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f65a:	4643      	mov	r3, r8
   1f65c:	4632      	mov	r2, r6
   1f65e:	4621      	mov	r1, r4
   1f660:	4628      	mov	r0, r5
}
   1f662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1f666:	f7ea b945 	b.w	98f4 <bt_conn_send_cb>

0001f66a <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f66a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1f66c:	b160      	cbz	r0, 1f688 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1f66e:	3808      	subs	r0, #8
   1f670:	b900      	cbnz	r0, 1f674 <bt_l2cap_le_lookup_tx_cid+0xa>
   1f672:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1f674:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1f678:	428b      	cmp	r3, r1
   1f67a:	d005      	beq.n	1f688 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f67c:	f110 0308 	adds.w	r3, r0, #8
   1f680:	d001      	beq.n	1f686 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f682:	6880      	ldr	r0, [r0, #8]
   1f684:	e7f2      	b.n	1f66c <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1f686:	4618      	mov	r0, r3
}
   1f688:	4770      	bx	lr

0001f68a <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1f68a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1f68c:	b160      	cbz	r0, 1f6a8 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1f68e:	3808      	subs	r0, #8
   1f690:	b900      	cbnz	r0, 1f694 <bt_l2cap_le_lookup_rx_cid+0xa>
   1f692:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1f694:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1f698:	428b      	cmp	r3, r1
   1f69a:	d005      	beq.n	1f6a8 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f69c:	f110 0308 	adds.w	r3, r0, #8
   1f6a0:	d001      	beq.n	1f6a6 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f6a2:	6880      	ldr	r0, [r0, #8]
   1f6a4:	e7f2      	b.n	1f68c <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1f6a6:	4618      	mov	r0, r3
}
   1f6a8:	4770      	bx	lr

0001f6aa <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1f6aa:	4770      	bx	lr

0001f6ac <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1f6ac:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1f6ae:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1f6b0:	b128      	cbz	r0, 1f6be <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f6b2:	6859      	ldr	r1, [r3, #4]
   1f6b4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1f6b6:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1f6b8:	4288      	cmp	r0, r1
	list->tail = node;
   1f6ba:	bf08      	it	eq
   1f6bc:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1f6be:	4770      	bx	lr

0001f6c0 <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6c0:	4603      	mov	r3, r0
   1f6c2:	6800      	ldr	r0, [r0, #0]
   1f6c4:	2200      	movs	r2, #0
   1f6c6:	b900      	cbnz	r0, 1f6ca <sys_slist_find_and_remove+0xa>
   1f6c8:	4770      	bx	lr
   1f6ca:	4288      	cmp	r0, r1
   1f6cc:	d110      	bne.n	1f6f0 <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1f6ce:	6808      	ldr	r0, [r1, #0]
   1f6d0:	b942      	cbnz	r2, 1f6e4 <sys_slist_find_and_remove+0x24>
   1f6d2:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1f6d4:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f6d6:	4291      	cmp	r1, r2
   1f6d8:	d100      	bne.n	1f6dc <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1f6da:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1f6dc:	2300      	movs	r3, #0
   1f6de:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6e0:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1f6e2:	4770      	bx	lr
	parent->next = child;
   1f6e4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1f6e6:	6858      	ldr	r0, [r3, #4]
   1f6e8:	4281      	cmp	r1, r0
	list->tail = node;
   1f6ea:	bf08      	it	eq
   1f6ec:	605a      	streq	r2, [r3, #4]
}
   1f6ee:	e7f5      	b.n	1f6dc <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f6f0:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1f6f2:	6800      	ldr	r0, [r0, #0]
   1f6f4:	e7e7      	b.n	1f6c6 <sys_slist_find_and_remove+0x6>

0001f6f6 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1f6f6:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f6f8:	2000      	movs	r0, #0

	while (buf) {
   1f6fa:	b903      	cbnz	r3, 1f6fe <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1f6fc:	4770      	bx	lr
		bytes += buf->len;
   1f6fe:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1f700:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1f702:	4410      	add	r0, r2
		buf = buf->frags;
   1f704:	e7f9      	b.n	1f6fa <net_buf_frags_len+0x4>

0001f706 <att_sent>:
	if (chan->ops->sent) {
   1f706:	684b      	ldr	r3, [r1, #4]
   1f708:	695b      	ldr	r3, [r3, #20]
{
   1f70a:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1f70c:	b103      	cbz	r3, 1f710 <att_sent+0xa>
		chan->ops->sent(chan);
   1f70e:	4718      	bx	r3
}
   1f710:	4770      	bx	lr

0001f712 <attr_read_type_cb>:
{
   1f712:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1f714:	68d4      	ldr	r4, [r2, #12]
   1f716:	7823      	ldrb	r3, [r4, #0]
   1f718:	3102      	adds	r1, #2
   1f71a:	b913      	cbnz	r3, 1f722 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1f71c:	7021      	strb	r1, [r4, #0]
	return true;
   1f71e:	2001      	movs	r0, #1
   1f720:	e006      	b.n	1f730 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1f722:	428b      	cmp	r3, r1
   1f724:	d0fb      	beq.n	1f71e <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1f726:	8983      	ldrh	r3, [r0, #12]
   1f728:	3b02      	subs	r3, #2
   1f72a:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1f72c:	2000      	movs	r0, #0
   1f72e:	6110      	str	r0, [r2, #16]
}
   1f730:	bd10      	pop	{r4, pc}

0001f732 <att_op_get_type>:
	switch (op) {
   1f732:	281e      	cmp	r0, #30
   1f734:	d816      	bhi.n	1f764 <att_op_get_type+0x32>
   1f736:	b308      	cbz	r0, 1f77c <att_op_get_type+0x4a>
   1f738:	1e43      	subs	r3, r0, #1
   1f73a:	2b1d      	cmp	r3, #29
   1f73c:	d81e      	bhi.n	1f77c <att_op_get_type+0x4a>
   1f73e:	e8df f003 	tbb	[pc, r3]
   1f742:	2317      	.short	0x2317
   1f744:	23172317 	.word	0x23172317
   1f748:	23172317 	.word	0x23172317
   1f74c:	23172317 	.word	0x23172317
   1f750:	23172317 	.word	0x23172317
   1f754:	231d1d17 	.word	0x231d1d17
   1f758:	1d172317 	.word	0x1d172317
   1f75c:	0f1b1d19 	.word	0x0f1b1d19
   1f760:	2004      	movs	r0, #4
   1f762:	4770      	bx	lr
   1f764:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1f768:	2b52      	cmp	r3, #82	; 0x52
   1f76a:	d107      	bne.n	1f77c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1f76c:	2000      	movs	r0, #0
}
   1f76e:	4770      	bx	lr
		return ATT_RESPONSE;
   1f770:	2002      	movs	r0, #2
   1f772:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1f774:	2003      	movs	r0, #3
   1f776:	4770      	bx	lr
		return ATT_INDICATION;
   1f778:	2005      	movs	r0, #5
   1f77a:	4770      	bx	lr
		return ATT_COMMAND;
   1f77c:	f010 0f40 	tst.w	r0, #64	; 0x40
   1f780:	bf0c      	ite	eq
   1f782:	2006      	moveq	r0, #6
   1f784:	2000      	movne	r0, #0
   1f786:	4770      	bx	lr
		return ATT_REQUEST;
   1f788:	2001      	movs	r0, #1
   1f78a:	4770      	bx	lr

0001f78c <bt_gatt_foreach_attr>:
{
   1f78c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f78e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f792:	2300      	movs	r3, #0
   1f794:	9300      	str	r3, [sp, #0]
   1f796:	461a      	mov	r2, r3
   1f798:	f7ec fdae 	bl	c2f8 <bt_gatt_foreach_attr_type>
}
   1f79c:	b005      	add	sp, #20
   1f79e:	f85d fb04 	ldr.w	pc, [sp], #4

0001f7a2 <find_info_cb>:
	if (!data->rsp) {
   1f7a2:	688b      	ldr	r3, [r1, #8]
{
   1f7a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_att_chan *chan = data->chan;
   1f7a6:	680e      	ldr	r6, [r1, #0]
{
   1f7a8:	4605      	mov	r5, r0
   1f7aa:	460c      	mov	r4, r1
	if (!data->rsp) {
   1f7ac:	b963      	cbnz	r3, 1f7c8 <find_info_cb+0x26>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f7ae:	6848      	ldr	r0, [r1, #4]
   1f7b0:	2101      	movs	r1, #1
   1f7b2:	3008      	adds	r0, #8
   1f7b4:	f001 f9d8 	bl	20b68 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f7b8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1f7ba:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1f7bc:	781b      	ldrb	r3, [r3, #0]
   1f7be:	2b00      	cmp	r3, #0
   1f7c0:	bf0c      	ite	eq
   1f7c2:	2301      	moveq	r3, #1
   1f7c4:	2302      	movne	r3, #2
   1f7c6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1f7c8:	68a3      	ldr	r3, [r4, #8]
   1f7ca:	781b      	ldrb	r3, [r3, #0]
   1f7cc:	2b01      	cmp	r3, #1
   1f7ce:	d003      	beq.n	1f7d8 <find_info_cb+0x36>
   1f7d0:	2b02      	cmp	r3, #2
   1f7d2:	d01a      	beq.n	1f80a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1f7d4:	2000      	movs	r0, #0
   1f7d6:	e017      	b.n	1f808 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1f7d8:	682b      	ldr	r3, [r5, #0]
   1f7da:	781b      	ldrb	r3, [r3, #0]
   1f7dc:	2b00      	cmp	r3, #0
   1f7de:	d1f9      	bne.n	1f7d4 <find_info_cb+0x32>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1f7e0:	6860      	ldr	r0, [r4, #4]
   1f7e2:	2104      	movs	r1, #4
   1f7e4:	3008      	adds	r0, #8
   1f7e6:	f001 f9bf 	bl	20b68 <net_buf_simple_add>
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1f7ea:	8a2b      	ldrh	r3, [r5, #16]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1f7ec:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
   1f7ee:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1f7f0:	682b      	ldr	r3, [r5, #0]
   1f7f2:	885b      	ldrh	r3, [r3, #2]
   1f7f4:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1f7f6:	6863      	ldr	r3, [r4, #4]
   1f7f8:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   1f7fc:	899b      	ldrh	r3, [r3, #12]
   1f7fe:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f800:	2804      	cmp	r0, #4
   1f802:	bf94      	ite	ls
   1f804:	2000      	movls	r0, #0
   1f806:	2001      	movhi	r0, #1
}
   1f808:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1f80a:	682b      	ldr	r3, [r5, #0]
   1f80c:	781b      	ldrb	r3, [r3, #0]
   1f80e:	2b02      	cmp	r3, #2
   1f810:	d1e0      	bne.n	1f7d4 <find_info_cb+0x32>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1f812:	6860      	ldr	r0, [r4, #4]
   1f814:	2112      	movs	r1, #18
   1f816:	3008      	adds	r0, #8
   1f818:	f001 f9a6 	bl	20b68 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f81c:	6829      	ldr	r1, [r5, #0]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1f81e:	8a2b      	ldrh	r3, [r5, #16]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1f820:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f822:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(attr->handle);
   1f824:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1f828:	3101      	adds	r1, #1
   1f82a:	f7ff fae2 	bl	1edf2 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1f82e:	6863      	ldr	r3, [r4, #4]
   1f830:	f8b6 005e 	ldrh.w	r0, [r6, #94]	; 0x5e
   1f834:	899b      	ldrh	r3, [r3, #12]
   1f836:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1f838:	2812      	cmp	r0, #18
   1f83a:	e7e2      	b.n	1f802 <find_info_cb+0x60>

0001f83c <att_chan_read>:
{
   1f83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f840:	4680      	mov	r8, r0
   1f842:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f844:	4610      	mov	r0, r2
{
   1f846:	4699      	mov	r9, r3
   1f848:	468b      	mov	fp, r1
   1f84a:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1f84c:	f7ff ff53 	bl	1f6f6 <net_buf_frags_len>
   1f850:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1f854:	4283      	cmp	r3, r0
   1f856:	d97a      	bls.n	1f94e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1f858:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1f85c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1f85e:	4630      	mov	r0, r6
   1f860:	f001 f960 	bl	20b24 <net_buf_frag_last>
	size_t len, total = 0;
   1f864:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1f868:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f86a:	4630      	mov	r0, r6
   1f86c:	f7ff ff43 	bl	1f6f6 <net_buf_frags_len>
   1f870:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f874:	f105 0708 	add.w	r7, r5, #8
   1f878:	1a24      	subs	r4, r4, r0
   1f87a:	4638      	mov	r0, r7
   1f87c:	f001 f9af 	bl	20bde <net_buf_simple_tailroom>
   1f880:	4284      	cmp	r4, r0
   1f882:	d211      	bcs.n	1f8a8 <att_chan_read+0x6c>
   1f884:	4630      	mov	r0, r6
   1f886:	f7ff ff36 	bl	1f6f6 <net_buf_frags_len>
   1f88a:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f88e:	1a24      	subs	r4, r4, r0
		if (!len) {
   1f890:	bb34      	cbnz	r4, 1f8e0 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1f892:	79b0      	ldrb	r0, [r6, #6]
   1f894:	f7fa fb70 	bl	19f78 <net_buf_pool_get>
   1f898:	2200      	movs	r2, #0
   1f89a:	2300      	movs	r3, #0
   1f89c:	f001 f90e 	bl	20abc <net_buf_alloc_fixed>
			if (!frag) {
   1f8a0:	4605      	mov	r5, r0
   1f8a2:	b930      	cbnz	r0, 1f8b2 <att_chan_read+0x76>
	return total;
   1f8a4:	4657      	mov	r7, sl
   1f8a6:	e02c      	b.n	1f902 <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f8a8:	4638      	mov	r0, r7
   1f8aa:	f001 f998 	bl	20bde <net_buf_simple_tailroom>
   1f8ae:	4604      	mov	r4, r0
   1f8b0:	e7ee      	b.n	1f890 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1f8b2:	4601      	mov	r1, r0
   1f8b4:	4630      	mov	r0, r6
   1f8b6:	f001 f946 	bl	20b46 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f8ba:	4630      	mov	r0, r6
   1f8bc:	f7ff ff1b 	bl	1f6f6 <net_buf_frags_len>
   1f8c0:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f8c4:	f105 0708 	add.w	r7, r5, #8
   1f8c8:	1a24      	subs	r4, r4, r0
   1f8ca:	4638      	mov	r0, r7
   1f8cc:	f001 f987 	bl	20bde <net_buf_simple_tailroom>
   1f8d0:	4284      	cmp	r4, r0
   1f8d2:	d21a      	bcs.n	1f90a <att_chan_read+0xce>
   1f8d4:	4630      	mov	r0, r6
   1f8d6:	f7ff ff0e 	bl	1f6f6 <net_buf_frags_len>
   1f8da:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1f8de:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1f8e0:	68a9      	ldr	r1, [r5, #8]
   1f8e2:	89aa      	ldrh	r2, [r5, #12]
   1f8e4:	f8db 7004 	ldr.w	r7, [fp, #4]
   1f8e8:	9803      	ldr	r0, [sp, #12]
   1f8ea:	f8cd 9000 	str.w	r9, [sp]
   1f8ee:	440a      	add	r2, r1
   1f8f0:	b2a3      	uxth	r3, r4
   1f8f2:	4659      	mov	r1, fp
   1f8f4:	47b8      	blx	r7
		if (read < 0) {
   1f8f6:	1e07      	subs	r7, r0, #0
   1f8f8:	da0c      	bge.n	1f914 <att_chan_read+0xd8>
				return total;
   1f8fa:	f1ba 0f00 	cmp.w	sl, #0
   1f8fe:	bf18      	it	ne
   1f900:	4657      	movne	r7, sl
}
   1f902:	4638      	mov	r0, r7
   1f904:	b005      	add	sp, #20
   1f906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1f90a:	4638      	mov	r0, r7
   1f90c:	f001 f967 	bl	20bde <net_buf_simple_tailroom>
   1f910:	4604      	mov	r4, r0
   1f912:	e7e5      	b.n	1f8e0 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1f914:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f916:	b993      	cbnz	r3, 1f93e <att_chan_read+0x102>
		net_buf_add(frag, read);
   1f918:	4639      	mov	r1, r7
   1f91a:	f105 0008 	add.w	r0, r5, #8
   1f91e:	f001 f923 	bl	20b68 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f922:	4630      	mov	r0, r6
   1f924:	f7ff fee7 	bl	1f6f6 <net_buf_frags_len>
   1f928:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1f92c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f92e:	4283      	cmp	r3, r0
		total += read;
   1f930:	44ba      	add	sl, r7
		offset += read;
   1f932:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1f936:	d9b5      	bls.n	1f8a4 <att_chan_read+0x68>
   1f938:	42a7      	cmp	r7, r4
   1f93a:	d096      	beq.n	1f86a <att_chan_read+0x2e>
   1f93c:	e7b2      	b.n	1f8a4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1f93e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1f940:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1f942:	4639      	mov	r1, r7
   1f944:	4628      	mov	r0, r5
   1f946:	4798      	blx	r3
   1f948:	2800      	cmp	r0, #0
   1f94a:	d1e5      	bne.n	1f918 <att_chan_read+0xdc>
   1f94c:	e7aa      	b.n	1f8a4 <att_chan_read+0x68>
		return 0;
   1f94e:	2700      	movs	r7, #0
   1f950:	e7d7      	b.n	1f902 <att_chan_read+0xc6>

0001f952 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1f952:	68d0      	ldr	r0, [r2, #12]
   1f954:	7803      	ldrb	r3, [r0, #0]
   1f956:	3104      	adds	r1, #4
   1f958:	b913      	cbnz	r3, 1f960 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1f95a:	7001      	strb	r1, [r0, #0]
	return true;
   1f95c:	2001      	movs	r0, #1
}
   1f95e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1f960:	428b      	cmp	r3, r1
   1f962:	d0fb      	beq.n	1f95c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1f964:	6891      	ldr	r1, [r2, #8]
   1f966:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1f968:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1f96a:	3b04      	subs	r3, #4
   1f96c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1f96e:	6110      	str	r0, [r2, #16]
		return false;
   1f970:	4770      	bx	lr

0001f972 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f972:	30c0      	adds	r0, #192	; 0xc0
   1f974:	f3bf 8f5b 	dmb	ish
   1f978:	e850 3f00 	ldrex	r3, [r0]
   1f97c:	f023 0301 	bic.w	r3, r3, #1
   1f980:	e840 3200 	strex	r2, r3, [r0]
   1f984:	2a00      	cmp	r2, #0
   1f986:	d1f7      	bne.n	1f978 <chan_rsp_sent+0x6>
   1f988:	f3bf 8f5b 	dmb	ish
}
   1f98c:	4770      	bx	lr

0001f98e <chan_cfm_sent>:
   1f98e:	30c0      	adds	r0, #192	; 0xc0
   1f990:	f3bf 8f5b 	dmb	ish
   1f994:	e850 3f00 	ldrex	r3, [r0]
   1f998:	f023 0302 	bic.w	r3, r3, #2
   1f99c:	e840 3200 	strex	r2, r3, [r0]
   1f9a0:	2a00      	cmp	r2, #0
   1f9a2:	d1f7      	bne.n	1f994 <chan_cfm_sent+0x6>
   1f9a4:	f3bf 8f5b 	dmb	ish
}
   1f9a8:	4770      	bx	lr

0001f9aa <write_cb>:
{
   1f9aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f9ac:	460c      	mov	r4, r1
   1f9ae:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1f9b0:	4601      	mov	r1, r0
   1f9b2:	222a      	movs	r2, #42	; 0x2a
   1f9b4:	6820      	ldr	r0, [r4, #0]
   1f9b6:	f000 fc87 	bl	202c8 <bt_gatt_check_perm>
   1f9ba:	4605      	mov	r5, r0
   1f9bc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1f9be:	bb00      	cbnz	r0, 1fa02 <write_cb+0x58>
	if (!data->req) {
   1f9c0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1f9c2:	68b7      	ldr	r7, [r6, #8]
   1f9c4:	68e2      	ldr	r2, [r4, #12]
   1f9c6:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1f9c8:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1f9ca:	bf14      	ite	ne
   1f9cc:	2300      	movne	r3, #0
   1f9ce:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1f9d0:	9301      	str	r3, [sp, #4]
   1f9d2:	8a63      	ldrh	r3, [r4, #18]
   1f9d4:	9300      	str	r3, [sp, #0]
   1f9d6:	4631      	mov	r1, r6
   1f9d8:	8a23      	ldrh	r3, [r4, #16]
   1f9da:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1f9dc:	1e03      	subs	r3, r0, #0
   1f9de:	db05      	blt.n	1f9ec <write_cb+0x42>
   1f9e0:	8a22      	ldrh	r2, [r4, #16]
   1f9e2:	4293      	cmp	r3, r2
   1f9e4:	d10b      	bne.n	1f9fe <write_cb+0x54>
	data->err = 0U;
   1f9e6:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1f9e8:	2501      	movs	r5, #1
   1f9ea:	e005      	b.n	1f9f8 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1f9ec:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1f9f0:	d305      	bcc.n	1f9fe <write_cb+0x54>
		return -err;
   1f9f2:	425b      	negs	r3, r3
   1f9f4:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1f9f6:	7523      	strb	r3, [r4, #20]
}
   1f9f8:	4628      	mov	r0, r5
   1f9fa:	b003      	add	sp, #12
   1f9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1f9fe:	230e      	movs	r3, #14
   1fa00:	e7f9      	b.n	1f9f6 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1fa02:	2500      	movs	r5, #0
   1fa04:	e7f8      	b.n	1f9f8 <write_cb+0x4e>

0001fa06 <read_cb>:
{
   1fa06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fa0a:	4606      	mov	r6, r0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fa0c:	6888      	ldr	r0, [r1, #8]
	struct bt_att_chan *chan = data->chan;
   1fa0e:	f8d1 8000 	ldr.w	r8, [r1]
{
   1fa12:	460c      	mov	r4, r1
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fa14:	3008      	adds	r0, #8
   1fa16:	2100      	movs	r1, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1fa18:	f8d8 5008 	ldr.w	r5, [r8, #8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fa1c:	f001 f8a4 	bl	20b68 <net_buf_simple_add>
	data->err = 0x00;
   1fa20:	2700      	movs	r7, #0
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1fa22:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
   1fa24:	7427      	strb	r7, [r4, #16]
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1fa26:	4628      	mov	r0, r5
   1fa28:	2215      	movs	r2, #21
   1fa2a:	4631      	mov	r1, r6
   1fa2c:	f000 fc4c 	bl	202c8 <bt_gatt_check_perm>
   1fa30:	4605      	mov	r5, r0
   1fa32:	7420      	strb	r0, [r4, #16]
	if (data->err) {
   1fa34:	b9a0      	cbnz	r0, 1fa60 <read_cb+0x5a>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1fa36:	e9cd 0000 	strd	r0, r0, [sp]
   1fa3a:	88a3      	ldrh	r3, [r4, #4]
   1fa3c:	68a2      	ldr	r2, [r4, #8]
   1fa3e:	4631      	mov	r1, r6
   1fa40:	4640      	mov	r0, r8
   1fa42:	f7ff fefb 	bl	1f83c <att_chan_read>
	if (ret < 0) {
   1fa46:	1e03      	subs	r3, r0, #0
   1fa48:	da0c      	bge.n	1fa64 <read_cb+0x5e>
	if (err < 0 && err >= -0xff) {
   1fa4a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1fa4e:	bf26      	itte	cs
   1fa50:	425b      	negcs	r3, r3
   1fa52:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1fa54:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1fa56:	7423      	strb	r3, [r4, #16]
}
   1fa58:	4628      	mov	r0, r5
   1fa5a:	b002      	add	sp, #8
   1fa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1fa60:	463d      	mov	r5, r7
   1fa62:	e7f9      	b.n	1fa58 <read_cb+0x52>
	return BT_GATT_ITER_CONTINUE;
   1fa64:	2501      	movs	r5, #1
   1fa66:	e7f7      	b.n	1fa58 <read_cb+0x52>

0001fa68 <chan_req_send>:
{
   1fa68:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1fa6a:	690e      	ldr	r6, [r1, #16]
{
   1fa6c:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1fa6e:	4630      	mov	r0, r6
{
   1fa70:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1fa72:	f7ff fe40 	bl	1f6f6 <net_buf_frags_len>
   1fa76:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1fa7a:	4283      	cmp	r3, r0
   1fa7c:	d31a      	bcc.n	1fab4 <chan_req_send+0x4c>
	chan->req = req;
   1fa7e:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1fa82:	f106 0008 	add.w	r0, r6, #8
   1fa86:	f001 f8a6 	bl	20bd6 <net_buf_simple_headroom>
	state->len = buf->len;
   1fa8a:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1fa8c:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1fa8e:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1fa90:	6920      	ldr	r0, [r4, #16]
   1fa92:	f001 f843 	bl	20b1c <net_buf_ref>
   1fa96:	2200      	movs	r2, #0
   1fa98:	4601      	mov	r1, r0
   1fa9a:	4628      	mov	r0, r5
   1fa9c:	f7ea ff82 	bl	a9a4 <chan_send>
	if (err < 0) {
   1faa0:	1e06      	subs	r6, r0, #0
   1faa2:	da05      	bge.n	1fab0 <chan_req_send+0x48>
		net_buf_unref(req->buf);
   1faa4:	6920      	ldr	r0, [r4, #16]
   1faa6:	f7fa fb23 	bl	1a0f0 <net_buf_unref>
		chan->req = NULL;
   1faaa:	2300      	movs	r3, #0
   1faac:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
}
   1fab0:	4630      	mov	r0, r6
   1fab2:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1fab4:	f06f 0623 	mvn.w	r6, #35	; 0x23
   1fab8:	e7fa      	b.n	1fab0 <chan_req_send+0x48>

0001faba <bt_att_chan_req_send>:
{
   1faba:	b570      	push	{r4, r5, r6, lr}
   1fabc:	4604      	mov	r4, r0
   1fabe:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1fac0:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1fac4:	2200      	movs	r2, #0
   1fac6:	2300      	movs	r3, #0
   1fac8:	4630      	mov	r0, r6
   1faca:	f7fc f961 	bl	1bd90 <z_impl_k_sem_take>
   1face:	2800      	cmp	r0, #0
   1fad0:	db0a      	blt.n	1fae8 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1fad2:	4620      	mov	r0, r4
   1fad4:	4629      	mov	r1, r5
   1fad6:	f7ff ffc7 	bl	1fa68 <chan_req_send>
	if (err < 0) {
   1fada:	1e04      	subs	r4, r0, #0
   1fadc:	da02      	bge.n	1fae4 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1fade:	4630      	mov	r0, r6
   1fae0:	f7fc f930 	bl	1bd44 <z_impl_k_sem_give>
}
   1fae4:	4620      	mov	r0, r4
   1fae6:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1fae8:	f06f 040a 	mvn.w	r4, #10
   1faec:	e7fa      	b.n	1fae4 <bt_att_chan_req_send+0x2a>

0001faee <bt_att_status>:
{
   1faee:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1faf0:	f3bf 8f5b 	dmb	ish
   1faf4:	680b      	ldr	r3, [r1, #0]
   1faf6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1fafa:	07db      	lsls	r3, r3, #31
{
   1fafc:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1fafe:	d518      	bpl.n	1fb32 <bt_att_status+0x44>
	if (chan->req) {
   1fb00:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1fb04:	b9ab      	cbnz	r3, 1fb32 <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   1fb06:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1fb0a:	3004      	adds	r0, #4
   1fb0c:	f7ff fdce 	bl	1f6ac <sys_slist_get>
	if (!node) {
   1fb10:	4604      	mov	r4, r0
   1fb12:	b170      	cbz	r0, 1fb32 <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fb14:	4601      	mov	r1, r0
   1fb16:	f1a5 0008 	sub.w	r0, r5, #8
   1fb1a:	f7ff ffce 	bl	1faba <bt_att_chan_req_send>
   1fb1e:	2800      	cmp	r0, #0
   1fb20:	da07      	bge.n	1fb32 <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   1fb22:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1fb26:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1fb28:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fb2a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1fb2c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fb2e:	b902      	cbnz	r2, 1fb32 <bt_att_status+0x44>
	list->tail = node;
   1fb30:	609c      	str	r4, [r3, #8]
}
   1fb32:	bd38      	pop	{r3, r4, r5, pc}

0001fb34 <bt_att_chan_send>:
{
   1fb34:	b570      	push	{r4, r5, r6, lr}
   1fb36:	4604      	mov	r4, r0
   1fb38:	460e      	mov	r6, r1
	if (!cb) {
   1fb3a:	4615      	mov	r5, r2
   1fb3c:	b132      	cbz	r2, 1fb4c <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1fb3e:	462a      	mov	r2, r5
   1fb40:	4631      	mov	r1, r6
   1fb42:	4620      	mov	r0, r4
}
   1fb44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1fb48:	f7ea bf2c 	b.w	a9a4 <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1fb4c:	2200      	movs	r2, #0
   1fb4e:	2300      	movs	r3, #0
   1fb50:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1fb54:	f7fc f91c 	bl	1bd90 <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1fb58:	2800      	cmp	r0, #0
   1fb5a:	daf0      	bge.n	1fb3e <bt_att_chan_send+0xa>
}
   1fb5c:	f06f 000a 	mvn.w	r0, #10
   1fb60:	bd70      	pop	{r4, r5, r6, pc}

0001fb62 <bt_att_chan_send_rsp>:
{
   1fb62:	b538      	push	{r3, r4, r5, lr}
   1fb64:	4604      	mov	r4, r0
   1fb66:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1fb68:	f7ff ffe4 	bl	1fb34 <bt_att_chan_send>
	if (err) {
   1fb6c:	b130      	cbz	r0, 1fb7c <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1fb6e:	4629      	mov	r1, r5
   1fb70:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   1fb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1fb78:	f000 bfc3 	b.w	20b02 <net_buf_put>
}
   1fb7c:	bd38      	pop	{r3, r4, r5, pc}

0001fb7e <process_queue>:
{
   1fb7e:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1fb80:	2200      	movs	r2, #0
{
   1fb82:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1fb84:	2300      	movs	r3, #0
   1fb86:	4608      	mov	r0, r1
{
   1fb88:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1fb8a:	f000 ff9c 	bl	20ac6 <net_buf_get>
	if (buf) {
   1fb8e:	4605      	mov	r5, r0
   1fb90:	b160      	cbz	r0, 1fbac <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1fb92:	4601      	mov	r1, r0
   1fb94:	2200      	movs	r2, #0
   1fb96:	4620      	mov	r0, r4
   1fb98:	f7ea ff04 	bl	a9a4 <chan_send>
		if (err) {
   1fb9c:	4604      	mov	r4, r0
   1fb9e:	b118      	cbz	r0, 1fba8 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1fba0:	4629      	mov	r1, r5
   1fba2:	4630      	mov	r0, r6
   1fba4:	f001 fa57 	bl	21056 <k_queue_prepend>
}
   1fba8:	4620      	mov	r0, r4
   1fbaa:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1fbac:	f06f 0401 	mvn.w	r4, #1
   1fbb0:	e7fa      	b.n	1fba8 <process_queue+0x2a>

0001fbb2 <bt_att_sent>:
{
   1fbb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1fbb4:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1fbb8:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1fbbc:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1fbbe:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1fbc2:	b10b      	cbz	r3, 1fbc8 <bt_att_sent+0x16>
		chan->sent(chan);
   1fbc4:	4638      	mov	r0, r7
   1fbc6:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1fbc8:	f3bf 8f5b 	dmb	ish
   1fbcc:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1fbd0:	e853 2f00 	ldrex	r2, [r3]
   1fbd4:	f022 0210 	bic.w	r2, r2, #16
   1fbd8:	e843 2100 	strex	r1, r2, [r3]
   1fbdc:	2900      	cmp	r1, #0
   1fbde:	d1f7      	bne.n	1fbd0 <bt_att_sent+0x1e>
   1fbe0:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1fbe4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1fbe8:	b98b      	cbnz	r3, 1fc0e <bt_att_sent+0x5c>
   1fbea:	686b      	ldr	r3, [r5, #4]
   1fbec:	b17b      	cbz	r3, 1fc0e <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1fbee:	1d28      	adds	r0, r5, #4
   1fbf0:	f7ff fd5c 	bl	1f6ac <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fbf4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1fbf6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1fbf8:	4638      	mov	r0, r7
   1fbfa:	f7ff ff35 	bl	1fa68 <chan_req_send>
   1fbfe:	2800      	cmp	r0, #0
   1fc00:	da17      	bge.n	1fc32 <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   1fc02:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1fc04:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1fc06:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1fc08:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fc0a:	b903      	cbnz	r3, 1fc0e <bt_att_sent+0x5c>
	list->tail = node;
   1fc0c:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1fc0e:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1fc12:	4638      	mov	r0, r7
   1fc14:	f7ff ffb3 	bl	1fb7e <process_queue>
	if (!err) {
   1fc18:	b158      	cbz	r0, 1fc32 <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   1fc1a:	f105 010c 	add.w	r1, r5, #12
   1fc1e:	4638      	mov	r0, r7
   1fc20:	f7ff ffad 	bl	1fb7e <process_queue>
	if (!err) {
   1fc24:	b128      	cbz	r0, 1fc32 <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   1fc26:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1fc2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1fc2e:	f7fc b889 	b.w	1bd44 <z_impl_k_sem_give>
   1fc32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fc34 <att_write_cmd>:
{
   1fc34:	b530      	push	{r4, r5, lr}
   1fc36:	460c      	mov	r4, r1
   1fc38:	b085      	sub	sp, #20
   1fc3a:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1fc3c:	f101 0008 	add.w	r0, r1, #8
   1fc40:	f000 ffc1 	bl	20bc6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1fc44:	89a2      	ldrh	r2, [r4, #12]
   1fc46:	9202      	str	r2, [sp, #8]
   1fc48:	68a2      	ldr	r2, [r4, #8]
   1fc4a:	9201      	str	r2, [sp, #4]
   1fc4c:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1fc4e:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1fc50:	9200      	str	r2, [sp, #0]
   1fc52:	4611      	mov	r1, r2
   1fc54:	4628      	mov	r0, r5
   1fc56:	f7eb f811 	bl	ac7c <att_write_rsp>
}
   1fc5a:	b005      	add	sp, #20
   1fc5c:	bd30      	pop	{r4, r5, pc}

0001fc5e <att_write_req>:
{
   1fc5e:	b530      	push	{r4, r5, lr}
   1fc60:	460c      	mov	r4, r1
   1fc62:	b085      	sub	sp, #20
   1fc64:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1fc66:	f101 0008 	add.w	r0, r1, #8
   1fc6a:	f000 ffac 	bl	20bc6 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1fc6e:	89a2      	ldrh	r2, [r4, #12]
   1fc70:	9202      	str	r2, [sp, #8]
   1fc72:	68a2      	ldr	r2, [r4, #8]
   1fc74:	9201      	str	r2, [sp, #4]
   1fc76:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1fc78:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1fc7a:	9200      	str	r2, [sp, #0]
   1fc7c:	2112      	movs	r1, #18
   1fc7e:	2213      	movs	r2, #19
   1fc80:	4628      	mov	r0, r5
   1fc82:	f7ea fffb 	bl	ac7c <att_write_rsp>
}
   1fc86:	b005      	add	sp, #20
   1fc88:	bd30      	pop	{r4, r5, pc}

0001fc8a <att_read_blob_req>:
{
   1fc8a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1fc8c:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1fc8e:	8813      	ldrh	r3, [r2, #0]
   1fc90:	8852      	ldrh	r2, [r2, #2]
   1fc92:	9200      	str	r2, [sp, #0]
   1fc94:	210c      	movs	r1, #12
   1fc96:	220d      	movs	r2, #13
   1fc98:	f7eb fa4c 	bl	b134 <att_read_rsp>
}
   1fc9c:	b003      	add	sp, #12
   1fc9e:	f85d fb04 	ldr.w	pc, [sp], #4

0001fca2 <att_read_req>:
{
   1fca2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1fca4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1fca6:	2200      	movs	r2, #0
   1fca8:	881b      	ldrh	r3, [r3, #0]
   1fcaa:	9200      	str	r2, [sp, #0]
   1fcac:	210a      	movs	r1, #10
   1fcae:	220b      	movs	r2, #11
   1fcb0:	f7eb fa40 	bl	b134 <att_read_rsp>
}
   1fcb4:	b003      	add	sp, #12
   1fcb6:	f85d fb04 	ldr.w	pc, [sp], #4

0001fcba <bt_att_init>:
	bt_gatt_init();
   1fcba:	f7ec bab5 	b.w	c228 <bt_gatt_init>

0001fcbe <att_req_destroy>:
{
   1fcbe:	b510      	push	{r4, lr}
   1fcc0:	4604      	mov	r4, r0
	if (req->buf) {
   1fcc2:	6900      	ldr	r0, [r0, #16]
   1fcc4:	b108      	cbz	r0, 1fcca <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1fcc6:	f7fa fa13 	bl	1a0f0 <net_buf_unref>
	if (req->destroy) {
   1fcca:	68a3      	ldr	r3, [r4, #8]
   1fccc:	b10b      	cbz	r3, 1fcd2 <att_req_destroy+0x14>
		req->destroy(req);
   1fcce:	4620      	mov	r0, r4
   1fcd0:	4798      	blx	r3
	bt_att_req_free(req);
   1fcd2:	4620      	mov	r0, r4
}
   1fcd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1fcd8:	f7eb bbd2 	b.w	b480 <bt_att_req_free>

0001fcdc <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1fcdc:	898a      	ldrh	r2, [r1, #12]
   1fcde:	6889      	ldr	r1, [r1, #8]
   1fce0:	2300      	movs	r3, #0
   1fce2:	f7eb bbd9 	b.w	b498 <att_handle_rsp>

0001fce6 <att_chan_detach>:
{
   1fce6:	b538      	push	{r3, r4, r5, lr}
   1fce8:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1fcea:	6800      	ldr	r0, [r0, #0]
   1fcec:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1fcf0:	303c      	adds	r0, #60	; 0x3c
   1fcf2:	f7ff fce5 	bl	1f6c0 <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1fcf6:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1fcfa:	4628      	mov	r0, r5
   1fcfc:	f7fc f822 	bl	1bd44 <z_impl_k_sem_give>
   1fd00:	4628      	mov	r0, r5
   1fd02:	f7fc f81f 	bl	1bd44 <z_impl_k_sem_give>
   1fd06:	4628      	mov	r0, r5
   1fd08:	f7fc f81c 	bl	1bd44 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1fd0c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1fd10:	2200      	movs	r2, #0
   1fd12:	2300      	movs	r3, #0
   1fd14:	4628      	mov	r0, r5
   1fd16:	f000 fed6 	bl	20ac6 <net_buf_get>
   1fd1a:	4602      	mov	r2, r0
   1fd1c:	b950      	cbnz	r0, 1fd34 <att_chan_detach+0x4e>
	if (chan->req) {
   1fd1e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1fd22:	b123      	cbz	r3, 1fd2e <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1fd24:	4601      	mov	r1, r0
   1fd26:	230e      	movs	r3, #14
   1fd28:	4620      	mov	r0, r4
   1fd2a:	f7eb fbb5 	bl	b498 <att_handle_rsp>
	chan->att = NULL;
   1fd2e:	2300      	movs	r3, #0
   1fd30:	6023      	str	r3, [r4, #0]
}
   1fd32:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1fd34:	f7fa f9dc 	bl	1a0f0 <net_buf_unref>
   1fd38:	e7ea      	b.n	1fd10 <att_chan_detach+0x2a>

0001fd3a <bt_att_disconnected>:
{
   1fd3a:	b538      	push	{r3, r4, r5, lr}
   1fd3c:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1fd3e:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1fd42:	f7ff ffd0 	bl	1fce6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1fd46:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1fd48:	b93b      	cbnz	r3, 1fd5a <bt_att_disconnected+0x20>
	att_reset(att);
   1fd4a:	4628      	mov	r0, r5
   1fd4c:	f7eb fc52 	bl	b5f4 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1fd50:	6820      	ldr	r0, [r4, #0]
}
   1fd52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1fd56:	f7ec bed1 	b.w	cafc <bt_gatt_disconnected>
}
   1fd5a:	bd38      	pop	{r3, r4, r5, pc}

0001fd5c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1fd5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fd60:	4605      	mov	r5, r0
   1fd62:	460e      	mov	r6, r1
   1fd64:	4614      	mov	r4, r2
   1fd66:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1fd68:	f7ea fcf2 	bl	a750 <att_get>
	if (!att) {
   1fd6c:	4607      	mov	r7, r0
   1fd6e:	b938      	cbnz	r0, 1fd80 <bt_att_send+0x24>
		net_buf_unref(buf);
   1fd70:	4630      	mov	r0, r6
   1fd72:	f7fa f9bd 	bl	1a0f0 <net_buf_unref>
		return -ENOTCONN;
   1fd76:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1fd7a:	b002      	add	sp, #8
   1fd7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1fd80:	b144      	cbz	r4, 1fd94 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1fd82:	f8cd 8000 	str.w	r8, [sp]
   1fd86:	4623      	mov	r3, r4
   1fd88:	4632      	mov	r2, r6
   1fd8a:	2104      	movs	r1, #4
   1fd8c:	4628      	mov	r0, r5
   1fd8e:	f7ff fc53 	bl	1f638 <bt_l2cap_send_cb>
   1fd92:	e7f2      	b.n	1fd7a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fd94:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   1fd96:	b184      	cbz	r4, 1fdba <bt_att_send+0x5e>
   1fd98:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1fd9c:	d00f      	beq.n	1fdbe <bt_att_send+0x62>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fd9e:	6824      	ldr	r4, [r4, #0]
   1fda0:	b10c      	cbz	r4, 1fda6 <bt_att_send+0x4a>
   1fda2:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1fda6:	2000      	movs	r0, #0
   1fda8:	b95d      	cbnz	r5, 1fdc2 <bt_att_send+0x66>
	if (ret < 0) {
   1fdaa:	b188      	cbz	r0, 1fdd0 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1fdac:	f107 000c 	add.w	r0, r7, #12
   1fdb0:	4631      	mov	r1, r6
   1fdb2:	f000 fea6 	bl	20b02 <net_buf_put>
	return 0;
   1fdb6:	4628      	mov	r0, r5
   1fdb8:	e7df      	b.n	1fd7a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fdba:	4625      	mov	r5, r4
   1fdbc:	e7f3      	b.n	1fda6 <bt_att_send+0x4a>
   1fdbe:	462c      	mov	r4, r5
   1fdc0:	e7f1      	b.n	1fda6 <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1fdc2:	2200      	movs	r2, #0
   1fdc4:	4631      	mov	r1, r6
   1fdc6:	4628      	mov	r0, r5
   1fdc8:	f7ff feb4 	bl	1fb34 <bt_att_chan_send>
		if (ret >= 0) {
   1fdcc:	2800      	cmp	r0, #0
   1fdce:	db01      	blt.n	1fdd4 <bt_att_send+0x78>
	return 0;
   1fdd0:	2000      	movs	r0, #0
   1fdd2:	e7d2      	b.n	1fd7a <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fdd4:	b154      	cbz	r4, 1fdec <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fdd6:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   1fdda:	d004      	beq.n	1fde6 <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fddc:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1fde0:	b10b      	cbz	r3, 1fde6 <bt_att_send+0x8a>
   1fde2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1fde6:	4625      	mov	r5, r4
   1fde8:	461c      	mov	r4, r3
   1fdea:	e7dd      	b.n	1fda8 <bt_att_send+0x4c>
   1fdec:	4623      	mov	r3, r4
   1fdee:	e7fa      	b.n	1fde6 <bt_att_send+0x8a>

0001fdf0 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1fdf0:	b570      	push	{r4, r5, r6, lr}
   1fdf2:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1fdf4:	f7ea fcac 	bl	a750 <att_get>
	if (!att) {
   1fdf8:	4605      	mov	r5, r0
   1fdfa:	b930      	cbnz	r0, 1fe0a <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1fdfc:	6920      	ldr	r0, [r4, #16]
   1fdfe:	f7fa f977 	bl	1a0f0 <net_buf_unref>
		req->buf = NULL;
   1fe02:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1fe04:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1fe08:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe0a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1fe0c:	b153      	cbz	r3, 1fe24 <bt_att_req_send+0x34>
   1fe0e:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1fe12:	d007      	beq.n	1fe24 <bt_att_req_send+0x34>
   1fe14:	681e      	ldr	r6, [r3, #0]
   1fe16:	b10e      	cbz	r6, 1fe1c <bt_att_req_send+0x2c>
   1fe18:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1fe1c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1fe20:	b143      	cbz	r3, 1fe34 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe22:	b96e      	cbnz	r6, 1fe40 <bt_att_req_send+0x50>
	parent->next = child;
   1fe24:	2000      	movs	r0, #0
   1fe26:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1fe28:	68ab      	ldr	r3, [r5, #8]
   1fe2a:	b9a3      	cbnz	r3, 1fe56 <bt_att_req_send+0x66>
	list->head = node;
   1fe2c:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1fe30:	4618      	mov	r0, r3
}
   1fe32:	e7e9      	b.n	1fe08 <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1fe34:	4621      	mov	r1, r4
   1fe36:	f7ff fe40 	bl	1faba <bt_att_chan_req_send>
			if (ret >= 0) {
   1fe3a:	2800      	cmp	r0, #0
   1fe3c:	dbf1      	blt.n	1fe22 <bt_att_req_send+0x32>
   1fe3e:	e7e3      	b.n	1fe08 <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1fe40:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1fe44:	d004      	beq.n	1fe50 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1fe46:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1fe4a:	b10b      	cbz	r3, 1fe50 <bt_att_req_send+0x60>
   1fe4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1fe50:	4630      	mov	r0, r6
   1fe52:	461e      	mov	r6, r3
   1fe54:	e7e2      	b.n	1fe1c <bt_att_req_send+0x2c>
	parent->next = child;
   1fe56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1fe58:	60ac      	str	r4, [r5, #8]
}
   1fe5a:	e7d5      	b.n	1fe08 <bt_att_req_send+0x18>

0001fe5c <gatt_ccc_changed>:
{
   1fe5c:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1fe5e:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1fe60:	895a      	ldrh	r2, [r3, #10]
   1fe62:	428a      	cmp	r2, r1
   1fe64:	d003      	beq.n	1fe6e <gatt_ccc_changed+0x12>
		ccc->value = value;
   1fe66:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1fe68:	68db      	ldr	r3, [r3, #12]
   1fe6a:	b103      	cbz	r3, 1fe6e <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1fe6c:	4718      	bx	r3
}
   1fe6e:	4770      	bx	lr

0001fe70 <gatt_indicate_rsp>:
{
   1fe70:	b410      	push	{r4}
   1fe72:	9b01      	ldr	r3, [sp, #4]
   1fe74:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   1fe76:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   1fe7a:	4623      	mov	r3, r4
}
   1fe7c:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   1fe7e:	4718      	bx	r3

0001fe80 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1fe80:	2207      	movs	r2, #7
   1fe82:	f7fe bfb6 	b.w	1edf2 <memcpy>

0001fe86 <clear_ccc_cfg>:
{
   1fe86:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1fe88:	2500      	movs	r5, #0
{
   1fe8a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1fe8c:	4669      	mov	r1, sp
   1fe8e:	3001      	adds	r0, #1
   1fe90:	9500      	str	r5, [sp, #0]
   1fe92:	f8cd 5003 	str.w	r5, [sp, #3]
   1fe96:	f7ff fff3 	bl	1fe80 <bt_addr_le_copy>
	cfg->id = 0U;
   1fe9a:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1fe9c:	8125      	strh	r5, [r4, #8]
}
   1fe9e:	b003      	add	sp, #12
   1fea0:	bd30      	pop	{r4, r5, pc}

0001fea2 <write_name>:
{
   1fea2:	b570      	push	{r4, r5, r6, lr}
   1fea4:	b092      	sub	sp, #72	; 0x48
   1fea6:	4615      	mov	r5, r2
   1fea8:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1feac:	2100      	movs	r1, #0
   1feae:	223d      	movs	r2, #61	; 0x3d
   1feb0:	a802      	add	r0, sp, #8
{
   1feb2:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1feb4:	9101      	str	r1, [sp, #4]
   1feb6:	f7fe ffc7 	bl	1ee48 <memset>
	if (offset) {
   1feba:	b966      	cbnz	r6, 1fed6 <write_name+0x34>
	if (len >= sizeof(value)) {
   1febc:	2c40      	cmp	r4, #64	; 0x40
   1febe:	d80d      	bhi.n	1fedc <write_name+0x3a>
	memcpy(value, buf, len);
   1fec0:	4622      	mov	r2, r4
   1fec2:	4629      	mov	r1, r5
   1fec4:	a801      	add	r0, sp, #4
   1fec6:	f7fe ff94 	bl	1edf2 <memcpy>
	bt_set_name(value);
   1feca:	a801      	add	r0, sp, #4
   1fecc:	f7e8 fd70 	bl	89b0 <bt_set_name>
	return len;
   1fed0:	4620      	mov	r0, r4
}
   1fed2:	b012      	add	sp, #72	; 0x48
   1fed4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1fed6:	f06f 0006 	mvn.w	r0, #6
   1feda:	e7fa      	b.n	1fed2 <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1fedc:	f06f 000c 	mvn.w	r0, #12
   1fee0:	e7f7      	b.n	1fed2 <write_name+0x30>

0001fee2 <gen_hash_m>:
{
   1fee2:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1fee4:	6807      	ldr	r7, [r0, #0]
   1fee6:	783e      	ldrb	r6, [r7, #0]
{
   1fee8:	b089      	sub	sp, #36	; 0x24
   1feea:	4605      	mov	r5, r0
   1feec:	460c      	mov	r4, r1
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1feee:	b10e      	cbz	r6, 1fef4 <gen_hash_m+0x12>
	switch (u16->val) {
   1fef0:	2601      	movs	r6, #1
   1fef2:	e015      	b.n	1ff20 <gen_hash_m+0x3e>
   1fef4:	887b      	ldrh	r3, [r7, #2]
   1fef6:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1fefa:	d004      	beq.n	1ff06 <gen_hash_m+0x24>
   1fefc:	d813      	bhi.n	1ff26 <gen_hash_m+0x44>
   1fefe:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1ff02:	2b03      	cmp	r3, #3
   1ff04:	d8f4      	bhi.n	1fef0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1ff06:	8a2b      	ldrh	r3, [r5, #16]
   1ff08:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ff0c:	2202      	movs	r2, #2
   1ff0e:	f10d 010e 	add.w	r1, sp, #14
   1ff12:	4620      	mov	r0, r4
   1ff14:	f7fe fdf8 	bl	1eb08 <tc_cmac_update>
   1ff18:	b9e8      	cbnz	r0, 1ff56 <gen_hash_m+0x74>
			state->err = -EINVAL;
   1ff1a:	f06f 0315 	mvn.w	r3, #21
   1ff1e:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1ff20:	4630      	mov	r0, r6
   1ff22:	b009      	add	sp, #36	; 0x24
   1ff24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1ff26:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1ff2a:	33ff      	adds	r3, #255	; 0xff
   1ff2c:	b29b      	uxth	r3, r3
   1ff2e:	2b04      	cmp	r3, #4
   1ff30:	d8de      	bhi.n	1fef0 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(attr->handle);
   1ff32:	8a03      	ldrh	r3, [r0, #16]
   1ff34:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ff38:	2202      	movs	r2, #2
   1ff3a:	f10d 010e 	add.w	r1, sp, #14
   1ff3e:	4620      	mov	r0, r4
   1ff40:	f7fe fde2 	bl	1eb08 <tc_cmac_update>
   1ff44:	2800      	cmp	r0, #0
   1ff46:	d0e8      	beq.n	1ff1a <gen_hash_m+0x38>
		value = sys_cpu_to_le16(u16->val);
   1ff48:	887b      	ldrh	r3, [r7, #2]
   1ff4a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ff4e:	2202      	movs	r2, #2
   1ff50:	f10d 010e 	add.w	r1, sp, #14
   1ff54:	e017      	b.n	1ff86 <gen_hash_m+0xa4>
		value = sys_cpu_to_le16(u16->val);
   1ff56:	887b      	ldrh	r3, [r7, #2]
   1ff58:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ff5c:	2202      	movs	r2, #2
   1ff5e:	f10d 010e 	add.w	r1, sp, #14
   1ff62:	4620      	mov	r0, r4
   1ff64:	f7fe fdd0 	bl	1eb08 <tc_cmac_update>
   1ff68:	2800      	cmp	r0, #0
   1ff6a:	d0d6      	beq.n	1ff1a <gen_hash_m+0x38>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1ff6c:	2000      	movs	r0, #0
   1ff6e:	2310      	movs	r3, #16
   1ff70:	eb0d 0203 	add.w	r2, sp, r3
   1ff74:	686f      	ldr	r7, [r5, #4]
   1ff76:	9000      	str	r0, [sp, #0]
   1ff78:	4629      	mov	r1, r5
   1ff7a:	47b8      	blx	r7
		if (len < 0) {
   1ff7c:	1e02      	subs	r2, r0, #0
   1ff7e:	da01      	bge.n	1ff84 <gen_hash_m+0xa2>
			state->err = len;
   1ff80:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1ff82:	e7cd      	b.n	1ff20 <gen_hash_m+0x3e>
		if (tc_cmac_update(&state->state, data, len) ==
   1ff84:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ff86:	4620      	mov	r0, r4
   1ff88:	f7fe fdbe 	bl	1eb08 <tc_cmac_update>
   1ff8c:	2800      	cmp	r0, #0
   1ff8e:	d1af      	bne.n	1fef0 <gen_hash_m+0xe>
   1ff90:	e7c3      	b.n	1ff1a <gen_hash_m+0x38>

0001ff92 <atomic_and>:
{
   1ff92:	4603      	mov	r3, r0
}
   1ff94:	f3bf 8f5b 	dmb	ish
   1ff98:	e853 0f00 	ldrex	r0, [r3]
   1ff9c:	ea00 0201 	and.w	r2, r0, r1
   1ffa0:	e843 2c00 	strex	ip, r2, [r3]
   1ffa4:	f1bc 0f00 	cmp.w	ip, #0
   1ffa8:	d1f6      	bne.n	1ff98 <atomic_and+0x6>
   1ffaa:	f3bf 8f5b 	dmb	ish
   1ffae:	4770      	bx	lr

0001ffb0 <clear_cf_cfg>:
{
   1ffb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1ffb2:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1ffb4:	2500      	movs	r5, #0
   1ffb6:	4669      	mov	r1, sp
   1ffb8:	3001      	adds	r0, #1
   1ffba:	9500      	str	r5, [sp, #0]
   1ffbc:	f8cd 5003 	str.w	r5, [sp, #3]
   1ffc0:	f7ff ff5e 	bl	1fe80 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1ffc4:	f104 0008 	add.w	r0, r4, #8
   1ffc8:	2201      	movs	r2, #1
   1ffca:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1ffcc:	340c      	adds	r4, #12
   1ffce:	f7fe ff3b 	bl	1ee48 <memset>
   1ffd2:	f3bf 8f5b 	dmb	ish
   1ffd6:	e854 3f00 	ldrex	r3, [r4]
   1ffda:	e844 5200 	strex	r2, r5, [r4]
   1ffde:	2a00      	cmp	r2, #0
   1ffe0:	d1f9      	bne.n	1ffd6 <clear_cf_cfg+0x26>
   1ffe2:	f3bf 8f5b 	dmb	ish
}
   1ffe6:	b003      	add	sp, #12
   1ffe8:	bd30      	pop	{r4, r5, pc}

0001ffea <match_uuid>:
   1ffea:	6008      	str	r0, [r1, #0]
   1ffec:	2000      	movs	r0, #0
   1ffee:	4770      	bx	lr

0001fff0 <ccc_find_cfg>:
{
   1fff0:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   1fff2:	7803      	ldrb	r3, [r0, #0]
   1fff4:	4293      	cmp	r3, r2
{
   1fff6:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   1fff8:	d001      	beq.n	1fffe <ccc_find_cfg+0xe>
	return NULL;
   1fffa:	2000      	movs	r0, #0
}
   1fffc:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   1fffe:	2207      	movs	r2, #7
   20000:	3001      	adds	r0, #1
   20002:	f7fe fee6 	bl	1edd2 <memcmp>
		if (id == ccc->cfg[i].id &&
   20006:	2800      	cmp	r0, #0
   20008:	d1f7      	bne.n	1fffa <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   2000a:	4620      	mov	r0, r4
   2000c:	e7f6      	b.n	1fffc <ccc_find_cfg+0xc>

0002000e <find_ccc_cfg>:
{
   2000e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20010:	460c      	mov	r4, r1
   20012:	1c4d      	adds	r5, r1, #1
		if (conn) {
   20014:	b148      	cbz	r0, 2002a <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   20016:	7809      	ldrb	r1, [r1, #0]
   20018:	462a      	mov	r2, r5
   2001a:	f7ff fa4a 	bl	1f4b2 <bt_conn_is_peer_addr_le>
   2001e:	2800      	cmp	r0, #0
	return NULL;
   20020:	bf08      	it	eq
   20022:	2400      	moveq	r4, #0
}
   20024:	4620      	mov	r0, r4
   20026:	b003      	add	sp, #12
   20028:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2002a:	9000      	str	r0, [sp, #0]
   2002c:	2207      	movs	r2, #7
   2002e:	f8cd 0003 	str.w	r0, [sp, #3]
   20032:	4669      	mov	r1, sp
   20034:	4628      	mov	r0, r5
   20036:	f7fe fecc 	bl	1edd2 <memcmp>
   2003a:	2800      	cmp	r0, #0
	return NULL;
   2003c:	bf18      	it	ne
   2003e:	2400      	movne	r4, #0
   20040:	e7f0      	b.n	20024 <find_ccc_cfg+0x16>

00020042 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   20042:	2301      	movs	r3, #1
   20044:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   20046:	f3bf 8f5b 	dmb	ish
   2004a:	e850 2f00 	ldrex	r2, [r0]
   2004e:	431a      	orrs	r2, r3
   20050:	e840 2100 	strex	r1, r2, [r0]
   20054:	2900      	cmp	r1, #0
   20056:	d1f8      	bne.n	2004a <atomic_set_bit+0x8>
   20058:	f3bf 8f5b 	dmb	ish
}
   2005c:	4770      	bx	lr

0002005e <sc_restore_rsp>:
{
   2005e:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   20060:	f7eb fee4 	bl	be2c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   20064:	b140      	cbz	r0, 20078 <sc_restore_rsp+0x1a>
   20066:	7a03      	ldrb	r3, [r0, #8]
   20068:	07db      	lsls	r3, r3, #31
   2006a:	d505      	bpl.n	20078 <sc_restore_rsp+0x1a>
}
   2006c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20070:	2100      	movs	r1, #0
   20072:	300c      	adds	r0, #12
   20074:	f7ff bfe5 	b.w	20042 <atomic_set_bit>
}
   20078:	bd08      	pop	{r3, pc}

0002007a <read_appearance>:
{
   2007a:	b513      	push	{r0, r1, r4, lr}
   2007c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20080:	4610      	mov	r0, r2
	if (offset > value_len) {
   20082:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   20084:	f240 3241 	movw	r2, #833	; 0x341
   20088:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2008c:	d80d      	bhi.n	200aa <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2008e:	f1c1 0402 	rsb	r4, r1, #2
   20092:	429c      	cmp	r4, r3
   20094:	bfa8      	it	ge
   20096:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   20098:	f10d 0306 	add.w	r3, sp, #6
   2009c:	4622      	mov	r2, r4
   2009e:	4419      	add	r1, r3
   200a0:	f7fe fea7 	bl	1edf2 <memcpy>
}
   200a4:	4620      	mov	r0, r4
   200a6:	b002      	add	sp, #8
   200a8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   200aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   200ae:	e7f9      	b.n	200a4 <read_appearance+0x2a>

000200b0 <read_name>:
{
   200b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200b4:	4698      	mov	r8, r3
   200b6:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   200ba:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   200bc:	f7e8 fcc6 	bl	8a4c <bt_get_name>
   200c0:	4607      	mov	r7, r0
				 strlen(name));
   200c2:	f7fe fe64 	bl	1ed8e <strlen>
	if (offset > value_len) {
   200c6:	b283      	uxth	r3, r0
   200c8:	42b3      	cmp	r3, r6
   200ca:	d30c      	bcc.n	200e6 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   200cc:	1b9c      	subs	r4, r3, r6
   200ce:	4544      	cmp	r4, r8
   200d0:	bfa8      	it	ge
   200d2:	4644      	movge	r4, r8
   200d4:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   200d6:	4622      	mov	r2, r4
   200d8:	19b9      	adds	r1, r7, r6
   200da:	4628      	mov	r0, r5
   200dc:	f7fe fe89 	bl	1edf2 <memcpy>
}
   200e0:	4620      	mov	r0, r4
   200e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   200e6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   200ea:	e7f9      	b.n	200e0 <read_name+0x30>

000200ec <bt_gatt_attr_read_ccc>:
{
   200ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   200ee:	68c9      	ldr	r1, [r1, #12]
{
   200f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   200f4:	4615      	mov	r5, r2
   200f6:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   200f8:	f7ff ff89 	bl	2000e <find_ccc_cfg>
	if (cfg) {
   200fc:	b100      	cbz	r0, 20100 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   200fe:	8900      	ldrh	r0, [r0, #8]
   20100:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   20104:	2e02      	cmp	r6, #2
   20106:	d80e      	bhi.n	20126 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   20108:	f1c6 0402 	rsb	r4, r6, #2
   2010c:	42bc      	cmp	r4, r7
   2010e:	bfa8      	it	ge
   20110:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   20112:	f10d 0306 	add.w	r3, sp, #6
   20116:	4622      	mov	r2, r4
   20118:	1999      	adds	r1, r3, r6
   2011a:	4628      	mov	r0, r5
   2011c:	f7fe fe69 	bl	1edf2 <memcpy>
}
   20120:	4620      	mov	r0, r4
   20122:	b003      	add	sp, #12
   20124:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20126:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2012a:	e7f9      	b.n	20120 <bt_gatt_attr_read_ccc+0x34>

0002012c <cf_read>:
{
   2012c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2012e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   20130:	2300      	movs	r3, #0
{
   20132:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   20136:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2013a:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   2013c:	f7eb fe76 	bl	be2c <find_cf_cfg>
	if (cfg) {
   20140:	b128      	cbz	r0, 2014e <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   20142:	f100 0108 	add.w	r1, r0, #8
   20146:	2201      	movs	r2, #1
   20148:	a801      	add	r0, sp, #4
   2014a:	f7fe fe52 	bl	1edf2 <memcpy>
	if (offset > value_len) {
   2014e:	2e01      	cmp	r6, #1
   20150:	d80d      	bhi.n	2016e <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   20152:	f1c6 0401 	rsb	r4, r6, #1
   20156:	42bc      	cmp	r4, r7
   20158:	bfa8      	it	ge
   2015a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2015c:	ab01      	add	r3, sp, #4
   2015e:	4622      	mov	r2, r4
   20160:	1999      	adds	r1, r3, r6
   20162:	4628      	mov	r0, r5
   20164:	f7fe fe45 	bl	1edf2 <memcpy>
}
   20168:	4620      	mov	r0, r4
   2016a:	b003      	add	sp, #12
   2016c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2016e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   20172:	e7f9      	b.n	20168 <cf_read+0x3c>

00020174 <bt_gatt_attr_read_service>:
{
   20174:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   20176:	68c9      	ldr	r1, [r1, #12]
{
   20178:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   2017c:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2017e:	780b      	ldrb	r3, [r1, #0]
{
   20180:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   20182:	b993      	cbnz	r3, 201aa <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   20184:	884b      	ldrh	r3, [r1, #2]
   20186:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   2018a:	2d02      	cmp	r5, #2
   2018c:	d819      	bhi.n	201c2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2018e:	f1c5 0202 	rsb	r2, r5, #2
   20192:	4294      	cmp	r4, r2
   20194:	bfa8      	it	ge
   20196:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   20198:	f10d 0306 	add.w	r3, sp, #6
   2019c:	4622      	mov	r2, r4
   2019e:	1959      	adds	r1, r3, r5
   201a0:	f7fe fe27 	bl	1edf2 <memcpy>
}
   201a4:	4620      	mov	r0, r4
   201a6:	b003      	add	sp, #12
   201a8:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   201aa:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   201ac:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   201b0:	d807      	bhi.n	201c2 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   201b2:	f1c5 0210 	rsb	r2, r5, #16
   201b6:	4294      	cmp	r4, r2
   201b8:	bfa8      	it	ge
   201ba:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   201bc:	4622      	mov	r2, r4
   201be:	4429      	add	r1, r5
   201c0:	e7ee      	b.n	201a0 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   201c2:	f06f 0406 	mvn.w	r4, #6
   201c6:	e7ed      	b.n	201a4 <bt_gatt_attr_read_service+0x30>

000201c8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   201c8:	2a02      	cmp	r2, #2
{
   201ca:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   201cc:	d108      	bne.n	201e0 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   201ce:	2300      	movs	r3, #0
   201d0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   201d4:	461a      	mov	r2, r3
   201d6:	7a00      	ldrb	r0, [r0, #8]
   201d8:	f7eb fcf4 	bl	bbc4 <sc_save>
}
   201dc:	2002      	movs	r0, #2
   201de:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   201e0:	f7eb ffb0 	bl	c144 <sc_clear>
   201e4:	e7fa      	b.n	201dc <sc_ccc_cfg_write+0x14>

000201e6 <bt_gatt_attr_read>:
{
   201e6:	b538      	push	{r3, r4, r5, lr}
   201e8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   201ec:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   201f0:	42a9      	cmp	r1, r5
{
   201f2:	4610      	mov	r0, r2
	if (offset > value_len) {
   201f4:	d80b      	bhi.n	2020e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   201f6:	1a6d      	subs	r5, r5, r1
   201f8:	429d      	cmp	r5, r3
   201fa:	bfa8      	it	ge
   201fc:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   201fe:	9b05      	ldr	r3, [sp, #20]
   20200:	b2ad      	uxth	r5, r5
   20202:	462a      	mov	r2, r5
   20204:	4419      	add	r1, r3
   20206:	f7fe fdf4 	bl	1edf2 <memcpy>
}
   2020a:	4628      	mov	r0, r5
   2020c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2020e:	f06f 0506 	mvn.w	r5, #6
   20212:	e7fa      	b.n	2020a <bt_gatt_attr_read+0x24>

00020214 <bt_gatt_attr_read_chrc>:
{
   20214:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   20216:	68cf      	ldr	r7, [r1, #12]
{
   20218:	b087      	sub	sp, #28
   2021a:	4608      	mov	r0, r1
   2021c:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2021e:	79bb      	ldrb	r3, [r7, #6]
   20220:	f88d 3004 	strb.w	r3, [sp, #4]
{
   20224:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   20226:	f7ec f84f 	bl	c2c8 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2022a:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2022c:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20230:	780b      	ldrb	r3, [r1, #0]
{
   20232:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   20236:	b99b      	cbnz	r3, 20260 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   20238:	884b      	ldrh	r3, [r1, #2]
   2023a:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2023e:	2105      	movs	r1, #5
	if (offset > value_len) {
   20240:	42b1      	cmp	r1, r6
   20242:	d315      	bcc.n	20270 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   20244:	1b89      	subs	r1, r1, r6
   20246:	42a1      	cmp	r1, r4
   20248:	bfa8      	it	ge
   2024a:	4621      	movge	r1, r4
   2024c:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2024e:	ab01      	add	r3, sp, #4
   20250:	4622      	mov	r2, r4
   20252:	1999      	adds	r1, r3, r6
   20254:	4628      	mov	r0, r5
   20256:	f7fe fdcc 	bl	1edf2 <memcpy>
}
   2025a:	4620      	mov	r0, r4
   2025c:	b007      	add	sp, #28
   2025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   20260:	3101      	adds	r1, #1
   20262:	2210      	movs	r2, #16
   20264:	f10d 0007 	add.w	r0, sp, #7
   20268:	f7fe fdc3 	bl	1edf2 <memcpy>
		value_len += 16U;
   2026c:	2113      	movs	r1, #19
   2026e:	e7e7      	b.n	20240 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20270:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   20274:	e7f1      	b.n	2025a <bt_gatt_attr_read_chrc+0x46>

00020276 <bt_gatt_foreach_attr>:
{
   20276:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   20278:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2027c:	2300      	movs	r3, #0
   2027e:	9300      	str	r3, [sp, #0]
   20280:	461a      	mov	r2, r3
   20282:	f7ec f839 	bl	c2f8 <bt_gatt_foreach_attr_type>
}
   20286:	b005      	add	sp, #20
   20288:	f85d fb04 	ldr.w	pc, [sp], #4

0002028c <db_hash_process>:
	db_hash_gen(true);
   2028c:	2001      	movs	r0, #1
   2028e:	f7ec b893 	b.w	c3b8 <db_hash_gen>

00020292 <bt_gatt_attr_read_cep>:
{
   20292:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20294:	4610      	mov	r0, r2
   20296:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   2029a:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   2029c:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   2029e:	8812      	ldrh	r2, [r2, #0]
   202a0:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   202a4:	d80d      	bhi.n	202c2 <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   202a6:	f1c5 0402 	rsb	r4, r5, #2
   202aa:	429c      	cmp	r4, r3
   202ac:	bfa8      	it	ge
   202ae:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   202b0:	f10d 0306 	add.w	r3, sp, #6
   202b4:	4622      	mov	r2, r4
   202b6:	1959      	adds	r1, r3, r5
   202b8:	f7fe fd9b 	bl	1edf2 <memcpy>
}
   202bc:	4620      	mov	r0, r4
   202be:	b003      	add	sp, #12
   202c0:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   202c2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   202c6:	e7f9      	b.n	202bc <bt_gatt_attr_read_cep+0x2a>

000202c8 <bt_gatt_check_perm>:
{
   202c8:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   202ca:	07d4      	lsls	r4, r2, #31
{
   202cc:	4605      	mov	r5, r0
   202ce:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   202d0:	d504      	bpl.n	202dc <bt_gatt_check_perm+0x14>
   202d2:	f010 0f15 	tst.w	r0, #21
   202d6:	d01e      	beq.n	20316 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   202d8:	684b      	ldr	r3, [r1, #4]
   202da:	b1e3      	cbz	r3, 20316 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   202dc:	0793      	lsls	r3, r2, #30
   202de:	d504      	bpl.n	202ea <bt_gatt_check_perm+0x22>
   202e0:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   202e4:	d019      	beq.n	2031a <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   202e6:	688b      	ldr	r3, [r1, #8]
   202e8:	b1bb      	cbz	r3, 2031a <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   202ea:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   202ee:	f014 0f30 	tst.w	r4, #48	; 0x30
   202f2:	d103      	bne.n	202fc <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   202f4:	f014 000c 	ands.w	r0, r4, #12
   202f8:	d107      	bne.n	2030a <bt_gatt_check_perm+0x42>
}
   202fa:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   202fc:	4628      	mov	r0, r5
   202fe:	f7ff f8d6 	bl	1f4ae <bt_conn_get_security>
   20302:	2802      	cmp	r0, #2
   20304:	d8f6      	bhi.n	202f4 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   20306:	2005      	movs	r0, #5
   20308:	e7f7      	b.n	202fa <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   2030a:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2030c:	2b00      	cmp	r3, #0
   2030e:	bf14      	ite	ne
   20310:	2000      	movne	r0, #0
   20312:	200f      	moveq	r0, #15
   20314:	e7f1      	b.n	202fa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   20316:	2002      	movs	r0, #2
   20318:	e7ef      	b.n	202fa <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2031a:	2003      	movs	r0, #3
   2031c:	e7ed      	b.n	202fa <bt_gatt_check_perm+0x32>

0002031e <bt_gatt_change_aware>:
{
   2031e:	b570      	push	{r4, r5, r6, lr}
   20320:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   20322:	f7eb fd83 	bl	be2c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   20326:	b910      	cbnz	r0, 2032e <bt_gatt_change_aware+0x10>
		return true;
   20328:	2401      	movs	r4, #1
}
   2032a:	4620      	mov	r0, r4
   2032c:	bd70      	pop	{r4, r5, r6, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2032e:	7a03      	ldrb	r3, [r0, #8]
   20330:	07da      	lsls	r2, r3, #31
   20332:	d5f9      	bpl.n	20328 <bt_gatt_change_aware+0xa>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20334:	f3bf 8f5b 	dmb	ish
   20338:	68c5      	ldr	r5, [r0, #12]
   2033a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2033e:	f015 0501 	ands.w	r5, r5, #1
   20342:	f100 060c 	add.w	r6, r0, #12
   20346:	d1ef      	bne.n	20328 <bt_gatt_change_aware+0xa>
	if (!req) {
   20348:	2c00      	cmp	r4, #0
   2034a:	d0ee      	beq.n	2032a <bt_gatt_change_aware+0xc>
   2034c:	f3bf 8f5b 	dmb	ish
   20350:	68c3      	ldr	r3, [r0, #12]
   20352:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20356:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2035a:	079b      	lsls	r3, r3, #30
   2035c:	d509      	bpl.n	20372 <bt_gatt_change_aware+0x54>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2035e:	f06f 0102 	mvn.w	r1, #2
   20362:	4630      	mov	r0, r6
   20364:	f7ff fe15 	bl	1ff92 <atomic_and>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   20368:	4629      	mov	r1, r5
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2036a:	4630      	mov	r0, r6
   2036c:	f7ff fe69 	bl	20042 <atomic_set_bit>
	return false;
   20370:	e7db      	b.n	2032a <bt_gatt_change_aware+0xc>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   20372:	2101      	movs	r1, #1
   20374:	e7f9      	b.n	2036a <bt_gatt_change_aware+0x4c>

00020376 <sys_memcpy_swap>:
	psrc += length - 1;
   20376:	1e53      	subs	r3, r2, #1
   20378:	4419      	add	r1, r3
	for (; length > 0; length--) {
   2037a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   2037c:	f811 3901 	ldrb.w	r3, [r1], #-1
   20380:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   20384:	4290      	cmp	r0, r2
   20386:	d1f9      	bne.n	2037c <sys_memcpy_swap+0x6>
}
   20388:	4770      	bx	lr

0002038a <sys_mem_swap>:
{
   2038a:	b510      	push	{r4, lr}
   2038c:	1843      	adds	r3, r0, r1
   2038e:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   20392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   20396:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   20398:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   2039c:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   2039e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   203a0:	d1f7      	bne.n	20392 <sys_mem_swap+0x8>
	}
}
   203a2:	bd10      	pop	{r4, pc}

000203a4 <smp_pairing_rsp>:
}
   203a4:	2007      	movs	r0, #7
   203a6:	4770      	bx	lr

000203a8 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   203a8:	2301      	movs	r3, #1
   203aa:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   203ac:	f3bf 8f5b 	dmb	ish
   203b0:	e850 2f00 	ldrex	r2, [r0]
   203b4:	431a      	orrs	r2, r3
   203b6:	e840 2100 	strex	r1, r2, [r0]
   203ba:	2900      	cmp	r1, #0
   203bc:	d1f8      	bne.n	203b0 <atomic_set_bit+0x8>
   203be:	f3bf 8f5b 	dmb	ish
}
   203c2:	4770      	bx	lr

000203c4 <bt_smp_aes_cmac>:
{
   203c4:	b570      	push	{r4, r5, r6, lr}
   203c6:	b0c2      	sub	sp, #264	; 0x108
   203c8:	460d      	mov	r5, r1
   203ca:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   203cc:	4601      	mov	r1, r0
   203ce:	aa16      	add	r2, sp, #88	; 0x58
   203d0:	4668      	mov	r0, sp
{
   203d2:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   203d4:	f7fe fb6d 	bl	1eab2 <tc_cmac_setup>
   203d8:	b150      	cbz	r0, 203f0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   203da:	4632      	mov	r2, r6
   203dc:	4629      	mov	r1, r5
   203de:	4668      	mov	r0, sp
   203e0:	f7fe fb92 	bl	1eb08 <tc_cmac_update>
   203e4:	b120      	cbz	r0, 203f0 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   203e6:	4669      	mov	r1, sp
   203e8:	4620      	mov	r0, r4
   203ea:	f7fe fbf9 	bl	1ebe0 <tc_cmac_final>
   203ee:	b918      	cbnz	r0, 203f8 <bt_smp_aes_cmac+0x34>
		return -EIO;
   203f0:	f06f 0004 	mvn.w	r0, #4
}
   203f4:	b042      	add	sp, #264	; 0x108
   203f6:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   203f8:	2000      	movs	r0, #0
   203fa:	e7fb      	b.n	203f4 <bt_smp_aes_cmac+0x30>

000203fc <smp_f4>:
{
   203fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   203fe:	b097      	sub	sp, #92	; 0x5c
   20400:	4614      	mov	r4, r2
   20402:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   20404:	2220      	movs	r2, #32
   20406:	4601      	mov	r1, r0
   20408:	a805      	add	r0, sp, #20
{
   2040a:	461d      	mov	r5, r3
   2040c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   2040e:	f7ff ffb2 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   20412:	2220      	movs	r2, #32
   20414:	4631      	mov	r1, r6
   20416:	a80d      	add	r0, sp, #52	; 0x34
   20418:	f7ff ffad 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   2041c:	4621      	mov	r1, r4
   2041e:	2210      	movs	r2, #16
   20420:	a801      	add	r0, sp, #4
	m[64] = z;
   20422:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   20426:	f7ff ffa6 	bl	20376 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   2042a:	463b      	mov	r3, r7
   2042c:	2241      	movs	r2, #65	; 0x41
   2042e:	a905      	add	r1, sp, #20
   20430:	a801      	add	r0, sp, #4
   20432:	f7ff ffc7 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
   20436:	4604      	mov	r4, r0
   20438:	b918      	cbnz	r0, 20442 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   2043a:	2110      	movs	r1, #16
   2043c:	4638      	mov	r0, r7
   2043e:	f7ff ffa4 	bl	2038a <sys_mem_swap>
}
   20442:	4620      	mov	r0, r4
   20444:	b017      	add	sp, #92	; 0x5c
   20446:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020448 <smp_f6>:
{
   20448:	b5f0      	push	{r4, r5, r6, r7, lr}
   2044a:	b097      	sub	sp, #92	; 0x5c
   2044c:	4605      	mov	r5, r0
   2044e:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   20450:	a805      	add	r0, sp, #20
   20452:	2210      	movs	r2, #16
{
   20454:	461c      	mov	r4, r3
   20456:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   20458:	f7ff ff8d 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   2045c:	2210      	movs	r2, #16
   2045e:	4631      	mov	r1, r6
   20460:	a809      	add	r0, sp, #36	; 0x24
   20462:	f7ff ff88 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   20466:	4621      	mov	r1, r4
   20468:	2210      	movs	r2, #16
   2046a:	a80d      	add	r0, sp, #52	; 0x34
   2046c:	f7ff ff83 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   20470:	991c      	ldr	r1, [sp, #112]	; 0x70
   20472:	2203      	movs	r2, #3
   20474:	a811      	add	r0, sp, #68	; 0x44
   20476:	f7ff ff7e 	bl	20376 <sys_memcpy_swap>
	m[51] = a1->type;
   2047a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   2047c:	f814 3b01 	ldrb.w	r3, [r4], #1
   20480:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   20484:	4621      	mov	r1, r4
   20486:	2206      	movs	r2, #6
   20488:	a812      	add	r0, sp, #72	; 0x48
   2048a:	f7fe fcb2 	bl	1edf2 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   2048e:	4621      	mov	r1, r4
   20490:	2206      	movs	r2, #6
   20492:	a812      	add	r0, sp, #72	; 0x48
   20494:	f7ff ff6f 	bl	20376 <sys_memcpy_swap>
	m[58] = a2->type;
   20498:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   2049a:	f814 3b01 	ldrb.w	r3, [r4], #1
   2049e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   204a2:	4621      	mov	r1, r4
   204a4:	2206      	movs	r2, #6
   204a6:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   204aa:	f7fe fca2 	bl	1edf2 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   204ae:	4621      	mov	r1, r4
   204b0:	2206      	movs	r2, #6
   204b2:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   204b6:	f7ff ff5e 	bl	20376 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   204ba:	2210      	movs	r2, #16
   204bc:	4629      	mov	r1, r5
   204be:	a801      	add	r0, sp, #4
   204c0:	f7ff ff59 	bl	20376 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   204c4:	463b      	mov	r3, r7
   204c6:	2241      	movs	r2, #65	; 0x41
   204c8:	a905      	add	r1, sp, #20
   204ca:	a801      	add	r0, sp, #4
   204cc:	f7ff ff7a 	bl	203c4 <bt_smp_aes_cmac>
	if (err) {
   204d0:	4604      	mov	r4, r0
   204d2:	b918      	cbnz	r0, 204dc <smp_f6+0x94>
	sys_mem_swap(check, 16);
   204d4:	2110      	movs	r1, #16
   204d6:	4638      	mov	r0, r7
   204d8:	f7ff ff57 	bl	2038a <sys_mem_swap>
}
   204dc:	4620      	mov	r0, r4
   204de:	b017      	add	sp, #92	; 0x5c
   204e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000204e2 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   204e2:	2301      	movs	r3, #1
   204e4:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   204e6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   204e8:	f3bf 8f5b 	dmb	ish
   204ec:	e850 2f00 	ldrex	r2, [r0]
   204f0:	401a      	ands	r2, r3
   204f2:	e840 2100 	strex	r1, r2, [r0]
   204f6:	2900      	cmp	r1, #0
   204f8:	d1f8      	bne.n	204ec <atomic_clear_bit+0xa>
   204fa:	f3bf 8f5b 	dmb	ish
}
   204fe:	4770      	bx	lr

00020500 <bt_smp_disconnected>:
{
   20500:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   20502:	6803      	ldr	r3, [r0, #0]
   20504:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   20508:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   2050a:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   2050e:	f000 ff9b 	bl	21448 <k_delayed_work_cancel>
	if (keys) {
   20512:	b13d      	cbz	r5, 20524 <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   20514:	89eb      	ldrh	r3, [r5, #14]
   20516:	b113      	cbz	r3, 2051e <bt_smp_disconnected+0x1e>
   20518:	7b6b      	ldrb	r3, [r5, #13]
   2051a:	079b      	lsls	r3, r3, #30
   2051c:	d502      	bpl.n	20524 <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   2051e:	4628      	mov	r0, r5
   20520:	f7ee f974 	bl	e80c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   20524:	4620      	mov	r0, r4
   20526:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   2052a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   2052e:	2100      	movs	r1, #0
   20530:	f7fe bc8a 	b.w	1ee48 <memset>

00020534 <smp_security_request>:
   20534:	2007      	movs	r0, #7
   20536:	4770      	bx	lr

00020538 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   20538:	f3bf 8f5b 	dmb	ish
   2053c:	6800      	ldr	r0, [r0, #0]
   2053e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   20542:	4108      	asrs	r0, r1
}
   20544:	f000 0001 	and.w	r0, r0, #1
   20548:	4770      	bx	lr

0002054a <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   2054a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   2054c:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   20550:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   20552:	4628      	mov	r0, r5
   20554:	2104      	movs	r1, #4
   20556:	f7ff ffef 	bl	20538 <atomic_test_bit>
   2055a:	b168      	cbz	r0, 20578 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   2055c:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   2055e:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   20560:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   20562:	4608      	mov	r0, r1
   20564:	f7ff f865 	bl	1f632 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   20568:	4604      	mov	r4, r0
   2056a:	b940      	cbnz	r0, 2057e <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   2056c:	2104      	movs	r1, #4
   2056e:	4628      	mov	r0, r5
   20570:	f7ff ff1a 	bl	203a8 <atomic_set_bit>
}
   20574:	4620      	mov	r0, r4
   20576:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   20578:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2057c:	e7ef      	b.n	2055e <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   2057e:	2101      	movs	r1, #1
   20580:	3008      	adds	r0, #8
   20582:	f000 faf1 	bl	20b68 <net_buf_simple_add>
	hdr->code = op;
   20586:	7006      	strb	r6, [r0, #0]
	return buf;
   20588:	e7f4      	b.n	20574 <smp_create_pdu.isra.0+0x2a>

0002058a <smp_send_pairing_random>:
{
   2058a:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   2058c:	2104      	movs	r1, #4
{
   2058e:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   20590:	f7ff ffdb 	bl	2054a <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   20594:	4604      	mov	r4, r0
   20596:	b178      	cbz	r0, 205b8 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   20598:	2110      	movs	r1, #16
   2059a:	3008      	adds	r0, #8
   2059c:	f000 fae4 	bl	20b68 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   205a0:	2210      	movs	r2, #16
   205a2:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   205a6:	f7fe fc24 	bl	1edf2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   205aa:	4628      	mov	r0, r5
   205ac:	2200      	movs	r2, #0
   205ae:	4621      	mov	r1, r4
   205b0:	f7ec fc3e 	bl	ce30 <smp_send.isra.0>
	return 0;
   205b4:	2000      	movs	r0, #0
}
   205b6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   205b8:	2008      	movs	r0, #8
   205ba:	e7fc      	b.n	205b6 <smp_send_pairing_random+0x2c>

000205bc <send_pairing_rsp>:
{
   205bc:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   205be:	2102      	movs	r1, #2
{
   205c0:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   205c2:	f7ff ffc2 	bl	2054a <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   205c6:	4604      	mov	r4, r0
   205c8:	b178      	cbz	r0, 205ea <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   205ca:	2106      	movs	r1, #6
   205cc:	3008      	adds	r0, #8
   205ce:	f000 facb 	bl	20b68 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   205d2:	2206      	movs	r2, #6
   205d4:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   205d8:	f7fe fc0b 	bl	1edf2 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   205dc:	4628      	mov	r0, r5
   205de:	2200      	movs	r2, #0
   205e0:	4621      	mov	r1, r4
   205e2:	f7ec fc25 	bl	ce30 <smp_send.isra.0>
	return 0;
   205e6:	2000      	movs	r0, #0
}
   205e8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   205ea:	2008      	movs	r0, #8
   205ec:	e7fc      	b.n	205e8 <send_pairing_rsp+0x2c>

000205ee <smp_dhkey_check>:
{
   205ee:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   205f0:	6803      	ldr	r3, [r0, #0]
   205f2:	78db      	ldrb	r3, [r3, #3]
   205f4:	2b01      	cmp	r3, #1
{
   205f6:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   205f8:	d115      	bne.n	20626 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   205fa:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   205fc:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   20600:	210f      	movs	r1, #15
   20602:	4628      	mov	r0, r5
   20604:	f7ff ff6d 	bl	204e2 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   20608:	4631      	mov	r1, r6
   2060a:	2210      	movs	r2, #16
   2060c:	f204 106f 	addw	r0, r4, #367	; 0x16f
   20610:	f7fe fbef 	bl	1edf2 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   20614:	2107      	movs	r1, #7
   20616:	4628      	mov	r0, r5
   20618:	f7ff ff8e 	bl	20538 <atomic_test_bit>
   2061c:	b128      	cbz	r0, 2062a <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2061e:	2108      	movs	r1, #8
   20620:	4628      	mov	r0, r5
   20622:	f7ff fec1 	bl	203a8 <atomic_set_bit>
}
   20626:	2000      	movs	r0, #0
   20628:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2062a:	2109      	movs	r1, #9
   2062c:	4628      	mov	r0, r5
   2062e:	f7ff ff83 	bl	20538 <atomic_test_bit>
   20632:	2800      	cmp	r0, #0
   20634:	d1f3      	bne.n	2061e <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   20636:	4620      	mov	r0, r4
}
   20638:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   2063c:	f7ec bcb4 	b.w	cfa8 <compute_and_check_and_send_slave_dhcheck>

00020640 <atomic_test_and_clear_bit>:
{
   20640:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   20642:	2301      	movs	r3, #1
   20644:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   20648:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2064a:	f3bf 8f5b 	dmb	ish
   2064e:	e850 3f00 	ldrex	r3, [r0]
   20652:	ea03 0c02 	and.w	ip, r3, r2
   20656:	e840 ce00 	strex	lr, ip, [r0]
   2065a:	f1be 0f00 	cmp.w	lr, #0
   2065e:	d1f6      	bne.n	2064e <atomic_test_and_clear_bit+0xe>
   20660:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   20664:	420b      	tst	r3, r1
}
   20666:	bf14      	ite	ne
   20668:	2001      	movne	r0, #1
   2066a:	2000      	moveq	r0, #0
   2066c:	f85d fb04 	ldr.w	pc, [sp], #4

00020670 <smp_reset>:
{
   20670:	b538      	push	{r3, r4, r5, lr}
   20672:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   20674:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   20676:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   2067a:	f000 fee5 	bl	21448 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   2067e:	2300      	movs	r3, #0
   20680:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   20684:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   20688:	f3bf 8f5b 	dmb	ish
   2068c:	e850 2f00 	ldrex	r2, [r0]
   20690:	e840 3100 	strex	r1, r3, [r0]
   20694:	2900      	cmp	r1, #0
   20696:	d1f9      	bne.n	2068c <smp_reset+0x1c>
   20698:	f3bf 8f5b 	dmb	ish
   2069c:	f3bf 8f5b 	dmb	ish
   206a0:	34bc      	adds	r4, #188	; 0xbc
   206a2:	e854 2f00 	ldrex	r2, [r4]
   206a6:	e844 3100 	strex	r1, r3, [r4]
   206aa:	2900      	cmp	r1, #0
   206ac:	d1f9      	bne.n	206a2 <smp_reset+0x32>
   206ae:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   206b2:	7a6b      	ldrb	r3, [r5, #9]
   206b4:	7aaa      	ldrb	r2, [r5, #10]
   206b6:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   206b8:	bf18      	it	ne
   206ba:	72ab      	strbne	r3, [r5, #10]
}
   206bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   206c0:	2101      	movs	r1, #1
   206c2:	f7ff be71 	b.w	203a8 <atomic_set_bit>

000206c6 <smp_error>:
{
   206c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   206c8:	4606      	mov	r6, r0
   206ca:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   206cc:	f7ec ffd0 	bl	d670 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   206d0:	2105      	movs	r1, #5
   206d2:	4630      	mov	r0, r6
   206d4:	f7ff ff39 	bl	2054a <smp_create_pdu.isra.0>
	if (!buf) {
   206d8:	4605      	mov	r5, r0
   206da:	b178      	cbz	r0, 206fc <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   206dc:	2101      	movs	r1, #1
   206de:	3008      	adds	r0, #8
   206e0:	f000 fa42 	bl	20b68 <net_buf_simple_add>
	rsp->reason = reason;
   206e4:	7004      	strb	r4, [r0, #0]
   206e6:	2400      	movs	r4, #0
   206e8:	6830      	ldr	r0, [r6, #0]
   206ea:	9400      	str	r4, [sp, #0]
   206ec:	4623      	mov	r3, r4
   206ee:	462a      	mov	r2, r5
   206f0:	2106      	movs	r1, #6
   206f2:	f7fe ffa1 	bl	1f638 <bt_l2cap_send_cb>
	return 0;
   206f6:	4620      	mov	r0, r4
}
   206f8:	b002      	add	sp, #8
   206fa:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   206fc:	f06f 0036 	mvn.w	r0, #54	; 0x36
   20700:	e7fa      	b.n	206f8 <smp_error+0x32>

00020702 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   20702:	b510      	push	{r4, lr}
   20704:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   20706:	2106      	movs	r1, #6
   20708:	f7fe ffaf 	bl	1f66a <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   2070c:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   20710:	ea22 0104 	bic.w	r1, r2, r4
   20714:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   20718:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   2071c:	b919      	cbnz	r1, 20726 <smp_check_complete.part.0+0x24>
}
   2071e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   20722:	f7ec bfa5 	b.w	d670 <smp_pairing_complete>
}
   20726:	bd10      	pop	{r4, pc}

00020728 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   20728:	7883      	ldrb	r3, [r0, #2]
   2072a:	2b01      	cmp	r3, #1
   2072c:	d102      	bne.n	20734 <smp_sign_info_sent+0xc>
   2072e:	2104      	movs	r1, #4
   20730:	f7ff bfe7 	b.w	20702 <smp_check_complete.part.0>
}
   20734:	4770      	bx	lr

00020736 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   20736:	7881      	ldrb	r1, [r0, #2]
   20738:	2901      	cmp	r1, #1
   2073a:	d101      	bne.n	20740 <smp_ident_sent+0xa>
   2073c:	f7ff bfe1 	b.w	20702 <smp_check_complete.part.0>
}
   20740:	4770      	bx	lr

00020742 <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   20742:	7883      	ldrb	r3, [r0, #2]
   20744:	2b01      	cmp	r3, #1
   20746:	d102      	bne.n	2074e <smp_id_sent+0xc>
   20748:	2102      	movs	r1, #2
   2074a:	f7ff bfda 	b.w	20702 <smp_check_complete.part.0>
}
   2074e:	4770      	bx	lr

00020750 <smp_c1>:
{
   20750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20754:	b089      	sub	sp, #36	; 0x24
   20756:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2075a:	4699      	mov	r9, r3
	p1[0] = ia->type;
   2075c:	783b      	ldrb	r3, [r7, #0]
{
   2075e:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   20760:	f88d 3000 	strb.w	r3, [sp]
{
   20764:	460c      	mov	r4, r1
	p1[1] = ra->type;
   20766:	f898 3000 	ldrb.w	r3, [r8]
   2076a:	f88d 3001 	strb.w	r3, [sp, #1]
{
   2076e:	4611      	mov	r1, r2
   20770:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   20772:	2207      	movs	r2, #7
   20774:	f10d 0002 	add.w	r0, sp, #2
   20778:	f7fe fb3b 	bl	1edf2 <memcpy>
	memcpy(p1 + 9, pres, 7);
   2077c:	2207      	movs	r2, #7
   2077e:	4649      	mov	r1, r9
   20780:	f10d 0009 	add.w	r0, sp, #9
   20784:	f7fe fb35 	bl	1edf2 <memcpy>
	while (len--) {
   20788:	f104 0010 	add.w	r0, r4, #16
   2078c:	4629      	mov	r1, r5
   2078e:	466a      	mov	r2, sp
   20790:	4284      	cmp	r4, r0
   20792:	d127      	bne.n	207e4 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   20794:	462a      	mov	r2, r5
   20796:	4629      	mov	r1, r5
   20798:	4630      	mov	r0, r6
   2079a:	f7f1 f815 	bl	117c8 <bt_encrypt_le>
	if (err) {
   2079e:	4604      	mov	r4, r0
   207a0:	b9e0      	cbnz	r0, 207dc <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   207a2:	2206      	movs	r2, #6
   207a4:	f108 0101 	add.w	r1, r8, #1
   207a8:	a804      	add	r0, sp, #16
   207aa:	f7fe fb22 	bl	1edf2 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   207ae:	2206      	movs	r2, #6
   207b0:	1c79      	adds	r1, r7, #1
   207b2:	f10d 0016 	add.w	r0, sp, #22
   207b6:	f7fe fb1c 	bl	1edf2 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   207ba:	2204      	movs	r2, #4
   207bc:	4621      	mov	r1, r4
   207be:	a807      	add	r0, sp, #28
   207c0:	f7fe fb42 	bl	1ee48 <memset>
	while (len--) {
   207c4:	f105 0010 	add.w	r0, r5, #16
   207c8:	462a      	mov	r2, r5
   207ca:	ab04      	add	r3, sp, #16
   207cc:	4282      	cmp	r2, r0
   207ce:	d112      	bne.n	207f6 <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   207d0:	462a      	mov	r2, r5
   207d2:	4629      	mov	r1, r5
   207d4:	4630      	mov	r0, r6
   207d6:	f7f0 fff7 	bl	117c8 <bt_encrypt_le>
   207da:	4604      	mov	r4, r0
}
   207dc:	4620      	mov	r0, r4
   207de:	b009      	add	sp, #36	; 0x24
   207e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   207e4:	f814 3b01 	ldrb.w	r3, [r4], #1
   207e8:	f812 cb01 	ldrb.w	ip, [r2], #1
   207ec:	ea83 030c 	eor.w	r3, r3, ip
   207f0:	f801 3b01 	strb.w	r3, [r1], #1
   207f4:	e7cc      	b.n	20790 <smp_c1+0x40>
   207f6:	f812 1b01 	ldrb.w	r1, [r2], #1
   207fa:	f813 4b01 	ldrb.w	r4, [r3], #1
   207fe:	4061      	eors	r1, r4
   20800:	f802 1c01 	strb.w	r1, [r2, #-1]
   20804:	e7e2      	b.n	207cc <smp_c1+0x7c>

00020806 <legacy_pairing_confirm>:
{
   20806:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20808:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   2080c:	b085      	sub	sp, #20
   2080e:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   20810:	2109      	movs	r1, #9
   20812:	4638      	mov	r0, r7
   20814:	f7ff fe90 	bl	20538 <atomic_test_bit>
   20818:	bb90      	cbnz	r0, 20880 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   2081a:	2104      	movs	r1, #4
   2081c:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   20820:	f7ff fdc2 	bl	203a8 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   20824:	2103      	movs	r1, #3
   20826:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   20828:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   2082a:	f7ff fe8e 	bl	2054a <smp_create_pdu.isra.0>
	if (!buf) {
   2082e:	4606      	mov	r6, r0
   20830:	b1c0      	cbz	r0, 20864 <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   20832:	2110      	movs	r1, #16
   20834:	3008      	adds	r0, #8
   20836:	f000 f997 	bl	20b68 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   2083a:	f104 0396 	add.w	r3, r4, #150	; 0x96
   2083e:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   20840:	9002      	str	r0, [sp, #8]
   20842:	9301      	str	r3, [sp, #4]
   20844:	9400      	str	r4, [sp, #0]
   20846:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   2084a:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   2084e:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   20852:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   20856:	f7ff ff7b 	bl	20750 <smp_c1>
   2085a:	4604      	mov	r4, r0
   2085c:	b120      	cbz	r0, 20868 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   2085e:	4630      	mov	r0, r6
   20860:	f7f9 fc46 	bl	1a0f0 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   20864:	2008      	movs	r0, #8
   20866:	e009      	b.n	2087c <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   20868:	4602      	mov	r2, r0
   2086a:	4631      	mov	r1, r6
   2086c:	4628      	mov	r0, r5
   2086e:	f7ec fadf 	bl	ce30 <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   20872:	4621      	mov	r1, r4
   20874:	4638      	mov	r0, r7
   20876:	f7ff fe34 	bl	204e2 <atomic_clear_bit>
	return 0;
   2087a:	2000      	movs	r0, #0
}
   2087c:	b005      	add	sp, #20
   2087e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   20880:	2100      	movs	r1, #0
   20882:	4638      	mov	r0, r7
   20884:	f7ff fd90 	bl	203a8 <atomic_set_bit>
   20888:	e7f7      	b.n	2087a <legacy_pairing_confirm+0x74>

0002088a <smp_pairing_confirm>:
{
   2088a:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   2088c:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   2088e:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   20892:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   20894:	210a      	movs	r1, #10
   20896:	4628      	mov	r0, r5
   20898:	f7ff fe23 	bl	204e2 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   2089c:	4631      	mov	r1, r6
   2089e:	2210      	movs	r2, #16
   208a0:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   208a4:	f7fe faa5 	bl	1edf2 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   208a8:	2105      	movs	r1, #5
   208aa:	4628      	mov	r0, r5
   208ac:	f7ff fe44 	bl	20538 <atomic_test_bit>
   208b0:	b920      	cbnz	r0, 208bc <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   208b2:	4620      	mov	r0, r4
}
   208b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   208b8:	f7ff bfa5 	b.w	20806 <legacy_pairing_confirm>
	switch (smp->method) {
   208bc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   208c0:	2b01      	cmp	r3, #1
   208c2:	d00b      	beq.n	208dc <smp_pairing_confirm+0x52>
   208c4:	2b02      	cmp	r3, #2
   208c6:	d115      	bne.n	208f4 <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   208c8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   208cc:	2104      	movs	r1, #4
   208ce:	f7ff fd6b 	bl	203a8 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   208d2:	4620      	mov	r0, r4
}
   208d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   208d8:	f7ec bac2 	b.w	ce60 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   208dc:	2109      	movs	r1, #9
   208de:	4628      	mov	r0, r5
   208e0:	f7ff fe2a 	bl	20538 <atomic_test_bit>
   208e4:	2800      	cmp	r0, #0
   208e6:	d0ef      	beq.n	208c8 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   208e8:	4628      	mov	r0, r5
   208ea:	2100      	movs	r1, #0
   208ec:	f7ff fd5c 	bl	203a8 <atomic_set_bit>
			return 0;
   208f0:	2000      	movs	r0, #0
}
   208f2:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   208f4:	2008      	movs	r0, #8
   208f6:	e7fc      	b.n	208f2 <smp_pairing_confirm+0x68>

000208f8 <bt_smp_request_ltk>:
{
   208f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   208fc:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   208fe:	e9cd 2300 	strd	r2, r3, [sp]
   20902:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
   20904:	f7ec fa3c 	bl	cd80 <smp_chan_get>
	if (!smp) {
   20908:	4604      	mov	r4, r0
   2090a:	2800      	cmp	r0, #0
   2090c:	f000 809c 	beq.w	20a48 <bt_smp_request_ltk+0x150>
	if (ediv == 0U && rand == 0U &&
   20910:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   20914:	f1b9 0f00 	cmp.w	r9, #0
   20918:	d12d      	bne.n	20976 <bt_smp_request_ltk+0x7e>
   2091a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2091e:	4313      	orrs	r3, r2
   20920:	d129      	bne.n	20976 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   20922:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   20926:	2103      	movs	r1, #3
   20928:	4640      	mov	r0, r8
   2092a:	f7ff fe05 	bl	20538 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2092e:	b310      	cbz	r0, 20976 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   20930:	2101      	movs	r1, #1
   20932:	4640      	mov	r0, r8
   20934:	f7ff fe00 	bl	20538 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   20938:	4606      	mov	r6, r0
   2093a:	b1e0      	cbz	r0, 20976 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   2093c:	f894 50cc 	ldrb.w	r5, [r4, #204]	; 0xcc
   20940:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
   20944:	429d      	cmp	r5, r3
   20946:	bf28      	it	cs
   20948:	461d      	movcs	r5, r3
		memcpy(ltk, smp->tk, enc_size);
   2094a:	462a      	mov	r2, r5
   2094c:	f104 01ff 	add.w	r1, r4, #255	; 0xff
   20950:	4638      	mov	r0, r7
   20952:	f7fe fa4e 	bl	1edf2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20956:	2d0f      	cmp	r5, #15
   20958:	d805      	bhi.n	20966 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   2095a:	f1c5 0210 	rsb	r2, r5, #16
   2095e:	4649      	mov	r1, r9
   20960:	1978      	adds	r0, r7, r5
   20962:	f7fe fa71 	bl	1ee48 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20966:	2101      	movs	r1, #1
   20968:	4640      	mov	r0, r8
   2096a:	f7ff fd1d 	bl	203a8 <atomic_set_bit>
}
   2096e:	4630      	mov	r0, r6
   20970:	b003      	add	sp, #12
   20972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   20976:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2097a:	b983      	cbnz	r3, 2099e <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   2097c:	f105 0688 	add.w	r6, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   20980:	7a29      	ldrb	r1, [r5, #8]
   20982:	4632      	mov	r2, r6
   20984:	2020      	movs	r0, #32
   20986:	f7ed fee1 	bl	e74c <bt_keys_find>
   2098a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
   2098e:	b930      	cbnz	r0, 2099e <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   20990:	7a29      	ldrb	r1, [r5, #8]
   20992:	4632      	mov	r2, r6
   20994:	2001      	movs	r0, #1
   20996:	f7ed fed9 	bl	e74c <bt_keys_find>
   2099a:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   2099e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   209a2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   209a6:	b9ce      	cbnz	r6, 209dc <bt_smp_request_ltk+0xe4>
   209a8:	e9dd 2300 	ldrd	r2, r3, [sp]
   209ac:	4313      	orrs	r3, r2
   209ae:	d115      	bne.n	209dc <bt_smp_request_ltk+0xe4>
   209b0:	2800      	cmp	r0, #0
   209b2:	d03c      	beq.n	20a2e <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   209b4:	89c3      	ldrh	r3, [r0, #14]
   209b6:	069a      	lsls	r2, r3, #26
   209b8:	d511      	bpl.n	209de <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   209ba:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   209bc:	f100 011a 	add.w	r1, r0, #26
   209c0:	4622      	mov	r2, r4
   209c2:	4638      	mov	r0, r7
   209c4:	f7fe fa15 	bl	1edf2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   209c8:	2c0f      	cmp	r4, #15
   209ca:	d805      	bhi.n	209d8 <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   209cc:	f1c4 0210 	rsb	r2, r4, #16
   209d0:	4631      	mov	r1, r6
   209d2:	1938      	adds	r0, r7, r4
   209d4:	f7fe fa38 	bl	1ee48 <memset>
		return true;
   209d8:	2601      	movs	r6, #1
   209da:	e7c8      	b.n	2096e <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   209dc:	b338      	cbz	r0, 20a2e <bt_smp_request_ltk+0x136>
   209de:	89c3      	ldrh	r3, [r0, #14]
   209e0:	07db      	lsls	r3, r3, #31
   209e2:	d524      	bpl.n	20a2e <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   209e4:	2208      	movs	r2, #8
   209e6:	4669      	mov	r1, sp
   209e8:	3068      	adds	r0, #104	; 0x68
   209ea:	f7fe f9f2 	bl	1edd2 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   209ee:	b9f0      	cbnz	r0, 20a2e <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   209f0:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   209f4:	2202      	movs	r2, #2
   209f6:	a90a      	add	r1, sp, #40	; 0x28
   209f8:	3070      	adds	r0, #112	; 0x70
   209fa:	f7fe f9ea 	bl	1edd2 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   209fe:	4606      	mov	r6, r0
   20a00:	b9a8      	cbnz	r0, 20a2e <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   20a02:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
   20a06:	7b0d      	ldrb	r5, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   20a08:	4638      	mov	r0, r7
   20a0a:	462a      	mov	r2, r5
   20a0c:	3172      	adds	r1, #114	; 0x72
   20a0e:	f7fe f9f0 	bl	1edf2 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   20a12:	2d0f      	cmp	r5, #15
   20a14:	d805      	bhi.n	20a22 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   20a16:	f1c5 0210 	rsb	r2, r5, #16
   20a1a:	4631      	mov	r1, r6
   20a1c:	1978      	adds	r0, r7, r5
   20a1e:	f7fe fa13 	bl	1ee48 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   20a22:	2101      	movs	r1, #1
   20a24:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   20a28:	f7ff fcbe 	bl	203a8 <atomic_set_bit>
		return true;
   20a2c:	e7d4      	b.n	209d8 <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   20a2e:	210e      	movs	r1, #14
   20a30:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   20a34:	f7ff fd80 	bl	20538 <atomic_test_bit>
   20a38:	b118      	cbz	r0, 20a42 <bt_smp_request_ltk+0x14a>
		bt_conn_security_changed(smp->chan.chan.conn,
   20a3a:	6820      	ldr	r0, [r4, #0]
   20a3c:	2102      	movs	r1, #2
   20a3e:	f7e8 fe97 	bl	9770 <bt_conn_security_changed>
	smp_reset(smp);
   20a42:	4620      	mov	r0, r4
   20a44:	f7ff fe14 	bl	20670 <smp_reset>
	return false;
   20a48:	2600      	movs	r6, #0
   20a4a:	e790      	b.n	2096e <bt_smp_request_ltk+0x76>

00020a4c <bt_smp_irk_get>:
{
   20a4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   20a4e:	2500      	movs	r5, #0
{
   20a50:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   20a52:	2210      	movs	r2, #16
   20a54:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   20a56:	e9cd 5500 	strd	r5, r5, [sp]
   20a5a:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   20a5e:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   20a60:	f7fe f9b7 	bl	1edd2 <memcmp>
   20a64:	b180      	cbz	r0, 20a88 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   20a66:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   20a68:	220c      	movs	r2, #12
   20a6a:	4629      	mov	r1, r5
   20a6c:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   20a6e:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   20a70:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   20a72:	70e5      	strb	r5, [r4, #3]
   20a74:	1d20      	adds	r0, r4, #4
   20a76:	f7fe f9e7 	bl	1ee48 <memset>
	err = bt_encrypt_le(key, res, res);
   20a7a:	4622      	mov	r2, r4
   20a7c:	4621      	mov	r1, r4
   20a7e:	4630      	mov	r0, r6
   20a80:	f7f0 fea2 	bl	117c8 <bt_encrypt_le>
}
   20a84:	b004      	add	sp, #16
   20a86:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20a88:	f06f 0015 	mvn.w	r0, #21
   20a8c:	e7fa      	b.n	20a84 <bt_smp_irk_get+0x38>

00020a8e <id_add>:
	bt_id_add(keys);
   20a8e:	f7e7 bbb3 	b.w	81f8 <bt_id_add>

00020a92 <bt_keys_get_type>:
{
   20a92:	b570      	push	{r4, r5, r6, lr}
   20a94:	4604      	mov	r4, r0
   20a96:	460d      	mov	r5, r1
   20a98:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   20a9a:	f7ed fe57 	bl	e74c <bt_keys_find>
	if (keys) {
   20a9e:	b938      	cbnz	r0, 20ab0 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   20aa0:	4631      	mov	r1, r6
   20aa2:	4628      	mov	r0, r5
   20aa4:	f7ed fdde 	bl	e664 <bt_keys_get_addr>
	if (!keys) {
   20aa8:	b110      	cbz	r0, 20ab0 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   20aaa:	89c3      	ldrh	r3, [r0, #14]
   20aac:	431c      	orrs	r4, r3
   20aae:	81c4      	strh	r4, [r0, #14]
}
   20ab0:	bd70      	pop	{r4, r5, r6, pc}

00020ab2 <bt_keys_add_type>:
	keys->keys |= type;
   20ab2:	89c3      	ldrh	r3, [r0, #14]
   20ab4:	4319      	orrs	r1, r3
   20ab6:	81c1      	strh	r1, [r0, #14]
}
   20ab8:	4770      	bx	lr

00020aba <fixed_data_unref>:
}
   20aba:	4770      	bx	lr

00020abc <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20abc:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   20abe:	6849      	ldr	r1, [r1, #4]
   20ac0:	6809      	ldr	r1, [r1, #0]
   20ac2:	f7f9 ba89 	b.w	19fd8 <net_buf_alloc_len>

00020ac6 <net_buf_get>:
{
   20ac6:	b570      	push	{r4, r5, r6, lr}
   20ac8:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   20aca:	f7fa fdb7 	bl	1b63c <z_impl_k_queue_get>
	if (!buf) {
   20ace:	4605      	mov	r5, r0
   20ad0:	b128      	cbz	r0, 20ade <net_buf_get+0x18>
   20ad2:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   20ad4:	7963      	ldrb	r3, [r4, #5]
   20ad6:	f013 0301 	ands.w	r3, r3, #1
   20ada:	d102      	bne.n	20ae2 <net_buf_get+0x1c>
	frag->frags = NULL;
   20adc:	6023      	str	r3, [r4, #0]
}
   20ade:	4628      	mov	r0, r5
   20ae0:	bd70      	pop	{r4, r5, r6, pc}
   20ae2:	2300      	movs	r3, #0
   20ae4:	2200      	movs	r2, #0
   20ae6:	4630      	mov	r0, r6
   20ae8:	f7fa fda8 	bl	1b63c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   20aec:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   20aee:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   20af0:	f023 0301 	bic.w	r3, r3, #1
   20af4:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   20af6:	4604      	mov	r4, r0
   20af8:	e7ec      	b.n	20ad4 <net_buf_get+0xe>

00020afa <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   20afa:	6883      	ldr	r3, [r0, #8]
   20afc:	440b      	add	r3, r1
   20afe:	6003      	str	r3, [r0, #0]
}
   20b00:	4770      	bx	lr

00020b02 <net_buf_put>:
{
   20b02:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   20b04:	460a      	mov	r2, r1
   20b06:	6814      	ldr	r4, [r2, #0]
   20b08:	b914      	cbnz	r4, 20b10 <net_buf_put+0xe>
}
   20b0a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   20b0c:	f000 baa8 	b.w	21060 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   20b10:	7953      	ldrb	r3, [r2, #5]
   20b12:	f043 0301 	orr.w	r3, r3, #1
   20b16:	7153      	strb	r3, [r2, #5]
   20b18:	4622      	mov	r2, r4
   20b1a:	e7f4      	b.n	20b06 <net_buf_put+0x4>

00020b1c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   20b1c:	7902      	ldrb	r2, [r0, #4]
   20b1e:	3201      	adds	r2, #1
   20b20:	7102      	strb	r2, [r0, #4]
	return buf;
}
   20b22:	4770      	bx	lr

00020b24 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   20b24:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   20b26:	4618      	mov	r0, r3
   20b28:	681b      	ldr	r3, [r3, #0]
   20b2a:	2b00      	cmp	r3, #0
   20b2c:	d1fb      	bne.n	20b26 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   20b2e:	4770      	bx	lr

00020b30 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   20b30:	6802      	ldr	r2, [r0, #0]
{
   20b32:	b510      	push	{r4, lr}
	if (parent->frags) {
   20b34:	b12a      	cbz	r2, 20b42 <net_buf_frag_insert+0x12>
   20b36:	460b      	mov	r3, r1
	while (buf->frags) {
   20b38:	461c      	mov	r4, r3
   20b3a:	681b      	ldr	r3, [r3, #0]
   20b3c:	2b00      	cmp	r3, #0
   20b3e:	d1fb      	bne.n	20b38 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   20b40:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   20b42:	6001      	str	r1, [r0, #0]
}
   20b44:	bd10      	pop	{r4, pc}

00020b46 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   20b46:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   20b48:	4604      	mov	r4, r0
   20b4a:	b920      	cbnz	r0, 20b56 <net_buf_frag_add+0x10>
	buf->ref++;
   20b4c:	790b      	ldrb	r3, [r1, #4]
   20b4e:	3301      	adds	r3, #1
   20b50:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   20b52:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   20b54:	bd10      	pop	{r4, pc}
   20b56:	4603      	mov	r3, r0
	while (buf->frags) {
   20b58:	4618      	mov	r0, r3
   20b5a:	681b      	ldr	r3, [r3, #0]
   20b5c:	2b00      	cmp	r3, #0
   20b5e:	d1fb      	bne.n	20b58 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   20b60:	f7ff ffe6 	bl	20b30 <net_buf_frag_insert>
   20b64:	4620      	mov	r0, r4
   20b66:	e7f5      	b.n	20b54 <net_buf_frag_add+0xe>

00020b68 <net_buf_simple_add>:
	return buf->data + buf->len;
   20b68:	8883      	ldrh	r3, [r0, #4]
   20b6a:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   20b6c:	4419      	add	r1, r3
   20b6e:	8081      	strh	r1, [r0, #4]
	return tail;
}
   20b70:	18d0      	adds	r0, r2, r3
   20b72:	4770      	bx	lr

00020b74 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   20b74:	b430      	push	{r4, r5}
   20b76:	8884      	ldrh	r4, [r0, #4]
   20b78:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   20b7a:	18a3      	adds	r3, r4, r2
   20b7c:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   20b7e:	1928      	adds	r0, r5, r4
}
   20b80:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   20b82:	f7fe b936 	b.w	1edf2 <memcpy>

00020b86 <net_buf_simple_add_u8>:
   20b86:	8883      	ldrh	r3, [r0, #4]
   20b88:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   20b8a:	b510      	push	{r4, lr}
	buf->len += len;
   20b8c:	1c5c      	adds	r4, r3, #1
   20b8e:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   20b90:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   20b92:	18d0      	adds	r0, r2, r3
   20b94:	bd10      	pop	{r4, pc}

00020b96 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   20b96:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   20b98:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   20b9a:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   20b9c:	1a40      	subs	r0, r0, r1
	buf->len += len;
   20b9e:	4411      	add	r1, r2
	buf->data -= len;
   20ba0:	6018      	str	r0, [r3, #0]
	buf->len += len;
   20ba2:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   20ba4:	4770      	bx	lr

00020ba6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20ba6:	8882      	ldrh	r2, [r0, #4]
   20ba8:	1a52      	subs	r2, r2, r1
{
   20baa:	4603      	mov	r3, r0
	buf->len -= len;
   20bac:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   20bae:	6800      	ldr	r0, [r0, #0]
   20bb0:	4408      	add	r0, r1
   20bb2:	6018      	str	r0, [r3, #0]
}
   20bb4:	4770      	bx	lr

00020bb6 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   20bb6:	4603      	mov	r3, r0
	void *data = buf->data;
   20bb8:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   20bba:	889a      	ldrh	r2, [r3, #4]
   20bbc:	1a52      	subs	r2, r2, r1
	buf->data += len;
   20bbe:	4401      	add	r1, r0
	buf->len -= len;
   20bc0:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   20bc2:	6019      	str	r1, [r3, #0]

	return data;
}
   20bc4:	4770      	bx	lr

00020bc6 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   20bc6:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   20bc8:	6803      	ldr	r3, [r0, #0]
   20bca:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   20bcc:	2102      	movs	r1, #2
   20bce:	f7ff ffea 	bl	20ba6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   20bd2:	4620      	mov	r0, r4
   20bd4:	bd10      	pop	{r4, pc}

00020bd6 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   20bd6:	6802      	ldr	r2, [r0, #0]
   20bd8:	6880      	ldr	r0, [r0, #8]
}
   20bda:	1a10      	subs	r0, r2, r0
   20bdc:	4770      	bx	lr

00020bde <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   20bde:	8883      	ldrh	r3, [r0, #4]
   20be0:	88c2      	ldrh	r2, [r0, #6]
   20be2:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   20be4:	6803      	ldr	r3, [r0, #0]
   20be6:	6880      	ldr	r0, [r0, #8]
   20be8:	1a18      	subs	r0, r3, r0
}
   20bea:	1a10      	subs	r0, r2, r0
   20bec:	4770      	bx	lr

00020bee <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20bee:	6843      	ldr	r3, [r0, #4]
   20bf0:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   20bf2:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   20bf6:	600b      	str	r3, [r1, #0]
}
   20bf8:	2000      	movs	r0, #0
   20bfa:	4770      	bx	lr

00020bfc <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20bfc:	6843      	ldr	r3, [r0, #4]
   20bfe:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   20c00:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   20c04:	4042      	eors	r2, r0
   20c06:	400a      	ands	r2, r1
   20c08:	4042      	eors	r2, r0
    p_reg->OUT = value;
   20c0a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   20c0e:	2000      	movs	r0, #0
   20c10:	4770      	bx	lr

00020c12 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20c12:	6843      	ldr	r3, [r0, #4]
   20c14:	685b      	ldr	r3, [r3, #4]
}
   20c16:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   20c18:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   20c1c:	4770      	bx	lr

00020c1e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20c1e:	6843      	ldr	r3, [r0, #4]
   20c20:	685b      	ldr	r3, [r3, #4]
}
   20c22:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   20c24:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   20c28:	4770      	bx	lr

00020c2a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   20c2a:	6843      	ldr	r3, [r0, #4]
   20c2c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   20c2e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   20c32:	404b      	eors	r3, r1
    p_reg->OUT = value;
   20c34:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   20c38:	2000      	movs	r0, #0
   20c3a:	4770      	bx	lr

00020c3c <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20c3c:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   20c3e:	6858      	ldr	r0, [r3, #4]
{
   20c40:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   20c42:	b158      	cbz	r0, 20c5c <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20c44:	2400      	movs	r4, #0
   20c46:	4281      	cmp	r1, r0
   20c48:	d113      	bne.n	20c72 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   20c4a:	6808      	ldr	r0, [r1, #0]
   20c4c:	b95c      	cbnz	r4, 20c66 <gpio_nrfx_manage_callback+0x2a>
   20c4e:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   20c50:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   20c52:	42a1      	cmp	r1, r4
   20c54:	d100      	bne.n	20c58 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   20c56:	6098      	str	r0, [r3, #8]
	parent->next = child;
   20c58:	2000      	movs	r0, #0
   20c5a:	6008      	str	r0, [r1, #0]
	if (set) {
   20c5c:	b972      	cbnz	r2, 20c7c <gpio_nrfx_manage_callback+0x40>
	return 0;
   20c5e:	2000      	movs	r0, #0
}
   20c60:	bd30      	pop	{r4, r5, pc}
   20c62:	4628      	mov	r0, r5
   20c64:	e7ef      	b.n	20c46 <gpio_nrfx_manage_callback+0xa>
   20c66:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   20c68:	6898      	ldr	r0, [r3, #8]
   20c6a:	4281      	cmp	r1, r0
	list->tail = node;
   20c6c:	bf08      	it	eq
   20c6e:	609c      	streq	r4, [r3, #8]
}
   20c70:	e7f2      	b.n	20c58 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20c72:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20c74:	4604      	mov	r4, r0
   20c76:	2d00      	cmp	r5, #0
   20c78:	d1f3      	bne.n	20c62 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   20c7a:	b13a      	cbz	r2, 20c8c <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   20c7c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   20c7e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   20c80:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   20c82:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   20c84:	2800      	cmp	r0, #0
   20c86:	d1ea      	bne.n	20c5e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   20c88:	6099      	str	r1, [r3, #8]
}
   20c8a:	e7e9      	b.n	20c60 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   20c8c:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20c90:	e7e6      	b.n	20c60 <gpio_nrfx_manage_callback+0x24>

00020c92 <flash_nrf_write_protection>:
}
   20c92:	2000      	movs	r0, #0
   20c94:	4770      	bx	lr

00020c96 <is_regular_addr_valid>:
{
   20c96:	b538      	push	{r3, r4, r5, lr}
   20c98:	4604      	mov	r4, r0
   20c9a:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   20c9c:	f000 f89e 	bl	20ddc <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   20ca0:	4284      	cmp	r4, r0
   20ca2:	d209      	bcs.n	20cb8 <is_regular_addr_valid+0x22>
   20ca4:	2c00      	cmp	r4, #0
   20ca6:	db07      	blt.n	20cb8 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   20ca8:	42a8      	cmp	r0, r5
   20caa:	d305      	bcc.n	20cb8 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   20cac:	442c      	add	r4, r5
	    len > flash_size ||
   20cae:	4284      	cmp	r4, r0
   20cb0:	bf8c      	ite	hi
   20cb2:	2000      	movhi	r0, #0
   20cb4:	2001      	movls	r0, #1
}
   20cb6:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   20cb8:	2000      	movs	r0, #0
   20cba:	e7fc      	b.n	20cb6 <is_regular_addr_valid+0x20>

00020cbc <flash_nrf_read>:
{
   20cbc:	b570      	push	{r4, r5, r6, lr}
   20cbe:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   20cc0:	4628      	mov	r0, r5
   20cc2:	4619      	mov	r1, r3
{
   20cc4:	4616      	mov	r6, r2
   20cc6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   20cc8:	f7ff ffe5 	bl	20c96 <is_regular_addr_valid>
   20ccc:	b138      	cbz	r0, 20cde <flash_nrf_read+0x22>
	if (!len) {
   20cce:	b14c      	cbz	r4, 20ce4 <flash_nrf_read+0x28>
	memcpy(data, (void *)addr, len);
   20cd0:	4622      	mov	r2, r4
   20cd2:	4629      	mov	r1, r5
   20cd4:	4630      	mov	r0, r6
   20cd6:	f7fe f88c 	bl	1edf2 <memcpy>
	return 0;
   20cda:	2000      	movs	r0, #0
}
   20cdc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20cde:	f06f 0015 	mvn.w	r0, #21
   20ce2:	e7fb      	b.n	20cdc <flash_nrf_read+0x20>
		return 0;
   20ce4:	4620      	mov	r0, r4
   20ce6:	e7f9      	b.n	20cdc <flash_nrf_read+0x20>

00020ce8 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   20ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   20cec:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   20cee:	6883      	ldr	r3, [r0, #8]
{
   20cf0:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   20cf2:	695b      	ldr	r3, [r3, #20]
   20cf4:	4669      	mov	r1, sp
{
   20cf6:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   20cf8:	aa01      	add	r2, sp, #4
   20cfa:	4798      	blx	r3

	while (layout_size--) {
   20cfc:	e9dd 1000 	ldrd	r1, r0, [sp]
   20d00:	2300      	movs	r3, #0
   20d02:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
	off_t end = 0;
   20d06:	461d      	mov	r5, r3
	off_t group_offs = 0;
   20d08:	469e      	mov	lr, r3
	size_t page_count = 0;
   20d0a:	469c      	mov	ip, r3
	while (layout_size--) {
   20d0c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20d10:	d102      	bne.n	20d18 <flash_get_page_info+0x30>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   20d12:	f06f 0015 	mvn.w	r0, #21
   20d16:	e018      	b.n	20d4a <flash_get_page_info+0x62>
		if (use_addr) {
   20d18:	680a      	ldr	r2, [r1, #0]
   20d1a:	b1cf      	cbz	r7, 20d50 <flash_get_page_info+0x68>
			end += layout->pages_count * layout->pages_size;
   20d1c:	6848      	ldr	r0, [r1, #4]
   20d1e:	fb00 5502 	mla	r5, r0, r2, r5
		if (offs < end) {
   20d22:	42a5      	cmp	r5, r4
   20d24:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   20d28:	dd17      	ble.n	20d5a <flash_get_page_info+0x72>
   20d2a:	b103      	cbz	r3, 20d2e <flash_get_page_info+0x46>
   20d2c:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   20d2e:	9b00      	ldr	r3, [sp, #0]
   20d30:	685b      	ldr	r3, [r3, #4]
   20d32:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   20d34:	b177      	cbz	r7, 20d54 <flash_get_page_info+0x6c>
				num_in_group = (offs - group_offs) /
   20d36:	eba4 040e 	sub.w	r4, r4, lr
   20d3a:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   20d3e:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   20d42:	4464      	add	r4, ip
			info->start_offset = group_offs +
   20d44:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   20d46:	60b4      	str	r4, [r6, #8]
			return 0;
   20d48:	2000      	movs	r0, #0
}
   20d4a:	b002      	add	sp, #8
   20d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   20d50:	4415      	add	r5, r2
   20d52:	e7e6      	b.n	20d22 <flash_get_page_info+0x3a>
				num_in_group = offs - page_count;
   20d54:	eba4 040c 	sub.w	r4, r4, ip
   20d58:	e7f1      	b.n	20d3e <flash_get_page_info+0x56>
		group_offs += layout->pages_count * layout->pages_size;
   20d5a:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   20d5c:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   20d5e:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   20d62:	3108      	adds	r1, #8
   20d64:	2301      	movs	r3, #1
   20d66:	e7d1      	b.n	20d0c <flash_get_page_info+0x24>

00020d68 <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(struct device *dev, off_t offs,
				      struct flash_pages_info *info)
{
   20d68:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   20d6a:	2201      	movs	r2, #1
   20d6c:	f7ff bfbc 	b.w	20ce8 <flash_get_page_info>

00020d70 <flash_page_foreach>:

	return count;
}

void flash_page_foreach(struct device *dev, flash_page_cb cb, void *data)
{
   20d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   20d74:	6883      	ldr	r3, [r0, #8]
{
   20d76:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   20d78:	695b      	ldr	r3, [r3, #20]
{
   20d7a:	4688      	mov	r8, r1
   20d7c:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   20d7e:	a901      	add	r1, sp, #4
   20d80:	aa02      	add	r2, sp, #8
   20d82:	4798      	blx	r3
	off_t off = 0;
   20d84:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   20d86:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   20d88:	4625      	mov	r5, r4
   20d8a:	9b02      	ldr	r3, [sp, #8]
   20d8c:	42ab      	cmp	r3, r5
   20d8e:	d802      	bhi.n	20d96 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   20d90:	b006      	add	sp, #24
   20d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   20d96:	9f01      	ldr	r7, [sp, #4]
   20d98:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   20d9c:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   20d9e:	687b      	ldr	r3, [r7, #4]
   20da0:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   20da2:	683a      	ldr	r2, [r7, #0]
   20da4:	42b2      	cmp	r2, r6
   20da6:	eb0a 0306 	add.w	r3, sl, r6
   20daa:	d802      	bhi.n	20db2 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   20dac:	3501      	adds	r5, #1
   20dae:	469a      	mov	sl, r3
   20db0:	e7eb      	b.n	20d8a <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   20db2:	4649      	mov	r1, r9
   20db4:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   20db6:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   20db8:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   20dba:	47c0      	blx	r8
   20dbc:	2800      	cmp	r0, #0
   20dbe:	d0e7      	beq.n	20d90 <flash_page_foreach+0x20>
			off += page_info.size;
   20dc0:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   20dc2:	3601      	adds	r6, #1
			off += page_info.size;
   20dc4:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   20dc6:	e7ec      	b.n	20da2 <flash_page_foreach+0x32>

00020dc8 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   20dc8:	68c2      	ldr	r2, [r0, #12]
{
   20dca:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   20dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
   20dd0:	e883 0003 	stmia.w	r3, {r0, r1}
}
   20dd4:	2000      	movs	r0, #0
   20dd6:	4770      	bx	lr

00020dd8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   20dd8:	f000 bac1 	b.w	2135e <z_impl_k_busy_wait>

00020ddc <nrfx_nvmc_flash_size_get>:
   20ddc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20de0:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   20de2:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   20de4:	4350      	muls	r0, r2
   20de6:	4770      	bx	lr

00020de8 <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   20de8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20dec:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   20dee:	4770      	bx	lr

00020df0 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   20df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   20df4:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   20df6:	4770      	bx	lr

00020df8 <arch_system_halt>:
	__asm__ volatile(
   20df8:	f04f 0220 	mov.w	r2, #32
   20dfc:	f3ef 8311 	mrs	r3, BASEPRI
   20e00:	f382 8811 	msr	BASEPRI, r2
   20e04:	f3bf 8f6f 	isb	sy
	for (;;) {
   20e08:	e7fe      	b.n	20e08 <arch_system_halt+0x10>

00020e0a <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   20e0a:	f7fc be4f 	b.w	1daac <z_clock_idle_exit>

00020e0e <k_heap_init>:
{
   20e0e:	b410      	push	{r4}
   20e10:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   20e14:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   20e18:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   20e1a:	f7fb bf92 	b.w	1cd42 <sys_heap_init>

00020e1e <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   20e1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e22:	4604      	mov	r4, r0
   20e24:	b085      	sub	sp, #20
   20e26:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   20e28:	4610      	mov	r0, r2
   20e2a:	4619      	mov	r1, r3
   20e2c:	f000 fb67 	bl	214fe <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20e30:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   20e34:	4605      	mov	r5, r0
   20e36:	460f      	mov	r7, r1
   20e38:	f04f 0220 	mov.w	r2, #32
   20e3c:	f3ef 8311 	mrs	r3, BASEPRI
   20e40:	f382 8811 	msr	BASEPRI, r2
   20e44:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20e48:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   20e4c:	4631      	mov	r1, r6
   20e4e:	4620      	mov	r0, r4
   20e50:	9303      	str	r3, [sp, #12]
   20e52:	f7fb ff42 	bl	1ccda <sys_heap_alloc>
   20e56:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   20e58:	f7fb fa30 	bl	1c2bc <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   20e5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20e60:	b13a      	cbz	r2, 20e72 <k_heap_alloc+0x54>
	__asm__ volatile(
   20e62:	f383 8811 	msr	BASEPRI, r3
   20e66:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   20e6a:	4610      	mov	r0, r2
   20e6c:	b005      	add	sp, #20
   20e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   20e72:	ebb5 0800 	subs.w	r8, r5, r0
   20e76:	eb67 0901 	sbc.w	r9, r7, r1
   20e7a:	f1b8 0f01 	cmp.w	r8, #1
   20e7e:	f179 0100 	sbcs.w	r1, r9, #0
   20e82:	dbee      	blt.n	20e62 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20e84:	e9cd 8900 	strd	r8, r9, [sp]
   20e88:	465a      	mov	r2, fp
   20e8a:	4619      	mov	r1, r3
   20e8c:	4650      	mov	r0, sl
   20e8e:	f7fa fe81 	bl	1bb94 <z_pend_curr>
	__asm__ volatile(
   20e92:	f04f 0220 	mov.w	r2, #32
   20e96:	f3ef 8311 	mrs	r3, BASEPRI
   20e9a:	f382 8811 	msr	BASEPRI, r2
   20e9e:	f3bf 8f6f 	isb	sy
   20ea2:	e7d3      	b.n	20e4c <k_heap_alloc+0x2e>

00020ea4 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   20ea4:	b538      	push	{r3, r4, r5, lr}
   20ea6:	4604      	mov	r4, r0
   20ea8:	f04f 0320 	mov.w	r3, #32
   20eac:	f3ef 8511 	mrs	r5, BASEPRI
   20eb0:	f383 8811 	msr	BASEPRI, r3
   20eb4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20eb8:	f7fb feba 	bl	1cc30 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   20ebc:	f104 000c 	add.w	r0, r4, #12
   20ec0:	f000 fa27 	bl	21312 <z_unpend_all>
   20ec4:	b130      	cbz	r0, 20ed4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   20ec6:	4629      	mov	r1, r5
   20ec8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   20ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   20ed0:	f000 b934 	b.w	2113c <z_reschedule>
	__asm__ volatile(
   20ed4:	f385 8811 	msr	BASEPRI, r5
   20ed8:	f3bf 8f6f 	isb	sy
}
   20edc:	bd38      	pop	{r3, r4, r5, pc}

00020ede <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   20ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20ee0:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   20ee4:	6800      	ldr	r0, [r0, #0]
   20ee6:	6048      	str	r0, [r1, #4]
{
   20ee8:	4614      	mov	r4, r2
   20eea:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   20eec:	4632      	mov	r2, r6
   20eee:	463b      	mov	r3, r7
   20ef0:	4621      	mov	r1, r4
   20ef2:	f7ff ff94 	bl	20e1e <k_heap_alloc>
   20ef6:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   20ef8:	b144      	cbz	r4, 20f0c <k_mem_pool_alloc+0x2e>
   20efa:	b938      	cbnz	r0, 20f0c <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   20efc:	ea56 0307 	orrs.w	r3, r6, r7
   20f00:	bf0c      	ite	eq
   20f02:	f06f 000b 	mvneq.w	r0, #11
   20f06:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   20f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   20f0c:	2000      	movs	r0, #0
   20f0e:	e7fc      	b.n	20f0a <k_mem_pool_alloc+0x2c>

00020f10 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   20f10:	e9d0 1000 	ldrd	r1, r0, [r0]
   20f14:	f7ff bfc6 	b.w	20ea4 <k_heap_free>

00020f18 <k_mem_slab_init>:
{
   20f18:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   20f1a:	2400      	movs	r4, #0
   20f1c:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20f1e:	ea41 0402 	orr.w	r4, r1, r2
   20f22:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   20f26:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   20f2a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   20f2c:	d10c      	bne.n	20f48 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   20f2e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   20f30:	42a3      	cmp	r3, r4
   20f32:	d103      	bne.n	20f3c <k_mem_slab_init+0x24>
   20f34:	e9c0 0000 	strd	r0, r0, [r0]
}
   20f38:	2000      	movs	r0, #0
}
   20f3a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   20f3c:	6945      	ldr	r5, [r0, #20]
   20f3e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   20f40:	3401      	adds	r4, #1
		slab->free_list = p;
   20f42:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   20f44:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   20f46:	e7f3      	b.n	20f30 <k_mem_slab_init+0x18>
		return -EINVAL;
   20f48:	f06f 0015 	mvn.w	r0, #21
	return rc;
   20f4c:	e7f5      	b.n	20f3a <k_mem_slab_init+0x22>

00020f4e <z_impl_k_mutex_init>:
{
   20f4e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   20f50:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   20f52:	e9c3 0002 	strd	r0, r0, [r3, #8]
   20f56:	e9c3 3300 	strd	r3, r3, [r3]
}
   20f5a:	4770      	bx	lr

00020f5c <queue_insert>:
{
   20f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20f60:	4604      	mov	r4, r0
   20f62:	460d      	mov	r5, r1
   20f64:	4690      	mov	r8, r2
   20f66:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   20f68:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20f6c:	f04f 0320 	mov.w	r3, #32
   20f70:	f3ef 8711 	mrs	r7, BASEPRI
   20f74:	f383 8811 	msr	BASEPRI, r3
   20f78:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   20f7c:	4630      	mov	r0, r6
   20f7e:	f000 f99b 	bl	212b8 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   20f82:	b158      	cbz	r0, 20f9c <queue_insert+0x40>
   20f84:	2400      	movs	r4, #0
   20f86:	67c4      	str	r4, [r0, #124]	; 0x7c
   20f88:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   20f8c:	f000 f91e 	bl	211cc <z_ready_thread>
	z_reschedule(&queue->lock, key);
   20f90:	4630      	mov	r0, r6
   20f92:	4639      	mov	r1, r7
   20f94:	f000 f8d2 	bl	2113c <z_reschedule>
	return 0;
   20f98:	2000      	movs	r0, #0
   20f9a:	e00c      	b.n	20fb6 <queue_insert+0x5a>
	if (alloc) {
   20f9c:	f1b9 0f00 	cmp.w	r9, #0
   20fa0:	d01b      	beq.n	20fda <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   20fa2:	2008      	movs	r0, #8
   20fa4:	f7fb faae 	bl	1c504 <z_thread_malloc>
		if (anode == NULL) {
   20fa8:	b938      	cbnz	r0, 20fba <queue_insert+0x5e>
	__asm__ volatile(
   20faa:	f387 8811 	msr	BASEPRI, r7
   20fae:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   20fb2:	f06f 000b 	mvn.w	r0, #11
}
   20fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   20fba:	2301      	movs	r3, #1
		anode->data = data;
   20fbc:	f8c0 8004 	str.w	r8, [r0, #4]
   20fc0:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20fc2:	6803      	ldr	r3, [r0, #0]
   20fc4:	f003 0203 	and.w	r2, r3, #3
   20fc8:	b95d      	cbnz	r5, 20fe2 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20fca:	6823      	ldr	r3, [r4, #0]
   20fcc:	4313      	orrs	r3, r2
   20fce:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20fd0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   20fd2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   20fd4:	b973      	cbnz	r3, 20ff4 <queue_insert+0x98>
	list->tail = node;
   20fd6:	6060      	str	r0, [r4, #4]
}
   20fd8:	e00c      	b.n	20ff4 <queue_insert+0x98>
	node->next_and_flags = flags;
   20fda:	f8c8 9000 	str.w	r9, [r8]
}
   20fde:	4640      	mov	r0, r8
   20fe0:	e7ef      	b.n	20fc2 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   20fe2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   20fe4:	f033 0303 	bics.w	r3, r3, #3
   20fe8:	d110      	bne.n	2100c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20fea:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   20fec:	6862      	ldr	r2, [r4, #4]
   20fee:	b93a      	cbnz	r2, 21000 <queue_insert+0xa4>
	list->head = node;
   20ff0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   20ff4:	2104      	movs	r1, #4
   20ff6:	f104 0010 	add.w	r0, r4, #16
   20ffa:	f000 fbe7 	bl	217cc <z_handle_obj_poll_events>
   20ffe:	e7c7      	b.n	20f90 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21000:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21002:	f003 0303 	and.w	r3, r3, #3
   21006:	4303      	orrs	r3, r0
   21008:	6013      	str	r3, [r2, #0]
   2100a:	e7e4      	b.n	20fd6 <queue_insert+0x7a>
   2100c:	4313      	orrs	r3, r2
   2100e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21010:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21012:	f003 0303 	and.w	r3, r3, #3
   21016:	4303      	orrs	r3, r0
   21018:	602b      	str	r3, [r5, #0]
}
   2101a:	e7eb      	b.n	20ff4 <queue_insert+0x98>

0002101c <z_queue_node_peek>:
{
   2101c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2101e:	4604      	mov	r4, r0
   21020:	b130      	cbz	r0, 21030 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21022:	6802      	ldr	r2, [r0, #0]
   21024:	0793      	lsls	r3, r2, #30
   21026:	d003      	beq.n	21030 <z_queue_node_peek+0x14>
		ret = anode->data;
   21028:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2102a:	b109      	cbz	r1, 21030 <z_queue_node_peek+0x14>
			k_free(anode);
   2102c:	f000 fbf4 	bl	21818 <k_free>
}
   21030:	4620      	mov	r0, r4
   21032:	bd10      	pop	{r4, pc}

00021034 <z_impl_k_queue_init>:
	list->head = NULL;
   21034:	2300      	movs	r3, #0
	list->tail = NULL;
   21036:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2103a:	f100 0308 	add.w	r3, r0, #8
   2103e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   21042:	f100 0310 	add.w	r3, r0, #16
   21046:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2104a:	4770      	bx	lr

0002104c <k_queue_append>:
{
   2104c:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   2104e:	2300      	movs	r3, #0
   21050:	6841      	ldr	r1, [r0, #4]
   21052:	f7ff bf83 	b.w	20f5c <queue_insert>

00021056 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   21056:	2300      	movs	r3, #0
{
   21058:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   2105a:	4619      	mov	r1, r3
   2105c:	f7ff bf7e 	b.w	20f5c <queue_insert>

00021060 <k_queue_append_list>:
{
   21060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21064:	4605      	mov	r5, r0
   21066:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   21068:	460c      	mov	r4, r1
   2106a:	b391      	cbz	r1, 210d2 <k_queue_append_list+0x72>
   2106c:	b38a      	cbz	r2, 210d2 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2106e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   21072:	f04f 0320 	mov.w	r3, #32
   21076:	f3ef 8811 	mrs	r8, BASEPRI
   2107a:	f383 8811 	msr	BASEPRI, r3
   2107e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   21082:	4638      	mov	r0, r7
   21084:	f000 f918 	bl	212b8 <z_unpend_first_thread>
   21088:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2108c:	b920      	cbnz	r0, 21098 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2108e:	686b      	ldr	r3, [r5, #4]
   21090:	b9cb      	cbnz	r3, 210c6 <k_queue_append_list+0x66>
	list->head = node;
   21092:	602c      	str	r4, [r5, #0]
	list->tail = node;
   21094:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   21096:	e00a      	b.n	210ae <k_queue_append_list+0x4e>
   21098:	6144      	str	r4, [r0, #20]
   2109a:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2109e:	f000 f895 	bl	211cc <z_ready_thread>
		head = *(void **)head;
   210a2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   210a4:	4638      	mov	r0, r7
   210a6:	f000 f907 	bl	212b8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   210aa:	2c00      	cmp	r4, #0
   210ac:	d1ee      	bne.n	2108c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   210ae:	2104      	movs	r1, #4
   210b0:	f105 0010 	add.w	r0, r5, #16
   210b4:	f000 fb8a 	bl	217cc <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   210b8:	4638      	mov	r0, r7
   210ba:	4641      	mov	r1, r8
   210bc:	f000 f83e 	bl	2113c <z_reschedule>
	return 0;
   210c0:	2000      	movs	r0, #0
}
   210c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   210c6:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   210c8:	f001 0103 	and.w	r1, r1, #3
   210cc:	430c      	orrs	r4, r1
   210ce:	601c      	str	r4, [r3, #0]
}
   210d0:	e7e0      	b.n	21094 <k_queue_append_list+0x34>
		return -EINVAL;
   210d2:	f06f 0015 	mvn.w	r0, #21
   210d6:	e7f4      	b.n	210c2 <k_queue_append_list+0x62>

000210d8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   210d8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   210dc:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   210e0:	4298      	cmp	r0, r3
   210e2:	bfac      	ite	ge
   210e4:	2000      	movge	r0, #0
   210e6:	2001      	movlt	r0, #1
   210e8:	4770      	bx	lr

000210ea <z_find_first_thread_to_unpend>:
{
   210ea:	b510      	push	{r4, lr}
   210ec:	f04f 0320 	mov.w	r3, #32
   210f0:	f3ef 8411 	mrs	r4, BASEPRI
   210f4:	f383 8811 	msr	BASEPRI, r3
   210f8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   210fc:	f000 f85c 	bl	211b8 <z_priq_dumb_best>
	__asm__ volatile(
   21100:	f384 8811 	msr	BASEPRI, r4
   21104:	f3bf 8f6f 	isb	sy
}
   21108:	bd10      	pop	{r4, pc}

0002110a <z_unpend_thread_no_timeout>:
{
   2110a:	b538      	push	{r3, r4, r5, lr}
   2110c:	4604      	mov	r4, r0
	__asm__ volatile(
   2110e:	f04f 0320 	mov.w	r3, #32
   21112:	f3ef 8511 	mrs	r5, BASEPRI
   21116:	f383 8811 	msr	BASEPRI, r3
   2111a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2111e:	4601      	mov	r1, r0
   21120:	6880      	ldr	r0, [r0, #8]
   21122:	f7fa fb15 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21126:	7b63      	ldrb	r3, [r4, #13]
   21128:	f023 0302 	bic.w	r3, r3, #2
   2112c:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   2112e:	2300      	movs	r3, #0
   21130:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   21132:	f385 8811 	msr	BASEPRI, r5
   21136:	f3bf 8f6f 	isb	sy
}
   2113a:	bd38      	pop	{r3, r4, r5, pc}

0002113c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2113c:	b921      	cbnz	r1, 21148 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2113e:	f3ef 8005 	mrs	r0, IPSR
   21142:	b908      	cbnz	r0, 21148 <z_reschedule+0xc>
   21144:	f7e4 bd20 	b.w	5b88 <arch_swap>
   21148:	f381 8811 	msr	BASEPRI, r1
   2114c:	f3bf 8f6f 	isb	sy
}
   21150:	4770      	bx	lr

00021152 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   21152:	4603      	mov	r3, r0
   21154:	b920      	cbnz	r0, 21160 <z_reschedule_irqlock+0xe>
   21156:	f3ef 8205 	mrs	r2, IPSR
   2115a:	b90a      	cbnz	r2, 21160 <z_reschedule_irqlock+0xe>
   2115c:	f7e4 bd14 	b.w	5b88 <arch_swap>
   21160:	f383 8811 	msr	BASEPRI, r3
   21164:	f3bf 8f6f 	isb	sy
}
   21168:	4770      	bx	lr

0002116a <z_reschedule_unlocked>:
	__asm__ volatile(
   2116a:	f04f 0320 	mov.w	r3, #32
   2116e:	f3ef 8011 	mrs	r0, BASEPRI
   21172:	f383 8811 	msr	BASEPRI, r3
   21176:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2117a:	f7ff bfea 	b.w	21152 <z_reschedule_irqlock>

0002117e <z_unpend_thread>:
{
   2117e:	b510      	push	{r4, lr}
   21180:	4601      	mov	r1, r0
   21182:	f04f 0320 	mov.w	r3, #32
   21186:	f3ef 8411 	mrs	r4, BASEPRI
   2118a:	f383 8811 	msr	BASEPRI, r3
   2118e:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   21192:	6880      	ldr	r0, [r0, #8]
   21194:	f7fa fadc 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   21198:	7b4b      	ldrb	r3, [r1, #13]
   2119a:	f023 0302 	bic.w	r3, r3, #2
   2119e:	734b      	strb	r3, [r1, #13]
		thread->base.pended_on = NULL;
   211a0:	2300      	movs	r3, #0
   211a2:	608b      	str	r3, [r1, #8]
	__asm__ volatile(
   211a4:	f384 8811 	msr	BASEPRI, r4
   211a8:	f3bf 8f6f 	isb	sy
}
   211ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return z_abort_timeout(&thread->base.timeout);
   211b0:	f101 0018 	add.w	r0, r1, #24
   211b4:	f000 b95d 	b.w	21472 <z_abort_timeout>

000211b8 <z_priq_dumb_best>:
{
   211b8:	4603      	mov	r3, r0
	return list->head == list;
   211ba:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   211bc:	4283      	cmp	r3, r0
   211be:	d003      	beq.n	211c8 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   211c0:	2800      	cmp	r0, #0
   211c2:	bf38      	it	cc
   211c4:	2000      	movcc	r0, #0
   211c6:	4770      	bx	lr
	struct k_thread *thread = NULL;
   211c8:	2000      	movs	r0, #0
}
   211ca:	4770      	bx	lr

000211cc <z_ready_thread>:
{
   211cc:	b510      	push	{r4, lr}
	__asm__ volatile(
   211ce:	f04f 0320 	mov.w	r3, #32
   211d2:	f3ef 8411 	mrs	r4, BASEPRI
   211d6:	f383 8811 	msr	BASEPRI, r3
   211da:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   211de:	f7fa fb0d 	bl	1b7fc <ready_thread>
	__asm__ volatile(
   211e2:	f384 8811 	msr	BASEPRI, r4
   211e6:	f3bf 8f6f 	isb	sy
}
   211ea:	bd10      	pop	{r4, pc}

000211ec <z_thread_timeout>:
{
   211ec:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
   211ee:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
   211f2:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   211f4:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
   211f8:	b1c3      	cbz	r3, 2122c <z_thread_timeout+0x40>
	__asm__ volatile(
   211fa:	f04f 0320 	mov.w	r3, #32
   211fe:	f3ef 8511 	mrs	r5, BASEPRI
   21202:	f383 8811 	msr	BASEPRI, r3
   21206:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   2120a:	f850 0c10 	ldr.w	r0, [r0, #-16]
   2120e:	f7fa fa9f 	bl	1b750 <z_priq_dumb_remove>
   21212:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21216:	f023 0302 	bic.w	r3, r3, #2
   2121a:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
   2121e:	2300      	movs	r3, #0
   21220:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
   21224:	f385 8811 	msr	BASEPRI, r5
   21228:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2122c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   21230:	f023 0314 	bic.w	r3, r3, #20
   21234:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
   21238:	4608      	mov	r0, r1
}
   2123a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   2123e:	f7ff bfc5 	b.w	211cc <z_ready_thread>

00021242 <z_remove_thread_from_ready_q>:
{
   21242:	b510      	push	{r4, lr}
	__asm__ volatile(
   21244:	f04f 0320 	mov.w	r3, #32
   21248:	f3ef 8411 	mrs	r4, BASEPRI
   2124c:	f383 8811 	msr	BASEPRI, r3
   21250:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
   21254:	f7fa fc30 	bl	1bab8 <unready_thread>
	__asm__ volatile(
   21258:	f384 8811 	msr	BASEPRI, r4
   2125c:	f3bf 8f6f 	isb	sy
}
   21260:	bd10      	pop	{r4, pc}

00021262 <add_to_waitq_locked>:
{
   21262:	b538      	push	{r3, r4, r5, lr}
   21264:	4604      	mov	r4, r0
   21266:	460d      	mov	r5, r1
	unready_thread(thread);
   21268:	f7fa fc26 	bl	1bab8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2126c:	7b63      	ldrb	r3, [r4, #13]
   2126e:	f043 0302 	orr.w	r3, r3, #2
   21272:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   21274:	b1c5      	cbz	r5, 212a8 <add_to_waitq_locked+0x46>
	return list->head == list;
   21276:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   21278:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2127a:	429d      	cmp	r5, r3
   2127c:	bf08      	it	eq
   2127e:	2300      	moveq	r3, #0
   21280:	2b00      	cmp	r3, #0
   21282:	bf38      	it	cc
   21284:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   21286:	b183      	cbz	r3, 212aa <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
   21288:	f994 100e 	ldrsb.w	r1, [r4, #14]
   2128c:	f993 200e 	ldrsb.w	r2, [r3, #14]
   21290:	4291      	cmp	r1, r2
   21292:	db04      	blt.n	2129e <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
   21294:	686a      	ldr	r2, [r5, #4]
   21296:	429a      	cmp	r2, r3
   21298:	d007      	beq.n	212aa <add_to_waitq_locked+0x48>
   2129a:	681b      	ldr	r3, [r3, #0]
   2129c:	e7f3      	b.n	21286 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
   2129e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   212a0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   212a4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   212a6:	605c      	str	r4, [r3, #4]
}
   212a8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
   212aa:	686b      	ldr	r3, [r5, #4]
   212ac:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   212ae:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   212b0:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   212b2:	601c      	str	r4, [r3, #0]
	list->tail = node;
   212b4:	606c      	str	r4, [r5, #4]
   212b6:	e7f7      	b.n	212a8 <add_to_waitq_locked+0x46>

000212b8 <z_unpend_first_thread>:
{
   212b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   212ba:	f04f 0320 	mov.w	r3, #32
   212be:	f3ef 8211 	mrs	r2, BASEPRI
   212c2:	f383 8811 	msr	BASEPRI, r3
   212c6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   212ca:	f7ff ff75 	bl	211b8 <z_priq_dumb_best>
   212ce:	4604      	mov	r4, r0
	__asm__ volatile(
   212d0:	f382 8811 	msr	BASEPRI, r2
   212d4:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   212d8:	b1c8      	cbz	r0, 2130e <z_unpend_first_thread+0x56>
	__asm__ volatile(
   212da:	f04f 0320 	mov.w	r3, #32
   212de:	f3ef 8511 	mrs	r5, BASEPRI
   212e2:	f383 8811 	msr	BASEPRI, r3
   212e6:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
   212ea:	4601      	mov	r1, r0
   212ec:	6880      	ldr	r0, [r0, #8]
   212ee:	f7fa fa2f 	bl	1b750 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   212f2:	7b63      	ldrb	r3, [r4, #13]
   212f4:	f023 0302 	bic.w	r3, r3, #2
   212f8:	7363      	strb	r3, [r4, #13]
		thread->base.pended_on = NULL;
   212fa:	2300      	movs	r3, #0
   212fc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   212fe:	f385 8811 	msr	BASEPRI, r5
   21302:	f3bf 8f6f 	isb	sy
   21306:	f104 0018 	add.w	r0, r4, #24
   2130a:	f000 f8b2 	bl	21472 <z_abort_timeout>
}
   2130e:	4620      	mov	r0, r4
   21310:	bd38      	pop	{r3, r4, r5, pc}

00021312 <z_unpend_all>:
{
   21312:	b538      	push	{r3, r4, r5, lr}
   21314:	4605      	mov	r5, r0
	int need_sched = 0;
   21316:	2000      	movs	r0, #0
	return list->head == list;
   21318:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2131a:	42a5      	cmp	r5, r4
   2131c:	d000      	beq.n	21320 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2131e:	b904      	cbnz	r4, 21322 <z_unpend_all+0x10>
}
   21320:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   21322:	4620      	mov	r0, r4
   21324:	f7ff ff2b 	bl	2117e <z_unpend_thread>
		z_ready_thread(thread);
   21328:	4620      	mov	r0, r4
   2132a:	f7ff ff4f 	bl	211cc <z_ready_thread>
		need_sched = 1;
   2132e:	2001      	movs	r0, #1
   21330:	e7f2      	b.n	21318 <z_unpend_all+0x6>

00021332 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   21332:	b15a      	cbz	r2, 2134c <z_impl_k_sem_init+0x1a>
   21334:	428a      	cmp	r2, r1
   21336:	d309      	bcc.n	2134c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   21338:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2133c:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   21340:	e9c0 0000 	strd	r0, r0, [r0]
   21344:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   21348:	2000      	movs	r0, #0
   2134a:	4770      	bx	lr
		return -EINVAL;
   2134c:	f06f 0015 	mvn.w	r0, #21
}
   21350:	4770      	bx	lr

00021352 <k_is_in_isr>:
   21352:	f3ef 8005 	mrs	r0, IPSR
}
   21356:	3800      	subs	r0, #0
   21358:	bf18      	it	ne
   2135a:	2001      	movne	r0, #1
   2135c:	4770      	bx	lr

0002135e <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   2135e:	f7e5 b8cb 	b.w	64f8 <arch_busy_wait>

00021362 <z_impl_k_thread_name_set>:
}
   21362:	f06f 0046 	mvn.w	r0, #70	; 0x46
   21366:	4770      	bx	lr

00021368 <k_thread_name_get>:
}
   21368:	2000      	movs	r0, #0
   2136a:	4770      	bx	lr

0002136c <k_work_submit_to_queue>:
{
   2136c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2136e:	f101 0308 	add.w	r3, r1, #8
   21372:	f3bf 8f5b 	dmb	ish
   21376:	e853 2f00 	ldrex	r2, [r3]
   2137a:	f042 0c01 	orr.w	ip, r2, #1
   2137e:	e843 ce00 	strex	lr, ip, [r3]
   21382:	f1be 0f00 	cmp.w	lr, #0
   21386:	d1f6      	bne.n	21376 <k_work_submit_to_queue+0xa>
   21388:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2138c:	07d3      	lsls	r3, r2, #31
   2138e:	d403      	bmi.n	21398 <k_work_submit_to_queue+0x2c>
}
   21390:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   21394:	f7ff be5a 	b.w	2104c <k_queue_append>
}
   21398:	f85d fb04 	ldr.w	pc, [sp], #4

0002139c <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   2139c:	f1a0 0110 	sub.w	r1, r0, #16
   213a0:	6980      	ldr	r0, [r0, #24]
   213a2:	f7ff bfe3 	b.w	2136c <k_work_submit_to_queue>

000213a6 <work_cancel>:
	CHECKIF(work->work_q == NULL) {
   213a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   213a8:	b570      	push	{r4, r5, r6, lr}
   213aa:	4604      	mov	r4, r0
	CHECKIF(work->work_q == NULL) {
   213ac:	b913      	cbnz	r3, 213b4 <work_cancel+0xe>
		return -EALREADY;
   213ae:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   213b2:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   213b4:	f3bf 8f5b 	dmb	ish
   213b8:	6883      	ldr	r3, [r0, #8]
   213ba:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   213be:	07db      	lsls	r3, r3, #31
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   213c0:	f100 0508 	add.w	r5, r0, #8
   213c4:	d532      	bpl.n	2142c <work_cancel+0x86>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   213c6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   213c8:	6813      	ldr	r3, [r2, #0]
   213ca:	2100      	movs	r1, #0
   213cc:	b913      	cbnz	r3, 213d4 <work_cancel+0x2e>
			return -EINVAL;
   213ce:	f06f 0015 	mvn.w	r0, #21
   213d2:	e7ee      	b.n	213b2 <work_cancel+0xc>
   213d4:	429c      	cmp	r4, r3
   213d6:	d124      	bne.n	21422 <work_cancel+0x7c>
Z_GENLIST_REMOVE(sflist, sfnode)
   213d8:	6823      	ldr	r3, [r4, #0]
   213da:	6856      	ldr	r6, [r2, #4]
   213dc:	f023 0003 	bic.w	r0, r3, #3
   213e0:	b9b1      	cbnz	r1, 21410 <work_cancel+0x6a>
   213e2:	42b4      	cmp	r4, r6
	list->head = node;
   213e4:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   213e6:	d100      	bne.n	213ea <work_cancel+0x44>
	list->tail = node;
   213e8:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   213ea:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   213ec:	f003 0303 	and.w	r3, r3, #3
   213f0:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   213f2:	2000      	movs	r0, #0
   213f4:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   213f6:	f3bf 8f5b 	dmb	ish
   213fa:	e855 3f00 	ldrex	r3, [r5]
   213fe:	f023 0301 	bic.w	r3, r3, #1
   21402:	e845 3200 	strex	r2, r3, [r5]
   21406:	2a00      	cmp	r2, #0
   21408:	d1f7      	bne.n	213fa <work_cancel+0x54>
   2140a:	f3bf 8f5b 	dmb	ish
   2140e:	e7d0      	b.n	213b2 <work_cancel+0xc>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   21410:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   21412:	f003 0303 	and.w	r3, r3, #3
   21416:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   21418:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   2141a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   2141c:	bf08      	it	eq
   2141e:	6051      	streq	r1, [r2, #4]
}
   21420:	e7e3      	b.n	213ea <work_cancel+0x44>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   21422:	6818      	ldr	r0, [r3, #0]
   21424:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   21426:	f020 0303 	bic.w	r3, r0, #3
   2142a:	e7cf      	b.n	213cc <work_cancel+0x26>
		int err = z_abort_timeout(&work->timeout);
   2142c:	3010      	adds	r0, #16
   2142e:	f000 f820 	bl	21472 <z_abort_timeout>
		if (err) {
   21432:	2800      	cmp	r0, #0
   21434:	d0dd      	beq.n	213f2 <work_cancel+0x4c>
   21436:	e7ba      	b.n	213ae <work_cancel+0x8>

00021438 <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   21438:	2300      	movs	r3, #0
   2143a:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   2143e:	e9c0 3304 	strd	r3, r3, [r0, #16]
   21442:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   21444:	6283      	str	r3, [r0, #40]	; 0x28
}
   21446:	4770      	bx	lr

00021448 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
	if (!work->work_q) {
   21448:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
   2144a:	b510      	push	{r4, lr}
	if (!work->work_q) {
   2144c:	b173      	cbz	r3, 2146c <k_delayed_work_cancel+0x24>
	__asm__ volatile(
   2144e:	f04f 0320 	mov.w	r3, #32
   21452:	f3ef 8411 	mrs	r4, BASEPRI
   21456:	f383 8811 	msr	BASEPRI, r3
   2145a:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = work_cancel(work);
   2145e:	f7ff ffa2 	bl	213a6 <work_cancel>
	__asm__ volatile(
   21462:	f384 8811 	msr	BASEPRI, r4
   21466:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
   2146a:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2146c:	f06f 0015 	mvn.w	r0, #21
   21470:	e7fb      	b.n	2146a <k_delayed_work_cancel+0x22>

00021472 <z_abort_timeout>:
{
   21472:	b510      	push	{r4, lr}
	__asm__ volatile(
   21474:	f04f 0220 	mov.w	r2, #32
   21478:	f3ef 8411 	mrs	r4, BASEPRI
   2147c:	f382 8811 	msr	BASEPRI, r2
   21480:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   21484:	6803      	ldr	r3, [r0, #0]
   21486:	b13b      	cbz	r3, 21498 <z_abort_timeout+0x26>
			remove_timeout(to);
   21488:	f7fa fdee 	bl	1c068 <remove_timeout>
			ret = 0;
   2148c:	2000      	movs	r0, #0
	__asm__ volatile(
   2148e:	f384 8811 	msr	BASEPRI, r4
   21492:	f3bf 8f6f 	isb	sy
}
   21496:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   21498:	f06f 0015 	mvn.w	r0, #21
   2149c:	e7f7      	b.n	2148e <z_abort_timeout+0x1c>

0002149e <z_get_next_timeout_expiry>:
{
   2149e:	b510      	push	{r4, lr}
	__asm__ volatile(
   214a0:	f04f 0320 	mov.w	r3, #32
   214a4:	f3ef 8411 	mrs	r4, BASEPRI
   214a8:	f383 8811 	msr	BASEPRI, r3
   214ac:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   214b0:	f7fa fdf4 	bl	1c09c <next_timeout>
	__asm__ volatile(
   214b4:	f384 8811 	msr	BASEPRI, r4
   214b8:	f3bf 8f6f 	isb	sy
}
   214bc:	bd10      	pop	{r4, pc}

000214be <z_set_timeout_expiry>:
{
   214be:	b570      	push	{r4, r5, r6, lr}
   214c0:	4604      	mov	r4, r0
   214c2:	460d      	mov	r5, r1
	__asm__ volatile(
   214c4:	f04f 0320 	mov.w	r3, #32
   214c8:	f3ef 8611 	mrs	r6, BASEPRI
   214cc:	f383 8811 	msr	BASEPRI, r3
   214d0:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   214d4:	f7fa fde2 	bl	1c09c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   214d8:	2801      	cmp	r0, #1
   214da:	dd05      	ble.n	214e8 <z_set_timeout_expiry+0x2a>
   214dc:	42a0      	cmp	r0, r4
   214de:	dd03      	ble.n	214e8 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   214e0:	4629      	mov	r1, r5
   214e2:	4620      	mov	r0, r4
   214e4:	f7e4 f8a6 	bl	5634 <z_clock_set_timeout>
	__asm__ volatile(
   214e8:	f386 8811 	msr	BASEPRI, r6
   214ec:	f3bf 8f6f 	isb	sy
}
   214f0:	bd70      	pop	{r4, r5, r6, pc}

000214f2 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   214f2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   214f4:	f7fa fee2 	bl	1c2bc <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   214f8:	bd08      	pop	{r3, pc}

000214fa <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   214fa:	f7fa bedf 	b.w	1c2bc <z_tick_get>

000214fe <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   214fe:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   21500:	1c4b      	adds	r3, r1, #1
   21502:	bf08      	it	eq
   21504:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   21508:	4604      	mov	r4, r0
   2150a:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2150c:	d013      	beq.n	21536 <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2150e:	ea54 0105 	orrs.w	r1, r4, r5
   21512:	d103      	bne.n	2151c <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   21514:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   21518:	f7fa bed0 	b.w	1c2bc <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2151c:	f06f 0101 	mvn.w	r1, #1
   21520:	1a0a      	subs	r2, r1, r0
   21522:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21526:	eb61 0305 	sbc.w	r3, r1, r5
   2152a:	2a00      	cmp	r2, #0
   2152c:	f173 0100 	sbcs.w	r1, r3, #0
   21530:	db02      	blt.n	21538 <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   21532:	4610      	mov	r0, r2
   21534:	4619      	mov	r1, r3
}
   21536:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   21538:	f7fa fec0 	bl	1c2bc <z_tick_get>
   2153c:	2c01      	cmp	r4, #1
   2153e:	f175 0300 	sbcs.w	r3, r5, #0
   21542:	bfbc      	itt	lt
   21544:	2401      	movlt	r4, #1
   21546:	2500      	movlt	r5, #0
   21548:	1820      	adds	r0, r4, r0
   2154a:	eb45 0101 	adc.w	r1, r5, r1
   2154e:	e7f2      	b.n	21536 <z_timeout_end_calc+0x38>

00021550 <k_timer_init>:
	timer->status = 0U;
   21550:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   21552:	e9c0 1208 	strd	r1, r2, [r0, #32]
   21556:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2155a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2155e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   21562:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   21564:	6343      	str	r3, [r0, #52]	; 0x34
}
   21566:	4770      	bx	lr

00021568 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   21568:	b510      	push	{r4, lr}
   2156a:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2156c:	f7ff ff81 	bl	21472 <z_abort_timeout>

	if (inactive) {
   21570:	b9d8      	cbnz	r0, 215aa <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   21572:	6a63      	ldr	r3, [r4, #36]	; 0x24
   21574:	b10b      	cbz	r3, 2157a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   21576:	4620      	mov	r0, r4
   21578:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   2157a:	f104 0018 	add.w	r0, r4, #24
   2157e:	2100      	movs	r1, #0
   21580:	f7ff fdb3 	bl	210ea <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   21584:	4604      	mov	r4, r0
   21586:	b180      	cbz	r0, 215aa <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   21588:	f7ff fdbf 	bl	2110a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   2158c:	4620      	mov	r0, r4
   2158e:	f7ff fe1d 	bl	211cc <z_ready_thread>
	__asm__ volatile(
   21592:	f04f 0320 	mov.w	r3, #32
   21596:	f3ef 8011 	mrs	r0, BASEPRI
   2159a:	f383 8811 	msr	BASEPRI, r3
   2159e:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   215a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   215a6:	f7ff bdd4 	b.w	21152 <z_reschedule_irqlock>
   215aa:	bd10      	pop	{r4, pc}

000215ac <clear_event_registrations>:
	while (num_events--) {
   215ac:	2314      	movs	r3, #20
{
   215ae:	b530      	push	{r4, r5, lr}
   215b0:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   215b4:	2400      	movs	r4, #0
	while (num_events--) {
   215b6:	4281      	cmp	r1, r0
   215b8:	d100      	bne.n	215bc <clear_event_registrations+0x10>
}
   215ba:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   215bc:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   215c0:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   215c4:	f003 030f 	and.w	r3, r3, #15
   215c8:	2b02      	cmp	r3, #2
   215ca:	d80a      	bhi.n	215e2 <clear_event_registrations+0x36>
   215cc:	b15b      	cbz	r3, 215e6 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   215ce:	f851 3c14 	ldr.w	r3, [r1, #-20]
   215d2:	b143      	cbz	r3, 215e6 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   215d4:	f851 5c10 	ldr.w	r5, [r1, #-16]
   215d8:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   215da:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   215dc:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   215e0:	e001      	b.n	215e6 <clear_event_registrations+0x3a>
	switch (event->type) {
   215e2:	2b04      	cmp	r3, #4
   215e4:	d0f3      	beq.n	215ce <clear_event_registrations+0x22>
	__asm__ volatile(
   215e6:	f382 8811 	msr	BASEPRI, r2
   215ea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   215ee:	f04f 0320 	mov.w	r3, #32
   215f2:	f3ef 8211 	mrs	r2, BASEPRI
   215f6:	f383 8811 	msr	BASEPRI, r3
   215fa:	f3bf 8f6f 	isb	sy
   215fe:	3914      	subs	r1, #20
   21600:	e7d9      	b.n	215b6 <clear_event_registrations+0xa>

00021602 <signal_poll_event>:
{
   21602:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   21604:	6884      	ldr	r4, [r0, #8]
{
   21606:	4605      	mov	r5, r0
   21608:	460e      	mov	r6, r1
	if (poller) {
   2160a:	b19c      	cbz	r4, 21634 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   2160c:	68a3      	ldr	r3, [r4, #8]
   2160e:	b95b      	cbnz	r3, 21628 <signal_poll_event+0x26>
		poller->is_polling = false;
   21610:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   21612:	4618      	mov	r0, r3
	event->poller = NULL;
   21614:	2300      	movs	r3, #0
   21616:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   21618:	68eb      	ldr	r3, [r5, #12]
   2161a:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2161e:	430e      	orrs	r6, r1
   21620:	f366 3310 	bfi	r3, r6, #12, #5
   21624:	60eb      	str	r3, [r5, #12]
	return retcode;
   21626:	e004      	b.n	21632 <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   21628:	4798      	blx	r3
		poller->is_polling = false;
   2162a:	2300      	movs	r3, #0
		if (retcode < 0) {
   2162c:	2800      	cmp	r0, #0
		poller->is_polling = false;
   2162e:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   21630:	daf0      	bge.n	21614 <signal_poll_event+0x12>
}
   21632:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   21634:	4620      	mov	r0, r4
   21636:	e7ed      	b.n	21614 <signal_poll_event+0x12>

00021638 <k_poll_poller_cb>:
{
   21638:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   2163a:	6883      	ldr	r3, [r0, #8]
   2163c:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   2163e:	7b63      	ldrb	r3, [r4, #13]
   21640:	079a      	lsls	r2, r3, #30
{
   21642:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   21644:	d515      	bpl.n	21672 <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   21646:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   2164a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2164e:	f06f 0001 	mvn.w	r0, #1
   21652:	428b      	cmp	r3, r1
   21654:	bf08      	it	eq
   21656:	4282      	cmpeq	r2, r0
   21658:	d014      	beq.n	21684 <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   2165a:	4620      	mov	r0, r4
   2165c:	f7ff fd8f 	bl	2117e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   21660:	2d08      	cmp	r5, #8
   21662:	bf0c      	ite	eq
   21664:	f06f 0303 	mvneq.w	r3, #3
   21668:	2300      	movne	r3, #0
   2166a:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
   2166c:	7b63      	ldrb	r3, [r4, #13]
   2166e:	06db      	lsls	r3, r3, #27
   21670:	d001      	beq.n	21676 <k_poll_poller_cb+0x3e>
		return 0;
   21672:	2000      	movs	r0, #0
}
   21674:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   21676:	69a5      	ldr	r5, [r4, #24]
   21678:	2d00      	cmp	r5, #0
   2167a:	d1fa      	bne.n	21672 <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   2167c:	4620      	mov	r0, r4
   2167e:	f7ff fda5 	bl	211cc <z_ready_thread>
	return 0;
   21682:	e7f6      	b.n	21672 <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   21684:	f06f 000a 	mvn.w	r0, #10
   21688:	e7f4      	b.n	21674 <k_poll_poller_cb+0x3c>

0002168a <add_event>:
{
   2168a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2168c:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2168e:	e9d0 2300 	ldrd	r2, r3, [r0]
   21692:	4290      	cmp	r0, r2
   21694:	4604      	mov	r4, r0
   21696:	460d      	mov	r5, r1
   21698:	d106      	bne.n	216a8 <add_event+0x1e>
	node->prev = list->tail;
   2169a:	6863      	ldr	r3, [r4, #4]
   2169c:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2169e:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   216a0:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   216a2:	601d      	str	r5, [r3, #0]
	list->tail = node;
   216a4:	6065      	str	r5, [r4, #4]
}
   216a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   216a8:	2b00      	cmp	r3, #0
   216aa:	d0f6      	beq.n	2169a <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   216ac:	689b      	ldr	r3, [r3, #8]
   216ae:	6879      	ldr	r1, [r7, #4]
   216b0:	6858      	ldr	r0, [r3, #4]
   216b2:	f7ff fd11 	bl	210d8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   216b6:	2800      	cmp	r0, #0
   216b8:	d1ef      	bne.n	2169a <add_event+0x10>
	return list->head == list;
   216ba:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   216bc:	42b4      	cmp	r4, r6
   216be:	d0ec      	beq.n	2169a <add_event+0x10>
   216c0:	2e00      	cmp	r6, #0
   216c2:	bf38      	it	cc
   216c4:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   216c6:	2e00      	cmp	r6, #0
   216c8:	d0e7      	beq.n	2169a <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   216ca:	68b3      	ldr	r3, [r6, #8]
   216cc:	6878      	ldr	r0, [r7, #4]
   216ce:	6859      	ldr	r1, [r3, #4]
   216d0:	f7ff fd02 	bl	210d8 <z_is_t1_higher_prio_than_t2>
   216d4:	b128      	cbz	r0, 216e2 <add_event+0x58>
	node->prev = successor->prev;
   216d6:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   216d8:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   216dc:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   216de:	6075      	str	r5, [r6, #4]
			return;
   216e0:	e7e1      	b.n	216a6 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   216e2:	6863      	ldr	r3, [r4, #4]
   216e4:	42b3      	cmp	r3, r6
   216e6:	d0d8      	beq.n	2169a <add_event+0x10>
   216e8:	6836      	ldr	r6, [r6, #0]
   216ea:	e7ec      	b.n	216c6 <add_event+0x3c>

000216ec <register_events>:
{
   216ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   216f0:	f04f 0a00 	mov.w	sl, #0
{
   216f4:	460e      	mov	r6, r1
   216f6:	4614      	mov	r4, r2
   216f8:	461f      	mov	r7, r3
   216fa:	4683      	mov	fp, r0
	int events_registered = 0;
   216fc:	4655      	mov	r5, sl
	event->poller = NULL;
   216fe:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   21700:	45b2      	cmp	sl, r6
   21702:	db02      	blt.n	2170a <register_events+0x1e>
}
   21704:	4628      	mov	r0, r5
   21706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2170a:	f04f 0320 	mov.w	r3, #32
   2170e:	f3ef 8911 	mrs	r9, BASEPRI
   21712:	f383 8811 	msr	BASEPRI, r3
   21716:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2171a:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2171e:	f002 020f 	and.w	r2, r2, #15
   21722:	2a02      	cmp	r2, #2
   21724:	d006      	beq.n	21734 <register_events+0x48>
   21726:	2a04      	cmp	r2, #4
   21728:	d008      	beq.n	2173c <register_events+0x50>
   2172a:	2a01      	cmp	r2, #1
   2172c:	d120      	bne.n	21770 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2172e:	f8db 3010 	ldr.w	r3, [fp, #16]
   21732:	e001      	b.n	21738 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0) {
   21734:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   21738:	689b      	ldr	r3, [r3, #8]
   2173a:	e002      	b.n	21742 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   2173c:	f8db 3010 	ldr.w	r3, [fp, #16]
   21740:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   21742:	b1ab      	cbz	r3, 21770 <register_events+0x84>
	event->state |= state;
   21744:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   21748:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   2174c:	f3c3 3104 	ubfx	r1, r3, #12, #5
   21750:	430a      	orrs	r2, r1
   21752:	f362 3310 	bfi	r3, r2, #12, #5
   21756:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   2175a:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2175e:	f389 8811 	msr	BASEPRI, r9
   21762:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   21766:	f10a 0a01 	add.w	sl, sl, #1
   2176a:	f10b 0b14 	add.w	fp, fp, #20
   2176e:	e7c7      	b.n	21700 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   21770:	2f00      	cmp	r7, #0
   21772:	d1f4      	bne.n	2175e <register_events+0x72>
   21774:	7823      	ldrb	r3, [r4, #0]
   21776:	2b00      	cmp	r3, #0
   21778:	d0f1      	beq.n	2175e <register_events+0x72>
	switch (event->type) {
   2177a:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2177e:	f003 030f 	and.w	r3, r3, #15
   21782:	2b02      	cmp	r3, #2
   21784:	d008      	beq.n	21798 <register_events+0xac>
   21786:	2b04      	cmp	r3, #4
   21788:	d006      	beq.n	21798 <register_events+0xac>
   2178a:	2b01      	cmp	r3, #1
   2178c:	d10b      	bne.n	217a6 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2178e:	f8db 0010 	ldr.w	r0, [fp, #16]
   21792:	4622      	mov	r2, r4
   21794:	4659      	mov	r1, fp
   21796:	e004      	b.n	217a2 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   21798:	f8db 0010 	ldr.w	r0, [fp, #16]
   2179c:	4622      	mov	r2, r4
   2179e:	4659      	mov	r1, fp
   217a0:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   217a2:	f7ff ff72 	bl	2168a <add_event>
	event->poller = poller;
   217a6:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   217aa:	3501      	adds	r5, #1
   217ac:	e7d7      	b.n	2175e <register_events+0x72>

000217ae <k_poll_event_init>:
{
   217ae:	b510      	push	{r4, lr}
	event->type = type;
   217b0:	0452      	lsls	r2, r2, #17
   217b2:	0209      	lsls	r1, r1, #8
   217b4:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   217b8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   217bc:	430a      	orrs	r2, r1
   217be:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   217c0:	2400      	movs	r4, #0
	event->type = type;
   217c2:	430a      	orrs	r2, r1
	event->obj = obj;
   217c4:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   217c8:	6084      	str	r4, [r0, #8]
}
   217ca:	bd10      	pop	{r4, pc}

000217cc <z_handle_obj_poll_events>:
{
   217cc:	4603      	mov	r3, r0
	return list->head == list;
   217ce:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   217d0:	4283      	cmp	r3, r0
   217d2:	d008      	beq.n	217e6 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   217d4:	e9d0 3200 	ldrd	r3, r2, [r0]
   217d8:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   217da:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   217dc:	2300      	movs	r3, #0
	node->prev = NULL;
   217de:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   217e2:	f7ff bf0e 	b.w	21602 <signal_poll_event>
}
   217e6:	4770      	bx	lr

000217e8 <k_mem_pool_malloc>:
{
   217e8:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   217ea:	2408      	movs	r4, #8
   217ec:	190a      	adds	r2, r1, r4
   217ee:	d208      	bcs.n	21802 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   217f0:	2600      	movs	r6, #0
   217f2:	2700      	movs	r7, #0
   217f4:	e9cd 6700 	strd	r6, r7, [sp]
   217f8:	eb0d 0104 	add.w	r1, sp, r4
   217fc:	f7ff fb6f 	bl	20ede <k_mem_pool_alloc>
   21800:	b110      	cbz	r0, 21808 <k_mem_pool_malloc+0x20>
		return NULL;
   21802:	2000      	movs	r0, #0
}
   21804:	b004      	add	sp, #16
   21806:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   21808:	9802      	ldr	r0, [sp, #8]
   2180a:	4622      	mov	r2, r4
   2180c:	a902      	add	r1, sp, #8
   2180e:	f7fd faf0 	bl	1edf2 <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   21812:	9802      	ldr	r0, [sp, #8]
   21814:	3008      	adds	r0, #8
   21816:	e7f5      	b.n	21804 <k_mem_pool_malloc+0x1c>

00021818 <k_free>:
	if (ptr != NULL) {
   21818:	b110      	cbz	r0, 21820 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   2181a:	3808      	subs	r0, #8
   2181c:	f7ff bb78 	b.w	20f10 <k_mem_pool_free_id>
}
   21820:	4770      	bx	lr

00021822 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   21822:	4770      	bx	lr
