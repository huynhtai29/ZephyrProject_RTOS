
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

08000000 <_vector_start>:
 8000000:	200007c8 	.word	0x200007c8
 8000004:	08000f65 	.word	0x08000f65
 8000008:	08002af5 	.word	0x08002af5
 800000c:	08000f91 	.word	0x08000f91
 8000010:	08000f91 	.word	0x08000f91
 8000014:	08000f91 	.word	0x08000f91
 8000018:	08000f91 	.word	0x08000f91
	...
 800002c:	08000df1 	.word	0x08000df1
 8000030:	08000f91 	.word	0x08000f91
 8000034:	00000000 	.word	0x00000000
 8000038:	08000da9 	.word	0x08000da9
 800003c:	08000bf5 	.word	0x08000bf5

08000040 <_irq_vector_table>:
 8000040:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000050:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000060:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000070:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000080:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000090:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 80000a0:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 80000b0:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 80000c0:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 80000d0:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 80000e0:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 80000f0:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000100:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000110:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000120:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000130:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000140:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000150:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000160:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000170:	08000f3d 08000f3d 08000f3d 08000f3d     =...=...=...=...
 8000180:	08000f3d 08000f3d                       =...=...

Disassembly of section text:

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000198:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800019c:	f000 b96e 	b.w	800047c <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9d08      	ldr	r5, [sp, #32]
 80001be:	460e      	mov	r6, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468c      	mov	ip, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8081 	bne.w	80002cc <__udivmoddi4+0x114>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d945      	bls.n	800025c <__udivmoddi4+0xa4>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa06 f302 	lsl.w	r3, r6, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0c03 	orr.w	ip, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbc f6fe 	udiv	r6, ip, lr
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb0e cc16 	mls	ip, lr, r6, ip
 80001fa:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 80001fe:	fb06 f001 	mul.w	r0, r6, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d909      	bls.n	800021a <__udivmoddi4+0x62>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800020c:	f080 8115 	bcs.w	800043a <__udivmoddi4+0x282>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8112 	bls.w	800043a <__udivmoddi4+0x282>
 8000216:	3e02      	subs	r6, #2
 8000218:	443b      	add	r3, r7
 800021a:	1a1b      	subs	r3, r3, r0
 800021c:	b2a4      	uxth	r4, r4
 800021e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000222:	fb0e 3310 	mls	r3, lr, r0, r3
 8000226:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022a:	fb00 f101 	mul.w	r1, r0, r1
 800022e:	42a1      	cmp	r1, r4
 8000230:	d909      	bls.n	8000246 <__udivmoddi4+0x8e>
 8000232:	193c      	adds	r4, r7, r4
 8000234:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000238:	f080 8101 	bcs.w	800043e <__udivmoddi4+0x286>
 800023c:	42a1      	cmp	r1, r4
 800023e:	f240 80fe 	bls.w	800043e <__udivmoddi4+0x286>
 8000242:	3802      	subs	r0, #2
 8000244:	443c      	add	r4, r7
 8000246:	1a64      	subs	r4, r4, r1
 8000248:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800024c:	2100      	movs	r1, #0
 800024e:	b11d      	cbz	r5, 8000258 <__udivmoddi4+0xa0>
 8000250:	40d4      	lsrs	r4, r2
 8000252:	2300      	movs	r3, #0
 8000254:	e9c5 4300 	strd	r4, r3, [r5]
 8000258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025c:	b902      	cbnz	r2, 8000260 <__udivmoddi4+0xa8>
 800025e:	deff      	udf	#255	; 0xff
 8000260:	fab2 f282 	clz	r2, r2
 8000264:	2a00      	cmp	r2, #0
 8000266:	d14f      	bne.n	8000308 <__udivmoddi4+0x150>
 8000268:	1bcb      	subs	r3, r1, r7
 800026a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026e:	fa1f f887 	uxth.w	r8, r7
 8000272:	2101      	movs	r1, #1
 8000274:	fbb3 fcfe 	udiv	ip, r3, lr
 8000278:	0c26      	lsrs	r6, r4, #16
 800027a:	fb0e 331c 	mls	r3, lr, ip, r3
 800027e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8000282:	fb08 f30c 	mul.w	r3, r8, ip
 8000286:	42b3      	cmp	r3, r6
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0xe2>
 800028a:	19be      	adds	r6, r7, r6
 800028c:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0xe0>
 8000292:	42b3      	cmp	r3, r6
 8000294:	f200 80eb 	bhi.w	800046e <__udivmoddi4+0x2b6>
 8000298:	4684      	mov	ip, r0
 800029a:	1af6      	subs	r6, r6, r3
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb6 f0fe 	udiv	r0, r6, lr
 80002a2:	fb0e 6610 	mls	r6, lr, r0, r6
 80002a6:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80002aa:	fb08 f800 	mul.w	r8, r8, r0
 80002ae:	45a0      	cmp	r8, r4
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0x10a>
 80002b2:	193c      	adds	r4, r7, r4
 80002b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x108>
 80002ba:	45a0      	cmp	r8, r4
 80002bc:	f200 80d2 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002c0:	4618      	mov	r0, r3
 80002c2:	eba4 0408 	sub.w	r4, r4, r8
 80002c6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002ca:	e7c0      	b.n	800024e <__udivmoddi4+0x96>
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x12a>
 80002d0:	2d00      	cmp	r5, #0
 80002d2:	f000 80af 	beq.w	8000434 <__udivmoddi4+0x27c>
 80002d6:	2100      	movs	r1, #0
 80002d8:	e9c5 0600 	strd	r0, r6, [r5]
 80002dc:	4608      	mov	r0, r1
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d149      	bne.n	800037e <__udivmoddi4+0x1c6>
 80002ea:	42b3      	cmp	r3, r6
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0x13c>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80bb 	bhi.w	800046a <__udivmoddi4+0x2b2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb66 0303 	sbc.w	r3, r6, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469c      	mov	ip, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0aa      	beq.n	8000258 <__udivmoddi4+0xa0>
 8000302:	e9c5 4c00 	strd	r4, ip, [r5]
 8000306:	e7a7      	b.n	8000258 <__udivmoddi4+0xa0>
 8000308:	f1c2 0320 	rsb	r3, r2, #32
 800030c:	4097      	lsls	r7, r2
 800030e:	40d8      	lsrs	r0, r3
 8000310:	4091      	lsls	r1, r2
 8000312:	40de      	lsrs	r6, r3
 8000314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000318:	4308      	orrs	r0, r1
 800031a:	ea4f 4c10 	mov.w	ip, r0, lsr #16
 800031e:	fbb6 f1fe 	udiv	r1, r6, lr
 8000322:	fa1f f887 	uxth.w	r8, r7
 8000326:	fb0e 6611 	mls	r6, lr, r1, r6
 800032a:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 800032e:	fb01 f308 	mul.w	r3, r1, r8
 8000332:	42b3      	cmp	r3, r6
 8000334:	fa04 f402 	lsl.w	r4, r4, r2
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x196>
 800033a:	19be      	adds	r6, r7, r6
 800033c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8000340:	f080 808e 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 8000344:	42b3      	cmp	r3, r6
 8000346:	f240 808b 	bls.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	3902      	subs	r1, #2
 800034c:	443e      	add	r6, r7
 800034e:	1af3      	subs	r3, r6, r3
 8000350:	b286      	uxth	r6, r0
 8000352:	fbb3 f0fe 	udiv	r0, r3, lr
 8000356:	fb0e 3310 	mls	r3, lr, r0, r3
 800035a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800035e:	fb00 f308 	mul.w	r3, r0, r8
 8000362:	42b3      	cmp	r3, r6
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x1be>
 8000366:	19be      	adds	r6, r7, r6
 8000368:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800036c:	d274      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 800036e:	42b3      	cmp	r3, r6
 8000370:	d972      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000372:	3802      	subs	r0, #2
 8000374:	443e      	add	r6, r7
 8000376:	1af3      	subs	r3, r6, r3
 8000378:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800037c:	e77a      	b.n	8000274 <__udivmoddi4+0xbc>
 800037e:	f1c1 0720 	rsb	r7, r1, #32
 8000382:	fa03 f401 	lsl.w	r4, r3, r1
 8000386:	fa22 f307 	lsr.w	r3, r2, r7
 800038a:	431c      	orrs	r4, r3
 800038c:	fa20 f907 	lsr.w	r9, r0, r7
 8000390:	fa06 f301 	lsl.w	r3, r6, r1
 8000394:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000398:	40fe      	lsrs	r6, r7
 800039a:	ea49 0903 	orr.w	r9, r9, r3
 800039e:	ea4f 4319 	mov.w	r3, r9, lsr #16
 80003a2:	fbb6 fefc 	udiv	lr, r6, ip
 80003a6:	fa1f f884 	uxth.w	r8, r4
 80003aa:	fb0c 661e 	mls	r6, ip, lr, r6
 80003ae:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003b2:	fb0e fa08 	mul.w	sl, lr, r8
 80003b6:	45b2      	cmp	sl, r6
 80003b8:	fa02 f201 	lsl.w	r2, r2, r1
 80003bc:	fa00 f301 	lsl.w	r3, r0, r1
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x21c>
 80003c2:	19a6      	adds	r6, r4, r6
 80003c4:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 80003c8:	d248      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003ca:	45b2      	cmp	sl, r6
 80003cc:	d946      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003ce:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d2:	4426      	add	r6, r4
 80003d4:	eba6 060a 	sub.w	r6, r6, sl
 80003d8:	fa1f f989 	uxth.w	r9, r9
 80003dc:	fbb6 f0fc 	udiv	r0, r6, ip
 80003e0:	fb0c 6610 	mls	r6, ip, r0, r6
 80003e4:	ea49 4606 	orr.w	r6, r9, r6, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45b0      	cmp	r8, r6
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	19a6      	adds	r6, r4, r6
 80003f2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45b0      	cmp	r8, r6
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	4426      	add	r6, r4
 8000400:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000404:	eba6 0608 	sub.w	r6, r6, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454e      	cmp	r6, r9
 800040e:	46c4      	mov	ip, r8
 8000410:	46ce      	mov	lr, r9
 8000412:	d318      	bcc.n	8000446 <__udivmoddi4+0x28e>
 8000414:	d015      	beq.n	8000442 <__udivmoddi4+0x28a>
 8000416:	b375      	cbz	r5, 8000476 <__udivmoddi4+0x2be>
 8000418:	ebb3 020c 	subs.w	r2, r3, ip
 800041c:	eb66 060e 	sbc.w	r6, r6, lr
 8000420:	fa06 f707 	lsl.w	r7, r6, r7
 8000424:	fa22 f301 	lsr.w	r3, r2, r1
 8000428:	40ce      	lsrs	r6, r1
 800042a:	431f      	orrs	r7, r3
 800042c:	e9c5 7600 	strd	r7, r6, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e711      	b.n	8000258 <__udivmoddi4+0xa0>
 8000434:	4629      	mov	r1, r5
 8000436:	4628      	mov	r0, r5
 8000438:	e70e      	b.n	8000258 <__udivmoddi4+0xa0>
 800043a:	4666      	mov	r6, ip
 800043c:	e6ed      	b.n	800021a <__udivmoddi4+0x62>
 800043e:	4618      	mov	r0, r3
 8000440:	e701      	b.n	8000246 <__udivmoddi4+0x8e>
 8000442:	4543      	cmp	r3, r8
 8000444:	d2e7      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000446:	ebb8 0c02 	subs.w	ip, r8, r2
 800044a:	eb69 0404 	sbc.w	r4, r9, r4
 800044e:	3801      	subs	r0, #1
 8000450:	46a6      	mov	lr, r4
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4660      	mov	r0, ip
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78c      	b.n	8000376 <__udivmoddi4+0x1be>
 800045c:	4686      	mov	lr, r0
 800045e:	e7b9      	b.n	80003d4 <__udivmoddi4+0x21c>
 8000460:	4661      	mov	r1, ip
 8000462:	e774      	b.n	800034e <__udivmoddi4+0x196>
 8000464:	3802      	subs	r0, #2
 8000466:	443c      	add	r4, r7
 8000468:	e72b      	b.n	80002c2 <__udivmoddi4+0x10a>
 800046a:	4608      	mov	r0, r1
 800046c:	e747      	b.n	80002fe <__udivmoddi4+0x146>
 800046e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000472:	443e      	add	r6, r7
 8000474:	e711      	b.n	800029a <__udivmoddi4+0xe2>
 8000476:	4629      	mov	r1, r5
 8000478:	e6ee      	b.n	8000258 <__udivmoddi4+0xa0>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
#ifndef FLAGS
#define FLAGS	0
#endif

void main(void)
{
 8000480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8000482:	4819      	ldr	r0, [pc, #100]	; (80004e8 <main+0x68>)
 8000484:	f001 fc12 	bl	8001cac <z_impl_device_get_binding>
	struct device *dev;
	bool led_is_on = true;
	int ret;

	dev = device_get_binding(LED1);
	if (dev == NULL) {
 8000488:	4604      	mov	r4, r0
 800048a:	b340      	cbz	r0, 80004de <main+0x5e>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config_info;
	struct gpio_driver_data *data =
 800048c:	68c5      	ldr	r5, [r0, #12]
	return api->pin_configure(port, pin, flags);
 800048e:	6883      	ldr	r3, [r0, #8]
 8000490:	f44f 52d0 	mov.w	r2, #6656	; 0x1a00
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	210d      	movs	r1, #13
 8000498:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
 800049a:	2800      	cmp	r0, #0
 800049c:	d11e      	bne.n	80004dc <main+0x5c>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
 800049e:	682b      	ldr	r3, [r5, #0]
 80004a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004a4:	602b      	str	r3, [r5, #0]
	}

	while (1) {
		gpio_pin_set(dev, PIN, (int)led_is_on);
		led_is_on = !led_is_on;
		printk("hello world");
 80004a6:	4f11      	ldr	r7, [pc, #68]	; (80004ec <main+0x6c>)
{
 80004a8:	2501      	movs	r5, #1

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
 80004aa:	68e3      	ldr	r3, [r4, #12]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f085 0601 	eor.w	r6, r5, #1
 80004b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
		value = (value != 0) ? 0 : 1;
 80004b6:	bf18      	it	ne
 80004b8:	b2f5      	uxtbne	r5, r6
	if (value != 0)	{
 80004ba:	b18d      	cbz	r5, 80004e0 <main+0x60>
	return api->port_set_bits_raw(port, pins);
 80004bc:	68a3      	ldr	r3, [r4, #8]
 80004be:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	4620      	mov	r0, r4
 80004c6:	4798      	blx	r3
		printk("hello world");
 80004c8:	4638      	mov	r0, r7
 80004ca:	f002 f99b 	bl	8002804 <printk>
		led_is_on = !led_is_on;
 80004ce:	b2f5      	uxtb	r5, r6
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
 80004d0:	2100      	movs	r1, #0
 80004d2:	f242 7010 	movw	r0, #10000	; 0x2710
 80004d6:	f001 ff91 	bl	80023fc <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
 80004da:	e7e6      	b.n	80004aa <main+0x2a>
	if (ret < 0) {
 80004dc:	dae3      	bge.n	80004a6 <main+0x26>
		k_msleep(SLEEP_TIME_MS);
	}
}
 80004de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004e0:	68a3      	ldr	r3, [r4, #8]
 80004e2:	691b      	ldr	r3, [r3, #16]
 80004e4:	e7ec      	b.n	80004c0 <main+0x40>
 80004e6:	bf00      	nop
 80004e8:	080036b2 	.word	0x080036b2
 80004ec:	080036b8 	.word	0x080036b8

080004f0 <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, int base,
			 bool pad_before, char pad_char, int min_width)
{
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	b087      	sub	sp, #28
 80004f6:	460f      	mov	r7, r1
 80004f8:	4619      	mov	r1, r3
	char buf[DIGITS_BUFLEN];
	int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
		buf[i] = "0123456789abcdef"[num % base];
 80004fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
{
 80004fc:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
 8000500:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
		buf[i] = "0123456789abcdef"[num % base];
 8000504:	4c1f      	ldr	r4, [pc, #124]	; (8000584 <print_digits+0x94>)
{
 8000506:	4606      	mov	r6, r0
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8000508:	2514      	movs	r5, #20
{
 800050a:	4610      	mov	r0, r2
		buf[i] = "0123456789abcdef"[num % base];
 800050c:	4698      	mov	r8, r3
 800050e:	ea4f 79e3 	mov.w	r9, r3, asr #31
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8000512:	ea50 0301 	orrs.w	r3, r0, r1
 8000516:	d119      	bne.n	800054c <print_digits+0x5c>
		num /= base;
	}

	if (i == DIGITS_BUFLEN - 1) {
 8000518:	2d14      	cmp	r5, #20
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 800051a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
		i++;
 800051c:	bf14      	ite	ne
 800051e:	3501      	addne	r5, #1
		buf[i] = '0';
 8000520:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 8000522:	442c      	add	r4, r5
		buf[i] = '0';
 8000524:	bf08      	it	eq
 8000526:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 800052a:	2c15      	cmp	r4, #21
 800052c:	d01b      	beq.n	8000566 <print_digits+0x76>
 800052e:	3c15      	subs	r4, #21

	for (/**/; pad > 0 && pad_before; pad--) {
 8000530:	2c00      	cmp	r4, #0
 8000532:	dc1a      	bgt.n	800056a <print_digits+0x7a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
		out(buf[i], ctx);
 8000534:	f81d 0005 	ldrb.w	r0, [sp, r5]
 8000538:	4639      	mov	r1, r7
	for (/**/; i < DIGITS_BUFLEN; i++) {
 800053a:	3501      	adds	r5, #1
		out(buf[i], ctx);
 800053c:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
 800053e:	2d15      	cmp	r5, #21
 8000540:	d1f8      	bne.n	8000534 <print_digits+0x44>
	}
	for (/**/; pad > 0; pad--) {
 8000542:	2c00      	cmp	r4, #0
 8000544:	dc19      	bgt.n	800057a <print_digits+0x8a>
		out(pad_char, ctx);
	}
}
 8000546:	b007      	add	sp, #28
 8000548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf[i] = "0123456789abcdef"[num % base];
 800054c:	4642      	mov	r2, r8
 800054e:	464b      	mov	r3, r9
 8000550:	f7ff fe1a 	bl	8000188 <__aeabi_uldivmod>
 8000554:	5ca2      	ldrb	r2, [r4, r2]
 8000556:	f80d 2005 	strb.w	r2, [sp, r5]
 800055a:	4684      	mov	ip, r0
 800055c:	460b      	mov	r3, r1
		num /= base;
 800055e:	4660      	mov	r0, ip
 8000560:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1; num != 0; i--) {
 8000562:	3d01      	subs	r5, #1
 8000564:	e7d5      	b.n	8000512 <print_digits+0x22>
	int pad = MAX(min_width - (DIGITS_BUFLEN - i), 0);
 8000566:	2400      	movs	r4, #0
	for (/**/; i < DIGITS_BUFLEN; i++) {
 8000568:	e7e4      	b.n	8000534 <print_digits+0x44>
	for (/**/; pad > 0 && pad_before; pad--) {
 800056a:	f1bb 0f00 	cmp.w	fp, #0
 800056e:	d0e1      	beq.n	8000534 <print_digits+0x44>
		out(pad_char, ctx);
 8000570:	4639      	mov	r1, r7
 8000572:	4650      	mov	r0, sl
 8000574:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
 8000576:	3c01      	subs	r4, #1
 8000578:	e7da      	b.n	8000530 <print_digits+0x40>
		out(pad_char, ctx);
 800057a:	4639      	mov	r1, r7
 800057c:	4650      	mov	r0, sl
 800057e:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
 8000580:	3c01      	subs	r4, #1
 8000582:	e7de      	b.n	8000542 <print_digits+0x52>
 8000584:	080036c4 	.word	0x080036c4

08000588 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8000588:	680b      	ldr	r3, [r1, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800058e:	4b01      	ldr	r3, [pc, #4]	; (8000594 <char_out+0xc>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4718      	bx	r3
 8000594:	20000000 	.word	0x20000000

08000598 <__printk_hook_install>:
	_char_out = fn;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <__printk_hook_install+0x8>)
 800059a:	6018      	str	r0, [r3, #0]
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000000 	.word	0x20000000

080005a4 <z_vprintk>:
{
 80005a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
 80005a8:	2600      	movs	r6, #0
{
 80005aa:	b087      	sub	sp, #28
 80005ac:	4605      	mov	r5, r0
 80005ae:	468b      	mov	fp, r1
 80005b0:	461c      	mov	r4, r3
	while (*fmt) {
 80005b2:	f102 39ff 	add.w	r9, r2, #4294967295	; 0xffffffff
	int min_width = -1;
 80005b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 80005ba:	4637      	mov	r7, r6
			might_format = 0;
 80005bc:	2300      	movs	r3, #0
					break;
 80005be:	e007      	b.n	80005d0 <z_vprintk+0x2c>
		if (!might_format) {
 80005c0:	b96b      	cbnz	r3, 80005de <z_vprintk+0x3a>
			if (*fmt != '%') {
 80005c2:	2825      	cmp	r0, #37	; 0x25
 80005c4:	f000 80fc 	beq.w	80007c0 <z_vprintk+0x21c>
				out((int)*fmt, ctx);
 80005c8:	4659      	mov	r1, fp
 80005ca:	9304      	str	r3, [sp, #16]
 80005cc:	47a8      	blx	r5
 80005ce:	9b04      	ldr	r3, [sp, #16]
	while (*fmt) {
 80005d0:	f819 0f01 	ldrb.w	r0, [r9, #1]!
 80005d4:	2800      	cmp	r0, #0
 80005d6:	d1f3      	bne.n	80005c0 <z_vprintk+0x1c>
}
 80005d8:	b007      	add	sp, #28
 80005da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80005de:	287a      	cmp	r0, #122	; 0x7a
 80005e0:	d80a      	bhi.n	80005f8 <z_vprintk+0x54>
 80005e2:	2862      	cmp	r0, #98	; 0x62
 80005e4:	d810      	bhi.n	8000608 <z_vprintk+0x64>
 80005e6:	2830      	cmp	r0, #48	; 0x30
 80005e8:	d052      	beq.n	8000690 <z_vprintk+0xec>
 80005ea:	d845      	bhi.n	8000678 <z_vprintk+0xd4>
 80005ec:	2825      	cmp	r0, #37	; 0x25
 80005ee:	f000 80e5 	beq.w	80007bc <z_vprintk+0x218>
 80005f2:	282d      	cmp	r0, #45	; 0x2d
 80005f4:	f000 80ea 	beq.w	80007cc <z_vprintk+0x228>
					out((int)'%', ctx);
 80005f8:	4659      	mov	r1, fp
 80005fa:	2025      	movs	r0, #37	; 0x25
 80005fc:	47a8      	blx	r5
					out((int)*fmt, ctx);
 80005fe:	f899 0000 	ldrb.w	r0, [r9]
 8000602:	4659      	mov	r1, fp
 8000604:	47a8      	blx	r5
 8000606:	e7d9      	b.n	80005bc <z_vprintk+0x18>
 8000608:	f1a0 0263 	sub.w	r2, r0, #99	; 0x63
 800060c:	2a17      	cmp	r2, #23
 800060e:	d8f3      	bhi.n	80005f8 <z_vprintk+0x54>
 8000610:	a101      	add	r1, pc, #4	; (adr r1, 8000618 <z_vprintk+0x74>)
 8000612:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000616:	bf00      	nop
 8000618:	080007b5 	.word	0x080007b5
 800061c:	080006d9 	.word	0x080006d9
 8000620:	080005f9 	.word	0x080005f9
 8000624:	080005f9 	.word	0x080005f9
 8000628:	080005f9 	.word	0x080005f9
 800062c:	080006bb 	.word	0x080006bb
 8000630:	080006d9 	.word	0x080006d9
 8000634:	080005f9 	.word	0x080005f9
 8000638:	080005f9 	.word	0x080005f9
 800063c:	080006bb 	.word	0x080006bb
 8000640:	080005f9 	.word	0x080005f9
 8000644:	080005f9 	.word	0x080005f9
 8000648:	080005f9 	.word	0x080005f9
 800064c:	0800073d 	.word	0x0800073d
 8000650:	080005f9 	.word	0x080005f9
 8000654:	080005f9 	.word	0x080005f9
 8000658:	0800077f 	.word	0x0800077f
 800065c:	080005f9 	.word	0x080005f9
 8000660:	080006d9 	.word	0x080006d9
 8000664:	080005f9 	.word	0x080005f9
 8000668:	080005f9 	.word	0x080005f9
 800066c:	08000681 	.word	0x08000681
 8000670:	080005f9 	.word	0x080005f9
 8000674:	080006bb 	.word	0x080006bb
			switch (*fmt) {
 8000678:	2839      	cmp	r0, #57	; 0x39
 800067a:	d915      	bls.n	80006a8 <z_vprintk+0x104>
 800067c:	2858      	cmp	r0, #88	; 0x58
 800067e:	d1bb      	bne.n	80005f8 <z_vprintk+0x54>
				if (*fmt == 'p') {
 8000680:	f899 3000 	ldrb.w	r3, [r9]
 8000684:	2b70      	cmp	r3, #112	; 0x70
 8000686:	d163      	bne.n	8000750 <z_vprintk+0x1ac>
					x = va_arg(ap, unsigned int);
 8000688:	f854 2b04 	ldr.w	r2, [r4], #4
 800068c:	2300      	movs	r3, #0
 800068e:	e06a      	b.n	8000766 <z_vprintk+0x1c2>
				if (min_width < 0 && padding == PAD_NONE) {
 8000690:	f1b8 0f00 	cmp.w	r8, #0
 8000694:	da0b      	bge.n	80006ae <z_vprintk+0x10a>
 8000696:	2f00      	cmp	r7, #0
 8000698:	f000 809a 	beq.w	80007d0 <z_vprintk+0x22c>
					min_width = *fmt - '0';
 800069c:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 80006a0:	2f00      	cmp	r7, #0
 80006a2:	bf08      	it	eq
 80006a4:	2702      	moveq	r7, #2
 80006a6:	e793      	b.n	80005d0 <z_vprintk+0x2c>
				if (min_width < 0) {
 80006a8:	f1b8 0f00 	cmp.w	r8, #0
 80006ac:	dbf6      	blt.n	800069c <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
 80006ae:	220a      	movs	r2, #10
 80006b0:	fb02 0808 	mla	r8, r2, r8, r0
 80006b4:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 80006b8:	e7f2      	b.n	80006a0 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
 80006ba:	2868      	cmp	r0, #104	; 0x68
 80006bc:	d103      	bne.n	80006c6 <z_vprintk+0x122>
 80006be:	2e68      	cmp	r6, #104	; 0x68
 80006c0:	d106      	bne.n	80006d0 <z_vprintk+0x12c>
					length_mod = 'H';
 80006c2:	2648      	movs	r6, #72	; 0x48
 80006c4:	e784      	b.n	80005d0 <z_vprintk+0x2c>
				} else if (*fmt == 'l' && length_mod == 'l') {
 80006c6:	286c      	cmp	r0, #108	; 0x6c
 80006c8:	d102      	bne.n	80006d0 <z_vprintk+0x12c>
 80006ca:	2e6c      	cmp	r6, #108	; 0x6c
 80006cc:	f000 8082 	beq.w	80007d4 <z_vprintk+0x230>
				} else if (length_mod == 0) {
 80006d0:	2e00      	cmp	r6, #0
 80006d2:	d191      	bne.n	80005f8 <z_vprintk+0x54>
 80006d4:	4606      	mov	r6, r0
 80006d6:	e77b      	b.n	80005d0 <z_vprintk+0x2c>
				if (length_mod == 'z') {
 80006d8:	2e7a      	cmp	r6, #122	; 0x7a
 80006da:	d103      	bne.n	80006e4 <z_vprintk+0x140>
					d = va_arg(ap, int);
 80006dc:	f854 2b04 	ldr.w	r2, [r4], #4
 80006e0:	17d3      	asrs	r3, r2, #31
 80006e2:	e008      	b.n	80006f6 <z_vprintk+0x152>
				} else if (length_mod == 'l') {
 80006e4:	2e6c      	cmp	r6, #108	; 0x6c
 80006e6:	d0f9      	beq.n	80006dc <z_vprintk+0x138>
				} else if (length_mod == 'L') {
 80006e8:	2e4c      	cmp	r6, #76	; 0x4c
 80006ea:	d1f7      	bne.n	80006dc <z_vprintk+0x138>
					long long lld = va_arg(ap, long long);
 80006ec:	3407      	adds	r4, #7
 80006ee:	f024 0407 	bic.w	r4, r4, #7
					d = (printk_val_t) lld;
 80006f2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				if (*fmt != 'u' && negative(d)) {
 80006f6:	2875      	cmp	r0, #117	; 0x75
 80006f8:	d00f      	beq.n	800071a <z_vprintk+0x176>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	f173 0100 	sbcs.w	r1, r3, #0
 8000700:	da0b      	bge.n	800071a <z_vprintk+0x176>
					out((int)'-', ctx);
 8000702:	4659      	mov	r1, fp
 8000704:	202d      	movs	r0, #45	; 0x2d
 8000706:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800070a:	47a8      	blx	r5
					d = -d;
 800070c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8000710:	4252      	negs	r2, r2
 8000712:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
 8000716:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
	print_digits(out, ctx, num, 10, padding != PAD_SPACE_AFTER,
 800071a:	1ef9      	subs	r1, r7, #3
 800071c:	bf18      	it	ne
 800071e:	2101      	movne	r1, #1
 8000720:	2f01      	cmp	r7, #1
 8000722:	bf0c      	ite	eq
 8000724:	2030      	moveq	r0, #48	; 0x30
 8000726:	2020      	movne	r0, #32
 8000728:	e9cd 0802 	strd	r0, r8, [sp, #8]
 800072c:	9101      	str	r1, [sp, #4]
 800072e:	210a      	movs	r1, #10
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
 8000730:	9100      	str	r1, [sp, #0]
 8000732:	4628      	mov	r0, r5
 8000734:	4659      	mov	r1, fp
 8000736:	f7ff fedb 	bl	80004f0 <print_digits>
 800073a:	e73f      	b.n	80005bc <z_vprintk+0x18>
				out('0', ctx);
 800073c:	4659      	mov	r1, fp
 800073e:	2030      	movs	r0, #48	; 0x30
 8000740:	47a8      	blx	r5
				out('x', ctx);
 8000742:	4659      	mov	r1, fp
 8000744:	2078      	movs	r0, #120	; 0x78
 8000746:	47a8      	blx	r5
				min_width = sizeof(void *) * 2;
 8000748:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
 800074c:	2701      	movs	r7, #1
 800074e:	e797      	b.n	8000680 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
 8000750:	2e6c      	cmp	r6, #108	; 0x6c
 8000752:	d099      	beq.n	8000688 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
 8000754:	2e4c      	cmp	r6, #76	; 0x4c
 8000756:	d197      	bne.n	8000688 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
 8000758:	1de3      	adds	r3, r4, #7
 800075a:	f023 0307 	bic.w	r3, r3, #7
 800075e:	461c      	mov	r4, r3
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16, padding != PAD_SPACE_AFTER,
 8000766:	1ef9      	subs	r1, r7, #3
 8000768:	bf18      	it	ne
 800076a:	2101      	movne	r1, #1
 800076c:	2f01      	cmp	r7, #1
 800076e:	bf0c      	ite	eq
 8000770:	2030      	moveq	r0, #48	; 0x30
 8000772:	2020      	movne	r0, #32
 8000774:	9101      	str	r1, [sp, #4]
 8000776:	e9cd 0802 	strd	r0, r8, [sp, #8]
 800077a:	2110      	movs	r1, #16
 800077c:	e7d8      	b.n	8000730 <z_vprintk+0x18c>
				char *s = va_arg(ap, char *);
 800077e:	46a2      	mov	sl, r4
 8000780:	f85a 3b04 	ldr.w	r3, [sl], #4
				while (*s) {
 8000784:	461c      	mov	r4, r3
 8000786:	4621      	mov	r1, r4
 8000788:	f814 0b01 	ldrb.w	r0, [r4], #1
 800078c:	b940      	cbnz	r0, 80007a0 <z_vprintk+0x1fc>
				if (padding == PAD_SPACE_AFTER) {
 800078e:	2f03      	cmp	r7, #3
 8000790:	d122      	bne.n	80007d8 <z_vprintk+0x234>
					int remaining = min_width - (s - start);
 8000792:	1acc      	subs	r4, r1, r3
 8000794:	eba8 0404 	sub.w	r4, r8, r4
					while (remaining-- > 0) {
 8000798:	2c00      	cmp	r4, #0
 800079a:	dc06      	bgt.n	80007aa <z_vprintk+0x206>
				char *s = va_arg(ap, char *);
 800079c:	4654      	mov	r4, sl
 800079e:	e70d      	b.n	80005bc <z_vprintk+0x18>
					out((int)(*s++), ctx);
 80007a0:	4659      	mov	r1, fp
 80007a2:	9304      	str	r3, [sp, #16]
 80007a4:	47a8      	blx	r5
 80007a6:	9b04      	ldr	r3, [sp, #16]
 80007a8:	e7ed      	b.n	8000786 <z_vprintk+0x1e2>
						out(' ', ctx);
 80007aa:	4659      	mov	r1, fp
 80007ac:	2020      	movs	r0, #32
 80007ae:	47a8      	blx	r5
 80007b0:	3c01      	subs	r4, #1
 80007b2:	e7f1      	b.n	8000798 <z_vprintk+0x1f4>
				out(c, ctx);
 80007b4:	f854 0b04 	ldr.w	r0, [r4], #4
 80007b8:	4659      	mov	r1, fp
 80007ba:	e723      	b.n	8000604 <z_vprintk+0x60>
				out((int)'%', ctx);
 80007bc:	4659      	mov	r1, fp
 80007be:	e721      	b.n	8000604 <z_vprintk+0x60>
				length_mod = 0;
 80007c0:	461e      	mov	r6, r3
				padding = PAD_NONE;
 80007c2:	461f      	mov	r7, r3
				min_width = -1;
 80007c4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e701      	b.n	80005d0 <z_vprintk+0x2c>
			switch (*fmt) {
 80007cc:	2703      	movs	r7, #3
 80007ce:	e6ff      	b.n	80005d0 <z_vprintk+0x2c>
					padding = PAD_ZERO_BEFORE;
 80007d0:	2701      	movs	r7, #1
 80007d2:	e6fd      	b.n	80005d0 <z_vprintk+0x2c>
					length_mod = 'L';
 80007d4:	264c      	movs	r6, #76	; 0x4c
 80007d6:	e6fb      	b.n	80005d0 <z_vprintk+0x2c>
				char *s = va_arg(ap, char *);
 80007d8:	4654      	mov	r4, sl
			might_format = 0;
 80007da:	4603      	mov	r3, r0
 80007dc:	e6f8      	b.n	80005d0 <z_vprintk+0x2c>
 80007de:	bf00      	nop

080007e0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
 80007e0:	b507      	push	{r0, r1, r2, lr}
 80007e2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
 80007e4:	2100      	movs	r1, #0
{
 80007e6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
 80007e8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <vprintk+0x18>)
 80007ec:	a901      	add	r1, sp, #4
 80007ee:	f7ff fed9 	bl	80005a4 <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
 80007f2:	b003      	add	sp, #12
 80007f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80007f8:	08000589 	.word	0x08000589

080007fc <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 80007fc:	f04f 0210 	mov.w	r2, #16
 8000800:	f3ef 8311 	mrs	r3, BASEPRI
 8000804:	f382 8811 	msr	BASEPRI, r2
 8000808:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 800080c:	f383 8811 	msr	BASEPRI, r3
 8000810:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8000814:	4b02      	ldr	r3, [pc, #8]	; (8000820 <st_stm32f4_init+0x24>)
 8000816:	4a03      	ldr	r2, [pc, #12]	; (8000824 <st_stm32f4_init+0x28>)
 8000818:	601a      	str	r2, [r3, #0]

	return 0;
}
 800081a:	2000      	movs	r0, #0
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000002c 	.word	0x2000002c
 8000824:	00f42400 	.word	0x00f42400

08000828 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8000828:	b510      	push	{r4, lr}
 800082a:	4807      	ldr	r0, [pc, #28]	; (8000848 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
 800082c:	4c07      	ldr	r4, [pc, #28]	; (800084c <uart_console_init+0x24>)
 800082e:	f001 fa3d 	bl	8001cac <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <uart_console_init+0x28>)
 8000834:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
 8000836:	4620      	mov	r0, r4
 8000838:	f000 fd68 	bl	800130c <__stdout_hook_install>
	__printk_hook_install(console_out);
 800083c:	4620      	mov	r0, r4
 800083e:	f7ff feab 	bl	8000598 <__printk_hook_install>
#endif

	uart_console_hook_install();

	return 0;
}
 8000842:	2000      	movs	r0, #0
 8000844:	bd10      	pop	{r4, pc}
 8000846:	bf00      	nop
 8000848:	080036d5 	.word	0x080036d5
 800084c:	08000855 	.word	0x08000855
 8000850:	20000248 	.word	0x20000248

08000854 <console_out>:
	if ('\n' == c) {
 8000854:	280a      	cmp	r0, #10
{
 8000856:	b538      	push	{r3, r4, r5, lr}
 8000858:	4d07      	ldr	r5, [pc, #28]	; (8000878 <console_out+0x24>)
 800085a:	4604      	mov	r4, r0
	if ('\n' == c) {
 800085c:	d104      	bne.n	8000868 <console_out+0x14>
 800085e:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 8000860:	6883      	ldr	r3, [r0, #8]
 8000862:	210d      	movs	r1, #13
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
 8000868:	6828      	ldr	r0, [r5, #0]
 800086a:	6883      	ldr	r3, [r0, #8]
 800086c:	b2e1      	uxtb	r1, r4
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4798      	blx	r3
}
 8000872:	4620      	mov	r0, r4
 8000874:	bd38      	pop	{r3, r4, r5, pc}
 8000876:	bf00      	nop
 8000878:	20000248 	.word	0x20000248

0800087c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 800087c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8000880:	68d6      	ldr	r6, [r2, #12]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000882:	4f0d      	ldr	r7, [pc, #52]	; (80008b8 <__stm32_exti_isr+0x3c>)
{
 8000884:	4604      	mov	r4, r0
 8000886:	460d      	mov	r5, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8000888:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800088c:	f106 0904 	add.w	r9, r6, #4
	for (line = min; line < max; line++) {
 8000890:	42ac      	cmp	r4, r5
 8000892:	db01      	blt.n	8000898 <__stm32_exti_isr+0x1c>
		}
	}
}
 8000894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000898:	697a      	ldr	r2, [r7, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800089a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800089e:	ea33 0202 	bics.w	r2, r3, r2
 80008a2:	d107      	bne.n	80008b4 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80008a4:	617b      	str	r3, [r7, #20]
			if (!data->cb[line].cb) {
 80008a6:	f856 3034 	ldr.w	r3, [r6, r4, lsl #3]
 80008aa:	b11b      	cbz	r3, 80008b4 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 80008ac:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 80008b0:	4620      	mov	r0, r4
 80008b2:	4798      	blx	r3
	for (line = min; line < max; line++) {
 80008b4:	3401      	adds	r4, #1
 80008b6:	e7eb      	b.n	8000890 <__stm32_exti_isr+0x14>
 80008b8:	40013c00 	.word	0x40013c00

080008bc <stm32_exti_enable>:
  SET_BIT(EXTI->IMR, ExtiLine);
 80008bc:	4a04      	ldr	r2, [pc, #16]	; (80008d0 <stm32_exti_enable+0x14>)
	LL_EXTI_EnableIT_0_31(1 << line);
 80008be:	2301      	movs	r3, #1
 80008c0:	6811      	ldr	r1, [r2, #0]
 80008c2:	4083      	lsls	r3, r0
 80008c4:	430b      	orrs	r3, r1
 80008c6:	6013      	str	r3, [r2, #0]
	irq_enable(irqnum);
 80008c8:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <stm32_exti_enable+0x18>)
 80008ca:	5618      	ldrsb	r0, [r3, r0]
 80008cc:	f000 baa0 	b.w	8000e10 <arch_irq_enable>
 80008d0:	40013c00 	.word	0x40013c00
 80008d4:	080036e7 	.word	0x080036e7

080008d8 <stm32_exti_disable>:
	if (line < 32) {
 80008d8:	281f      	cmp	r0, #31
 80008da:	dc07      	bgt.n	80008ec <stm32_exti_disable+0x14>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80008dc:	4904      	ldr	r1, [pc, #16]	; (80008f0 <stm32_exti_disable+0x18>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80008de:	2201      	movs	r2, #1
 80008e0:	680b      	ldr	r3, [r1, #0]
 80008e2:	fa02 f000 	lsl.w	r0, r2, r0
 80008e6:	ea23 0000 	bic.w	r0, r3, r0
 80008ea:	6008      	str	r0, [r1, #0]
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40013c00 	.word	0x40013c00

080008f4 <stm32_exti_trigger>:
	switch (trigger) {
 80008f4:	2903      	cmp	r1, #3
 80008f6:	d80f      	bhi.n	8000918 <stm32_exti_trigger+0x24>
 80008f8:	e8df f001 	tbb	[pc, r1]
 80008fc:	23170f02 	.word	0x23170f02
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <stm32_exti_trigger+0x64>)
		LL_EXTI_DisableRisingTrig_0_31(1 << line);
 8000902:	2201      	movs	r2, #1
 8000904:	6899      	ldr	r1, [r3, #8]
 8000906:	fa02 f000 	lsl.w	r0, r2, r0
 800090a:	ea21 0100 	bic.w	r1, r1, r0
 800090e:	6099      	str	r1, [r3, #8]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000910:	68da      	ldr	r2, [r3, #12]
 8000912:	ea22 0000 	bic.w	r0, r2, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000916:	60d8      	str	r0, [r3, #12]
}
 8000918:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 800091a:	2301      	movs	r3, #1
 800091c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000920:	4b0d      	ldr	r3, [pc, #52]	; (8000958 <stm32_exti_trigger+0x64>)
 8000922:	689a      	ldr	r2, [r3, #8]
 8000924:	4302      	orrs	r2, r0
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	e7f2      	b.n	8000910 <stm32_exti_trigger+0x1c>
		LL_EXTI_EnableFallingTrig_0_31(1 << line);
 800092a:	2301      	movs	r3, #1
 800092c:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <stm32_exti_trigger+0x64>)
 8000932:	68da      	ldr	r2, [r3, #12]
 8000934:	4302      	orrs	r2, r0
 8000936:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	ea22 0000 	bic.w	r0, r2, r0
 800093e:	6098      	str	r0, [r3, #8]
}
 8000940:	4770      	bx	lr
		LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8000942:	2301      	movs	r3, #1
 8000944:	fa03 f000 	lsl.w	r0, r3, r0
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <stm32_exti_trigger+0x64>)
 800094a:	689a      	ldr	r2, [r3, #8]
 800094c:	4302      	orrs	r2, r0
 800094e:	609a      	str	r2, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000950:	68da      	ldr	r2, [r3, #12]
 8000952:	4310      	orrs	r0, r2
 8000954:	e7df      	b.n	8000916 <stm32_exti_trigger+0x22>
 8000956:	bf00      	nop
 8000958:	40013c00 	.word	0x40013c00

0800095c <stm32_exti_set_callback>:

/**
 * @brief set & unset for the interrupt callbacks
 */
int stm32_exti_set_callback(int line, stm32_exti_callback_t cb, void *arg)
{
 800095c:	4603      	mov	r3, r0
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <stm32_exti_set_callback+0x20>)
 8000960:	b530      	push	{r4, r5, lr}
 8000962:	68c4      	ldr	r4, [r0, #12]
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8000964:	f854 0033 	ldr.w	r0, [r4, r3, lsl #3]
 8000968:	eb04 05c3 	add.w	r5, r4, r3, lsl #3
 800096c:	b918      	cbnz	r0, 8000976 <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 800096e:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	data->cb[line].data = arg;
 8000972:	606a      	str	r2, [r5, #4]

	return 0;
}
 8000974:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8000976:	f06f 000f 	mvn.w	r0, #15
 800097a:	e7fb      	b.n	8000974 <stm32_exti_set_callback+0x18>
 800097c:	20000048 	.word	0x20000048

08000980 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <stm32_exti_unset_callback+0x14>)
 8000982:	68da      	ldr	r2, [r3, #12]
 8000984:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8000988:	2300      	movs	r3, #0
 800098a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 800098e:	604b      	str	r3, [r1, #4]
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000048 	.word	0x20000048

08000998 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000998:	680b      	ldr	r3, [r1, #0]
{
 800099a:	b084      	sub	sp, #16
 800099c:	2b03      	cmp	r3, #3
 800099e:	d82d      	bhi.n	80009fc <stm32_clock_control_on+0x64>
 80009a0:	e8df f003 	tbb	[pc, r3]
 80009a4:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80009a8:	4a16      	ldr	r2, [pc, #88]	; (8000a04 <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 80009aa:	684b      	ldr	r3, [r1, #4]
 80009ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80009ae:	4319      	orrs	r1, r3
 80009b0:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80009b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80009b4:	4013      	ands	r3, r2
 80009b6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80009b8:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80009ba:	2000      	movs	r0, #0
}
 80009bc:	b004      	add	sp, #16
 80009be:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80009c0:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 80009c2:	684b      	ldr	r3, [r1, #4]
 80009c4:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80009c6:	4319      	orrs	r1, r3
 80009c8:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009cc:	4013      	ands	r3, r2
 80009ce:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80009d0:	9b01      	ldr	r3, [sp, #4]
 80009d2:	e7f2      	b.n	80009ba <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 80009d6:	684b      	ldr	r3, [r1, #4]
 80009d8:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80009da:	4319      	orrs	r1, r3
 80009dc:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80009de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80009e0:	4013      	ands	r3, r2
 80009e2:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 80009e4:	9b02      	ldr	r3, [sp, #8]
 80009e6:	e7e8      	b.n	80009ba <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009e8:	4a06      	ldr	r2, [pc, #24]	; (8000a04 <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80009ea:	684b      	ldr	r3, [r1, #4]
 80009ec:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80009ee:	4319      	orrs	r1, r3
 80009f0:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80009f4:	4013      	ands	r3, r2
 80009f6:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80009f8:	9b03      	ldr	r3, [sp, #12]
 80009fa:	e7de      	b.n	80009ba <stm32_clock_control_on+0x22>
	switch (pclken->bus) {
 80009fc:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000a00:	e7dc      	b.n	80009bc <stm32_clock_control_on+0x24>
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8000a08:	680b      	ldr	r3, [r1, #0]
 8000a0a:	2b03      	cmp	r3, #3
 8000a0c:	d820      	bhi.n	8000a50 <stm32_clock_control_off+0x48>
 8000a0e:	e8df f003 	tbb	[pc, r3]
 8000a12:	0a02      	.short	0x0a02
 8000a14:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8000a16:	4a10      	ldr	r2, [pc, #64]	; (8000a58 <stm32_clock_control_off+0x50>)
 8000a18:	6849      	ldr	r1, [r1, #4]
 8000a1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a1c:	ea23 0301 	bic.w	r3, r3, r1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000a22:	2000      	movs	r0, #0
}
 8000a24:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <stm32_clock_control_off+0x50>)
 8000a28:	6849      	ldr	r1, [r1, #4]
 8000a2a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000a2c:	ea23 0301 	bic.w	r3, r3, r1
 8000a30:	6353      	str	r3, [r2, #52]	; 0x34
 8000a32:	e7f6      	b.n	8000a22 <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8000a34:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <stm32_clock_control_off+0x50>)
 8000a36:	6849      	ldr	r1, [r1, #4]
 8000a38:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a3a:	ea23 0301 	bic.w	r3, r3, r1
 8000a3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a40:	e7ef      	b.n	8000a22 <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <stm32_clock_control_off+0x50>)
 8000a44:	6849      	ldr	r1, [r1, #4]
 8000a46:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8000a48:	ea23 0301 	bic.w	r3, r3, r1
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	e7e8      	b.n	8000a22 <stm32_clock_control_off+0x1a>
	switch (pclken->bus) {
 8000a50:	f06f 0022 	mvn.w	r0, #34	; 0x22
}
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <stm32_clock_control_get_subsys_rate>:
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8000a5c:	6809      	ldr	r1, [r1, #0]
	uint32_t ahb_clock = SystemCoreClock;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <stm32_clock_control_get_subsys_rate+0x24>)
	switch (pclken->bus) {
 8000a60:	2902      	cmp	r1, #2
	uint32_t ahb_clock = SystemCoreClock;
 8000a62:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8000a64:	d005      	beq.n	8000a72 <stm32_clock_control_get_subsys_rate+0x16>
 8000a66:	d905      	bls.n	8000a74 <stm32_clock_control_get_subsys_rate+0x18>
 8000a68:	2903      	cmp	r1, #3
 8000a6a:	d006      	beq.n	8000a7a <stm32_clock_control_get_subsys_rate+0x1e>
 8000a6c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8000a70:	4770      	bx	lr
	return clock / prescaler;
 8000a72:	089b      	lsrs	r3, r3, #2
#endif /* CONFIG_SOC_SERIES_STM32G0X */
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8000a74:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8000a76:	2000      	movs	r0, #0
}
 8000a78:	4770      	bx	lr
	return clock / prescaler;
 8000a7a:	085b      	lsrs	r3, r3, #1
 8000a7c:	e7fa      	b.n	8000a74 <stm32_clock_control_get_subsys_rate+0x18>
 8000a7e:	bf00      	nop
 8000a80:	2000002c 	.word	0x2000002c

08000a84 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8000a84:	b530      	push	{r4, r5, lr}
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000a86:	2100      	movs	r1, #0
{
 8000a88:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8000a8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8e:	e9cd 1300 	strd	r1, r3, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8000a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a96:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8000a98:	f000 f838 	bl	8000b0c <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8000a9c:	a803      	add	r0, sp, #12
 8000a9e:	f002 f816 	bl	8002ace <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000aa2:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <stm32_clock_control_init+0x80>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8000aa6:	0790      	lsls	r0, r2, #30
 8000aa8:	d406      	bmi.n	8000ab8 <stm32_clock_control_init+0x34>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	f042 0201 	orr.w	r2, r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000ab2:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8000ab4:	0792      	lsls	r2, r2, #30
 8000ab6:	d5fc      	bpl.n	8000ab2 <stm32_clock_control_init+0x2e>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000ab8:	4c12      	ldr	r4, [pc, #72]	; (8000b04 <stm32_clock_control_init+0x80>)
 8000aba:	68a3      	ldr	r3, [r4, #8]
 8000abc:	f023 0303 	bic.w	r3, r3, #3
 8000ac0:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000ac2:	68a3      	ldr	r3, [r4, #8]
 8000ac4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ac8:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000aca:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8000acc:	f015 050c 	ands.w	r5, r5, #12
 8000ad0:	d1fb      	bne.n	8000aca <stm32_clock_control_init+0x46>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000ad2:	6823      	ldr	r3, [r4, #0]
	} else {
		hse_bypass = LL_UTILS_HSEBYPASS_OFF;
	}

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <stm32_clock_control_init+0x84>)
 8000ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000ada:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000ae2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ae6:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8000ae8:	aa03      	add	r2, sp, #12
 8000aea:	466b      	mov	r3, sp
 8000aec:	4629      	mov	r1, r5
 8000aee:	f001 f87d 	bl	8001bec <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000af2:	6823      	ldr	r3, [r4, #0]
 8000af4:	f023 0301 	bic.w	r3, r3, #1
 8000af8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8000afa:	f001 fff0 	bl	8002ade <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8000afe:	4628      	mov	r0, r5
 8000b00:	b007      	add	sp, #28
 8000b02:	bd30      	pop	{r4, r5, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	007a1200 	.word	0x007a1200

08000b0c <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <config_enable_default_clocks+0x1c>)
 8000b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b14:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8000b18:	b082      	sub	sp, #8
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000b20:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8000b22:	b002      	add	sp, #8
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(uint32_t pin, uint32_t func,
				struct device *clk)
{
 8000b2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000b2e:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8000b30:	0906      	lsrs	r6, r0, #4
{
 8000b32:	460d      	mov	r5, r1
	if (!clk) {
 8000b34:	4610      	mov	r0, r2
 8000b36:	b912      	cbnz	r2, 8000b3e <z_pinmux_stm32_set+0x12>
 8000b38:	4811      	ldr	r0, [pc, #68]	; (8000b80 <z_pinmux_stm32_set+0x54>)
 8000b3a:	f001 f8b7 	bl	8001cac <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8000b42:	4b10      	ldr	r3, [pc, #64]	; (8000b84 <z_pinmux_stm32_set+0x58>)
 8000b44:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8000b48:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <z_pinmux_stm32_set+0x28>
		return -EIO;
 8000b4e:	f06f 0004 	mvn.w	r0, #4
 8000b52:	e012      	b.n	8000b7a <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8000b54:	6883      	ldr	r3, [r0, #8]
 8000b56:	4669      	mov	r1, sp
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d1f6      	bne.n	8000b4e <z_pinmux_stm32_set+0x22>
	uint32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8000b60:	1120      	asrs	r0, r4, #4
 8000b62:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((uint32_t *)port_base,
 8000b64:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000b68:	f005 030f 	and.w	r3, r5, #15
 8000b6c:	462a      	mov	r2, r5
 8000b6e:	f004 010f 	and.w	r1, r4, #15
 8000b72:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8000b76:	f002 f887 	bl	8002c88 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	bf00      	nop
 8000b80:	080036fe 	.word	0x080036fe
 8000b84:	080034cc 	.word	0x080034cc

08000b88 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	460d      	mov	r5, r1
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <stm32_setup_pins+0x2c>)
 8000b90:	f001 f88c 	bl	8001cac <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8000b94:	2600      	movs	r6, #0
 8000b96:	4607      	mov	r7, r0
 8000b98:	42ae      	cmp	r6, r5
 8000b9a:	f104 0408 	add.w	r4, r4, #8
 8000b9e:	d100      	bne.n	8000ba2 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8000ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8000ba2:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8000ba6:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8000baa:	463a      	mov	r2, r7
 8000bac:	f7ff ffbe 	bl	8000b2c <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8000bb0:	3601      	adds	r6, #1
 8000bb2:	e7f1      	b.n	8000b98 <stm32_setup_pins+0x10>
 8000bb4:	080036fe 	.word	0x080036fe

08000bb8 <elapsed>:
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
	uint32_t val1 = SysTick->VAL;	/* A */
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <elapsed+0x30>)
 8000bba:	689a      	ldr	r2, [r3, #8]
	uint32_t ctrl = SysTick->CTRL;	/* B */
 8000bbc:	6819      	ldr	r1, [r3, #0]
	uint32_t val2 = SysTick->VAL;	/* C */
 8000bbe:	6898      	ldr	r0, [r3, #8]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <elapsed+0x34>)
 8000bc2:	f411 3f80 	tst.w	r1, #65536	; 0x10000
{
 8000bc6:	b510      	push	{r4, lr}
 8000bc8:	4909      	ldr	r1, [pc, #36]	; (8000bf0 <elapsed+0x38>)
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
 8000bca:	d101      	bne.n	8000bd0 <elapsed+0x18>
	    || (val1 < val2)) {
 8000bcc:	4282      	cmp	r2, r0
 8000bce:	d205      	bcs.n	8000bdc <elapsed+0x24>
		overflow_cyc += last_load;
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	680c      	ldr	r4, [r1, #0]
 8000bd4:	4422      	add	r2, r4
 8000bd6:	601a      	str	r2, [r3, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
 8000bd8:	4a03      	ldr	r2, [pc, #12]	; (8000be8 <elapsed+0x30>)
 8000bda:	6812      	ldr	r2, [r2, #0]
	}

	return (last_load - val2) + overflow_cyc;
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	680a      	ldr	r2, [r1, #0]
 8000be0:	4413      	add	r3, r2
}
 8000be2:	1a18      	subs	r0, r3, r0
 8000be4:	bd10      	pop	{r4, pc}
 8000be6:	bf00      	nop
 8000be8:	e000e010 	.word	0xe000e010
 8000bec:	20000310 	.word	0x20000310
 8000bf0:	2000030c 	.word	0x2000030c

08000bf4 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8000bf4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
 8000bf6:	f7ff ffdf 	bl	8000bb8 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <z_clock_isr+0x38>)
 8000bfc:	4a0c      	ldr	r2, [pc, #48]	; (8000c30 <z_clock_isr+0x3c>)
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	6811      	ldr	r1, [r2, #0]
 8000c02:	4408      	add	r0, r1
 8000c04:	6010      	str	r0, [r2, #0]
	overflow_cyc = 0;
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8000c0a:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <z_clock_isr+0x40>)
 8000c0c:	6811      	ldr	r1, [r2, #0]
 8000c0e:	f244 13a0 	movw	r3, #16800	; 0x41a0
 8000c12:	1a40      	subs	r0, r0, r1
 8000c14:	fbb0 f0f3 	udiv	r0, r0, r3
		announced_cycles += dticks * CYC_PER_TICK;
 8000c18:	fb03 1300 	mla	r3, r3, r0, r1
 8000c1c:	6013      	str	r3, [r2, #0]
		z_clock_announce(dticks);
 8000c1e:	f001 fd55 	bl	80026cc <z_clock_announce>
	} else {
		z_clock_announce(1);
	}
	z_arm_int_exit();
}
 8000c22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8000c26:	f000 ba85 	b.w	8001134 <z_arm_exc_exit>
 8000c2a:	bf00      	nop
 8000c2c:	20000310 	.word	0x20000310
 8000c30:	20000308 	.word	0x20000308
 8000c34:	20000304 	.word	0x20000304

08000c38 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <z_clock_driver_init+0x28>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <z_clock_driver_init+0x2c>)
 8000c42:	f244 129f 	movw	r2, #16799	; 0x419f
 8000c46:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8000c48:	4b07      	ldr	r3, [pc, #28]	; (8000c68 <z_clock_driver_init+0x30>)
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <z_clock_driver_init+0x34>)
 8000c50:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000c52:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f042 0207 	orr.w	r2, r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	2000030c 	.word	0x2000030c
 8000c68:	20000310 	.word	0x20000310
 8000c6c:	e000e010 	.word	0xe000e010

08000c70 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
 8000c70:	b570      	push	{r4, r5, r6, lr}
 8000c72:	4d2b      	ldr	r5, [pc, #172]	; (8000d20 <z_clock_set_timeout+0xb0>)
 8000c74:	4604      	mov	r4, r0
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle
 8000c76:	b151      	cbz	r1, 8000c8e <z_clock_set_timeout+0x1e>
	    && ticks == K_TICKS_FOREVER) {
 8000c78:	1c43      	adds	r3, r0, #1
 8000c7a:	d10e      	bne.n	8000c9a <z_clock_set_timeout+0x2a>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8000c7c:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <z_clock_set_timeout+0xb4>)
 8000c7e:	6813      	ldr	r3, [r2, #0]
 8000c80:	f023 0301 	bic.w	r3, r3, #1
 8000c84:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8000c86:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000c8a:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
 8000c8e:	f240 33e5 	movw	r3, #997	; 0x3e5
 8000c92:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8000c96:	bf08      	it	eq
 8000c98:	461c      	moveq	r4, r3
	__asm__ volatile(
 8000c9a:	f04f 0310 	mov.w	r3, #16
 8000c9e:	f3ef 8611 	mrs	r6, BASEPRI
 8000ca2:	f383 8811 	msr	BASEPRI, r3
 8000ca6:	f3bf 8f6f 	isb	sy
	uint32_t pending = elapsed();
 8000caa:	f7ff ff85 	bl	8000bb8 <elapsed>
	cycle_count += pending;
 8000cae:	4b1e      	ldr	r3, [pc, #120]	; (8000d28 <z_clock_set_timeout+0xb8>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	4410      	add	r0, r2
 8000cb4:	6018      	str	r0, [r3, #0]
	overflow_cyc = 0U;
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <z_clock_set_timeout+0xbc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
	uint32_t unannounced = cycle_count - announced_cycles;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <z_clock_set_timeout+0xc0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
	if ((int32_t)unannounced < 0) {
 8000cc0:	1ac2      	subs	r2, r0, r3
 8000cc2:	d50d      	bpl.n	8000ce0 <z_clock_set_timeout+0x70>
		last_load = MIN_DELAY;
 8000cc4:	f240 431a 	movw	r3, #1050	; 0x41a
			last_load = MAX_CYCLES;
 8000cc8:	602b      	str	r3, [r5, #0]
	SysTick->LOAD = last_load - 1;
 8000cca:	682b      	ldr	r3, [r5, #0]
 8000ccc:	4a15      	ldr	r2, [pc, #84]	; (8000d24 <z_clock_set_timeout+0xb4>)
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6093      	str	r3, [r2, #8]
	__asm__ volatile(
 8000cd6:	f386 8811 	msr	BASEPRI, r6
 8000cda:	f3bf 8f6f 	isb	sy
 8000cde:	e7d5      	b.n	8000c8c <z_clock_set_timeout+0x1c>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
 8000ce0:	3c01      	subs	r4, #1
		delay = ticks * CYC_PER_TICK;
 8000ce2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8000ce6:	f240 31e5 	movw	r1, #997	; 0x3e5
 8000cea:	428c      	cmp	r4, r1
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000cec:	f502 4283 	add.w	r2, r2, #16768	; 0x4180
		delay = ticks * CYC_PER_TICK;
 8000cf0:	bfa8      	it	ge
 8000cf2:	460c      	movge	r4, r1
		delay -= unannounced;
 8000cf4:	1a18      	subs	r0, r3, r0
		delay = ticks * CYC_PER_TICK;
 8000cf6:	f244 11a0 	movw	r1, #16800	; 0x41a0
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000cfa:	321f      	adds	r2, #31
 8000cfc:	fb01 2404 	mla	r4, r1, r4, r2
		delay = MAX(delay, MIN_DELAY);
 8000d00:	f240 431a 	movw	r3, #1050	; 0x41a
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8000d04:	fbb4 f4f1 	udiv	r4, r4, r1
		delay -= unannounced;
 8000d08:	fb01 0404 	mla	r4, r1, r4, r0
		delay = MAX(delay, MIN_DELAY);
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	d904      	bls.n	8000d1a <z_clock_set_timeout+0xaa>
		if (delay > MAX_CYCLES) {
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <z_clock_set_timeout+0xc4>)
 8000d12:	429c      	cmp	r4, r3
 8000d14:	d8d8      	bhi.n	8000cc8 <z_clock_set_timeout+0x58>
			last_load = delay;
 8000d16:	602c      	str	r4, [r5, #0]
 8000d18:	e7d7      	b.n	8000cca <z_clock_set_timeout+0x5a>
		delay = MAX(delay, MIN_DELAY);
 8000d1a:	461c      	mov	r4, r3
 8000d1c:	e7fb      	b.n	8000d16 <z_clock_set_timeout+0xa6>
 8000d1e:	bf00      	nop
 8000d20:	2000030c 	.word	0x2000030c
 8000d24:	e000e010 	.word	0xe000e010
 8000d28:	20000308 	.word	0x20000308
 8000d2c:	20000310 	.word	0x20000310
 8000d30:	20000304 	.word	0x20000304
 8000d34:	00ff9420 	.word	0x00ff9420

08000d38 <z_clock_elapsed>:

uint32_t z_clock_elapsed(void)
{
 8000d38:	b510      	push	{r4, lr}
	__asm__ volatile(
 8000d3a:	f04f 0310 	mov.w	r3, #16
 8000d3e:	f3ef 8411 	mrs	r4, BASEPRI
 8000d42:	f383 8811 	msr	BASEPRI, r3
 8000d46:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
 8000d4a:	f7ff ff35 	bl	8000bb8 <elapsed>
 8000d4e:	4b07      	ldr	r3, [pc, #28]	; (8000d6c <z_clock_elapsed+0x34>)
 8000d50:	4a07      	ldr	r2, [pc, #28]	; (8000d70 <z_clock_elapsed+0x38>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	1a9b      	subs	r3, r3, r2
 8000d58:	4403      	add	r3, r0
	__asm__ volatile(
 8000d5a:	f384 8811 	msr	BASEPRI, r4
 8000d5e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8000d62:	f244 10a0 	movw	r0, #16800	; 0x41a0
 8000d66:	fbb3 f0f0 	udiv	r0, r3, r0
 8000d6a:	bd10      	pop	{r4, pc}
 8000d6c:	20000308 	.word	0x20000308
 8000d70:	20000304 	.word	0x20000304

08000d74 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8000d74:	4a09      	ldr	r2, [pc, #36]	; (8000d9c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d76:	490a      	ldr	r1, [pc, #40]	; (8000da0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8000d78:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8000d7a:	6809      	ldr	r1, [r1, #0]
 8000d7c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d7e:	4909      	ldr	r1, [pc, #36]	; (8000da4 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8000d80:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d82:	684b      	ldr	r3, [r1, #4]
 8000d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d88:	604b      	str	r3, [r1, #4]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f383 8811 	msr	BASEPRI, r3
 8000d90:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8000d94:	6893      	ldr	r3, [r2, #8]
}
 8000d96:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	20000384 	.word	0x20000384
 8000da0:	080036a8 	.word	0x080036a8
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8000da8:	490f      	ldr	r1, [pc, #60]	; (8000de8 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8000daa:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8000dac:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
 8000db0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8000db2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8000db6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000dba:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8000dbc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8000dc0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8000dc4:	4f09      	ldr	r7, [pc, #36]	; (8000dec <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8000dc6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8000dca:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8000dcc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8000dce:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8000dd0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
 8000dd2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8000dd4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8000dd6:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8000dda:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
 8000dde:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8000de2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8000de6:	4770      	bx	lr
    ldr r1, =_kernel
 8000de8:	20000384 	.word	0x20000384
    ldr v4, =_SCS_ICSR
 8000dec:	e000ed04 	.word	0xe000ed04

08000df0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8000df0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8000df4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8000df6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8000dfa:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8000dfe:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8000e00:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8000e04:	2902      	cmp	r1, #2
    beq _oops
 8000e06:	d0ff      	beq.n	8000e08 <_oops>

08000e08 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8000e08:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8000e0a:	f001 fe6f 	bl	8002aec <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8000e0e:	bd01      	pop	{r0, pc}

08000e10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8000e10:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db08      	blt.n	8000e28 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	2201      	movs	r2, #1
 8000e18:	f000 001f 	and.w	r0, r0, #31
 8000e1c:	fa02 f000 	lsl.w	r0, r2, r0
 8000e20:	095b      	lsrs	r3, r3, #5
 8000e22:	4a02      	ldr	r2, [pc, #8]	; (8000e2c <arch_irq_enable+0x1c>)
 8000e24:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8000e30:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8000e32:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	bfa8      	it	ge
 8000e36:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8000e3a:	f101 0101 	add.w	r1, r1, #1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	bfb8      	it	lt
 8000e40:	4b06      	ldrlt	r3, [pc, #24]	; (8000e5c <z_arm_irq_priority_set+0x2c>)
 8000e42:	ea4f 1101 	mov.w	r1, r1, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e46:	bfac      	ite	ge
 8000e48:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	f000 000f 	andlt.w	r0, r0, #15
 8000e50:	b2c9      	uxtb	r1, r1
 8000e52:	bfb4      	ite	lt
 8000e54:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed14 	.word	0xe000ed14

08000e60 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
 8000e60:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
 8000e64:	9b00      	ldr	r3, [sp, #0]
 8000e66:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
 8000e6a:	490a      	ldr	r1, [pc, #40]	; (8000e94 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
 8000e6c:	9b01      	ldr	r3, [sp, #4]
 8000e6e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
 8000e72:	9b02      	ldr	r3, [sp, #8]
 8000e74:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
 8000e78:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
 8000e7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e80:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
 8000e84:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
 8000e88:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
 8000e8a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
 8000e8c:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
 8000e8e:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	0800281f 	.word	0x0800281f

08000e98 <arch_switch_to_main_thread>:
}
#endif /* CONFIG_FPU && CONFIG_FPU_SHARING */

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
 8000e98:	b508      	push	{r3, lr}
 8000e9a:	4606      	mov	r6, r0
 8000e9c:	460d      	mov	r5, r1
 8000e9e:	4614      	mov	r4, r2
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8000ea0:	f000 f988 	bl	80011b4 <z_arm_configure_static_mpu_regions>
#endif
	_current = main_thread;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <arch_switch_to_main_thread+0x2c>)
 8000ea6:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8000ea8:	4620      	mov	r0, r4
 8000eaa:	f385 8809 	msr	PSP, r5
 8000eae:	2100      	movs	r1, #0
 8000eb0:	b663      	cpsie	if
 8000eb2:	f381 8811 	msr	BASEPRI, r1
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	f001 fcae 	bl	800281e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8000ec2:	bf00      	nop
 8000ec4:	20000384 	.word	0x20000384

08000ec8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
 8000ec8:	4901      	ldr	r1, [pc, #4]	; (8000ed0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
 8000eca:	2210      	movs	r2, #16
	str	r2, [r1]
 8000ecc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
 8000ece:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
 8000ed0:	e000ed10 	.word	0xe000ed10

08000ed4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
 8000ed4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
 8000ed6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
 8000ed8:	f380 8811 	msr	BASEPRI, r0
	isb
 8000edc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
 8000ee0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
 8000ee4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
 8000ee6:	b662      	cpsie	i
	isb
 8000ee8:	f3bf 8f6f 	isb	sy

	bx	lr
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8000ef0:	bf30      	wfi
    b z_SysNmiOnReset
 8000ef2:	f7ff bffd 	b.w	8000ef0 <z_SysNmiOnReset>
 8000ef6:	bf00      	nop

08000ef8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8000efa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <z_arm_prep_c+0x40>)
 8000efe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8000f02:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f08:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
 8000f0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000f10:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8000f18:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8000f1c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000f20:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
 8000f24:	f000 fee6 	bl	8001cf4 <z_bss_zero>
	z_data_copy();
 8000f28:	f000 fefc 	bl	8001d24 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
 8000f2c:	f000 f910 	bl	8001150 <z_arm_interrupt_init>
	z_cstart();
 8000f30:	f000 ff42 	bl	8001db8 <z_cstart>
 8000f34:	08000000 	.word	0x08000000
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8000f3c:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8000f3e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8000f42:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8000f46:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
 8000f4a:	4904      	ldr	r1, [pc, #16]	; (8000f5c <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8000f4c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8000f4e:	c909      	ldmia	r1!, {r0, r3}
#ifdef CONFIG_EXECUTION_BENCHMARKING
	push {r0, r3}	/* Save r0 and r3 into stack */
	bl read_timer_end_of_isr
	pop {r0, r3}	/* Restore r0 and r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 8000f50:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8000f52:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8000f56:	4902      	ldr	r1, [pc, #8]	; (8000f60 <_isr_wrapper+0x24>)
	bx r1
 8000f58:	4708      	bx	r1
 8000f5a:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8000f5c:	08003234 	.word	0x08003234
	ldr r1, =z_arm_int_exit
 8000f60:	08001135 	.word	0x08001135

08000f64 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8000f64:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8000f66:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
 8000f6a:	4808      	ldr	r0, [pc, #32]	; (8000f8c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 8000f6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8000f70:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8000f72:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8000f76:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8000f7a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8000f7c:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8000f7e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8000f82:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8000f86:	f7ff ffb7 	bl	8000ef8 <z_arm_prep_c>
 8000f8a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
 8000f8c:	20000908 	.word	0x20000908

08000f90 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
 8000f90:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8000f94:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8000f98:	4672      	mov	r2, lr

	push {r0, lr}
 8000f9a:	b501      	push	{r0, lr}

	bl z_arm_fault
 8000f9c:	f000 f84e 	bl	800103c <z_arm_fault>

	pop {r0, pc}
 8000fa0:	bd01      	pop	{r0, pc}
 8000fa2:	bf00      	nop

08000fa4 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <mem_manage_fault.isra.0+0x34>)
 8000fa6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8000fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8000faa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fac:	0792      	lsls	r2, r2, #30
 8000fae:	d508      	bpl.n	8000fc2 <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 8000fb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8000fb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fb4:	0612      	lsls	r2, r2, #24
 8000fb6:	d504      	bpl.n	8000fc2 <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 8000fb8:	b118      	cbz	r0, 8000fc2 <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8000fba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fc0:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <mem_manage_fault.isra.0+0x34>)
 8000fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8000fc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8000fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000fca:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8000fcc:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8000fce:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8000fd2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8000fd4:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8000fd6:	4770      	bx	lr
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <bus_fault.isra.0+0x38>)
 8000fde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8000fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8000fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fe4:	0592      	lsls	r2, r2, #22
 8000fe6:	d508      	bpl.n	8000ffa <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8000fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8000fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fec:	0412      	lsls	r2, r2, #16
 8000fee:	d504      	bpl.n	8000ffa <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 8000ff0:	b118      	cbz	r0, 8000ffa <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8000ff2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000ff4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <bus_fault.isra.0+0x38>)
 8000ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8000ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001000:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8001002:	bf58      	it	pl
 8001004:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8001006:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 8001008:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 800100a:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800100e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8001010:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8001018:	4b07      	ldr	r3, [pc, #28]	; (8001038 <usage_fault.isra.0+0x20>)
 800101a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 800101c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800101e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8001020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8001022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8001024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8001026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001028:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 800102c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8001030:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8001032:	2000      	movs	r0, #0
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return)
{
 800103c:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 800103e:	4b36      	ldr	r3, [pc, #216]	; (8001118 <z_arm_fault+0xdc>)
 8001040:	685b      	ldr	r3, [r3, #4]
{
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8001046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800104a:	2500      	movs	r5, #0
 800104c:	f385 8811 	msr	BASEPRI, r5
 8001050:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8001054:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
 8001058:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 800105c:	d111      	bne.n	8001082 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 800105e:	f002 010c 	and.w	r1, r2, #12
 8001062:	2908      	cmp	r1, #8
 8001064:	d00d      	beq.n	8001082 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8001066:	0711      	lsls	r1, r2, #28
 8001068:	d401      	bmi.n	800106e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
 800106a:	4606      	mov	r6, r0
			*nested_exc = true;
 800106c:	2501      	movs	r5, #1
	*recoverable = false;
 800106e:	2200      	movs	r2, #0
 8001070:	3b03      	subs	r3, #3
 8001072:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8001076:	2b03      	cmp	r3, #3
 8001078:	d847      	bhi.n	800110a <z_arm_fault+0xce>
 800107a:	e8df f003 	tbb	[pc, r3]
 800107e:	3e04      	.short	0x3e04
 8001080:	3b42      	.short	0x3b42
		return NULL;
 8001082:	462e      	mov	r6, r5
 8001084:	e7f3      	b.n	800106e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8001086:	4b24      	ldr	r3, [pc, #144]	; (8001118 <z_arm_fault+0xdc>)
 8001088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108a:	0792      	lsls	r2, r2, #30
 800108c:	d43d      	bmi.n	800110a <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 800108e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001090:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8001094:	d008      	beq.n	80010a8 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 8001096:	3328      	adds	r3, #40	; 0x28
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	b1eb      	cbz	r3, 80010d8 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 800109c:	f10d 0107 	add.w	r1, sp, #7
 80010a0:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 80010a2:	f7ff ff7f 	bl	8000fa4 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
 80010a6:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 80010a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010ac:	b993      	cbnz	r3, 80010d4 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 80010ae:	2220      	movs	r2, #32
 80010b0:	4631      	mov	r1, r6
 80010b2:	a802      	add	r0, sp, #8
 80010b4:	f001 fd31 	bl	8002b1a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 80010b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010ba:	b345      	cbz	r5, 800110e <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 80010bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80010c0:	b922      	cbnz	r2, 80010cc <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 80010c2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 80010c6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 80010ca:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 80010cc:	a902      	add	r1, sp, #8
 80010ce:	4620      	mov	r0, r4
 80010d0:	f001 fd0a 	bl	8002ae8 <z_arm_fatal_error>
}
 80010d4:	b00a      	add	sp, #40	; 0x28
 80010d6:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 80010d8:	4b10      	ldr	r3, [pc, #64]	; (800111c <z_arm_fault+0xe0>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b12b      	cbz	r3, 80010ea <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 80010de:	f10d 0107 	add.w	r1, sp, #7
 80010e2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 80010e4:	f7ff ff7a 	bl	8000fdc <bus_fault.isra.0>
 80010e8:	e7dd      	b.n	80010a6 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <z_arm_fault+0xe4>)
 80010ec:	8818      	ldrh	r0, [r3, #0]
 80010ee:	b284      	uxth	r4, r0
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d0d9      	beq.n	80010a8 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 80010f4:	f7ff ff90 	bl	8001018 <usage_fault.isra.0>
 80010f8:	e7d5      	b.n	80010a6 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 80010fa:	f10d 0107 	add.w	r1, sp, #7
 80010fe:	2000      	movs	r0, #0
 8001100:	e7cf      	b.n	80010a2 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 8001102:	f10d 0107 	add.w	r1, sp, #7
 8001106:	2000      	movs	r0, #0
 8001108:	e7ec      	b.n	80010e4 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
 800110a:	2400      	movs	r4, #0
 800110c:	e7cc      	b.n	80010a8 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800110e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	e7d8      	b.n	80010ca <z_arm_fault+0x8e>
 8001118:	e000ed00 	.word	0xe000ed00
 800111c:	e000ed29 	.word	0xe000ed29
 8001120:	e000ed2a 	.word	0xe000ed2a

08001124 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8001124:	4a02      	ldr	r2, [pc, #8]	; (8001130 <z_arm_fault_init+0xc>)
 8001126:	6953      	ldr	r3, [r2, #20]
 8001128:	f043 0310 	orr.w	r3, r3, #16
 800112c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800112e:	4770      	bx	lr
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
 8001136:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
 8001138:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
 800113a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
 800113c:	d003      	beq.n	8001146 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
 800113e:	4903      	ldr	r1, [pc, #12]	; (800114c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
 8001140:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
 8001144:	600a      	str	r2, [r1, #0]

08001146 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
 8001146:	4770      	bx	lr
	ldr r3, =_kernel
 8001148:	20000384 	.word	0x20000384
	ldr r1, =_SCS_ICSR
 800114c:	e000ed04 	.word	0xe000ed04

08001150 <z_arm_interrupt_init>:
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	2110      	movs	r1, #16
 8001156:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8001158:	3301      	adds	r3, #1
 800115a:	2b52      	cmp	r3, #82	; 0x52
 800115c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8001160:	d1f9      	bne.n	8001156 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8001162:	4770      	bx	lr
 8001164:	e000e100 	.word	0xe000e100

08001168 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8001168:	b538      	push	{r3, r4, r5, lr}
 800116a:	4604      	mov	r4, r0
	__asm__ volatile(
 800116c:	f04f 0310 	mov.w	r3, #16
 8001170:	f3ef 8511 	mrs	r5, BASEPRI
 8001174:	f383 8811 	msr	BASEPRI, r3
 8001178:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 800117c:	f001 f840 	bl	8002200 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <z_impl_k_thread_abort+0x44>)
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	42a3      	cmp	r3, r4
 8001186:	d10b      	bne.n	80011a0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <z_impl_k_thread_abort+0x48>)
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001190:	b912      	cbnz	r2, 8001198 <z_impl_k_thread_abort+0x30>
	int ret;
	z_check_stack_sentinel();
#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 8001192:	4628      	mov	r0, r5
 8001194:	f7ff fdee 	bl	8000d74 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800119e:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 80011a0:	4628      	mov	r0, r5
}
 80011a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 80011a6:	f001 bf24 	b.w	8002ff2 <z_reschedule_irqlock>
 80011aa:	bf00      	nop
 80011ac:	20000384 	.word	0x20000384
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 80011b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <z_arm_configure_static_mpu_regions+0x24>)
 80011b8:	9301      	str	r3, [sp, #4]
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <z_arm_configure_static_mpu_regions+0x28>)
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <z_arm_configure_static_mpu_regions+0x2c>)
 80011c0:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 80011c2:	ab01      	add	r3, sp, #4
 80011c4:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 80011c6:	4a07      	ldr	r2, [pc, #28]	; (80011e4 <z_arm_configure_static_mpu_regions+0x30>)
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <z_arm_configure_static_mpu_regions+0x34>)
 80011ca:	2101      	movs	r1, #1
 80011cc:	4668      	mov	r0, sp
 80011ce:	f000 f893 	bl	80012f8 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 80011d2:	b005      	add	sp, #20
 80011d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80011d8:	20000000 	.word	0x20000000
 80011dc:	00000000 	.word	0x00000000
 80011e0:	060b0000 	.word	0x060b0000
 80011e4:	20000000 	.word	0x20000000
 80011e8:	20020000 	.word	0x20020000

080011ec <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 80011ec:	f8df c084 	ldr.w	ip, [pc, #132]	; 8001274 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
 80011f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f2:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 80011f4:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
 80011f6:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
 80011f8:	428f      	cmp	r7, r1
 80011fa:	db00      	blt.n	80011fe <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 80011fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 80011fe:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
 8001202:	f8de 4004 	ldr.w	r4, [lr, #4]
 8001206:	b394      	cbz	r4, 800126e <mpu_configure_regions+0x82>
		if (do_sanity_check &&
 8001208:	b143      	cbz	r3, 800121c <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
 800120a:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800120c:	422c      	tst	r4, r5
 800120e:	d119      	bne.n	8001244 <mpu_configure_regions+0x58>
		&&
 8001210:	2c1f      	cmp	r4, #31
 8001212:	d917      	bls.n	8001244 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1)) == 0U);
 8001214:	f8de 2000 	ldr.w	r2, [lr]
		&&
 8001218:	4215      	tst	r5, r2
 800121a:	d113      	bne.n	8001244 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800121c:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
 800121e:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
 8001220:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 8001224:	f8de 0008 	ldr.w	r0, [lr, #8]
 8001228:	d90f      	bls.n	800124a <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800122a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800122e:	d80e      	bhi.n	800124e <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8001230:	3c01      	subs	r4, #1
 8001232:	fab4 f484 	clz	r4, r4
 8001236:	f1c4 041f 	rsb	r4, r4, #31
 800123a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 800123c:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 800123e:	ea44 0400 	orr.w	r4, r4, r0
 8001242:	d906      	bls.n	8001252 <mpu_configure_regions+0x66>
			return -EINVAL;
 8001244:	f06f 0015 	mvn.w	r0, #21
 8001248:	e7d8      	b.n	80011fc <mpu_configure_regions+0x10>
		return REGION_32B;
 800124a:	2408      	movs	r4, #8
 800124c:	e7f6      	b.n	800123c <mpu_configure_regions+0x50>
		return REGION_4G;
 800124e:	243e      	movs	r4, #62	; 0x3e
 8001250:	e7f4      	b.n	800123c <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001252:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8001256:	4315      	orrs	r5, r2
 8001258:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800125c:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8001260:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
 8001264:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8001266:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800126a:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
 800126e:	3701      	adds	r7, #1
 8001270:	e7c2      	b.n	80011f8 <mpu_configure_regions+0xc>
 8001272:	bf00      	nop
 8001274:	e000ed90 	.word	0xe000ed90

08001278 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8001278:	4b03      	ldr	r3, [pc, #12]	; (8001288 <arm_core_mpu_enable+0x10>)
 800127a:	2205      	movs	r2, #5
 800127c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800127e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001282:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8001286:	4770      	bx	lr
 8001288:	e000ed90 	.word	0xe000ed90

0800128c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800128c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8001290:	4b01      	ldr	r3, [pc, #4]	; (8001298 <arm_core_mpu_disable+0xc>)
 8001292:	2200      	movs	r2, #0
 8001294:	605a      	str	r2, [r3, #4]
}
 8001296:	4770      	bx	lr
 8001298:	e000ed90 	.word	0xe000ed90

0800129c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 800129c:	4913      	ldr	r1, [pc, #76]	; (80012ec <arm_mpu_init+0x50>)
 800129e:	6808      	ldr	r0, [r1, #0]
 80012a0:	2808      	cmp	r0, #8
{
 80012a2:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80012a4:	d81e      	bhi.n	80012e4 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80012a6:	f7ff fff1 	bl	800128c <arm_core_mpu_disable>
	MPU->RNR = index;
 80012aa:	4c11      	ldr	r4, [pc, #68]	; (80012f0 <arm_mpu_init+0x54>)
 80012ac:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012ae:	2200      	movs	r2, #0
 80012b0:	4290      	cmp	r0, r2
 80012b2:	f101 010c 	add.w	r1, r1, #12
 80012b6:	d105      	bne.n	80012c4 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <arm_mpu_init+0x58>)
 80012ba:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 80012bc:	f7ff ffdc 	bl	8001278 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 80012c0:	2000      	movs	r0, #0
}
 80012c2:	bd10      	pop	{r4, pc}
 80012c4:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012c6:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 80012ca:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 80012ce:	4313      	orrs	r3, r2
 80012d0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80012d4:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80012d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80012e0:	3201      	adds	r2, #1
 80012e2:	e7e5      	b.n	80012b0 <arm_mpu_init+0x14>
		return -1;
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012e8:	e7eb      	b.n	80012c2 <arm_mpu_init+0x26>
 80012ea:	bf00      	nop
 80012ec:	080034f8 	.word	0x080034f8
 80012f0:	e000ed90 	.word	0xe000ed90
 80012f4:	200003c0 	.word	0x200003c0

080012f8 <arm_core_mpu_configure_static_mpu_regions>:
{
 80012f8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 80012fa:	4c03      	ldr	r4, [pc, #12]	; (8001308 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 80012fc:	2301      	movs	r3, #1
 80012fe:	7822      	ldrb	r2, [r4, #0]
 8001300:	f7ff ff74 	bl	80011ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8001304:	7020      	strb	r0, [r4, #0]
}
 8001306:	bd10      	pop	{r4, pc}
 8001308:	200003c0 	.word	0x200003c0

0800130c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 800130c:	4b01      	ldr	r3, [pc, #4]	; (8001314 <__stdout_hook_install+0x8>)
 800130e:	6018      	str	r0, [r3, #0]
}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000018 	.word	0x20000018

08001318 <pinmux_stm32_init>:
	{STM32_PIN_PB13, STM32F4_PINMUX_FUNC_PB13_CAN2_TX},
#endif
};

static int pinmux_stm32_init(struct device *port)
{
 8001318:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800131a:	4803      	ldr	r0, [pc, #12]	; (8001328 <pinmux_stm32_init+0x10>)
 800131c:	2105      	movs	r1, #5
 800131e:	f7ff fc33 	bl	8000b88 <stm32_setup_pins>

	return 0;
}
 8001322:	2000      	movs	r0, #0
 8001324:	bd08      	pop	{r3, pc}
 8001326:	bf00      	nop
 8001328:	08003518 	.word	0x08003518

0800132c <gpio_stm32_pin_interrupt_configure>:
{
	const struct gpio_stm32_config *cfg = dev->config_info;
	int edge = 0;
	int err = 0;

	if (mode == GPIO_INT_MODE_DISABLED) {
 800132c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
{
 8001330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	const struct gpio_stm32_config *cfg = dev->config_info;
 8001334:	6847      	ldr	r7, [r0, #4]
{
 8001336:	460c      	mov	r4, r1
 8001338:	461e      	mov	r6, r3
	if (mode == GPIO_INT_MODE_DISABLED) {
 800133a:	d123      	bne.n	8001384 <gpio_stm32_pin_interrupt_configure+0x58>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 800133c:	f001 0303 	and.w	r3, r1, #3
 8001340:	3304      	adds	r3, #4
 8001342:	009a      	lsls	r2, r3, #2
 8001344:	230f      	movs	r3, #15
 8001346:	4093      	lsls	r3, r2
 8001348:	ea43 0391 	orr.w	r3, r3, r1, lsr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4937      	ldr	r1, [pc, #220]	; (800142c <gpio_stm32_pin_interrupt_configure+0x100>)
 8001350:	3202      	adds	r2, #2
 8001352:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001356:	0c19      	lsrs	r1, r3, #16
 8001358:	ea02 4313 	and.w	r3, r2, r3, lsr #16
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	fa91 f2a1 	rbit	r2, r1
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001360:	fab2 f282 	clz	r2, r2
 8001364:	40d3      	lsrs	r3, r2
		if (gpio_stm32_get_exti_source(pin) == cfg->port) {
 8001366:	68ba      	ldr	r2, [r7, #8]
 8001368:	429a      	cmp	r2, r3
 800136a:	d109      	bne.n	8001380 <gpio_stm32_pin_interrupt_configure+0x54>
			stm32_exti_disable(pin);
 800136c:	4620      	mov	r0, r4
 800136e:	f7ff fab3 	bl	80008d8 <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8001372:	4620      	mov	r0, r4
 8001374:	f7ff fb04 	bl	8000980 <stm32_exti_unset_callback>
			stm32_exti_trigger(pin, STM32_EXTI_TRIG_NONE);
 8001378:	2100      	movs	r1, #0
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff faba 	bl	80008f4 <stm32_exti_trigger>
	int err = 0;
 8001380:	2500      	movs	r5, #0
 8001382:	e044      	b.n	800140e <gpio_stm32_pin_interrupt_configure+0xe2>
		/* else: No irq source configured for pin. Nothing to disable */
		goto exit;
	}

	/* Level trigger interrupts not supported */
	if (mode == GPIO_INT_MODE_LEVEL) {
 8001384:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001388:	d049      	beq.n	800141e <gpio_stm32_pin_interrupt_configure+0xf2>
		err = -ENOTSUP;
		goto exit;
	}

	if (stm32_exti_set_callback(pin, gpio_stm32_isr, dev) != 0) {
 800138a:	4602      	mov	r2, r0
 800138c:	4928      	ldr	r1, [pc, #160]	; (8001430 <gpio_stm32_pin_interrupt_configure+0x104>)
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff fae4 	bl	800095c <stm32_exti_set_callback>
 8001394:	4605      	mov	r5, r0
 8001396:	2800      	cmp	r0, #0
 8001398:	d144      	bne.n	8001424 <gpio_stm32_pin_interrupt_configure+0xf8>
		err = -EBUSY;
		goto exit;
	}

	gpio_stm32_enable_int(cfg->port, pin);
 800139a:	68bf      	ldr	r7, [r7, #8]
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <gpio_stm32_pin_interrupt_configure+0x108>)
 800139e:	f000 fc85 	bl	8001cac <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 80013a2:	4925      	ldr	r1, [pc, #148]	; (8001438 <gpio_stm32_pin_interrupt_configure+0x10c>)
 80013a4:	4603      	mov	r3, r0
 80013a6:	c903      	ldmia	r1, {r0, r1}
 80013a8:	466a      	mov	r2, sp
 80013aa:	e882 0003 	stmia.w	r2, {r0, r1}
 80013ae:	6899      	ldr	r1, [r3, #8]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f8d1 8000 	ldr.w	r8, [r1]
 80013b6:	4611      	mov	r1, r2
 80013b8:	47c0      	blx	r8
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80013ba:	f004 0103 	and.w	r1, r4, #3
 80013be:	3104      	adds	r1, #4
 80013c0:	008b      	lsls	r3, r1, #2
 80013c2:	210f      	movs	r1, #15
 80013c4:	4099      	lsls	r1, r3
 80013c6:	ea41 0194 	orr.w	r1, r1, r4, lsr #2
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	0092      	lsls	r2, r2, #2
 80013ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80013d2:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80013d6:	0c0b      	lsrs	r3, r1, #16
 80013d8:	6890      	ldr	r0, [r2, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013da:	fa93 f3a3 	rbit	r3, r3
  return __builtin_clz(value);
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	ea20 4111 	bic.w	r1, r0, r1, lsr #16
 80013e6:	409f      	lsls	r7, r3
 80013e8:	430f      	orrs	r7, r1

	switch (trig) {
 80013ea:	f5b6 2f80 	cmp.w	r6, #262144	; 0x40000
 80013ee:	6097      	str	r7, [r2, #8]
 80013f0:	d011      	beq.n	8001416 <gpio_stm32_pin_interrupt_configure+0xea>
 80013f2:	f5b6 2fc0 	cmp.w	r6, #393216	; 0x60000
 80013f6:	d010      	beq.n	800141a <gpio_stm32_pin_interrupt_configure+0xee>
 80013f8:	f5b6 3f00 	cmp.w	r6, #131072	; 0x20000
 80013fc:	bf14      	ite	ne
 80013fe:	2100      	movne	r1, #0
 8001400:	2102      	moveq	r1, #2
	case GPIO_INT_TRIG_BOTH:
		edge = STM32_EXTI_TRIG_BOTH;
		break;
	}

	stm32_exti_trigger(pin, edge);
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fa76 	bl	80008f4 <stm32_exti_trigger>

	stm32_exti_enable(pin);
 8001408:	4620      	mov	r0, r4
 800140a:	f7ff fa57 	bl	80008bc <stm32_exti_enable>

exit:
	return err;
}
 800140e:	4628      	mov	r0, r5
 8001410:	b002      	add	sp, #8
 8001412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		edge = STM32_EXTI_TRIG_RISING;
 8001416:	2101      	movs	r1, #1
 8001418:	e7f3      	b.n	8001402 <gpio_stm32_pin_interrupt_configure+0xd6>
		edge = STM32_EXTI_TRIG_BOTH;
 800141a:	2103      	movs	r1, #3
 800141c:	e7f1      	b.n	8001402 <gpio_stm32_pin_interrupt_configure+0xd6>
		err = -ENOTSUP;
 800141e:	f06f 0522 	mvn.w	r5, #34	; 0x22
 8001422:	e7f4      	b.n	800140e <gpio_stm32_pin_interrupt_configure+0xe2>
		err = -EBUSY;
 8001424:	f06f 050f 	mvn.w	r5, #15
	return err;
 8001428:	e7f1      	b.n	800140e <gpio_stm32_pin_interrupt_configure+0xe2>
 800142a:	bf00      	nop
 800142c:	40013800 	.word	0x40013800
 8001430:	08002bbd 	.word	0x08002bbd
 8001434:	080036fe 	.word	0x080036fe
 8001438:	080034c4 	.word	0x080034c4

0800143c <gpio_stm32_init>:
 * @param dev GPIO device struct
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
 800143c:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config_info;
 800143e:	6844      	ldr	r4, [r0, #4]
 8001440:	4806      	ldr	r0, [pc, #24]	; (800145c <gpio_stm32_init+0x20>)
 8001442:	f000 fc33 	bl	8001cac <z_impl_device_get_binding>
 8001446:	6883      	ldr	r3, [r0, #8]
 8001448:	f104 010c 	add.w	r1, r4, #12
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8001450:	2800      	cmp	r0, #0
		z_stm32_hsem_unlock(CFG_HW_RCC_SEMID);
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8001452:	bf18      	it	ne
 8001454:	f06f 0004 	mvnne.w	r0, #4
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	080036fe 	.word	0x080036fe

08001460 <pwm_stm32_pin_set>:
}

static int pwm_stm32_pin_set(struct device *dev, uint32_t pwm,
			     uint32_t period_cycles, uint32_t pulse_cycles,
			     pwm_flags_t flags)
{
 8001460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pwm_stm32_config *cfg = to_config(dev);

	uint32_t channel;

	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8001464:	3901      	subs	r1, #1
 8001466:	2903      	cmp	r1, #3
	const struct pwm_stm32_config *cfg = to_config(dev);
 8001468:	6846      	ldr	r6, [r0, #4]
{
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	4614      	mov	r4, r2
 800146e:	4698      	mov	r8, r3
	if (pwm < 1u || pwm > TIMER_MAX_CH) {
 8001470:	f200 808f 	bhi.w	8001592 <pwm_stm32_pin_set+0x132>
		LOG_ERR("Invalid channel (%d)", pwm);
		return -EINVAL;
	}

	if (pulse_cycles > period_cycles) {
 8001474:	4293      	cmp	r3, r2
 8001476:	f200 808c 	bhi.w	8001592 <pwm_stm32_pin_set+0x132>

	/*
	 * Non 32-bit timers count from 0 up to the value in the ARR register
	 * (16-bit). Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!IS_TIM_32B_COUNTER_INSTANCE(cfg->timer) &&
 800147a:	6830      	ldr	r0, [r6, #0]
 800147c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001480:	d006      	beq.n	8001490 <pwm_stm32_pin_set+0x30>
 8001482:	4b47      	ldr	r3, [pc, #284]	; (80015a0 <pwm_stm32_pin_set+0x140>)
 8001484:	4298      	cmp	r0, r3
 8001486:	d003      	beq.n	8001490 <pwm_stm32_pin_set+0x30>
 8001488:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800148c:	f200 8084 	bhi.w	8001598 <pwm_stm32_pin_set+0x138>
	    (period_cycles > UINT16_MAX + 1)) {
		return -ENOTSUP;
	}

	channel = ch2ll[pwm - 1u];
 8001490:	4b44      	ldr	r3, [pc, #272]	; (80015a4 <pwm_stm32_pin_set+0x144>)
 8001492:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]

	if (period_cycles == 0u) {
 8001496:	b92c      	cbnz	r4, 80014a4 <pwm_stm32_pin_set+0x44>
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  CLEAR_BIT(TIMx->CCER, Channels);
 8001498:	6a01      	ldr	r1, [r0, #32]
 800149a:	ea21 0107 	bic.w	r1, r1, r7
 800149e:	6201      	str	r1, [r0, #32]
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
	}

	LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);

	return 0;
 80014a0:	2000      	movs	r0, #0
 80014a2:	e026      	b.n	80014f2 <pwm_stm32_pin_set+0x92>
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_CC_IsEnabledChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80014a4:	6a03      	ldr	r3, [r0, #32]
 80014a6:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80014aa:	ea07 0203 	and.w	r2, r7, r3
 80014ae:	ea37 0303 	bics.w	r3, r7, r3
 80014b2:	f005 0501 	and.w	r5, r5, #1
 80014b6:	d105      	bne.n	80014c4 <pwm_stm32_pin_set+0x64>
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014b8:	2a01      	cmp	r2, #1
	return LL_TIM_OCPOLARITY_LOW;
 80014ba:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80014be:	d142      	bne.n	8001546 <pwm_stm32_pin_set+0xe6>
 80014c0:	2200      	movs	r2, #0
 80014c2:	e04e      	b.n	8001562 <pwm_stm32_pin_set+0x102>
		LL_TIM_OC_StructInit(&oc_init);
 80014c4:	4668      	mov	r0, sp
 80014c6:	f001 fd58 	bl	8002f7a <LL_TIM_OC_StructInit>
		oc_init.OCState = LL_TIM_OCSTATE_ENABLE;
 80014ca:	f04f 0901 	mov.w	r9, #1
 80014ce:	2360      	movs	r3, #96	; 0x60
 80014d0:	e9cd 3900 	strd	r3, r9, [sp]
		return LL_TIM_OCPOLARITY_HIGH;
 80014d4:	fa05 f509 	lsl.w	r5, r5, r9
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80014d8:	2300      	movs	r3, #0
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80014da:	6830      	ldr	r0, [r6, #0]
		oc_init.CompareValue = pulse_cycles;
 80014dc:	f8cd 800c 	str.w	r8, [sp, #12]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80014e0:	466a      	mov	r2, sp
 80014e2:	4639      	mov	r1, r7
		oc_init.OCPolarity = get_polarity(flags);
 80014e4:	9504      	str	r5, [sp, #16]
		oc_init.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 80014e6:	9306      	str	r3, [sp, #24]
		if (LL_TIM_OC_Init(cfg->timer, channel, &oc_init) != SUCCESS) {
 80014e8:	f000 f9ec 	bl	80018c4 <LL_TIM_OC_Init>
 80014ec:	b120      	cbz	r0, 80014f8 <pwm_stm32_pin_set+0x98>
			return -EIO;
 80014ee:	f06f 0004 	mvn.w	r0, #4
}
 80014f2:	b009      	add	sp, #36	; 0x24
 80014f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80014f8:	2f01      	cmp	r7, #1
		LL_TIM_OC_EnablePreload(cfg->timer, channel);
 80014fa:	6832      	ldr	r2, [r6, #0]
 80014fc:	d00d      	beq.n	800151a <pwm_stm32_pin_set+0xba>
 80014fe:	2f04      	cmp	r7, #4
 8001500:	d019      	beq.n	8001536 <pwm_stm32_pin_set+0xd6>
 8001502:	2f10      	cmp	r7, #16
 8001504:	d019      	beq.n	800153a <pwm_stm32_pin_set+0xda>
 8001506:	2f40      	cmp	r7, #64	; 0x40
 8001508:	d019      	beq.n	800153e <pwm_stm32_pin_set+0xde>
 800150a:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
 800150e:	d018      	beq.n	8001542 <pwm_stm32_pin_set+0xe2>
 8001510:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8001514:	bf0c      	ite	eq
 8001516:	2005      	moveq	r0, #5
 8001518:	2006      	movne	r0, #6
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <pwm_stm32_pin_set+0x148>)
 800151c:	5c19      	ldrb	r1, [r3, r0]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800151e:	4b23      	ldr	r3, [pc, #140]	; (80015ac <pwm_stm32_pin_set+0x14c>)
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001520:	3218      	adds	r2, #24
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001522:	5c18      	ldrb	r0, [r3, r0]
 8001524:	588d      	ldr	r5, [r1, r2]
 8001526:	2308      	movs	r3, #8
 8001528:	4083      	lsls	r3, r0
 800152a:	432b      	orrs	r3, r5
 800152c:	508b      	str	r3, [r1, r2]
	LL_TIM_SetAutoReload(cfg->timer, period_cycles - 1u);
 800152e:	6833      	ldr	r3, [r6, #0]
 8001530:	3c01      	subs	r4, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8001532:	62dc      	str	r4, [r3, #44]	; 0x2c
 8001534:	e7b4      	b.n	80014a0 <pwm_stm32_pin_set+0x40>
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001536:	4648      	mov	r0, r9
 8001538:	e7ef      	b.n	800151a <pwm_stm32_pin_set+0xba>
 800153a:	2002      	movs	r0, #2
 800153c:	e7ed      	b.n	800151a <pwm_stm32_pin_set+0xba>
 800153e:	2003      	movs	r0, #3
 8001540:	e7eb      	b.n	800151a <pwm_stm32_pin_set+0xba>
 8001542:	2004      	movs	r0, #4
 8001544:	e7e9      	b.n	800151a <pwm_stm32_pin_set+0xba>
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001546:	2a04      	cmp	r2, #4
 8001548:	d01b      	beq.n	8001582 <pwm_stm32_pin_set+0x122>
 800154a:	2a10      	cmp	r2, #16
 800154c:	d01b      	beq.n	8001586 <pwm_stm32_pin_set+0x126>
 800154e:	2a40      	cmp	r2, #64	; 0x40
 8001550:	d01b      	beq.n	800158a <pwm_stm32_pin_set+0x12a>
 8001552:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001556:	d01a      	beq.n	800158e <pwm_stm32_pin_set+0x12e>
 8001558:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800155c:	bf0c      	ite	eq
 800155e:	2205      	moveq	r2, #5
 8001560:	2206      	movne	r2, #6
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8001562:	4f13      	ldr	r7, [pc, #76]	; (80015b0 <pwm_stm32_pin_set+0x150>)
 8001564:	6a03      	ldr	r3, [r0, #32]
 8001566:	5cbf      	ldrb	r7, [r7, r2]
 8001568:	2202      	movs	r2, #2
 800156a:	40ba      	lsls	r2, r7
 800156c:	ea23 0302 	bic.w	r3, r3, r2
 8001570:	40bd      	lsls	r5, r7
 8001572:	431d      	orrs	r5, r3
		set_timer_compare[pwm - 1u](cfg->timer, pulse_cycles);
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <pwm_stm32_pin_set+0x154>)
 8001576:	6205      	str	r5, [r0, #32]
 8001578:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800157c:	4641      	mov	r1, r8
 800157e:	4798      	blx	r3
 8001580:	e7d5      	b.n	800152e <pwm_stm32_pin_set+0xce>
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001582:	2201      	movs	r2, #1
 8001584:	e7ed      	b.n	8001562 <pwm_stm32_pin_set+0x102>
 8001586:	2202      	movs	r2, #2
 8001588:	e7eb      	b.n	8001562 <pwm_stm32_pin_set+0x102>
 800158a:	2203      	movs	r2, #3
 800158c:	e7e9      	b.n	8001562 <pwm_stm32_pin_set+0x102>
 800158e:	2204      	movs	r2, #4
 8001590:	e7e7      	b.n	8001562 <pwm_stm32_pin_set+0x102>
		return -EINVAL;
 8001592:	f06f 0015 	mvn.w	r0, #21
 8001596:	e7ac      	b.n	80014f2 <pwm_stm32_pin_set+0x92>
		return -ENOTSUP;
 8001598:	f06f 0022 	mvn.w	r0, #34	; 0x22
 800159c:	e7a9      	b.n	80014f2 <pwm_stm32_pin_set+0x92>
 800159e:	bf00      	nop
 80015a0:	40000c00 	.word	0x40000c00
 80015a4:	08003618 	.word	0x08003618
 80015a8:	08003756 	.word	0x08003756
 80015ac:	08003764 	.word	0x08003764
 80015b0:	0800375d 	.word	0x0800375d
 80015b4:	08003640 	.word	0x08003640

080015b8 <pwm_stm32_init>:
	.pin_set = pwm_stm32_pin_set,
	.get_cycles_per_sec = pwm_stm32_get_cycles_per_sec,
};

static int pwm_stm32_init(struct device *dev)
{
 80015b8:	b570      	push	{r4, r5, r6, lr}
	struct pwm_stm32_data *data = to_data(dev);
 80015ba:	68c5      	ldr	r5, [r0, #12]
	const struct pwm_stm32_config *cfg = to_config(dev);
 80015bc:	6844      	ldr	r4, [r0, #4]
{
 80015be:	b086      	sub	sp, #24
 80015c0:	481f      	ldr	r0, [pc, #124]	; (8001640 <pwm_stm32_init+0x88>)
 80015c2:	f000 fb73 	bl	8001cac <z_impl_device_get_binding>
 80015c6:	6883      	ldr	r3, [r0, #8]

	/* enable clock and store its speed */
	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);
	__ASSERT_NO_MSG(clk);

	r = clock_control_on(clk, (clock_control_subsys_t *)&cfg->pclken);
 80015c8:	f104 0608 	add.w	r6, r4, #8
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4631      	mov	r1, r6
 80015d0:	4798      	blx	r3
	if (r < 0) {
 80015d2:	2800      	cmp	r0, #0
 80015d4:	db2e      	blt.n	8001634 <pwm_stm32_init+0x7c>
 80015d6:	481a      	ldr	r0, [pc, #104]	; (8001640 <pwm_stm32_init+0x88>)
 80015d8:	f000 fb68 	bl	8001cac <z_impl_device_get_binding>
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->name);

	return api->get_rate(dev, sys, rate);
 80015dc:	6883      	ldr	r3, [r0, #8]
 80015de:	aa01      	add	r2, sp, #4
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	4631      	mov	r1, r6
 80015e4:	4798      	blx	r3
	if (r < 0) {
 80015e6:	2800      	cmp	r0, #0
 80015e8:	db24      	blt.n	8001634 <pwm_stm32_init+0x7c>
		*tim_clk = bus_clk * 2u;
 80015ea:	9b01      	ldr	r3, [sp, #4]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	602b      	str	r3, [r5, #0]
		LOG_ERR("Could not obtain timer clock (%d)", r);
		return r;
	}

	/* initialize timer */
	LL_TIM_StructInit(&init);
 80015f0:	a801      	add	r0, sp, #4
 80015f2:	f001 fcb9 	bl	8002f68 <LL_TIM_StructInit>

	init.Prescaler = cfg->prescaler;
 80015f6:	6863      	ldr	r3, [r4, #4]
 80015f8:	f8ad 3004 	strh.w	r3, [sp, #4]
	init.CounterMode = LL_TIM_COUNTERMODE_UP;
 80015fc:	2300      	movs	r3, #0
	init.Autoreload = 0u;
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
	init.RepetitionCounter = 0u;
 80015fe:	f88d 3014 	strb.w	r3, [sp, #20]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001602:	6820      	ldr	r0, [r4, #0]
	init.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001604:	9304      	str	r3, [sp, #16]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 8001606:	a901      	add	r1, sp, #4
	init.Autoreload = 0u;
 8001608:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (LL_TIM_Init(cfg->timer, &init) != SUCCESS) {
 800160c:	f000 f8f6 	bl	80017fc <LL_TIM_Init>
 8001610:	b990      	cbnz	r0, 8001638 <pwm_stm32_init+0x80>
		LOG_ERR("Could not initialize timer");
		return -EIO;
	}

	/* enable outputs and counter */
	if (IS_TIM_BREAK_INSTANCE(cfg->timer)) {
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <pwm_stm32_init+0x8c>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d003      	beq.n	8001622 <pwm_stm32_init+0x6a>
 800161a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800161e:	4293      	cmp	r3, r2
 8001620:	d103      	bne.n	800162a <pwm_stm32_init+0x72>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001622:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001624:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001628:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	f042 0201 	orr.w	r2, r2, #1
 8001630:	601a      	str	r2, [r3, #0]
		LL_TIM_EnableAllOutputs(cfg->timer);
	}

	LL_TIM_EnableCounter(cfg->timer);

	return 0;
 8001632:	2000      	movs	r0, #0
}
 8001634:	b006      	add	sp, #24
 8001636:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
 8001638:	f06f 0004 	mvn.w	r0, #4
 800163c:	e7fa      	b.n	8001634 <pwm_stm32_init+0x7c>
 800163e:	bf00      	nop
 8001640:	080036fe 	.word	0x080036fe
 8001644:	40010000 	.word	0x40010000

08001648 <uart_stm32_configure>:
	return UART_CFG_FLOW_CTRL_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 8001648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
	const uint32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 800164c:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800164e:	6843      	ldr	r3, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001650:	68c6      	ldr	r6, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001652:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 8001654:	2a01      	cmp	r2, #1
{
 8001656:	460d      	mov	r5, r1
	switch (parity) {
 8001658:	d075      	beq.n	8001746 <uart_stm32_configure+0xfe>
		return LL_USART_PARITY_NONE;
 800165a:	2a02      	cmp	r2, #2
 800165c:	bf0c      	ite	eq
 800165e:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8001662:	2100      	movne	r1, #0
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001664:	f895 8005 	ldrb.w	r8, [r5, #5]
	const uint32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8001668:	f895 9006 	ldrb.w	r9, [r5, #6]
	const uint32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 800166c:	79ef      	ldrb	r7, [r5, #7]
 800166e:	f1b8 0f02 	cmp.w	r8, #2
 8001672:	bf96      	itet	ls
 8001674:	4b37      	ldrls	r3, [pc, #220]	; (8001754 <uart_stm32_configure+0x10c>)
	const uint32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8001676:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 800167a:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 800167e:	f1b9 0f04 	cmp.w	r9, #4
 8001682:	bf0c      	ite	eq
 8001684:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001688:	2300      	movne	r3, #0

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 800168a:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 800168c:	2f01      	cmp	r7, #1
 800168e:	bf14      	ite	ne
 8001690:	f04f 0c00 	movne.w	ip, #0
 8001694:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8001698:	2a01      	cmp	r2, #1
 800169a:	d957      	bls.n	800174c <uart_stm32_configure+0x104>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 800169c:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 80016a0:	d054      	beq.n	800174c <uart_stm32_configure+0x104>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 80016a2:	f1b9 0f02 	cmp.w	r9, #2
 80016a6:	d951      	bls.n	800174c <uart_stm32_configure+0x104>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 80016a8:	b187      	cbz	r7, 80016cc <uart_stm32_configure+0x84>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 80016aa:	4a2b      	ldr	r2, [pc, #172]	; (8001758 <uart_stm32_configure+0x110>)
 80016ac:	4294      	cmp	r4, r2
 80016ae:	d00b      	beq.n	80016c8 <uart_stm32_configure+0x80>
 80016b0:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 80016b4:	4294      	cmp	r4, r2
 80016b6:	d007      	beq.n	80016c8 <uart_stm32_configure+0x80>
 80016b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016bc:	4294      	cmp	r4, r2
 80016be:	d003      	beq.n	80016c8 <uart_stm32_configure+0x80>
 80016c0:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 80016c4:	4294      	cmp	r4, r2
 80016c6:	d141      	bne.n	800174c <uart_stm32_configure+0x104>
 80016c8:	2f01      	cmp	r7, #1
 80016ca:	d13f      	bne.n	800174c <uart_stm32_configure+0x104>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80016cc:	68e2      	ldr	r2, [r4, #12]
 80016ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80016d2:	60e2      	str	r2, [r4, #12]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 80016d4:	68e2      	ldr	r2, [r4, #12]
 80016d6:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 80016da:	428a      	cmp	r2, r1
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 80016dc:	bf1f      	itttt	ne
 80016de:	68e7      	ldrne	r7, [r4, #12]
 80016e0:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 80016e4:	430f      	orrne	r7, r1
 80016e6:	60e7      	strne	r7, [r4, #12]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 80016e8:	6922      	ldr	r2, [r4, #16]
 80016ea:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 80016ee:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80016f0:	bf1f      	itttt	ne
 80016f2:	6921      	ldrne	r1, [r4, #16]
 80016f4:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 80016f8:	ea41 010e 	orrne.w	r1, r1, lr
 80016fc:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 80016fe:	68e2      	ldr	r2, [r4, #12]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8001700:	6829      	ldr	r1, [r5, #0]
 8001702:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8001706:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8001708:	bf1f      	itttt	ne
 800170a:	68e2      	ldrne	r2, [r4, #12]
 800170c:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8001710:	431a      	orrne	r2, r3
 8001712:	60e2      	strne	r2, [r4, #12]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8001714:	6963      	ldr	r3, [r4, #20]
 8001716:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800171a:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800171c:	bf1f      	itttt	ne
 800171e:	6963      	ldrne	r3, [r4, #20]
 8001720:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8001724:	ea43 030c 	orrne.w	r3, r3, ip
 8001728:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 800172a:	6833      	ldr	r3, [r6, #0]
 800172c:	4299      	cmp	r1, r3
 800172e:	d003      	beq.n	8001738 <uart_stm32_configure+0xf0>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8001730:	f001 fbf6 	bl	8002f20 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8001734:	682b      	ldr	r3, [r5, #0]
 8001736:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001738:	68e3      	ldr	r3, [r4, #12]
 800173a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800173e:	60e3      	str	r3, [r4, #12]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8001740:	2000      	movs	r0, #0
};
 8001742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	switch (parity) {
 8001746:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800174a:	e78b      	b.n	8001664 <uart_stm32_configure+0x1c>
		return -ENOTSUP;
 800174c:	f06f 0022 	mvn.w	r0, #34	; 0x22
 8001750:	e7f7      	b.n	8001742 <uart_stm32_configure+0xfa>
 8001752:	bf00      	nop
 8001754:	080036ac 	.word	0x080036ac
 8001758:	40011000 	.word	0x40011000

0800175c <uart_stm32_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
 800175c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8001760:	f8d0 8004 	ldr.w	r8, [r0, #4]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8001764:	68c7      	ldr	r7, [r0, #12]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8001766:	4645      	mov	r5, r8
{
 8001768:	4606      	mov	r6, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800176a:	f855 4b08 	ldr.w	r4, [r5], #8
 800176e:	4822      	ldr	r0, [pc, #136]	; (80017f8 <uart_stm32_init+0x9c>)
 8001770:	f000 fa9c 	bl	8001cac <z_impl_device_get_binding>
	return api->on(dev, sys);
 8001774:	6883      	ldr	r3, [r0, #8]
	data->clock = clk;
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	4629      	mov	r1, r5
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4798      	blx	r3
	uint32_t ll_parity;
	uint32_t ll_datawidth;

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 800177e:	4605      	mov	r5, r0
 8001780:	2800      	cmp	r0, #0
 8001782:	d136      	bne.n	80017f2 <uart_stm32_init+0x96>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8001784:	68e3      	ldr	r3, [r4, #12]
 8001786:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800178a:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800178c:	68e3      	ldr	r3, [r4, #12]
 800178e:	f043 030c 	orr.w	r3, r3, #12
 8001792:	60e3      	str	r3, [r4, #12]
				      LL_USART_DIRECTION_TX_RX);

	/* Determine the datawidth and parity. If we use other parity than
	 * 'none' we must use datawidth = 9 (to get 8 databit + 1 parity bit).
	 */
	if (config->parity == 2) {
 8001794:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d025      	beq.n	80017e8 <uart_stm32_init+0x8c>
		/* 8 databit, 1 parity bit, parity even */
		ll_parity = LL_USART_PARITY_EVEN;
		ll_datawidth = LL_USART_DATAWIDTH_9B;
	} else if (config->parity == 1) {
 800179c:	2b01      	cmp	r3, #1
			LOG_WRN("Invalid parity setting '%d'."
				"Defaulting to 'none'.", config->parity);
		}
		/* 8 databit, parity none */
		ll_parity = LL_USART_PARITY_NONE;
		ll_datawidth = LL_USART_DATAWIDTH_8B;
 800179e:	bf15      	itete	ne
 80017a0:	4602      	movne	r2, r0
 80017a2:	f44f 5280 	moveq.w	r2, #4096	; 0x1000
 80017a6:	4601      	movne	r1, r0
 80017a8:	f44f 61c0 	moveq.w	r1, #1536	; 0x600
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80017ac:	68e3      	ldr	r3, [r4, #12]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80017b8:	6923      	ldr	r3, [r4, #16]
 80017ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80017be:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 ll_datawidth,
				 ll_parity,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 80017c0:	f898 3010 	ldrb.w	r3, [r8, #16]
 80017c4:	b12b      	cbz	r3, 80017d2 <uart_stm32_init+0x76>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80017c6:	6873      	ldr	r3, [r6, #4]
 80017c8:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80017ca:	6953      	ldr	r3, [r2, #20]
 80017cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017d0:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 80017d2:	6839      	ldr	r1, [r7, #0]
 80017d4:	4630      	mov	r0, r6
 80017d6:	f001 fba3 	bl	8002f20 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80017da:	68e3      	ldr	r3, [r4, #12]
 80017dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017e0:	60e3      	str	r3, [r4, #12]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 80017e2:	4628      	mov	r0, r5
 80017e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ll_datawidth = LL_USART_DATAWIDTH_9B;
 80017e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		ll_parity = LL_USART_PARITY_EVEN;
 80017ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017f0:	e7dc      	b.n	80017ac <uart_stm32_init+0x50>
		return -EIO;
 80017f2:	f06f 0504 	mvn.w	r5, #4
 80017f6:	e7f4      	b.n	80017e2 <uart_stm32_init+0x86>
 80017f8:	080036fe 	.word	0x080036fe

080017fc <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017fc:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <LL_TIM_Init+0xc0>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80017fe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001800:	4290      	cmp	r0, r2
 8001802:	d012      	beq.n	800182a <LL_TIM_Init+0x2e>
 8001804:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001808:	d00f      	beq.n	800182a <LL_TIM_Init+0x2e>
 800180a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800180e:	4290      	cmp	r0, r2
 8001810:	d00b      	beq.n	800182a <LL_TIM_Init+0x2e>
 8001812:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001816:	4290      	cmp	r0, r2
 8001818:	d007      	beq.n	800182a <LL_TIM_Init+0x2e>
 800181a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800181e:	4290      	cmp	r0, r2
 8001820:	d003      	beq.n	800182a <LL_TIM_Init+0x2e>
 8001822:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001826:	4290      	cmp	r0, r2
 8001828:	d119      	bne.n	800185e <LL_TIM_Init+0x62>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800182a:	684a      	ldr	r2, [r1, #4]
 800182c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001830:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001832:	4a22      	ldr	r2, [pc, #136]	; (80018bc <LL_TIM_Init+0xc0>)
 8001834:	4290      	cmp	r0, r2
 8001836:	d029      	beq.n	800188c <LL_TIM_Init+0x90>
 8001838:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800183c:	d026      	beq.n	800188c <LL_TIM_Init+0x90>
 800183e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001842:	4290      	cmp	r0, r2
 8001844:	d022      	beq.n	800188c <LL_TIM_Init+0x90>
 8001846:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800184a:	4290      	cmp	r0, r2
 800184c:	d01e      	beq.n	800188c <LL_TIM_Init+0x90>
 800184e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001852:	4290      	cmp	r0, r2
 8001854:	d01a      	beq.n	800188c <LL_TIM_Init+0x90>
 8001856:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800185a:	4290      	cmp	r0, r2
 800185c:	d016      	beq.n	800188c <LL_TIM_Init+0x90>
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <LL_TIM_Init+0xc4>)
 8001860:	4290      	cmp	r0, r2
 8001862:	d013      	beq.n	800188c <LL_TIM_Init+0x90>
 8001864:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001868:	4290      	cmp	r0, r2
 800186a:	d00f      	beq.n	800188c <LL_TIM_Init+0x90>
 800186c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001870:	4290      	cmp	r0, r2
 8001872:	d00b      	beq.n	800188c <LL_TIM_Init+0x90>
 8001874:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001878:	4290      	cmp	r0, r2
 800187a:	d007      	beq.n	800188c <LL_TIM_Init+0x90>
 800187c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001880:	4290      	cmp	r0, r2
 8001882:	d003      	beq.n	800188c <LL_TIM_Init+0x90>
 8001884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001888:	4290      	cmp	r0, r2
 800188a:	d103      	bne.n	8001894 <LL_TIM_Init+0x98>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800188c:	68ca      	ldr	r2, [r1, #12]
 800188e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001892:	4313      	orrs	r3, r2
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001894:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001896:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001898:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800189a:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800189c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <LL_TIM_Init+0xc0>)
 80018a0:	4298      	cmp	r0, r3
 80018a2:	d003      	beq.n	80018ac <LL_TIM_Init+0xb0>
 80018a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a8:	4298      	cmp	r0, r3
 80018aa:	d101      	bne.n	80018b0 <LL_TIM_Init+0xb4>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80018ac:	7c0b      	ldrb	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80018ae:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80018b0:	6943      	ldr	r3, [r0, #20]
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 80018b8:	2000      	movs	r0, #0
 80018ba:	4770      	bx	lr
 80018bc:	40010000 	.word	0x40010000
 80018c0:	40014000 	.word	0x40014000

080018c4 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 80018c4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 80018c8:	b530      	push	{r4, r5, lr}
  switch (Channel)
 80018ca:	f000 809b 	beq.w	8001a04 <LL_TIM_OC_Init+0x140>
 80018ce:	d805      	bhi.n	80018dc <LL_TIM_OC_Init+0x18>
 80018d0:	2901      	cmp	r1, #1
 80018d2:	d02d      	beq.n	8001930 <LL_TIM_OC_Init+0x6c>
 80018d4:	2910      	cmp	r1, #16
 80018d6:	d05f      	beq.n	8001998 <LL_TIM_OC_Init+0xd4>
 80018d8:	2001      	movs	r0, #1
    default:
      break;
  }

  return result;
}
 80018da:	bd30      	pop	{r4, r5, pc}
  switch (Channel)
 80018dc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80018e0:	d1fa      	bne.n	80018d8 <LL_TIM_OC_Init+0x14>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80018e2:	6a03      	ldr	r3, [r0, #32]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80018e4:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80018e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018ea:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80018ec:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80018ee:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80018f0:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80018f2:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80018f6:	ea41 2105 	orr.w	r1, r1, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80018fa:	6915      	ldr	r5, [r2, #16]
 80018fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001900:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001904:	6855      	ldr	r5, [r2, #4]
 8001906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800190a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800190e:	4d58      	ldr	r5, [pc, #352]	; (8001a70 <LL_TIM_OC_Init+0x1ac>)
 8001910:	42a8      	cmp	r0, r5
 8001912:	d003      	beq.n	800191c <LL_TIM_OC_Init+0x58>
 8001914:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001918:	42a8      	cmp	r0, r5
 800191a:	d104      	bne.n	8001926 <LL_TIM_OC_Init+0x62>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800191c:	6995      	ldr	r5, [r2, #24]
 800191e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8001922:	ea44 1485 	orr.w	r4, r4, r5, lsl #6

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001926:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001928:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800192a:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800192c:	6402      	str	r2, [r0, #64]	; 0x40
 800192e:	e030      	b.n	8001992 <LL_TIM_OC_Init+0xce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001930:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001932:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001934:	f023 0301 	bic.w	r3, r3, #1
 8001938:	6203      	str	r3, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800193a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800193c:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800193e:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001940:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001944:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001946:	6915      	ldr	r5, [r2, #16]
 8001948:	f023 0302 	bic.w	r3, r3, #2
 800194c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800194e:	6855      	ldr	r5, [r2, #4]
 8001950:	f023 0301 	bic.w	r3, r3, #1
 8001954:	432b      	orrs	r3, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001956:	4d46      	ldr	r5, [pc, #280]	; (8001a70 <LL_TIM_OC_Init+0x1ac>)
 8001958:	42a8      	cmp	r0, r5
 800195a:	d003      	beq.n	8001964 <LL_TIM_OC_Init+0xa0>
 800195c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001960:	42a8      	cmp	r0, r5
 8001962:	d112      	bne.n	800198a <LL_TIM_OC_Init+0xc6>
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001964:	6955      	ldr	r5, [r2, #20]
 8001966:	f023 0308 	bic.w	r3, r3, #8
 800196a:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800196e:	6895      	ldr	r5, [r2, #8]
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001978:	6995      	ldr	r5, [r2, #24]
 800197a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800197e:	4329      	orrs	r1, r5
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001980:	69d5      	ldr	r5, [r2, #28]
 8001982:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8001986:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800198a:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800198c:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800198e:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001990:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001992:	6203      	str	r3, [r0, #32]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001994:	2000      	movs	r0, #0
      break;
 8001996:	e7a0      	b.n	80018da <LL_TIM_OC_Init+0x16>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001998:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800199a:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800199c:	f023 0310 	bic.w	r3, r3, #16
 80019a0:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80019a2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80019a4:	6841      	ldr	r1, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80019a6:	6984      	ldr	r4, [r0, #24]
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80019a8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80019ac:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80019b0:	6915      	ldr	r5, [r2, #16]
 80019b2:	f023 0320 	bic.w	r3, r3, #32
 80019b6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80019ba:	6855      	ldr	r5, [r2, #4]
 80019bc:	f023 0310 	bic.w	r3, r3, #16
 80019c0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80019c4:	4d2a      	ldr	r5, [pc, #168]	; (8001a70 <LL_TIM_OC_Init+0x1ac>)
 80019c6:	42a8      	cmp	r0, r5
 80019c8:	d003      	beq.n	80019d2 <LL_TIM_OC_Init+0x10e>
 80019ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80019ce:	42a8      	cmp	r0, r5
 80019d0:	d113      	bne.n	80019fa <LL_TIM_OC_Init+0x136>
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80019d2:	6955      	ldr	r5, [r2, #20]
 80019d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019d8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80019dc:	6895      	ldr	r5, [r2, #8]
 80019de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80019e2:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80019e6:	6995      	ldr	r5, [r2, #24]
 80019e8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80019ec:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80019f0:	69d5      	ldr	r5, [r2, #28]
 80019f2:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80019f6:	ea41 01c5 	orr.w	r1, r1, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80019fa:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019fc:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80019fe:	6184      	str	r4, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001a00:	6382      	str	r2, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a02:	e7c6      	b.n	8001992 <LL_TIM_OC_Init+0xce>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a04:	6a03      	ldr	r3, [r0, #32]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a06:	6815      	ldr	r5, [r2, #0]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001a08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a0c:	6203      	str	r3, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001a0e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a10:	6841      	ldr	r1, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a12:	69c4      	ldr	r4, [r0, #28]
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001a14:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8001a18:	432c      	orrs	r4, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001a1a:	6915      	ldr	r5, [r2, #16]
 8001a1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a20:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001a24:	6855      	ldr	r5, [r2, #4]
 8001a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a2e:	4d10      	ldr	r5, [pc, #64]	; (8001a70 <LL_TIM_OC_Init+0x1ac>)
 8001a30:	42a8      	cmp	r0, r5
 8001a32:	d003      	beq.n	8001a3c <LL_TIM_OC_Init+0x178>
 8001a34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001a38:	42a8      	cmp	r0, r5
 8001a3a:	d113      	bne.n	8001a64 <LL_TIM_OC_Init+0x1a0>
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001a3c:	6955      	ldr	r5, [r2, #20]
 8001a3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001a42:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001a46:	6895      	ldr	r5, [r2, #8]
 8001a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001a4c:	ea43 2385 	orr.w	r3, r3, r5, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001a50:	6995      	ldr	r5, [r2, #24]
 8001a52:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8001a56:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001a5a:	69d5      	ldr	r5, [r2, #28]
 8001a5c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8001a60:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001a64:	68d2      	ldr	r2, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001a66:	6041      	str	r1, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001a68:	61c4      	str	r4, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001a6a:	63c2      	str	r2, [r0, #60]	; 0x3c
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001a6c:	e791      	b.n	8001992 <LL_TIM_OC_Init+0xce>
 8001a6e:	bf00      	nop
 8001a70:	40010000 	.word	0x40010000

08001a74 <UTILS_PLL_IsBusy>:
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <UTILS_PLL_IsBusy+0x18>)
 8001a76:	681a      	ldr	r2, [r3, #0]
  * @rmtoll CR           PLLI2SRDY    LL_RCC_PLLI2S_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLI2S_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001a78:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001a7a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8001a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8001a82:	4313      	orrs	r3, r2
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8001a84:	bf14      	ite	ne
 8001a86:	2001      	movne	r0, #1
 8001a88:	2000      	moveq	r0, #0
 8001a8a:	4770      	bx	lr
 8001a8c:	40023800 	.word	0x40023800

08001a90 <LL_SetFlashLatency>:
  if(HCLK_Frequency == 0U)
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d043      	beq.n	8001b1c <LL_SetFlashLatency+0x8c>
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8001a94:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <LL_SetFlashLatency+0xa8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8001a98:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
 8001a9c:	d012      	beq.n	8001ac4 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001a9e:	4b27      	ldr	r3, [pc, #156]	; (8001b3c <LL_SetFlashLatency+0xac>)
 8001aa0:	4a27      	ldr	r2, [pc, #156]	; (8001b40 <LL_SetFlashLatency+0xb0>)
 8001aa2:	4298      	cmp	r0, r3
 8001aa4:	d83e      	bhi.n	8001b24 <LL_SetFlashLatency+0x94>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001aa6:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <LL_SetFlashLatency+0xb4>)
 8001aa8:	4298      	cmp	r0, r3
 8001aaa:	d842      	bhi.n	8001b32 <LL_SetFlashLatency+0xa2>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001aac:	4290      	cmp	r0, r2
 8001aae:	d837      	bhi.n	8001b20 <LL_SetFlashLatency+0x90>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <LL_SetFlashLatency+0xb8>)
 8001ab2:	4298      	cmp	r0, r3
 8001ab4:	d826      	bhi.n	8001b04 <LL_SetFlashLatency+0x74>
 8001ab6:	2300      	movs	r3, #0
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ab8:	4a24      	ldr	r2, [pc, #144]	; (8001b4c <LL_SetFlashLatency+0xbc>)
 8001aba:	4290      	cmp	r0, r2
 8001abc:	d902      	bls.n	8001ac4 <LL_SetFlashLatency+0x34>
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	bf38      	it	cc
 8001ac2:	2301      	movcc	r3, #1
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <LL_SetFlashLatency+0xa8>)
 8001ac6:	6812      	ldr	r2, [r2, #0]
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8001ac8:	0452      	lsls	r2, r2, #17
 8001aca:	d40e      	bmi.n	8001aea <LL_SetFlashLatency+0x5a>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001acc:	4a20      	ldr	r2, [pc, #128]	; (8001b50 <LL_SetFlashLatency+0xc0>)
 8001ace:	4290      	cmp	r0, r2
 8001ad0:	d91a      	bls.n	8001b08 <LL_SetFlashLatency+0x78>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ad2:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <LL_SetFlashLatency+0xb0>)
        latency = LL_FLASH_LATENCY_4;
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bf08      	it	eq
 8001ad8:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ada:	4290      	cmp	r0, r2
 8001adc:	d802      	bhi.n	8001ae4 <LL_SetFlashLatency+0x54>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ade:	4a1a      	ldr	r2, [pc, #104]	; (8001b48 <LL_SetFlashLatency+0xb8>)
 8001ae0:	4290      	cmp	r0, r2
 8001ae2:	d815      	bhi.n	8001b10 <LL_SetFlashLatency+0x80>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <LL_SetFlashLatency+0xbc>)
 8001ae6:	4290      	cmp	r0, r2
 8001ae8:	d812      	bhi.n	8001b10 <LL_SetFlashLatency+0x80>
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001aea:	491a      	ldr	r1, [pc, #104]	; (8001b54 <LL_SetFlashLatency+0xc4>)
 8001aec:	680a      	ldr	r2, [r1, #0]
 8001aee:	f022 020f 	bic.w	r2, r2, #15
 8001af2:	431a      	orrs	r2, r3
 8001af4:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001af6:	6808      	ldr	r0, [r1, #0]
 8001af8:	f000 000f 	and.w	r0, r0, #15
    status = ERROR;
 8001afc:	1ac0      	subs	r0, r0, r3
 8001afe:	bf18      	it	ne
 8001b00:	2001      	movne	r0, #1
 8001b02:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_2;
 8001b04:	2302      	movs	r3, #2
 8001b06:	e7dd      	b.n	8001ac4 <LL_SetFlashLatency+0x34>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001b08:	4a0f      	ldr	r2, [pc, #60]	; (8001b48 <LL_SetFlashLatency+0xb8>)
 8001b0a:	4290      	cmp	r0, r2
 8001b0c:	d9ea      	bls.n	8001ae4 <LL_SetFlashLatency+0x54>
 8001b0e:	b11b      	cbz	r3, 8001b18 <LL_SetFlashLatency+0x88>
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	bf38      	it	cc
 8001b14:	2301      	movcc	r3, #1
 8001b16:	e7e8      	b.n	8001aea <LL_SetFlashLatency+0x5a>
        latency = LL_FLASH_LATENCY_2;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e7e6      	b.n	8001aea <LL_SetFlashLatency+0x5a>
    status = ERROR;
 8001b1c:	2001      	movs	r0, #1
}
 8001b1e:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8001b20:	2303      	movs	r3, #3
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001b22:	e7c9      	b.n	8001ab8 <LL_SetFlashLatency+0x28>
        latency = LL_FLASH_LATENCY_5;
 8001b24:	2305      	movs	r3, #5
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001b26:	4290      	cmp	r0, r2
 8001b28:	d8c6      	bhi.n	8001ab8 <LL_SetFlashLatency+0x28>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8001b2a:	4a07      	ldr	r2, [pc, #28]	; (8001b48 <LL_SetFlashLatency+0xb8>)
 8001b2c:	4290      	cmp	r0, r2
 8001b2e:	d9c3      	bls.n	8001ab8 <LL_SetFlashLatency+0x28>
 8001b30:	e7c5      	b.n	8001abe <LL_SetFlashLatency+0x2e>
        latency = LL_FLASH_LATENCY_4;
 8001b32:	2304      	movs	r3, #4
 8001b34:	e7f7      	b.n	8001b26 <LL_SetFlashLatency+0x96>
 8001b36:	bf00      	nop
 8001b38:	40007000 	.word	0x40007000
 8001b3c:	08f0d180 	.word	0x08f0d180
 8001b40:	055d4a80 	.word	0x055d4a80
 8001b44:	07270e00 	.word	0x07270e00
 8001b48:	03938700 	.word	0x03938700
 8001b4c:	01c9c380 	.word	0x01c9c380
 8001b50:	00b71b00 	.word	0x00b71b00
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001b58:	680b      	ldr	r3, [r1, #0]
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <UTILS_EnablePLLAndSwitchSystem+0x88>)
 8001b5c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8001b60:	b570      	push	{r4, r5, r6, lr}
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001b62:	5cd3      	ldrb	r3, [r2, r3]

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8001b64:	4e1f      	ldr	r6, [pc, #124]	; (8001be4 <UTILS_EnablePLLAndSwitchSystem+0x8c>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8001b66:	fa20 f403 	lsr.w	r4, r0, r3
  if(SystemCoreClock < hclk_frequency)
 8001b6a:	6833      	ldr	r3, [r6, #0]
 8001b6c:	42a3      	cmp	r3, r4
{
 8001b6e:	460d      	mov	r5, r1
  if(SystemCoreClock < hclk_frequency)
 8001b70:	d327      	bcc.n	8001bc2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001b72:	4b1d      	ldr	r3, [pc, #116]	; (8001be8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001b7a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8001b7c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8001b7e:	0192      	lsls	r2, r2, #6
 8001b80:	d5fc      	bpl.n	8001b7c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	6829      	ldr	r1, [r5, #0]
 8001b86:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	f022 0203 	bic.w	r2, r2, #3
 8001b94:	f042 0202 	orr.w	r2, r2, #2
 8001b98:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <UTILS_EnablePLLAndSwitchSystem+0x90>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001ba2:	2a08      	cmp	r2, #8
 8001ba4:	d1fa      	bne.n	8001b9c <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	6869      	ldr	r1, [r5, #4]
 8001baa:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	68a9      	ldr	r1, [r5, #8]
 8001bb6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	609a      	str	r2, [r3, #8]
}
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	e004      	b.n	8001bcc <UTILS_EnablePLLAndSwitchSystem+0x74>
    status = LL_SetFlashLatency(hclk_frequency);
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7ff ff64 	bl	8001a90 <LL_SetFlashLatency>
  if(status == SUCCESS)
 8001bc8:	2800      	cmp	r0, #0
 8001bca:	d0d2      	beq.n	8001b72 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8001bcc:	6833      	ldr	r3, [r6, #0]
 8001bce:	42a3      	cmp	r3, r4
 8001bd0:	d902      	bls.n	8001bd8 <UTILS_EnablePLLAndSwitchSystem+0x80>
  {
    /* Set FLASH latency to lowest latency */
    status = LL_SetFlashLatency(hclk_frequency);
 8001bd2:	4620      	mov	r0, r4
 8001bd4:	f7ff ff5c 	bl	8001a90 <LL_SetFlashLatency>
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8001bd8:	b900      	cbnz	r0, 8001bdc <UTILS_EnablePLLAndSwitchSystem+0x84>
  SystemCoreClock = HCLKFrequency;
 8001bda:	6034      	str	r4, [r6, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8001bdc:	bd70      	pop	{r4, r5, r6, pc}
 8001bde:	bf00      	nop
 8001be0:	08003772 	.word	0x08003772
 8001be4:	2000002c 	.word	0x2000002c
 8001be8:	40023800 	.word	0x40023800

08001bec <LL_PLL_ConfigSystemClock_HSE>:
{
 8001bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bf0:	460d      	mov	r5, r1
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4690      	mov	r8, r2
 8001bf6:	4619      	mov	r1, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8001bf8:	f7ff ff3c 	bl	8001a74 <UTILS_PLL_IsBusy>
 8001bfc:	2800      	cmp	r0, #0
 8001bfe:	d138      	bne.n	8001c72 <LL_PLL_ConfigSystemClock_HSE+0x86>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001c00:	f8d8 6000 	ldr.w	r6, [r8]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001c04:	f8d8 7004 	ldr.w	r7, [r8, #4]
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c08:	f8d8 3008 	ldr.w	r3, [r8, #8]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8001c0c:	f006 003f 	and.w	r0, r6, #63	; 0x3f
 8001c10:	fbb4 f4f0 	udiv	r4, r4, r0
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8001c14:	f3c7 0008 	ubfx	r0, r7, #0, #9
 8001c18:	4344      	muls	r4, r0
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c1a:	0c18      	lsrs	r0, r3, #16
 8001c1c:	3001      	adds	r0, #1
 8001c1e:	0040      	lsls	r0, r0, #1
 8001c20:	fbb4 f0f0 	udiv	r0, r4, r0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001c24:	4c14      	ldr	r4, [pc, #80]	; (8001c78 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001c26:	6822      	ldr	r2, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 8001c28:	0392      	lsls	r2, r2, #14
 8001c2a:	d40f      	bmi.n	8001c4c <LL_PLL_ConfigSystemClock_HSE+0x60>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001c2c:	6822      	ldr	r2, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8001c2e:	2d01      	cmp	r5, #1
 8001c30:	bf0c      	ite	eq
 8001c32:	f442 2280 	orreq.w	r2, r2, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001c36:	f422 2280 	bicne.w	r2, r2, #262144	; 0x40000
 8001c3a:	6022      	str	r2, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001c3c:	6822      	ldr	r2, [r4, #0]
 8001c3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c42:	6022      	str	r2, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8001c44:	4c0c      	ldr	r4, [pc, #48]	; (8001c78 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001c46:	6822      	ldr	r2, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8001c48:	0392      	lsls	r2, r2, #14
 8001c4a:	d5fc      	bpl.n	8001c46 <LL_PLL_ConfigSystemClock_HSE+0x5a>
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001c4c:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <LL_PLL_ConfigSystemClock_HSE+0x8c>)
 8001c4e:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <LL_PLL_ConfigSystemClock_HSE+0x90>)
 8001c50:	6865      	ldr	r5, [r4, #4]
 8001c52:	402a      	ands	r2, r5
 8001c54:	ea42 1287 	orr.w	r2, r2, r7, lsl #6
 8001c58:	4332      	orrs	r2, r6
 8001c5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c5e:	6062      	str	r2, [r4, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001c60:	6862      	ldr	r2, [r4, #4]
 8001c62:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c66:	431a      	orrs	r2, r3
 8001c68:	6062      	str	r2, [r4, #4]
}
 8001c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8001c6e:	f7ff bf73 	b.w	8001b58 <UTILS_EnablePLLAndSwitchSystem>
}
 8001c72:	2001      	movs	r0, #1
 8001c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	ffbf8000 	.word	0xffbf8000

08001c80 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <z_sys_init_run_level+0x28>)
 8001c84:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001c88:	3001      	adds	r0, #1
			if (dev) {
				/* Initialization failed. Clear the API struct
				 * so that device_get_binding() will not succeed
				 * for it.
				 */
				dev->driver_api = NULL;
 8001c8a:	2700      	movs	r7, #0
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001c8c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8001c90:	42a6      	cmp	r6, r4
 8001c92:	d800      	bhi.n	8001c96 <z_sys_init_run_level+0x16>
			}
		}
	}
}
 8001c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		retval = entry->init(dev);
 8001c96:	e9d4 3500 	ldrd	r3, r5, [r4]
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	4798      	blx	r3
		if (retval != 0) {
 8001c9e:	b108      	cbz	r0, 8001ca4 <z_sys_init_run_level+0x24>
			if (dev) {
 8001ca0:	b105      	cbz	r5, 8001ca4 <z_sys_init_run_level+0x24>
				dev->driver_api = NULL;
 8001ca2:	60af      	str	r7, [r5, #8]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
 8001ca4:	3408      	adds	r4, #8
 8001ca6:	e7f3      	b.n	8001c90 <z_sys_init_run_level+0x10>
 8001ca8:	08003694 	.word	0x08003694

08001cac <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <z_impl_device_get_binding+0x40>)
{
 8001cae:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cb0:	4c0f      	ldr	r4, [pc, #60]	; (8001cf0 <z_impl_device_get_binding+0x44>)
{
 8001cb2:	4605      	mov	r5, r0
 8001cb4:	461e      	mov	r6, r3
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cb6:	429c      	cmp	r4, r3
 8001cb8:	d104      	bne.n	8001cc4 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (dev->name == name)) {
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
 8001cba:	4c0d      	ldr	r4, [pc, #52]	; (8001cf0 <z_impl_device_get_binding+0x44>)
 8001cbc:	42b4      	cmp	r4, r6
 8001cbe:	d108      	bne.n	8001cd2 <z_impl_device_get_binding+0x26>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
			return dev;
		}
	}

	return NULL;
 8001cc0:	2400      	movs	r4, #0
 8001cc2:	e010      	b.n	8001ce6 <z_impl_device_get_binding+0x3a>
		if (z_device_ready(dev) && (dev->name == name)) {
 8001cc4:	68a2      	ldr	r2, [r4, #8]
 8001cc6:	b112      	cbz	r2, 8001cce <z_impl_device_get_binding+0x22>
 8001cc8:	6822      	ldr	r2, [r4, #0]
 8001cca:	42aa      	cmp	r2, r5
 8001ccc:	d00b      	beq.n	8001ce6 <z_impl_device_get_binding+0x3a>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cce:	3410      	adds	r4, #16
 8001cd0:	e7f1      	b.n	8001cb6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001cd2:	68a3      	ldr	r3, [r4, #8]
 8001cd4:	b90b      	cbnz	r3, 8001cda <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
 8001cd6:	3410      	adds	r4, #16
 8001cd8:	e7f0      	b.n	8001cbc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
 8001cda:	6821      	ldr	r1, [r4, #0]
 8001cdc:	4628      	mov	r0, r5
 8001cde:	f000 ff10 	bl	8002b02 <strcmp>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	d1f7      	bne.n	8001cd6 <z_impl_device_get_binding+0x2a>
}
 8001ce6:	4620      	mov	r0, r4
 8001ce8:	bd70      	pop	{r4, r5, r6, pc}
 8001cea:	bf00      	nop
 8001cec:	20000128 	.word	0x20000128
 8001cf0:	20000038 	.word	0x20000038

08001cf4 <z_bss_zero>:
 * This routine clears the BSS region, so all bytes are 0.
 *
 * @return N/A
 */
void z_bss_zero(void)
{
 8001cf4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8001cf6:	4807      	ldr	r0, [pc, #28]	; (8001d14 <z_bss_zero+0x20>)
 8001cf8:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <z_bss_zero+0x24>)
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	1a12      	subs	r2, r2, r0
 8001cfe:	f000 ff37 	bl	8002b70 <memset>
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	(void)memset(&__ccm_bss_start, 0,
 8001d02:	4806      	ldr	r0, [pc, #24]	; (8001d1c <z_bss_zero+0x28>)
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <z_bss_zero+0x2c>)
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	(void)memset(&__gcov_bss_start, 0,
		 ((uint32_t) &__gcov_bss_end - (uint32_t) &__gcov_bss_start));
#endif
}
 8001d06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&__ccm_bss_start, 0,
 8001d0a:	1a12      	subs	r2, r2, r0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	f000 bf2f 	b.w	8002b70 <memset>
 8001d12:	bf00      	nop
 8001d14:	20000140 	.word	0x20000140
 8001d18:	200003c4 	.word	0x200003c4
 8001d1c:	10000000 	.word	0x10000000
 8001d20:	10000000 	.word	0x10000000

08001d24 <z_data_copy>:
 * @return N/A
 */
void z_data_copy(void)
{
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <z_data_copy+0x28>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <z_data_copy+0x2c>)
 8001d28:	490a      	ldr	r1, [pc, #40]	; (8001d54 <z_data_copy+0x30>)
{
 8001d2a:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
 8001d2c:	1a12      	subs	r2, r2, r0
 8001d2e:	f000 fef4 	bl	8002b1a <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
 8001d32:	4a09      	ldr	r2, [pc, #36]	; (8001d58 <z_data_copy+0x34>)
 8001d34:	4909      	ldr	r1, [pc, #36]	; (8001d5c <z_data_copy+0x38>)
 8001d36:	480a      	ldr	r0, [pc, #40]	; (8001d60 <z_data_copy+0x3c>)
 8001d38:	f000 feef 	bl	8002b1a <memcpy>
		 (uintptr_t) &_ramfunc_ram_size);
#endif /* CONFIG_ARCH_HAS_RAMFUNC_SUPPORT */
#if DT_NODE_HAS_STATUS(DT_CHOSEN(zephyr_ccm), okay)
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
		 __ccm_data_end - __ccm_data_start);
 8001d3c:	4809      	ldr	r0, [pc, #36]	; (8001d64 <z_data_copy+0x40>)
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <z_data_copy+0x44>)
 8001d40:	490a      	ldr	r1, [pc, #40]	; (8001d6c <z_data_copy+0x48>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8001d42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ccm_data_start, &__ccm_data_rom_start,
 8001d46:	1a12      	subs	r2, r2, r0
 8001d48:	f000 bee7 	b.w	8002b1a <memcpy>
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	2000013c 	.word	0x2000013c
 8001d54:	080037d0 	.word	0x080037d0
 8001d58:	00000000 	.word	0x00000000
 8001d5c:	080037d0 	.word	0x080037d0
 8001d60:	20000000 	.word	0x20000000
 8001d64:	10000000 	.word	0x10000000
 8001d68:	10000000 	.word	0x10000000
 8001d6c:	0800390c 	.word	0x0800390c

08001d70 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8001d70:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
 8001d72:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <bg_thread_main+0x34>)
 8001d74:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001d76:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
 8001d78:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8001d7a:	f7ff ff81 	bl	8001c80 <z_sys_init_run_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <bg_thread_main+0x38>)
 8001d80:	490a      	ldr	r1, [pc, #40]	; (8001dac <bg_thread_main+0x3c>)
 8001d82:	480b      	ldr	r0, [pc, #44]	; (8001db0 <bg_thread_main+0x40>)
 8001d84:	f000 fd3e 	bl	8002804 <printk>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
 8001d88:	2003      	movs	r0, #3
 8001d8a:	f7ff ff79 	bl	8001c80 <z_sys_init_run_level>

	z_init_static_threads();
 8001d8e:	f000 fb8b 	bl	80024a8 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8001d92:	f7fe fb75 	bl	8000480 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8001d96:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <bg_thread_main+0x44>)
 8001d98:	7b13      	ldrb	r3, [r2, #12]
 8001d9a:	f023 0301 	bic.w	r3, r3, #1
 8001d9e:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8001da0:	bd08      	pop	{r3, pc}
 8001da2:	bf00      	nop
 8001da4:	200003c1 	.word	0x200003c1
 8001da8:	080037c9 	.word	0x080037c9
 8001dac:	08003782 	.word	0x08003782
 8001db0:	080037a3 	.word	0x080037a3
 8001db4:	200001c0 	.word	0x200001c0

08001db8 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8001db8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
 8001dbc:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8001eb4 <z_cstart+0xfc>
 8001dc0:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001dc2:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8001dc6:	4d33      	ldr	r5, [pc, #204]	; (8001e94 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
 8001dc8:	4e33      	ldr	r6, [pc, #204]	; (8001e98 <z_cstart+0xe0>)
 8001dca:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001dcc:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8001eb8 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
 8001dd0:	4f32      	ldr	r7, [pc, #200]	; (8001e9c <z_cstart+0xe4>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd6:	2400      	movs	r4, #0
 8001dd8:	616b      	str	r3, [r5, #20]
 8001dda:	23f0      	movs	r3, #240	; 0xf0
 8001ddc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
 8001de0:	77ec      	strb	r4, [r5, #31]
 8001de2:	762c      	strb	r4, [r5, #24]
 8001de4:	766c      	strb	r4, [r5, #25]
 8001de6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8001de8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001dea:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8001dee:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8001df0:	f7ff f998 	bl	8001124 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8001df4:	f7ff f868 	bl	8000ec8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dfc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8001dfe:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = 0;
#endif

	_current_cpu->current = dummy_thread;
 8001e00:	4d27      	ldr	r5, [pc, #156]	; (8001ea0 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
 8001e02:	f240 1301 	movw	r3, #257	; 0x101
 8001e06:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
 8001e0a:	ab06      	add	r3, sp, #24
 8001e0c:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8001e0e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
 8001e10:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 8001e14:	f7ff ff34 	bl	8001c80 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8001e18:	2001      	movs	r0, #1
 8001e1a:	f7ff ff31 	bl	8001c80 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001e1e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
 8001e22:	f000 fa91 	bl	8002348 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8001e28:	622e      	str	r6, [r5, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
 8001e2a:	491f      	ldr	r1, [pc, #124]	; (8001ea8 <z_cstart+0xf0>)
 8001e2c:	9305      	str	r3, [sp, #20]
 8001e2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e32:	4653      	mov	r3, sl
 8001e34:	e9cd 4b03 	strd	r4, fp, [sp, #12]
 8001e38:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8001e3c:	9400      	str	r4, [sp, #0]
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f000 fb02 	bl	8002448 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8001e44:	7b73      	ldrb	r3, [r6, #13]
 8001e46:	4680      	mov	r8, r0
 8001e48:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
 8001e4c:	4630      	mov	r0, r6
 8001e4e:	7373      	strb	r3, [r6, #13]
 8001e50:	f001 f8ef 	bl	8003032 <z_ready_thread>
	z_setup_new_thread(thread, stack,
 8001e54:	230f      	movs	r3, #15
 8001e56:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8001e5a:	4914      	ldr	r1, [pc, #80]	; (8001eac <z_cstart+0xf4>)
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <z_cstart+0xf8>)
 8001e5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e62:	e9cd b404 	strd	fp, r4, [sp, #16]
 8001e66:	e9cd 4400 	strd	r4, r4, [sp]
 8001e6a:	4638      	mov	r0, r7
 8001e6c:	f000 faec 	bl	8002448 <z_setup_new_thread>
 8001e70:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
 8001e72:	60ef      	str	r7, [r5, #12]
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8001e7a:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
 8001e7e:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
 8001e82:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
 8001e84:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
 8001e88:	4652      	mov	r2, sl
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	4630      	mov	r0, r6
 8001e8e:	f7ff f803 	bl	8000e98 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8001e92:	bf00      	nop
 8001e94:	e000ed00 	.word	0xe000ed00
 8001e98:	200001c0 	.word	0x200001c0
 8001e9c:	20000140 	.word	0x20000140
 8001ea0:	20000384 	.word	0x20000384
 8001ea4:	080037ca 	.word	0x080037ca
 8001ea8:	200003c8 	.word	0x200003c8
 8001eac:	200007c8 	.word	0x200007c8
 8001eb0:	08003151 	.word	0x08003151
 8001eb4:	20001108 	.word	0x20001108
 8001eb8:	08001d71 	.word	0x08001d71

08001ebc <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8001ebc:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8001ebe:	4c08      	ldr	r4, [pc, #32]	; (8001ee0 <z_reset_time_slice+0x24>)
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	b15b      	cbz	r3, 8001edc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001ec4:	f7fe ff38 	bl	8000d38 <z_clock_elapsed>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	6820      	ldr	r0, [r4, #0]
 8001ecc:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <z_reset_time_slice+0x28>)
 8001ece:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
 8001ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8001ed4:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	f001 b91c 	b.w	8003114 <z_set_timeout_expiry>
}
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	bf00      	nop
 8001ee0:	200003b8 	.word	0x200003b8
 8001ee4:	20000384 	.word	0x20000384

08001ee8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
 8001ee8:	b510      	push	{r4, lr}
 8001eea:	f04f 0310 	mov.w	r3, #16
 8001eee:	f3ef 8411 	mrs	r4, BASEPRI
 8001ef2:	f383 8811 	msr	BASEPRI, r3
 8001ef6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <k_sched_time_slice_set+0x34>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((uint32_t)t) * (to_hz / from_hz);
 8001f00:	230a      	movs	r3, #10
 8001f02:	4358      	muls	r0, r3
		slice_time = k_ms_to_ticks_ceil32(slice);
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <k_sched_time_slice_set+0x38>)
 8001f06:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <k_sched_time_slice_set+0x3c>)
 8001f0a:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8001f0c:	f7ff ffd6 	bl	8001ebc <z_reset_time_slice>
	__asm__ volatile(
 8001f10:	f384 8811 	msr	BASEPRI, r4
 8001f14:	f3bf 8f6f 	isb	sy
	}
}
 8001f18:	bd10      	pop	{r4, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000384 	.word	0x20000384
 8001f20:	200003b8 	.word	0x200003b8
 8001f24:	200003b4 	.word	0x200003b4

08001f28 <k_sched_lock>:
	__asm__ volatile(
 8001f28:	f04f 0310 	mov.w	r3, #16
 8001f2c:	f3ef 8111 	mrs	r1, BASEPRI
 8001f30:	f383 8811 	msr	BASEPRI, r3
 8001f34:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8001f38:	4b04      	ldr	r3, [pc, #16]	; (8001f4c <k_sched_lock+0x24>)
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	7bd3      	ldrb	r3, [r2, #15]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8001f42:	f381 8811 	msr	BASEPRI, r1
 8001f46:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000384 	.word	0x20000384

08001f50 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <z_priq_dumb_remove+0x28>)
 8001f52:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001f56:	4282      	cmp	r2, r0
 8001f58:	d105      	bne.n	8001f66 <z_priq_dumb_remove+0x16>
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	428b      	cmp	r3, r1
 8001f5e:	d102      	bne.n	8001f66 <z_priq_dumb_remove+0x16>
 8001f60:	7b4b      	ldrb	r3, [r1, #13]
 8001f62:	06db      	lsls	r3, r3, #27
 8001f64:	d106      	bne.n	8001f74 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8001f66:	e9d1 3200 	ldrd	r3, r2, [r1]
 8001f6a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8001f6c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8001f6e:	2300      	movs	r3, #0
	node->prev = NULL;
 8001f70:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	20000384 	.word	0x20000384

08001f7c <update_cache>:
{
 8001f7c:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8001f7e:	4c10      	ldr	r4, [pc, #64]	; (8001fc0 <update_cache+0x44>)
{
 8001f80:	4606      	mov	r6, r0
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8001f82:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001f86:	f001 f84a 	bl	800301e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8001f8a:	68a3      	ldr	r3, [r4, #8]
 8001f8c:	7b59      	ldrb	r1, [r3, #13]
	struct k_thread *thread = _priq_run_best(&_kernel.ready_q.runq);
 8001f8e:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
 8001f90:	0688      	lsls	r0, r1, #26
		_current->base.thread_state |= _THREAD_DEAD;
 8001f92:	bf44      	itt	mi
 8001f94:	f041 0108 	orrmi.w	r1, r1, #8
 8001f98:	7359      	strbmi	r1, [r3, #13]
	return thread ? thread : _current_cpu->idle_thread;
 8001f9a:	b905      	cbnz	r5, 8001f9e <update_cache+0x22>
 8001f9c:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8001f9e:	b94e      	cbnz	r6, 8001fb4 <update_cache+0x38>
	if (z_is_thread_prevented_from_running(_current)) {
 8001fa0:	7b5a      	ldrb	r2, [r3, #13]
 8001fa2:	06d2      	lsls	r2, r2, #27
 8001fa4:	d106      	bne.n	8001fb4 <update_cache+0x38>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8001fa6:	69aa      	ldr	r2, [r5, #24]
 8001fa8:	b922      	cbnz	r2, 8001fb4 <update_cache+0x38>
	if (is_preempt(_current) || is_metairq(thread)) {
 8001faa:	89da      	ldrh	r2, [r3, #14]
 8001fac:	2a7f      	cmp	r2, #127	; 0x7f
 8001fae:	d901      	bls.n	8001fb4 <update_cache+0x38>
		_kernel.ready_q.cache = _current;
 8001fb0:	6223      	str	r3, [r4, #32]
}
 8001fb2:	bd70      	pop	{r4, r5, r6, pc}
		if (thread != _current) {
 8001fb4:	42ab      	cmp	r3, r5
 8001fb6:	d001      	beq.n	8001fbc <update_cache+0x40>
			z_reset_time_slice();
 8001fb8:	f7ff ff80 	bl	8001ebc <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
 8001fbc:	6225      	str	r5, [r4, #32]
}
 8001fbe:	e7f8      	b.n	8001fb2 <update_cache+0x36>
 8001fc0:	20000384 	.word	0x20000384

08001fc4 <k_sched_unlock>:
{
 8001fc4:	b510      	push	{r4, lr}
	__asm__ volatile(
 8001fc6:	f04f 0310 	mov.w	r3, #16
 8001fca:	f3ef 8411 	mrs	r4, BASEPRI
 8001fce:	f383 8811 	msr	BASEPRI, r3
 8001fd2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <k_sched_unlock+0x34>)
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	7bd3      	ldrb	r3, [r2, #15]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8001fe0:	2000      	movs	r0, #0
 8001fe2:	f7ff ffcb 	bl	8001f7c <update_cache>
	__asm__ volatile(
 8001fe6:	f384 8811 	msr	BASEPRI, r4
 8001fea:	f3bf 8f6f 	isb	sy
}
 8001fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8001ff2:	f001 b80a 	b.w	800300a <z_reschedule_unlocked>
 8001ff6:	bf00      	nop
 8001ff8:	20000384 	.word	0x20000384

08001ffc <ready_thread>:
{
 8001ffc:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8001ffe:	7b43      	ldrb	r3, [r0, #13]
 8002000:	06db      	lsls	r3, r3, #27
 8002002:	d12a      	bne.n	800205a <ready_thread+0x5e>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
 8002004:	6983      	ldr	r3, [r0, #24]
	if (z_is_thread_ready(thread)) {
 8002006:	bb43      	cbnz	r3, 800205a <ready_thread+0x5e>
	return list->head == list;
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <ready_thread+0x64>)
 800200a:	4611      	mov	r1, r2
 800200c:	f851 4f24 	ldr.w	r4, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002010:	428c      	cmp	r4, r1
 8002012:	bf18      	it	ne
 8002014:	4623      	movne	r3, r4
 8002016:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002018:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800201a:	bf38      	it	cc
 800201c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800201e:	b1b3      	cbz	r3, 800204e <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
 8002020:	f990 600e 	ldrsb.w	r6, [r0, #14]
 8002024:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8002028:	42ae      	cmp	r6, r5
 800202a:	db03      	blt.n	8002034 <ready_thread+0x38>
	return (node == list->tail) ? NULL : node->next;
 800202c:	42a3      	cmp	r3, r4
 800202e:	d00e      	beq.n	800204e <ready_thread+0x52>
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e7f4      	b.n	800201e <ready_thread+0x22>
	node->prev = successor->prev;
 8002034:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8002036:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 800203a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800203c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 800203e:	7b43      	ldrb	r3, [r0, #13]
 8002040:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002044:	7343      	strb	r3, [r0, #13]
}
 8002046:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
 8002048:	2000      	movs	r0, #0
 800204a:	f7ff bf97 	b.w	8001f7c <update_cache>
	node->prev = list->tail;
 800204e:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
 8002052:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8002054:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8002056:	6290      	str	r0, [r2, #40]	; 0x28
}
 8002058:	e7f1      	b.n	800203e <ready_thread+0x42>
}
 800205a:	bc70      	pop	{r4, r5, r6}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000384 	.word	0x20000384

08002064 <z_sched_start>:
{
 8002064:	b510      	push	{r4, lr}
	__asm__ volatile(
 8002066:	f04f 0210 	mov.w	r2, #16
 800206a:	f3ef 8411 	mrs	r4, BASEPRI
 800206e:	f382 8811 	msr	BASEPRI, r2
 8002072:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
 8002076:	7b42      	ldrb	r2, [r0, #13]
 8002078:	0751      	lsls	r1, r2, #29
 800207a:	d404      	bmi.n	8002086 <z_sched_start+0x22>
	__asm__ volatile(
 800207c:	f384 8811 	msr	BASEPRI, r4
 8002080:	f3bf 8f6f 	isb	sy
}
 8002084:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8002086:	f022 0204 	bic.w	r2, r2, #4
 800208a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
 800208c:	f7ff ffb6 	bl	8001ffc <ready_thread>
	z_reschedule(&sched_spinlock, key);
 8002090:	4621      	mov	r1, r4
 8002092:	4802      	ldr	r0, [pc, #8]	; (800209c <z_sched_start+0x38>)
}
 8002094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
 8002098:	f000 bfa0 	b.w	8002fdc <z_reschedule>
 800209c:	200003c2 	.word	0x200003c2

080020a0 <z_move_thread_to_end_of_prio_q>:
{
 80020a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020a2:	4601      	mov	r1, r0
	__asm__ volatile(
 80020a4:	f04f 0310 	mov.w	r3, #16
 80020a8:	f3ef 8411 	mrs	r4, BASEPRI
 80020ac:	f383 8811 	msr	BASEPRI, r3
 80020b0:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80020b4:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	da02      	bge.n	80020c2 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80020bc:	4819      	ldr	r0, [pc, #100]	; (8002124 <z_move_thread_to_end_of_prio_q+0x84>)
 80020be:	f7ff ff47 	bl	8001f50 <z_priq_dumb_remove>
	return list->head == list;
 80020c2:	4a19      	ldr	r2, [pc, #100]	; (8002128 <z_move_thread_to_end_of_prio_q+0x88>)
 80020c4:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80020c6:	6a95      	ldr	r5, [r2, #40]	; 0x28
	return list->head == list;
 80020c8:	f850 3f24 	ldr.w	r3, [r0, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80020cc:	4283      	cmp	r3, r0
 80020ce:	bf08      	it	eq
 80020d0:	2300      	moveq	r3, #0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	bf38      	it	cc
 80020d6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80020d8:	b1eb      	cbz	r3, 8002116 <z_move_thread_to_end_of_prio_q+0x76>
	if (thread_1->base.prio < thread_2->base.prio) {
 80020da:	f991 700e 	ldrsb.w	r7, [r1, #14]
 80020de:	f993 600e 	ldrsb.w	r6, [r3, #14]
 80020e2:	42b7      	cmp	r7, r6
 80020e4:	db03      	blt.n	80020ee <z_move_thread_to_end_of_prio_q+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80020e6:	429d      	cmp	r5, r3
 80020e8:	d015      	beq.n	8002116 <z_move_thread_to_end_of_prio_q+0x76>
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	e7f4      	b.n	80020d8 <z_move_thread_to_end_of_prio_q+0x38>
	node->prev = successor->prev;
 80020ee:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
 80020f0:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
 80020f4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
 80020f6:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
 80020f8:	7b4b      	ldrb	r3, [r1, #13]
		update_cache(thread == _current);
 80020fa:	6890      	ldr	r0, [r2, #8]
 80020fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002100:	734b      	strb	r3, [r1, #13]
 8002102:	1a43      	subs	r3, r0, r1
 8002104:	4258      	negs	r0, r3
 8002106:	4158      	adcs	r0, r3
 8002108:	f7ff ff38 	bl	8001f7c <update_cache>
	__asm__ volatile(
 800210c:	f384 8811 	msr	BASEPRI, r4
 8002110:	f3bf 8f6f 	isb	sy
}
 8002114:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	node->prev = list->tail;
 8002116:	e9c1 0500 	strd	r0, r5, [r1]
	list->tail->next = node;
 800211a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800211c:	6019      	str	r1, [r3, #0]
	list->tail = node;
 800211e:	6291      	str	r1, [r2, #40]	; 0x28
}
 8002120:	e7ea      	b.n	80020f8 <z_move_thread_to_end_of_prio_q+0x58>
 8002122:	bf00      	nop
 8002124:	200003a8 	.word	0x200003a8
 8002128:	20000384 	.word	0x20000384

0800212c <z_time_slice>:
{
 800212c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <z_time_slice+0x58>)
 8002130:	4b15      	ldr	r3, [pc, #84]	; (8002188 <z_time_slice+0x5c>)
 8002132:	6814      	ldr	r4, [r2, #0]
{
 8002134:	4601      	mov	r1, r0
	if (pending_current == _current) {
 8002136:	6898      	ldr	r0, [r3, #8]
 8002138:	42a0      	cmp	r0, r4
 800213a:	461c      	mov	r4, r3
 800213c:	d103      	bne.n	8002146 <z_time_slice+0x1a>
}
 800213e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 8002142:	f7ff bebb 	b.w	8001ebc <z_reset_time_slice>
	pending_current = NULL;
 8002146:	2500      	movs	r5, #0
 8002148:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
 800214a:	4a10      	ldr	r2, [pc, #64]	; (800218c <z_time_slice+0x60>)
 800214c:	6812      	ldr	r2, [r2, #0]
 800214e:	b1b2      	cbz	r2, 800217e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 8002150:	89c2      	ldrh	r2, [r0, #14]
 8002152:	2a7f      	cmp	r2, #127	; 0x7f
 8002154:	d813      	bhi.n	800217e <z_time_slice+0x52>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <z_time_slice+0x64>)
 8002158:	f990 500e 	ldrsb.w	r5, [r0, #14]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	4295      	cmp	r5, r2
 8002160:	db0d      	blt.n	800217e <z_time_slice+0x52>
		&& !z_is_idle_thread_object(thread)
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <z_time_slice+0x68>)
 8002164:	4290      	cmp	r0, r2
 8002166:	d00a      	beq.n	800217e <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(thread);
 8002168:	6982      	ldr	r2, [r0, #24]
 800216a:	b942      	cbnz	r2, 800217e <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	428a      	cmp	r2, r1
 8002170:	dc02      	bgt.n	8002178 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8002172:	f7ff ff95 	bl	80020a0 <z_move_thread_to_end_of_prio_q>
 8002176:	e7e2      	b.n	800213e <z_time_slice+0x12>
			_current_cpu->slice_ticks -= ticks;
 8002178:	1a52      	subs	r2, r2, r1
 800217a:	611a      	str	r2, [r3, #16]
}
 800217c:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	6123      	str	r3, [r4, #16]
 8002182:	e7fb      	b.n	800217c <z_time_slice+0x50>
 8002184:	200003b0 	.word	0x200003b0
 8002188:	20000384 	.word	0x20000384
 800218c:	200003b8 	.word	0x200003b8
 8002190:	200003b4 	.word	0x200003b4
 8002194:	20000140 	.word	0x20000140

08002198 <z_impl_k_thread_suspend>:
{
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800219c:	3018      	adds	r0, #24
 800219e:	f000 ff93 	bl	80030c8 <z_abort_timeout>
	__asm__ volatile(
 80021a2:	f04f 0310 	mov.w	r3, #16
 80021a6:	f3ef 8611 	mrs	r6, BASEPRI
 80021aa:	f383 8811 	msr	BASEPRI, r3
 80021ae:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 80021b2:	f994 300d 	ldrsb.w	r3, [r4, #13]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	da07      	bge.n	80021ca <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 80021ba:	480f      	ldr	r0, [pc, #60]	; (80021f8 <z_impl_k_thread_suspend+0x60>)
 80021bc:	4621      	mov	r1, r4
 80021be:	f7ff fec7 	bl	8001f50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80021c2:	7b63      	ldrb	r3, [r4, #13]
 80021c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021c8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 80021ca:	4d0c      	ldr	r5, [pc, #48]	; (80021fc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
 80021cc:	7b63      	ldrb	r3, [r4, #13]
 80021ce:	68a8      	ldr	r0, [r5, #8]
 80021d0:	f043 0310 	orr.w	r3, r3, #16
 80021d4:	7363      	strb	r3, [r4, #13]
 80021d6:	1b03      	subs	r3, r0, r4
 80021d8:	4258      	negs	r0, r3
 80021da:	4158      	adcs	r0, r3
 80021dc:	f7ff fece 	bl	8001f7c <update_cache>
	__asm__ volatile(
 80021e0:	f386 8811 	msr	BASEPRI, r6
 80021e4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
 80021e8:	68ab      	ldr	r3, [r5, #8]
 80021ea:	42a3      	cmp	r3, r4
 80021ec:	d103      	bne.n	80021f6 <z_impl_k_thread_suspend+0x5e>
}
 80021ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
 80021f2:	f000 bf0a 	b.w	800300a <z_reschedule_unlocked>
}
 80021f6:	bd70      	pop	{r4, r5, r6, pc}
 80021f8:	200003a8 	.word	0x200003a8
 80021fc:	20000384 	.word	0x20000384

08002200 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8002200:	6e03      	ldr	r3, [r0, #96]	; 0x60
{
 8002202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002206:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8002208:	b103      	cbz	r3, 800220c <z_thread_single_abort+0xc>
		thread->fn_abort();
 800220a:	4798      	blx	r3
 800220c:	f104 0018 	add.w	r0, r4, #24
 8002210:	f000 ff5a 	bl	80030c8 <z_abort_timeout>
	__asm__ volatile(
 8002214:	f04f 0310 	mov.w	r3, #16
 8002218:	f3ef 8611 	mrs	r6, BASEPRI
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8002224:	7b63      	ldrb	r3, [r4, #13]
 8002226:	06d8      	lsls	r0, r3, #27
 8002228:	d123      	bne.n	8002272 <z_thread_single_abort+0x72>
		if (z_is_thread_ready(thread)) {
 800222a:	69a2      	ldr	r2, [r4, #24]
 800222c:	bb0a      	cbnz	r2, 8002272 <z_thread_single_abort+0x72>
			if (z_is_thread_queued(thread)) {
 800222e:	0619      	lsls	r1, r3, #24
 8002230:	d507      	bpl.n	8002242 <z_thread_single_abort+0x42>
				_priq_run_remove(&_kernel.ready_q.runq,
 8002232:	481f      	ldr	r0, [pc, #124]	; (80022b0 <z_thread_single_abort+0xb0>)
 8002234:	4621      	mov	r1, r4
 8002236:	f7ff fe8b 	bl	8001f50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 800223a:	7b63      	ldrb	r3, [r4, #13]
 800223c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002240:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
 8002242:	4b1c      	ldr	r3, [pc, #112]	; (80022b4 <z_thread_single_abort+0xb4>)
 8002244:	6898      	ldr	r0, [r3, #8]
 8002246:	1b02      	subs	r2, r0, r4
 8002248:	4250      	negs	r0, r2
 800224a:	4150      	adcs	r0, r2
 800224c:	f7ff fe96 	bl	8001f7c <update_cache>
		thread->base.thread_state |= mask;
 8002250:	7b63      	ldrb	r3, [r4, #13]
 8002252:	f043 0308 	orr.w	r3, r3, #8
 8002256:	7363      	strb	r3, [r4, #13]
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
 8002258:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
 800225c:	2700      	movs	r7, #0
	return list->head == list;
 800225e:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002260:	4545      	cmp	r5, r8
 8002262:	d000      	beq.n	8002266 <z_thread_single_abort+0x66>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
 8002264:	b995      	cbnz	r5, 800228c <z_thread_single_abort+0x8c>
	__asm__ volatile(
 8002266:	f386 8811 	msr	BASEPRI, r6
 800226a:	f3bf 8f6f 	isb	sy
}
 800226e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (z_is_thread_pending(thread)) {
 8002272:	079b      	lsls	r3, r3, #30
 8002274:	d5ec      	bpl.n	8002250 <z_thread_single_abort+0x50>
				_priq_wait_remove(&pended_on(thread)->waitq,
 8002276:	68a0      	ldr	r0, [r4, #8]
 8002278:	4621      	mov	r1, r4
 800227a:	f7ff fe69 	bl	8001f50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 800227e:	7b63      	ldrb	r3, [r4, #13]
 8002280:	f023 0302 	bic.w	r3, r3, #2
 8002284:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
 8002286:	2300      	movs	r3, #0
 8002288:	60a3      	str	r3, [r4, #8]
 800228a:	e7e1      	b.n	8002250 <z_thread_single_abort+0x50>
 800228c:	f105 0018 	add.w	r0, r5, #24
 8002290:	f000 ff1a 	bl	80030c8 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
 8002294:	68a8      	ldr	r0, [r5, #8]
 8002296:	4629      	mov	r1, r5
 8002298:	f7ff fe5a 	bl	8001f50 <z_priq_dumb_remove>
 800229c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
 800229e:	60af      	str	r7, [r5, #8]
 80022a0:	f023 0302 	bic.w	r3, r3, #2
 80022a4:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 80022a6:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7ff fea7 	bl	8001ffc <ready_thread>
 80022ae:	e7d6      	b.n	800225e <z_thread_single_abort+0x5e>
 80022b0:	200003a8 	.word	0x200003a8
 80022b4:	20000384 	.word	0x20000384

080022b8 <unready_thread>:
{
 80022b8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
 80022ba:	f990 300d 	ldrsb.w	r3, [r0, #13]
 80022be:	2b00      	cmp	r3, #0
{
 80022c0:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
 80022c2:	da06      	bge.n	80022d2 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <unready_thread+0x2c>)
 80022c6:	f7ff fe43 	bl	8001f50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 80022ca:	7b4b      	ldrb	r3, [r1, #13]
 80022cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022d0:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <unready_thread+0x30>)
 80022d4:	6898      	ldr	r0, [r3, #8]
 80022d6:	1a43      	subs	r3, r0, r1
 80022d8:	4258      	negs	r0, r3
 80022da:	4158      	adcs	r0, r3
}
 80022dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
 80022e0:	f7ff be4c 	b.w	8001f7c <update_cache>
 80022e4:	200003a8 	.word	0x200003a8
 80022e8:	20000384 	.word	0x20000384

080022ec <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
 80022ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ee:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
 80022f0:	f000 ff2a 	bl	8003148 <z_tick_get_32>
 80022f4:	182c      	adds	r4, r5, r0
	__asm__ volatile(
 80022f6:	f04f 0310 	mov.w	r3, #16
 80022fa:	f3ef 8711 	mrs	r7, BASEPRI
 80022fe:	f383 8811 	msr	BASEPRI, r3
 8002302:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8002306:	4e0d      	ldr	r6, [pc, #52]	; (800233c <z_tick_sleep.part.0+0x50>)
 8002308:	4b0d      	ldr	r3, [pc, #52]	; (8002340 <z_tick_sleep.part.0+0x54>)
 800230a:	68b0      	ldr	r0, [r6, #8]
 800230c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 800230e:	f000 fecb 	bl	80030a8 <z_remove_thread_from_ready_q>
	z_add_thread_timeout(_current, timeout);
 8002312:	68b0      	ldr	r0, [r6, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8002314:	490b      	ldr	r1, [pc, #44]	; (8002344 <z_tick_sleep.part.0+0x58>)
 8002316:	462a      	mov	r2, r5
 8002318:	17eb      	asrs	r3, r5, #31
 800231a:	3018      	adds	r0, #24
 800231c:	f000 f94e 	bl	80025bc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
 8002320:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8002322:	7b53      	ldrb	r3, [r2, #13]
 8002324:	f043 0310 	orr.w	r3, r3, #16
 8002328:	7353      	strb	r3, [r2, #13]
	ret = arch_swap(key);
 800232a:	4638      	mov	r0, r7
 800232c:	f7fe fd22 	bl	8000d74 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 8002330:	f000 ff0a 	bl	8003148 <z_tick_get_32>
 8002334:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8002336:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800233a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800233c:	20000384 	.word	0x20000384
 8002340:	200003b0 	.word	0x200003b0
 8002344:	08003053 	.word	0x08003053

08002348 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800234a:	2100      	movs	r1, #0
 800234c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8002350:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8002354:	4608      	mov	r0, r1
 8002356:	f7ff bdc7 	b.w	8001ee8 <k_sched_time_slice_set>
 800235a:	bf00      	nop
 800235c:	20000384 	.word	0x20000384

08002360 <z_impl_k_yield>:
{
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8002362:	4c24      	ldr	r4, [pc, #144]	; (80023f4 <z_impl_k_yield+0x94>)
 8002364:	4b24      	ldr	r3, [pc, #144]	; (80023f8 <z_impl_k_yield+0x98>)
 8002366:	68a2      	ldr	r2, [r4, #8]
 8002368:	429a      	cmp	r2, r3
 800236a:	d030      	beq.n	80023ce <z_impl_k_yield+0x6e>
 800236c:	f04f 0310 	mov.w	r3, #16
 8002370:	f3ef 8511 	mrs	r5, BASEPRI
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 800237c:	68a1      	ldr	r1, [r4, #8]
 800237e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002382:	f7ff fde5 	bl	8001f50 <z_priq_dumb_remove>
	return list->head == list;
 8002386:	6a63      	ldr	r3, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 8002388:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800238a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800238c:	4283      	cmp	r3, r0
 800238e:	bf08      	it	eq
 8002390:	2300      	moveq	r3, #0
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf38      	it	cc
 8002396:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8002398:	b32b      	cbz	r3, 80023e6 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
 800239a:	f992 700e 	ldrsb.w	r7, [r2, #14]
 800239e:	f993 600e 	ldrsb.w	r6, [r3, #14]
 80023a2:	42b7      	cmp	r7, r6
 80023a4:	db03      	blt.n	80023ae <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
 80023a6:	428b      	cmp	r3, r1
 80023a8:	d01d      	beq.n	80023e6 <z_impl_k_yield+0x86>
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	e7f4      	b.n	8002398 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
 80023ae:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 80023b0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
 80023b4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
 80023b6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
 80023b8:	7b53      	ldrb	r3, [r2, #13]
 80023ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023be:	7353      	strb	r3, [r2, #13]
			update_cache(1);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f7ff fddb 	bl	8001f7c <update_cache>
	__asm__ volatile(
 80023c6:	f385 8811 	msr	BASEPRI, r5
 80023ca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80023ce:	f04f 0310 	mov.w	r3, #16
 80023d2:	f3ef 8011 	mrs	r0, BASEPRI
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
}
 80023de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80023e2:	f7fe bcc7 	b.w	8000d74 <arch_swap>
	node->prev = list->tail;
 80023e6:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
 80023ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80023ec:	601a      	str	r2, [r3, #0]
	list->tail = node;
 80023ee:	62a2      	str	r2, [r4, #40]	; 0x28
}
 80023f0:	e7e2      	b.n	80023b8 <z_impl_k_yield+0x58>
 80023f2:	bf00      	nop
 80023f4:	20000384 	.word	0x20000384
 80023f8:	20000140 	.word	0x20000140

080023fc <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
 80023fc:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80023fe:	3301      	adds	r3, #1
 8002400:	bf08      	it	eq
 8002402:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
 8002406:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 8002408:	d106      	bne.n	8002418 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <z_impl_k_sleep+0x3c>)
 800240c:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 800240e:	f7ff fec3 	bl	8002198 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
 8002412:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	ticks = timeout.ticks;
#endif

	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 8002416:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
 8002418:	4604      	mov	r4, r0
	if (ticks == 0) {
 800241a:	b940      	cbnz	r0, 800242e <z_impl_k_sleep+0x32>
	z_impl_k_yield();
 800241c:	f7ff ffa0 	bl	8002360 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8002420:	220a      	movs	r2, #10
 8002422:	2300      	movs	r3, #0
 8002424:	4620      	mov	r0, r4
 8002426:	17e1      	asrs	r1, r4, #31
 8002428:	f7fd feae 	bl	8000188 <__aeabi_uldivmod>
	return k_ticks_to_ms_floor64(ticks);
 800242c:	e7f3      	b.n	8002416 <z_impl_k_sleep+0x1a>
 800242e:	f7ff ff5d 	bl	80022ec <z_tick_sleep.part.0>
 8002432:	4604      	mov	r4, r0
 8002434:	e7f4      	b.n	8002420 <z_impl_k_sleep+0x24>
 8002436:	bf00      	nop
 8002438:	20000384 	.word	0x20000384

0800243c <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
 800243c:	4b01      	ldr	r3, [pc, #4]	; (8002444 <z_impl_k_current_get+0x8>)
 800243e:	6898      	ldr	r0, [r3, #8]
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	20000384 	.word	0x20000384

08002448 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
 8002448:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
 800244c:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
 8002450:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
 8002454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002456:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
 8002458:	2504      	movs	r5, #4
 800245a:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 800245c:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
 800245e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002460:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002462:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
 8002464:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
 8002466:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
 800246a:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
 800246e:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
 8002472:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
 8002474:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002476:	9202      	str	r2, [sp, #8]
 8002478:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800247a:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
 800247c:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002480:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002482:	9200      	str	r2, [sp, #0]
 8002484:	4642      	mov	r2, r8
{
 8002486:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
 8002488:	f7fe fcea 	bl	8000e60 <arch_new_thread>
	if (!_current) {
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <z_setup_new_thread+0x5c>)
 800248e:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
 8002490:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
 8002494:	b103      	cbz	r3, 8002498 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
 8002496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
 8002498:	6763      	str	r3, [r4, #116]	; 0x74
}
 800249a:	4640      	mov	r0, r8
 800249c:	b004      	add	sp, #16
 800249e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80024a2:	bf00      	nop
 80024a4:	20000384 	.word	0x20000384

080024a8 <z_init_static_threads>:
{
 80024a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 80024aa:	4f22      	ldr	r7, [pc, #136]	; (8002534 <z_init_static_threads+0x8c>)
 80024ac:	4d22      	ldr	r5, [pc, #136]	; (8002538 <z_init_static_threads+0x90>)
{
 80024ae:	b087      	sub	sp, #28
 80024b0:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
 80024b2:	42bd      	cmp	r5, r7
 80024b4:	f105 0430 	add.w	r4, r5, #48	; 0x30
 80024b8:	d30b      	bcc.n	80024d2 <z_init_static_threads+0x2a>
	k_sched_lock();
 80024ba:	f7ff fd35 	bl	8001f28 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 80024be:	4c1e      	ldr	r4, [pc, #120]	; (8002538 <z_init_static_threads+0x90>)
 80024c0:	4f1e      	ldr	r7, [pc, #120]	; (800253c <z_init_static_threads+0x94>)
		} else {
			return t * (to_hz / from_hz);
 80024c2:	250a      	movs	r5, #10
 80024c4:	42b4      	cmp	r4, r6
 80024c6:	d321      	bcc.n	800250c <z_init_static_threads+0x64>
}
 80024c8:	b007      	add	sp, #28
 80024ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80024ce:	f7ff bd79 	b.w	8001fc4 <k_sched_unlock>
		z_setup_new_thread(
 80024d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024d6:	9305      	str	r3, [sp, #20]
 80024d8:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80024dc:	9304      	str	r3, [sp, #16]
 80024de:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80024e2:	9303      	str	r3, [sp, #12]
 80024e4:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80024e8:	9302      	str	r3, [sp, #8]
 80024ea:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80024ee:	9301      	str	r3, [sp, #4]
 80024f0:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80024fa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80024fe:	f7ff ffa3 	bl	8002448 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 8002502:	f854 3c30 	ldr.w	r3, [r4, #-48]
 8002506:	65dd      	str	r5, [r3, #92]	; 0x5c
 8002508:	4625      	mov	r5, r4
 800250a:	e7d2      	b.n	80024b2 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
 800250c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800250e:	1c53      	adds	r3, r2, #1
 8002510:	d009      	beq.n	8002526 <z_init_static_threads+0x7e>
					    K_MSEC(thread_data->init_delay));
 8002512:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002516:	fb82 2305 	smull	r2, r3, r2, r5
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 800251a:	ea52 0103 	orrs.w	r1, r2, r3
			schedule_new_thread(thread_data->init_thread,
 800251e:	6820      	ldr	r0, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
 8002520:	d103      	bne.n	800252a <z_init_static_threads+0x82>
	z_sched_start(thread);
 8002522:	f7ff fd9f 	bl	8002064 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 8002526:	3430      	adds	r4, #48	; 0x30
 8002528:	e7cc      	b.n	80024c4 <z_init_static_threads+0x1c>
 800252a:	4639      	mov	r1, r7
 800252c:	3018      	adds	r0, #24
 800252e:	f000 f845 	bl	80025bc <z_add_timeout>
 8002532:	e7f8      	b.n	8002526 <z_init_static_threads+0x7e>
 8002534:	20000128 	.word	0x20000128
 8002538:	20000128 	.word	0x20000128
 800253c:	08003053 	.word	0x08003053

08002540 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <elapsed+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	b90b      	cbnz	r3, 800254a <elapsed+0xa>
 8002546:	f7fe bbf7 	b.w	8000d38 <z_clock_elapsed>
}
 800254a:	2000      	movs	r0, #0
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	200003bc 	.word	0x200003bc

08002554 <remove_timeout>:
{
 8002554:	b530      	push	{r4, r5, lr}
 8002556:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8002558:	b168      	cbz	r0, 8002576 <remove_timeout+0x22>
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
 800255c:	6852      	ldr	r2, [r2, #4]
 800255e:	4290      	cmp	r0, r2
 8002560:	d009      	beq.n	8002576 <remove_timeout+0x22>
	if (next(t) != NULL) {
 8002562:	b143      	cbz	r3, 8002576 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
 8002564:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
 8002568:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 800256c:	1912      	adds	r2, r2, r4
 800256e:	eb45 0101 	adc.w	r1, r5, r1
 8002572:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
 8002576:	6842      	ldr	r2, [r0, #4]
 8002578:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800257a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800257c:	2300      	movs	r3, #0
	node->prev = NULL;
 800257e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8002582:	bd30      	pop	{r4, r5, pc}
 8002584:	20000030 	.word	0x20000030

08002588 <next_timeout>:
	return list->head == list;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <next_timeout+0x2c>)

static int32_t next_timeout(void)
{
 800258a:	b510      	push	{r4, lr}
 800258c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800258e:	429c      	cmp	r4, r3
 8002590:	bf08      	it	eq
 8002592:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
 8002594:	f7ff ffd4 	bl	8002540 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8002598:	b144      	cbz	r4, 80025ac <next_timeout+0x24>
 800259a:	6923      	ldr	r3, [r4, #16]
 800259c:	1a18      	subs	r0, r3, r0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <next_timeout+0x30>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	b113      	cbz	r3, 80025aa <next_timeout+0x22>
 80025a4:	4298      	cmp	r0, r3
 80025a6:	bfa8      	it	ge
 80025a8:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 80025aa:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 80025ac:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80025b0:	e7f5      	b.n	800259e <next_timeout+0x16>
 80025b2:	bf00      	nop
 80025b4:	20000030 	.word	0x20000030
 80025b8:	20000384 	.word	0x20000384

080025bc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
 80025bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c0:	9101      	str	r1, [sp, #4]
 80025c2:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80025c4:	1c4b      	adds	r3, r1, #1
 80025c6:	bf08      	it	eq
 80025c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
 80025cc:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
 80025ce:	d06c      	beq.n	80026aa <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
 80025d0:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80025d2:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
 80025d6:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
 80025da:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 80025de:	ebb3 0804 	subs.w	r8, r3, r4
 80025e2:	eb6b 0905 	sbc.w	r9, fp, r5
 80025e6:	f1b8 0f00 	cmp.w	r8, #0
 80025ea:	f179 0300 	sbcs.w	r3, r9, #0
 80025ee:	db0f      	blt.n	8002610 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
 80025f0:	f7ff ffa6 	bl	8002540 <elapsed>
 80025f4:	4a33      	ldr	r2, [pc, #204]	; (80026c4 <z_add_timeout+0x108>)
 80025f6:	e9d2 1c00 	ldrd	r1, ip, [r2]
 80025fa:	f06f 0301 	mvn.w	r3, #1
 80025fe:	1a5b      	subs	r3, r3, r1
 8002600:	eb6b 020c 	sbc.w	r2, fp, ip
 8002604:	1b1e      	subs	r6, r3, r4
 8002606:	eb62 0705 	sbc.w	r7, r2, r5
 800260a:	1a34      	subs	r4, r6, r0
 800260c:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8002610:	9b01      	ldr	r3, [sp, #4]
 8002612:	f8ca 3008 	str.w	r3, [sl, #8]
 8002616:	f04f 0310 	mov.w	r3, #16
 800261a:	f3ef 8611 	mrs	r6, BASEPRI
 800261e:	f383 8811 	msr	BASEPRI, r3
 8002622:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8002626:	f7ff ff8b 	bl	8002540 <elapsed>
	ticks = MAX(1, ticks);
 800262a:	2c01      	cmp	r4, #1
 800262c:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
 8002630:	4b25      	ldr	r3, [pc, #148]	; (80026c8 <z_add_timeout+0x10c>)
 8002632:	bfb8      	it	lt
 8002634:	2401      	movlt	r4, #1
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	bfb8      	it	lt
 800263a:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
 800263c:	1824      	adds	r4, r4, r0
 800263e:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002642:	429a      	cmp	r2, r3
 8002644:	e9ca 4504 	strd	r4, r5, [sl, #16]
 8002648:	d001      	beq.n	800264e <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800264a:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 800264c:	b952      	cbnz	r2, 8002664 <z_add_timeout+0xa8>
	node->prev = list->tail;
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
 8002654:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8002656:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
 800265a:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
 800265e:	f8c3 a004 	str.w	sl, [r3, #4]
}
 8002662:	e014      	b.n	800268e <z_add_timeout+0xd2>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8002664:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
 8002668:	e9da 4504 	ldrd	r4, r5, [sl, #16]
 800266c:	454d      	cmp	r5, r9
 800266e:	bf08      	it	eq
 8002670:	4544      	cmpeq	r4, r8
 8002672:	d21d      	bcs.n	80026b0 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
 8002674:	ebb8 0004 	subs.w	r0, r8, r4
 8002678:	eb69 0105 	sbc.w	r1, r9, r5
 800267c:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
 8002680:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8002682:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
 8002686:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
 800268a:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
 800268e:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002690:	429a      	cmp	r2, r3
 8002692:	d006      	beq.n	80026a2 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 8002694:	4592      	cmp	sl, r2
 8002696:	d104      	bne.n	80026a2 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
 8002698:	f7ff ff76 	bl	8002588 <next_timeout>
 800269c:	2100      	movs	r1, #0
 800269e:	f7fe fae7 	bl	8000c70 <z_clock_set_timeout>
	__asm__ volatile(
 80026a2:	f386 8811 	msr	BASEPRI, r6
 80026a6:	f3bf 8f6f 	isb	sy
		}
	}
}
 80026aa:	b003      	add	sp, #12
 80026ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
 80026b0:	ebb4 0008 	subs.w	r0, r4, r8
 80026b4:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
 80026b8:	42ba      	cmp	r2, r7
 80026ba:	e9ca 0104 	strd	r0, r1, [sl, #16]
 80026be:	d0c6      	beq.n	800264e <z_add_timeout+0x92>
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	e7c3      	b.n	800264c <z_add_timeout+0x90>
 80026c4:	20000240 	.word	0x20000240
 80026c8:	20000030 	.word	0x20000030

080026cc <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
 80026cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026d0:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80026d2:	f7ff fd2b 	bl	800212c <z_time_slice>
	__asm__ volatile(
 80026d6:	f04f 0310 	mov.w	r3, #16
 80026da:	f3ef 8411 	mrs	r4, BASEPRI
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80026e6:	4d2d      	ldr	r5, [pc, #180]	; (800279c <z_clock_announce+0xd0>)
 80026e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 80027a0 <z_clock_announce+0xd4>
	return list->head == list;
 80026ec:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 80027a4 <z_clock_announce+0xd8>
 80026f0:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 80026f2:	4651      	mov	r1, sl
 80026f4:	f8d5 c000 	ldr.w	ip, [r5]
 80026f8:	f8db 0000 	ldr.w	r0, [fp]
 80026fc:	4662      	mov	r2, ip
 80026fe:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8002700:	4558      	cmp	r0, fp
 8002702:	e9cd 2300 	strd	r2, r3, [sp]
 8002706:	e9da 8900 	ldrd	r8, r9, [sl]
 800270a:	d00e      	beq.n	800272a <z_clock_announce+0x5e>
 800270c:	b168      	cbz	r0, 800272a <z_clock_announce+0x5e>
 800270e:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
 8002712:	42bb      	cmp	r3, r7
 8002714:	bf08      	it	eq
 8002716:	45b4      	cmpeq	ip, r6
 8002718:	d21e      	bcs.n	8002758 <z_clock_announce+0x8c>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 800271a:	9b00      	ldr	r3, [sp, #0]
 800271c:	ebb6 0c03 	subs.w	ip, r6, r3
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	eb67 0603 	sbc.w	r6, r7, r3
 8002726:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
 800272a:	9b00      	ldr	r3, [sp, #0]
 800272c:	eb13 0208 	adds.w	r2, r3, r8
 8002730:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
 8002732:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
 8002736:	eb43 0309 	adc.w	r3, r3, r9
 800273a:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
 800273e:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
 8002740:	f7ff ff22 	bl	8002588 <next_timeout>
 8002744:	4631      	mov	r1, r6
 8002746:	f7fe fa93 	bl	8000c70 <z_clock_set_timeout>
	__asm__ volatile(
 800274a:	f384 8811 	msr	BASEPRI, r4
 800274e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8002752:	b003      	add	sp, #12
 8002754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
 8002758:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
 8002764:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
 8002768:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
 800276c:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
 8002770:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
 8002774:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
 8002776:	f7ff feed 	bl	8002554 <remove_timeout>
 800277a:	f384 8811 	msr	BASEPRI, r4
 800277e:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8002782:	6883      	ldr	r3, [r0, #8]
 8002784:	4798      	blx	r3
	__asm__ volatile(
 8002786:	f04f 0310 	mov.w	r3, #16
 800278a:	f3ef 8411 	mrs	r4, BASEPRI
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
 8002796:	4902      	ldr	r1, [pc, #8]	; (80027a0 <z_clock_announce+0xd4>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8002798:	e7ac      	b.n	80026f4 <z_clock_announce+0x28>
 800279a:	bf00      	nop
 800279c:	200003bc 	.word	0x200003bc
 80027a0:	20000240 	.word	0x20000240
 80027a4:	20000030 	.word	0x20000030

080027a8 <z_tick_get>:

int64_t z_tick_get(void)
{
 80027a8:	b510      	push	{r4, lr}
 80027aa:	f04f 0310 	mov.w	r3, #16
 80027ae:	f3ef 8411 	mrs	r4, BASEPRI
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 80027ba:	f7fe fabd 	bl	8000d38 <z_clock_elapsed>
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <z_tick_get+0x30>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	1812      	adds	r2, r2, r0
 80027c6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
 80027ca:	f384 8811 	msr	BASEPRI, r4
 80027ce:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80027d2:	4610      	mov	r0, r2
 80027d4:	4619      	mov	r1, r3
 80027d6:	bd10      	pop	{r4, pc}
 80027d8:	20000240 	.word	0x20000240

080027dc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(struct device *unused)
{
 80027dc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80027de:	4c06      	ldr	r4, [pc, #24]	; (80027f8 <statics_init+0x1c>)
 80027e0:	4d06      	ldr	r5, [pc, #24]	; (80027fc <statics_init+0x20>)
 80027e2:	42ac      	cmp	r4, r5
 80027e4:	d301      	bcc.n	80027ea <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
 80027e6:	2000      	movs	r0, #0
 80027e8:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
 80027ea:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80027ee:	4620      	mov	r0, r4
 80027f0:	f000 fcc2 	bl	8003178 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
 80027f4:	3414      	adds	r4, #20
 80027f6:	e7f4      	b.n	80027e2 <statics_init+0x6>
 80027f8:	20000128 	.word	0x20000128
 80027fc:	20000128 	.word	0x20000128

08002800 <arch_printk_char_out>:
}
 8002800:	2000      	movs	r0, #0
 8002802:	4770      	bx	lr

08002804 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
 8002804:	b40f      	push	{r0, r1, r2, r3}
 8002806:	b507      	push	{r0, r1, r2, lr}
 8002808:	a904      	add	r1, sp, #16
 800280a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
 800280e:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
 8002810:	f7fd ffe6 	bl	80007e0 <vprintk>
	}
	va_end(ap);
}
 8002814:	b003      	add	sp, #12
 8002816:	f85d eb04 	ldr.w	lr, [sp], #4
 800281a:	b004      	add	sp, #16
 800281c:	4770      	bx	lr

0800281e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800281e:	4604      	mov	r4, r0
 8002820:	b508      	push	{r3, lr}
 8002822:	4608      	mov	r0, r1
 8002824:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8002826:	461a      	mov	r2, r3
 8002828:	47a0      	blx	r4
	return z_impl_k_current_get();
 800282a:	f7ff fe07 	bl	800243c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 800282e:	f7fe fc9b 	bl	8001168 <z_impl_k_thread_abort>

08002832 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 8002832:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
 8002834:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8002838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
 800283c:	bf2c      	ite	cs
 800283e:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
 8002842:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
 8002846:	4770      	bx	lr

08002848 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
 8002848:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
 800284c:	6880      	ldr	r0, [r0, #8]
 800284e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
 8002852:	bf2c      	ite	cs
 8002854:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
 8002858:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
 800285c:	4770      	bx	lr

0800285e <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
 800285e:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
 8002860:	2201      	movs	r2, #1
 8002862:	f7ff ffe6 	bl	8002832 <chunk_field>
}
 8002866:	0840      	lsrs	r0, r0, #1
 8002868:	bd08      	pop	{r3, pc}

0800286a <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
 800286a:	6883      	ldr	r3, [r0, #8]
 800286c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
 8002870:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
 8002874:	d308      	bcc.n	8002888 <set_chunk_used+0x1e>
		if (used) {
 8002876:	684b      	ldr	r3, [r1, #4]
 8002878:	b11a      	cbz	r2, 8002882 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1;
 800287a:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1;
 800287e:	604b      	str	r3, [r1, #4]
 8002880:	4770      	bx	lr
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	e7fa      	b.n	800287e <set_chunk_used+0x14>
		}
	} else {
		if (used) {
 8002888:	884b      	ldrh	r3, [r1, #2]
 800288a:	b11a      	cbz	r2, 8002894 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1;
 800288c:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
 8002890:	804b      	strh	r3, [r1, #2]
		}
	}
}
 8002892:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1;
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	e7fa      	b.n	8002890 <set_chunk_used+0x26>

0800289a <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
 800289a:	0053      	lsls	r3, r2, #1
 800289c:	2201      	movs	r2, #1
 800289e:	f7ff bfd3 	b.w	8002848 <chunk_set>

080028a2 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
 80028a2:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80028a4:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 80028a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80028aa:	bf2c      	ite	cs
 80028ac:	2002      	movcs	r0, #2
 80028ae:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
 80028b0:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
 80028b2:	fab0 f080 	clz	r0, r0
}
 80028b6:	f1c0 001f 	rsb	r0, r0, #31
 80028ba:	4770      	bx	lr

080028bc <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
 80028bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028c0:	4604      	mov	r4, r0
 80028c2:	460d      	mov	r5, r1
	return sizeof(void *) > 4 || chunks > 0x7fff;
 80028c4:	f7ff ffcb 	bl	800285e <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1;
 80028c8:	68a3      	ldr	r3, [r4, #8]
 80028ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ce:	4601      	mov	r1, r0
 80028d0:	d301      	bcc.n	80028d6 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
 80028d2:	2801      	cmp	r0, #1
 80028d4:	d035      	beq.n	8002942 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7ff ffe3 	bl	80028a2 <bucket_idx>
	if (b->next == 0) {
 80028dc:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80028e0:	6916      	ldr	r6, [r2, #16]
 80028e2:	b99e      	cbnz	r6, 800290c <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
 80028e4:	2301      	movs	r3, #1
 80028e6:	fa03 f000 	lsl.w	r0, r3, r0
 80028ea:	68e3      	ldr	r3, [r4, #12]
 80028ec:	4303      	orrs	r3, r0
 80028ee:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
 80028f0:	4629      	mov	r1, r5
		b->next = c;
 80028f2:	6115      	str	r5, [r2, #16]
 80028f4:	462b      	mov	r3, r5
 80028f6:	2202      	movs	r2, #2
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff ffa5 	bl	8002848 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 80028fe:	2203      	movs	r2, #3
 8002900:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
 8002902:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
 8002904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002908:	f7ff bf9e 	b.w	8002848 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
 800290c:	2202      	movs	r2, #2
 800290e:	4631      	mov	r1, r6
 8002910:	4620      	mov	r0, r4
 8002912:	f7ff ff8e 	bl	8002832 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
 8002916:	2202      	movs	r2, #2
 8002918:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
 800291a:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
 800291c:	4629      	mov	r1, r5
 800291e:	4620      	mov	r0, r4
 8002920:	f7ff ff92 	bl	8002848 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
 8002924:	4633      	mov	r3, r6
 8002926:	2203      	movs	r2, #3
 8002928:	4629      	mov	r1, r5
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff ff8c 	bl	8002848 <chunk_set>
 8002930:	2203      	movs	r2, #3
 8002932:	4639      	mov	r1, r7
 8002934:	462b      	mov	r3, r5
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff ff86 	bl	8002848 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
 800293c:	2202      	movs	r2, #2
 800293e:	4631      	mov	r1, r6
 8002940:	e7df      	b.n	8002902 <free_list_add+0x46>
 8002942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002946 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
 8002946:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
 800294a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294c:	bf2c      	ite	cs
 800294e:	2508      	movcs	r5, #8
 8002950:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
 8002952:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002954:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 8002956:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
 8002958:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
 800295c:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
 8002960:	2200      	movs	r2, #0
 8002962:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8002964:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
 8002966:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
 8002968:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
 800296a:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
 800296e:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8002970:	4629      	mov	r1, r5
	h->len = buf_sz;
 8002972:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
 8002974:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8002976:	4620      	mov	r0, r4
 8002978:	f7ff ff93 	bl	80028a2 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
 800297c:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1) / CHUNK_UNIT;
 800297e:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
 8002980:	1c41      	adds	r1, r0, #1
 8002982:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
 8002984:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
 8002988:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
 800298a:	428b      	cmp	r3, r1
 800298c:	db29      	blt.n	80029e2 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
 800298e:	4632      	mov	r2, r6
 8002990:	4620      	mov	r0, r4
 8002992:	2100      	movs	r1, #0
 8002994:	f7ff ff81 	bl	800289a <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 8002998:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
 800299a:	4620      	mov	r0, r4
 800299c:	2201      	movs	r2, #1
 800299e:	2100      	movs	r1, #0
 80029a0:	f7ff ff63 	bl	800286a <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
 80029a4:	463a      	mov	r2, r7
 80029a6:	4631      	mov	r1, r6
 80029a8:	f7ff ff77 	bl	800289a <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
 80029ac:	4633      	mov	r3, r6
 80029ae:	4631      	mov	r1, r6
 80029b0:	4620      	mov	r0, r4
 80029b2:	2200      	movs	r2, #0
 80029b4:	f7ff ff48 	bl	8002848 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
 80029b8:	4629      	mov	r1, r5
 80029ba:	4620      	mov	r0, r4
 80029bc:	2200      	movs	r2, #0
 80029be:	f7ff ff6c 	bl	800289a <set_chunk_size>
 80029c2:	463b      	mov	r3, r7
 80029c4:	4629      	mov	r1, r5
 80029c6:	4620      	mov	r0, r4
 80029c8:	2200      	movs	r2, #0
 80029ca:	f7ff ff3d 	bl	8002848 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
 80029ce:	4629      	mov	r1, r5
 80029d0:	4620      	mov	r0, r4
 80029d2:	2201      	movs	r2, #1
 80029d4:	f7ff ff49 	bl	800286a <set_chunk_used>

	free_list_add(h, chunk0_size);
 80029d8:	4631      	mov	r1, r6
}
 80029da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
 80029de:	f7ff bf6d 	b.w	80028bc <free_list_add>
		h->buckets[i].next = 0;
 80029e2:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
 80029e6:	3301      	adds	r3, #1
 80029e8:	e7cf      	b.n	800298a <sys_heap_init+0x44>

080029ea <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 80029ea:	4770      	bx	lr

080029ec <__stm32_exti_isr_0>:
{
 80029ec:	4602      	mov	r2, r0
	__stm32_exti_isr(0, 1, arg);
 80029ee:	2101      	movs	r1, #1
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fd bf43 	b.w	800087c <__stm32_exti_isr>

080029f6 <__stm32_exti_isr_1>:
{
 80029f6:	4602      	mov	r2, r0
	__stm32_exti_isr(1, 2, arg);
 80029f8:	2102      	movs	r1, #2
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7fd bf3e 	b.w	800087c <__stm32_exti_isr>

08002a00 <__stm32_exti_isr_2>:
{
 8002a00:	4602      	mov	r2, r0
	__stm32_exti_isr(2, 3, arg);
 8002a02:	2103      	movs	r1, #3
 8002a04:	2002      	movs	r0, #2
 8002a06:	f7fd bf39 	b.w	800087c <__stm32_exti_isr>

08002a0a <__stm32_exti_isr_3>:
{
 8002a0a:	4602      	mov	r2, r0
	__stm32_exti_isr(3, 4, arg);
 8002a0c:	2104      	movs	r1, #4
 8002a0e:	2003      	movs	r0, #3
 8002a10:	f7fd bf34 	b.w	800087c <__stm32_exti_isr>

08002a14 <__stm32_exti_isr_4>:
{
 8002a14:	4602      	mov	r2, r0
	__stm32_exti_isr(4, 5, arg);
 8002a16:	2105      	movs	r1, #5
 8002a18:	2004      	movs	r0, #4
 8002a1a:	f7fd bf2f 	b.w	800087c <__stm32_exti_isr>

08002a1e <__stm32_exti_isr_9_5>:
{
 8002a1e:	4602      	mov	r2, r0
	__stm32_exti_isr(5, 10, arg);
 8002a20:	210a      	movs	r1, #10
 8002a22:	2005      	movs	r0, #5
 8002a24:	f7fd bf2a 	b.w	800087c <__stm32_exti_isr>

08002a28 <__stm32_exti_isr_15_10>:
{
 8002a28:	4602      	mov	r2, r0
	__stm32_exti_isr(10, 16, arg);
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	200a      	movs	r0, #10
 8002a2e:	f7fd bf25 	b.w	800087c <__stm32_exti_isr>

08002a32 <__stm32_exti_isr_16>:
{
 8002a32:	4602      	mov	r2, r0
	__stm32_exti_isr(16, 17, arg);
 8002a34:	2111      	movs	r1, #17
 8002a36:	2010      	movs	r0, #16
 8002a38:	f7fd bf20 	b.w	800087c <__stm32_exti_isr>

08002a3c <__stm32_exti_isr_18>:
{
 8002a3c:	4602      	mov	r2, r0
	__stm32_exti_isr(18, 19, arg);
 8002a3e:	2113      	movs	r1, #19
 8002a40:	2012      	movs	r0, #18
 8002a42:	f7fd bf1b 	b.w	800087c <__stm32_exti_isr>

08002a46 <__stm32_exti_isr_21>:
{
 8002a46:	4602      	mov	r2, r0
	__stm32_exti_isr(21, 22, arg);
 8002a48:	2116      	movs	r1, #22
 8002a4a:	2015      	movs	r0, #21
 8002a4c:	f7fd bf16 	b.w	800087c <__stm32_exti_isr>

08002a50 <__stm32_exti_isr_22>:
{
 8002a50:	4602      	mov	r2, r0
	__stm32_exti_isr(22, 23, arg);
 8002a52:	2117      	movs	r1, #23
 8002a54:	2016      	movs	r0, #22
 8002a56:	f7fd bf11 	b.w	800087c <__stm32_exti_isr>

08002a5a <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32L5X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8002a5a:	2200      	movs	r2, #0
{
 8002a5c:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8002a5e:	4611      	mov	r1, r2
 8002a60:	2006      	movs	r0, #6
 8002a62:	f7fe f9e5 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8002a66:	2200      	movs	r2, #0
 8002a68:	4611      	mov	r1, r2
 8002a6a:	2007      	movs	r0, #7
 8002a6c:	f7fe f9e0 	bl	8000e30 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8002a70:	2200      	movs	r2, #0
 8002a72:	4611      	mov	r1, r2
 8002a74:	2008      	movs	r0, #8
 8002a76:	f7fe f9db 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	2009      	movs	r0, #9
 8002a80:	f7fe f9d6 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8002a84:	2200      	movs	r2, #0
 8002a86:	4611      	mov	r1, r2
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f7fe f9d1 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#if !defined(CONFIG_SOC_SERIES_STM32MP1X) && \
	!defined(CONFIG_SOC_SERIES_STM32L5X)
	IRQ_CONNECT(EXTI9_5_IRQn,
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4611      	mov	r1, r2
 8002a92:	2017      	movs	r0, #23
 8002a94:	f7fe f9cc 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8002a98:	2200      	movs	r2, #0
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	2028      	movs	r0, #40	; 0x28
 8002a9e:	f7fe f9c7 	bl	8000e30 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X || CONFIG_SOC_SERIES_STM32L5X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	4611      	mov	r1, r2
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7fe f9c2 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8002aac:	2200      	movs	r2, #0
 8002aae:	4611      	mov	r1, r2
 8002ab0:	202a      	movs	r0, #42	; 0x2a
 8002ab2:	f7fe f9bd 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	4611      	mov	r1, r2
 8002aba:	2002      	movs	r0, #2
 8002abc:	f7fe f9b8 	bl	8000e30 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	f7fe f9b3 	bl	8000e30 <z_arm_irq_priority_set>
}
 8002aca:	2000      	movs	r0, #0
 8002acc:	bd08      	pop	{r3, pc}

08002ace <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8002ace:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ad2:	2208      	movs	r2, #8
 8002ad4:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 8002ad8:	2300      	movs	r3, #0
 8002ada:	6083      	str	r3, [r0, #8]
}
 8002adc:	4770      	bx	lr

08002ade <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8002ade:	4770      	bx	lr

08002ae0 <z_irq_spurious>:
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	f000 b800 	b.w	8002ae8 <z_arm_fatal_error>

08002ae8 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8002ae8:	f000 ba5d 	b.w	8002fa6 <z_fatal_error>

08002aec <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8002aec:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8002aee:	6800      	ldr	r0, [r0, #0]
 8002af0:	f000 ba59 	b.w	8002fa6 <z_fatal_error>

08002af4 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8002af4:	b508      	push	{r3, lr}
	handler();
 8002af6:	f7fe f9fb 	bl	8000ef0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
 8002afa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
 8002afe:	f7fe bb19 	b.w	8001134 <z_arm_exc_exit>

08002b02 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
 8002b02:	1e43      	subs	r3, r0, #1
 8002b04:	3901      	subs	r1, #1
 8002b06:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002b0a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8002b0e:	4282      	cmp	r2, r0
 8002b10:	d101      	bne.n	8002b16 <strcmp+0x14>
 8002b12:	2a00      	cmp	r2, #0
 8002b14:	d1f7      	bne.n	8002b06 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
 8002b16:	1a10      	subs	r0, r2, r0
 8002b18:	4770      	bx	lr

08002b1a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
 8002b1a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
 8002b1c:	ea81 0400 	eor.w	r4, r1, r0
 8002b20:	07a5      	lsls	r5, r4, #30
 8002b22:	4603      	mov	r3, r0
 8002b24:	d00b      	beq.n	8002b3e <memcpy+0x24>
 8002b26:	3b01      	subs	r3, #1
 8002b28:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
 8002b2a:	4291      	cmp	r1, r2
 8002b2c:	d11b      	bne.n	8002b66 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
 8002b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
 8002b30:	2a00      	cmp	r2, #0
 8002b32:	d0fc      	beq.n	8002b2e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
 8002b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b38:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
 8002b3c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
 8002b3e:	079c      	lsls	r4, r3, #30
 8002b40:	d1f6      	bne.n	8002b30 <memcpy+0x16>
 8002b42:	f022 0403 	bic.w	r4, r2, #3
 8002b46:	1f1d      	subs	r5, r3, #4
 8002b48:	0896      	lsrs	r6, r2, #2
 8002b4a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
 8002b4c:	42b9      	cmp	r1, r7
 8002b4e:	d105      	bne.n	8002b5c <memcpy+0x42>
 8002b50:	f06f 0503 	mvn.w	r5, #3
 8002b54:	fb05 2206 	mla	r2, r5, r6, r2
 8002b58:	4423      	add	r3, r4
 8002b5a:	e7e4      	b.n	8002b26 <memcpy+0xc>
			*(d_word++) = *(s_word++);
 8002b5c:	f851 cb04 	ldr.w	ip, [r1], #4
 8002b60:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
 8002b64:	e7f2      	b.n	8002b4c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
 8002b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
 8002b6e:	e7dc      	b.n	8002b2a <memcpy+0x10>

08002b70 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
 8002b70:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
 8002b72:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
 8002b74:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
 8002b76:	079c      	lsls	r4, r3, #30
 8002b78:	d111      	bne.n	8002b9e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
 8002b7a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
 8002b7e:	f022 0603 	bic.w	r6, r2, #3
 8002b82:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
 8002b86:	441e      	add	r6, r3
 8002b88:	0894      	lsrs	r4, r2, #2
 8002b8a:	42b3      	cmp	r3, r6
 8002b8c:	d10d      	bne.n	8002baa <memset+0x3a>
 8002b8e:	f06f 0503 	mvn.w	r5, #3
 8002b92:	fb05 2204 	mla	r2, r5, r4, r2
 8002b96:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d109      	bne.n	8002bb0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
 8002b9c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
 8002b9e:	2a00      	cmp	r2, #0
 8002ba0:	d0fc      	beq.n	8002b9c <memset+0x2c>
		*(d_byte++) = c_byte;
 8002ba2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002ba6:	3a01      	subs	r2, #1
 8002ba8:	e7e5      	b.n	8002b76 <memset+0x6>
		*(d_word++) = c_word;
 8002baa:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
 8002bae:	e7ec      	b.n	8002b8a <memset+0x1a>
		*(d_byte++) = c_byte;
 8002bb0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
 8002bb4:	e7f0      	b.n	8002b98 <memset+0x28>

08002bb6 <_stdout_hook_default>:
}
 8002bb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bba:	4770      	bx	lr

08002bbc <gpio_stm32_isr>:
					struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002bbc:	68cb      	ldr	r3, [r1, #12]
{
 8002bbe:	b570      	push	{r4, r5, r6, lr}
 8002bc0:	460e      	mov	r6, r1
 8002bc2:	6859      	ldr	r1, [r3, #4]
 8002bc4:	b199      	cbz	r1, 8002bee <gpio_stm32_isr+0x32>

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
 8002bc6:	680c      	ldr	r4, [r1, #0]
	gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8002bc8:	2501      	movs	r5, #1
 8002bca:	2c00      	cmp	r4, #0
 8002bcc:	bf38      	it	cc
 8002bce:	2400      	movcc	r4, #0
 8002bd0:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8002bd2:	688a      	ldr	r2, [r1, #8]
 8002bd4:	402a      	ands	r2, r5
 8002bd6:	d002      	beq.n	8002bde <gpio_stm32_isr+0x22>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
 8002bd8:	684b      	ldr	r3, [r1, #4]
 8002bda:	4630      	mov	r0, r6
 8002bdc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8002bde:	b134      	cbz	r4, 8002bee <gpio_stm32_isr+0x32>
 8002be0:	6823      	ldr	r3, [r4, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf38      	it	cc
 8002be6:	2300      	movcc	r3, #0
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002be8:	4621      	mov	r1, r4
 8002bea:	461c      	mov	r4, r3
 8002bec:	e7f1      	b.n	8002bd2 <gpio_stm32_isr+0x16>
}
 8002bee:	bd70      	pop	{r4, r5, r6, pc}

08002bf0 <gpio_stm32_port_get_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bf0:	6843      	ldr	r3, [r0, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Input data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadInputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8002bf4:	691b      	ldr	r3, [r3, #16]
	*value = LL_GPIO_ReadInputPort(gpio);
 8002bf6:	600b      	str	r3, [r1, #0]
}
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	4770      	bx	lr

08002bfc <gpio_stm32_port_set_masked_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002bfc:	6843      	ldr	r3, [r0, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
  * @param  GPIOx GPIO Port
  * @retval Output data register value of port
  */
__STATIC_INLINE uint32_t LL_GPIO_ReadOutputPort(GPIO_TypeDef *GPIOx)
{
  return (uint32_t)(READ_REG(GPIOx->ODR));
 8002c00:	6958      	ldr	r0, [r3, #20]
	LL_GPIO_WriteOutputPort(gpio, (port_value & ~mask) | (mask & value));
 8002c02:	4042      	eors	r2, r0
 8002c04:	400a      	ands	r2, r1
 8002c06:	4042      	eors	r2, r0
  WRITE_REG(GPIOx->ODR, PortValue);
 8002c08:	615a      	str	r2, [r3, #20]
}
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	4770      	bx	lr

08002c0e <gpio_stm32_port_set_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c0e:	6843      	ldr	r3, [r0, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
}
 8002c12:	2000      	movs	r0, #0
	WRITE_REG(gpio->BSRR, pins);
 8002c14:	6199      	str	r1, [r3, #24]
}
 8002c16:	4770      	bx	lr

08002c18 <gpio_stm32_port_clear_bits_raw>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c18:	6843      	ldr	r3, [r0, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8002c1c:	0409      	lsls	r1, r1, #16
 8002c1e:	6199      	str	r1, [r3, #24]
}
 8002c20:	2000      	movs	r0, #0
 8002c22:	4770      	bx	lr

08002c24 <gpio_stm32_port_toggle_bits>:
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002c24:	6843      	ldr	r3, [r0, #4]
 8002c26:	685a      	ldr	r2, [r3, #4]
	WRITE_REG(gpio->ODR, READ_REG(gpio->ODR) ^ pins);
 8002c28:	6953      	ldr	r3, [r2, #20]
 8002c2a:	404b      	eors	r3, r1
 8002c2c:	6153      	str	r3, [r2, #20]
}
 8002c2e:	2000      	movs	r0, #0
 8002c30:	4770      	bx	lr

08002c32 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8002c32:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
 8002c34:	6858      	ldr	r0, [r3, #4]
{
 8002c36:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8002c38:	b158      	cbz	r0, 8002c52 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c3a:	2400      	movs	r4, #0
 8002c3c:	4281      	cmp	r1, r0
 8002c3e:	d113      	bne.n	8002c68 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8002c40:	6808      	ldr	r0, [r1, #0]
 8002c42:	b95c      	cbnz	r4, 8002c5c <gpio_stm32_manage_callback+0x2a>
 8002c44:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8002c46:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8002c48:	42a1      	cmp	r1, r4
 8002c4a:	d100      	bne.n	8002c4e <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8002c4c:	6098      	str	r0, [r3, #8]
	parent->next = child;
 8002c4e:	2000      	movs	r0, #0
 8002c50:	6008      	str	r0, [r1, #0]
	if (set) {
 8002c52:	b972      	cbnz	r2, 8002c72 <gpio_stm32_manage_callback+0x40>
	return 0;
 8002c54:	2000      	movs	r0, #0
}
 8002c56:	bd30      	pop	{r4, r5, pc}
 8002c58:	4628      	mov	r0, r5
 8002c5a:	e7ef      	b.n	8002c3c <gpio_stm32_manage_callback+0xa>
 8002c5c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8002c5e:	6898      	ldr	r0, [r3, #8]
 8002c60:	4281      	cmp	r1, r0
	list->tail = node;
 8002c62:	bf08      	it	eq
 8002c64:	609c      	streq	r4, [r3, #8]
}
 8002c66:	e7f2      	b.n	8002c4e <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8002c68:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	2d00      	cmp	r5, #0
 8002c6e:	d1f3      	bne.n	8002c58 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8002c70:	b13a      	cbz	r2, 8002c82 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8002c72:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8002c74:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8002c76:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8002c78:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	d1ea      	bne.n	8002c54 <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8002c7e:	6099      	str	r1, [r3, #8]
}
 8002c80:	e7e9      	b.n	8002c56 <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8002c82:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8002c86:	e7e6      	b.n	8002c56 <gpio_stm32_manage_callback+0x24>

08002c88 <gpio_stm32_configure>:
{
 8002c88:	b5f0      	push	{r4, r5, r6, r7, lr}
	pinval = 1 << pin;
 8002c8a:	2401      	movs	r4, #1
 8002c8c:	408c      	lsls	r4, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8002c92:	fab7 f787 	clz	r7, r7
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c96:	f8d0 c000 	ldr.w	ip, [r0]
 8002c9a:	007f      	lsls	r7, r7, #1
 8002c9c:	f04f 0e03 	mov.w	lr, #3
 8002ca0:	fa0e f707 	lsl.w	r7, lr, r7
 8002ca4:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8002cac:	fab7 f787 	clz	r7, r7
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8002cb0:	f3c2 1501 	ubfx	r5, r2, #4, #2
 8002cb4:	007f      	lsls	r7, r7, #1
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8002cb6:	f002 0630 	and.w	r6, r2, #48	; 0x30
 8002cba:	40bd      	lsls	r5, r7
 8002cbc:	ea45 050c 	orr.w	r5, r5, ip
	if (STM32_MODER_ALT_MODE == mode) {
 8002cc0:	2e20      	cmp	r6, #32
 8002cc2:	6005      	str	r5, [r0, #0]
 8002cc4:	d115      	bne.n	8002cf2 <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 8002cc6:	2907      	cmp	r1, #7
 8002cc8:	dc48      	bgt.n	8002d5c <gpio_stm32_configure+0xd4>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	fa94 f5a4 	rbit	r5, r4
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002cce:	6a07      	ldr	r7, [r0, #32]
  if (value == 0U)
 8002cd0:	b10d      	cbz	r5, 8002cd6 <gpio_stm32_configure+0x4e>
  return __builtin_clz(value);
 8002cd2:	fab5 f685 	clz	r6, r5
 8002cd6:	250f      	movs	r5, #15
 8002cd8:	00b6      	lsls	r6, r6, #2
 8002cda:	fa05 f606 	lsl.w	r6, r5, r6
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8002ce2:	fab5 f585 	clz	r5, r5
 8002ce6:	00ad      	lsls	r5, r5, #2
 8002ce8:	ea27 0606 	bic.w	r6, r7, r6
 8002cec:	40ab      	lsls	r3, r5
 8002cee:	4333      	orrs	r3, r6
 8002cf0:	6203      	str	r3, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cf2:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8002cf4:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8002cf8:	fa03 f101 	lsl.w	r1, r3, r1
 8002cfc:	ea25 0304 	bic.w	r3, r5, r4
 8002d00:	4319      	orrs	r1, r3
 8002d02:	6041      	str	r1, [r0, #4]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8002d08:	fab1 f181 	clz	r1, r1
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002d0c:	6885      	ldr	r5, [r0, #8]
 8002d0e:	2603      	movs	r6, #3
 8002d10:	0049      	lsls	r1, r1, #1
 8002d12:	fa06 f101 	lsl.w	r1, r6, r1
 8002d16:	ea25 0501 	bic.w	r5, r5, r1
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1a:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8002d1e:	fab1 f181 	clz	r1, r1
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8002d22:	f3c2 13c1 	ubfx	r3, r2, #7, #2
 8002d26:	0049      	lsls	r1, r1, #1
 8002d28:	408b      	lsls	r3, r1
 8002d2a:	432b      	orrs	r3, r5
 8002d2c:	6083      	str	r3, [r0, #8]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8002d32:	fab3 f383 	clz	r3, r3
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d36:	68c1      	ldr	r1, [r0, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d38:	fa94 f4a4 	rbit	r4, r4
 8002d3c:	005b      	lsls	r3, r3, #1
  return __builtin_clz(value);
 8002d3e:	fab4 f484 	clz	r4, r4
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8002d42:	f3c2 2241 	ubfx	r2, r2, #9, #2
 8002d46:	fa06 f303 	lsl.w	r3, r6, r3
 8002d4a:	0064      	lsls	r4, r4, #1
 8002d4c:	ea21 0303 	bic.w	r3, r1, r3
 8002d50:	fa02 f404 	lsl.w	r4, r2, r4
 8002d54:	431c      	orrs	r4, r3
 8002d56:	60c4      	str	r4, [r0, #12]
}
 8002d58:	2000      	movs	r0, #0
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d5c:	0a25      	lsrs	r5, r4, #8
 8002d5e:	6a47      	ldr	r7, [r0, #36]	; 0x24
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	fa95 fca5 	rbit	ip, r5
  if (value == 0U)
 8002d64:	f1bc 0f00 	cmp.w	ip, #0
 8002d68:	d001      	beq.n	8002d6e <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 8002d6a:	fabc f68c 	clz	r6, ip
 8002d6e:	00b6      	lsls	r6, r6, #2
 8002d70:	f04f 0c0f 	mov.w	ip, #15
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	fa95 f5a5 	rbit	r5, r5
  return __builtin_clz(value);
 8002d78:	fab5 f585 	clz	r5, r5
 8002d7c:	fa0c f606 	lsl.w	r6, ip, r6
 8002d80:	00ad      	lsls	r5, r5, #2
 8002d82:	ea27 0606 	bic.w	r6, r7, r6
 8002d86:	40ab      	lsls	r3, r5
 8002d88:	4333      	orrs	r3, r6
 8002d8a:	6243      	str	r3, [r0, #36]	; 0x24
}
 8002d8c:	e7b1      	b.n	8002cf2 <gpio_stm32_configure+0x6a>

08002d8e <gpio_stm32_config>:
{
 8002d8e:	b538      	push	{r3, r4, r5, lr}
 8002d90:	4613      	mov	r3, r2
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d92:	059a      	lsls	r2, r3, #22
	const struct gpio_stm32_config *cfg = dev->config_info;
 8002d94:	6845      	ldr	r5, [r0, #4]
{
 8002d96:	460c      	mov	r4, r1
	if ((flags & GPIO_OUTPUT) != 0) {
 8002d98:	d518      	bpl.n	8002dcc <gpio_stm32_config+0x3e>
		if ((flags & GPIO_SINGLE_ENDED) != 0) {
 8002d9a:	0799      	lsls	r1, r3, #30
 8002d9c:	d50f      	bpl.n	8002dbe <gpio_stm32_config+0x30>
			if (flags & GPIO_LINE_OPEN_DRAIN) {
 8002d9e:	075a      	lsls	r2, r3, #29
 8002da0:	d52e      	bpl.n	8002e00 <gpio_stm32_config+0x72>
				*pincfg |= STM32_PINCFG_OPEN_DRAIN;
 8002da2:	2250      	movs	r2, #80	; 0x50
		if ((flags & GPIO_PULL_UP) != 0) {
 8002da4:	06d9      	lsls	r1, r3, #27
 8002da6:	d50c      	bpl.n	8002dc2 <gpio_stm32_config+0x34>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
 8002dac:	0519      	lsls	r1, r3, #20
 8002dae:	d41d      	bmi.n	8002dec <gpio_stm32_config+0x5e>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
 8002db0:	055b      	lsls	r3, r3, #21
 8002db2:	d514      	bpl.n	8002dde <gpio_stm32_config+0x50>
			gpio_stm32_port_clear_bits_raw(dev, BIT(pin));
 8002db4:	2101      	movs	r1, #1
 8002db6:	40a1      	lsls	r1, r4
 8002db8:	f7ff ff2e 	bl	8002c18 <gpio_stm32_port_clear_bits_raw>
 8002dbc:	e00f      	b.n	8002dde <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8002dbe:	2210      	movs	r2, #16
 8002dc0:	e7f0      	b.n	8002da4 <gpio_stm32_config+0x16>
		} else if ((flags & GPIO_PULL_DOWN) != 0) {
 8002dc2:	0699      	lsls	r1, r3, #26
 8002dc4:	d5f2      	bpl.n	8002dac <gpio_stm32_config+0x1e>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002dc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	if (err != 0) {
 8002dca:	e7ef      	b.n	8002dac <gpio_stm32_config+0x1e>
	} else if  ((flags & GPIO_INPUT) != 0) {
 8002dcc:	05d9      	lsls	r1, r3, #23
 8002dce:	d512      	bpl.n	8002df6 <gpio_stm32_config+0x68>
		if ((flags & GPIO_PULL_UP) != 0) {
 8002dd0:	06da      	lsls	r2, r3, #27
 8002dd2:	d412      	bmi.n	8002dfa <gpio_stm32_config+0x6c>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8002dd4:	f013 0220 	ands.w	r2, r3, #32
 8002dd8:	bf18      	it	ne
 8002dda:	f44f 6280 	movne.w	r2, #1024	; 0x400
	gpio_stm32_configure(cfg->base, pin, pincfg, 0);
 8002dde:	6868      	ldr	r0, [r5, #4]
 8002de0:	2300      	movs	r3, #0
 8002de2:	4621      	mov	r1, r4
 8002de4:	f7ff ff50 	bl	8002c88 <gpio_stm32_configure>
 8002de8:	2000      	movs	r0, #0
}
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8002dec:	6869      	ldr	r1, [r5, #4]
			gpio_stm32_port_set_bits_raw(dev, BIT(pin));
 8002dee:	2301      	movs	r3, #1
 8002df0:	40a3      	lsls	r3, r4
	WRITE_REG(gpio->BSRR, pins);
 8002df2:	618b      	str	r3, [r1, #24]
	return 0;
 8002df4:	e7f3      	b.n	8002dde <gpio_stm32_config+0x50>
		*pincfg = STM32_PINCFG_MODE_ANALOG;
 8002df6:	2230      	movs	r2, #48	; 0x30
 8002df8:	e7f1      	b.n	8002dde <gpio_stm32_config+0x50>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8002dfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dfe:	e7ee      	b.n	8002dde <gpio_stm32_config+0x50>
				return -ENOTSUP;
 8002e00:	f06f 0022 	mvn.w	r0, #34	; 0x22
	return err;
 8002e04:	e7f1      	b.n	8002dea <gpio_stm32_config+0x5c>

08002e06 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002e06:	6341      	str	r1, [r0, #52]	; 0x34
}
 8002e08:	4770      	bx	lr

08002e0a <LL_TIM_OC_SetCompareCH2>:
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002e0a:	6381      	str	r1, [r0, #56]	; 0x38
}
 8002e0c:	4770      	bx	lr

08002e0e <LL_TIM_OC_SetCompareCH3>:
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002e0e:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8002e10:	4770      	bx	lr

08002e12 <LL_TIM_OC_SetCompareCH4>:
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002e12:	6401      	str	r1, [r0, #64]	; 0x40
}
 8002e14:	4770      	bx	lr

08002e16 <pwm_stm32_get_cycles_per_sec>:
{
 8002e16:	b510      	push	{r4, lr}
	*cycles = (uint64_t)(data->tim_clk / (cfg->prescaler + 1));
 8002e18:	6843      	ldr	r3, [r0, #4]
 8002e1a:	68c4      	ldr	r4, [r0, #12]
 8002e1c:	6859      	ldr	r1, [r3, #4]
 8002e1e:	6823      	ldr	r3, [r4, #0]
 8002e20:	2000      	movs	r0, #0
 8002e22:	3101      	adds	r1, #1
 8002e24:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e28:	e9c2 3000 	strd	r3, r0, [r2]
}
 8002e2c:	bd10      	pop	{r4, pc}

08002e2e <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8002e2e:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8002e30:	6803      	ldr	r3, [r0, #0]
 8002e32:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e34:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8002e36:	6843      	ldr	r3, [r0, #4]
 8002e38:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8002e3a:	9b01      	ldr	r3, [sp, #4]
}
 8002e3c:	b002      	add	sp, #8
 8002e3e:	4770      	bx	lr

08002e40 <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8002e40:	68c3      	ldr	r3, [r0, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002e46:	6843      	ldr	r3, [r0, #4]
 8002e48:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8002e4a:	68d3      	ldr	r3, [r2, #12]
 8002e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8002e50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e54:	d023      	beq.n	8002e9e <uart_stm32_config_get+0x5e>
		return UART_CFG_PARITY_NONE;
 8002e56:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8002e5a:	4243      	negs	r3, r0
 8002e5c:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8002e5e:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8002e60:	6913      	ldr	r3, [r2, #16]
 8002e62:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8002e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6a:	d01a      	beq.n	8002ea2 <uart_stm32_config_get+0x62>
 8002e6c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002e70:	d019      	beq.n	8002ea6 <uart_stm32_config_get+0x66>
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2303      	movne	r3, #3
 8002e78:	2301      	moveq	r3, #1
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8002e7a:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8002e7c:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8002e7e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8002e82:	bf14      	ite	ne
 8002e84:	2304      	movne	r3, #4
 8002e86:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8002e88:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8002e8a:	6953      	ldr	r3, [r2, #20]
 8002e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8002e90:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8002e94:	4253      	negs	r3, r2
 8002e96:	4153      	adcs	r3, r2
 8002e98:	71cb      	strb	r3, [r1, #7]
}
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	4770      	bx	lr
	switch (parity) {
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	e7dd      	b.n	8002e5e <uart_stm32_config_get+0x1e>
		return UART_CFG_STOP_BITS_0_5;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e7e9      	b.n	8002e7a <uart_stm32_config_get+0x3a>
		return UART_CFG_STOP_BITS_1_5;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e7e7      	b.n	8002e7a <uart_stm32_config_get+0x3a>

08002eaa <uart_stm32_poll_in>:
{
 8002eaa:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002eac:	6843      	ldr	r3, [r0, #4]
 8002eae:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002eb0:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8002eb2:	071a      	lsls	r2, r3, #28
 8002eb4:	d501      	bpl.n	8002eba <uart_stm32_poll_in+0x10>
		LL_USART_ClearFlag_ORE(UartInstance);
 8002eb6:	f7ff ffba 	bl	8002e2e <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002eba:	6803      	ldr	r3, [r0, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8002ebc:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002ebe:	bf43      	ittte	mi
 8002ec0:	6843      	ldrmi	r3, [r0, #4]
 8002ec2:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8002ec4:	2000      	movmi	r0, #0
		return -1;
 8002ec6:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8002eca:	bd08      	pop	{r3, pc}

08002ecc <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002ecc:	6843      	ldr	r3, [r0, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8002ed0:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8002ed2:	0612      	lsls	r2, r2, #24
 8002ed4:	d5fc      	bpl.n	8002ed0 <uart_stm32_poll_out+0x4>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8002ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eda:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8002edc:	6059      	str	r1, [r3, #4]
}
 8002ede:	4770      	bx	lr

08002ee0 <uart_stm32_err_check>:
{
 8002ee0:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002ee2:	6843      	ldr	r3, [r0, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8002ee6:	6802      	ldr	r2, [r0, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8002ee8:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8002eea:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8002eec:	6803      	ldr	r3, [r0, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8002eee:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8002ef2:	bf48      	it	mi
 8002ef4:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8002ef8:	0799      	lsls	r1, r3, #30
		err |= UART_ERROR_FRAMING;
 8002efa:	bf48      	it	mi
 8002efc:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8002f00:	07d3      	lsls	r3, r2, #31
 8002f02:	d501      	bpl.n	8002f08 <uart_stm32_err_check+0x28>
		LL_USART_ClearFlag_ORE(UartInstance);
 8002f04:	f7ff ff93 	bl	8002e2e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8002f08:	0791      	lsls	r1, r2, #30
 8002f0a:	d501      	bpl.n	8002f10 <uart_stm32_err_check+0x30>
		LL_USART_ClearFlag_PE(UartInstance);
 8002f0c:	f7ff ff8f 	bl	8002e2e <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8002f10:	0753      	lsls	r3, r2, #29
 8002f12:	d501      	bpl.n	8002f18 <uart_stm32_err_check+0x38>
		LL_USART_ClearFlag_FE(UartInstance);
 8002f14:	f7ff ff8b 	bl	8002e2e <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8002f18:	f7ff ff89 	bl	8002e2e <LL_USART_ClearFlag_FE>
}
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	bd08      	pop	{r3, pc}

08002f20 <uart_stm32_set_baudrate>:
	if (clock_control_get_rate(data->clock,
 8002f20:	68c3      	ldr	r3, [r0, #12]
{
 8002f22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f24:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f26:	6841      	ldr	r1, [r0, #4]
	if (clock_control_get_rate(data->clock,
 8002f28:	6858      	ldr	r0, [r3, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8002f2a:	f851 4b08 	ldr.w	r4, [r1], #8
	return api->get_rate(dev, sys, rate);
 8002f2e:	6883      	ldr	r3, [r0, #8]
 8002f30:	aa01      	add	r2, sp, #4
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4798      	blx	r3
	if (clock_control_get_rate(data->clock,
 8002f36:	2800      	cmp	r0, #0
 8002f38:	db14      	blt.n	8002f64 <uart_stm32_set_baudrate+0x44>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002f3a:	9801      	ldr	r0, [sp, #4]
 8002f3c:	2119      	movs	r1, #25
 8002f3e:	00aa      	lsls	r2, r5, #2
 8002f40:	0fab      	lsrs	r3, r5, #30
 8002f42:	fba0 0101 	umull	r0, r1, r0, r1
 8002f46:	f7fd f91f 	bl	8000188 <__aeabi_uldivmod>
 8002f4a:	2264      	movs	r2, #100	; 0x64
 8002f4c:	fbb0 f1f2 	udiv	r1, r0, r2
 8002f50:	fb02 0311 	mls	r3, r2, r1, r0
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	3332      	adds	r3, #50	; 0x32
 8002f58:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f5c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	60a3      	str	r3, [r4, #8]
}
 8002f64:	b003      	add	sp, #12
 8002f66:	bd30      	pop	{r4, r5, pc}

08002f68 <LL_TIM_StructInit>:
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8002f68:	2300      	movs	r3, #0
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8002f6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8002f6e:	e9c0 2302 	strd	r2, r3, [r0, #8]
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 8002f72:	8003      	strh	r3, [r0, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8002f74:	6043      	str	r3, [r0, #4]
  TIM_InitStruct->RepetitionCounter = (uint8_t)0x00;
 8002f76:	7403      	strb	r3, [r0, #16]
}
 8002f78:	4770      	bx	lr

08002f7a <LL_TIM_OC_StructInit>:
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8002f7a:	2300      	movs	r3, #0
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 8002f7c:	e9c0 3300 	strd	r3, r3, [r0]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8002f80:	e9c0 3302 	strd	r3, r3, [r0, #8]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8002f84:	e9c0 3304 	strd	r3, r3, [r0, #16]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8002f88:	e9c0 3306 	strd	r3, r3, [r0, #24]
}
 8002f8c:	4770      	bx	lr

08002f8e <arch_system_halt>:
	__asm__ volatile(
 8002f8e:	f04f 0210 	mov.w	r2, #16
 8002f92:	f3ef 8311 	mrs	r3, BASEPRI
 8002f96:	f382 8811 	msr	BASEPRI, r2
 8002f9a:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
 8002f9e:	e7fe      	b.n	8002f9e <arch_system_halt+0x10>

08002fa0 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8002fa0:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8002fa2:	f7ff fff4 	bl	8002f8e <arch_system_halt>

08002fa6 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8002fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fa8:	4605      	mov	r5, r0
 8002faa:	460e      	mov	r6, r1
 8002fac:	f04f 0310 	mov.w	r3, #16
 8002fb0:	f3ef 8711 	mrs	r7, BASEPRI
 8002fb4:	f383 8811 	msr	BASEPRI, r3
 8002fb8:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
 8002fbc:	f7ff fa3e 	bl	800243c <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 8002fc0:	4631      	mov	r1, r6
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f7ff ffeb 	bl	8002fa0 <k_sys_fatal_error_handler>
	__asm__ volatile(
 8002fca:	f387 8811 	msr	BASEPRI, r7
 8002fce:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
 8002fd2:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
 8002fd4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002fd8:	f7fe b8c6 	b.w	8001168 <z_impl_k_thread_abort>

08002fdc <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002fdc:	b921      	cbnz	r1, 8002fe8 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fde:	f3ef 8005 	mrs	r0, IPSR
 8002fe2:	b908      	cbnz	r0, 8002fe8 <z_reschedule+0xc>
 8002fe4:	f7fd bec6 	b.w	8000d74 <arch_swap>
 8002fe8:	f381 8811 	msr	BASEPRI, r1
 8002fec:	f3bf 8f6f 	isb	sy
}
 8002ff0:	4770      	bx	lr

08002ff2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	b920      	cbnz	r0, 8003000 <z_reschedule_irqlock+0xe>
 8002ff6:	f3ef 8205 	mrs	r2, IPSR
 8002ffa:	b90a      	cbnz	r2, 8003000 <z_reschedule_irqlock+0xe>
 8002ffc:	f7fd beba 	b.w	8000d74 <arch_swap>
 8003000:	f383 8811 	msr	BASEPRI, r3
 8003004:	f3bf 8f6f 	isb	sy
}
 8003008:	4770      	bx	lr

0800300a <z_reschedule_unlocked>:
	__asm__ volatile(
 800300a:	f04f 0310 	mov.w	r3, #16
 800300e:	f3ef 8011 	mrs	r0, BASEPRI
 8003012:	f383 8811 	msr	BASEPRI, r3
 8003016:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800301a:	f7ff bfea 	b.w	8002ff2 <z_reschedule_irqlock>

0800301e <z_priq_dumb_best>:
{
 800301e:	4603      	mov	r3, r0
	return list->head == list;
 8003020:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8003022:	4283      	cmp	r3, r0
 8003024:	d003      	beq.n	800302e <z_priq_dumb_best+0x10>
	if (n != NULL) {
 8003026:	2800      	cmp	r0, #0
 8003028:	bf38      	it	cc
 800302a:	2000      	movcc	r0, #0
 800302c:	4770      	bx	lr
	struct k_thread *thread = NULL;
 800302e:	2000      	movs	r0, #0
}
 8003030:	4770      	bx	lr

08003032 <z_ready_thread>:
{
 8003032:	b510      	push	{r4, lr}
 8003034:	f04f 0310 	mov.w	r3, #16
 8003038:	f3ef 8411 	mrs	r4, BASEPRI
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
 8003044:	f7fe ffda 	bl	8001ffc <ready_thread>
	__asm__ volatile(
 8003048:	f384 8811 	msr	BASEPRI, r4
 800304c:	f3bf 8f6f 	isb	sy
}
 8003050:	bd10      	pop	{r4, pc}

08003052 <z_thread_timeout>:
{
 8003052:	b538      	push	{r3, r4, r5, lr}
	if (thread->base.pended_on != NULL) {
 8003054:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 8003058:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
 800305a:	f1a0 0118 	sub.w	r1, r0, #24
	if (thread->base.pended_on != NULL) {
 800305e:	b1c3      	cbz	r3, 8003092 <z_thread_timeout+0x40>
	__asm__ volatile(
 8003060:	f04f 0310 	mov.w	r3, #16
 8003064:	f3ef 8511 	mrs	r5, BASEPRI
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8003070:	f850 0c10 	ldr.w	r0, [r0, #-16]
 8003074:	f7fe ff6c 	bl	8001f50 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8003078:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800307c:	f023 0302 	bic.w	r3, r3, #2
 8003080:	f804 3c0b 	strb.w	r3, [r4, #-11]
		thread->base.pended_on = NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	f844 3c10 	str.w	r3, [r4, #-16]
	__asm__ volatile(
 800308a:	f385 8811 	msr	BASEPRI, r5
 800308e:	f3bf 8f6f 	isb	sy
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 8003092:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8003096:	f023 0314 	bic.w	r3, r3, #20
 800309a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	z_ready_thread(thread);
 800309e:	4608      	mov	r0, r1
}
 80030a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
 80030a4:	f7ff bfc5 	b.w	8003032 <z_ready_thread>

080030a8 <z_remove_thread_from_ready_q>:
{
 80030a8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80030aa:	f04f 0310 	mov.w	r3, #16
 80030ae:	f3ef 8411 	mrs	r4, BASEPRI
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
		unready_thread(thread);
 80030ba:	f7ff f8fd 	bl	80022b8 <unready_thread>
	__asm__ volatile(
 80030be:	f384 8811 	msr	BASEPRI, r4
 80030c2:	f3bf 8f6f 	isb	sy
}
 80030c6:	bd10      	pop	{r4, pc}

080030c8 <z_abort_timeout>:
{
 80030c8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80030ca:	f04f 0210 	mov.w	r2, #16
 80030ce:	f3ef 8411 	mrs	r4, BASEPRI
 80030d2:	f382 8811 	msr	BASEPRI, r2
 80030d6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80030da:	6803      	ldr	r3, [r0, #0]
 80030dc:	b13b      	cbz	r3, 80030ee <z_abort_timeout+0x26>
			remove_timeout(to);
 80030de:	f7ff fa39 	bl	8002554 <remove_timeout>
			ret = 0;
 80030e2:	2000      	movs	r0, #0
	__asm__ volatile(
 80030e4:	f384 8811 	msr	BASEPRI, r4
 80030e8:	f3bf 8f6f 	isb	sy
}
 80030ec:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80030ee:	f06f 0015 	mvn.w	r0, #21
 80030f2:	e7f7      	b.n	80030e4 <z_abort_timeout+0x1c>

080030f4 <z_get_next_timeout_expiry>:
{
 80030f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80030f6:	f04f 0310 	mov.w	r3, #16
 80030fa:	f3ef 8411 	mrs	r4, BASEPRI
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8003106:	f7ff fa3f 	bl	8002588 <next_timeout>
	__asm__ volatile(
 800310a:	f384 8811 	msr	BASEPRI, r4
 800310e:	f3bf 8f6f 	isb	sy
}
 8003112:	bd10      	pop	{r4, pc}

08003114 <z_set_timeout_expiry>:
{
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4604      	mov	r4, r0
 8003118:	460d      	mov	r5, r1
	__asm__ volatile(
 800311a:	f04f 0310 	mov.w	r3, #16
 800311e:	f3ef 8611 	mrs	r6, BASEPRI
 8003122:	f383 8811 	msr	BASEPRI, r3
 8003126:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
 800312a:	f7ff fa2d 	bl	8002588 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800312e:	2801      	cmp	r0, #1
 8003130:	dd05      	ble.n	800313e <z_set_timeout_expiry+0x2a>
 8003132:	42a0      	cmp	r0, r4
 8003134:	dd03      	ble.n	800313e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
 8003136:	4629      	mov	r1, r5
 8003138:	4620      	mov	r0, r4
 800313a:	f7fd fd99 	bl	8000c70 <z_clock_set_timeout>
	__asm__ volatile(
 800313e:	f386 8811 	msr	BASEPRI, r6
 8003142:	f3bf 8f6f 	isb	sy
}
 8003146:	bd70      	pop	{r4, r5, r6, pc}

08003148 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
 8003148:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
 800314a:	f7ff fb2d 	bl	80027a8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
 800314e:	bd08      	pop	{r3, pc}

08003150 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8003150:	b508      	push	{r3, lr}
	__asm__ volatile(
 8003152:	f04f 0210 	mov.w	r2, #16
 8003156:	f3ef 8311 	mrs	r3, BASEPRI
 800315a:	f382 8811 	msr	BASEPRI, r2
 800315e:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
 8003162:	f7ff ffc7 	bl	80030f4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8003166:	2101      	movs	r1, #1
 8003168:	2802      	cmp	r0, #2
 800316a:	bfd8      	it	le
 800316c:	4608      	movle	r0, r1
 800316e:	f7ff ffd1 	bl	8003114 <z_set_timeout_expiry>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8003172:	f7fd feaf 	bl	8000ed4 <arch_cpu_idle>
}
 8003176:	e7ec      	b.n	8003152 <idle+0x2>

08003178 <k_heap_init>:
{
 8003178:	b410      	push	{r4}
 800317a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
 800317e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
 8003182:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
 8003184:	f7ff bbdf 	b.w	8002946 <sys_heap_init>

08003188 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
 8003188:	4770      	bx	lr
